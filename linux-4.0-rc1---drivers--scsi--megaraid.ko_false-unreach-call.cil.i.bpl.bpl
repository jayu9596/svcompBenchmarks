var $M.0: i8;

var $M.1: [ref]i8;

var $M.2: [ref]i16;

var $M.3: [ref]i32;

var $M.4: i32;

var $M.5: i16;

var $M.6: i32;

var $M.7: [ref]i32;

var $M.8: [ref]ref;

var $M.9: [ref]ref;

var $M.10: ref;

var $M.11: [ref]i8;

var $M.12: i32;

var $M.13: [ref]i8;

var $M.14: [ref]i64;

var $M.15: [ref]ref;

var $M.16: [ref]ref;

var $M.17: [ref]i16;

var $M.18: i32;

var $M.19: i32;

var $M.20: i8;

var $M.21: i32;

var $M.22: i16;

var $M.23: [ref]i32;

var $M.24: i32;

var $M.25: i32;

var $M.26: [ref]ref;

var $M.27: [ref]i64;

var $M.28: [ref]i64;

var $M.29: i8;

var $M.30: i32;

var $M.31: i32;

var $M.32: i32;

var $M.33: [ref]ref;

var $M.34: [ref]i8;

var $M.35: [ref]i8;

var $M.36: [ref]i16;

var $M.37: [ref]i32;

var $M.38: [ref]i32;

var $M.39: [ref]i8;

var $M.40: [ref]i8;

var $M.41: [ref]i8;

var $M.42: [ref]i8;

var $M.43: [ref]i8;

var $M.44: [ref]i64;

var $M.45: [ref]i8;

var $M.46: [ref]i64;

var $M.47: [ref]i8;

var $M.48: [ref]i64;

var $M.49: [ref]i8;

var $M.50: [ref]i64;

var $M.51: i32;

var $M.52: i32;

var $M.53: i32;

var $M.54: [ref]i32;

var $M.55: [ref]i32;

var $M.56: [ref]i32;

var $M.57: i32;

var $M.58: i32;

var $M.59: i32;

var $M.60: i32;

var $M.61: i32;

var $M.62: i32;

var $M.63: i32;

var $M.64: i32;

var $M.65: i32;

var $M.66: i32;

var $M.67: i32;

var $M.68: i32;

var $M.69: i32;

var $M.70: i16;

var $M.71: i32;

var $M.72: i32;

var $M.73: i32;

var $M.74: i32;

var $M.79: [ref]i32;

var $M.80: [ref]i32;

var $M.81: [ref]i32;

var $M.82: [ref]i32;

var $M.83: [ref]i32;

var $M.84: [ref]i32;

var $M.85: [ref]i64;

var $M.162: [ref]i8;

var $M.163: [ref]i8;

var $M.164: [ref]i8;

var $M.165: [ref]i8;

var $M.166: [ref]i8;

var $M.167: [ref]i8;

var $M.168: [ref]i8;

var $M.169: [ref]i8;

var $M.170: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 800508);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32840));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const ldv_linux_alloc_usb_lock_lock: ref;

axiom ldv_linux_alloc_usb_lock_lock == $sub.ref(0, 1028);

const ldv_linux_arch_io_iomem: ref;

axiom ldv_linux_arch_io_iomem == $sub.ref(0, 2056);

const ldv_linux_block_request_blk_rq: ref;

axiom ldv_linux_block_request_blk_rq == $sub.ref(0, 3084);

const ldv_linux_drivers_base_class_usb_gadget_class: ref;

axiom ldv_linux_drivers_base_class_usb_gadget_class == $sub.ref(0, 4112);

const ldv_linux_fs_char_dev_usb_gadget_chrdev: ref;

axiom ldv_linux_fs_char_dev_usb_gadget_chrdev == $sub.ref(0, 5140);

const ldv_linux_fs_sysfs_sysfs: ref;

axiom ldv_linux_fs_sysfs_sysfs == $sub.ref(0, 6168);

const ldv_linux_kernel_locking_rwlock_rlock: ref;

axiom ldv_linux_kernel_locking_rwlock_rlock == $sub.ref(0, 7196);

const ldv_linux_kernel_locking_rwlock_wlock: ref;

axiom ldv_linux_kernel_locking_rwlock_wlock == $sub.ref(0, 8224);

const ldv_linux_kernel_module_module_refcounter: ref;

axiom ldv_linux_kernel_module_module_refcounter == $sub.ref(0, 9252);

const ldv_linux_kernel_rcu_srcu_srcu_nested: ref;

axiom ldv_linux_kernel_rcu_srcu_srcu_nested == $sub.ref(0, 10280);

const ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh: ref;

axiom ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh == $sub.ref(0, 11308);

const ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched: ref;

axiom ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched == $sub.ref(0, 12336);

const ldv_linux_kernel_rcu_update_lock_rcu_nested: ref;

axiom ldv_linux_kernel_rcu_update_lock_rcu_nested == $sub.ref(0, 13364);

const ldv_linux_mmc_sdio_func_sdio_element: ref;

axiom ldv_linux_mmc_sdio_func_sdio_element == $sub.ref(0, 14390);

const ldv_linux_net_register_probe_state: ref;

axiom ldv_linux_net_register_probe_state == $sub.ref(0, 15418);

const rtnllocknumber: ref;

axiom rtnllocknumber == $sub.ref(0, 16446);

const locksocknumber: ref;

axiom locksocknumber == $sub.ref(0, 17474);

const ldv_linux_usb_coherent_coherent_state: ref;

axiom ldv_linux_usb_coherent_coherent_state == $sub.ref(0, 18502);

const LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS: ref;

axiom LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS == $sub.ref(0, 19530);

const ldv_linux_usb_gadget_usb_gadget: ref;

axiom ldv_linux_usb_gadget_usb_gadget == $sub.ref(0, 20558);

const ldv_linux_usb_register_probe_state: ref;

axiom ldv_linux_usb_register_probe_state == $sub.ref(0, 21586);

const ldv_linux_usb_urb_urb_state: ref;

axiom ldv_linux_usb_urb_urb_state == $sub.ref(0, 22614);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode == $sub.ref(0, 23639);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_int_mtx_of_NOT_ARG_SIGN: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_int_mtx_of_NOT_ARG_SIGN == $sub.ref(0, 24664);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock == $sub.ref(0, 25689);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_megadev_mutex: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_megadev_mutex == $sub.ref(0, 26714);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device == $sub.ref(0, 27739);

const {:count 4} __mod_pci__megaraid_pci_tbl_device_table: ref;

axiom __mod_pci__megaraid_pci_tbl_device_table == $sub.ref(0, 28891);

const ldv_thread_0: ref;

axiom ldv_thread_0 == $sub.ref(0, 29931);

const ldv_thread_1: ref;

axiom ldv_thread_1 == $sub.ref(0, 30971);

const ldv_thread_10: ref;

axiom ldv_thread_10 == $sub.ref(0, 32011);

const ldv_thread_11: ref;

axiom ldv_thread_11 == $sub.ref(0, 33051);

const ldv_thread_12: ref;

axiom ldv_thread_12 == $sub.ref(0, 34091);

const ldv_thread_13: ref;

axiom ldv_thread_13 == $sub.ref(0, 35131);

const ldv_thread_14: ref;

axiom ldv_thread_14 == $sub.ref(0, 36171);

const ldv_thread_15: ref;

axiom ldv_thread_15 == $sub.ref(0, 37211);

const ldv_thread_16: ref;

axiom ldv_thread_16 == $sub.ref(0, 38251);

const ldv_thread_17: ref;

axiom ldv_thread_17 == $sub.ref(0, 39291);

const ldv_thread_18: ref;

axiom ldv_thread_18 == $sub.ref(0, 40331);

const ldv_thread_2: ref;

axiom ldv_thread_2 == $sub.ref(0, 41371);

const ldv_thread_28: ref;

axiom ldv_thread_28 == $sub.ref(0, 42411);

const ldv_thread_3: ref;

axiom ldv_thread_3 == $sub.ref(0, 43451);

const ldv_thread_4: ref;

axiom ldv_thread_4 == $sub.ref(0, 44491);

const ldv_thread_5: ref;

axiom ldv_thread_5 == $sub.ref(0, 45531);

const ldv_thread_6: ref;

axiom ldv_thread_6 == $sub.ref(0, 46571);

const ldv_thread_7: ref;

axiom ldv_thread_7 == $sub.ref(0, 47611);

const ldv_thread_8: ref;

axiom ldv_thread_8 == $sub.ref(0, 48651);

const ldv_thread_9: ref;

axiom ldv_thread_9 == $sub.ref(0, 49691);

const ldv_linux_lib_idr_idr: ref;

axiom ldv_linux_lib_idr_idr == $sub.ref(0, 50719);

const ldv_linux_kernel_sched_completion_completion_int_waitq_of_NOT_ARG_SIGN: ref;

axiom ldv_linux_kernel_sched_completion_completion_int_waitq_of_NOT_ARG_SIGN == $sub.ref(0, 51747);

const ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct == $sub.ref(0, 52775);

const ldv_linux_kernel_locking_spinlock_spin_ptl: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_ptl == $sub.ref(0, 53803);

const ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data == $sub.ref(0, 54831);

const ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN == $sub.ref(0, 55859);

const ldv_linux_kernel_locking_spinlock_spin_lock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock == $sub.ref(0, 56887);

const ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode == $sub.ref(0, 57915);

const ldv_linux_kernel_locking_spinlock_spin_host_lock_of_Scsi_Host: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_host_lock_of_Scsi_Host == $sub.ref(0, 58943);

const ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct == $sub.ref(0, 59971);

const __ldv_in_interrupt_context: ref;

axiom __ldv_in_interrupt_context == $sub.ref(0, 60996);

const ldv_linux_block_queue_queue_state: ref;

axiom ldv_linux_block_queue_queue_state == $sub.ref(0, 62024);

const ldv_linux_block_genhd_disk_state: ref;

axiom ldv_linux_block_genhd_disk_state == $sub.ref(0, 63052);

const driver_ver: ref;

axiom driver_ver == $sub.ref(0, 64080);

const megadev_mutex: ref;

axiom megadev_mutex == $sub.ref(0, 65264);

const mega_proc_fops: ref;

axiom mega_proc_fops == $sub.ref(0, 66528);

const {:count 14} mega_proc_files: ref;

axiom mega_proc_files == $sub.ref(0, 67888);

const {:count 32} mcontroller: ref;

axiom mcontroller == $sub.ref(0, 69936);

const {:count 32} hba_soft_state: ref;

axiom hba_soft_state == $sub.ref(0, 71216);

const {:count 32} mega_hbas: ref;

axiom mega_hbas == $sub.ref(0, 72752);

const hba_count: ref;

axiom hba_count == $sub.ref(0, 73780);

const megaraid_template: ref;

axiom megaraid_template == $sub.ref(0, 75140);

const max_sectors_per_io: ref;

axiom max_sectors_per_io == $sub.ref(0, 76166);

const trace_level: ref;

axiom trace_level == $sub.ref(0, 77194);

const megadev_fops: ref;

axiom megadev_fops == $sub.ref(0, 78458);

const mega_proc_dir_entry: ref;

axiom mega_proc_dir_entry == $sub.ref(0, 79490);

const max_mbox_busy_wait: ref;

axiom max_mbox_busy_wait == $sub.ref(0, 80516);

const max_cmd_per_lun: ref;

axiom max_cmd_per_lun == $sub.ref(0, 81544);

const {:count 4} megaraid_pci_tbl: ref;

axiom megaraid_pci_tbl == $sub.ref(0, 82696);

const megaraid_pci_driver: ref;

axiom megaraid_pci_driver == $sub.ref(0, 84032);

const major: ref;

axiom major == $sub.ref(0, 85060);

const {:count 16} .str.4: ref;

axiom .str.4 == $sub.ref(0, 86100);

const {:count 31} .str.151: ref;

axiom .str.151 == $sub.ref(0, 87155);

const {:count 36} .str.127: ref;

axiom .str.127 == $sub.ref(0, 88215);

const pv_cpu_ops: ref;

axiom pv_cpu_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 24} .str.128: ref;

axiom .str.128 == $sub.ref(0, 89263);

const iomem_resource: ref;

axiom iomem_resource == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const ioport_resource: ref;

axiom ioport_resource == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 5} .str.139: ref;

axiom .str.139 == $sub.ref(0, 90292);

const {:count 7} .str.138: ref;

axiom .str.138 == $sub.ref(0, 91323);

const {:count 8} .str.140: ref;

axiom .str.140 == $sub.ref(0, 92355);

const {:count 13} .str.141: ref;

axiom .str.141 == $sub.ref(0, 93392);

const {:count 15} .str.142: ref;

axiom .str.142 == $sub.ref(0, 94431);

const {:count 15} .str.143: ref;

axiom .str.143 == $sub.ref(0, 95470);

const {:count 15} .str.144: ref;

axiom .str.144 == $sub.ref(0, 96509);

const {:count 15} .str.145: ref;

axiom .str.145 == $sub.ref(0, 97548);

const {:count 15} .str.146: ref;

axiom .str.146 == $sub.ref(0, 98587);

const {:count 15} .str.147: ref;

axiom .str.147 == $sub.ref(0, 99626);

const {:count 17} .str.148: ref;

axiom .str.148 == $sub.ref(0, 100667);

const {:count 17} .str.149: ref;

axiom .str.149 == $sub.ref(0, 101708);

const {:count 17} .str.150: ref;

axiom .str.150 == $sub.ref(0, 102749);

const {:count 6} .str.135: ref;

axiom .str.135 == $sub.ref(0, 103779);

const {:count 37} .str.23: ref;

axiom .str.23 == $sub.ref(0, 104840);

const pv_irq_ops: ref;

axiom pv_irq_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 34} .str.24: ref;

axiom .str.24 == $sub.ref(0, 105898);

const dma_ops: ref;

axiom dma_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 43} .str.98: ref;

axiom .str.98 == $sub.ref(0, 106965);

const {:count 17} .str.99: ref;

axiom .str.99 == $sub.ref(0, 108006);

const {:count 9} .str.3: ref;

axiom .str.3 == $sub.ref(0, 109039);

const {:count 29} .str.100: ref;

axiom .str.100 == $sub.ref(0, 110092);

const {:count 37} .str.101: ref;

axiom .str.101 == $sub.ref(0, 111153);

const {:count 52} .str.102: ref;

axiom .str.102 == $sub.ref(0, 112229);

const {:count 25} .str.103: ref;

axiom .str.103 == $sub.ref(0, 113278);

const {:count 24} .str.104: ref;

axiom .str.104 == $sub.ref(0, 114326);

const {:count 38} .str.105: ref;

axiom .str.105 == $sub.ref(0, 115388);

const {:count 5} .str.106: ref;

axiom .str.106 == $sub.ref(0, 116417);

const {:count 448} .str.107: ref;

axiom .str.107 == $sub.ref(0, 117889);

const {:count 5} .str.108: ref;

axiom .str.108 == $sub.ref(0, 118918);

const {:count 7} .str.109: ref;

axiom .str.109 == $sub.ref(0, 119949);

const {:count 152} .str.110: ref;

axiom .str.110 == $sub.ref(0, 121125);

const {:count 7} .str.111: ref;

axiom .str.111 == $sub.ref(0, 122156);

const {:count 7} .str.112: ref;

axiom .str.112 == $sub.ref(0, 123187);

const {:count 18} .str.113: ref;

axiom .str.113 == $sub.ref(0, 124229);

const {:count 44} .str.114: ref;

axiom .str.114 == $sub.ref(0, 125297);

const {:count 57} .str.170: ref;

axiom .str.170 == $sub.ref(0, 126378);

const {:count 9} .str.153: ref;

axiom .str.153 == $sub.ref(0, 127411);

const {:count 6} .str.154: ref;

axiom .str.154 == $sub.ref(0, 128441);

const {:count 39} .str.152: ref;

axiom .str.152 == $sub.ref(0, 129504);

const {:count 30} .str.155: ref;

axiom .str.155 == $sub.ref(0, 130558);

const {:count 35} .str.156: ref;

axiom .str.156 == $sub.ref(0, 131617);

const {:count 38} .str.157: ref;

axiom .str.157 == $sub.ref(0, 132679);

const {:count 31} .str.158: ref;

axiom .str.158 == $sub.ref(0, 133734);

const {:count 40} .str.16: ref;

axiom .str.16 == $sub.ref(0, 134798);

const .str: ref;

axiom .str == $sub.ref(0, 135882);

const {:count 35} .str.159: ref;

axiom .str.159 == $sub.ref(0, 136941);

const {:count 21} .str.160: ref;

axiom .str.160 == $sub.ref(0, 137986);

const {:count 41} .str.161: ref;

axiom .str.161 == $sub.ref(0, 139051);

const {:count 23} .str.162: ref;

axiom .str.162 == $sub.ref(0, 140098);

const __preempt_count: ref;

axiom __preempt_count == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const {:count 28} .str.122: ref;

axiom .str.122 == $sub.ref(0, 141150);

const {:count 19} .str.165: ref;

axiom .str.165 == $sub.ref(0, 142193);

const {:count 31} .str.166: ref;

axiom .str.166 == $sub.ref(0, 143248);

const {:count 31} .str.167: ref;

axiom .str.167 == $sub.ref(0, 144303);

const {:count 8} .str.168: ref;

axiom .str.168 == $sub.ref(0, 145335);

const {:count 32} .str.169: ref;

axiom .str.169 == $sub.ref(0, 146391);

const {:count 31} .str.136: ref;

axiom .str.136 == $sub.ref(0, 147446);

const {:count 32} .str.137: ref;

axiom .str.137 == $sub.ref(0, 148502);

const {:count 31} .str.132: ref;

axiom .str.132 == $sub.ref(0, 149557);

const {:count 33} .str.133: ref;

axiom .str.133 == $sub.ref(0, 150614);

const {:count 36} .str.134: ref;

axiom .str.134 == $sub.ref(0, 151674);

const {:count 33} .str.130: ref;

axiom .str.130 == $sub.ref(0, 152731);

const {:count 33} .str.131: ref;

axiom .str.131 == $sub.ref(0, 153788);

const {:count 51} .str.123: ref;

axiom .str.123 == $sub.ref(0, 154863);

const {:count 12} .str.124: ref;

axiom .str.124 == $sub.ref(0, 155899);

const {:count 48} .str.125: ref;

axiom .str.125 == $sub.ref(0, 156971);

const {:count 36} .str.126: ref;

axiom .str.126 == $sub.ref(0, 158031);

const {:count 41} .str.129: ref;

axiom .str.129 == $sub.ref(0, 159096);

const {:count 28} .str.117: ref;

axiom .str.117 == $sub.ref(0, 160148);

const {:count 35} .str.118: ref;

axiom .str.118 == $sub.ref(0, 161207);

const {:count 39} .str.119: ref;

axiom .str.119 == $sub.ref(0, 162270);

const {:count 37} .str.120: ref;

axiom .str.120 == $sub.ref(0, 163331);

const {:count 24} .str.121: ref;

axiom .str.121 == $sub.ref(0, 164379);

const x86_dma_fallback_dev: ref;

axiom x86_dma_fallback_dev == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32832));

const {:count 9} .str.115: ref;

axiom .str.115 == $sub.ref(0, 165412);

const {:count 25} .str.7: ref;

axiom .str.7 == $sub.ref(0, 166461);

const {:count 28} .str.8: ref;

axiom .str.8 == $sub.ref(0, 167513);

const {:count 23} .str.25: ref;

axiom .str.25 == $sub.ref(0, 168560);

const {:count 26} .str.26: ref;

axiom .str.26 == $sub.ref(0, 169610);

const {:count 25} .str.27: ref;

axiom .str.27 == $sub.ref(0, 170659);

const {:count 21} .str.28: ref;

axiom .str.28 == $sub.ref(0, 171704);

const {:count 15} .str.29: ref;

axiom .str.29 == $sub.ref(0, 172743);

const {:count 16} .str.30: ref;

axiom .str.30 == $sub.ref(0, 173783);

const {:count 15} .str.31: ref;

axiom .str.31 == $sub.ref(0, 174822);

const {:count 15} .str.32: ref;

axiom .str.32 == $sub.ref(0, 175861);

const {:count 15} .str.33: ref;

axiom .str.33 == $sub.ref(0, 176900);

const {:count 32} .str.34: ref;

axiom .str.34 == $sub.ref(0, 177956);

const {:count 29} .str.35: ref;

axiom .str.35 == $sub.ref(0, 179009);

const {:count 17} .str.36: ref;

axiom .str.36 == $sub.ref(0, 180050);

const {:count 17} .str.37: ref;

axiom .str.37 == $sub.ref(0, 181091);

const {:count 18} .str.38: ref;

axiom .str.38 == $sub.ref(0, 182133);

const {:count 14} .str.39: ref;

axiom .str.39 == $sub.ref(0, 183171);

const {:count 14} .str.40: ref;

axiom .str.40 == $sub.ref(0, 184209);

const {:count 16} .str.41: ref;

axiom .str.41 == $sub.ref(0, 185249);

const {:count 13} .str.42: ref;

axiom .str.42 == $sub.ref(0, 186286);

const {:count 11} .str.43: ref;

axiom .str.43 == $sub.ref(0, 187321);

const {:count 15} .str.44: ref;

axiom .str.44 == $sub.ref(0, 188360);

const {:count 13} .str.45: ref;

axiom .str.45 == $sub.ref(0, 189397);

const {:count 13} .str.46: ref;

axiom .str.46 == $sub.ref(0, 190434);

const {:count 15} .str.47: ref;

axiom .str.47 == $sub.ref(0, 191473);

const {:count 12} .str.48: ref;

axiom .str.48 == $sub.ref(0, 192509);

const {:count 12} .str.49: ref;

axiom .str.49 == $sub.ref(0, 193545);

const {:count 36} .str.9: ref;

axiom .str.9 == $sub.ref(0, 194605);

const {:count 33} .str.10: ref;

axiom .str.10 == $sub.ref(0, 195662);

const {:count 33} .str.11: ref;

axiom .str.11 == $sub.ref(0, 196719);

const {:count 34} .str.12: ref;

axiom .str.12 == $sub.ref(0, 197777);

const {:count 36} .str.13: ref;

axiom .str.13 == $sub.ref(0, 198837);

const {:count 40} .str.14: ref;

axiom .str.14 == $sub.ref(0, 199901);

const {:count 3} .str.15: ref;

axiom .str.15 == $sub.ref(0, 200928);

const {:count 11} .str.17: ref;

axiom .str.17 == $sub.ref(0, 201963);

const {:count 10} .str.18: ref;

axiom .str.18 == $sub.ref(0, 202997);

const {:count 8} .str.19: ref;

axiom .str.19 == $sub.ref(0, 204029);

const {:count 14} .str.20: ref;

axiom .str.20 == $sub.ref(0, 205067);

const {:count 42} .str.21: ref;

axiom .str.21 == $sub.ref(0, 206133);

const {:count 6} .str.22: ref;

axiom .str.22 == $sub.ref(0, 207163);

const {:count 20} .str.54: ref;

axiom .str.54 == $sub.ref(0, 208207);

const {:count 13} .str.55: ref;

axiom .str.55 == $sub.ref(0, 209244);

const {:count 16} .str.56: ref;

axiom .str.56 == $sub.ref(0, 210284);

const {:count 13} .str.57: ref;

axiom .str.57 == $sub.ref(0, 211321);

const {:count 18} .str.58: ref;

axiom .str.58 == $sub.ref(0, 212363);

const {:count 14} .str.59: ref;

axiom .str.59 == $sub.ref(0, 213401);

const {:count 20} .str.60: ref;

axiom .str.60 == $sub.ref(0, 214445);

const {:count 13} .str.61: ref;

axiom .str.61 == $sub.ref(0, 215482);

const {:count 17} .str.62: ref;

axiom .str.62 == $sub.ref(0, 216523);

const {:count 22} .str.50: ref;

axiom .str.50 == $sub.ref(0, 217569);

const {:count 32} .str.88: ref;

axiom .str.88 == $sub.ref(0, 218625);

const {:count 25} .str.89: ref;

axiom .str.89 == $sub.ref(0, 219674);

const {:count 25} .str.90: ref;

axiom .str.90 == $sub.ref(0, 220723);

const {:count 23} .str.91: ref;

axiom .str.91 == $sub.ref(0, 221770);

const {:count 25} .str.92: ref;

axiom .str.92 == $sub.ref(0, 222819);

const {:count 25} .str.93: ref;

axiom .str.93 == $sub.ref(0, 223868);

const {:count 25} .str.94: ref;

axiom .str.94 == $sub.ref(0, 224917);

const {:count 25} .str.95: ref;

axiom .str.95 == $sub.ref(0, 225966);

const {:count 23} .str.96: ref;

axiom .str.96 == $sub.ref(0, 227013);

const {:count 25} .str.97: ref;

axiom .str.97 == $sub.ref(0, 228062);

const {:count 45} .str.51: ref;

axiom .str.51 == $sub.ref(0, 229131);

const {:count 16} .str.52: ref;

axiom .str.52 == $sub.ref(0, 230171);

const {:count 47} .str.53: ref;

axiom .str.53 == $sub.ref(0, 231242);

const {:count 53} .str.63: ref;

axiom .str.63 == $sub.ref(0, 232319);

const {:count 4} .str.64: ref;

axiom .str.64 == $sub.ref(0, 233347);

const {:count 18} .str.65: ref;

axiom .str.65 == $sub.ref(0, 234389);

const {:count 37} .str.66: ref;

axiom .str.66 == $sub.ref(0, 235450);

const {:count 13} .str.67: ref;

axiom .str.67 == $sub.ref(0, 236487);

const {:count 39} .str.68: ref;

axiom .str.68 == $sub.ref(0, 237550);

const {:count 48} .str.69: ref;

axiom .str.69 == $sub.ref(0, 238622);

const {:count 43} .str.70: ref;

axiom .str.70 == $sub.ref(0, 239689);

const {:count 50} .str.71: ref;

axiom .str.71 == $sub.ref(0, 240763);

const {:count 25} .str.72: ref;

axiom .str.72 == $sub.ref(0, 241812);

const {:count 36} .str.73: ref;

axiom .str.73 == $sub.ref(0, 242872);

const {:count 29} .str.74: ref;

axiom .str.74 == $sub.ref(0, 243925);

const {:count 54} .str.75: ref;

axiom .str.75 == $sub.ref(0, 245003);

const {:count 25} .str.76: ref;

axiom .str.76 == $sub.ref(0, 246052);

const {:count 25} .str.77: ref;

axiom .str.77 == $sub.ref(0, 247101);

const {:count 25} .str.78: ref;

axiom .str.78 == $sub.ref(0, 248150);

const {:count 25} .str.79: ref;

axiom .str.79 == $sub.ref(0, 249199);

const {:count 25} .str.80: ref;

axiom .str.80 == $sub.ref(0, 250248);

const {:count 25} .str.81: ref;

axiom .str.81 == $sub.ref(0, 251297);

const {:count 25} .str.82: ref;

axiom .str.82 == $sub.ref(0, 252346);

const {:count 25} .str.83: ref;

axiom .str.83 == $sub.ref(0, 253395);

const {:count 25} .str.84: ref;

axiom .str.84 == $sub.ref(0, 254444);

const {:count 21} .str.85: ref;

axiom .str.85 == $sub.ref(0, 255489);

const {:count 25} .str.86: ref;

axiom .str.86 == $sub.ref(0, 256538);

const {:count 25} .str.87: ref;

axiom .str.87 == $sub.ref(0, 257587);

const {:count 24} .str.163: ref;

axiom .str.163 == $sub.ref(0, 258635);

const {:count 14} .str.164: ref;

axiom .str.164 == $sub.ref(0, 259673);

const {:count 15} .str.2: ref;

axiom .str.2 == $sub.ref(0, 260712);

const {:count 43} .str.5: ref;

axiom .str.5 == $sub.ref(0, 261779);

const {:count 43} .str.6: ref;

axiom .str.6 == $sub.ref(0, 262846);

const nr_cpu_ids: ref;

axiom nr_cpu_ids == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32840));

const .str.1: ref;

axiom .str.1 == $sub.ref(0, 263871);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 264903);

const {:count 3} .str.1.298: ref;

axiom .str.1.298 == $sub.ref(0, 265930);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 266968);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 267996);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 269028);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const ldv_in_interrupt_context: ref;

axiom ldv_in_interrupt_context == $sub.ref(0, 270060);

procedure ldv_in_interrupt_context() returns ($r: i1);
  free requires assertsPassed;



implementation ldv_in_interrupt_context() returns ($r: i1)
{
  var $i0: i8;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $i0 := $M.0;
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i1 := $trunc.i8.i1($i0);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const megaraid_probe_one: ref;

axiom megaraid_probe_one == $sub.ref(0, 271092);

procedure megaraid_probe_one($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.7, $M.8, $M.9, $M.6, $M.12, $CurrAddr, $M.21, assertsPassed, $M.11, $M.0, $M.19, $M.30, $M.31, $M.20, $M.23, $M.29, $M.26, $M.24;



implementation megaraid_probe_one($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $p13: ref;
  var $i14: i32;
  var $i15: i8;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i26: i16;
  var $i27: i32;
  var $i28: i1;
  var $i29: i16;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $i36: i64;
  var $i39: i32;
  var $i40: i1;
  var $i41: i64;
  var $i42: i64;
  var $i37: i64;
  var $p43: ref;
  var $i44: i16;
  var $p45: ref;
  var $i46: i16;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $p61: ref;
  var $i62: i64;
  var $p63: ref;
  var $i64: i32;
  var $p67: ref;
  var $i68: i64;
  var $i69: i64;
  var $i70: i1;
  var $i71: i64;
  var $p72: ref;
  var $i73: i64;
  var $i74: i1;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $i86: i64;
  var $i87: i64;
  var $p88: ref;
  var $i89: i64;
  var $i90: i1;
  var $i84: i64;
  var $i85: i64;
  var $p91: ref;
  var $i92: i64;
  var $i93: i1;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $p101: ref;
  var $i102: i64;
  var $i103: i1;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i32;
  var $p110: ref;
  var $p111: ref;
  var $p114: ref;
  var $p115: ref;
  var $i116: i32;
  var $i117: i16;
  var $p118: ref;
  var $i119: i16;
  var $i120: i32;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i64;
  var $i128: i1;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $i138: i32;
  var $i139: i32;
  var $i140: i32;
  var $i141: i32;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $i152: i64;
  var $i153: i1;
  var $p156: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $i161: i64;
  var $i162: i1;
  var $p165: ref;
  var $i166: i32;
  var $i167: i64;
  var $i168: i64;
  var $i169: i1;
  var $p170: ref;
  var $p171: ref;
  var $i172: i32;
  var $i173: i1;
  var $i176: i32;
  var $i177: i1;
  var $i179: i32;
  var $i180: i1;
  var $i182: i32;
  var $i183: i1;
  var $i184: i32;
  var $i185: i1;
  var $p186: ref;
  var $p187: ref;
  var $i188: i32;
  var $i189: i1;
  var $p191: ref;
  var $p192: ref;
  var $i193: i32;
  var $i194: i1;
  var $i196: i32;
  var $i197: i1;
  var $i198: i32;
  var $i199: i32;
  var $i200: i1;
  var $p201: ref;
  var $p202: ref;
  var $i203: i32;
  var $i204: i1;
  var $p206: ref;
  var $i207: i32;
  var $i208: i32;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $i212: i32;
  var $i213: i1;
  var $p215: ref;
  var $i216: i32;
  var $i217: i32;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $i221: i32;
  var $i222: i1;
  var $p224: ref;
  var $i225: i32;
  var $i226: i32;
  var $p227: ref;
  var $i228: i32;
  var $i229: i1;
  var $i230: i32;
  var $i231: i64;
  var $p233: ref;
  var $i234: i32;
  var $i235: i64;
  var $p237: ref;
  var $p238: ref;
  var $i239: i32;
  var $i240: i1;
  var $p242: ref;
  var $i243: i8;
  var $i244: i32;
  var $i245: i1;
  var $i247: i64;
  var $p249: ref;
  var $i250: i32;
  var $i251: i1;
  var $i246: i32;
  var $i252: i32;
  var $i254: i64;
  var $p256: ref;
  var $i257: i32;
  var $i258: i1;
  var $i253: i32;
  var $p260: ref;
  var $p262: ref;
  var $p263: ref;
  var $i264: i32;
  var $i265: i32;
  var $p266: ref;
  var $p267: ref;
  var $i268: i32;
  var $p269: ref;
  var $i270: i32;
  var $i271: i1;
  var $p272: ref;
  var $p273: ref;
  var $i274: i32;
  var $i275: i64;
  var $p276: ref;
  var $i277: i32;
  var $i278: i64;
  var $p280: ref;
  var $i281: i8;
  var $i282: i64;
  var $p284: ref;
  var $p285: ref;
  var $i286: i8;
  var $i287: i64;
  var $p289: ref;
  var $i290: i64;
  var $p292: ref;
  var $p293: ref;
  var $i294: i32;
  var $i295: i16;
  var $i296: i64;
  var $p298: ref;
  var $i299: i32;
  var $i300: i32;
  var $i301: i8;
  var $i302: i64;
  var $p304: ref;
  var $i305: i64;
  var $p307: ref;
  var $p308: ref;
  var $i309: i32;
  var $i310: i16;
  var $i311: i64;
  var $p313: ref;
  var $i314: i32;
  var $i315: i32;
  var $i316: i8;
  var $i317: i64;
  var $p319: ref;
  var $i320: i32;
  var $i321: i32;
  var $i322: i32;
  var $i323: i32;
  var $i324: i64;
  var $p326: ref;
  var $p327: ref;
  var $i328: i32;
  var $i329: i64;
  var $i330: i64;
  var $i331: i1;
  var $p333: ref;
  var $p335: ref;
  var $p336: ref;
  var $p337: ref;
  var $p338: ref;
  var $p339: ref;
  var $p340: ref;
  var $p341: ref;
  var $i342: i32;
  var $p343: ref;
  var $p344: ref;
  var $i345: i32;
  var $i346: i1;
  var $p347: ref;
  var $i348: i32;
  var $p350: ref;
  var $i351: i32;
  var $p352: ref;
  var $p353: ref;
  var $i354: i32;
  var $i355: i1;
  var $i356: i32;
  var $i357: i32;
  var $i181: i32;
  var $p358: ref;
  var $p359: ref;
  var $p360: ref;
  var $p361: ref;
  var $p362: ref;
  var $p363: ref;
  var $i364: i64;
  var $i178: i32;
  var $p365: ref;
  var $p366: ref;
  var $p367: ref;
  var $i368: i32;
  var $p369: ref;
  var $i175: i32;
  var $p370: ref;
  var $p371: ref;
  var $p372: ref;
  var $i164: i32;
  var $p373: ref;
  var $p374: ref;
  var $p375: ref;
  var $p376: ref;
  var $p377: ref;
  var $i378: i64;
  var $i155: i32;
  var $i94: i32;
  var $i379: i64;
  var $i380: i1;
  var $p381: ref;
  var $i81: i64;
  var $i82: i64;
  var $i83: i32;
  var $i382: i64;
  var $i383: i1;
  var $i76: i32;
  var $i8: i32;
  var $i24: i32;
  var $p385: ref;
  var $p387: ref;
  var $p389: ref;
  var $p391: ref;
  var $p393: ref;
  var $p395: ref;
  var $p397: ref;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: ref;
  var vslice_dummy_var_122: i32;
  var vslice_dummy_var_123: i32;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $i6 := pci_enable_device($p0);
    call {:si_unique_call 5} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} pci_set_master($p0);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(16, 1));
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 1720)), $mul.ref(216, 1));
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.1, $p11);
    call {:si_unique_call 7} {:cexpr "pci_bus"} boogie_si_record_i8($i12);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(56, 1));
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.1, $p13);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    call {:si_unique_call 8} {:cexpr "pci_dev_func"} boogie_si_record_i8($i15);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(60, 1));
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.1, $p16);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 32902);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.1, $p32);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i34 := $and.i64($i33, 67108864);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i35 == 1);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} vslice_dummy_var_115 := pci_read_config_dword($p0, 164, $p3);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.3, $p3);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 665);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i37 := $i42;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(64, 1));
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i44 := $load.i16($M.1, $p43);
    call {:si_unique_call 12} {:cexpr "subsysvid"} boogie_si_record_i16($i44);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(66, 1));
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i46 := $load.i16($M.1, $p45);
    call {:si_unique_call 13} {:cexpr "subsysid"} boogie_si_record_i16($i46);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.1, $p47);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.1, $p49);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i12);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} vslice_dummy_var_116 := printk.ref.i32.i32.i32(.str.98, $i48, $i50, $i51);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i15);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $i54 := $ashr.i32($i53, 3);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 31);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i15);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i56, 7);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} vslice_dummy_var_117 := printk.ref.i32.i32(.str.99, $i55, $i57);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i62 := $load.i64($M.1, $p61);
    call {:si_unique_call 16} {:cexpr "mega_baseport"} boogie_si_record_i64($i62);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1572, 1));
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.1, $p63);
    call {:si_unique_call 17} {:cexpr "irq"} boogie_si_record_i32($i64);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $i68 := $load.i64($M.1, $p67);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i69 := $and.i64($i68, 512);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i70 == 1);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i86 := $or.i64($i37, 268435456);
    call {:si_unique_call 21} {:cexpr "flag"} boogie_si_record_i64($i86);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i87 := $add.i64($i62, 16);
    call {:si_unique_call 22} {:cexpr "mega_baseport"} boogie_si_record_i64($i87);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} $p88 := __request_region(ioport_resource, $i87, 16, .str.3, 0);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p88);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $i90 := $eq.i64($i89, 0);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i84, $i85 := $i87, $i86;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $p91 := ldv_scsi_host_alloc_115(megaraid_template, 1912);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p91);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i93 := $eq.i64($i92, 0);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p91, $mul.ref(0, 3816)), $mul.ref(3816, 1));
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p96);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.1;
    call {:si_unique_call 30} cmdloc_dummy_var_1 := $memset.i8(cmdloc_dummy_var_0, $p97, 0, 1912, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_1;
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p91, $mul.ref(0, 3816)), $mul.ref(768, 1));
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.1, $p98);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} vslice_dummy_var_120 := printk.ref.i32.i64.i32(.str.102, $i99, $i84, $i64);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(8, 1));
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p101, $i84);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i102 := $and.i64($i85, 536870912);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i103 := $ne.i64($i102, 0);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(72, 1));
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} INIT_LIST_HEAD($p106);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(88, 1));
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} INIT_LIST_HEAD($p107);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(104, 1));
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} INIT_LIST_HEAD($p108);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i64.i32($i85);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p110, $i109);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(1360, 1));
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} vslice_dummy_var_121 := spinlock_check($p111);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(1360, 1)), $mul.ref(0, 1));
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p114);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} __raw_spin_lock_init($p115, .str.103, $p4);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i116 := $M.4;
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $i117 := $trunc.i32.i16($i116);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p91, $mul.ref(0, 3816)), $mul.ref(816, 1));
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p118, $i117);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i119 := $M.5;
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i120 := $zext.i16.i32($i119);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p91, $mul.ref(0, 3816)), $mul.ref(824, 1));
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p121, $i120);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(64, 1));
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p122, $p0);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(120, 1));
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p123, $p91);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(120, 1));
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.1, $p124);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p125, $mul.ref(0, 3816)), $mul.ref(940, 1));
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p126, $i64);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i127 := $and.i64($i85, 536870912);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $i128 := $ne.i64($i127, 0);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i128 == 1);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(120, 1));
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.1, $p132);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p133, $mul.ref(0, 3816)), $mul.ref(928, 1));
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p134, $i62);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(120, 1));
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.1, $p135);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p136, $mul.ref(0, 3816)), $mul.ref(936, 1));
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p137, 16);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i138 := $zext.i8.i32($i12);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i139 := $shl.i32($i138, 8);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $i140 := $zext.i8.i32($i15);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $i141 := $or.i32($i139, $i140);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(120, 1));
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.1, $p142);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p143, $mul.ref(0, 3816)), $mul.ref(800, 1));
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p144, $i141);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(64, 1));
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.1, $p145);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(136, 1));
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $p148 := pci_alloc_consistent($p146, 2048, $p147);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(128, 1));
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p149, $p148);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(128, 1));
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.1, $p150);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $i152 := $p2i.ref.i64($p151);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i153 := $eq.i64($i152, 0);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    assume {:branchcond $i153} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $p156 := kmalloc(23184, 208);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(1176, 1));
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p158, $p156);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(1176, 1));
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $p160 := $load.ref($M.1, $p159);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $i161 := $p2i.ref.i64($p160);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i162 := $eq.i64($i161, 0);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    assume {:branchcond $i162} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.1, $p165);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $i167 := $zext.i32.i64($i166);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i168 := $and.i64($i167, 536870912);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $i169 := $ne.i64($i168, 0);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $p170 := (if $i169 == 1 then megaraid_isr_memmapped else megaraid_isr_iomapped);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $p171 := $bitcast.ref.ref($p96);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} $i172 := ldv_request_irq_116($i64, $p170, 128, .str.3, $p171);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 44} {:cexpr "tmp___5"} boogie_si_record_i32($i172);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i173 := $ne.i32($i172, 0);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    assume {:branchcond $i173} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $i176 := mega_setup_mailbox($p96);
    call {:si_unique_call 48} {:cexpr "tmp___6"} boogie_si_record_i32($i176);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $i177 := $ne.i32($i176, 0);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $i179 := mega_query_adapter($p96);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    call {:si_unique_call 51} {:cexpr "tmp___7"} boogie_si_record_i32($i179);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $i180 := $ne.i32($i179, 0);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    assume {:branchcond $i180} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i182 := $zext.i16.i32($i46);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $i183 := $eq.i32($i182, 4369);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    assume {:branchcond $i183} true;
    goto $bb68, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !($i183 == 1);
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i196 := $zext.i16.i32($i44);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $i197 := $eq.i32($i196, 4156);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    assume !($i197 == 1);
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} $i228 := mega_is_bios_enabled($p96);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    call {:si_unique_call 69} {:cexpr "tmp___13"} boogie_si_record_i32($i228);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $i229 := $ne.i32($i228, 0);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    assume {:branchcond $i229} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $i234 := $M.6;
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $i235 := $sext.i32.i64($i234);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref($i235, 16)), $mul.ref(8, 1));
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p237, $p95);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} mega_enum_raid_scsi($p96);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} mega_get_boot_drv($p96);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(1336, 1));
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $i239 := $load.i32($M.1, $p238);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i240 := $ne.i32($i239, 0);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    assume {:branchcond $i240} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i240 == 1);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(1432, 1)), $mul.ref(0, 1));
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p260, 1);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(1432, 1)), $mul.ref(1, 1));
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p393, 1);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(1432, 1)), $mul.ref(2, 1));
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p395, 1);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(1432, 1)), $mul.ref(3, 1));
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p397, 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(1432, 1)), $mul.ref(4, 1));
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p262, 0);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $p385 := $add.ref($add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(1432, 1)), $mul.ref(5, 1));
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p385, 0);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(1432, 1)), $mul.ref(6, 1));
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p387, 0);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(1432, 1)), $mul.ref(7, 1));
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p389, 0);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(1432, 1)), $mul.ref(8, 1));
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p391, 0);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(1444, 1));
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i264 := $load.i32($M.1, $p263);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i265 := $shl.i32($i264, 4);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(1444, 1));
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p266, $i265);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(1352, 1));
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p267, 0);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} $i268 := mega_support_random_del($p96);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(1348, 1));
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p269, $i268);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $i270 := mega_init_scb($p96);
    call {:si_unique_call 77} {:cexpr "tmp___14"} boogie_si_record_i32($i270);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $i271 := $ne.i32($i270, 0);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    assume {:branchcond $i271} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(1184, 1));
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} atomic_set($p272, 0);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(1356, 1));
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} atomic_set($p273, 0);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i274 := $M.6;
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $i275 := $sext.i32.i64($i274);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref(hba_soft_state, $mul.ref(0, 256)), $mul.ref($i275, 8));
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p276, $p95);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $i277 := $M.6;
    call {:si_unique_call 80} {:cexpr "i"} boogie_si_record_i32($i277);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i278 := $sext.i32.i64($i277);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref($i278, 32)), $mul.ref(0, 1));
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p280, $i84);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $i281 := $trunc.i32.i8($i64);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $i282 := $sext.i32.i64($i277);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref($i282, 32)), $mul.ref(8, 1));
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p284, $i281);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(1188, 1));
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $i286 := $load.i8($M.1, $p285);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $i287 := $sext.i32.i64($i277);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref($i287, 32)), $mul.ref(9, 1));
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p289, $i286);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i290 := $sext.i32.i64($i277);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref($i290, 32)), $mul.ref(10, 1));
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p292, $i12);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i294 := $load.i32($M.1, $p293);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $i295 := $trunc.i32.i16($i294);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i296 := $sext.i32.i64($i277);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref($i296, 32)), $mul.ref(12, 1));
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p298, $i295);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i299 := $zext.i8.i32($i15);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i300 := $and.i32($i299, 7);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $i301 := $trunc.i32.i8($i300);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $i302 := $sext.i32.i64($i277);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref($i302, 32)), $mul.ref(14, 1));
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p304, $i301);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i305 := $sext.i32.i64($i277);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref($i305, 32)), $mul.ref(16, 1));
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p307, $sub.i16(0, 1));
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $i309 := $load.i32($M.1, $p308);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i310 := $trunc.i32.i16($i309);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i311 := $sext.i32.i64($i277);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref($i311, 32)), $mul.ref(18, 1));
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p313, $i310);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $i314 := $zext.i8.i32($i15);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $i315 := $ashr.i32($i314, 3);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $i316 := $trunc.i32.i8($i315);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $i317 := $sext.i32.i64($i277);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref($i317, 32)), $mul.ref(20, 1));
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p319, $i316);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $i320 := $zext.i8.i32($i12);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $i321 := $shl.i32($i320, 8);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $i322 := $zext.i8.i32($i15);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $i323 := $or.i32($i321, $i322);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $i324 := $sext.i32.i64($i277);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref($i324, 32)), $mul.ref(24, 1));
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p326, $i323);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $i328 := $load.i32($M.1, $p327);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $i329 := $zext.i32.i64($i328);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i330 := $and.i64($i329, 67108864);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i331 := $ne.i64($i330, 0);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    assume {:branchcond $i331} true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i331 == 1);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} vslice_dummy_var_131 := pci_set_dma_mask($p0, 4294967295);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(1320, 1));
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p335, 0);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(1640, 1));
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} __mutex_init($p336, .str.113, $p5);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(1808, 1));
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} ldv_init_completion_117($p337);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(0, 1));
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p338, 7);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(120, 1));
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $p340 := $load.ref($M.1, $p339);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($p340, $mul.ref(0, 3816)), $mul.ref(808, 1));
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p341, 7);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} $i342 := mega_support_cluster($p96);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(1904, 1));
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p343, $i342);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(1904, 1));
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $i345 := $load.i32($M.1, $p344);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $i346 := $ne.i32($i345, 0);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    assume {:branchcond $i346} true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i346 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $p350 := $bitcast.ref.ref($p91);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} pci_set_drvdata($p0, $p350);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i351 := $M.6;
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $p352 := $M.10;
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} mega_create_proc_entry($i351, $p352);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $i354 := ldv_scsi_add_host_118($p91, $p353);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    call {:si_unique_call 90} {:cexpr "error"} boogie_si_record_i32($i354);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i355 := $ne.i32($i354, 0);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    assume {:branchcond $i355} true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i355 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} scsi_scan_host($p91);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i356 := $M.6;
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $i357 := $add.i32($i356, 1);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $M.6 := $i357;
    call {:si_unique_call 92} {:cexpr "hba_count"} boogie_si_record_i32($i357);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb131:
    assume $i355 == 1;
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i181 := $i354;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $p358 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(64, 1));
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $p359 := $load.ref($M.1, $p358);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(24, 1));
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $p361 := $load.ref($M.1, $p360);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p362 := $bitcast.ref.ref($p361);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(32, 1));
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i364 := $load.i64($M.1, $p363);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} pci_free_consistent($p359, 74, $p362, $i364);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i178 := $i181;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(120, 1));
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $p366 := $load.ref($M.1, $p365);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($p366, $mul.ref(0, 3816)), $mul.ref(940, 1));
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i368 := $load.i32($M.1, $p367);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $p369 := $bitcast.ref.ref($p96);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} ldv_free_irq_119($i368, $p369);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $i175 := $i178;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $p370 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(1176, 1));
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p371 := $load.ref($M.1, $p370);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $p372 := $bitcast.ref.ref($p371);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} kfree($p372);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $i164 := $i175;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(64, 1));
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $p374 := $load.ref($M.1, $p373);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(128, 1));
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $p376 := $load.ref($M.1, $p375);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(136, 1));
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i378 := $load.i64($M.1, $p377);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} pci_free_consistent($p374, 2048, $p376, $i378);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $i155 := $i164;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} scsi_host_put($p91);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $i94 := $i155;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i379 := $and.i64($i85, 536870912);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $i380 := $ne.i64($i379, 0);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    assume {:branchcond $i380} true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i380 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $i81, $i82, $i83 := $i84, $i85, $i94;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $i382 := $and.i64($i82, 536870912);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i383 := $ne.i64($i382, 0);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    assume {:branchcond $i383} true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i383 == 1);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} __release_region(ioport_resource, $i81, 16);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    $i76 := $i83;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} pci_disable_device($p0);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i8 := $i76;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $i24 := $i8;
    goto $bb9;

  $bb137:
    assume $i383 == 1;
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} __release_region(iomem_resource, $i62, 128);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb134:
    assume $i380 == 1;
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $p381 := $i2p.i64.ref($i84);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} ldv_iounmap_120($p381);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    goto $bb136;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb128:
    assume $i346 == 1;
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(0, 1));
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $i348 := $load.i32($M.1, $p347);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} vslice_dummy_var_132 := printk.ref.i32(.str.114, $i348);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    goto $bb130;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb125:
    assume $i331 == 1;
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} vslice_dummy_var_130 := pci_set_dma_mask($p0, $sub.i64(0, 1));
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(1320, 1));
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p333, 1);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb122:
    assume $i271 == 1;
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $i181 := $sub.i32(0, 19);
    goto $bb66;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb98:
    assume $i240 == 1;
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(144, 1)), $mul.ref(121, 1));
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $i243 := $load.i8($M.1, $p242);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $i244 := $zext.i8.i32($i243);
    call {:si_unique_call 72} {:cexpr "j"} boogie_si_record_i32($i244);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $i245 := $slt.i32(0, $i244);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    assume {:branchcond $i245} true;
    goto $bb100, $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    assume !($i245 == 1);
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $i252 := $add.i32($i244, 4);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $i253 := $i244;
    goto $bb108;

  $bb108:
    call $i254, $p256, $i257, $i258, $i253 := megaraid_probe_one_loop_$bb108($p96, $i252, $i254, $p256, $i257, $i258, $i253);
    goto $bb108_last;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $i254 := $sext.i32.i64($i253);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(1432, 1)), $mul.ref($i254, 1));
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p256, 1);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $i257 := $add.i32($i253, 1);
    call {:si_unique_call 74} {:cexpr "i"} boogie_si_record_i32($i257);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $i258 := $slt.i32($i257, $i252);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb110:
    assume $i258 == 1;
    assume {:verifier.code 0} true;
    $i253 := $i257;
    goto $bb110_dummy;

  $bb100:
    assume $i245 == 1;
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $i246 := 0;
    goto $bb103;

  $bb103:
    call $i247, $p249, $i250, $i251, $i246 := megaraid_probe_one_loop_$bb103($p96, $i244, $i247, $p249, $i250, $i251, $i246);
    goto $bb103_last;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $i247 := $sext.i32.i64($i246);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(1432, 1)), $mul.ref($i247, 1));
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p249, 0);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i250 := $add.i32($i246, 1);
    call {:si_unique_call 73} {:cexpr "i"} boogie_si_record_i32($i250);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i251 := $slt.i32($i250, $i244);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i251 == 1);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb105:
    assume $i251 == 1;
    assume {:verifier.code 0} true;
    $i246 := $i250;
    goto $bb105_dummy;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb95:
    assume $i229 == 1;
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i230 := $M.6;
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $i231 := $sext.i32.i64($i230);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref($i231, 16)), $mul.ref(0, 1));
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p233, 1);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    goto $bb97;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb80:
    assume $i197 == 1;
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i198 := $zext.i16.i32($i46);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $i199 := $sub.i32($i198, 24807);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $i200 := $ule.i32($i199, 1);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    assume !($i200 == 1);
    goto $bb82;

  $bb83:
    assume $i200 == 1;
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(1189, 1));
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $p202 := $bitcast.ref.ref($p201);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} $i203 := strcmp($p202, .str.109);
    call {:si_unique_call 60} {:cexpr "tmp___10"} boogie_si_record_i32($i203);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i204 := $eq.i32($i203, 0);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    assume {:branchcond $i204} true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i204 == 1);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(1189, 1));
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $p211 := $bitcast.ref.ref($p210);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} $i212 := strcmp($p211, .str.111);
    call {:si_unique_call 63} {:cexpr "tmp___11"} boogie_si_record_i32($i212);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $i213 := $eq.i32($i212, 0);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    assume {:branchcond $i213} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i213 == 1);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(1189, 1));
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $p220 := $bitcast.ref.ref($p219);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} $i221 := strcmp($p220, .str.112);
    call {:si_unique_call 66} {:cexpr "tmp___12"} boogie_si_record_i32($i221);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i222 := $eq.i32($i221, 0);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    assume {:branchcond $i222} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb91:
    assume $i222 == 1;
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} vslice_dummy_var_129 := printk.ref(.str.110);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $i225 := $load.i32($M.1, $p224);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $i226 := $and.i32($i225, $sub.i32(0, 67108865));
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p227, $i226);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb88:
    assume $i213 == 1;
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} vslice_dummy_var_128 := printk.ref(.str.110);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $i216 := $load.i32($M.1, $p215);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $i217 := $and.i32($i216, $sub.i32(0, 67108865));
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p218, $i217);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb85:
    assume $i204 == 1;
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} vslice_dummy_var_127 := printk.ref(.str.110);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $i207 := $load.i32($M.1, $p206);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $i208 := $and.i32($i207, $sub.i32(0, 67108865));
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p209, $i208);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb68:
    assume $i183 == 1;
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $i184 := $zext.i16.i32($i44);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $i185 := $eq.i32($i184, 4369);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    assume !($i185 == 1);
    goto $bb70;

  $bb71:
    assume $i185 == 1;
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(1189, 1));
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $p187 := $bitcast.ref.ref($p186);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $i188 := strcmp($p187, .str.106);
    call {:si_unique_call 54} {:cexpr "tmp___8"} boogie_si_record_i32($i188);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $i189 := $eq.i32($i188, 0);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    assume {:branchcond $i189} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i189 == 1);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(1189, 1));
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $p192 := $bitcast.ref.ref($p191);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $i193 := strcmp($p192, .str.108);
    call {:si_unique_call 57} {:cexpr "tmp___9"} boogie_si_record_i32($i193);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $i194 := $eq.i32($i193, 0);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    assume {:branchcond $i194} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb76:
    assume $i194 == 1;
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} vslice_dummy_var_126 := printk.ref(.str.107);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb73:
    assume $i189 == 1;
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} vslice_dummy_var_125 := printk.ref(.str.107);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb64:
    assume $i180 == 1;
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $i181 := $sub.i32(0, 19);
    goto $bb66;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb60:
    assume $i177 == 1;
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i178 := $sub.i32(0, 19);
    goto $bb62;

  $bb56:
    assume $i173 == 1;
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} vslice_dummy_var_124 := printk.ref.i32(.str.105, $i64);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i175 := $sub.i32(0, 19);
    goto $bb58;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb52:
    assume $i162 == 1;
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} vslice_dummy_var_123 := printk.ref(.str.104);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $i164 := $sub.i32(0, 19);
    goto $bb54;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb48:
    assume $i153 == 1;
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} vslice_dummy_var_122 := printk.ref(.str.104);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i155 := $sub.i32(0, 19);
    goto $bb50;

  $bb45:
    assume $i128 == 1;
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(120, 1));
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.1, $p129);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p130, $mul.ref(0, 3816)), $mul.ref(920, 1));
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p131, $i62);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb42:
    assume $i103 == 1;
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p104 := $i2p.i64.ref($i84);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p96, $mul.ref(0, 1912)), $mul.ref(16, 1));
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p105, $p104);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb38:
    assume $i93 == 1;
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $i94 := $sub.i32(0, 19);
    goto $bb40;

  $bb35:
    assume $i90 == 1;
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i76 := $sub.i32(0, 19);
    goto $bb28;

  $bb24:
    assume $i70 == 1;
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $i71 := $or.i64($i37, 536870912);
    call {:si_unique_call 19} {:cexpr "flag"} boogie_si_record_i64($i71);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} $p72 := __request_region(iomem_resource, $i62, 128, .str.3, 0);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p72);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $i74 := $eq.i64($i73, 0);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} $p77 := ioremap($i62, 128);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    call {:si_unique_call 27} {:cexpr "mega_baseport"} boogie_si_record_i64($i78);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $i79 := $eq.i64($i78, 0);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i84, $i85 := $i78, $i71;
    goto $bb34;

  $bb30:
    assume $i79 == 1;
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} vslice_dummy_var_119 := printk.ref(.str.101);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $i81, $i82, $i83 := $i78, $i71, $sub.i32(0, 19);
    goto $bb32;

  $bb26:
    assume $i74 == 1;
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} vslice_dummy_var_118 := printk.ref(.str.100);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i76 := $sub.i32(0, 19);
    goto $bb28;

  $bb21:
    assume $i40 == 1;
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i41 := $or.i64(0, 67108864);
    call {:si_unique_call 18} {:cexpr "flag"} boogie_si_record_i64($i41);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i42 := $i41;
    goto $bb23;

  $bb18:
    assume $i35 == 1;
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i36 := $or.i64(0, 67108864);
    call {:si_unique_call 10} {:cexpr "flag"} boogie_si_record_i64($i36);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb20;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p0);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p20, $mul.ref(16, 4));
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.1, $p21);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, $sub.i32(0, 1073738223));
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} vslice_dummy_var_114 := pci_read_config_word($p0, 160, $p2);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.2, $p2);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 52428);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.2, $p2);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 13124);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb13;

  $bb14:
    assume $i31 == 1;
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 19);
    goto $bb9;

  $bb7:
    assume $i23 == 1;
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 19);
    goto $bb9;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 19);
    goto $bb3;

  $bb110_dummy:
    assume false;
    return;

  $bb108_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_407;

  $bb105_dummy:
    assume false;
    return;

  $bb103_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_395;
}



const megaraid_remove_one: ref;

axiom megaraid_remove_one == $sub.ref(0, 272124);

procedure megaraid_remove_one($p0: ref);
  free requires assertsPassed;
  modifies $M.11, $M.6, $M.1, $CurrAddr, $M.12, assertsPassed, $M.19, $M.20, $M.21;



implementation megaraid_remove_one($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $i53: i64;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $i80: i32;
  var $i81: i32;
  var vslice_dummy_var_133: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} $p1 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} $p2 := pci_get_drvdata($p0);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 3816)), $mul.ref(3816, 1));
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} ldv_scsi_remove_host_122($p3);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} __megaraid_shutdown($p5);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.1, $p6);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $i9 := $and.i64($i8, 536870912);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 1912)), $mul.ref(8, 1));
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.1, $p18);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} __release_region(ioport_resource, $i19, 16);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} mega_free_sgl($p5);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 1912)), $mul.ref(1208, 1));
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p5, $mul.ref(0, 1912)), $mul.ref(64, 1));
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.1, $p64);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p5, $mul.ref(0, 1912)), $mul.ref(128, 1));
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.1, $p66);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p5, $mul.ref(0, 1912)), $mul.ref(136, 1));
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $i69 := $load.i64($M.1, $p68);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} pci_free_consistent($p65, 2048, $p67, $i69);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p5, $mul.ref(0, 1912)), $mul.ref(1176, 1));
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.1, $p70);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} kfree($p72);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p5, $mul.ref(0, 1912)), $mul.ref(64, 1));
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.1, $p73);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p5, $mul.ref(0, 1912)), $mul.ref(24, 1));
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.1, $p75);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p5, $mul.ref(0, 1912)), $mul.ref(32, 1));
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i79 := $load.i64($M.1, $p78);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} pci_free_consistent($p74, 74, $p77, $i79);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} scsi_host_put($p3);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} pci_disable_device($p0);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $i80 := $M.6;
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $i81 := $sub.i32($i80, 1);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $M.6 := $i81;
    call {:si_unique_call 125} {:cexpr "hba_count"} boogie_si_record_i32($i81);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i23 == 1;
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 1912)), $mul.ref(1208, 1));
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.1, $p24);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} remove_proc_entry(.str.139, $p25);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref(0, 1912)), $mul.ref(1208, 1));
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} remove_proc_entry(.str.138, $p27);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref(0, 1912)), $mul.ref(1208, 1));
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.1, $p28);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} remove_proc_entry(.str.140, $p29);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 1912)), $mul.ref(1208, 1));
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.1, $p30);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} remove_proc_entry(.str.141, $p31);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p5, $mul.ref(0, 1912)), $mul.ref(1208, 1));
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.1, $p32);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} remove_proc_entry(.str.142, $p33);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p5, $mul.ref(0, 1912)), $mul.ref(1208, 1));
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.1, $p34);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} remove_proc_entry(.str.143, $p35);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p5, $mul.ref(0, 1912)), $mul.ref(1208, 1));
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.1, $p36);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} remove_proc_entry(.str.144, $p37);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p5, $mul.ref(0, 1912)), $mul.ref(1208, 1));
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.1, $p38);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} remove_proc_entry(.str.145, $p39);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p5, $mul.ref(0, 1912)), $mul.ref(1208, 1));
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.1, $p40);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} remove_proc_entry(.str.146, $p41);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p5, $mul.ref(0, 1912)), $mul.ref(1208, 1));
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.1, $p42);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} remove_proc_entry(.str.147, $p43);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 1912)), $mul.ref(1208, 1));
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.1, $p44);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} remove_proc_entry(.str.148, $p45);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p5, $mul.ref(0, 1912)), $mul.ref(1208, 1));
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.1, $p46);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} remove_proc_entry(.str.149, $p47);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p5, $mul.ref(0, 1912)), $mul.ref(1208, 1));
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.1, $p48);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} remove_proc_entry(.str.150, $p49);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p50, 0);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $i51 := 1;
    goto $bb6;

  $bb6:
    call $i51, $i52, $i53, $p54, $i55 := megaraid_remove_one_loop_$bb6($p1, $i51, $i52, $i53, $p54, $i55);
    goto $bb6_last;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i52 := $uge.i32($i51, 12);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i53 := $zext.i32.i64($i51);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref($i53, 1));
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p54, 0);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i51, 1);
    call {:si_unique_call 119} {:cexpr "tmp___0"} boogie_si_record_i32($i55);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i51 := $i55;
    goto corral_source_split_671_dummy;

  $bb8:
    assume $i52 == 1;
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p1);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p5, $mul.ref(0, 1912)), $mul.ref(120, 1));
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.1, $p57);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 3816)), $mul.ref(768, 1));
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.1, $p59);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} vslice_dummy_var_133 := sprintf.ref.ref.i32($p56, .str.135, $i60);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p1);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p63 := $M.10;
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} remove_proc_entry($p62, $p63);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 1912)), $mul.ref(8, 1));
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.1, $p11);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} ldv_iounmap_123($p13);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 1912)), $mul.ref(120, 1));
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 3816)), $mul.ref(920, 1));
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.1, $p16);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} __release_region(iomem_resource, $i17, 128);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  corral_source_split_671_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_652;
}



const megaraid_shutdown: ref;

axiom megaraid_shutdown == $sub.ref(0, 273156);

procedure megaraid_shutdown($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.11, $M.6, $M.19, $M.20, $M.21, $M.12, assertsPassed;



implementation megaraid_shutdown($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 3816)), $mul.ref(3816, 1));
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} __megaraid_shutdown($p4);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const pci_get_drvdata: ref;

axiom pci_get_drvdata == $sub.ref(0, 274188);

procedure pci_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __megaraid_shutdown: ref;

axiom __megaraid_shutdown == $sub.ref(0, 275220);

procedure __megaraid_shutdown($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.11, $M.6, $M.19, $M.20, $M.21, $M.12, assertsPassed;



implementation __megaraid_shutdown($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i23: i32;
  var $i24: i1;
  var $i22: i32;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} $p1 := $alloc($mul.ref(15, $zext.i32.i64(1)));
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_2 := $M.1;
    call {:si_unique_call 130} cmdloc_dummy_var_3 := $memset.i8(cmdloc_dummy_var_2, $p4, 0, 15, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_3;
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 15)), $mul.ref(0, 1));
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p5, 10);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(120, 1));
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 3816)), $mul.ref(940, 1));
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.1, $p8);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p0);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} ldv_free_irq_121($i9, $p10);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} vslice_dummy_var_134 := issue_scb_block($p0, $p11);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_4 := $M.1;
    call {:si_unique_call 133} cmdloc_dummy_var_5 := $memset.i8(cmdloc_dummy_var_4, $p14, 0, 15, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_5;
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 15)), $mul.ref(0, 1));
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p15, $sub.i8(0, 2));
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p1);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} vslice_dummy_var_135 := issue_scb_block($p0, $p16);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1184, 1));
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $i19 := atomic_read($p18);
    call {:si_unique_call 136} {:cexpr "tmp"} boogie_si_record_i32($i19);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i20 := $sgt.i32($i19, 0);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb4;

  $bb4:
    call $i23, $i24, $i22 := __megaraid_shutdown_loop_$bb4($i23, $i24, $i22);
    goto $bb4_last;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} __const_udelay(4295000);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} __const_udelay(4295000);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} __const_udelay(4295000);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} __const_udelay(4295000);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} __const_udelay(4295000);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} __const_udelay(4295000);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} __const_udelay(4295000);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} __const_udelay(4295000);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} __const_udelay(4295000);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} __const_udelay(4295000);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} __const_udelay(4295000);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} __const_udelay(4295000);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} __const_udelay(4295000);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} __const_udelay(4295000);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} __const_udelay(4295000);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} __const_udelay(4295000);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} __const_udelay(4295000);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} __const_udelay(4295000);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} __const_udelay(4295000);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} __const_udelay(4295000);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} __const_udelay(4295000);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} __const_udelay(4295000);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} __const_udelay(4295000);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} __const_udelay(4295000);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} __const_udelay(4295000);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} __const_udelay(4295000);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} __const_udelay(4295000);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} __const_udelay(4295000);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} __const_udelay(4295000);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} __const_udelay(4295000);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} __const_udelay(4295000);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} __const_udelay(4295000);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} __const_udelay(4295000);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} __const_udelay(4295000);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} __const_udelay(4295000);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} __const_udelay(4295000);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} __const_udelay(4295000);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} __const_udelay(4295000);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} __const_udelay(4295000);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} __const_udelay(4295000);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} __const_udelay(4295000);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} __const_udelay(4295000);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} __const_udelay(4295000);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} __const_udelay(4295000);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} __const_udelay(4295000);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} __const_udelay(4295000);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} __const_udelay(4295000);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} __const_udelay(4295000);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} __const_udelay(4295000);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} __const_udelay(4295000);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} __const_udelay(4295000);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} __const_udelay(4295000);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} __const_udelay(4295000);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} __const_udelay(4295000);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} __const_udelay(4295000);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} __const_udelay(4295000);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} __const_udelay(4295000);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} __const_udelay(4295000);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} __const_udelay(4295000);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} __const_udelay(4295000);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} __const_udelay(4295000);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} __const_udelay(4295000);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} __const_udelay(4295000);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} __const_udelay(4295000);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} __const_udelay(4295000);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} __const_udelay(4295000);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} __const_udelay(4295000);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} __const_udelay(4295000);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} __const_udelay(4295000);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} __const_udelay(4295000);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} __const_udelay(4295000);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} __const_udelay(4295000);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} __const_udelay(4295000);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} __const_udelay(4295000);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} __const_udelay(4295000);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} __const_udelay(4295000);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} __const_udelay(4295000);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} __const_udelay(4295000);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} __const_udelay(4295000);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} __const_udelay(4295000);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} __const_udelay(4295000);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} __const_udelay(4295000);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} __const_udelay(4295000);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} __const_udelay(4295000);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} __const_udelay(4295000);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} __const_udelay(4295000);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} __const_udelay(4295000);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} __const_udelay(4295000);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} __const_udelay(4295000);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} __const_udelay(4295000);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} __const_udelay(4295000);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} __const_udelay(4295000);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} __const_udelay(4295000);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} __const_udelay(4295000);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} __const_udelay(4295000);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} __const_udelay(4295000);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} __const_udelay(4295000);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} __const_udelay(4295000);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} __const_udelay(4295000);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} __const_udelay(4295000);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} __const_udelay(4295000);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} __const_udelay(4295000);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} __const_udelay(4295000);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} __const_udelay(4295000);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} __const_udelay(4295000);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} __const_udelay(4295000);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} __const_udelay(4295000);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} __const_udelay(4295000);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} __const_udelay(4295000);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} __const_udelay(4295000);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} __const_udelay(4295000);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} __const_udelay(4295000);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} __const_udelay(4295000);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} __const_udelay(4295000);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} __const_udelay(4295000);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} __const_udelay(4295000);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} __const_udelay(4295000);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} __const_udelay(4295000);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} __const_udelay(4295000);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} __const_udelay(4295000);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} __const_udelay(4295000);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} __const_udelay(4295000);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} __const_udelay(4295000);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} __const_udelay(4295000);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} __const_udelay(4295000);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} __const_udelay(4295000);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} __const_udelay(4295000);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} __const_udelay(4295000);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} __const_udelay(4295000);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} __const_udelay(4295000);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} __const_udelay(4295000);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} __const_udelay(4295000);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} __const_udelay(4295000);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} __const_udelay(4295000);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} __const_udelay(4295000);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} __const_udelay(4295000);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} __const_udelay(4295000);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} __const_udelay(4295000);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} __const_udelay(4295000);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} __const_udelay(4295000);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} __const_udelay(4295000);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} __const_udelay(4295000);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} __const_udelay(4295000);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} __const_udelay(4295000);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} __const_udelay(4295000);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} __const_udelay(4295000);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} __const_udelay(4295000);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} __const_udelay(4295000);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} __const_udelay(4295000);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} __const_udelay(4295000);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} __const_udelay(4295000);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} __const_udelay(4295000);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} __const_udelay(4295000);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} __const_udelay(4295000);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} __const_udelay(4295000);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} __const_udelay(4295000);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} __const_udelay(4295000);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} __const_udelay(4295000);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} __const_udelay(4295000);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} __const_udelay(4295000);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} __const_udelay(4295000);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} __const_udelay(4295000);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} __const_udelay(4295000);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} __const_udelay(4295000);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} __const_udelay(4295000);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} __const_udelay(4295000);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} __const_udelay(4295000);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} __const_udelay(4295000);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} __const_udelay(4295000);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} __const_udelay(4295000);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} __const_udelay(4295000);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} __const_udelay(4295000);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} __const_udelay(4295000);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} __const_udelay(4295000);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} __const_udelay(4295000);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} __const_udelay(4295000);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} __const_udelay(4295000);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} __const_udelay(4295000);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} __const_udelay(4295000);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} __const_udelay(4295000);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} __const_udelay(4295000);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} __const_udelay(4295000);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} __const_udelay(4295000);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} __const_udelay(4295000);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} __const_udelay(4295000);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} __const_udelay(4295000);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} __const_udelay(4295000);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} __const_udelay(4295000);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} __const_udelay(4295000);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} __const_udelay(4295000);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} __const_udelay(4295000);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} __const_udelay(4295000);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} __const_udelay(4295000);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} __const_udelay(4295000);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} __const_udelay(4295000);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} __const_udelay(4295000);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} __const_udelay(4295000);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} __const_udelay(4295000);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} __const_udelay(4295000);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} __const_udelay(4295000);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} __const_udelay(4295000);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} __const_udelay(4295000);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} __const_udelay(4295000);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} __const_udelay(4295000);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} __const_udelay(4295000);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} __const_udelay(4295000);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} __const_udelay(4295000);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} __const_udelay(4295000);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} __const_udelay(4295000);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} __const_udelay(4295000);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} __const_udelay(4295000);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} __const_udelay(4295000);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} __const_udelay(4295000);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} __const_udelay(4295000);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} __const_udelay(4295000);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} __const_udelay(4295000);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} __const_udelay(4295000);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} __const_udelay(4295000);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} __const_udelay(4295000);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} __const_udelay(4295000);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} __const_udelay(4295000);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} __const_udelay(4295000);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} __const_udelay(4295000);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} __const_udelay(4295000);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} __const_udelay(4295000);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} __const_udelay(4295000);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} __const_udelay(4295000);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} __const_udelay(4295000);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} __const_udelay(4295000);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} __const_udelay(4295000);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} __const_udelay(4295000);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} __const_udelay(4295000);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} __const_udelay(4295000);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} __const_udelay(4295000);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} __const_udelay(4295000);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} __const_udelay(4295000);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} __const_udelay(4295000);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} __const_udelay(4295000);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} __const_udelay(4295000);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} __const_udelay(4295000);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} __const_udelay(4295000);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} __const_udelay(4295000);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} __const_udelay(4295000);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} __const_udelay(4295000);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} __const_udelay(4295000);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} __const_udelay(4295000);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} __const_udelay(4295000);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} __const_udelay(4295000);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} __const_udelay(4295000);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} __const_udelay(4295000);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} __const_udelay(4295000);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} __const_udelay(4295000);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} __const_udelay(4295000);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} __const_udelay(4295000);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} __const_udelay(4295000);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} __const_udelay(4295000);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} __const_udelay(4295000);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} __const_udelay(4295000);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} __const_udelay(4295000);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} __const_udelay(4295000);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} __const_udelay(4295000);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} __const_udelay(4295000);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} __const_udelay(4295000);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} __const_udelay(4295000);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} __const_udelay(4295000);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} __const_udelay(4295000);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} __const_udelay(4295000);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} __const_udelay(4295000);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} __const_udelay(4295000);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} __const_udelay(4295000);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} __const_udelay(4295000);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} __const_udelay(4295000);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} __const_udelay(4295000);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} __const_udelay(4295000);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} __const_udelay(4295000);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} __const_udelay(4295000);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} __const_udelay(4295000);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} __const_udelay(4295000);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} __const_udelay(4295000);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} __const_udelay(4295000);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} __const_udelay(4295000);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} __const_udelay(4295000);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} __const_udelay(4295000);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} __const_udelay(4295000);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} __const_udelay(4295000);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} __const_udelay(4295000);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} __const_udelay(4295000);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} __const_udelay(4295000);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} __const_udelay(4295000);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} __const_udelay(4295000);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} __const_udelay(4295000);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} __const_udelay(4295000);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} __const_udelay(4295000);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} __const_udelay(4295000);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} __const_udelay(4295000);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} __const_udelay(4295000);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} __const_udelay(4295000);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} __const_udelay(4295000);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} __const_udelay(4295000);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} __const_udelay(4295000);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} __const_udelay(4295000);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} __const_udelay(4295000);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} __const_udelay(4295000);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} __const_udelay(4295000);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} __const_udelay(4295000);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} __const_udelay(4295000);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} __const_udelay(4295000);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} __const_udelay(4295000);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} __const_udelay(4295000);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} __const_udelay(4295000);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} __const_udelay(4295000);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} __const_udelay(4295000);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} __const_udelay(4295000);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} __const_udelay(4295000);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} __const_udelay(4295000);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} __const_udelay(4295000);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} __const_udelay(4295000);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} __const_udelay(4295000);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} __const_udelay(4295000);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} __const_udelay(4295000);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} __const_udelay(4295000);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} __const_udelay(4295000);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} __const_udelay(4295000);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} __const_udelay(4295000);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} __const_udelay(4295000);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} __const_udelay(4295000);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} __const_udelay(4295000);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} __const_udelay(4295000);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} __const_udelay(4295000);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} __const_udelay(4295000);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} __const_udelay(4295000);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} __const_udelay(4295000);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} __const_udelay(4295000);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} __const_udelay(4295000);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} __const_udelay(4295000);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} __const_udelay(4295000);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} __const_udelay(4295000);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} __const_udelay(4295000);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} __const_udelay(4295000);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} __const_udelay(4295000);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} __const_udelay(4295000);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} __const_udelay(4295000);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} __const_udelay(4295000);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} __const_udelay(4295000);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} __const_udelay(4295000);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} __const_udelay(4295000);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} __const_udelay(4295000);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} __const_udelay(4295000);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    goto $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} __const_udelay(4295000);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} __const_udelay(4295000);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} __const_udelay(4295000);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} __const_udelay(4295000);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} __const_udelay(4295000);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} __const_udelay(4295000);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} __const_udelay(4295000);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} __const_udelay(4295000);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} __const_udelay(4295000);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} __const_udelay(4295000);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} __const_udelay(4295000);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} __const_udelay(4295000);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} __const_udelay(4295000);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} __const_udelay(4295000);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} __const_udelay(4295000);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} __const_udelay(4295000);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} __const_udelay(4295000);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} __const_udelay(4295000);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} __const_udelay(4295000);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} __const_udelay(4295000);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} __const_udelay(4295000);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} __const_udelay(4295000);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} __const_udelay(4295000);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} __const_udelay(4295000);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} __const_udelay(4295000);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} __const_udelay(4295000);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} __const_udelay(4295000);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} __const_udelay(4295000);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} __const_udelay(4295000);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} __const_udelay(4295000);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} __const_udelay(4295000);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} __const_udelay(4295000);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} __const_udelay(4295000);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} __const_udelay(4295000);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} __const_udelay(4295000);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} __const_udelay(4295000);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} __const_udelay(4295000);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} __const_udelay(4295000);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} __const_udelay(4295000);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} __const_udelay(4295000);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} __const_udelay(4295000);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} __const_udelay(4295000);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    goto $bb401;

  $bb401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} __const_udelay(4295000);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} __const_udelay(4295000);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} __const_udelay(4295000);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} __const_udelay(4295000);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} __const_udelay(4295000);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} __const_udelay(4295000);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    goto $bb407;

  $bb407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} __const_udelay(4295000);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    goto $bb408;

  $bb408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} __const_udelay(4295000);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    goto $bb409;

  $bb409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} __const_udelay(4295000);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    goto $bb410;

  $bb410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} __const_udelay(4295000);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} __const_udelay(4295000);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} __const_udelay(4295000);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} __const_udelay(4295000);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} __const_udelay(4295000);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} __const_udelay(4295000);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} __const_udelay(4295000);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} __const_udelay(4295000);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} __const_udelay(4295000);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} __const_udelay(4295000);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    goto $bb420;

  $bb420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} __const_udelay(4295000);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    goto $bb421;

  $bb421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} __const_udelay(4295000);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} __const_udelay(4295000);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    goto $bb423;

  $bb423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} __const_udelay(4295000);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    goto $bb424;

  $bb424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} __const_udelay(4295000);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} __const_udelay(4295000);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    goto $bb426;

  $bb426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} __const_udelay(4295000);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    goto $bb427;

  $bb427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} __const_udelay(4295000);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    goto $bb428;

  $bb428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} __const_udelay(4295000);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    goto $bb429;

  $bb429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} __const_udelay(4295000);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} __const_udelay(4295000);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} __const_udelay(4295000);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    goto $bb432;

  $bb432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} __const_udelay(4295000);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    goto $bb433;

  $bb433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} __const_udelay(4295000);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} __const_udelay(4295000);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} __const_udelay(4295000);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} __const_udelay(4295000);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} __const_udelay(4295000);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    goto $bb438;

  $bb438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} __const_udelay(4295000);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} __const_udelay(4295000);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    goto $bb440;

  $bb440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} __const_udelay(4295000);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} __const_udelay(4295000);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} __const_udelay(4295000);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} __const_udelay(4295000);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    goto $bb444;

  $bb444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} __const_udelay(4295000);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    goto $bb445;

  $bb445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} __const_udelay(4295000);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    goto $bb446;

  $bb446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} __const_udelay(4295000);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} __const_udelay(4295000);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    goto $bb448;

  $bb448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} __const_udelay(4295000);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    goto $bb449;

  $bb449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} __const_udelay(4295000);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} __const_udelay(4295000);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    goto $bb451;

  $bb451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} __const_udelay(4295000);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    goto $bb452;

  $bb452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} __const_udelay(4295000);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    goto $bb453;

  $bb453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} __const_udelay(4295000);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} __const_udelay(4295000);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} __const_udelay(4295000);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    goto $bb456;

  $bb456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} __const_udelay(4295000);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    goto $bb457;

  $bb457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} __const_udelay(4295000);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    goto $bb458;

  $bb458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} __const_udelay(4295000);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    goto $bb459;

  $bb459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} __const_udelay(4295000);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    goto $bb460;

  $bb460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} __const_udelay(4295000);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    goto $bb461;

  $bb461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} __const_udelay(4295000);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    goto $bb462;

  $bb462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} __const_udelay(4295000);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    goto $bb463;

  $bb463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} __const_udelay(4295000);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    goto $bb464;

  $bb464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} __const_udelay(4295000);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    goto $bb465;

  $bb465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} __const_udelay(4295000);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} __const_udelay(4295000);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} __const_udelay(4295000);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    goto $bb468;

  $bb468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} __const_udelay(4295000);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    goto $bb469;

  $bb469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} __const_udelay(4295000);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} __const_udelay(4295000);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    goto $bb471;

  $bb471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} __const_udelay(4295000);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    goto $bb472;

  $bb472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} __const_udelay(4295000);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    goto $bb473;

  $bb473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} __const_udelay(4295000);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    goto $bb474;

  $bb474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} __const_udelay(4295000);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} __const_udelay(4295000);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    goto $bb476;

  $bb476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} __const_udelay(4295000);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    goto $bb477;

  $bb477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} __const_udelay(4295000);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} __const_udelay(4295000);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    goto $bb479;

  $bb479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} __const_udelay(4295000);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    goto $bb480;

  $bb480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} __const_udelay(4295000);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    goto $bb481;

  $bb481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} __const_udelay(4295000);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    goto $bb482;

  $bb482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} __const_udelay(4295000);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    goto $bb483;

  $bb483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} __const_udelay(4295000);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    goto $bb484;

  $bb484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} __const_udelay(4295000);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    goto $bb485;

  $bb485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} __const_udelay(4295000);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    goto $bb486;

  $bb486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} __const_udelay(4295000);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    goto $bb487;

  $bb487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} __const_udelay(4295000);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    goto $bb488;

  $bb488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} __const_udelay(4295000);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    goto $bb489;

  $bb489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} __const_udelay(4295000);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    goto $bb490;

  $bb490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} __const_udelay(4295000);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    goto $bb491;

  $bb491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} __const_udelay(4295000);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    goto $bb492;

  $bb492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} __const_udelay(4295000);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    goto $bb493;

  $bb493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} __const_udelay(4295000);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} __const_udelay(4295000);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    goto $bb495;

  $bb495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} __const_udelay(4295000);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    goto $bb496;

  $bb496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} __const_udelay(4295000);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    goto $bb497;

  $bb497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} __const_udelay(4295000);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    goto $bb498;

  $bb498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} __const_udelay(4295000);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    goto $bb499;

  $bb499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} __const_udelay(4295000);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    goto $bb500;

  $bb500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} __const_udelay(4295000);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    goto $bb501;

  $bb501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} __const_udelay(4295000);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    goto $bb502;

  $bb502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} __const_udelay(4295000);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} __const_udelay(4295000);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    goto $bb504;

  $bb504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} __const_udelay(4295000);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} __const_udelay(4295000);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} __const_udelay(4295000);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    goto $bb507;

  $bb507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} __const_udelay(4295000);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    goto $bb508;

  $bb508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} __const_udelay(4295000);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    goto $bb509;

  $bb509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} __const_udelay(4295000);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    goto $bb510;

  $bb510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} __const_udelay(4295000);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    goto $bb511;

  $bb511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} __const_udelay(4295000);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    goto $bb512;

  $bb512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} __const_udelay(4295000);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    goto $bb513;

  $bb513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} __const_udelay(4295000);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    goto $bb514;

  $bb514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} __const_udelay(4295000);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    goto $bb515;

  $bb515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} __const_udelay(4295000);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    goto $bb516;

  $bb516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} __const_udelay(4295000);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    goto $bb517;

  $bb517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} __const_udelay(4295000);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    goto $bb518;

  $bb518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} __const_udelay(4295000);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    goto $bb519;

  $bb519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} __const_udelay(4295000);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    goto $bb520;

  $bb520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} __const_udelay(4295000);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    goto $bb521;

  $bb521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} __const_udelay(4295000);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    goto $bb522;

  $bb522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} __const_udelay(4295000);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    goto $bb523;

  $bb523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} __const_udelay(4295000);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    goto $bb524;

  $bb524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} __const_udelay(4295000);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    goto $bb525;

  $bb525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} __const_udelay(4295000);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    goto $bb526;

  $bb526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} __const_udelay(4295000);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    goto $bb527;

  $bb527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} __const_udelay(4295000);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    goto $bb528;

  $bb528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} __const_udelay(4295000);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    goto $bb529;

  $bb529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} __const_udelay(4295000);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    goto $bb530;

  $bb530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} __const_udelay(4295000);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    goto $bb531;

  $bb531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} __const_udelay(4295000);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    goto $bb532;

  $bb532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} __const_udelay(4295000);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    goto $bb533;

  $bb533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} __const_udelay(4295000);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    goto $bb534;

  $bb534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} __const_udelay(4295000);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    goto $bb535;

  $bb535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} __const_udelay(4295000);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} __const_udelay(4295000);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    goto $bb537;

  $bb537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} __const_udelay(4295000);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    goto $bb538;

  $bb538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} __const_udelay(4295000);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    goto $bb539;

  $bb539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} __const_udelay(4295000);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    goto $bb540;

  $bb540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} __const_udelay(4295000);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    goto $bb541;

  $bb541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} __const_udelay(4295000);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} __const_udelay(4295000);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} __const_udelay(4295000);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    goto $bb544;

  $bb544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} __const_udelay(4295000);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    goto $bb545;

  $bb545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} __const_udelay(4295000);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    goto $bb546;

  $bb546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} __const_udelay(4295000);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    goto $bb547;

  $bb547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} __const_udelay(4295000);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    goto $bb548;

  $bb548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} __const_udelay(4295000);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    goto $bb549;

  $bb549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} __const_udelay(4295000);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    goto $bb550;

  $bb550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} __const_udelay(4295000);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    goto $bb551;

  $bb551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} __const_udelay(4295000);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    goto $bb552;

  $bb552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} __const_udelay(4295000);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    goto $bb553;

  $bb553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} __const_udelay(4295000);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    goto $bb554;

  $bb554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} __const_udelay(4295000);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    goto $bb555;

  $bb555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} __const_udelay(4295000);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    goto $bb556;

  $bb556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} __const_udelay(4295000);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    goto $bb557;

  $bb557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} __const_udelay(4295000);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    goto $bb558;

  $bb558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} __const_udelay(4295000);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    goto $bb559;

  $bb559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} __const_udelay(4295000);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    goto $bb560;

  $bb560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} __const_udelay(4295000);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    goto $bb561;

  $bb561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} __const_udelay(4295000);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    goto $bb562;

  $bb562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} __const_udelay(4295000);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    goto $bb563;

  $bb563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} __const_udelay(4295000);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    goto $bb564;

  $bb564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} __const_udelay(4295000);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    goto $bb565;

  $bb565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} __const_udelay(4295000);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    goto $bb566;

  $bb566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} __const_udelay(4295000);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    goto $bb567;

  $bb567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} __const_udelay(4295000);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    goto $bb568;

  $bb568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} __const_udelay(4295000);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    goto $bb569;

  $bb569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} __const_udelay(4295000);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    goto $bb570;

  $bb570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} __const_udelay(4295000);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    goto $bb571;

  $bb571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} __const_udelay(4295000);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} __const_udelay(4295000);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    goto $bb573;

  $bb573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} __const_udelay(4295000);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    goto $bb574;

  $bb574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} __const_udelay(4295000);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    goto $bb575;

  $bb575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} __const_udelay(4295000);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    goto $bb576;

  $bb576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} __const_udelay(4295000);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    goto $bb577;

  $bb577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} __const_udelay(4295000);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    goto $bb578;

  $bb578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} __const_udelay(4295000);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    goto $bb579;

  $bb579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} __const_udelay(4295000);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    goto $bb580;

  $bb580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} __const_udelay(4295000);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    goto $bb581;

  $bb581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} __const_udelay(4295000);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    goto $bb582;

  $bb582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} __const_udelay(4295000);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    goto $bb583;

  $bb583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} __const_udelay(4295000);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    goto $bb584;

  $bb584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} __const_udelay(4295000);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    goto $bb585;

  $bb585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} __const_udelay(4295000);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} __const_udelay(4295000);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    goto $bb587;

  $bb587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} __const_udelay(4295000);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    goto $bb588;

  $bb588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} __const_udelay(4295000);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    goto $bb589;

  $bb589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} __const_udelay(4295000);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    goto $bb590;

  $bb590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} __const_udelay(4295000);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    goto $bb591;

  $bb591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} __const_udelay(4295000);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    goto $bb592;

  $bb592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} __const_udelay(4295000);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    goto $bb593;

  $bb593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} __const_udelay(4295000);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    goto $bb594;

  $bb594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} __const_udelay(4295000);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    goto $bb595;

  $bb595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} __const_udelay(4295000);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    goto $bb596;

  $bb596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} __const_udelay(4295000);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    goto $bb597;

  $bb597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} __const_udelay(4295000);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    goto $bb598;

  $bb598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} __const_udelay(4295000);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    goto $bb599;

  $bb599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} __const_udelay(4295000);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    goto $bb600;

  $bb600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} __const_udelay(4295000);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    goto $bb601;

  $bb601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} __const_udelay(4295000);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    goto $bb602;

  $bb602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} __const_udelay(4295000);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    goto $bb603;

  $bb603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} __const_udelay(4295000);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    goto $bb604;

  $bb604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} __const_udelay(4295000);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    goto $bb605;

  $bb605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} __const_udelay(4295000);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    goto $bb606;

  $bb606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} __const_udelay(4295000);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    goto $bb607;

  $bb607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} __const_udelay(4295000);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    goto $bb608;

  $bb608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} __const_udelay(4295000);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    goto $bb609;

  $bb609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} __const_udelay(4295000);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    goto $bb610;

  $bb610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} __const_udelay(4295000);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    goto $bb611;

  $bb611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} __const_udelay(4295000);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    goto $bb612;

  $bb612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} __const_udelay(4295000);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    goto $bb613;

  $bb613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} __const_udelay(4295000);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    goto $bb614;

  $bb614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} __const_udelay(4295000);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    goto $bb615;

  $bb615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} __const_udelay(4295000);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    goto $bb616;

  $bb616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} __const_udelay(4295000);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    goto $bb617;

  $bb617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} __const_udelay(4295000);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    goto $bb618;

  $bb618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} __const_udelay(4295000);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    goto $bb619;

  $bb619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} __const_udelay(4295000);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    goto $bb620;

  $bb620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} __const_udelay(4295000);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    goto $bb621;

  $bb621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} __const_udelay(4295000);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    goto $bb622;

  $bb622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} __const_udelay(4295000);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    goto $bb623;

  $bb623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} __const_udelay(4295000);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    goto $bb624;

  $bb624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} __const_udelay(4295000);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    goto $bb625;

  $bb625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} __const_udelay(4295000);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    goto $bb626;

  $bb626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} __const_udelay(4295000);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    goto $bb627;

  $bb627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} __const_udelay(4295000);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    goto $bb628;

  $bb628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} __const_udelay(4295000);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    goto $bb629;

  $bb629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} __const_udelay(4295000);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    goto $bb630;

  $bb630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} __const_udelay(4295000);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    goto $bb631;

  $bb631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} __const_udelay(4295000);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    goto $bb632;

  $bb632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} __const_udelay(4295000);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    goto $bb633;

  $bb633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} __const_udelay(4295000);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    goto $bb634;

  $bb634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} __const_udelay(4295000);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    goto $bb635;

  $bb635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} __const_udelay(4295000);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    goto $bb636;

  $bb636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} __const_udelay(4295000);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    goto $bb637;

  $bb637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} __const_udelay(4295000);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    goto $bb638;

  $bb638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} __const_udelay(4295000);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    goto $bb639;

  $bb639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} __const_udelay(4295000);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    goto $bb640;

  $bb640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} __const_udelay(4295000);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    goto $bb641;

  $bb641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} __const_udelay(4295000);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    goto $bb642;

  $bb642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} __const_udelay(4295000);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    goto $bb643;

  $bb643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} __const_udelay(4295000);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    goto $bb644;

  $bb644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} __const_udelay(4295000);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    goto $bb645;

  $bb645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} __const_udelay(4295000);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    goto $bb646;

  $bb646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} __const_udelay(4295000);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    goto $bb647;

  $bb647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} __const_udelay(4295000);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    goto $bb648;

  $bb648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} __const_udelay(4295000);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} __const_udelay(4295000);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    goto $bb650;

  $bb650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} __const_udelay(4295000);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    goto $bb651;

  $bb651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} __const_udelay(4295000);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    goto $bb652;

  $bb652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} __const_udelay(4295000);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    goto $bb653;

  $bb653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} __const_udelay(4295000);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    goto $bb654;

  $bb654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} __const_udelay(4295000);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    goto $bb655;

  $bb655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} __const_udelay(4295000);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    goto $bb656;

  $bb656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} __const_udelay(4295000);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    goto $bb657;

  $bb657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} __const_udelay(4295000);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    goto $bb658;

  $bb658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} __const_udelay(4295000);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    goto $bb659;

  $bb659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} __const_udelay(4295000);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    goto $bb660;

  $bb660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} __const_udelay(4295000);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    goto $bb661;

  $bb661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} __const_udelay(4295000);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    goto $bb662;

  $bb662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} __const_udelay(4295000);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    goto $bb663;

  $bb663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} __const_udelay(4295000);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    goto $bb664;

  $bb664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} __const_udelay(4295000);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    goto $bb665;

  $bb665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} __const_udelay(4295000);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    goto $bb666;

  $bb666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} __const_udelay(4295000);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    goto $bb667;

  $bb667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} __const_udelay(4295000);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    goto $bb668;

  $bb668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} __const_udelay(4295000);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    goto $bb669;

  $bb669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} __const_udelay(4295000);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    goto $bb670;

  $bb670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} __const_udelay(4295000);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    goto $bb671;

  $bb671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} __const_udelay(4295000);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    goto $bb672;

  $bb672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} __const_udelay(4295000);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    goto $bb673;

  $bb673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} __const_udelay(4295000);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    goto $bb674;

  $bb674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} __const_udelay(4295000);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    goto $bb675;

  $bb675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} __const_udelay(4295000);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    goto $bb676;

  $bb676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} __const_udelay(4295000);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    goto $bb677;

  $bb677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} __const_udelay(4295000);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    goto $bb678;

  $bb678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} __const_udelay(4295000);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    goto $bb679;

  $bb679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} __const_udelay(4295000);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    goto $bb680;

  $bb680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} __const_udelay(4295000);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    goto $bb681;

  $bb681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} __const_udelay(4295000);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    goto $bb682;

  $bb682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} __const_udelay(4295000);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    goto $bb683;

  $bb683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} __const_udelay(4295000);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    goto $bb684;

  $bb684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} __const_udelay(4295000);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    goto $bb685;

  $bb685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} __const_udelay(4295000);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    goto $bb686;

  $bb686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} __const_udelay(4295000);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    goto $bb687;

  $bb687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} __const_udelay(4295000);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    goto $bb688;

  $bb688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} __const_udelay(4295000);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    goto $bb689;

  $bb689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} __const_udelay(4295000);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    goto $bb690;

  $bb690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} __const_udelay(4295000);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    goto $bb691;

  $bb691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} __const_udelay(4295000);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    goto $bb692;

  $bb692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} __const_udelay(4295000);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    goto $bb693;

  $bb693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} __const_udelay(4295000);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    goto $bb694;

  $bb694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} __const_udelay(4295000);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    goto $bb695;

  $bb695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} __const_udelay(4295000);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    goto $bb696;

  $bb696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} __const_udelay(4295000);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    goto $bb697;

  $bb697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} __const_udelay(4295000);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    goto $bb698;

  $bb698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} __const_udelay(4295000);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    goto $bb699;

  $bb699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} __const_udelay(4295000);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    goto $bb700;

  $bb700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} __const_udelay(4295000);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    goto $bb701;

  $bb701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} __const_udelay(4295000);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    goto $bb702;

  $bb702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} __const_udelay(4295000);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    goto $bb703;

  $bb703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} __const_udelay(4295000);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    goto $bb704;

  $bb704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} __const_udelay(4295000);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    goto $bb705;

  $bb705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} __const_udelay(4295000);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    goto $bb706;

  $bb706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} __const_udelay(4295000);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    goto $bb707;

  $bb707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} __const_udelay(4295000);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    goto $bb708;

  $bb708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} __const_udelay(4295000);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    goto $bb709;

  $bb709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} __const_udelay(4295000);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    goto $bb710;

  $bb710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} __const_udelay(4295000);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    goto $bb711;

  $bb711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} __const_udelay(4295000);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    goto $bb712;

  $bb712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} __const_udelay(4295000);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    goto $bb713;

  $bb713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} __const_udelay(4295000);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    goto $bb714;

  $bb714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} __const_udelay(4295000);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    goto $bb715;

  $bb715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} __const_udelay(4295000);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    goto $bb716;

  $bb716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} __const_udelay(4295000);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    goto $bb717;

  $bb717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} __const_udelay(4295000);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    goto $bb718;

  $bb718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} __const_udelay(4295000);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    goto $bb719;

  $bb719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} __const_udelay(4295000);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    goto $bb720;

  $bb720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} __const_udelay(4295000);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    goto $bb721;

  $bb721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} __const_udelay(4295000);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    goto $bb722;

  $bb722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} __const_udelay(4295000);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    goto $bb723;

  $bb723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} __const_udelay(4295000);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    goto $bb724;

  $bb724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} __const_udelay(4295000);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    goto $bb725;

  $bb725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} __const_udelay(4295000);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} __const_udelay(4295000);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    goto $bb727;

  $bb727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} __const_udelay(4295000);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    goto $bb728;

  $bb728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} __const_udelay(4295000);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    goto $bb729;

  $bb729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} __const_udelay(4295000);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    goto $bb730;

  $bb730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} __const_udelay(4295000);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    goto $bb731;

  $bb731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} __const_udelay(4295000);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    goto $bb732;

  $bb732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} __const_udelay(4295000);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    goto $bb733;

  $bb733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} __const_udelay(4295000);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    goto $bb734;

  $bb734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} __const_udelay(4295000);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    goto $bb735;

  $bb735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} __const_udelay(4295000);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    goto $bb736;

  $bb736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} __const_udelay(4295000);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    goto $bb737;

  $bb737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} __const_udelay(4295000);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    goto $bb738;

  $bb738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} __const_udelay(4295000);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    goto $bb739;

  $bb739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} __const_udelay(4295000);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    goto $bb740;

  $bb740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} __const_udelay(4295000);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    goto $bb741;

  $bb741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} __const_udelay(4295000);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    goto $bb742;

  $bb742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} __const_udelay(4295000);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    goto $bb743;

  $bb743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} __const_udelay(4295000);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    goto $bb744;

  $bb744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} __const_udelay(4295000);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    goto $bb745;

  $bb745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} __const_udelay(4295000);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    goto $bb746;

  $bb746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} __const_udelay(4295000);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    goto $bb747;

  $bb747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} __const_udelay(4295000);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    goto $bb748;

  $bb748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} __const_udelay(4295000);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    goto $bb749;

  $bb749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} __const_udelay(4295000);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    goto $bb750;

  $bb750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} __const_udelay(4295000);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    goto $bb751;

  $bb751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} __const_udelay(4295000);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    goto $bb752;

  $bb752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} __const_udelay(4295000);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    goto $bb753;

  $bb753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} __const_udelay(4295000);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    goto $bb754;

  $bb754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} __const_udelay(4295000);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    goto $bb755;

  $bb755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} __const_udelay(4295000);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    goto $bb756;

  $bb756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} __const_udelay(4295000);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    goto $bb757;

  $bb757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} __const_udelay(4295000);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    goto $bb758;

  $bb758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} __const_udelay(4295000);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    goto $bb759;

  $bb759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} __const_udelay(4295000);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    goto $bb760;

  $bb760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} __const_udelay(4295000);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    goto $bb761;

  $bb761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} __const_udelay(4295000);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    goto $bb762;

  $bb762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} __const_udelay(4295000);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    goto $bb763;

  $bb763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} __const_udelay(4295000);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    goto $bb764;

  $bb764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} __const_udelay(4295000);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    goto $bb765;

  $bb765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} __const_udelay(4295000);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    goto $bb766;

  $bb766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} __const_udelay(4295000);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    goto $bb767;

  $bb767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} __const_udelay(4295000);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    goto $bb768;

  $bb768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} __const_udelay(4295000);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    goto $bb769;

  $bb769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} __const_udelay(4295000);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    goto $bb770;

  $bb770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} __const_udelay(4295000);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    goto $bb771;

  $bb771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} __const_udelay(4295000);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    goto $bb772;

  $bb772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} __const_udelay(4295000);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    goto $bb773;

  $bb773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} __const_udelay(4295000);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    goto $bb774;

  $bb774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} __const_udelay(4295000);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    goto $bb775;

  $bb775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} __const_udelay(4295000);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    goto $bb776;

  $bb776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} __const_udelay(4295000);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    goto $bb777;

  $bb777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} __const_udelay(4295000);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    goto $bb778;

  $bb778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} __const_udelay(4295000);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    goto $bb779;

  $bb779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} __const_udelay(4295000);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    goto $bb780;

  $bb780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} __const_udelay(4295000);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    goto $bb781;

  $bb781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} __const_udelay(4295000);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    goto $bb782;

  $bb782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} __const_udelay(4295000);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    goto $bb783;

  $bb783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} __const_udelay(4295000);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    goto $bb784;

  $bb784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} __const_udelay(4295000);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    goto $bb785;

  $bb785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} __const_udelay(4295000);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    goto $bb786;

  $bb786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} __const_udelay(4295000);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    goto $bb787;

  $bb787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} __const_udelay(4295000);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    goto $bb788;

  $bb788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} __const_udelay(4295000);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    goto $bb789;

  $bb789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} __const_udelay(4295000);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    goto $bb790;

  $bb790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} __const_udelay(4295000);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    goto $bb791;

  $bb791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} __const_udelay(4295000);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    goto $bb792;

  $bb792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} __const_udelay(4295000);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    goto $bb793;

  $bb793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} __const_udelay(4295000);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    goto $bb794;

  $bb794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} __const_udelay(4295000);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    goto $bb795;

  $bb795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} __const_udelay(4295000);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    goto $bb796;

  $bb796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} __const_udelay(4295000);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    goto $bb797;

  $bb797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} __const_udelay(4295000);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    goto $bb798;

  $bb798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} __const_udelay(4295000);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    goto $bb799;

  $bb799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} __const_udelay(4295000);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    goto $bb800;

  $bb800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} __const_udelay(4295000);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    goto $bb801;

  $bb801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} __const_udelay(4295000);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    goto $bb802;

  $bb802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} __const_udelay(4295000);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    goto $bb803;

  $bb803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} __const_udelay(4295000);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    goto $bb804;

  $bb804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} __const_udelay(4295000);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    goto $bb805;

  $bb805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} __const_udelay(4295000);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    goto $bb806;

  $bb806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} __const_udelay(4295000);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    goto $bb807;

  $bb807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} __const_udelay(4295000);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    goto $bb808;

  $bb808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} __const_udelay(4295000);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    goto $bb809;

  $bb809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} __const_udelay(4295000);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    goto $bb810;

  $bb810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} __const_udelay(4295000);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    goto $bb811;

  $bb811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} __const_udelay(4295000);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    goto $bb812;

  $bb812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} __const_udelay(4295000);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    goto $bb813;

  $bb813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} __const_udelay(4295000);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    goto $bb814;

  $bb814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} __const_udelay(4295000);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    goto $bb815;

  $bb815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} __const_udelay(4295000);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    goto $bb816;

  $bb816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} __const_udelay(4295000);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    goto $bb817;

  $bb817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} __const_udelay(4295000);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    goto $bb818;

  $bb818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} __const_udelay(4295000);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    goto $bb819;

  $bb819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} __const_udelay(4295000);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    goto $bb820;

  $bb820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} __const_udelay(4295000);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    goto $bb821;

  $bb821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} __const_udelay(4295000);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    goto $bb822;

  $bb822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} __const_udelay(4295000);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    goto $bb823;

  $bb823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} __const_udelay(4295000);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    goto $bb824;

  $bb824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} __const_udelay(4295000);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    goto $bb825;

  $bb825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} __const_udelay(4295000);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    goto $bb826;

  $bb826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} __const_udelay(4295000);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    goto $bb827;

  $bb827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} __const_udelay(4295000);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    goto $bb828;

  $bb828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} __const_udelay(4295000);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    goto $bb829;

  $bb829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} __const_udelay(4295000);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    goto $bb830;

  $bb830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} __const_udelay(4295000);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    goto $bb831;

  $bb831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} __const_udelay(4295000);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    goto $bb832;

  $bb832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} __const_udelay(4295000);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    goto $bb833;

  $bb833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} __const_udelay(4295000);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    goto $bb834;

  $bb834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} __const_udelay(4295000);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    goto $bb835;

  $bb835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} __const_udelay(4295000);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    goto $bb836;

  $bb836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} __const_udelay(4295000);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    goto $bb837;

  $bb837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} __const_udelay(4295000);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    goto $bb838;

  $bb838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} __const_udelay(4295000);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    goto $bb839;

  $bb839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} __const_udelay(4295000);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    goto $bb840;

  $bb840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} __const_udelay(4295000);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    goto $bb841;

  $bb841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} __const_udelay(4295000);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    goto $bb842;

  $bb842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} __const_udelay(4295000);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    goto $bb843;

  $bb843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} __const_udelay(4295000);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    goto $bb844;

  $bb844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} __const_udelay(4295000);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    goto $bb845;

  $bb845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} __const_udelay(4295000);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    goto $bb846;

  $bb846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} __const_udelay(4295000);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    goto $bb847;

  $bb847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} __const_udelay(4295000);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    goto $bb848;

  $bb848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} __const_udelay(4295000);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    goto $bb849;

  $bb849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} __const_udelay(4295000);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    goto $bb850;

  $bb850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} __const_udelay(4295000);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    goto $bb851;

  $bb851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} __const_udelay(4295000);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    goto $bb852;

  $bb852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} __const_udelay(4295000);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    goto $bb853;

  $bb853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} __const_udelay(4295000);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    goto $bb854;

  $bb854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} __const_udelay(4295000);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    goto $bb855;

  $bb855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} __const_udelay(4295000);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    goto $bb856;

  $bb856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} __const_udelay(4295000);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    goto $bb857;

  $bb857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} __const_udelay(4295000);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    goto $bb858;

  $bb858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} __const_udelay(4295000);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    goto $bb859;

  $bb859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} __const_udelay(4295000);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    goto $bb860;

  $bb860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} __const_udelay(4295000);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    goto $bb861;

  $bb861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} __const_udelay(4295000);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    goto $bb862;

  $bb862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} __const_udelay(4295000);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    goto $bb863;

  $bb863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} __const_udelay(4295000);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    goto $bb864;

  $bb864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} __const_udelay(4295000);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    goto $bb865;

  $bb865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} __const_udelay(4295000);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    goto $bb866;

  $bb866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} __const_udelay(4295000);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    goto $bb867;

  $bb867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} __const_udelay(4295000);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    goto $bb868;

  $bb868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} __const_udelay(4295000);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    goto $bb869;

  $bb869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} __const_udelay(4295000);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    goto $bb870;

  $bb870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} __const_udelay(4295000);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    goto $bb871;

  $bb871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} __const_udelay(4295000);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    goto $bb872;

  $bb872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} __const_udelay(4295000);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    goto $bb873;

  $bb873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} __const_udelay(4295000);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    goto $bb874;

  $bb874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} __const_udelay(4295000);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    goto $bb875;

  $bb875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} __const_udelay(4295000);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    goto $bb876;

  $bb876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} __const_udelay(4295000);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    goto $bb877;

  $bb877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} __const_udelay(4295000);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    goto $bb878;

  $bb878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} __const_udelay(4295000);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    goto $bb879;

  $bb879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} __const_udelay(4295000);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    goto $bb880;

  $bb880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} __const_udelay(4295000);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} __const_udelay(4295000);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    goto $bb882;

  $bb882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} __const_udelay(4295000);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    goto $bb883;

  $bb883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} __const_udelay(4295000);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    goto $bb884;

  $bb884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} __const_udelay(4295000);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    goto $bb885;

  $bb885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} __const_udelay(4295000);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    goto $bb886;

  $bb886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} __const_udelay(4295000);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    goto $bb887;

  $bb887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} __const_udelay(4295000);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    goto $bb888;

  $bb888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} __const_udelay(4295000);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    goto $bb889;

  $bb889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} __const_udelay(4295000);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    goto $bb890;

  $bb890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} __const_udelay(4295000);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    goto $bb891;

  $bb891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} __const_udelay(4295000);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    goto $bb892;

  $bb892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} __const_udelay(4295000);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    goto $bb893;

  $bb893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} __const_udelay(4295000);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    goto $bb894;

  $bb894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} __const_udelay(4295000);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    goto $bb895;

  $bb895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} __const_udelay(4295000);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    goto $bb896;

  $bb896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} __const_udelay(4295000);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    goto $bb897;

  $bb897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} __const_udelay(4295000);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    goto $bb898;

  $bb898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} __const_udelay(4295000);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    goto $bb899;

  $bb899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} __const_udelay(4295000);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    goto $bb900;

  $bb900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} __const_udelay(4295000);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    goto $bb901;

  $bb901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} __const_udelay(4295000);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    goto $bb902;

  $bb902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} __const_udelay(4295000);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    goto $bb903;

  $bb903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} __const_udelay(4295000);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    goto $bb904;

  $bb904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} __const_udelay(4295000);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    goto $bb905;

  $bb905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} __const_udelay(4295000);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    goto $bb906;

  $bb906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} __const_udelay(4295000);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    goto $bb907;

  $bb907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} __const_udelay(4295000);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    goto $bb908;

  $bb908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} __const_udelay(4295000);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    goto $bb909;

  $bb909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} __const_udelay(4295000);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    goto $bb910;

  $bb910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} __const_udelay(4295000);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    goto $bb911;

  $bb911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} __const_udelay(4295000);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    goto $bb912;

  $bb912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} __const_udelay(4295000);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    goto $bb913;

  $bb913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} __const_udelay(4295000);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    goto $bb914;

  $bb914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} __const_udelay(4295000);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    goto $bb915;

  $bb915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} __const_udelay(4295000);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    goto $bb916;

  $bb916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} __const_udelay(4295000);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    goto $bb917;

  $bb917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} __const_udelay(4295000);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} __const_udelay(4295000);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    goto $bb919;

  $bb919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} __const_udelay(4295000);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    goto $bb920;

  $bb920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} __const_udelay(4295000);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    goto $bb921;

  $bb921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} __const_udelay(4295000);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    goto $bb922;

  $bb922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} __const_udelay(4295000);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    goto $bb923;

  $bb923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} __const_udelay(4295000);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    goto $bb924;

  $bb924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} __const_udelay(4295000);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    goto $bb925;

  $bb925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} __const_udelay(4295000);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    goto $bb926;

  $bb926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} __const_udelay(4295000);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    goto $bb927;

  $bb927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} __const_udelay(4295000);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    goto $bb928;

  $bb928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} __const_udelay(4295000);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    goto $bb929;

  $bb929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} __const_udelay(4295000);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    goto $bb930;

  $bb930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} __const_udelay(4295000);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    goto $bb931;

  $bb931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} __const_udelay(4295000);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    goto $bb932;

  $bb932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} __const_udelay(4295000);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    goto $bb933;

  $bb933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} __const_udelay(4295000);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    goto $bb934;

  $bb934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} __const_udelay(4295000);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    goto $bb935;

  $bb935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} __const_udelay(4295000);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    goto $bb936;

  $bb936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} __const_udelay(4295000);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    goto $bb937;

  $bb937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} __const_udelay(4295000);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    goto $bb938;

  $bb938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} __const_udelay(4295000);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    goto $bb939;

  $bb939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} __const_udelay(4295000);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    goto $bb940;

  $bb940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} __const_udelay(4295000);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    goto $bb941;

  $bb941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} __const_udelay(4295000);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    goto $bb942;

  $bb942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} __const_udelay(4295000);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    goto $bb943;

  $bb943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} __const_udelay(4295000);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    goto $bb944;

  $bb944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} __const_udelay(4295000);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    goto $bb945;

  $bb945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} __const_udelay(4295000);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    goto $bb946;

  $bb946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} __const_udelay(4295000);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    goto $bb947;

  $bb947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} __const_udelay(4295000);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    goto $bb948;

  $bb948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} __const_udelay(4295000);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    goto $bb949;

  $bb949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} __const_udelay(4295000);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    goto $bb950;

  $bb950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} __const_udelay(4295000);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    goto $bb951;

  $bb951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} __const_udelay(4295000);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    goto $bb952;

  $bb952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} __const_udelay(4295000);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    goto $bb953;

  $bb953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} __const_udelay(4295000);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    goto $bb954;

  $bb954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} __const_udelay(4295000);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    goto $bb955;

  $bb955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} __const_udelay(4295000);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    goto $bb956;

  $bb956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} __const_udelay(4295000);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    goto $bb957;

  $bb957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} __const_udelay(4295000);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    goto $bb958;

  $bb958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} __const_udelay(4295000);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    goto $bb959;

  $bb959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} __const_udelay(4295000);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    goto $bb960;

  $bb960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} __const_udelay(4295000);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    goto $bb961;

  $bb961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} __const_udelay(4295000);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    goto $bb962;

  $bb962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} __const_udelay(4295000);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    goto $bb963;

  $bb963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} __const_udelay(4295000);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    goto $bb964;

  $bb964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} __const_udelay(4295000);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    goto $bb965;

  $bb965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} __const_udelay(4295000);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    goto $bb966;

  $bb966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} __const_udelay(4295000);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    goto $bb967;

  $bb967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} __const_udelay(4295000);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    goto $bb968;

  $bb968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} __const_udelay(4295000);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    goto $bb969;

  $bb969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} __const_udelay(4295000);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    goto $bb970;

  $bb970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} __const_udelay(4295000);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    goto $bb971;

  $bb971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} __const_udelay(4295000);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    goto $bb972;

  $bb972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} __const_udelay(4295000);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    goto $bb973;

  $bb973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} __const_udelay(4295000);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    goto $bb974;

  $bb974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} __const_udelay(4295000);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    goto $bb975;

  $bb975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} __const_udelay(4295000);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    goto $bb976;

  $bb976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} __const_udelay(4295000);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    goto $bb977;

  $bb977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} __const_udelay(4295000);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    goto $bb978;

  $bb978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} __const_udelay(4295000);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    goto $bb979;

  $bb979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} __const_udelay(4295000);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    goto $bb980;

  $bb980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} __const_udelay(4295000);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    goto $bb981;

  $bb981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} __const_udelay(4295000);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    goto $bb982;

  $bb982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} __const_udelay(4295000);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    goto $bb983;

  $bb983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} __const_udelay(4295000);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    goto $bb984;

  $bb984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} __const_udelay(4295000);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    goto $bb985;

  $bb985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} __const_udelay(4295000);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    goto $bb986;

  $bb986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} __const_udelay(4295000);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    goto $bb987;

  $bb987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} __const_udelay(4295000);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    goto $bb988;

  $bb988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} __const_udelay(4295000);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    goto $bb989;

  $bb989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} __const_udelay(4295000);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    goto $bb990;

  $bb990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} __const_udelay(4295000);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    goto $bb991;

  $bb991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} __const_udelay(4295000);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    goto $bb992;

  $bb992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} __const_udelay(4295000);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    goto $bb993;

  $bb993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} __const_udelay(4295000);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    goto $bb994;

  $bb994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} __const_udelay(4295000);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    goto $bb995;

  $bb995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} __const_udelay(4295000);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    goto $bb996;

  $bb996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} __const_udelay(4295000);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    goto $bb997;

  $bb997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} __const_udelay(4295000);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    goto $bb998;

  $bb998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} __const_udelay(4295000);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    goto $bb999;

  $bb999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} __const_udelay(4295000);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    goto $bb1000;

  $bb1000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} __const_udelay(4295000);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    goto $bb1001;

  $bb1001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} __const_udelay(4295000);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    goto $bb1002;

  $bb1002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} __const_udelay(4295000);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    goto $bb1003;

  $bb1003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} __const_udelay(4295000);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    goto $bb1004;

  $bb1004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} __const_udelay(4295000);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    goto $bb1005;

  $bb1005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} __const_udelay(4295000);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    goto $bb1006;

  $bb1006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} __const_udelay(4295000);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    goto $bb1007;

  $bb1007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} __const_udelay(4295000);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    goto $bb1008;

  $bb1008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} __const_udelay(4295000);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    goto $bb1009;

  $bb1009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} __const_udelay(4295000);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    goto $bb1010;

  $bb1010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i22, 1);
    call {:si_unique_call 140} {:cexpr "i"} boogie_si_record_i32($i23);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $i24 := $sle.i32($i23, 10);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i22 := $i23;
    goto $bb10_dummy;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} vslice_dummy_var_136 := printk.ref(.str.151);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_738;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 276252);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const ldv_free_irq_121: ref;

axiom ldv_free_irq_121 == $sub.ref(0, 277284);

procedure ldv_free_irq_121($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation ldv_free_irq_121($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} {:cexpr "ldv_free_irq_121:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} free_irq($i0, $p1);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} ldv_free_irq($0.ref, $i0, $p1);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    return;
}



const issue_scb_block: ref;

axiom issue_scb_block == $sub.ref(0, 278316);

procedure issue_scb_block($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.11, $M.6, $CurrAddr, $M.19, $M.20, $M.21, $M.12, assertsPassed;



implementation issue_scb_block($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $i39: i32;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $p44: ref;
  var $p46: ref;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i32;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $i62: i1;
  var $i63: i8;
  var $i64: i32;
  var $i65: i1;
  var $p67: ref;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $i72: i1;
  var $i73: i8;
  var $i74: i32;
  var $i75: i1;
  var $p77: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $i82: i32;
  var $i83: i32;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i32;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $p94: ref;
  var $i95: i32;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $i99: i64;
  var $i100: i32;
  var $i101: i32;
  var $p102: ref;
  var $i103: i64;
  var $i104: i32;
  var $p105: ref;
  var $i106: i64;
  var $i107: i32;
  var $i108: i32;
  var $i109: i8;
  var $i110: i32;
  var $i111: i32;
  var $i112: i1;
  var $i114: i64;
  var $i115: i32;
  var $i116: i32;
  var $i117: i8;
  var $i118: i32;
  var $i119: i32;
  var $i120: i1;
  var $i121: i8;
  var $i113: i8;
  var $i122: i32;
  var $i123: i8;
  var $p124: ref;
  var $i125: i64;
  var $i126: i32;
  var $i127: i32;
  var $p128: ref;
  var $i129: i64;
  var $i130: i32;
  var $i131: i32;
  var $p132: ref;
  var $i133: i64;
  var $i134: i32;
  var $p136: ref;
  var $i137: i8;
  var $i138: i32;
  var $i139: i32;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var vslice_dummy_var_137: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(40, 1));
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(48, 1));
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} $i6 := mega_busywait_mbox($p0);
    call {:si_unique_call 1143} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p5);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.1;
    cmdloc_dummy_var_7 := $M.1;
    call {:si_unique_call 1146} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p8, $p1, 15, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_8;
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p10, $sub.i8(0, 2));
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p12, 1);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.1, $p1);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 167);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.1, $p1);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 168);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.1, $p1);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 195);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.1, $p1);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 227);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 76)), $mul.ref(0, 1));
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p32, 0);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 76)), $mul.ref(4, 1));
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p33, 0);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.1, $p34);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i36 := $zext.i32.i64($i35);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i37 := $and.i64($i36, 536870912);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i32($i38);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} $i41 := ldv__builtin_expect($i40, 1);
    call {:si_unique_call 1148} {:cexpr "tmp___1"} boogie_si_record_i64($i41);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i42 == 1);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(8, 1));
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $i99 := $load.i64($M.1, $p98);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i64.i32($i99);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i101 := $add.i32($i100, 1);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} outb_p(0, $i101);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(8, 1));
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i103 := $load.i64($M.1, $p102);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i104 := $trunc.i64.i32($i103);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} outb_p(16, $i104);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(8, 1));
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $i106 := $load.i64($M.1, $p105);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i64.i32($i106);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i108 := $add.i32($i107, 10);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} $i109 := inb_p($i108);
    call {:si_unique_call 1153} {:cexpr "byte"} boogie_si_record_i8($i109);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i32($i109);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $i111 := $and.i32($i110, 64);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $i112 := $eq.i32($i111, 0);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i113 := $i109;
    assume {:branchcond $i112} true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i112 == 1);
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i122 := $zext.i8.i32($i113);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i123 := $trunc.i32.i8($i122);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(8, 1));
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i125 := $load.i64($M.1, $p124);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i126 := $trunc.i64.i32($i125);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i127 := $add.i32($i126, 10);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} outb_p($i123, $i127);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(8, 1));
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $i129 := $load.i64($M.1, $p128);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i130 := $trunc.i64.i32($i129);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i131 := $add.i32($i130, 1);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} outb_p($sub.i8(0, 64), $i131);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(8, 1));
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i133 := $load.i64($M.1, $p132);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i134 := $trunc.i64.i32($i133);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} outb_p(8, $i134);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i137 := $load.i8($M.1, $p136);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i138 := $zext.i8.i32($i137);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i139 := $i138;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $r := $i139;
    return;

  $bb51:
    assume $i112 == 1;
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    call $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121 := issue_scb_block_loop_$bb54($p105, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121);
    goto $bb54_last;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} cpu_relax();
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i114 := $load.i64($M.1, $p105);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $i115 := $trunc.i64.i32($i114);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $i116 := $add.i32($i115, 10);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} $i117 := inb_p($i116);
    call {:si_unique_call 1164} {:cexpr "byte"} boogie_si_record_i8($i117);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i118 := $zext.i8.i32($i117);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i119 := $and.i32($i118, 64);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i119, 0);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i121 := $i117;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i113 := $i121;
    goto $bb53;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i120 == 1;
    goto $bb56_dummy;

  $bb24:
    assume $i42 == 1;
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(49, 1));
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p44, 0);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(50, 1));
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p46, 0);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p48, $sub.i8(0, 1));
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p50, $sub.i8(0, 1));
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(56, 1));
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.1, $p51);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i64.i32($i52);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i54 := $or.i32($i53, 1);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(16, 1));
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.1, $p55);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p56, $mul.ref(32, 1));
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} writel($i54, $p57);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.1, $p59);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 255);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p67, $sub.i8(0, 1));
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(49, 1));
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.1, $p69);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 119);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(49, 1));
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p77, 0);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(50, 1));
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p79, 119);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(56, 1));
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $i81 := $load.i64($M.1, $p80);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i64.i32($i81);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i83 := $or.i32($i82, 2);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(16, 1));
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.1, $p84);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($p85, $mul.ref(32, 1));
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} writel($i83, $p86);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(16, 1));
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.1, $p87);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($p88, $mul.ref(32, 1));
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} $i90 := readl($p89);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    call {:si_unique_call 1158} {:cexpr "tmp___0"} boogie_si_record_i32($i90);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $i91 := $and.i32($i90, 2);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i91, 0);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i92 == 1);
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb42:
    assume $i92 == 1;
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    call $p93, $p94, $i95, $i96, $i97 := issue_scb_block_loop_$bb45($p87, $p93, $p94, $i95, $i96, $i97);
    goto $bb45_last;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} cpu_relax();
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.1, $p87);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($p93, $mul.ref(32, 1));
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} $i95 := readl($p94);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    call {:si_unique_call 1161} {:cexpr "tmp___0"} boogie_si_record_i32($i95);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i96 := $and.i32($i95, 2);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i96, 0);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i97 == 1);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb47:
    assume {:verifier.code 0} true;
    assume $i97 == 1;
    goto $bb47_dummy;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i72 == 1;
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    call $i73, $i74, $i75 := issue_scb_block_loop_$bb37($p69, $i73, $i74, $i75);
    goto $bb37_last;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} cpu_relax();
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.1, $p69);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 119);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i75 == 1);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i75 == 1;
    goto $bb39_dummy;

  $bb26:
    assume $i62 == 1;
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    call $i63, $i64, $i65 := issue_scb_block_loop_$bb29($p59, $i63, $i64, $i65);
    goto $bb29_last;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} cpu_relax();
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.1, $p59);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 255);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i65 == 1);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i65 == 1;
    goto $bb31_dummy;

  $bb17:
    assume $i24 == 1;
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.1, $p26);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 76)), $mul.ref(0, 1));
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p28, $i27);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 76)), $mul.ref(4, 1));
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p29, 0);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p31, $sub.i32(0, 1));
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb13:
    assume $i21 == 1;
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i18 == 1;
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} vslice_dummy_var_137 := printk.ref(.str.127);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} __const_udelay(4295000);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $i139 := $sub.i32(0, 1);
    goto $bb59;

  $bb56_dummy:
    assume false;
    return;

  $bb54_last:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb47_dummy:
    assume false;
    return;

  $bb45_last:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb39_dummy:
    assume false;
    return;

  $bb37_last:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb31_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    goto $bb30;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 279348);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.1, $p1);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 280380);

procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1168} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1169} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1170} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1171} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.ref($p0: ref, p.1: i32, p.2: i32, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.ref($p0: ref, p.1: i32, p.2: i32, p.3: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1172} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1173} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1174} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1175} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1176} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1177} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1178} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1179} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1180} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1181} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1182} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1183} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1184} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1185} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i64.i32($p0: ref, p.1: i32, p.2: i64, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i64.i32($p0: ref, p.1: i32, p.2: i64, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb9:
    assume {:verifier.code 1} true;
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1186} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1187} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 281412);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    return;
}



const mega_busywait_mbox: ref;

axiom mega_busywait_mbox == $sub.ref(0, 282444);

procedure mega_busywait_mbox($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mega_busywait_mbox($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(48, 1));
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.1, $p4);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} $i8 := __mega_busywait_mbox($p0);
    call {:si_unique_call 1190} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 283476);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 284508);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 1192} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const writel: ref;

axiom writel == $sub.ref(0, 285540);

procedure writel($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation writel($i0: i32, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} {:cexpr "writel:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    call {:si_unique_call 1194} devirtbounce(0, $i0, $p2);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    return;
}



const cpu_relax: ref;

axiom cpu_relax == $sub.ref(0, 286572);

procedure cpu_relax();
  free requires assertsPassed;



implementation cpu_relax()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} rep_nop();
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    return;
}



const readl: ref;

axiom readl == $sub.ref(0, 287604);

procedure readl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.11, $M.6, $CurrAddr, $M.19, $M.20, $M.21, $M.12, assertsPassed;



implementation readl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    call {:si_unique_call 1196} $i2 := devirtbounce.1(0, $p1);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    call {:si_unique_call 1197} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const outb_p: ref;

axiom outb_p == $sub.ref(0, 288636);

procedure outb_p($i0: i8, $i1: i32);
  free requires assertsPassed;



implementation outb_p($i0: i8, $i1: i32)
{
  var $i2: i32;
  var $i3: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} {:cexpr "outb_p:arg:value"} boogie_si_record_i8($i0);
    call {:si_unique_call 1199} {:cexpr "outb_p:arg:port"} boogie_si_record_i32($i1);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i0);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i2);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} outb($i3, $i1);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} slow_down_io();
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    return;
}



const inb_p: ref;

axiom inb_p == $sub.ref(0, 289668);

procedure inb_p($i0: i32) returns ($r: i8);
  free requires assertsPassed;



implementation inb_p($i0: i32) returns ($r: i8)
{
  var $i1: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} {:cexpr "inb_p:arg:port"} boogie_si_record_i32($i0);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} $i1 := inb($i0);
    call {:si_unique_call 1204} {:cexpr "tmp"} boogie_si_record_i8($i1);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} slow_down_io();
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const inb: ref;

axiom inb == $sub.ref(0, 290700);

procedure inb($i0: i32) returns ($r: i8);
  free requires assertsPassed;



implementation inb($i0: i32) returns ($r: i8)
{
  var $i1: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} {:cexpr "inb:arg:port"} boogie_si_record_i32($i0);
    call {:si_unique_call 1207} $i1 := devirtbounce.2(0, $i0);
    call {:si_unique_call 1208} {:cexpr "value"} boogie_si_record_i8($i1);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const slow_down_io: ref;

axiom slow_down_io == $sub.ref(0, 291732);

procedure slow_down_io();
  free requires assertsPassed;



implementation slow_down_io()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.11, $add.ref($add.ref(pv_cpu_ops, $mul.ref(0, 320)), $mul.ref(208, 1)));
    call {:si_unique_call 1209} devirtbounce.3($p0);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    return;
}



const outb: ref;

axiom outb == $sub.ref(0, 292764);

procedure outb($i0: i8, $i1: i32);
  free requires assertsPassed;



implementation outb($i0: i8, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} {:cexpr "outb:arg:value"} boogie_si_record_i8($i0);
    call {:si_unique_call 1211} {:cexpr "outb:arg:port"} boogie_si_record_i32($i1);
    call {:si_unique_call 1212} devirtbounce.4(0, $i0, $i1);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    return;
}



const rep_nop: ref;

axiom rep_nop == $sub.ref(0, 293796);

procedure rep_nop();
  free requires assertsPassed;



implementation rep_nop()
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} devirtbounce.3(0);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    return;
}



const __mega_busywait_mbox: ref;

axiom __mega_busywait_mbox == $sub.ref(0, 294828);

procedure __mega_busywait_mbox($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __mega_busywait_mbox($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $i11: i64;
  var $i12: i1;
  var $i3: i64;
  var $i9: i32;
  var vslice_dummy_var_138: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(48, 1));
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb1;

  $bb1:
    call $p5, $i6, $i7, $i8, $i11, $i12, $i3, vslice_dummy_var_138 := __mega_busywait_mbox_loop_$bb1($p2, $p5, $i6, $i7, $i8, $i11, $i12, $i3, vslice_dummy_var_138);
    goto $bb1_last;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.1, $p5);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} __const_udelay(429500);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} ___might_sleep(.str.128, 1712, 0);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} vslice_dummy_var_138 := _cond_resched();
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i3, 1);
    call {:si_unique_call 1217} {:cexpr "counter"} boogie_si_record_i64($i11);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i12 := $sle.i64($i11, 9999);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb7:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i3 := $i11;
    goto $bb7_dummy;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb5;

  $bb7_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3026;
}



const ___might_sleep: ref;

axiom ___might_sleep == $sub.ref(0, 295860);

procedure ___might_sleep($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation ___might_sleep($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} {:cexpr "___might_sleep:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1219} {:cexpr "___might_sleep:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    return;
}



const _cond_resched: ref;

axiom _cond_resched == $sub.ref(0, 296892);

procedure _cond_resched() returns ($r: i32);
  free requires assertsPassed;



implementation _cond_resched() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1220} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1221} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const free_irq: ref;

axiom free_irq == $sub.ref(0, 297924);

procedure free_irq($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation free_irq($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} {:cexpr "free_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_irq: ref;

axiom ldv_free_irq == $sub.ref(0, 298956);

procedure ldv_free_irq($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation ldv_free_irq($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} {:cexpr "ldv_free_irq:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1224} {:cexpr "ldv_free_irq:arg:ldv_19_line_line"} boogie_si_record_i32($i1);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} ldv_dispatch_irq_deregister_19_1($i1);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_irq_deregister_19_1: ref;

axiom ldv_dispatch_irq_deregister_19_1 == $sub.ref(0, 299988);

procedure ldv_dispatch_irq_deregister_19_1($i0: i32);
  free requires assertsPassed;



implementation ldv_dispatch_irq_deregister_19_1($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} {:cexpr "ldv_dispatch_irq_deregister_19_1:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 301020);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(512, 1));
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_scsi_remove_host_122: ref;

axiom ldv_scsi_remove_host_122 == $sub.ref(0, 302052);

procedure ldv_scsi_remove_host_122($p0: ref);
  free requires assertsPassed;



implementation ldv_scsi_remove_host_122($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} scsi_remove_host($p0);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} ldv_scsi_remove_host($0.ref, $p0);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    return;
}



const ldv_iounmap_123: ref;

axiom ldv_iounmap_123 == $sub.ref(0, 303084);

procedure ldv_iounmap_123($p0: ref);
  free requires assertsPassed;
  modifies $M.12, assertsPassed;



implementation ldv_iounmap_123($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} ldv_linux_arch_io_io_mem_unmap();
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;
}



const __release_region: ref;

axiom __release_region == $sub.ref(0, 304116);

procedure __release_region($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;



implementation __release_region($p0: ref, $i1: i64, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} {:cexpr "__release_region:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1231} {:cexpr "__release_region:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    return;
}



const mega_free_sgl: ref;

axiom mega_free_sgl == $sub.ref(0, 305148);

procedure mega_free_sgl($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation mega_free_sgl($p0: ref)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $p49: ref;
  var $i50: i32;
  var $i51: i8;
  var $i52: i32;
  var $i53: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1168, 1));
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.1, $p1);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32(0, $i3);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $p6, $p7, $i8, $p10, $p11, $i12, $i13, $p14, $p15, $p16, $i17, $i18, $i19, $p20, $p21, $p22, $p23, $i24, $p25, $p26, $p27, $i28, $i29, $p30, $p31, $p32, $p33, $p34, $p35, $i36, $p37, $p38, $p39, $i40, $i41, $p42, $p43, $p44, $p45, $p46, $p47, $i48, $p49, $i50, $i51, $i52, $i53, $i5 := mega_free_sgl_loop_$bb4($p0, $p1, $p6, $p7, $i8, $p10, $p11, $i12, $i13, $p14, $p15, $p16, $i17, $i18, $i19, $p20, $p21, $p22, $p23, $i24, $p25, $p26, $p27, $i28, $i29, $p30, $p31, $p32, $p33, $p34, $p35, $i36, $p37, $p38, $p39, $i40, $i41, $p42, $p43, $p44, $p45, $p46, $p47, $i48, $p49, $i50, $i51, $i52, $i53, $i5);
    goto $bb4_last;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1176, 1));
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref($i8, 184)), $mul.ref(136, 1));
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p7, $mul.ref($i8, 184)), $mul.ref(152, 1));
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p7, $mul.ref($i8, 184)), $mul.ref(168, 1));
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.1, $p38);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i5, 1);
    call {:si_unique_call 1235} {:cexpr "i"} boogie_si_record_i32($i50);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.1, $p1);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i50, $i52);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i53 == 1);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb15:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i50;
    goto $bb15_dummy;

  $bb12:
    assume $i41 == 1;
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(64, 1));
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.1, $p42);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p7, $mul.ref($i8, 184)), $mul.ref(168, 1));
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.1, $p44);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p7, $mul.ref($i8, 184)), $mul.ref(176, 1));
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.1, $p47);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} pci_free_consistent($p43, 68, $p46, $i48);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p7, $mul.ref($i8, 184)), $mul.ref(168, 1));
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p49, $0.ref);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume $i29 == 1;
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(64, 1));
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.1, $p30);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p7, $mul.ref($i8, 184)), $mul.ref(152, 1));
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.1, $p32);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p7, $mul.ref($i8, 184)), $mul.ref(160, 1));
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.1, $p35);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} pci_free_consistent($p31, 60, $p34, $i36);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p7, $mul.ref($i8, 184)), $mul.ref(152, 1));
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p37, $0.ref);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(64, 1));
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1448, 1));
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.1, $p16);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $i19 := $mul.i64($i18, 12);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p7, $mul.ref($i8, 184)), $mul.ref(136, 1));
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p7, $mul.ref($i8, 184)), $mul.ref(144, 1));
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.1, $p23);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} pci_free_consistent($p15, $i19, $p22, $i24);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p7, $mul.ref($i8, 184)), $mul.ref(136, 1));
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p25, $0.ref);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb15_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3076;
}



const remove_proc_entry: ref;

axiom remove_proc_entry == $sub.ref(0, 306180);

procedure remove_proc_entry($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation remove_proc_entry($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    return;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 307212);

procedure sprintf.ref.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32);



procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



procedure sprintf.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32);



const pci_free_consistent: ref;

axiom pci_free_consistent == $sub.ref(0, 308244);

procedure pci_free_consistent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation pci_free_consistent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} {:cexpr "pci_free_consistent:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1237} {:cexpr "pci_free_consistent:arg:dma_handle"} boogie_si_record_i64($i3);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} dma_free_attrs($p7, $i1, $p2, $i3, $0.ref);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 309276);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} free_($p0);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    return;
}



const scsi_host_put: ref;

axiom scsi_host_put == $sub.ref(0, 310308);

procedure scsi_host_put($p0: ref);
  free requires assertsPassed;



implementation scsi_host_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    return;
}



const pci_disable_device: ref;

axiom pci_disable_device == $sub.ref(0, 311340);

procedure pci_disable_device($p0: ref);
  free requires assertsPassed;



implementation pci_disable_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 312372);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 1240} $free($p0);
    return;
}



const dma_free_attrs: ref;

axiom dma_free_attrs == $sub.ref(0, 313404);

procedure dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;



implementation dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref)
{
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var vslice_dummy_var_139: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} {:cexpr "dma_free_attrs:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1242} {:cexpr "dma_free_attrs:arg:bus"} boogie_si_record_i64($i3);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} $p5 := get_dma_ops($p0);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} $i6 := arch_local_save_flags();
    call {:si_unique_call 1245} {:cexpr "_flags"} boogie_si_record_i64($i6);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} $i7 := arch_irqs_disabled_flags($i6);
    call {:si_unique_call 1247} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 1248} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i9);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 1250} {:cexpr "tmp___1"} boogie_si_record_i64($i13);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i9, 0);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} vslice_dummy_var_139 := ldv__builtin_expect($i17, 0);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} debug_dma_free_coherent($p0, $i1, $p2, $i3);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.1, $p19);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.1, $p23);
    call {:si_unique_call 1254} devirtbounce.5($p24, $p0, $i1, $p2, $i3, $p4);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} warn_slowpath_null(.str.23, 166);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const get_dma_ops: ref;

axiom get_dma_ops == $sub.ref(0, 314436);

procedure get_dma_ops($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_dma_ops($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1256} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(1216, 1)), $mul.ref(0, 1));
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(1216, 1)), $mul.ref(0, 1));
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $p13 := $p16;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.11, dma_ops);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const arch_local_save_flags: ref;

axiom arch_local_save_flags == $sub.ref(0, 315468);

procedure arch_local_save_flags() returns ($r: i64);
  free requires assertsPassed;



implementation arch_local_save_flags() returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.11, pv_irq_ops);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1258} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call {:si_unique_call 1260} $i7 := devirtbounce.7(0, 44, pv_irq_ops, 1);
    call {:si_unique_call 1261} {:cexpr "__eax"} boogie_si_record_i64($i7);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 1259} devirtbounce.6(0, .str.24, 804, 12);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    assume false;
    return;
}



const arch_irqs_disabled_flags: ref;

axiom arch_irqs_disabled_flags == $sub.ref(0, 316500);

procedure arch_irqs_disabled_flags($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation arch_irqs_disabled_flags($i0: i64) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} {:cexpr "arch_irqs_disabled_flags:arg:flags"} boogie_si_record_i64($i0);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i1 := $and.i64($i0, 512);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 317532);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    return;
}



const debug_dma_free_coherent: ref;

axiom debug_dma_free_coherent == $sub.ref(0, 318564);

procedure debug_dma_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation debug_dma_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} {:cexpr "debug_dma_free_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1265} {:cexpr "debug_dma_free_coherent:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_arch_io_io_mem_unmap: ref;

axiom ldv_linux_arch_io_io_mem_unmap == $sub.ref(0, 319596);

procedure ldv_linux_arch_io_io_mem_unmap();
  free requires assertsPassed;
  modifies $M.12, assertsPassed;



implementation ldv_linux_arch_io_io_mem_unmap()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $i0 := $M.12;
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $i1 := $sgt.i32($i0, 0);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} ldv_assert_linux_arch_io__less_initial_decrement($i2);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i3 := $M.12;
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32($i3, 1);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $M.12 := $i4;
    call {:si_unique_call 1267} {:cexpr "ldv_linux_arch_io_iomem"} boogie_si_record_i32($i4);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_arch_io__less_initial_decrement: ref;

axiom ldv_assert_linux_arch_io__less_initial_decrement == $sub.ref(0, 320628);

procedure ldv_assert_linux_arch_io__less_initial_decrement($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_arch_io__less_initial_decrement($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} {:cexpr "ldv_assert_linux_arch_io__less_initial_decrement:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1269} __VERIFIER_error();
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const scsi_remove_host: ref;

axiom scsi_remove_host == $sub.ref(0, 321660);

procedure scsi_remove_host($p0: ref);
  free requires assertsPassed;



implementation scsi_remove_host($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    return;
}



const ldv_scsi_remove_host: ref;

axiom ldv_scsi_remove_host == $sub.ref(0, 322692);

procedure ldv_scsi_remove_host($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_scsi_remove_host($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} ldv_dispatch_deregister_23_1($p1);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_23_1: ref;

axiom ldv_dispatch_deregister_23_1 == $sub.ref(0, 323724);

procedure ldv_dispatch_deregister_23_1($p0: ref);
  free requires assertsPassed;



implementation ldv_dispatch_deregister_23_1($p0: ref)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} $i1 := ldv_undef_int();
    call {:si_unique_call 1272} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    return;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 324756);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1273} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1274} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1275} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const pci_enable_device: ref;

axiom pci_enable_device == $sub.ref(0, 325788);

procedure pci_enable_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1276} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1277} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_set_master: ref;

axiom pci_set_master == $sub.ref(0, 326820);

procedure pci_set_master($p0: ref);
  free requires assertsPassed;



implementation pci_set_master($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    return;
}



const pci_read_config_word: ref;

axiom pci_read_config_word == $sub.ref(0, 327852);

procedure pci_read_config_word($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_read_config_word($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} {:cexpr "pci_read_config_word:arg:where"} boogie_si_record_i32($i1);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(16, 1));
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(56, 1));
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} $i7 := pci_bus_read_config_word($p4, $i6, $i1, $p2);
    call {:si_unique_call 1280} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pci_read_config_dword: ref;

axiom pci_read_config_dword == $sub.ref(0, 328884);

procedure pci_read_config_dword($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_read_config_dword($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} {:cexpr "pci_read_config_dword:arg:where"} boogie_si_record_i32($i1);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(16, 1));
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(56, 1));
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} $i7 := pci_bus_read_config_dword($p4, $i6, $i1, $p2);
    call {:si_unique_call 1283} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const __request_region: ref;

axiom __request_region == $sub.ref(0, 329916);

procedure __request_region($p0: ref, $i1: i64, $i2: i64, $p3: ref, $i4: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __request_region($p0: ref, $i1: i64, $i2: i64, $p3: ref, $i4: i32) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} {:cexpr "__request_region:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1285} {:cexpr "__request_region:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 1286} {:cexpr "__request_region:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} $p5 := external_alloc();
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const ioremap: ref;

axiom ioremap == $sub.ref(0, 330948);

procedure ioremap($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.12;



implementation ioremap($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} {:cexpr "ioremap:arg:offset"} boogie_si_record_i64($i0);
    call {:si_unique_call 1289} {:cexpr "ioremap:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} $p2 := ldv_linux_arch_io_io_mem_remap();
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_scsi_host_alloc_115: ref;

axiom ldv_scsi_host_alloc_115 == $sub.ref(0, 331980);

procedure ldv_scsi_host_alloc_115($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation ldv_scsi_host_alloc_115($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} {:cexpr "ldv_scsi_host_alloc_115:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} $p2 := scsi_host_alloc($p0, $i1);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} $p3 := ldv_scsi_host_alloc($p2, $p0, $i1);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 333012);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1, $p0);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, $p0);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 334044);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 335076);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    return;
}



const pci_alloc_consistent: ref;

axiom pci_alloc_consistent == $sub.ref(0, 336108);

procedure pci_alloc_consistent($p0: ref, $i1: i64, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_alloc_consistent($p0: ref, $i1: i64, $p2: ref) returns ($r: ref)
{
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} {:cexpr "pci_alloc_consistent:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} $p7 := dma_alloc_attrs($p6, $i1, $p2, 32, $0.ref);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $p6 := $p5;
    goto $bb3;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 337140);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1297} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} ldv_check_alloc_flags($i1);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} $p2 := ldv_malloc_unknown_size();
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} ldv_after_alloc($p2);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;
}



const megaraid_isr_memmapped: ref;

axiom megaraid_isr_memmapped == $sub.ref(0, 338172);

procedure megaraid_isr_memmapped($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.19, $CurrAddr, $M.11, $M.6, assertsPassed, $M.20, $M.21, $M.12;



implementation megaraid_isr_memmapped($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i11: i32;
  var $i10: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $i29: i8;
  var $i22: i8;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $i73: i1;
  var $i74: i32;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} $p2 := $alloc($mul.ref(46, $zext.i32.i64(1)));
    call {:si_unique_call 1302} {:cexpr "megaraid_isr_memmapped:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1912)), $mul.ref(1360, 1));
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_102($p4);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 1912)), $mul.ref(16, 1));
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(44, 1));
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} $i8 := readl($p7);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    call {:si_unique_call 1305} {:cexpr "dword"} boogie_si_record_i32($i8);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 268440116);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $i10 := 0;
    assume {:branchcond $i9} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i9 == 1);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i11, $p12, $p13, $p14, $p15, $p16, $p18, $i19, $i20, $i21, $p23, $p25, $i26, $i27, $i28, $i29, $i22, $p30, $p31, $p33, $p34, $p35, $p37, $i38, $i39, $p40, $p41, $p42, $p43, $p45, $p46, $i47, $p48, $p49, $p50, $p51, $p52, $p53, $i54, $i55, $i56, $p57, $p58, $i59, $i60, $i61, $p62, $i63, $i64, $p65, $i66, $i67, $p68, $p69, $i70, $i71, cmdloc_dummy_var_9, cmdloc_dummy_var_10, cmdloc_dummy_var_11 := megaraid_isr_memmapped_loop_$bb4($p2, $p3, $p5, $i11, $p12, $p13, $p14, $p15, $p16, $p18, $i19, $i20, $i21, $p23, $p25, $i26, $i27, $i28, $i29, $i22, $p30, $p31, $p33, $p34, $p35, $p37, $i38, $i39, $p40, $p41, $p42, $p43, $p45, $p46, $i47, $p48, $p49, $p50, $p51, $p52, $p53, $i54, $i55, $i56, $p57, $p58, $i59, $i60, $i61, $p62, $i63, $i64, $p65, $i66, $i67, $p68, $p69, $i70, $i71, cmdloc_dummy_var_9, cmdloc_dummy_var_10, cmdloc_dummy_var_11);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 1912)), $mul.ref(16, 1));
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref(44, 1));
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} writel(268440116, $p14);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 1912)), $mul.ref(48, 1));
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.1, $p18);
    call {:si_unique_call 1308} {:cexpr "nstatus"} boogie_si_record_i8($i19);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 255);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i22 := $i19;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 1912)), $mul.ref(48, 1));
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.1, $p30);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p33, $sub.i8(0, 1));
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 1912)), $mul.ref(48, 1));
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.1, $p34);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.1, $p37);
    call {:si_unique_call 1311} {:cexpr "status"} boogie_si_record_i8($i38);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i22);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 1912)), $mul.ref(1184, 1));
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} atomic_sub($i39, $p40);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p2);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 1912)), $mul.ref(48, 1));
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.1, $p42);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(3, 1));
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i64($i22);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.1;
    cmdloc_dummy_var_10 := $M.1;
    call {:si_unique_call 1313} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p41, $p46, $i47, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_11;
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 1912)), $mul.ref(16, 1));
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.1, $p48);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p49, $mul.ref(32, 1));
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} writel(2, $p50);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 1912)), $mul.ref(16, 1));
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.1, $p51);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p52, $mul.ref(32, 1));
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} $i54 := readl($p53);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    call {:si_unique_call 1316} {:cexpr "tmp"} boogie_si_record_i32($i54);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 2);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p2);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i22);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i38);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} mega_cmd_done($p3, $p62, $i63, $i64);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} mega_rundoneq($p3);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 1912)), $mul.ref(1356, 1));
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} $i66 := atomic_read($p65);
    call {:si_unique_call 1323} {:cexpr "tmp___0"} boogie_si_record_i32($i66);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 0);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.1, $p5);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p68, $mul.ref(44, 1));
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} $i70 := readl($p69);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    call {:si_unique_call 1326} {:cexpr "dword"} boogie_si_record_i32($i70);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 268440116);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $i11 := 1;
    assume true;
    goto $bb5, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb27_dummy;

  $bb5:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $i10 := $i11;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref(0, 1912)), $mul.ref(1360, 1));
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} ldv_spin_unlock_irqrestore_97($p72, $u0);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i10, 0);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i74 := $zext.i1.i32($i73);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $r := $i74;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i67 == 1;
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} mega_runpendq($p3);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    goto $bb26;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i56 == 1;
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    call $p57, $p58, $i59, $i60, $i61 := megaraid_isr_memmapped_loop_$bb19($p51, $p57, $p58, $i59, $i60, $i61);
    goto $bb19_last;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} cpu_relax();
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.1, $p51);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p57, $mul.ref(32, 1));
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} $i59 := readl($p58);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    call {:si_unique_call 1319} {:cexpr "tmp"} boogie_si_record_i32($i59);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i60 := $and.i32($i59, 2);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i61 == 1);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i61 == 1;
    goto $bb21_dummy;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    call $p23, $p25, $i26, $i27, $i28, $i29 := megaraid_isr_memmapped_loop_$bb11($p15, $p23, $p25, $i26, $i27, $i28, $i29);
    goto $bb11_last;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} cpu_relax();
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p15);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.1, $p25);
    call {:si_unique_call 1310} {:cexpr "nstatus"} boogie_si_record_i8($i26);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 255);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i29 := $i26;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $i22 := $i29;
    goto $bb10;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb13_dummy;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb21_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb13_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb27_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const megaraid_isr_iomapped: ref;

axiom megaraid_isr_iomapped == $sub.ref(0, 339204);

procedure megaraid_isr_iomapped($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.19, $CurrAddr, $M.11, $M.6, assertsPassed, $M.12, $M.20, $M.21;



implementation megaraid_isr_iomapped($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i32;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i15: i32;
  var $i13: i32;
  var $i14: i8;
  var $i16: i32;
  var $i17: i8;
  var $p18: ref;
  var $i19: i64;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i1;
  var $i36: i8;
  var $i29: i8;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $p55: ref;
  var $i56: i64;
  var $i57: i32;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $i64: i64;
  var $i65: i32;
  var $i66: i32;
  var $i67: i8;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $i72: i1;
  var $i73: i32;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} $p2 := $alloc($mul.ref(46, $zext.i32.i64(1)));
    call {:si_unique_call 1328} {:cexpr "megaraid_isr_iomapped:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1912)), $mul.ref(1360, 1));
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_100($p4);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 1912)), $mul.ref(8, 1));
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.1, $p5);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i6);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i7, 10);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} $i9 := inb_p($i8);
    call {:si_unique_call 1331} {:cexpr "byte"} boogie_si_record_i8($i9);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 64);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $i13 := 0;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i12 == 1);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $i14 := $i9;
    goto $bb4;

  $bb4:
    call $i15, $i14, $i16, $i17, $p18, $i19, $i20, $i21, $p22, $p23, $p25, $i26, $i27, $i28, $p30, $p32, $i33, $i34, $i35, $i36, $i29, $p37, $p38, $p40, $p41, $p42, $p44, $i45, $i46, $p47, $p48, $p49, $p50, $p52, $p53, $i54, $p55, $i56, $i57, $p58, $i59, $i60, $p61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, cmdloc_dummy_var_12, cmdloc_dummy_var_13, cmdloc_dummy_var_14 := megaraid_isr_iomapped_loop_$bb4($p2, $p3, $p5, $i15, $i14, $i16, $i17, $p18, $i19, $i20, $i21, $p22, $p23, $p25, $i26, $i27, $i28, $p30, $p32, $i33, $i34, $i35, $i36, $i29, $p37, $p38, $p40, $p41, $p42, $p44, $i45, $i46, $p47, $p48, $p49, $p50, $p52, $p53, $i54, $p55, $i56, $i57, $p58, $i59, $i60, $p61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, cmdloc_dummy_var_12, cmdloc_dummy_var_13, cmdloc_dummy_var_14);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i14);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 1912)), $mul.ref(8, 1));
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.1, $p18);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i19);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i20, 10);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} outb_p($i17, $i21);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 1912)), $mul.ref(48, 1));
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.1, $p25);
    call {:si_unique_call 1334} {:cexpr "nstatus"} boogie_si_record_i8($i26);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 255);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i29 := $i26;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 1912)), $mul.ref(48, 1));
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.1, $p37);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p40, $sub.i8(0, 1));
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 1912)), $mul.ref(48, 1));
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.1, $p41);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p42, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.1, $p44);
    call {:si_unique_call 1337} {:cexpr "status"} boogie_si_record_i8($i45);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i29);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 1912)), $mul.ref(1184, 1));
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} atomic_sub($i46, $p47);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p2);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 1912)), $mul.ref(48, 1));
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.1, $p49);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p50, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(3, 1));
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i64($i29);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.1;
    cmdloc_dummy_var_13 := $M.1;
    call {:si_unique_call 1339} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p48, $p53, $i54, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_14;
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 1912)), $mul.ref(8, 1));
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.1, $p55);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i64.i32($i56);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} outb_p(8, $i57);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p2);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i29);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i45);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} mega_cmd_done($p3, $p58, $i59, $i60);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} mega_rundoneq($p3);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 1912)), $mul.ref(1356, 1));
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} $i62 := atomic_read($p61);
    call {:si_unique_call 1344} {:cexpr "tmp"} boogie_si_record_i32($i62);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 0);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i64 := $load.i64($M.1, $p5);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i64.i32($i64);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $i66 := $add.i32($i65, 10);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} $i67 := inb_p($i66);
    call {:si_unique_call 1347} {:cexpr "byte"} boogie_si_record_i8($i67);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $i69 := $and.i32($i68, 64);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 0);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $i15 := 1;
    assume true;
    goto $bb5, $bb19;

  $bb19:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i14 := $i67;
    goto $bb19_dummy;

  $bb5:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i13 := $i15;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p3, $mul.ref(0, 1912)), $mul.ref(1360, 1));
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} ldv_spin_unlock_irqrestore_97($p71, $u0);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i13, 0);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $i73 := $zext.i1.i32($i72);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $r := $i73;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i63 == 1;
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} mega_runpendq($p3);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    call $p30, $p32, $i33, $i34, $i35, $i36 := megaraid_isr_iomapped_loop_$bb11($p22, $p30, $p32, $i33, $i34, $i35, $i36);
    goto $bb11_last;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} cpu_relax();
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.1, $p22);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.1, $p32);
    call {:si_unique_call 1336} {:cexpr "nstatus"} boogie_si_record_i8($i33);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 255);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i36 := $i33;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $i29 := $i36;
    goto $bb10;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb13_dummy;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb13_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb19_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const ldv_request_irq_116: ref;

axiom ldv_request_irq_116 == $sub.ref(0, 340236);

procedure ldv_request_irq_116($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $CurrAddr, $M.19, $M.11, $M.6, assertsPassed, $M.20, $M.21, $M.12;



implementation ldv_request_irq_116($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} {:cexpr "ldv_request_irq_116:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 1349} {:cexpr "ldv_request_irq_116:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} $i5 := request_irq($i0, $p1, $i2, $p3, $p4);
    call {:si_unique_call 1351} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} $i6 := ldv_request_irq($i5, $i0, $p1, $i2, $p3, $p4);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    call {:si_unique_call 1353} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;
}



const mega_setup_mailbox: ref;

axiom mega_setup_mailbox == $sub.ref(0, 341268);

procedure mega_setup_mailbox($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation mega_setup_mailbox($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $i48: i64;
  var $i49: i8;
  var $i50: i32;
  var $i51: i8;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i32;
  var $i57: i32;
  var $p58: ref;
  var $i59: i64;
  var $i60: i64;
  var $i61: i8;
  var $i62: i32;
  var $i63: i8;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i32;
  var $i69: i32;
  var $p70: ref;
  var $i71: i64;
  var $i72: i64;
  var $i73: i8;
  var $i74: i32;
  var $i75: i8;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $i80: i32;
  var $i81: i32;
  var $p82: ref;
  var $i83: i64;
  var $i84: i64;
  var $i85: i8;
  var $i86: i32;
  var $i87: i8;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i64;
  var $i92: i32;
  var $i93: i32;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i64;
  var $i98: i32;
  var $i99: i32;
  var $p100: ref;
  var $i101: i64;
  var $i102: i32;
  var $p103: ref;
  var $i104: i64;
  var $i105: i32;
  var $i106: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(64, 1));
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(32, 1));
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} $p4 := pci_alloc_consistent($p2, 74, $p3);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(24, 1));
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, $p4);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(24, 1));
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(24, 1));
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 76)), $mul.ref(8, 1));
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(48, 1));
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p15, $p14);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(48, 1));
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, 15);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, $sub.i64(0, 16));
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i20);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(48, 1));
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p22, $p21);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(48, 1));
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.1, $p23);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $i26 := $sub.i64($i25, 8);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $p27 := $i2p.i64.ref($i26);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(40, 1));
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p28, $p27);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(48, 1));
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.1, $p29);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(24, 1));
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.1, $p32);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 76)), $mul.ref(8, 1));
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i36 := $sub.i64($i31, $i35);
    call {:si_unique_call 1355} {:cexpr "align"} boogie_si_record_i64($i36);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(32, 1));
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.1, $p37);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, $i36);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $i40 := $add.i64($i39, 8);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(56, 1));
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p41, $i40);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.1, $p42);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i44 := $zext.i32.i64($i43);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i45 := $and.i64($i44, 268435456);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb5:
    assume $i46 == 1;
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(56, 1));
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.1, $p47);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i64.i8($i48);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i8($i50);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(120, 1));
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.1, $p52);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 3816)), $mul.ref(928, 1));
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i55 := $load.i64($M.1, $p54);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i64.i32($i55);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i56, 4);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} outb($i51, $i57);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(56, 1));
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $i59 := $load.i64($M.1, $p58);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $i60 := $lshr.i64($i59, 8);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i64.i8($i60);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i32.i8($i62);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(120, 1));
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.1, $p64);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 3816)), $mul.ref(928, 1));
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i67 := $load.i64($M.1, $p66);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i64.i32($i67);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i69 := $add.i32($i68, 5);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} outb($i63, $i69);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(56, 1));
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $i71 := $load.i64($M.1, $p70);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i72 := $lshr.i64($i71, 16);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i64.i8($i72);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i32.i8($i74);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(120, 1));
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.1, $p76);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 3816)), $mul.ref(928, 1));
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $i79 := $load.i64($M.1, $p78);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i64.i32($i79);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $i81 := $add.i32($i80, 6);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} outb($i75, $i81);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(56, 1));
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i83 := $load.i64($M.1, $p82);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $i84 := $lshr.i64($i83, 24);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i64.i8($i84);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i85);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i32.i8($i86);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(120, 1));
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.1, $p88);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 3816)), $mul.ref(928, 1));
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i91 := $load.i64($M.1, $p90);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $i92 := $trunc.i64.i32($i91);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i93 := $add.i32($i92, 7);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} outb($i87, $i93);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(120, 1));
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.1, $p94);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p95, $mul.ref(0, 3816)), $mul.ref(928, 1));
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $i97 := $load.i64($M.1, $p96);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i64.i32($i97);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $i99 := $add.i32($i98, 11);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} outb(0, $i99);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(8, 1));
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $i101 := $load.i64($M.1, $p100);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $i102 := $trunc.i64.i32($i101);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} outb_p(8, $i102);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(8, 1));
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i104 := $load.i64($M.1, $p103);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i64.i32($i104);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $i106 := $add.i32($i105, 1);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} outb_p($sub.i8(0, 64), $i106);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 1);
    goto $bb3;
}



const mega_query_adapter: ref;

axiom mega_query_adapter == $sub.ref(0, 342300);

procedure mega_query_adapter($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.11, $M.6, $M.19, $M.20, $M.21, $M.12, assertsPassed;



implementation mega_query_adapter($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p29: ref;
  var $i30: i64;
  var $i31: i32;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $p61: ref;
  var $p62: ref;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i16;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i8;
  var $p84: ref;
  var $p86: ref;
  var $i87: i8;
  var $p88: ref;
  var $p89: ref;
  var $i90: i8;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $p94: ref;
  var $i95: i8;
  var $i96: i32;
  var $i97: i32;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i8;
  var $i103: i16;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p108: ref;
  var $i109: i16;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $p113: ref;
  var $p116: ref;
  var $i117: i8;
  var $i118: i32;
  var $p121: ref;
  var $i122: i8;
  var $i123: i32;
  var $i124: i32;
  var $p127: ref;
  var $i128: i8;
  var $i129: i32;
  var $i130: i32;
  var $p132: ref;
  var $p133: ref;
  var $p136: ref;
  var $i137: i8;
  var $i138: i32;
  var $p141: ref;
  var $i142: i8;
  var $i143: i32;
  var $i144: i32;
  var $p147: ref;
  var $i148: i8;
  var $i149: i32;
  var $i150: i32;
  var $p152: ref;
  var $p153: ref;
  var $p155: ref;
  var $p156: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p162: ref;
  var $p163: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $i171: i8;
  var $i172: i32;
  var $i174: i32;
  var $p175: ref;
  var $p176: ref;
  var $i177: i32;
  var $i178: i1;
  var $i28: i32;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} $p1 := $alloc($mul.ref(15, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(128, 1));
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.1;
    call {:si_unique_call 1365} cmdloc_dummy_var_16 := $memset.i8(cmdloc_dummy_var_15, $p5, 0, 2048, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_16;
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_17 := $M.1;
    call {:si_unique_call 1366} cmdloc_dummy_var_18 := $memset.i8(cmdloc_dummy_var_17, $p7, 0, 15, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_18;
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(136, 1));
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.1, $p8);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i9);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p12, $i10);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(128, 1));
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 15)), $mul.ref(0, 1));
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p16, $sub.i8(0, 95));
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 15)), $mul.ref(2, 1));
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p17, 15);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 15)), $mul.ref(3, 1));
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p18, 2);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p1);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} $i20 := issue_scb_block($p0, $p19);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    call {:si_unique_call 1368} {:cexpr "retval"} boogie_si_record_i32($i20);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.1, $p43);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $i45 := $or.i32($i44, 134217728);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p46, $i45);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(64, 1));
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.1, $p47);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(144, 1));
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} $i51 := pci_map_single($p48, $p50, 1024, 2);
    call {:si_unique_call 1371} {:cexpr "prod_info_dma_handle"} boogie_si_record_i64($i51);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i64.i32($i51);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p54, $i52);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 15)), $mul.ref(0, 1));
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p55, $sub.i8(0, 95));
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 15)), $mul.ref(2, 1));
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p56, 14);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p1);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} $i58 := issue_scb_block($p0, $p57);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    call {:si_unique_call 1373} {:cexpr "retval"} boogie_si_record_i32($i58);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(64, 1));
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.1, $p61);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} pci_unmap_single($p62, $i51, 1024, 2);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(144, 1)), $mul.ref(121, 1));
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.1, $p64);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i66, 3);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(120, 1));
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.1, $p68);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 3816)), $mul.ref(784, 1));
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p70, $i67);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(120, 1));
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.1, $p71);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 3816)), $mul.ref(788, 1));
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p73, 16);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(120, 1));
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.1, $p74);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 3816)), $mul.ref(792, 1));
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p76, 7);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $i77 := $M.4;
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i32.i16($i77);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(120, 1));
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.1, $p79);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 3816)), $mul.ref(816, 1));
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p81, $i78);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p15, $mul.ref(0, 1028)), $mul.ref(137, 1));
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.1, $p82);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1188, 1));
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p84, $i83);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(144, 1)), $mul.ref(120, 1));
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $i87 := $load.i8($M.1, $p86);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1168, 1));
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p88, $i87);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1168, 1));
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.1, $p89);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i32($i90);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $i92 := $ugt.i32($i91, 126);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1168, 1));
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.1, $p94);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i95);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i97 := $add.i32($i96, $sub.i32(0, 1));
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(120, 1));
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.1, $p98);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 3816)), $mul.ref(812, 1));
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p100, $i97);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} mega_get_max_sgl($p0);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1448, 1));
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $i102 := $load.i8($M.1, $p101);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i16($i102);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(120, 1));
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.1, $p104);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p105, $mul.ref(0, 3816)), $mul.ref(818, 1));
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p106, $i103);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(144, 1)), $mul.ref(132, 1));
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $i109 := $load.i16($M.1, $p108);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $i110 := $zext.i16.i32($i109);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 4156);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i111 == 1);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1189, 1));
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $p153 := $bitcast.ref.ref($p152);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(144, 1)), $mul.ref(8, 1));
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $p156 := $bitcast.ref.ref($p155);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_19 := $M.1;
    cmdloc_dummy_var_20 := $M.1;
    call {:si_unique_call 1382} cmdloc_dummy_var_21 := $memcpy.i8(cmdloc_dummy_var_19, cmdloc_dummy_var_20, $p153, $p156, 4, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_21;
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1189, 1)), $mul.ref(4, 1));
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p158, 0);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1196, 1));
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $p160 := $bitcast.ref.ref($p159);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(144, 1)), $mul.ref(24, 1));
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $p163 := $bitcast.ref.ref($p162);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_22 := $M.1;
    cmdloc_dummy_var_23 := $M.1;
    call {:si_unique_call 1383} cmdloc_dummy_var_24 := $memcpy.i8(cmdloc_dummy_var_22, cmdloc_dummy_var_23, $p160, $p163, 4, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_24;
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1196, 1)), $mul.ref(4, 1));
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p165, 0);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1189, 1));
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $p167 := $bitcast.ref.ref($p166);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1196, 1));
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $p169 := $bitcast.ref.ref($p168);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1188, 1));
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i171 := $load.i8($M.1, $p170);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $i172 := $zext.i8.i32($i171);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} vslice_dummy_var_144 := printk.ref.ref.ref.i32(.str.125, $p167, $p169, $i172);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} $i174 := mega_support_ext_cdb($p0);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1324, 1));
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p175, $i174);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1324, 1));
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $i177 := $load.i32($M.1, $p176);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $i178 := $ne.i32($i177, 0);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    assume {:branchcond $i178} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb17:
    assume $i178 == 1;
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} vslice_dummy_var_145 := printk.ref(.str.126);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i111 == 1;
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1189, 1));
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p112);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(144, 1)), $mul.ref(8, 1)), $mul.ref(2, 1));
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $i117 := $load.i8($M.1, $p116);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $i118 := $zext.i8.i32($i117);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(144, 1)), $mul.ref(8, 1)), $mul.ref(1, 1));
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $i122 := $load.i8($M.1, $p121);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $i123 := $zext.i8.i32($i122);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $i124 := $and.i32($i123, 15);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(144, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $i128 := $load.i8($M.1, $p127);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $i129 := $zext.i8.i32($i128);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i130 := $and.i32($i129, 15);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} vslice_dummy_var_142 := sprintf.ref.ref.i32.i32.i32.i32.i32($p113, .str.124, $i118, 0, $i124, 0, $i130);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1196, 1));
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p132);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(144, 1)), $mul.ref(24, 1)), $mul.ref(2, 1));
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i137 := $load.i8($M.1, $p136);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i138 := $zext.i8.i32($i137);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(144, 1)), $mul.ref(24, 1)), $mul.ref(1, 1));
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $i142 := $load.i8($M.1, $p141);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $i143 := $zext.i8.i32($i142);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $i144 := $and.i32($i143, 15);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(144, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $i148 := $load.i8($M.1, $p147);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i149 := $zext.i8.i32($i148);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $i150 := $and.i32($i149, 15);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} vslice_dummy_var_143 := sprintf.ref.ref.i32.i32.i32.i32.i32($p133, .str.124, $i138, 0, $i144, 0, $i150);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i92 == 1;
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1168, 1));
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p93, 126);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i59 == 1;
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} vslice_dummy_var_141 := printk.ref.i32(.str.123, $i58);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(64, 1));
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} $p24 := pci_alloc_consistent($p23, 166, $p2);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p25, $mul.ref(0, 168)), $mul.ref(0, 1));
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.14, $p2);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i64.i32($i30);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p33, $i31);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p35, 4);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p1);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} vslice_dummy_var_140 := issue_scb_block($p0, $p36);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(144, 1));
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} mega_8_to_40ld($p29, $p15, $p38);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(64, 1));
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.1, $p39);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p25);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.14, $p2);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} pci_free_consistent($p40, 166, $p41, $i42);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i27 == 1;
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 1);
    goto $bb5;

  SeqInstr_100:
    assume !assertsPassed;
    return;
}



const strcmp: ref;

axiom strcmp == $sub.ref(0, 343332);

procedure strcmp($p0: ref, $p1: ref) returns ($r: i32);



const mega_is_bios_enabled: ref;

axiom mega_is_bios_enabled == $sub.ref(0, 344364);

procedure mega_is_bios_enabled($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.11, $M.6, $M.19, $M.20, $M.21, $M.12, assertsPassed;



implementation mega_is_bios_enabled($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} $p1 := $alloc($mul.ref(15, $zext.i32.i64(1)));
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_25 := $M.1;
    call {:si_unique_call 1388} cmdloc_dummy_var_26 := $memset.i8(cmdloc_dummy_var_25, $p4, 0, 15, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_26;
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(128, 1));
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_27 := $M.1;
    call {:si_unique_call 1389} cmdloc_dummy_var_28 := $memset.i8(cmdloc_dummy_var_27, $p6, 0, 2048, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_28;
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(136, 1));
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.1, $p7);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p11, $i9);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 15)), $mul.ref(0, 1));
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p12, 98);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 15)), $mul.ref(2, 1));
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p13, 1);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p1);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} $i15 := issue_scb_block($p0, $p14);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    call {:si_unique_call 1391} {:cexpr "ret"} boogie_si_record_i32($i15);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(128, 1));
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.1, $p17);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $i19 := $sext.i8.i32($i18);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;
}



const mega_enum_raid_scsi: ref;

axiom mega_enum_raid_scsi == $sub.ref(0, 345396);

procedure mega_enum_raid_scsi($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.11, $M.6, $M.19, $M.20, $M.21, $M.12, assertsPassed;



implementation mega_enum_raid_scsi($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $p22: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i36: i32;
  var $i37: i8;
  var $i38: i32;
  var $i39: i1;
  var $i28: i32;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var vslice_dummy_var_146: i32;
  var vslice_dummy_var_147: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} $p1 := $alloc($mul.ref(15, $zext.i32.i64(1)));
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_29 := $M.1;
    call {:si_unique_call 1393} cmdloc_dummy_var_30 := $memset.i8(cmdloc_dummy_var_29, $p4, 0, 15, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_30;
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 15)), $mul.ref(0, 1));
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p5, $sub.i8(0, 87));
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 15)), $mul.ref(2, 1));
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p6, 0);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(128, 1));
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_31 := $M.1;
    call {:si_unique_call 1394} cmdloc_dummy_var_32 := $memset.i8(cmdloc_dummy_var_31, $p8, 0, 2048, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_32;
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(136, 1));
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.1, $p9);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p13, $i11);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1444, 1));
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p14, 255);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p1);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} $i16 := issue_scb_block($p0, $p15);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    call {:si_unique_call 1396} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(144, 1)), $mul.ref(121, 1));
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.1, $p24);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32(0, $i26);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i27 == 1;
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb7;

  $bb7:
    call $p29, $i30, $i31, $i32, $i33, $i36, $i37, $i38, $i39, $i28, vslice_dummy_var_146, vslice_dummy_var_147 := mega_enum_raid_scsi_loop_$bb7($p0, $p24, $p29, $i30, $i31, $i32, $i33, $i36, $i37, $i38, $i39, $i28, vslice_dummy_var_146, vslice_dummy_var_147);
    goto $bb7_last;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1444, 1));
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.1, $p29);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $i31 := $ashr.i32($i30, $i28);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 1);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i33 == 1);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} vslice_dummy_var_147 := printk.ref.i32(.str.131, $i28);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i28, 1);
    call {:si_unique_call 1399} {:cexpr "i"} boogie_si_record_i32($i36);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.1, $p24);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i36, $i38);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i39 == 1);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb12:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i28 := $i36;
    goto $bb12_dummy;

  $bb9:
    assume $i33 == 1;
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} vslice_dummy_var_146 := printk.ref.i32(.str.130, $i28);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(128, 1));
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.1, $p19);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i21 := $sext.i8.i32($i20);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1444, 1));
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p22, $i21);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb12_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3912;
}



const mega_get_boot_drv: ref;

axiom mega_get_boot_drv == $sub.ref(0, 346428);

procedure mega_get_boot_drv($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.11, $M.6, $M.19, $M.20, $M.21, $M.12, assertsPassed;



implementation mega_get_boot_drv($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i16;
  var $i29: i32;
  var $i30: i16;
  var $p31: ref;
  var $i32: i16;
  var $i33: i32;
  var $i34: i32;
  var $i36: i32;
  var $i37: i16;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i32;
  var $i49: i8;
  var $i50: i32;
  var $i51: i32;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i8;
  var $i59: i32;
  var $p60: ref;
  var $i61: i64;
  var $p62: ref;
  var $i63: i32;
  var $i64: i8;
  var $i65: i16;
  var $i66: i32;
  var $i67: i32;
  var $i68: i16;
  var $i69: i64;
  var $p70: ref;
  var $i71: i32;
  var $i72: i8;
  var $i73: i16;
  var $i74: i32;
  var $i75: i32;
  var $i76: i16;
  var $i77: i64;
  var $p78: ref;
  var $i79: i32;
  var $i80: i8;
  var $i81: i16;
  var $i82: i32;
  var $i83: i32;
  var $i84: i16;
  var $i85: i64;
  var $p86: ref;
  var $i87: i32;
  var $i88: i8;
  var $i89: i16;
  var $i90: i32;
  var $i91: i32;
  var $i92: i16;
  var $i93: i64;
  var $p94: ref;
  var $i95: i32;
  var $i96: i8;
  var $i97: i16;
  var $i98: i32;
  var $i99: i32;
  var $i100: i16;
  var $i101: i64;
  var $p102: ref;
  var $i103: i32;
  var $i104: i8;
  var $i105: i16;
  var $i106: i32;
  var $i107: i32;
  var $i108: i16;
  var $i109: i64;
  var $p110: ref;
  var $i111: i32;
  var $i112: i8;
  var $i113: i16;
  var $i114: i32;
  var $i115: i32;
  var $i116: i16;
  var $i117: i64;
  var $p118: ref;
  var $i119: i32;
  var $i120: i8;
  var $i121: i16;
  var $i122: i32;
  var $i123: i32;
  var $i124: i16;
  var $i125: i64;
  var $p126: ref;
  var $i127: i32;
  var $i128: i8;
  var $i129: i16;
  var $i130: i32;
  var $i131: i32;
  var $i132: i16;
  var $i133: i64;
  var $p134: ref;
  var $i135: i32;
  var $i136: i8;
  var $i137: i16;
  var $i138: i32;
  var $i139: i32;
  var $i140: i16;
  var $i141: i64;
  var $p142: ref;
  var $i143: i32;
  var $i144: i8;
  var $i145: i16;
  var $i146: i32;
  var $i147: i32;
  var $i148: i16;
  var $i149: i64;
  var $p150: ref;
  var $i151: i32;
  var $i152: i8;
  var $i153: i16;
  var $i154: i32;
  var $i155: i32;
  var $i156: i16;
  var $i157: i32;
  var $i158: i8;
  var $i159: i16;
  var $i160: i32;
  var $i161: i32;
  var $i35: i16;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} $p1 := $alloc($mul.ref(15, $zext.i32.i64(1)));
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_33 := $M.1;
    call {:si_unique_call 1401} cmdloc_dummy_var_34 := $memset.i8(cmdloc_dummy_var_33, $p4, 0, 15, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_34;
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 15)), $mul.ref(0, 1));
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p5, 64);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 15)), $mul.ref(2, 1));
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p6, 0);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(128, 1));
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_35 := $M.1;
    call {:si_unique_call 1402} cmdloc_dummy_var_36 := $memset.i8(cmdloc_dummy_var_35, $p8, 0, 2048, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_36;
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(136, 1));
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.1, $p9);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p13, $i11);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1328, 1));
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p14, 0);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1332, 1));
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p15, 0);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1336, 1));
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p16, 0);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1340, 1));
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p17, 0);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1344, 1));
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p18, 0);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p1);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} $i20 := issue_scb_block($p0, $p19);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    call {:si_unique_call 1404} {:cexpr "tmp___0"} boogie_si_record_i32($i20);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(128, 1));
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref(1, 1));
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.1, $p25);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i16($i27);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i29);
    call {:si_unique_call 1405} {:cexpr "cksum"} boogie_si_record_i16($i30);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    $i61 := $add.i64(1, 1);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p25, $mul.ref($i61, 1));
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i30);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.1, $p26);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i16($i64);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $i66 := $zext.i16.i32($i65);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i63, $i66);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i16($i67);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    $i69 := $add.i64($i61, 1);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p25, $mul.ref($i69, 1));
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i68);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.1, $p62);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i16($i72);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $i74 := $zext.i16.i32($i73);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i71, $i74);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i32.i16($i75);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    $i77 := $add.i64($i69, 1);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p25, $mul.ref($i77, 1));
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $i79 := $zext.i16.i32($i76);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.1, $p70);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i16($i80);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $i82 := $zext.i16.i32($i81);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $i83 := $add.i32($i79, $i82);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i32.i16($i83);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    $i85 := $add.i64($i77, 1);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($p25, $mul.ref($i85, 1));
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $i87 := $zext.i16.i32($i84);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.1, $p78);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i16($i88);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $i90 := $zext.i16.i32($i89);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $i91 := $add.i32($i87, $i90);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $i92 := $trunc.i32.i16($i91);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    $i93 := $add.i64($i85, 1);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($p25, $mul.ref($i93, 1));
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i95 := $zext.i16.i32($i92);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $i96 := $load.i8($M.1, $p86);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i16($i96);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $i98 := $zext.i16.i32($i97);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $i99 := $add.i32($i95, $i98);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i32.i16($i99);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    $i101 := $add.i64($i93, 1);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($p25, $mul.ref($i101, 1));
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i103 := $zext.i16.i32($i100);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $i104 := $load.i8($M.1, $p94);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i105 := $zext.i8.i16($i104);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $i106 := $zext.i16.i32($i105);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $i107 := $add.i32($i103, $i106);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i32.i16($i107);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    $i109 := $add.i64($i101, 1);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($p25, $mul.ref($i109, 1));
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i111 := $zext.i16.i32($i108);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $i112 := $load.i8($M.1, $p102);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i16($i112);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i114 := $zext.i16.i32($i113);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i115 := $add.i32($i111, $i114);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $i116 := $trunc.i32.i16($i115);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    $i117 := $add.i64($i109, 1);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($p25, $mul.ref($i117, 1));
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i119 := $zext.i16.i32($i116);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i120 := $load.i8($M.1, $p110);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i121 := $zext.i8.i16($i120);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $i122 := $zext.i16.i32($i121);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $i123 := $add.i32($i119, $i122);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i124 := $trunc.i32.i16($i123);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    $i125 := $add.i64($i117, 1);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($p25, $mul.ref($i125, 1));
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i127 := $zext.i16.i32($i124);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $i128 := $load.i8($M.1, $p118);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $i129 := $zext.i8.i16($i128);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i130 := $zext.i16.i32($i129);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $i131 := $add.i32($i127, $i130);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $i132 := $trunc.i32.i16($i131);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    $i133 := $add.i64($i125, 1);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($p25, $mul.ref($i133, 1));
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $i135 := $zext.i16.i32($i132);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i136 := $load.i8($M.1, $p126);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i137 := $zext.i8.i16($i136);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $i138 := $zext.i16.i32($i137);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i139 := $add.i32($i135, $i138);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $i140 := $trunc.i32.i16($i139);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    $i141 := $add.i64($i133, 1);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($p25, $mul.ref($i141, 1));
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i143 := $zext.i16.i32($i140);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $i144 := $load.i8($M.1, $p134);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $i145 := $zext.i8.i16($i144);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $i146 := $zext.i16.i32($i145);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $i147 := $add.i32($i143, $i146);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $i148 := $trunc.i32.i16($i147);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    $i149 := $add.i64($i141, 1);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($p25, $mul.ref($i149, 1));
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i151 := $zext.i16.i32($i148);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i152 := $load.i8($M.1, $p142);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i153 := $zext.i8.i16($i152);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $i154 := $zext.i16.i32($i153);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i155 := $add.i32($i151, $i154);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $i156 := $trunc.i32.i16($i155);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i157 := $zext.i16.i32($i156);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i158 := $load.i8($M.1, $p150);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i159 := $zext.i8.i16($i158);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i160 := $zext.i16.i32($i159);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $i161 := $add.i32($i157, $i160);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i16($i161);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p24, $mul.ref(0, 16)), $mul.ref(14, 1));
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $i32 := $load.i16($M.1, $p31);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i35);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, $i34);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i16($i36);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i33, $i38);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume $i39 == 1;
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p24, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.1, $p40);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $i42 := $sext.i8.i32($i41);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i42, 0);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i43 == 1);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1328, 1));
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p56, 1);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p24, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.1, $p57);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1332, 1));
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p60, $i59);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i43 == 1;
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1336, 1));
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p44, 1);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p24, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.1, $p45);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 127);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i48);
    call {:si_unique_call 1406} {:cexpr "boot_pdrv"} boogie_si_record_i8($i49);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $i51 := $udiv.i32($i50, 16);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1340, 1));
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p52, $i51);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i49);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i53, 15);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1344, 1));
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p55, $i54);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_121:
    assume !assertsPassed;
    return;
}



const mega_support_random_del: ref;

axiom mega_support_random_del == $sub.ref(0, 347460);

procedure mega_support_random_del($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.11, $M.6, $M.19, $M.20, $M.21, $M.12, assertsPassed;



implementation mega_support_random_del($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} $p1 := $alloc($mul.ref(15, $zext.i32.i64(1)));
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_37 := $M.1;
    call {:si_unique_call 1408} cmdloc_dummy_var_38 := $memset.i8(cmdloc_dummy_var_37, $p4, 0, 15, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_38;
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 15)), $mul.ref(0, 1));
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p5, $sub.i8(0, 92));
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 15)), $mul.ref(2, 1));
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p6, 42);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} $i8 := issue_scb_block($p0, $p7);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    call {:si_unique_call 1410} {:cexpr "rval"} boogie_si_record_i32($i8);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_124:
    assume !assertsPassed;
    return;
}



const mega_init_scb: ref;

axiom mega_init_scb == $sub.ref(0, 348492);

procedure mega_init_scb($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation mega_init_scb($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $i5: i32;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i8;
  var $i77: i32;
  var $i78: i1;
  var $i22: i32;
  var $i47: i32;
  var vslice_dummy_var_148: i32;
  var vslice_dummy_var_149: i32;
  var vslice_dummy_var_150: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1168, 1));
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.1, $p1);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32(0, $i3);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1168, 1));
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.1, $p18);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32(0, $i20);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i47 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $r := $i47;
    return;

  $bb9:
    assume $i21 == 1;
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb12;

  $bb12:
    call $p23, $p24, $i25, $p27, $p28, $p29, $p30, $i31, $i32, $i33, $p34, $p35, $p37, $p38, $p39, $p41, $p42, $p43, $i44, $i45, $p48, $p49, $p50, $p51, $p53, $p54, $p55, $i56, $i57, $p59, $p60, $p61, $p62, $p64, $p65, $p66, $i67, $i68, $p70, $p71, $p72, $p73, $p74, $i75, $i76, $i77, $i78, $i22 := mega_init_scb_loop_$bb12($p0, $p18, $p23, $p24, $i25, $p27, $p28, $p29, $p30, $i31, $i32, $i33, $p34, $p35, $p37, $p38, $p39, $p41, $p42, $p43, $i44, $i45, $p48, $p49, $p50, $p51, $p53, $p54, $p55, $i56, $i57, $p59, $p60, $p61, $p62, $p64, $p65, $p66, $i67, $i68, $p70, $p71, $p72, $p73, $p74, $i75, $i76, $i77, $i78, $i22);
    goto $bb12_last;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1176, 1));
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.1, $p23);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i22);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p24, $mul.ref($i25, 184)), $mul.ref(0, 1));
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p27, $i22);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(64, 1));
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.1, $p28);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1448, 1));
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.1, $p30);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i64($i31);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i33 := $mul.i64($i32, 12);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p24, $mul.ref($i25, 184)), $mul.ref(144, 1));
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} $p35 := pci_alloc_consistent($p29, $i33, $p34);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p24, $mul.ref($i25, 184)), $mul.ref(136, 1));
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p37, $p35);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p24, $mul.ref($i25, 184)), $mul.ref(136, 1));
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.1, $p38);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p24, $mul.ref($i25, 184)), $mul.ref(128, 1));
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p41, $p39);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p24, $mul.ref($i25, 184)), $mul.ref(128, 1));
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.1, $p42);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $i45 := $eq.i64($i44, 0);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(64, 1));
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.1, $p48);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p24, $mul.ref($i25, 184)), $mul.ref(160, 1));
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} $p51 := pci_alloc_consistent($p49, 60, $p50);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p24, $mul.ref($i25, 184)), $mul.ref(152, 1));
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p53, $p51);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p24, $mul.ref($i25, 184)), $mul.ref(152, 1));
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.1, $p54);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p55);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $i57 := $eq.i64($i56, 0);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(64, 1));
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.1, $p59);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p24, $mul.ref($i25, 184)), $mul.ref(176, 1));
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} $p62 := pci_alloc_consistent($p60, 68, $p61);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p24, $mul.ref($i25, 184)), $mul.ref(168, 1));
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p64, $p62);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p24, $mul.ref($i25, 184)), $mul.ref(168, 1));
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.1, $p65);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p66);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $i68 := $eq.i64($i67, 0);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p24, $mul.ref($i25, 184)), $mul.ref(92, 1));
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p70, 65535);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p24, $mul.ref($i25, 184)), $mul.ref(4, 1));
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p71, 0);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p24, $mul.ref($i25, 184)), $mul.ref(104, 1));
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p72, $0.ref);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p24, $mul.ref($i25, 184)), $mul.ref(8, 1));
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(72, 1));
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} list_add($p73, $p74);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i22, 1);
    call {:si_unique_call 1422} {:cexpr "i"} boogie_si_record_i32($i75);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.1, $p18);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i76);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i75, $i77);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i78 == 1);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb24:
    assume $i78 == 1;
    assume {:verifier.code 0} true;
    $i22 := $i75;
    goto $bb24_dummy;

  $bb21:
    assume $i68 == 1;
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} vslice_dummy_var_150 := printk.ref(.str.134);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} mega_free_sgl($p0);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32(0, 1);
    goto $bb16;

  $bb18:
    assume $i57 == 1;
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} vslice_dummy_var_149 := printk.ref(.str.133);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} mega_free_sgl($p0);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32(0, 1);
    goto $bb16;

  $bb14:
    assume $i45 == 1;
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} vslice_dummy_var_148 := printk.ref(.str.132);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} mega_free_sgl($p0);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32(0, 1);
    goto $bb16;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $p6, $p7, $i8, $p10, $p11, $p12, $p13, $i14, $i15, $i16, $i17, $i5 := mega_init_scb_loop_$bb4($p0, $p1, $p6, $p7, $i8, $p10, $p11, $p12, $p13, $i14, $i15, $i16, $i17, $i5);
    goto $bb4_last;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1176, 1));
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref($i8, 184)), $mul.ref(136, 1));
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p10, $0.ref);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref($i8, 184)), $mul.ref(128, 1));
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p11, $0.ref);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref($i8, 184)), $mul.ref(152, 1));
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p12, $0.ref);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p7, $mul.ref($i8, 184)), $mul.ref(168, 1));
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p13, $0.ref);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i5, 1);
    call {:si_unique_call 1411} {:cexpr "i"} boogie_si_record_i32($i14);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.1, $p1);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i14, $i16);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i14;
    goto $bb6_dummy;

  $bb24_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4179;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4151;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 349524);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p2, $i1);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    return;
}



const pci_set_dma_mask: ref;

axiom pci_set_dma_mask == $sub.ref(0, 350556);

procedure pci_set_dma_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation pci_set_dma_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} {:cexpr "pci_set_dma_mask:arg:mask"} boogie_si_record_i64($i1);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} $i3 := dma_set_mask($p2, $i1);
    call {:si_unique_call 1426} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 351588);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    return;
}



const ldv_init_completion_117: ref;

axiom ldv_init_completion_117 == $sub.ref(0, 352620);

procedure ldv_init_completion_117($p0: ref);
  free requires assertsPassed;
  modifies $M.21;



implementation ldv_init_completion_117($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} ldv_linux_kernel_sched_completion_init_completion_int_waitq_of_NOT_ARG_SIGN();
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    return;
}



const mega_support_cluster: ref;

axiom mega_support_cluster == $sub.ref(0, 353652);

procedure mega_support_cluster($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.11, $M.6, $M.19, $M.20, $M.21, $M.12, assertsPassed;



implementation mega_support_cluster($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} $p1 := $alloc($mul.ref(15, $zext.i32.i64(1)));
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_39 := $M.1;
    call {:si_unique_call 1429} cmdloc_dummy_var_40 := $memset.i8(cmdloc_dummy_var_39, $p3, 0, 15, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_40;
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(128, 1));
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_41 := $M.1;
    call {:si_unique_call 1430} cmdloc_dummy_var_42 := $memset.i8(cmdloc_dummy_var_41, $p5, 0, 2048, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_42;
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(136, 1));
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.1, $p6);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p10, $i8);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 15)), $mul.ref(0, 1));
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p11, 125);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p1);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} $i13 := issue_scb_block($p0, $p12);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    call {:si_unique_call 1432} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(128, 1));
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.1, $p17);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(0, 1));
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p19, $i18);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(0, 1));
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.1, $p20);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(120, 1));
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 3816)), $mul.ref(808, 1));
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p24, $i21);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $i25 := 1;
    goto $bb3;

  SeqInstr_127:
    assume !assertsPassed;
    return;
}



const pci_set_drvdata: ref;

axiom pci_set_drvdata == $sub.ref(0, 354684);

procedure pci_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation pci_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} dev_set_drvdata($p2, $p1);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    return;
}



const mega_create_proc_entry: ref;

axiom mega_create_proc_entry == $sub.ref(0, 355716);

procedure mega_create_proc_entry($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation mega_create_proc_entry($i0: i32, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i16;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p19: ref;
  var vslice_dummy_var_151: i32;
  var vslice_dummy_var_152: i32;
  var vslice_dummy_var_153: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 1435} {:cexpr "mega_create_proc_entry:arg:index"} boogie_si_record_i32($i0);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i0);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref(hba_soft_state, $mul.ref(0, 256)), $mul.ref($i3, 8));
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.9, $p4);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 1912)), $mul.ref(120, 1));
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 3816)), $mul.ref(768, 1));
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.1, $p9);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} vslice_dummy_var_151 := sprintf.ref.ref.i32($p6, .str.135, $i10);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p2);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p5);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} $p14 := proc_mkdir_data($p12, 0, $p1, $p13);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 1912)), $mul.ref(1208, 1));
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p15, $p14);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p14);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p19 := mega_proc_files;
    goto $bb5;

  $bb5:
    call $p20, $p21, $p22, $p23, $p24, $p25, $i26, $i27, $p29, $p30, $i31, $i32, $p33, $p34, $p35, $p36, $i37, $i38, $p19 := mega_create_proc_entry_loop_$bb5($p5, $p14, $p20, $p21, $p22, $p23, $p24, $p25, $i26, $i27, $p29, $p30, $i31, $i32, $p33, $p34, $p35, $p36, $i37, $i38, $p19);
    goto $bb5_last;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.15, $p20);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p19, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.16, $p22);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} $p25 := proc_create_data($p21, 256, $p14, mega_proc_fops, $p24);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p5);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p19, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $i31 := $load.i16($M.17, $p30);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i64($i31);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p29, $mul.ref($i32, 8));
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p33, $p25);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p19, $mul.ref(1, 24));
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p19, $mul.ref(1, 24)), $mul.ref(0, 1));
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.15, $p35);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $p19 := $p34;
    goto $bb10_dummy;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} vslice_dummy_var_153 := printk.ref(.str.137);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} vslice_dummy_var_152 := printk.ref(.str.136);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4334;
}



const ldv_scsi_add_host_118: ref;

axiom ldv_scsi_add_host_118 == $sub.ref(0, 356748);

procedure ldv_scsi_add_host_118($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.30, $M.31, $M.11, $M.23, $M.19, $M.6, $CurrAddr, assertsPassed, $M.29, $M.26, $M.24, $M.20, $M.21, $M.12;



implementation ldv_scsi_add_host_118($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} $i2 := scsi_add_host($p0, $p1);
    call {:si_unique_call 1442} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} $i3 := ldv_scsi_add_host($i2, $p0, $p1);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    call {:si_unique_call 1444} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_130:
    assume !assertsPassed;
    return;
}



const scsi_scan_host: ref;

axiom scsi_scan_host == $sub.ref(0, 357780);

procedure scsi_scan_host($p0: ref);
  free requires assertsPassed;



implementation scsi_scan_host($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_irq_119: ref;

axiom ldv_free_irq_119 == $sub.ref(0, 358812);

procedure ldv_free_irq_119($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation ldv_free_irq_119($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} {:cexpr "ldv_free_irq_119:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} free_irq($i0, $p1);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} ldv_free_irq($0.ref, $i0, $p1);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    return;
}



const ldv_iounmap_120: ref;

axiom ldv_iounmap_120 == $sub.ref(0, 359844);

procedure ldv_iounmap_120($p0: ref);
  free requires assertsPassed;
  modifies $M.12, assertsPassed;



implementation ldv_iounmap_120($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} ldv_linux_arch_io_io_mem_unmap();
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_133:
    assume !assertsPassed;
    return;
}



const scsi_add_host: ref;

axiom scsi_add_host == $sub.ref(0, 360876);

procedure scsi_add_host($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_add_host($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} $i2 := scsi_add_host_with_dma($p0, $p1, $p1);
    call {:si_unique_call 1450} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_scsi_add_host: ref;

axiom ldv_scsi_add_host == $sub.ref(0, 361908);

procedure ldv_scsi_add_host($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.30, $M.31, $M.11, $M.23, $M.19, $M.6, $CurrAddr, assertsPassed, $M.29, $M.26, $M.24, $M.20, $M.21, $M.12;



implementation ldv_scsi_add_host($i0: i32, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} {:cexpr "ldv_scsi_add_host:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} $i3 := ldv_undef_int();
    call {:si_unique_call 1453} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i0, 0);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} ldv_assume($i8);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} ldv_assume($i6);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} ldv_dispatch_register_21_2($u1);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_136:
    assume !assertsPassed;
    return;
}



const ldv_assume: ref;

axiom ldv_assume == $sub.ref(0, 362940);

procedure ldv_assume($i0: i32);
  free requires assertsPassed;



implementation ldv_assume($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} {:cexpr "ldv_assume:arg:expression"} boogie_si_record_i32($i0);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call ldv_assume_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const ldv_dispatch_register_21_2: ref;

axiom ldv_dispatch_register_21_2 == $sub.ref(0, 363972);

procedure ldv_dispatch_register_21_2($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.30, $M.31, $M.11, $M.23, $M.19, $M.6, $CurrAddr, assertsPassed, $M.29, $M.26, $M.24, $M.20, $M.21, $M.12;



implementation ldv_dispatch_register_21_2($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} $i1 := ldv_undef_int();
    call {:si_unique_call 1459} {:cexpr "tmp___1"} boogie_si_record_i32($i1);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} $p7 := ldv_xmalloc(16);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p9, $p0);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p8);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} ldv_scsi_host_template_scsi_host_template_instance_5($p10);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} $p3 := ldv_xmalloc(16);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, $p0);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p4);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} ldv_scsi_host_template_scsi_host_template_instance_4($p6);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_139:
    assume !assertsPassed;
    return;
}



const ldv_xmalloc: ref;

axiom ldv_xmalloc == $sub.ref(0, 365004);

procedure ldv_xmalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_xmalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} {:cexpr "ldv_xmalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} $p1 := malloc($i0);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} ldv_assume($i4);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} $i5 := ldv_is_err($p1);
    call {:si_unique_call 1468} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} ldv_assume($i7);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_scsi_host_template_scsi_host_template_instance_4: ref;

axiom ldv_scsi_host_template_scsi_host_template_instance_4 == $sub.ref(0, 366036);

procedure ldv_scsi_host_template_scsi_host_template_instance_4($p0: ref);
  free requires assertsPassed;
  modifies $M.30, $M.31, $M.1, $M.11, $M.23, $M.19, $M.6, assertsPassed, $CurrAddr, $M.29, $M.26, $M.24, $M.20, $M.21, $M.12;



implementation ldv_scsi_host_template_scsi_host_template_instance_4($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $p7 := $u1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} $i8 := ldv_undef_int();
    call {:si_unique_call 1472} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb7;

  $bb7:
    call $i10, $p11, $p12, $p13, $p14, $i15, $i16, $p17, $p18, $p19, $p20, $p21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $p35, $p36, $p37, $p38, $i39, $i40, $p41, $p42, $p43, $p44, $p45, $p46, $p47, $p48, $p49, $p50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $p63, $p64, $p65, $p66, $p67, $p68, $p69, $p70, $p71, $p72, $i73, $i74 := ldv_scsi_host_template_scsi_host_template_instance_4_loop_$bb7($p7, $i10, $p11, $p12, $p13, $p14, $i15, $i16, $p17, $p18, $p19, $p20, $p21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $p35, $p36, $p37, $p38, $i39, $i40, $p41, $p42, $p43, $p44, $p45, $p46, $p47, $p48, $p49, $p50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $p63, $p64, $p65, $p66, $p67, $p68, $p69, $p70, $p71, $p72, $i73, $i74);
    goto $bb7_last;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} ldv_ldv_pre_probe_134();
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 3816)), $mul.ref(504, 1));
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 336)), $mul.ref(16, 1));
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i23 := $i10;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} $i24 := ldv_ldv_post_probe_135($i23);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    call {:si_unique_call 1477} {:cexpr "ldv_4_ret_default"} boogie_si_record_i32($i24);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} $i25 := ldv_undef_int();
    call {:si_unique_call 1479} {:cexpr "tmp"} boogie_si_record_i32($i25);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i24, 0);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} ldv_assume($i32);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} $i33 := ldv_undef_int();
    call {:si_unique_call 1490} {:cexpr "tmp___0"} boogie_si_record_i32($i33);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i34 == 1);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb18:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i10 := $i24;
    goto $bb18_dummy;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i24, 0);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} ldv_assume($i28);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} $i29 := ldv_undef_int();
    call {:si_unique_call 1482} {:cexpr "tmp___8"} boogie_si_record_i32($i29);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i30 == 1);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    call $p45, $p46, $p47, $p48, $p49, $p50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $p63, $p64, $p65, $p66, $p67, $p68, $p69, $p70, $p71, $p72, $i73, $i74 := ldv_scsi_host_template_scsi_host_template_instance_4_loop_$bb16($p7, $p45, $p46, $p47, $p48, $p49, $p50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $p63, $p64, $p65, $p66, $p67, $p68, $p69, $p70, $p71, $p72, $i73, $i74);
    goto $bb16_last;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} $p47 := ldv_xmalloc(480);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} $p49 := ldv_xmalloc(4);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} $i51 := ldv_undef_int();
    call {:si_unique_call 1488} {:cexpr "tmp___4"} boogie_si_record_i32($i51);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 1);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i51, 2);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i51, 3);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i51, 4);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i51, 5);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i51, 6);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i51, 7);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i51, 8);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i51, 9);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i51, 10);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i51, 11);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} ldv_stop();
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p46);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} ldv_free($p70);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p48);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} ldv_free($p71);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p50);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} ldv_free($p72);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} $i73 := ldv_undef_int();
    call {:si_unique_call 1514} {:cexpr "tmp___8"} boogie_si_record_i32($i73);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb72_dummy;

  $bb20:
    assume $i74 == 1;
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p7, $mul.ref(0, 3816)), $mul.ref(504, 1));
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.1, $p35);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.1, $p37);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb21:
    assume $i40 == 1;
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p7, $mul.ref(0, 3816)), $mul.ref(504, 1));
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.1, $p41);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.1, $p43);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} ldv_scsi_host_template_instance_release_4_2($p44, $p7);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb64:
    assume $i62 == 1;
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} ldv_scsi_host_template_instance_callback_4_4($u12, $p46, $p48, $u0, $p50);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb60:
    assume $i61 == 1;
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} ldv_scsi_host_template_instance_callback_4_17($u11, $u7);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    goto $bb69;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb56:
    assume $i60 == 1;
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} ldv_scsi_host_template_instance_callback_4_18($u11, $u7);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    goto $bb69;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb52:
    assume $i59 == 1;
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} ldv_scsi_host_template_instance_callback_4_19($u11, $u7);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    goto $bb69;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb48:
    assume $i58 == 1;
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} ldv_scsi_host_template_instance_callback_4_20($u11, $u7);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    goto $bb69;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i57 == 1;
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} ldv_scsi_host_template_instance_callback_4_21($u10, $p7);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb40:
    assume $i56 == 1;
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} ldv_scsi_host_template_instance_callback_4_22($u9, $u3, $u0, $u4);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb36:
    assume $i55 == 1;
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} $p67 := ldv_xmalloc(976);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} ldv_scsi_host_template_instance_callback_4_25($u8, $p68, $u3);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} ldv_free($p69);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb32:
    assume $i54 == 1;
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} ldv_scsi_host_template_instance_callback_4_28($u6, $p7, $u7);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    goto $bb69;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i53 == 1;
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} $p63 := ldv_xmalloc(1);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} $p64 := ldv_xmalloc(8);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} ldv_scsi_host_template_instance_callback_4_29($u5, $u3, $p63, $u0, $p65);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} ldv_free($p63);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} ldv_free($p66);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb24:
    assume $i52 == 1;
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} ldv_scsi_host_template_instance_callback_4_32($u2, $u3, $u4, $u0);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    goto $bb69;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb14;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 3816)), $mul.ref(504, 1));
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 336)), $mul.ref(16, 1));
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.1, $p19);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} $i22 := ldv_scsi_host_template_instance_probe_4_10($p21, $p7);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    call {:si_unique_call 1475} {:cexpr "ldv_4_ret_default"} boogie_si_record_i32($i22);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb10;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} ldv_free($p6);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $p7 := $p5;
    goto $bb3;

  $bb72_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} $p45 := ldv_xmalloc(3464);
    goto corral_source_split_4486;

  $bb18_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4443;
}



const ldv_scsi_host_template_scsi_host_template_instance_5: ref;

axiom ldv_scsi_host_template_scsi_host_template_instance_5 == $sub.ref(0, 367068);

procedure ldv_scsi_host_template_scsi_host_template_instance_5($p0: ref);
  free requires assertsPassed;
  modifies $M.30, $M.31, $M.1, $M.11, $M.6, $CurrAddr, $M.23, $M.19, assertsPassed, $M.29, $M.26, $M.24, $M.20, $M.21, $M.12;



implementation ldv_scsi_host_template_scsi_host_template_instance_5($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $p7 := $u1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} $i8 := ldv_undef_int();
    call {:si_unique_call 1517} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb7;

  $bb7:
    call $i10, $p11, $p12, $p13, $p14, $i15, $i16, $p17, $p18, $p19, $p20, $p21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $p35, $p36, $p37, $p38, $i39, $i40, $p41, $p42, $p43, $p44, $p45, $p46, $p47, $p48, $p49, $p50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $p63, $p64, $p65, $p66, $p67, $p68, $p69, $p70, $p71, $p72, $i73, $i74 := ldv_scsi_host_template_scsi_host_template_instance_5_loop_$bb7($p7, $i10, $p11, $p12, $p13, $p14, $i15, $i16, $p17, $p18, $p19, $p20, $p21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $p35, $p36, $p37, $p38, $i39, $i40, $p41, $p42, $p43, $p44, $p45, $p46, $p47, $p48, $p49, $p50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $p63, $p64, $p65, $p66, $p67, $p68, $p69, $p70, $p71, $p72, $i73, $i74);
    goto $bb7_last;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} ldv_ldv_pre_probe_136();
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 3816)), $mul.ref(504, 1));
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 336)), $mul.ref(16, 1));
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i23 := $i10;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} $i24 := ldv_ldv_post_probe_137($i23);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    call {:si_unique_call 1522} {:cexpr "ldv_5_ret_default"} boogie_si_record_i32($i24);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} $i25 := ldv_undef_int();
    call {:si_unique_call 1524} {:cexpr "tmp"} boogie_si_record_i32($i25);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i24, 0);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} ldv_assume($i32);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} $i33 := ldv_undef_int();
    call {:si_unique_call 1535} {:cexpr "tmp___0"} boogie_si_record_i32($i33);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i34 == 1);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb18:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i10 := $i24;
    goto $bb18_dummy;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i24, 0);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} ldv_assume($i28);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} $i29 := ldv_undef_int();
    call {:si_unique_call 1527} {:cexpr "tmp___8"} boogie_si_record_i32($i29);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i30 == 1);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    call $p45, $p46, $p47, $p48, $p49, $p50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $p63, $p64, $p65, $p66, $p67, $p68, $p69, $p70, $p71, $p72, $i73, $i74 := ldv_scsi_host_template_scsi_host_template_instance_5_loop_$bb16($p7, $p45, $p46, $p47, $p48, $p49, $p50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $p63, $p64, $p65, $p66, $p67, $p68, $p69, $p70, $p71, $p72, $i73, $i74);
    goto $bb16_last;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} $p47 := ldv_xmalloc(480);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} $p49 := ldv_xmalloc(4);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} $i51 := ldv_undef_int();
    call {:si_unique_call 1533} {:cexpr "tmp___4"} boogie_si_record_i32($i51);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 1);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i51, 2);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i51, 3);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i51, 4);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i51, 5);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i51, 6);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i51, 7);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i51, 8);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i51, 9);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i51, 10);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i51, 11);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} ldv_stop();
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p46);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} ldv_free($p70);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p48);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} ldv_free($p71);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p50);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} ldv_free($p72);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} $i73 := ldv_undef_int();
    call {:si_unique_call 1559} {:cexpr "tmp___8"} boogie_si_record_i32($i73);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb72_dummy;

  $bb20:
    assume $i74 == 1;
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p7, $mul.ref(0, 3816)), $mul.ref(504, 1));
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.1, $p35);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.1, $p37);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb21:
    assume $i40 == 1;
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p7, $mul.ref(0, 3816)), $mul.ref(504, 1));
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.1, $p41);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.1, $p43);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} ldv_scsi_host_template_instance_release_5_2($p44, $p7);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb64:
    assume $i62 == 1;
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} ldv_scsi_host_template_instance_callback_5_4($u12, $p46, $p48, $u0, $p50);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb60:
    assume $i61 == 1;
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} ldv_scsi_host_template_instance_callback_5_17($u11, $u7);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    goto $bb69;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb56:
    assume $i60 == 1;
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} ldv_scsi_host_template_instance_callback_5_18($u11, $u7);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    goto $bb69;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb52:
    assume $i59 == 1;
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} ldv_scsi_host_template_instance_callback_5_19($u11, $u7);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    goto $bb69;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb48:
    assume $i58 == 1;
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} ldv_scsi_host_template_instance_callback_5_20($u11, $u7);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    goto $bb69;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i57 == 1;
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} ldv_scsi_host_template_instance_callback_5_21($u10, $p7);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb40:
    assume $i56 == 1;
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} ldv_scsi_host_template_instance_callback_5_22($u9, $u3, $u0, $u4);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb36:
    assume $i55 == 1;
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} $p67 := ldv_xmalloc(976);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} ldv_scsi_host_template_instance_callback_5_25($u8, $p68, $u3);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} ldv_free($p69);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb32:
    assume $i54 == 1;
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} ldv_scsi_host_template_instance_callback_5_28($u6, $p7, $u7);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    goto $bb69;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i53 == 1;
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} $p63 := ldv_xmalloc(1);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} $p64 := ldv_xmalloc(8);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} ldv_scsi_host_template_instance_callback_5_29($u5, $u3, $p63, $u0, $p65);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} ldv_free($p63);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} ldv_free($p66);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb24:
    assume $i52 == 1;
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} ldv_scsi_host_template_instance_callback_5_32($u2, $u3, $u4, $u0);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    goto $bb69;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb14;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 3816)), $mul.ref(504, 1));
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 336)), $mul.ref(16, 1));
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.1, $p19);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} $i22 := ldv_scsi_host_template_instance_probe_5_10($p21, $p7);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    call {:si_unique_call 1520} {:cexpr "ldv_5_ret_default"} boogie_si_record_i32($i22);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb10;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} ldv_free($p6);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $p7 := $p5;
    goto $bb3;

  $bb72_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} $p45 := ldv_xmalloc(3464);
    goto corral_source_split_4654;

  $bb18_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4611;
}



const ldv_free: ref;

axiom ldv_free == $sub.ref(0, 368100);

procedure ldv_free($p0: ref);
  free requires assertsPassed;



implementation ldv_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} free_($p0);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    return;
}



const ldv_ldv_pre_probe_136: ref;

axiom ldv_ldv_pre_probe_136 == $sub.ref(0, 369132);

procedure ldv_ldv_pre_probe_136();
  free requires assertsPassed;
  modifies $M.30, $M.31;



implementation ldv_ldv_pre_probe_136()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} ldv_pre_probe();
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    return;
}



const ldv_scsi_host_template_instance_probe_5_10: ref;

axiom ldv_scsi_host_template_instance_probe_5_10 == $sub.ref(0, 370164);

procedure ldv_scsi_host_template_instance_probe_5_10($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.11, $M.6, $CurrAddr, $M.19, $M.20, $M.21, $M.12, assertsPassed;



implementation ldv_scsi_host_template_instance_probe_5_10($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} $i2 := devirtbounce.8($p0, $p1);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    call {:si_unique_call 1565} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_199:
    assume !assertsPassed;
    return;
}



const ldv_ldv_post_probe_137: ref;

axiom ldv_ldv_post_probe_137 == $sub.ref(0, 371196);

procedure ldv_ldv_post_probe_137($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.31, assertsPassed;



implementation ldv_ldv_post_probe_137($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} {:cexpr "ldv_ldv_post_probe_137:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} ldv_linux_net_register_check_return_value_probe($i0);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} ldv_linux_usb_register_check_return_value_probe($i0);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} $i1 := ldv_post_probe($i0);
    call {:si_unique_call 1570} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  SeqInstr_202:
    assume !assertsPassed;
    return;
}



const ldv_scsi_host_template_instance_release_5_2: ref;

axiom ldv_scsi_host_template_instance_release_5_2 == $sub.ref(0, 372228);

procedure ldv_scsi_host_template_instance_release_5_2($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.11, $M.6, $CurrAddr, $M.19, $M.20, $M.21, $M.12, assertsPassed;



implementation ldv_scsi_host_template_instance_release_5_2($p0: ref, $p1: ref)
{
  var vslice_dummy_var_154: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} vslice_dummy_var_154 := devirtbounce.8($p0, $p1);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_208:
    assume !assertsPassed;
    return;
}



const ldv_scsi_host_template_instance_callback_5_32: ref;

axiom ldv_scsi_host_template_instance_callback_5_32 == $sub.ref(0, 373260);

procedure ldv_scsi_host_template_instance_callback_5_32($p0: ref, $p1: ref, $i2: i32, $i3: i64);
  free requires assertsPassed;
  modifies $M.1, $M.11, $M.29, $M.19, $M.26, assertsPassed, $CurrAddr, $M.20, $M.21, $M.6, $M.12;



implementation ldv_scsi_host_template_instance_callback_5_32($p0: ref, $p1: ref, $i2: i32, $i3: i64)
{
  var vslice_dummy_var_155: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} {:cexpr "ldv_scsi_host_template_instance_callback_5_32:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1573} {:cexpr "ldv_scsi_host_template_instance_callback_5_32:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} vslice_dummy_var_155 := megadev_unlocked_ioctl($p1, $i2, $i3);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_211:
    assume !assertsPassed;
    return;
}



const ldv_scsi_host_template_instance_callback_5_29: ref;

axiom ldv_scsi_host_template_instance_callback_5_29 == $sub.ref(0, 374292);

procedure ldv_scsi_host_template_instance_callback_5_29($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;



implementation ldv_scsi_host_template_instance_callback_5_29($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref)
{
  var vslice_dummy_var_156: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} {:cexpr "ldv_scsi_host_template_instance_callback_5_29:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} vslice_dummy_var_156 := seq_read($p1, $p2, $i3, $p4);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    return;
}



const ldv_scsi_host_template_instance_callback_5_28: ref;

axiom ldv_scsi_host_template_instance_callback_5_28 == $sub.ref(0, 375324);

procedure ldv_scsi_host_template_instance_callback_5_28($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.23, $M.1, $M.19, $M.24, $M.11, assertsPassed, $CurrAddr, $M.6, $M.12, $M.20, $M.21;



implementation ldv_scsi_host_template_instance_callback_5_28($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_157: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} vslice_dummy_var_157 := megaraid_queue($p1, $p2);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_214:
    assume !assertsPassed;
    return;
}



const ldv_scsi_host_template_instance_callback_5_25: ref;

axiom ldv_scsi_host_template_instance_callback_5_25 == $sub.ref(0, 376356);

procedure ldv_scsi_host_template_instance_callback_5_25($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_scsi_host_template_instance_callback_5_25($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_158: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} vslice_dummy_var_158 := single_release($p1, $p2);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    return;
}



const ldv_scsi_host_template_instance_callback_5_22: ref;

axiom ldv_scsi_host_template_instance_callback_5_22 == $sub.ref(0, 377388);

procedure ldv_scsi_host_template_instance_callback_5_22($p0: ref, $p1: ref, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation ldv_scsi_host_template_instance_callback_5_22($p0: ref, $p1: ref, $i2: i64, $i3: i32)
{
  var vslice_dummy_var_159: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} {:cexpr "ldv_scsi_host_template_instance_callback_5_22:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 1580} {:cexpr "ldv_scsi_host_template_instance_callback_5_22:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} vslice_dummy_var_159 := seq_lseek($p1, $i2, $i3);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    return;
}



const ldv_scsi_host_template_instance_callback_5_21: ref;

axiom ldv_scsi_host_template_instance_callback_5_21 == $sub.ref(0, 378420);

procedure ldv_scsi_host_template_instance_callback_5_21($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_scsi_host_template_instance_callback_5_21($p0: ref, $p1: ref)
{
  var vslice_dummy_var_160: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} vslice_dummy_var_160 := megaraid_info($p1);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    return;
}



const ldv_scsi_host_template_instance_callback_5_20: ref;

axiom ldv_scsi_host_template_instance_callback_5_20 == $sub.ref(0, 379452);

procedure ldv_scsi_host_template_instance_callback_5_20($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.11, $M.6, $CurrAddr, $M.19, $M.20, $M.21, $M.12, assertsPassed;



implementation ldv_scsi_host_template_instance_callback_5_20($p0: ref, $p1: ref)
{
  var vslice_dummy_var_161: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} vslice_dummy_var_161 := megaraid_reset($p1);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_217:
    assume !assertsPassed;
    return;
}



const ldv_scsi_host_template_instance_callback_5_19: ref;

axiom ldv_scsi_host_template_instance_callback_5_19 == $sub.ref(0, 380484);

procedure ldv_scsi_host_template_instance_callback_5_19($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.11, $M.6, $CurrAddr, $M.19, $M.20, $M.21, $M.12, assertsPassed;



implementation ldv_scsi_host_template_instance_callback_5_19($p0: ref, $p1: ref)
{
  var vslice_dummy_var_162: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} vslice_dummy_var_162 := megaraid_reset($p1);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_220:
    assume !assertsPassed;
    return;
}



const ldv_scsi_host_template_instance_callback_5_18: ref;

axiom ldv_scsi_host_template_instance_callback_5_18 == $sub.ref(0, 381516);

procedure ldv_scsi_host_template_instance_callback_5_18($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.11, $M.6, $CurrAddr, $M.19, $M.20, $M.21, $M.12, assertsPassed;



implementation ldv_scsi_host_template_instance_callback_5_18($p0: ref, $p1: ref)
{
  var vslice_dummy_var_163: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} vslice_dummy_var_163 := megaraid_reset($p1);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_223:
    assume !assertsPassed;
    return;
}



const ldv_scsi_host_template_instance_callback_5_17: ref;

axiom ldv_scsi_host_template_instance_callback_5_17 == $sub.ref(0, 382548);

procedure ldv_scsi_host_template_instance_callback_5_17($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.11, $M.6, $CurrAddr, $M.12, assertsPassed, $M.19, $M.20, $M.21;



implementation ldv_scsi_host_template_instance_callback_5_17($p0: ref, $p1: ref)
{
  var vslice_dummy_var_164: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} vslice_dummy_var_164 := megaraid_abort($p1);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_226:
    assume !assertsPassed;
    return;
}



const ldv_scsi_host_template_instance_callback_5_4: ref;

axiom ldv_scsi_host_template_instance_callback_5_4 == $sub.ref(0, 383580);

procedure ldv_scsi_host_template_instance_callback_5_4($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_scsi_host_template_instance_callback_5_4($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref)
{
  var vslice_dummy_var_165: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} {:cexpr "ldv_scsi_host_template_instance_callback_5_4:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} vslice_dummy_var_165 := megaraid_biosparam($p1, $p2, $i3, $p4);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 384612);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const megaraid_biosparam: ref;

axiom megaraid_biosparam == $sub.ref(0, 385644);

procedure megaraid_biosparam($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation megaraid_biosparam($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p37: ref;
  var $i38: i32;
  var $i40: i32;
  var $i41: i64;
  var $i42: i64;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i64;
  var $i47: i64;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $i36: i32;
  var vslice_dummy_var_166: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} {:cexpr "megaraid_biosparam:arg:capacity"} boogie_si_record_i64($i2);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3480)), $mul.ref(0, 1));
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 3816)), $mul.ref(3816, 1));
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1912)), $mul.ref(1444, 1));
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.11, $p8);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 3480)), $mul.ref(204, 1));
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.1, $p10);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $i12 := $ashr.i32($i9, $i11);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 1);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} $p29 := scsi_bios_ptable($p1);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 3480)), $mul.ref(204, 1));
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.1, $p37);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1596} vslice_dummy_var_166 := printk.ref.i32(.str.170, $i38);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $i40 := $mul.i32(64, 32);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i40);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $i42 := $udiv.i64($i2, $i41);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i64.i32($i42);
    call {:si_unique_call 1597} {:cexpr "cylinders"} boogie_si_record_i32($i43);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $i44 := $ugt.i64($i2, 2097151);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i49, $i50, $i51 := 64, 32, $i43;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p3, $i49);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p3, $mul.ref(1, 4));
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p52, $i50);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p3, $mul.ref(2, 4));
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p53, $i51);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $r := $i36;
    return;

  $bb14:
    assume $i44 == 1;
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $i45 := $mul.i32(255, 63);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i45);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i47 := $udiv.i64($i2, $i46);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i64.i32($i47);
    call {:si_unique_call 1598} {:cexpr "cylinders"} boogie_si_record_i32($i48);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $i49, $i50, $i51 := 255, 63, $i48;
    goto $bb16;

  $bb7:
    assume $i31 == 1;
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p3, $mul.ref(2, 4));
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p3, $mul.ref(1, 4));
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} $i34 := scsi_partsize($p29, $i2, $p32, $p3, $p33);
    call {:si_unique_call 1594} {:cexpr "rval"} boogie_si_record_i32($i34);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} kfree($p29);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, $sub.i32(0, 1));
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb9:
    assume $i35 == 1;
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $i36 := $i34;
    goto $bb11;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $i15 := $mul.i32(64, 32);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i17 := $udiv.i64($i2, $i16);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i64.i32($i17);
    call {:si_unique_call 1590} {:cexpr "cylinders"} boogie_si_record_i32($i18);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $i19 := $ugt.i64($i2, 2097151);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i24, $i25, $i26 := 64, 32, $i18;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p3, $i24);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p3, $mul.ref(1, 4));
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p27, $i25);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p3, $mul.ref(2, 4));
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p28, $i26);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i19 == 1;
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $i20 := $mul.i32(255, 63);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $i22 := $udiv.i64($i2, $i21);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i64.i32($i22);
    call {:si_unique_call 1592} {:cexpr "cylinders"} boogie_si_record_i32($i23);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $i24, $i25, $i26 := 255, 63, $i23;
    goto $bb5;
}



const scsi_bios_ptable: ref;

axiom scsi_bios_ptable == $sub.ref(0, 386676);

procedure scsi_bios_ptable($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation scsi_bios_ptable($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} $p1 := external_alloc();
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const scsi_partsize: ref;

axiom scsi_partsize == $sub.ref(0, 387708);

procedure scsi_partsize($p0: ref, $i1: i64, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_partsize($p0: ref, $i1: i64, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1600} {:cexpr "scsi_partsize:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1601} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1602} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 388740);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1603} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 1604} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const megaraid_abort: ref;

axiom megaraid_abort == $sub.ref(0, 389772);

procedure megaraid_abort($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.11, $M.6, $CurrAddr, $M.12, assertsPassed, $M.19, $M.20, $M.21;



implementation megaraid_abort($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 3480)), $mul.ref(0, 1));
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 3816)), $mul.ref(3816, 1));
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} $i7 := megaraid_abort_and_reset($p6, $p0, 8);
    call {:si_unique_call 1606} {:cexpr "rval"} boogie_si_record_i32($i7);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} mega_rundoneq($p6);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_229:
    assume !assertsPassed;
    return;
}



const megaraid_abort_and_reset: ref;

axiom megaraid_abort_and_reset == $sub.ref(0, 390804);

procedure megaraid_abort_and_reset($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation megaraid_abort_and_reset($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $p36: ref;
  var $p37: ref;
  var $i26: i32;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i32;
  var vslice_dummy_var_169: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} {:cexpr "megaraid_abort_and_reset:arg:aor"} boogie_si_record_i32($i2);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 8);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $p4 := (if $i3 == 1 then .str.153 else .str.154);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.1, $p6);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 3480)), $mul.ref(204, 1));
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.1, $p11);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 3480)), $mul.ref(200, 1));
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.1, $p15);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 3480)), $mul.ref(208, 1));
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.1, $p19);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i64.i32($i20);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} vslice_dummy_var_167 := printk.ref.ref.i32.i32.i32.i32(.str.152, $p4, $i8, $i12, $i16, $i21);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(88, 1));
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} $i24 := list_empty($p23);
    call {:si_unique_call 1611} {:cexpr "tmp"} boogie_si_record_i32($i24);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(88, 1)), $mul.ref(0, 1));
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.1, $p28);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.1, $p30);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p29);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(88, 1));
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i32, $i34);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i26 := 8195;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb5:
    assume $i35 == 1;
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $p36, $p37 := $p31, $p29;
    goto $bb8;

  $bb8:
    call $p38, $p39, $p40, $p41, $i42, $i43, $i44, $p45, $p70, $p71, $i72, $i73, $p36, $p37 := megaraid_abort_and_reset_loop_$bb8($p1, $i34, $p38, $p39, $p40, $p41, $i42, $i43, $i44, $p45, $p70, $p71, $i72, $i73, $p36, $p37);
    goto $bb8_last;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p38, $mul.ref($sub.ref(0, 8), 184));
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p38, $mul.ref($sub.ref(0, 8), 184)), $mul.ref(104, 1));
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.1, $p40);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p1);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i42, $i43);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $p45 := $p39;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p36, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.1, $p70);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p36);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, $i34);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i73 == 1);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb18:
    assume $i73 == 1;
    assume {:verifier.code 0} true;
    $p36, $p37 := $p71, $p36;
    goto $bb18_dummy;

  $bb10:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 184)), $mul.ref(4, 1));
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.1, $p46);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $i48 := $or.i32($i47, $i2);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p45, $mul.ref(0, 184)), $mul.ref(4, 1));
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p49, $i48);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p45, $mul.ref(0, 184)), $mul.ref(4, 1));
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.1, $p50);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, 4);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i53 == 1);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i2, 8);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $p60 := (if $i59 == 1 then .str.153 else .str.154);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p45, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.1, $p61);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} vslice_dummy_var_169 := printk.ref.ref.i32(.str.156, $p60, $i62);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} mega_free_scb($p0, $p45);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i2, 8);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i64 == 1);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p66, 524288);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(384, 1));
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(104, 1));
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1615} list_add_tail($p68, $p69);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $i26 := 8194;
    goto $bb3;

  $bb14:
    assume $i64 == 1;
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p65, 327680);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb12:
    assume $i53 == 1;
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i2, 8);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $p55 := (if $i54 == 1 then .str.153 else .str.154);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p45, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.1, $p56);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} vslice_dummy_var_168 := printk.ref.ref.i32(.str.155, $p55, $i57);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $i26 := 8195;
    goto $bb3;

  $bb1:
    assume $i25 == 1;
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i26 := 8195;
    goto $bb3;

  $bb18_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4943;
}



const mega_rundoneq: ref;

axiom mega_rundoneq == $sub.ref(0, 391836);

procedure mega_rundoneq($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.11, $M.6, $CurrAddr, $M.12, assertsPassed, $M.19, $M.20, $M.21;



implementation mega_rundoneq($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p8: ref;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(104, 1)), $mul.ref(0, 1));
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(104, 1));
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i4, $i6);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(104, 1));
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} INIT_LIST_HEAD($p18);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $p8 := $p3;
    goto $bb4;

  $bb4:
    call $p9, $p10, $p11, $p12, $p13, $p14, $p15, $i16, $i17, $p8 := mega_rundoneq_loop_$bb4($i6, $p9, $p10, $p11, $p12, $p13, $p14, $p15, $i16, $i17, $p8);
    goto $bb4_last;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref($sub.ref(0, 384), 472));
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p10, $mul.ref($sub.ref(0, 384), 472)), $mul.ref(376, 1));
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    call {:si_unique_call 1616} devirtbounce.9($p13, $p11);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, $i6);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $p8 := $p15;
    goto $bb6_dummy;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5009;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 392868);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const mega_free_scb: ref;

axiom mega_free_scb == $sub.ref(0, 393900);

procedure mega_free_scb($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation mega_free_scb($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(92, 1));
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, $p2);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 65535);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(92, 1));
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} list_del_init($p10);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(4, 1));
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p11, 0);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p12, $0.ref);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(72, 1));
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} list_add($p13, $p14);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} scsi_dma_unmap($p9);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb10;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 394932);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} __list_add($p0, $p3, $p1);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 395964);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    return;
}



const scsi_dma_unmap: ref;

axiom scsi_dma_unmap == $sub.ref(0, 396996);

procedure scsi_dma_unmap($p0: ref);
  free requires assertsPassed;



implementation scsi_dma_unmap($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    return;
}



const list_del_init: ref;

axiom list_del_init == $sub.ref(0, 398028);

procedure list_del_init($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation list_del_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} __list_del_entry($p0);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1623} INIT_LIST_HEAD($p0);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    return;
}



const list_add: ref;

axiom list_add == $sub.ref(0, 399060);

procedure list_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} __list_add($p0, $p1, $p3);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    return;
}



const __list_del_entry: ref;

axiom __list_del_entry == $sub.ref(0, 400092);

procedure __list_del_entry($p0: ref);
  free requires assertsPassed;



implementation __list_del_entry($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    return;
}



const megaraid_reset: ref;

axiom megaraid_reset == $sub.ref(0, 401124);

procedure megaraid_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.11, $M.6, $CurrAddr, $M.19, $M.20, $M.21, $M.12, assertsPassed;



implementation megaraid_reset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var vslice_dummy_var_170: i32;
  var vslice_dummy_var_171: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} $p1 := $alloc($mul.ref(20, $zext.i32.i64(1)));
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 3480)), $mul.ref(0, 1));
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 3816)), $mul.ref(3816, 1));
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p8, 110);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(2, 1));
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p9, 3);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} $i10 := mega_internal_command($p7, $p1, $0.ref);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    call {:si_unique_call 1627} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1629} vslice_dummy_var_171 := printk.ref(.str.158);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 1912)), $mul.ref(1360, 1));
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} ldv_spin_lock_irq_104($p14);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1631} $i15 := megaraid_abort_and_reset($p7, $p0, 16);
    call {:si_unique_call 1632} {:cexpr "rval"} boogie_si_record_i32($i15);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1633} mega_rundoneq($p7);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p7, $mul.ref(0, 1912)), $mul.ref(1360, 1));
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} ldv_spin_unlock_irq_105($p16);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} vslice_dummy_var_170 := printk.ref(.str.157);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_235:
    assume !assertsPassed;
    return;
}



const mega_internal_command: ref;

axiom mega_internal_command == $sub.ref(0, 402156);

procedure mega_internal_command($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.19, $M.20, $M.21, assertsPassed;



implementation mega_internal_command($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i8;
  var $p30: ref;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $p44: ref;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;
  var vslice_dummy_var_172: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1640, 1));
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1635} ldv_mutex_lock_110($p3);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1456, 1));
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_43 := $M.1;
    call {:si_unique_call 1636} cmdloc_dummy_var_44 := $memset.i8(cmdloc_dummy_var_43, $p5, 0, 184, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_44;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1456, 1)), $mul.ref(0, 1));
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p6, 127);
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1456, 1)), $mul.ref(4, 1));
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.1, $p7);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i8, 3);
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1456, 1)), $mul.ref(4, 1));
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p10, $i9);
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1456, 1)), $mul.ref(24, 1));
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p1);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_45 := $M.1;
    cmdloc_dummy_var_46 := $M.1;
    call {:si_unique_call 1637} cmdloc_dummy_var_47 := $memcpy.i8(cmdloc_dummy_var_45, cmdloc_dummy_var_46, $p12, $p13, 18, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_47;
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.1, $p14);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 3);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1360, 1));
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_111($p19);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1456, 1)), $mul.ref(8, 1));
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(88, 1));
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} list_add_tail($p20, $p21);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1356, 1));
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} $i23 := atomic_read($p22);
    call {:si_unique_call 1641} {:cexpr "tmp"} boogie_si_record_i32($i23);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1360, 1));
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1643} ldv_spin_unlock_irqrestore_97($p25, $u0);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1808, 1));
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} ldv_wait_for_completion_113($p26);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1800, 1));
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.1, $p27);
    call {:si_unique_call 1645} {:cexpr "rval"} boogie_si_record_i32($i28);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(17, 1));
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p30, $i29);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i28, 0);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1640, 1));
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1647} ldv_mutex_unlock_114($p44);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i31 == 1;
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $i32 := $M.18;
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb9;

  $bb10:
    assume $i33 == 1;
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.1, $p34);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(2, 1));
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.1, $p37);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(3, 1));
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.1, $p40);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} vslice_dummy_var_172 := printk.ref.i32.i32.i32.i32(.str.16, $i36, $i39, $i42, $i28);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} mega_runpendq($p0);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i17 == 1;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1456, 1)), $mul.ref(152, 1));
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p18, $p2);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_247:
    assume !assertsPassed;
    return;
}



const ldv_spin_lock_irq_104: ref;

axiom ldv_spin_lock_irq_104 == $sub.ref(0, 403188);

procedure ldv_spin_lock_irq_104($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_spin_lock_irq_104($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_NOT_ARG_SIGN();
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} spin_lock_irq($p0);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_262:
    assume !assertsPassed;
    return;
}



const ldv_spin_unlock_irq_105: ref;

axiom ldv_spin_unlock_irq_105 == $sub.ref(0, 404220);

procedure ldv_spin_unlock_irq_105($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_spin_unlock_irq_105($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_NOT_ARG_SIGN();
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} spin_unlock_irq($p0);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_265:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_NOT_ARG_SIGN: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_NOT_ARG_SIGN == $sub.ref(0, 405252);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_NOT_ARG_SIGN();
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_NOT_ARG_SIGN()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $i0 := $M.19;
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $i3 := $M.19;
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} ldv_assume($i5);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $M.19 := 1;
    call {:si_unique_call 1654} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN"} boogie_si_record_i32(1);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;
}



const spin_unlock_irq: ref;

axiom spin_unlock_irq == $sub.ref(0, 406284);

procedure spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_unlock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1655} _raw_spin_unlock_irq($p2);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irq: ref;

axiom _raw_spin_unlock_irq == $sub.ref(0, 407316);

procedure _raw_spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    return;
}



const ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock: ref;

axiom ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock == $sub.ref(0, 408348);

procedure ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} {:cexpr "ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1657} __VERIFIER_error();
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_NOT_ARG_SIGN: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_NOT_ARG_SIGN == $sub.ref(0, 409380);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_NOT_ARG_SIGN();
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_NOT_ARG_SIGN()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $i0 := $M.19;
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $i3 := $M.19;
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1659} ldv_assume($i5);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $M.19 := 2;
    call {:si_unique_call 1660} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN"} boogie_si_record_i32(2);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_274:
    assume !assertsPassed;
    return;
}



const spin_lock_irq: ref;

axiom spin_lock_irq == $sub.ref(0, 410412);

procedure spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_lock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} _raw_spin_lock_irq($p2);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_irq: ref;

axiom _raw_spin_lock_irq == $sub.ref(0, 411444);

procedure _raw_spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    return;
}



const ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock: ref;

axiom ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock == $sub.ref(0, 412476);

procedure ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} {:cexpr "ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1663} __VERIFIER_error();
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_lock_110: ref;

axiom ldv_mutex_lock_110 == $sub.ref(0, 413508);

procedure ldv_mutex_lock_110($p0: ref);
  free requires assertsPassed;
  modifies $M.20, assertsPassed;



implementation ldv_mutex_lock_110($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} ldv_linux_kernel_locking_mutex_mutex_lock_int_mtx_of_NOT_ARG_SIGN($p0);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_280:
    assume !assertsPassed;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_111: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_111 == $sub.ref(0, 414540);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_111($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_111($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_NOT_ARG_SIGN();
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_283:
    assume !assertsPassed;
    return;
}



const mega_runpendq: ref;

axiom mega_runpendq == $sub.ref(0, 415572);

procedure mega_runpendq($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation mega_runpendq($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(88, 1));
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} $i2 := list_empty($p1);
    call {:si_unique_call 1668} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} __mega_runpendq($p0);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_spin_unlock_irqrestore_97: ref;

axiom ldv_spin_unlock_irqrestore_97 == $sub.ref(0, 416604);

procedure ldv_spin_unlock_irqrestore_97($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_spin_unlock_irqrestore_97($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} {:cexpr "ldv_spin_unlock_irqrestore_97:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1671} ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_NOT_ARG_SIGN();
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} spin_unlock_irqrestore($p0, $i1);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_286:
    assume !assertsPassed;
    return;
}



const ldv_wait_for_completion_113: ref;

axiom ldv_wait_for_completion_113 == $sub.ref(0, 417636);

procedure ldv_wait_for_completion_113($p0: ref);
  free requires assertsPassed;
  modifies $M.21, assertsPassed;



implementation ldv_wait_for_completion_113($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1673} ldv_linux_kernel_sched_completion_wait_for_completion_int_waitq_of_NOT_ARG_SIGN();
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} wait_for_completion($p0);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_289:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_114: ref;

axiom ldv_mutex_unlock_114 == $sub.ref(0, 418668);

procedure ldv_mutex_unlock_114($p0: ref);
  free requires assertsPassed;
  modifies $M.20, assertsPassed;



implementation ldv_mutex_unlock_114($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} ldv_linux_kernel_locking_mutex_mutex_unlock_int_mtx_of_NOT_ARG_SIGN($p0);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_292:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_unlock_int_mtx_of_NOT_ARG_SIGN: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_unlock_int_mtx_of_NOT_ARG_SIGN == $sub.ref(0, 419700);

procedure ldv_linux_kernel_locking_mutex_mutex_unlock_int_mtx_of_NOT_ARG_SIGN($p0: ref);
  free requires assertsPassed;
  modifies $M.20, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_unlock_int_mtx_of_NOT_ARG_SIGN($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $i1 := $M.20;
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i3);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $M.20 := 0;
    call {:si_unique_call 1677} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_int_mtx_of_NOT_ARG_SIGN"} boogie_si_record_i8(0);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_295:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock: ref;

axiom ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock == $sub.ref(0, 420732);

procedure ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} {:cexpr "ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1679} __VERIFIER_error();
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_kernel_sched_completion_wait_for_completion_int_waitq_of_NOT_ARG_SIGN: ref;

axiom ldv_linux_kernel_sched_completion_wait_for_completion_int_waitq_of_NOT_ARG_SIGN == $sub.ref(0, 421764);

procedure ldv_linux_kernel_sched_completion_wait_for_completion_int_waitq_of_NOT_ARG_SIGN();
  free requires assertsPassed;
  modifies $M.21, assertsPassed;



implementation ldv_linux_kernel_sched_completion_wait_for_completion_int_waitq_of_NOT_ARG_SIGN()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $i0 := $M.21;
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1680} ldv_assert_linux_kernel_sched_completion__wait_without_init($i2);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $M.21 := 2;
    call {:si_unique_call 1681} {:cexpr "ldv_linux_kernel_sched_completion_completion_int_waitq_of_NOT_ARG_SIGN"} boogie_si_record_i32(2);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_301:
    assume !assertsPassed;
    return;
}



const wait_for_completion: ref;

axiom wait_for_completion == $sub.ref(0, 422796);

procedure wait_for_completion($p0: ref);
  free requires assertsPassed;



implementation wait_for_completion($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    return;
}



const ldv_assert_linux_kernel_sched_completion__wait_without_init: ref;

axiom ldv_assert_linux_kernel_sched_completion__wait_without_init == $sub.ref(0, 423828);

procedure ldv_assert_linux_kernel_sched_completion__wait_without_init($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_sched_completion__wait_without_init($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} {:cexpr "ldv_assert_linux_kernel_sched_completion__wait_without_init:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1683} __VERIFIER_error();
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 424860);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 425892);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    return;
}



const __mega_runpendq: ref;

axiom __mega_runpendq == $sub.ref(0, 426924);

procedure __mega_runpendq($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation __mega_runpendq($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(88, 1)), $mul.ref(0, 1));
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p3);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(88, 1));
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i6, $i8);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $p10, $p11 := $p5, $p3;
    goto $bb4;

  $bb4:
    call $p12, $p13, $p14, $i15, $i16, $i17, $i18, $i19, $p20, $p21, $i22, $i23, $p10, $p11 := __mega_runpendq_loop_$bb4($p0, $i8, $p12, $p13, $p14, $i15, $i16, $i17, $i18, $i19, $p20, $p21, $i22, $i23, $p10, $p11);
    goto $bb4_last;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref($sub.ref(0, 8), 184));
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p12, $mul.ref($sub.ref(0, 8), 184)), $mul.ref(4, 1));
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.1, $p14);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 4);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p10);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, $i8);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i23 == 1);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $p10, $p11 := $p21, $p10;
    goto $bb13_dummy;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1687} $i18 := issue_scb($p0, $p13);
    call {:si_unique_call 1688} {:cexpr "tmp"} boogie_si_record_i32($i18);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5298;
}



const issue_scb: ref;

axiom issue_scb == $sub.ref(0, 427956);

procedure issue_scb($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation issue_scb($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $i21: i32;
  var $i22: i32;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $i20: i32;
  var $i26: i16;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i8;
  var $p43: ref;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i1;
  var $p53: ref;
  var $i54: i8;
  var $i55: i32;
  var $i56: i1;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i1;
  var $p63: ref;
  var $i64: i8;
  var $i65: i32;
  var $i66: i1;
  var $p68: ref;
  var $i69: i32;
  var $p70: ref;
  var $p71: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i64;
  var $i83: i64;
  var $i84: i1;
  var $i85: i32;
  var $i86: i64;
  var $i87: i64;
  var $i88: i1;
  var $p90: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i64;
  var $i95: i32;
  var $i96: i32;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i64;
  var $i102: i32;
  var $i103: i32;
  var $p104: ref;
  var $i105: i64;
  var $i106: i32;
  var $i34: i32;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(40, 1));
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(48, 1));
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.1, $p7);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1689} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 1690} {:cexpr "tmp"} boogie_si_record_i64($i13);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_48 := $M.1;
    cmdloc_dummy_var_49 := $M.1;
    call {:si_unique_call 1694} cmdloc_dummy_var_50 := $memcpy.i8(cmdloc_dummy_var_48, cmdloc_dummy_var_49, $p36, $p38, 15, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_50;
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.1, $p39);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i40);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p43, $i41);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p45, 1);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1184, 1));
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1695} atomic_inc($p46);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.1, $p48);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 167);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.1, $p53);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 168);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.1, $p58);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 195);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.1, $p63);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 227);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p3, $mul.ref(0, 76)), $mul.ref(0, 1));
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p74, 0);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 76)), $mul.ref(4, 1));
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p75, 0);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(4, 1));
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.1, $p76);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $i78 := $or.i32($i77, 4);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(4, 1));
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p79, $i78);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.1, $p80);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $i82 := $zext.i32.i64($i81);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $i83 := $and.i64($i82, 536870912);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $i84 := $ne.i64($i83, 0);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $i85 := $zext.i1.i32($i84);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $i86 := $sext.i32.i64($i85);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} $i87 := ldv__builtin_expect($i86, 1);
    call {:si_unique_call 1697} {:cexpr "tmp___0"} boogie_si_record_i64($i87);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $i88 := $ne.i64($i87, 0);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i88 == 1);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(8, 1));
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $i101 := $load.i64($M.1, $p100);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $i102 := $trunc.i64.i32($i101);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $i103 := $add.i32($i102, 1);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1699} outb_p($sub.i8(0, 64), $i103);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(8, 1));
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $i105 := $load.i64($M.1, $p104);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $i106 := $trunc.i64.i32($i105);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} outb_p(16, $i106);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $r := $i34;
    return;

  $bb36:
    assume $i88 == 1;
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(49, 1));
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p90, 0);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(50, 1));
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p92, 0);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(56, 1));
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $i94 := $load.i64($M.1, $p93);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i64.i32($i94);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $i96 := $or.i32($i95, 1);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(16, 1));
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.1, $p97);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($p98, $mul.ref(32, 1));
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} writel($i96, $p99);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb29:
    assume $i66 == 1;
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.1, $p68);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref(0, 76)), $mul.ref(0, 1));
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p70, $i69);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p3, $mul.ref(0, 76)), $mul.ref(4, 1));
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p71, 0);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p73, $sub.i32(0, 1));
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb25:
    assume $i61 == 1;
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb21:
    assume $i56 == 1;
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb17:
    assume $i51 == 1;
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1691} __const_udelay(4295);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.1, $p16);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.1, $p30);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb12:
    assume $i33 == 1;
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32(0, 1);
    goto $bb14;

  $bb3:
    assume $i19 == 1;
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $i20 := 1;
    goto $bb6;

  $bb6:
    call $i21, $i22, $i23, $i24, $i25, $i20, $i26, $i27, $i28 := issue_scb_loop_$bb6($p16, $i21, $i22, $i23, $i24, $i25, $i20, $i26, $i27, $i28);
    goto $bb6_last;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $i26 := $M.22;
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $i28 := $ult.i32($i20, $i27);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    assume true;
    goto $bb7, $bb10;

  $bb10:
    assume !($i28 == 1);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb7:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} __const_udelay(4295);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, 1);
    call {:si_unique_call 1693} {:cexpr "i"} boogie_si_record_i32($i22);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.1, $p16);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i20 := $i22;
    goto $bb8_dummy;

  $bb8_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5343;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 428988);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation atomic_inc($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} ldv_linux_usb_dev_atomic_inc($p0);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_usb_dev_atomic_inc: ref;

axiom ldv_linux_usb_dev_atomic_inc == $sub.ref(0, 430020);

procedure ldv_linux_usb_dev_atomic_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_linux_usb_dev_atomic_inc($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.1, $p1);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, 1);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p4, $i3);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    return;
}



const __ldv_linux_kernel_locking_spinlock_spin_lock: ref;

axiom __ldv_linux_kernel_locking_spinlock_spin_lock == $sub.ref(0, 431052);

procedure __ldv_linux_kernel_locking_spinlock_spin_lock($p0: ref);
  free requires assertsPassed;



implementation __ldv_linux_kernel_locking_spinlock_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_lock_int_mtx_of_NOT_ARG_SIGN: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_lock_int_mtx_of_NOT_ARG_SIGN == $sub.ref(0, 432084);

procedure ldv_linux_kernel_locking_mutex_mutex_lock_int_mtx_of_NOT_ARG_SIGN($p0: ref);
  free requires assertsPassed;
  modifies $M.20, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_lock_int_mtx_of_NOT_ARG_SIGN($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $i1 := $M.20;
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $i3 := $xor.i1($i2, 1);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i4);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 1703} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_int_mtx_of_NOT_ARG_SIGN"} boogie_si_record_i8(1);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_307:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock: ref;

axiom ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock == $sub.ref(0, 433116);

procedure ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} {:cexpr "ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1705} __VERIFIER_error();
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const megaraid_info: ref;

axiom megaraid_info == $sub.ref(0, 434148);

procedure megaraid_info($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation megaraid_info($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i32;
  var $p25: ref;
  var vslice_dummy_var_173: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} $p1 := $alloc($mul.ref(512, $zext.i32.i64(1)));
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3816)), $mul.ref(3816, 1));
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 1912)), $mul.ref(1189, 1));
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1912)), $mul.ref(144, 1)), $mul.ref(120, 1));
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.1, $p8);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 1912)), $mul.ref(120, 1));
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 3816)), $mul.ref(788, 1));
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.1, $p13);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 1912)), $mul.ref(120, 1));
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 3816)), $mul.ref(784, 1));
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.1, $p17);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 1912)), $mul.ref(120, 1));
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.1, $p19);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 3816)), $mul.ref(792, 1));
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.1, $p21);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i64.i32($i22);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1707} vslice_dummy_var_173 := sprintf.ref.ref.ref.i32.i32.i32.i32($p4, .str, $p6, $i10, $i14, $i18, $i23);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p1);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $r := $p25;
    return;
}



const seq_lseek: ref;

axiom seq_lseek == $sub.ref(0, 435180);

procedure seq_lseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation seq_lseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1708} {:cexpr "seq_lseek:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1709} {:cexpr "seq_lseek:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1710} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 1711} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const single_release: ref;

axiom single_release == $sub.ref(0, 436212);

procedure single_release($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation single_release($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1712} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1713} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const megaraid_queue: ref;

axiom megaraid_queue == $sub.ref(0, 437244);

procedure megaraid_queue($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $M.1, $M.19, $M.24, $M.11, assertsPassed, $CurrAddr, $M.6, $M.12, $M.20, $M.21;



implementation megaraid_queue($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3816)), $mul.ref(216, 1));
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1714} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_98($p3);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} scsi_cmd_get_serial($p0, $p1);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(376, 1));
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1716} $i6 := megaraid_queue_lck($p1, $p5);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    call {:si_unique_call 1717} {:cexpr "rc"} boogie_si_record_i32($i6);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3816)), $mul.ref(216, 1));
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1718} ldv_spin_unlock_irqrestore_99($p8, $u0);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  SeqInstr_313:
    assume !assertsPassed;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_98: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_98 == $sub.ref(0, 438276);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_98($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_98($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} ldv_linux_kernel_locking_spinlock_spin_lock_host_lock_of_Scsi_Host();
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_322:
    assume !assertsPassed;
    return;
}



const scsi_cmd_get_serial: ref;

axiom scsi_cmd_get_serial == $sub.ref(0, 439308);

procedure scsi_cmd_get_serial($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation scsi_cmd_get_serial($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    return;
}



const megaraid_queue_lck: ref;

axiom megaraid_queue_lck == $sub.ref(0, 440340);

procedure megaraid_queue_lck($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $M.1, $M.19, $M.11, $CurrAddr, $M.6, assertsPassed, $M.12, $M.20, $M.21;



implementation megaraid_queue_lck($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1721} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $M.23 := $store.i32($M.23, $p2, 0);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 3480)), $mul.ref(0, 1));
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 3816)), $mul.ref(3816, 1));
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 472)), $mul.ref(376, 1));
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p9, $p1);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref(0, 1912)), $mul.ref(1360, 1));
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_96($p10);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1723} $p11 := mega_build_cmd($p8, $p0, $p2);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref(0, 184)), $mul.ref(4, 1));
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.1, $p14);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i15, 2);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p11, $mul.ref(0, 184)), $mul.ref(4, 1));
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p17, $i16);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p11, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p8, $mul.ref(0, 1912)), $mul.ref(88, 1));
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} list_add_tail($p18, $p19);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p8, $mul.ref(0, 1912)), $mul.ref(1356, 1));
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} $i21 := atomic_read($p20);
    call {:si_unique_call 1727} {:cexpr "tmp"} boogie_si_record_i32($i21);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $M.23 := $store.i32($M.23, $p2, 0);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p8, $mul.ref(0, 1912)), $mul.ref(1360, 1));
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} ldv_spin_unlock_irqrestore_97($p23, $u0);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.23, $p2);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  SeqInstr_331:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} mega_runpendq($p8);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  SeqInstr_325:
    assume !assertsPassed;
    return;
}



const ldv_spin_unlock_irqrestore_99: ref;

axiom ldv_spin_unlock_irqrestore_99 == $sub.ref(0, 441372);

procedure ldv_spin_unlock_irqrestore_99($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_spin_unlock_irqrestore_99($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1729} {:cexpr "ldv_spin_unlock_irqrestore_99:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} ldv_linux_kernel_locking_spinlock_spin_unlock_host_lock_of_Scsi_Host();
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1731} spin_unlock_irqrestore($p0, $i1);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_334:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_host_lock_of_Scsi_Host: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_host_lock_of_Scsi_Host == $sub.ref(0, 442404);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_host_lock_of_Scsi_Host();
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_host_lock_of_Scsi_Host()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i0 := $M.24;
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $i3 := $M.24;
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} ldv_assume($i5);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 1734} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_host_lock_of_Scsi_Host"} boogie_si_record_i32(1);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_337:
    assume !assertsPassed;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_96: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_96 == $sub.ref(0, 443436);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_96($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_96($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1735} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_NOT_ARG_SIGN();
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_340:
    assume !assertsPassed;
    return;
}



const mega_build_cmd: ref;

axiom mega_build_cmd == $sub.ref(0, 444468);

procedure mega_build_cmd($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $M.11, $M.23, $M.6, $CurrAddr, $M.12, assertsPassed, $M.19, $M.20, $M.21;



implementation mega_build_cmd($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $p10: ref;
  var $i11: i8;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i39: i32;
  var $i26: i32;
  var $i27: i32;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i52: i32;
  var $i53: i32;
  var $i44: i32;
  var $i45: i32;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i74: i32;
  var $p75: ref;
  var $i76: i32;
  var $i77: i64;
  var $i78: i64;
  var $i79: i1;
  var $i80: i32;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $i85: i32;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i64;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i90: i32;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $i103: i8;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $p107: ref;
  var $i108: i8;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $p112: ref;
  var $i113: i8;
  var $i114: i32;
  var $i115: i1;
  var $p116: ref;
  var $p117: ref;
  var $i118: i8;
  var $i119: i32;
  var $i120: i1;
  var $p121: ref;
  var $p122: ref;
  var $i123: i8;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $p127: ref;
  var $i128: i8;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $p132: ref;
  var $i133: i8;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $p137: ref;
  var $i138: i8;
  var $i139: i32;
  var $i140: i1;
  var $p141: ref;
  var $p142: ref;
  var $i143: i8;
  var $i144: i32;
  var $i145: i1;
  var $p146: ref;
  var $p147: ref;
  var $i148: i8;
  var $i149: i32;
  var $i150: i1;
  var $p151: ref;
  var $p152: ref;
  var $i153: i8;
  var $i154: i32;
  var $i155: i1;
  var $p156: ref;
  var $p157: ref;
  var $i158: i8;
  var $i159: i32;
  var $i160: i1;
  var $p161: ref;
  var $i162: i32;
  var $i163: i1;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $i168: i64;
  var $i169: i1;
  var $p171: ref;
  var $p173: ref;
  var $i174: i8;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $i182: i32;
  var $i183: i64;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $i188: i8;
  var $i189: i64;
  var $i190: i1;
  var $p191: ref;
  var $i192: i32;
  var $i193: i64;
  var $i194: i64;
  var $i195: i64;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $i201: i32;
  var $i202: i64;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $i206: i32;
  var $i207: i64;
  var $i208: i64;
  var $i209: i64;
  var $i210: i1;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $i214: i32;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $i218: i32;
  var $p221: ref;
  var $i222: i32;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $i226: i32;
  var $i227: i64;
  var $i228: i64;
  var $i229: i32;
  var $i230: i32;
  var $p231: ref;
  var $p232: ref;
  var $i233: i64;
  var $i234: i1;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $p241: ref;
  var $i242: i8;
  var $i243: i8;
  var $p244: ref;
  var $i245: i8;
  var $i246: i8;
  var $i247: i8;
  var $p248: ref;
  var $p249: ref;
  var $i250: i8;
  var $i251: i8;
  var $i252: i8;
  var $i253: i8;
  var $p254: ref;
  var $p255: ref;
  var $i256: i16;
  var $i257: i8;
  var $p258: ref;
  var $p259: ref;
  var $p260: ref;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $i264: i16;
  var $i265: i64;
  var $p266: ref;
  var $i267: i32;
  var $i268: i1;
  var $p270: ref;
  var $p272: ref;
  var $p273: ref;
  var $p274: ref;
  var $p275: ref;
  var $i276: i32;
  var $i277: i8;
  var $p278: ref;
  var $p279: ref;
  var $i280: i64;
  var $i281: i32;
  var $p283: ref;
  var $p284: ref;
  var $i285: i64;
  var $i286: i1;
  var $p287: ref;
  var $p288: ref;
  var $p289: ref;
  var $i290: i8;
  var $p292: ref;
  var $p293: ref;
  var $i294: i32;
  var $i295: i1;
  var $p296: ref;
  var $p297: ref;
  var $i298: i8;
  var $i299: i32;
  var $i300: i32;
  var $i301: i1;
  var $i302: i32;
  var $i303: i8;
  var $p305: ref;
  var $p306: ref;
  var $p307: ref;
  var $i308: i8;
  var $i309: i32;
  var $i310: i32;
  var $i311: i1;
  var $i312: i32;
  var $i313: i8;
  var $p315: ref;
  var $p316: ref;
  var $i317: i16;
  var $i318: i32;
  var $i319: i1;
  var $p320: ref;
  var $p321: ref;
  var $p322: ref;
  var $i323: i8;
  var $i324: i16;
  var $p326: ref;
  var $p327: ref;
  var $p328: ref;
  var $p329: ref;
  var $i330: i8;
  var $i331: i32;
  var $i332: i32;
  var $p333: ref;
  var $p334: ref;
  var $p335: ref;
  var $i336: i8;
  var $i337: i32;
  var $i338: i32;
  var $i339: i32;
  var $p340: ref;
  var $p341: ref;
  var $p342: ref;
  var $i343: i8;
  var $i344: i32;
  var $i345: i32;
  var $p347: ref;
  var $p349: ref;
  var $i350: i32;
  var $i351: i32;
  var $p353: ref;
  var $p354: ref;
  var $i355: i16;
  var $i356: i32;
  var $i357: i1;
  var $p358: ref;
  var $p359: ref;
  var $p360: ref;
  var $i361: i8;
  var $i362: i16;
  var $i363: i32;
  var $p364: ref;
  var $p365: ref;
  var $p366: ref;
  var $i367: i8;
  var $i368: i16;
  var $i369: i32;
  var $i370: i32;
  var $i371: i32;
  var $i372: i16;
  var $p374: ref;
  var $p375: ref;
  var $p376: ref;
  var $p377: ref;
  var $i378: i8;
  var $i379: i32;
  var $i380: i32;
  var $p381: ref;
  var $p382: ref;
  var $p383: ref;
  var $i384: i8;
  var $i385: i32;
  var $i386: i32;
  var $i387: i32;
  var $p388: ref;
  var $p389: ref;
  var $p390: ref;
  var $i391: i8;
  var $i392: i32;
  var $i393: i32;
  var $i394: i32;
  var $p395: ref;
  var $p396: ref;
  var $p397: ref;
  var $i398: i8;
  var $i399: i32;
  var $i400: i32;
  var $p402: ref;
  var $p403: ref;
  var $i404: i16;
  var $i405: i32;
  var $i406: i1;
  var $p407: ref;
  var $p408: ref;
  var $p409: ref;
  var $i410: i8;
  var $i411: i32;
  var $i412: i32;
  var $p413: ref;
  var $p414: ref;
  var $p415: ref;
  var $i416: i8;
  var $i417: i32;
  var $i418: i32;
  var $i419: i32;
  var $p420: ref;
  var $p421: ref;
  var $p422: ref;
  var $i423: i8;
  var $i424: i32;
  var $i425: i32;
  var $i426: i32;
  var $p427: ref;
  var $p428: ref;
  var $p429: ref;
  var $i430: i8;
  var $i431: i32;
  var $i432: i32;
  var $p434: ref;
  var $p435: ref;
  var $p436: ref;
  var $p437: ref;
  var $i438: i8;
  var $i439: i16;
  var $i440: i32;
  var $i441: i32;
  var $p442: ref;
  var $p443: ref;
  var $p444: ref;
  var $i445: i8;
  var $i446: i16;
  var $i447: i32;
  var $i448: i32;
  var $i449: i16;
  var $p451: ref;
  var $p452: ref;
  var $p453: ref;
  var $i454: i8;
  var $i455: i32;
  var $i456: i32;
  var $i457: i1;
  var $p458: ref;
  var $p459: ref;
  var $p461: ref;
  var $i462: i32;
  var $i463: i8;
  var $p465: ref;
  var $p466: ref;
  var $i467: i32;
  var $i468: i1;
  var $p469: ref;
  var $p470: ref;
  var $p471: ref;
  var $p472: ref;
  var $i473: i64;
  var $i474: i1;
  var $p476: ref;
  var $p477: ref;
  var $p478: ref;
  var $i479: i8;
  var $i480: i32;
  var $i481: i1;
  var $i482: i32;
  var $i483: i8;
  var $p485: ref;
  var $i486: i8;
  var $p488: ref;
  var $p489: ref;
  var $p490: ref;
  var $p491: ref;
  var $p492: ref;
  var $p493: ref;
  var $i494: i64;
  var $i495: i1;
  var $p496: ref;
  var $p497: ref;
  var $p498: ref;
  var $p499: ref;
  var $i500: i32;
  var $i501: i1;
  var $p504: ref;
  var $p505: ref;
  var $i506: i64;
  var $i507: i32;
  var $p509: ref;
  var $p511: ref;
  var $i512: i32;
  var $i513: i1;
  var $p515: ref;
  var $p517: ref;
  var $p518: ref;
  var $i519: i64;
  var $i520: i32;
  var $p522: ref;
  var $p73: ref;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;
  var cmdloc_dummy_var_56: [ref]i8;
  var cmdloc_dummy_var_57: [ref]i8;
  var cmdloc_dummy_var_58: [ref]i8;
  var cmdloc_dummy_var_59: [ref]i8;
  var cmdloc_dummy_var_60: [ref]i8;
  var cmdloc_dummy_var_61: [ref]i8;
  var cmdloc_dummy_var_62: [ref]i8;
  var cmdloc_dummy_var_63: [ref]i8;
  var vslice_dummy_var_174: i32;
  var vslice_dummy_var_175: i32;
  var vslice_dummy_var_176: ref;
  var vslice_dummy_var_177: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1737} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 3480)), $mul.ref(204, 1));
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.1, $p6);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1432, 1)), $mul.ref($i8, 1));
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.1, $p10);
    call {:si_unique_call 1738} {:cexpr "islogical"} boogie_si_record_i8($i11);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1336, 1));
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.1, $p12);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $i46 := $sext.i8.i32($i11);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i47 == 1);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.1, $p54);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 3480)), $mul.ref(204, 1));
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.1, $p56);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32($i57, 4);
    call {:si_unique_call 1744} {:cexpr "channel"} boogie_si_record_i32($i58);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.1, $p59);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 3480)), $mul.ref(200, 1));
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.1, $p61);
    call {:si_unique_call 1745} {:cexpr "target"} boogie_si_record_i32($i62);
    assume {:verifier.code 0} true;
    $i52, $i53 := $i58, $i62;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i44, $i45 := $i52, $i53;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i63 := $sext.i8.i32($i11);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i64 == 1);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.1, $p91);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 3480)), $mul.ref(208, 1));
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $i94 := $load.i64($M.1, $p93);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $i95 := $ugt.i64($i94, 7);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i90 := 0;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $i99 := $sext.i8.i32($i11);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, 0);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i100 == 1);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} $p493 := mega_allocate_scb($p0, $p1);
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $i494 := $p2i.ref.i64($p493);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $i495 := $eq.i64($i494, 0);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    assume {:branchcond $i495} true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i495 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $p496 := $add.ref($add.ref($p493, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $p497 := $bitcast.ref.ref($p496);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $p498 := $bitcast.ref.ref($p497);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_62 := $M.1;
    call {:si_unique_call 1778} cmdloc_dummy_var_63 := $memset.i8(cmdloc_dummy_var_62, $p498, 0, 66, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_63;
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $p499 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1324, 1));
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $i500 := $load.i32($M.1, $p499);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $i501 := $ne.i32($i500, 0);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    assume {:branchcond $i501} true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i501 == 1);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} vslice_dummy_var_177 := mega_prepare_passthru($p0, $p493, $p1, $i44, $i45);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $p511 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1320, 1));
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $i512 := $load.i32($M.1, $p511);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $i513 := $ne.i32($i512, 0);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    assume {:branchcond $i513} true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i513 == 1);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $p517 := $add.ref($add.ref($add.ref($p497, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p517, 3);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $p518 := $add.ref($add.ref($p493, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $i519 := $load.i64($M.1, $p518);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $i520 := $trunc.i64.i32($i519);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $p522 := $add.ref($add.ref($add.ref($p497, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p522, $i520);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $p73 := $p493;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $r := $p73;
    return;

  $bb133:
    assume $i513 == 1;
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $p515 := $add.ref($add.ref($add.ref($p497, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p515, $sub.i8(0, 61));
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb130:
    assume $i501 == 1;
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1779} vslice_dummy_var_176 := mega_prepare_extpassthru($p0, $p493, $p1, $i44, $i45);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $p504 := $add.ref($add.ref($add.ref($p497, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p504, $sub.i8(0, 29));
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $p505 := $add.ref($add.ref($p493, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $i506 := $load.i64($M.1, $p505);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $i507 := $trunc.i64.i32($i506);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $p509 := $add.ref($add.ref($add.ref($p497, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p509, $i507);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb127:
    assume $i495 == 1;
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $M.23 := $store.i32($M.23, $p2, 1);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $p73 := $0.ref;
    goto $bb20;

  $bb32:
    assume $i100 == 1;
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.1, $p101);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $i103 := $load.i8($M.1, $p102);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $i104 := $zext.i8.i32($i103);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, 0);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.1, $p106);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $i108 := $load.i8($M.1, $p107);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i32($i108);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i109, 26);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    assume {:branchcond $i110} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.1, $p111);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $i113 := $load.i8($M.1, $p112);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $i114 := $zext.i8.i32($i113);
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i114, 37);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.1, $p116);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $i118 := $load.i8($M.1, $p117);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $i119 := $zext.i8.i32($i118);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i119, 18);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.1, $p121);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $i123 := $load.i8($M.1, $p122);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $i124 := $zext.i8.i32($i123);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i124, 8);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.1, $p126);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $i128 := $load.i8($M.1, $p127);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $i129 := $zext.i8.i32($i128);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i129, 10);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.1, $p131);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $i133 := $load.i8($M.1, $p132);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $i134 := $zext.i8.i32($i133);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i134, 40);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.1, $p136);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $i138 := $load.i8($M.1, $p137);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $i139 := $zext.i8.i32($i138);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i139, 42);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.1, $p141);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $i143 := $load.i8($M.1, $p142);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $i144 := $zext.i8.i32($i143);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $i145 := $eq.i32($i144, 168);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.1, $p146);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $i148 := $load.i8($M.1, $p147);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $i149 := $zext.i8.i32($i148);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $i150 := $eq.i32($i149, 170);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $p152 := $load.ref($M.1, $p151);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $i153 := $load.i8($M.1, $p152);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $i154 := $zext.i8.i32($i153);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $i155 := $eq.i32($i154, 22);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.1, $p156);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $i158 := $load.i8($M.1, $p157);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $i159 := $zext.i8.i32($i158);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $i160 := $eq.i32($i159, 23);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    assume {:branchcond $i160} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p490 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p490, 262144);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $p491 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(376, 1));
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $p492 := $load.ref($M.1, $p491);
    call {:si_unique_call 1759} devirtbounce.9($p492, $p1);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $p73 := $0.ref;
    goto $bb20;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  $bb78:
    assume $i160 == 1;
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p466 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1904, 1));
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $i467 := $load.i32($M.1, $p466);
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $i468 := $eq.i32($i467, 0);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    assume {:branchcond $i468} true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i468 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1777} $p472 := mega_allocate_scb($p0, $p1);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $i473 := $p2i.ref.i64($p472);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $i474 := $eq.i64($i473, 0);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    assume {:branchcond $i474} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i474 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $p476 := $add.ref($add.ref($add.ref($p472, $mul.ref(0, 184)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p476, 110);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $p477 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $p478 := $load.ref($M.1, $p477);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $i479 := $load.i8($M.1, $p478);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $i480 := $zext.i8.i32($i479);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $i481 := $eq.i32($i480, 22);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $i482 := (if $i481 == 1 then 1 else 2);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $i483 := $trunc.i32.i8($i482);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $p485 := $add.ref($add.ref($add.ref($p472, $mul.ref(0, 184)), $mul.ref(24, 1)), $mul.ref(2, 1));
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p485, $i483);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $i486 := $trunc.i32.i8($i90);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $p488 := $add.ref($add.ref($add.ref($p472, $mul.ref(0, 184)), $mul.ref(24, 1)), $mul.ref(3, 1));
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p488, $i486);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $p489 := $add.ref($add.ref($p472, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p489, 3);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $p73 := $p472;
    goto $bb20;

  $bb122:
    assume $i474 == 1;
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $M.23 := $store.i32($M.23, $p2, 1);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $p73 := $0.ref;
    goto $bb20;

  $bb119:
    assume $i468 == 1;
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $p469 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p469, 262144);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $p470 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(376, 1));
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $p471 := $load.ref($M.1, $p470);
    call {:si_unique_call 1776} devirtbounce.9($p471, $p1);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $p73 := $0.ref;
    goto $bb20;

  SeqInstr_361:
    assume !assertsPassed;
    return;

  $bb74:
    assume $i155 == 1;
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb70:
    assume $i150 == 1;
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} $p284 := mega_allocate_scb($p0, $p1);
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $i285 := $p2i.ref.i64($p284);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $i286 := $eq.i64($i285, 0);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    assume {:branchcond $i286} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i286 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p284, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $p288 := $bitcast.ref.ref($p287);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $p289 := $bitcast.ref.ref($p288);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_60 := $M.1;
    call {:si_unique_call 1773} cmdloc_dummy_var_61 := $memset.i8(cmdloc_dummy_var_60, $p289, 0, 66, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_61;
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $i290 := $trunc.i32.i8($i90);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($add.ref($p288, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p292, $i290);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1320, 1));
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $i294 := $load.i32($M.1, $p293);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $i295 := $ne.i32($i294, 0);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    assume {:branchcond $i295} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i295 == 1);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $p307 := $load.ref($M.1, $p306);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $i308 := $load.i8($M.1, $p307);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $i309 := $zext.i8.i32($i308);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $i310 := $and.i32($i309, 2);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $i311 := $ne.i32($i310, 0);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $i312 := (if $i311 == 1 then 2 else 1);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $i313 := $trunc.i32.i8($i312);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($add.ref($p288, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p315, $i313);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(300, 1));
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $i317 := $load.i16($M.1, $p316);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $i318 := $zext.i16.i32($i317);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $i319 := $eq.i32($i318, 6);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    assume {:branchcond $i319} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i319 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(300, 1));
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $i355 := $load.i16($M.1, $p354);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $i356 := $zext.i16.i32($i355);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $i357 := $eq.i32($i356, 10);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    assume {:branchcond $i357} true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i357 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(300, 1));
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $i404 := $load.i16($M.1, $p403);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $i405 := $zext.i16.i32($i404);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $i406 := $eq.i32($i405, 12);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    assume {:branchcond $i406} true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i406 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $p453 := $load.ref($M.1, $p452);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $i454 := $load.i8($M.1, $p453);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $i455 := $zext.i8.i32($i454);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $i456 := $and.i32($i455, 15);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $i457 := $eq.i32($i456, 8);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i457} true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i457 == 1);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $p459 := $add.ref($add.ref($p284, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p459, 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $p461 := $add.ref($add.ref($add.ref($p288, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1774} $i462 := mega_build_sglist($p0, $p284, $p461, $p3);
    call {:si_unique_call 1775} {:cexpr "tmp___2"} boogie_si_record_i32($i462);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $i463 := $trunc.i32.i8($i462);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $p465 := $add.ref($add.ref($add.ref($p288, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(13, 1));
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p465, $i463);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $p73 := $p284;
    goto $bb20;

  $bb116:
    assume $i457 == 1;
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $p458 := $add.ref($add.ref($p284, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p458, 2);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb113:
    assume $i406 == 1;
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $p407 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $p408 := $load.ref($M.1, $p407);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($p408, $mul.ref(2, 1));
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $i410 := $load.i8($M.1, $p409);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $i411 := $zext.i8.i32($i410);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $i412 := $shl.i32($i411, 24);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $p414 := $load.ref($M.1, $p413);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $p415 := $add.ref($p414, $mul.ref(3, 1));
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $i416 := $load.i8($M.1, $p415);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $i417 := $zext.i8.i32($i416);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $i418 := $shl.i32($i417, 16);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $i419 := $or.i32($i412, $i418);
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $p420 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $p421 := $load.ref($M.1, $p420);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $p422 := $add.ref($p421, $mul.ref(4, 1));
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $i423 := $load.i8($M.1, $p422);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $i424 := $zext.i8.i32($i423);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $i425 := $shl.i32($i424, 8);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $i426 := $or.i32($i419, $i425);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $p427 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $p428 := $load.ref($M.1, $p427);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $p429 := $add.ref($p428, $mul.ref(5, 1));
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $i430 := $load.i8($M.1, $p429);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $i431 := $zext.i8.i32($i430);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $i432 := $or.i32($i426, $i431);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $p434 := $add.ref($add.ref($add.ref($p288, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p434, $i432);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $p436 := $load.ref($M.1, $p435);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $p437 := $add.ref($p436, $mul.ref(8, 1));
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $i438 := $load.i8($M.1, $p437);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $i439 := $zext.i8.i16($i438);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $i440 := $zext.i16.i32($i439);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $i441 := $shl.i32($i440, 8);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $p442 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $p443 := $load.ref($M.1, $p442);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $p444 := $add.ref($p443, $mul.ref(9, 1));
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $i445 := $load.i8($M.1, $p444);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $i446 := $zext.i8.i16($i445);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $i447 := $zext.i16.i32($i446);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $i448 := $or.i32($i441, $i447);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $i449 := $trunc.i32.i16($i448);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $p451 := $add.ref($add.ref($add.ref($p288, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p451, $i449);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb110:
    assume $i357 == 1;
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $p358 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $p359 := $load.ref($M.1, $p358);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($p359, $mul.ref(8, 1));
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $i361 := $load.i8($M.1, $p360);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $i362 := $zext.i8.i16($i361);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $i363 := $zext.i16.i32($i362);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $p365 := $load.ref($M.1, $p364);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($p365, $mul.ref(7, 1));
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $i367 := $load.i8($M.1, $p366);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $i368 := $zext.i8.i16($i367);
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $i369 := $zext.i16.i32($i368);
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $i370 := $shl.i32($i369, 8);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $i371 := $or.i32($i363, $i370);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $i372 := $trunc.i32.i16($i371);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($add.ref($p288, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p374, $i372);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $p376 := $load.ref($M.1, $p375);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($p376, $mul.ref(2, 1));
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $i378 := $load.i8($M.1, $p377);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $i379 := $zext.i8.i32($i378);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $i380 := $shl.i32($i379, 24);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $p382 := $load.ref($M.1, $p381);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($p382, $mul.ref(3, 1));
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $i384 := $load.i8($M.1, $p383);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $i385 := $zext.i8.i32($i384);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $i386 := $shl.i32($i385, 16);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $i387 := $or.i32($i380, $i386);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $p389 := $load.ref($M.1, $p388);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($p389, $mul.ref(4, 1));
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $i391 := $load.i8($M.1, $p390);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $i392 := $zext.i8.i32($i391);
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $i393 := $shl.i32($i392, 8);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $i394 := $or.i32($i387, $i393);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $p396 := $load.ref($M.1, $p395);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($p396, $mul.ref(5, 1));
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $i398 := $load.i8($M.1, $p397);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $i399 := $zext.i8.i32($i398);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $i400 := $or.i32($i394, $i399);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $p402 := $add.ref($add.ref($add.ref($p288, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p402, $i400);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb107:
    assume $i319 == 1;
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $p321 := $load.ref($M.1, $p320);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($p321, $mul.ref(4, 1));
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $i323 := $load.i8($M.1, $p322);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $i324 := $zext.i8.i16($i323);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($add.ref($p288, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p326, $i324);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $p328 := $load.ref($M.1, $p327);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($p328, $mul.ref(1, 1));
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $i330 := $load.i8($M.1, $p329);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $i331 := $zext.i8.i32($i330);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $i332 := $shl.i32($i331, 16);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $p334 := $load.ref($M.1, $p333);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($p334, $mul.ref(2, 1));
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $i336 := $load.i8($M.1, $p335);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $i337 := $zext.i8.i32($i336);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $i338 := $shl.i32($i337, 8);
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $i339 := $or.i32($i332, $i338);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $p341 := $load.ref($M.1, $p340);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($p341, $mul.ref(3, 1));
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $i343 := $load.i8($M.1, $p342);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $i344 := $zext.i8.i32($i343);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $i345 := $or.i32($i339, $i344);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($add.ref($p288, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p347, $i345);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($add.ref($p288, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $i350 := $load.i32($M.1, $p349);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $i351 := $and.i32($i350, 2097151);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($add.ref($p288, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p353, $i351);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb104:
    assume $i295 == 1;
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $p297 := $load.ref($M.1, $p296);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $i298 := $load.i8($M.1, $p297);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $i299 := $zext.i8.i32($i298);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $i300 := $and.i32($i299, 2);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $i301 := $ne.i32($i300, 0);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $i302 := (if $i301 == 1 then 168 else 167);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $i303 := $trunc.i32.i8($i302);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($add.ref($p288, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p305, $i303);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb101:
    assume $i286 == 1;
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $M.23 := $store.i32($M.23, $p2, 1);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $p73 := $0.ref;
    goto $bb20;

  $bb66:
    assume $i145 == 1;
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb62:
    assume $i140 == 1;
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb58:
    assume $i135 == 1;
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb54:
    assume $i130 == 1;
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb50:
    assume $i125 == 1;
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb46:
    assume $i120 == 1;
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $i201 := $load.i32($M.1, $p200);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $i202 := $zext.i32.i64($i201);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $p204 := $load.ref($M.1, $p203);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p204, $mul.ref(0, 3480)), $mul.ref(204, 1));
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $i206 := $load.i32($M.1, $p205);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $i207 := $zext.i32.i64($i206);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $i208 := $ashr.i64($i202, $i207);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $i209 := $and.i64($i208, 1);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $i210 := $eq.i64($i209, 0);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    assume {:branchcond $i210} true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1767} $p232 := mega_allocate_scb($p0, $p1);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $i233 := $p2i.ref.i64($p232);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $i234 := $eq.i64($i233, 0);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    assume {:branchcond $i234} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p232, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $p236 := $load.ref($M.1, $p235);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p232, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $p238 := $bitcast.ref.ref($p237);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $p239 := $bitcast.ref.ref($p238);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_53 := $M.1;
    call {:si_unique_call 1768} cmdloc_dummy_var_54 := $memset.i8(cmdloc_dummy_var_53, $p239, 0, 66, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_54;
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $p240 := $bitcast.ref.ref($p236);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_55 := $M.1;
    call {:si_unique_call 1769} cmdloc_dummy_var_56 := $memset.i8(cmdloc_dummy_var_55, $p240, 0, 60, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_56;
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $p241 := $bitcast.ref.ref($p236);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $i242 := $load.i8($M.1, $p241);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $i243 := $and.i8($i242, $sub.i8(0, 8));
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p241, $i243);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $p244 := $bitcast.ref.ref($p236);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $i245 := $load.i8($M.1, $p244);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $i246 := $and.i8($i245, $sub.i8(0, 9));
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $i247 := $or.i8($i246, 8);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p244, $i247);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p236, $mul.ref(0, 60)), $mul.ref(17, 1));
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p248, 14);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $p249 := $bitcast.ref.ref($p236);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $i250 := $load.i8($M.1, $p249);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $i251 := $and.i8($i250, 127);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $i252 := $or.i8($i251, $sub.i8(0, 128));
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p249, $i252);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $i253 := $trunc.i32.i8($i90);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p236, $mul.ref(0, 60)), $mul.ref(1, 1));
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p254, $i253);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(300, 1));
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $i256 := $load.i16($M.1, $p255);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $i257 := $trunc.i16.i8($i256);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p236, $mul.ref(0, 60)), $mul.ref(16, 1));
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p258, $i257);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p236, $mul.ref(0, 60)), $mul.ref(6, 1));
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $p260 := $bitcast.ref.ref($p259);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $p262 := $load.ref($M.1, $p261);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(300, 1));
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $i264 := $load.i16($M.1, $p263);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $i265 := $zext.i16.i64($i264);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_57 := $M.1;
    cmdloc_dummy_var_58 := $M.1;
    call {:si_unique_call 1770} cmdloc_dummy_var_59 := $memcpy.i8(cmdloc_dummy_var_57, cmdloc_dummy_var_58, $p260, $p262, $i265, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_59;
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1320, 1));
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $i267 := $load.i32($M.1, $p266);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $i268 := $ne.i32($i267, 0);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    assume {:branchcond $i268} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i268 == 1);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($add.ref($p238, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p272, 3);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p232, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p273, 2);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p236, $mul.ref(0, 60)), $mul.ref(52, 1));
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p236, $mul.ref(0, 60)), $mul.ref(56, 1));
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1771} $i276 := mega_build_sglist($p0, $p232, $p274, $p275);
    call {:si_unique_call 1772} {:cexpr "tmp___1"} boogie_si_record_i32($i276);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $i277 := $trunc.i32.i8($i276);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p236, $mul.ref(0, 60)), $mul.ref(50, 1));
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p278, $i277);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p232, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $i280 := $load.i64($M.1, $p279);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $i281 := $trunc.i64.i32($i280);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($add.ref($p238, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p283, $i281);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $p73 := $p232;
    goto $bb20;

  $bb98:
    assume $i268 == 1;
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($add.ref($p238, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p270, $sub.i8(0, 61));
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb95:
    assume $i234 == 1;
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $M.23 := $store.i32($M.23, $p2, 1);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $p73 := $0.ref;
    goto $bb20;

  $bb92:
    assume $i210 == 1;
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(120, 1));
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.1, $p211);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p212, $mul.ref(0, 3816)), $mul.ref(768, 1));
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $i214 := $load.i32($M.1, $p213);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $p216 := $load.ref($M.1, $p215);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p216, $mul.ref(0, 3480)), $mul.ref(204, 1));
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $i218 := $load.i32($M.1, $p217);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1765} vslice_dummy_var_174 := printk.ref.i32.i32(.str.159, $i214, $i218);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} vslice_dummy_var_175 := printk.ref(.str.160);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $i222 := $load.i32($M.1, $p221);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $p224 := $load.ref($M.1, $p223);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p224, $mul.ref(0, 3480)), $mul.ref(204, 1));
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $i226 := $load.i32($M.1, $p225);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $i227 := $zext.i32.i64($i226);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $i228 := $shl.i64(1, $i227);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $i229 := $trunc.i64.i32($i228);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $i230 := $or.i32($i222, $i229);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p231, $i230);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb42:
    assume $i115 == 1;
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb38:
    assume $i110 == 1;
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} $p178 := scsi_sglist($p1);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1755} $p179 := sg_page($p178);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} $p180 := kmap_atomic($p179);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p178, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $i182 := $load.i32($M.1, $p181);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $i183 := $zext.i32.i64($i182);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($p180, $mul.ref($i183, 1));
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $p186 := $load.ref($M.1, $p185);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($p186, $mul.ref(4, 1));
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $i188 := $load.i8($M.1, $p187);
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $i189 := $zext.i8.i64($i188);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_51 := $M.11;
    call {:si_unique_call 1757} cmdloc_dummy_var_52 := $memset.i8(cmdloc_dummy_var_51, $p184, 0, $i189, $zext.i32.i64(1), 0 == 1);
    $M.11 := cmdloc_dummy_var_52;
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $i190 := $trunc.i8.i1(0);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    assume {:branchcond $i190} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p178, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $i192 := $load.i32($M.1, $p191);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $i193 := $zext.i32.i64($i192);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $i194 := $sub.i64(0, $i193);
    $i195 := $add.i64($i183, $i194);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($p180, $mul.ref($i195, 1));
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1763} __kunmap_atomic($p196);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p197, 0);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(376, 1));
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $p199 := $load.ref($M.1, $p198);
    call {:si_unique_call 1764} devirtbounce.9($p199, $p1);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $p73 := $0.ref;
    goto $bb20;

  SeqInstr_358:
    assume !assertsPassed;
    return;

  $bb89:
    assume $i190 == 1;
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} __compiletime_assert_669();
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb34:
    assume $i105 == 1;
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1904, 1));
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $i162 := $load.i32($M.1, $p161);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $i163 := $eq.i32($i162, 0);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    assume {:branchcond $i163} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1761} $p167 := mega_allocate_scb($p0, $p1);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $i168 := $p2i.ref.i64($p167);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $i169 := $eq.i64($i168, 0);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($p167, $mul.ref(0, 184)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p171, 110);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($p167, $mul.ref(0, 184)), $mul.ref(24, 1)), $mul.ref(2, 1));
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p173, 4);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $i174 := $trunc.i32.i8($i90);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($p167, $mul.ref(0, 184)), $mul.ref(24, 1)), $mul.ref(3, 1));
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p176, $i174);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p167, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p177, 3);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $p73 := $p167;
    goto $bb20;

  $bb86:
    assume $i169 == 1;
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $M.23 := $store.i32($M.23, $p2, 1);
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $p73 := $0.ref;
    goto $bb20;

  $bb83:
    assume $i163 == 1;
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p164, 0);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(376, 1));
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $p166 := $load.ref($M.1, $p165);
    call {:si_unique_call 1760} devirtbounce.9($p166, $p1);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $p73 := $0.ref;
    goto $bb20;

  SeqInstr_355:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i95 == 1;
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p96, 262144);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(376, 1));
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.1, $p97);
    call {:si_unique_call 1752} devirtbounce.9($p98, $p1);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $p73 := $0.ref;
    goto $bb20;

  SeqInstr_349:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i64 == 1;
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.1, $p65);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 3480)), $mul.ref(208, 1));
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $i68 := $load.i64($M.1, $p67);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} $i74 := mega_get_ldrv_num($p0, $p1, $i44);
    call {:si_unique_call 1748} {:cexpr "ldrv_num"} boogie_si_record_i32($i74);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.1, $p75);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $i77 := $zext.i32.i64($i76);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $i78 := $and.i64($i77, 134217728);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $i80 := (if $i79 == 1 then 40 else 8);
    call {:si_unique_call 1749} {:cexpr "max_ldrv_num"} boogie_si_record_i32($i80);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1352, 1));
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.1, $p81);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    $i85 := $i80;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $i86 := $sgt.i32($i74, $i85);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i90 := $i74;
    goto $bb28;

  $bb25:
    assume $i86 == 1;
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p87, 262144);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(376, 1));
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.1, $p88);
    call {:si_unique_call 1751} devirtbounce.9($p89, $p1);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $p73 := $0.ref;
    goto $bb20;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i83 == 1;
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $i84 := $add.i32($i80, 128);
    call {:si_unique_call 1750} {:cexpr "max_ldrv_num"} boogie_si_record_i32($i84);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $i85 := $i84;
    goto $bb24;

  $bb18:
    assume $i69 == 1;
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p70, 262144);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(376, 1));
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.1, $p71);
    call {:si_unique_call 1746} devirtbounce.9($p72, $p1);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $p73 := $0.ref;
    goto $bb20;

  SeqInstr_343:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i47 == 1;
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.1, $p48);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 3480)), $mul.ref(204, 1));
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.1, $p50);
    call {:si_unique_call 1743} {:cexpr "channel"} boogie_si_record_i32($i51);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $i52, $i53 := $i51, 0;
    goto $bb15;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $i15 := $sext.i8.i32($i11);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.1, $p28);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 3480)), $mul.ref(204, 1));
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.1, $p30);
    call {:si_unique_call 1740} {:cexpr "channel"} boogie_si_record_i32($i31);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.1, $p32);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 3480)), $mul.ref(200, 1));
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.1, $p34);
    call {:si_unique_call 1741} {:cexpr "target"} boogie_si_record_i32($i35);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i36 == 1);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1344, 1));
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.1, $p40);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i35, $i41);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $i35;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i39 := $i43;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i26, $i27 := $i31, $i39;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $i44, $i45 := $i26, $i27;
    goto $bb12;

  $bb9:
    assume $i42 == 1;
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $i43 := 0;
    goto $bb11;

  $bb6:
    assume $i36 == 1;
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1344, 1));
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.1, $p37);
    call {:si_unique_call 1742} {:cexpr "target"} boogie_si_record_i32($i38);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $i39 := $i38;
    goto $bb8;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 3480)), $mul.ref(204, 1));
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.1, $p19);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(144, 1)), $mul.ref(121, 1));
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.1, $p22);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32($i20, $i24);
    call {:si_unique_call 1739} {:cexpr "channel"} boogie_si_record_i32($i25);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $i26, $i27 := $i25, 0;
    goto $bb5;
}



const mega_get_ldrv_num: ref;

axiom mega_get_ldrv_num == $sub.ref(0, 445500);

procedure mega_get_ldrv_num($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation mega_get_ldrv_num($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $i20: i32;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i1;
  var $i54: i32;
  var $i53: i32;
  var $i55: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} {:cexpr "mega_get_ldrv_num:arg:channel"} boogie_si_record_i32($i2);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 3480)), $mul.ref(200, 1));
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    call {:si_unique_call 1782} {:cexpr "tgt"} boogie_si_record_i32($i6);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(0, 1));
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.1, $p7);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i6, $i8);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i11 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $i12 := $mul.i32($i2, 15);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, $i11);
    call {:si_unique_call 1784} {:cexpr "ldrv_num"} boogie_si_record_i32($i13);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1328, 1));
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.1, $p14);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i26 := $i13;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1348, 1));
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.1, $p27);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i55 := $i26;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $r := $i55;
    return;

  $bb13:
    assume $i29 == 1;
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1352, 1));
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.1, $p30);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb15;

  $bb16:
    assume $i32 == 1;
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.1, $p33);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.1, $p34);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 8);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.1, $p38);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.1, $p39);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 10);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.1, $p43);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.1, $p44);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 40);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.1, $p48);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.1, $p49);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 42);
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i53 := $i26;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $i55 := $i53;
    goto $bb35;

  $bb30:
    assume $i52 == 1;
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i26, 128);
    call {:si_unique_call 1787} {:cexpr "ldrv_num"} boogie_si_record_i32($i54);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $i53 := $i54;
    goto $bb34;

  $bb26:
    assume $i47 == 1;
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb22:
    assume $i42 == 1;
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb18:
    assume $i37 == 1;
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i13, 0);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1332, 1));
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.1, $p21);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $i23 := $sle.i32($i13, $i22);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i25 := $i13;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i20 := $i25;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $i26 := $i20;
    goto $bb12;

  $bb9:
    assume $i23 == 1;
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i13, 1);
    call {:si_unique_call 1786} {:cexpr "ldrv_num"} boogie_si_record_i32($i24);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb11;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1332, 1));
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.1, $p18);
    call {:si_unique_call 1785} {:cexpr "ldrv_num"} boogie_si_record_i32($i19);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb8;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32($i6, 1);
    call {:si_unique_call 1783} {:cexpr "tgt"} boogie_si_record_i32($i10);
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const mega_allocate_scb: ref;

axiom mega_allocate_scb == $sub.ref(0, 446532);

procedure mega_allocate_scb($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation mega_allocate_scb($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(72, 1));
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} $i3 := list_empty($p2);
    call {:si_unique_call 1789} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $r := $p14;
    return;

  $bb1:
    assume $i4 == 1;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($sub.ref(0, 8), 184));
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} list_del_init($p10);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 8), 184)), $mul.ref(4, 1));
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p11, 1);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 8), 184)), $mul.ref(104, 1));
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p12, $p1);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 8), 184)), $mul.ref(92, 1));
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p13, 65535);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $p14 := $p8;
    goto $bb3;
}



const scsi_sglist: ref;

axiom scsi_sglist == $sub.ref(0, 447564);

procedure scsi_sglist($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation scsi_sglist($p0: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 472)), $mul.ref(320, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const sg_page: ref;

axiom sg_page == $sub.ref(0, 448596);

procedure sg_page($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation sg_page($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.1, $p1);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 2271560481);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 1792} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.1, $p8);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i9);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $i12 := $and.i64($i11, 1);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 1795} {:cexpr "tmp___0"} boogie_si_record_i64($i13);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.1, $p15);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, $sub.i64(0, 4));
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $r := $p18;
    return;

  $bb4:
    assume $i14 == 1;
    call {:si_unique_call 1796} devirtbounce.6(0, .str.122, 99, 12);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb1:
    assume $i7 == 1;
    call {:si_unique_call 1793} devirtbounce.6(0, .str.122, 98, 12);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    assume false;
    return;
}



const kmap_atomic: ref;

axiom kmap_atomic == $sub.ref(0, 449628);

procedure kmap_atomic($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kmap_atomic($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1797} pagefault_disable();
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} $p1 := lowmem_page_address($p0);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const __compiletime_assert_669: ref;

axiom __compiletime_assert_669 == $sub.ref(0, 450660);

procedure __compiletime_assert_669();
  free requires assertsPassed;



implementation __compiletime_assert_669()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    return;
}



const __kunmap_atomic: ref;

axiom __kunmap_atomic == $sub.ref(0, 451692);

procedure __kunmap_atomic($p0: ref);
  free requires assertsPassed;



implementation __kunmap_atomic($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} pagefault_enable();
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    return;
}



const mega_build_sglist: ref;

axiom mega_build_sglist == $sub.ref(0, 452724);

procedure mega_build_sglist($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation mega_build_sglist($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i13: i1;
  var $i12: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $p33: ref;
  var $i34: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i64;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $p56: ref;
  var $i57: i64;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $p74: ref;
  var $i75: i1;
  var $i35: i32;
  var $p36: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i32;
  var $i32: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} $i6 := scsi_dma_map($p5);
    call {:si_unique_call 1801} {:cexpr "sgcnt"} boogie_si_record_i32($i6);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(92, 1));
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p7, 2);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1448, 1));
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.1, $p8);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i6, $i10);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $i12 := 1;
    assume {:branchcond $i11} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i11 == 1);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i6, 0);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    $i12 := $i13;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i12);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 1803} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p3, 0);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} $i18 := scsi_sg_count($p5);
    call {:si_unique_call 1806} {:cexpr "tmp___0"} boogie_si_record_i32($i18);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1808} $p33 := scsi_sglist($p5);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32(0, $i6);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $i77 := $load.i64($M.1, $p76);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i64.i32($i77);
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p2, $i78);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $i32 := $i6;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $i35, $p36 := 0, $p33;
    goto $bb17;

  $bb17:
    call $p37, $i38, $i39, $p40, $i41, $p42, $p43, $i44, $p46, $p47, $i48, $p49, $p50, $i51, $p53, $i54, $i55, $p56, $i57, $i58, $p59, $p60, $i61, $p63, $p64, $i65, $p66, $p67, $i68, $p70, $i71, $i72, $i73, $p74, $i75, $i35, $p36 := mega_build_sglist_loop_$bb17($p0, $p1, $p3, $i6, $p37, $i38, $i39, $p40, $i41, $p42, $p43, $i44, $p46, $p47, $i48, $p49, $p50, $i51, $p53, $i54, $i55, $p56, $i57, $i58, $p59, $p60, $i61, $p63, $p64, $i65, $p66, $p67, $i68, $p70, $i71, $i72, $i73, $p74, $i75, $i35, $p36);
    goto $bb17_last;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1320, 1));
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.1, $p37);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i39 == 1);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p36, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.1, $p56);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i64.i32($i57);
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.1, $p59);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $i61 := $sext.i32.i64($i35);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p60, $mul.ref($i61, 8)), $mul.ref(0, 1));
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p63, $i58);
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p36, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.1, $p64);
    call {:si_unique_call 1810} {:cexpr "tmp___2"} boogie_si_record_i32($i65);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.1, $p66);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i35);
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p67, $mul.ref($i68, 8)), $mul.ref(4, 1));
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p70, $i65);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.1, $p3);
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $i72 := $add.i32($i71, $i65);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p3, $i72);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i73 := $add.i32($i35, 1);
    call {:si_unique_call 1811} {:cexpr "idx"} boogie_si_record_i32($i73);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1812} $p74 := sg_next($p36);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $i75 := $slt.i32($i73, $i6);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i75 == 1);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb22:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    $i35, $p36 := $i73, $p74;
    goto $bb22_dummy;

  $bb19:
    assume $i39 == 1;
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p36, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.1, $p40);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.1, $p42);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i35);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p43, $mul.ref($i44, 16)), $mul.ref(0, 1));
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p46, $i41);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p36, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.1, $p47);
    call {:si_unique_call 1809} {:cexpr "tmp___1"} boogie_si_record_i32($i48);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.1, $p49);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i35);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p50, $mul.ref($i51, 16)), $mul.ref(8, 1));
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p53, $i48);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.1, $p3);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i54, $i48);
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p3, $i55);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1320, 1));
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.1, $p20);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb9;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} $p23 := scsi_sglist($p5);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.1, $p24);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p26, $i25);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.1, $p27);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i64.i32($i28);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p2, $i29);
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p23, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.1, $p30);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p3, $i31);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb12;

  $bb4:
    assume $i17 == 1;
    call {:si_unique_call 1804} devirtbounce.6(0, .str.128, 1740, 12);
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb22_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6472;
}



const mega_prepare_extpassthru: ref;

axiom mega_prepare_extpassthru == $sub.ref(0, 453756);

procedure mega_prepare_extpassthru($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation mega_prepare_extpassthru($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i8;
  var $i11: i8;
  var $p12: ref;
  var $i13: i8;
  var $i14: i8;
  var $i15: i8;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i8;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i8;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $i35: i32;
  var $i36: i8;
  var $i37: i32;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $i41: i8;
  var $i42: i32;
  var $i44: i8;
  var $i45: i32;
  var $i43: i32;
  var $i46: i8;
  var $p47: ref;
  var $p48: ref;
  var $i49: i16;
  var $i50: i8;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i8;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i16;
  var $i64: i64;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $i73: i8;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $i77: i32;
  var $i78: i64;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i64;
  var $i84: i64;
  var $i85: i64;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i32;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $p97: ref;
  var $i98: i32;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i32;
  var $i103: i64;
  var $i104: i64;
  var $i105: i32;
  var $i106: i32;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $i111: i8;
  var $p112: ref;
  var cmdloc_dummy_var_64: [ref]i8;
  var cmdloc_dummy_var_65: [ref]i8;
  var cmdloc_dummy_var_66: [ref]i8;
  var cmdloc_dummy_var_67: [ref]i8;
  var cmdloc_dummy_var_68: [ref]i8;
  var vslice_dummy_var_178: i32;
  var vslice_dummy_var_179: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} {:cexpr "mega_prepare_extpassthru:arg:channel"} boogie_si_record_i32($i3);
    call {:si_unique_call 1814} {:cexpr "mega_prepare_extpassthru:arg:target"} boogie_si_record_i32($i4);
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_64 := $M.1;
    call {:si_unique_call 1815} cmdloc_dummy_var_65 := $memset.i8(cmdloc_dummy_var_64, $p7, 0, 68, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_65;
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p6);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.1, $p8);
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $i10 := $and.i8($i9, $sub.i8(0, 8));
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $i11 := $or.i8($i10, 2);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p8, $i11);
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p6);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.1, $p12);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $i14 := $and.i8($i13, $sub.i8(0, 9));
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $i15 := $or.i8($i14, 8);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p12, $i15);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 68)), $mul.ref(26, 1));
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p16, 14);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p6);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.1, $p17);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $i19 := $and.i8($i18, 127);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p17, $i19);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.1, $p20);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i21);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 134217728);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 68)), $mul.ref(2, 1));
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p29, $i28);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.1, $p30);
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64($i31);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $i33 := $and.i64($i32, 134217728);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i34 == 1);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i8($i4);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $i43 := $i45;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i43);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p6, $mul.ref(0, 68)), $mul.ref(3, 1));
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p47, $i46);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 472)), $mul.ref(300, 1));
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $i49 := $load.i16($M.1, $p48);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i16.i8($i49);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p6, $mul.ref(0, 68)), $mul.ref(6, 1));
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p51, $i50);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.1, $p52);
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 3480)), $mul.ref(208, 1));
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $i55 := $load.i64($M.1, $p54);
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i64.i8($i55);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p6, $mul.ref(0, 68)), $mul.ref(1, 1));
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p57, $i56);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p6, $mul.ref(0, 68)), $mul.ref(8, 1));
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.1, $p60);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 472)), $mul.ref(300, 1));
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $i63 := $load.i16($M.1, $p62);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $i64 := $zext.i16.i64($i63);
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_66 := $M.1;
    cmdloc_dummy_var_67 := $M.1;
    call {:si_unique_call 1816} cmdloc_dummy_var_68 := $memcpy.i8(cmdloc_dummy_var_66, cmdloc_dummy_var_67, $p59, $p61, $i64, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_68;
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p65, 0);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.1, $p66);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.1, $p67);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 18);
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p2, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.1, $p71);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.1, $p72);
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 37);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p6, $mul.ref(0, 68)), $mul.ref(60, 1));
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p6, $mul.ref(0, 68)), $mul.ref(64, 1));
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} $i110 := mega_build_sglist($p0, $p1, $p108, $p109);
    call {:si_unique_call 1818} {:cexpr "tmp"} boogie_si_record_i32($i110);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i32.i8($i110);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p6, $mul.ref(0, 68)), $mul.ref(24, 1));
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p112, $i111);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb11:
    assume $i75 == 1;
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.1, $p76);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $i78 := $zext.i32.i64($i77);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p2, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.1, $p79);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 3480)), $mul.ref(204, 1));
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.1, $p81);
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $i83 := $zext.i32.i64($i82);
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $i84 := $ashr.i64($i78, $i83);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $i85 := $and.i64($i84, 1);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $i86 := $eq.i64($i85, 0);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb16:
    assume $i86 == 1;
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(120, 1));
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.1, $p87);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p88, $mul.ref(0, 3816)), $mul.ref(768, 1));
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.1, $p89);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p2, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.1, $p91);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 3480)), $mul.ref(204, 1));
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.1, $p93);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} vslice_dummy_var_178 := printk.ref.i32.i32.i32(.str.161, $i90, $i94, $i3);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1820} vslice_dummy_var_179 := printk.ref(.str.162);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.1, $p97);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p2, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.1, $p99);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p100, $mul.ref(0, 3480)), $mul.ref(204, 1));
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.1, $p101);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $i103 := $zext.i32.i64($i102);
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $i104 := $shl.i64(1, $i103);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i64.i32($i104);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $i106 := $or.i32($i98, $i105);
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p107, $i106);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb7:
    assume $i70 == 1;
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i34 == 1;
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $i35 := $shl.i32($i3, 4);
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i8($i35);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $i37 := $sext.i8.i32($i36);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i8($i4);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $i39 := $sext.i8.i32($i38);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $i40 := $or.i32($i37, $i39);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i40);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $i43 := $i42;
    goto $bb6;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i3);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb3;
}



const mega_prepare_passthru: ref;

axiom mega_prepare_passthru == $sub.ref(0, 454788);

procedure mega_prepare_passthru($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation mega_prepare_passthru($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i8;
  var $i11: i8;
  var $p12: ref;
  var $i13: i8;
  var $i14: i8;
  var $i15: i8;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i8;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i8;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $i35: i32;
  var $i36: i8;
  var $i37: i32;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $i41: i8;
  var $i42: i32;
  var $i44: i8;
  var $i45: i32;
  var $i43: i32;
  var $i46: i8;
  var $p47: ref;
  var $p48: ref;
  var $i49: i16;
  var $i50: i8;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i8;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i16;
  var $i64: i64;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $i73: i8;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $i77: i32;
  var $i78: i64;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i64;
  var $i84: i64;
  var $i85: i64;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i32;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $p97: ref;
  var $i98: i32;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i32;
  var $i103: i64;
  var $i104: i64;
  var $i105: i32;
  var $i106: i32;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $i111: i8;
  var $p112: ref;
  var cmdloc_dummy_var_69: [ref]i8;
  var cmdloc_dummy_var_70: [ref]i8;
  var cmdloc_dummy_var_71: [ref]i8;
  var cmdloc_dummy_var_72: [ref]i8;
  var cmdloc_dummy_var_73: [ref]i8;
  var vslice_dummy_var_180: i32;
  var vslice_dummy_var_181: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} {:cexpr "mega_prepare_passthru:arg:channel"} boogie_si_record_i32($i3);
    call {:si_unique_call 1822} {:cexpr "mega_prepare_passthru:arg:target"} boogie_si_record_i32($i4);
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_69 := $M.1;
    call {:si_unique_call 1823} cmdloc_dummy_var_70 := $memset.i8(cmdloc_dummy_var_69, $p7, 0, 60, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_70;
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p6);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.1, $p8);
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $i10 := $and.i8($i9, $sub.i8(0, 8));
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $i11 := $or.i8($i10, 2);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p8, $i11);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p6);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.1, $p12);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $i14 := $and.i8($i13, $sub.i8(0, 9));
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $i15 := $or.i8($i14, 8);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p12, $i15);
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 60)), $mul.ref(17, 1));
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p16, 14);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p6);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.1, $p17);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $i19 := $and.i8($i18, 127);
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p17, $i19);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.1, $p20);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i21);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 134217728);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 60)), $mul.ref(2, 1));
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p29, $i28);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.1, $p30);
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64($i31);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $i33 := $and.i64($i32, 134217728);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i34 == 1);
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i8($i4);
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $i43 := $i45;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i43);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p6, $mul.ref(0, 60)), $mul.ref(3, 1));
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p47, $i46);
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 472)), $mul.ref(300, 1));
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $i49 := $load.i16($M.1, $p48);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i16.i8($i49);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p6, $mul.ref(0, 60)), $mul.ref(16, 1));
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p51, $i50);
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.1, $p52);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 3480)), $mul.ref(208, 1));
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $i55 := $load.i64($M.1, $p54);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i64.i8($i55);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p6, $mul.ref(0, 60)), $mul.ref(1, 1));
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p57, $i56);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p6, $mul.ref(0, 60)), $mul.ref(6, 1));
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.1, $p60);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 472)), $mul.ref(300, 1));
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $i63 := $load.i16($M.1, $p62);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $i64 := $zext.i16.i64($i63);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_71 := $M.1;
    cmdloc_dummy_var_72 := $M.1;
    call {:si_unique_call 1824} cmdloc_dummy_var_73 := $memcpy.i8(cmdloc_dummy_var_71, cmdloc_dummy_var_72, $p59, $p61, $i64, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_73;
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p65, 0);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.1, $p66);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.1, $p67);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 18);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p2, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.1, $p71);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.1, $p72);
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 37);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p6, $mul.ref(0, 60)), $mul.ref(52, 1));
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p6, $mul.ref(0, 60)), $mul.ref(56, 1));
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} $i110 := mega_build_sglist($p0, $p1, $p108, $p109);
    call {:si_unique_call 1826} {:cexpr "tmp"} boogie_si_record_i32($i110);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i32.i8($i110);
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p6, $mul.ref(0, 60)), $mul.ref(50, 1));
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p112, $i111);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb11:
    assume $i75 == 1;
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.1, $p76);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $i78 := $zext.i32.i64($i77);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p2, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.1, $p79);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 3480)), $mul.ref(204, 1));
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.1, $p81);
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $i83 := $zext.i32.i64($i82);
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $i84 := $ashr.i64($i78, $i83);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $i85 := $and.i64($i84, 1);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $i86 := $eq.i64($i85, 0);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb16:
    assume $i86 == 1;
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(120, 1));
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.1, $p87);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p88, $mul.ref(0, 3816)), $mul.ref(768, 1));
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.1, $p89);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p2, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.1, $p91);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 3480)), $mul.ref(204, 1));
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.1, $p93);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} vslice_dummy_var_180 := printk.ref.i32.i32.i32(.str.161, $i90, $i94, $i3);
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1828} vslice_dummy_var_181 := printk.ref(.str.162);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.1, $p97);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p2, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.1, $p99);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p100, $mul.ref(0, 3480)), $mul.ref(204, 1));
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.1, $p101);
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $i103 := $zext.i32.i64($i102);
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $i104 := $shl.i64(1, $i103);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i64.i32($i104);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $i106 := $or.i32($i98, $i105);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p107, $i106);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb7:
    assume $i70 == 1;
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i34 == 1;
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $i35 := $shl.i32($i3, 4);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i8($i35);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $i37 := $sext.i8.i32($i36);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i8($i4);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $i39 := $sext.i8.i32($i38);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $i40 := $or.i32($i37, $i39);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i40);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $i43 := $i42;
    goto $bb6;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i3);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb3;
}



const scsi_dma_map: ref;

axiom scsi_dma_map == $sub.ref(0, 455820);

procedure scsi_dma_map($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_dma_map($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1829} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1830} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const scsi_sg_count: ref;

axiom scsi_sg_count == $sub.ref(0, 456852);

procedure scsi_sg_count($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_sg_count($p0: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 472)), $mul.ref(320, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.1, $p3);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const sg_next: ref;

axiom sg_next == $sub.ref(0, 457884);

procedure sg_next($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation sg_next($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} $p1 := external_alloc();
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pagefault_enable: ref;

axiom pagefault_enable == $sub.ref(0, 458916);

procedure pagefault_enable();
  free requires assertsPassed;



implementation pagefault_enable()
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1832} devirtbounce.3(0);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} __preempt_count_sub(1);
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    return;
}



const __preempt_count_sub: ref;

axiom __preempt_count_sub == $sub.ref(0, 459948);

procedure __preempt_count_sub($i0: i32);
  free requires assertsPassed;



implementation __preempt_count_sub($i0: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1834} {:cexpr "__preempt_count_sub:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32(0, 1);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i7 == 1);
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i8 == 1);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, $i0);
    call {:si_unique_call 1843} devirtbounce.11(0, __preempt_count, $i9, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i8 == 1;
    call {:si_unique_call 1842} devirtbounce.10(0, __preempt_count, __preempt_count);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i7 == 1;
    call {:si_unique_call 1841} devirtbounce.10(0, __preempt_count, __preempt_count);
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    goto $bb19;
}



const __bad_percpu_size: ref;

axiom __bad_percpu_size == $sub.ref(0, 460980);

procedure __bad_percpu_size();



const pagefault_disable: ref;

axiom pagefault_disable == $sub.ref(0, 462012);

procedure pagefault_disable();
  free requires assertsPassed;



implementation pagefault_disable()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1848} __preempt_count_add(1);
    call {:si_unique_call 1849} devirtbounce.3(0);
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    return;
}



const lowmem_page_address: ref;

axiom lowmem_page_address == $sub.ref(0, 463044);

procedure lowmem_page_address($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation lowmem_page_address($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 24189255811072);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $i3 := $sdiv.i64($i2, 64);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $i4 := $shl.i64($i3, 12);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $sub.i64(0, 131941395333120));
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const __preempt_count_add: ref;

axiom __preempt_count_add == $sub.ref(0, 464076);

procedure __preempt_count_add($i0: i32);
  free requires assertsPassed;



implementation __preempt_count_add($i0: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} {:cexpr "__preempt_count_add:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32(0, 1);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i5 == 1);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i6 == 1);
    call {:si_unique_call 1859} devirtbounce.11(0, __preempt_count, $i0, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i6 == 1;
    call {:si_unique_call 1858} devirtbounce.10(0, __preempt_count, __preempt_count);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i5 == 1;
    call {:si_unique_call 1857} devirtbounce.10(0, __preempt_count, __preempt_count);
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    goto $bb19;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_host_lock_of_Scsi_Host: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_host_lock_of_Scsi_Host == $sub.ref(0, 465108);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_host_lock_of_Scsi_Host();
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_host_lock_of_Scsi_Host()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $i0 := $M.24;
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1864} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $i3 := $M.24;
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1865} ldv_assume($i5);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $M.24 := 2;
    call {:si_unique_call 1866} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_host_lock_of_Scsi_Host"} boogie_si_record_i32(2);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_364:
    assume !assertsPassed;
    return;
}



const seq_read: ref;

axiom seq_read == $sub.ref(0, 466140);

procedure seq_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation seq_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $i4: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1867} {:cexpr "seq_read:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1868} $i4 := __VERIFIER_nondet_long();
    call {:si_unique_call 1869} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i4);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const megadev_unlocked_ioctl: ref;

axiom megadev_unlocked_ioctl == $sub.ref(0, 467172);

procedure megadev_unlocked_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.1, $M.11, $M.29, $M.19, $M.26, assertsPassed, $CurrAddr, $M.20, $M.21, $M.6, $M.12;



implementation megadev_unlocked_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1870} {:cexpr "megadev_unlocked_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 1871} {:cexpr "megadev_unlocked_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1872} ldv_mutex_lock_106(megadev_mutex);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1873} $i3 := megadev_ioctl($p0, $i1, $i2);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    call {:si_unique_call 1874} {:cexpr "ret"} boogie_si_record_i32($i3);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1875} ldv_mutex_unlock_107(megadev_mutex);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_373:
    assume !assertsPassed;
    return;

  SeqInstr_370:
    assume !assertsPassed;
    return;

  SeqInstr_367:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_106: ref;

axiom ldv_mutex_lock_106 == $sub.ref(0, 468204);

procedure ldv_mutex_lock_106($p0: ref);
  free requires assertsPassed;
  modifies $M.29, assertsPassed;



implementation ldv_mutex_lock_106($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1876} ldv_linux_kernel_locking_mutex_mutex_lock_megadev_mutex($p0);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_376:
    assume !assertsPassed;
    return;
}



const megadev_ioctl: ref;

axiom megadev_ioctl == $sub.ref(0, 469236);

procedure megadev_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.11, $M.19, $M.26, $CurrAddr, $M.20, $M.21, $M.6, assertsPassed, $M.12;



implementation megadev_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $i83: i32;
  var $p84: ref;
  var $i85: i32;
  var $i86: i32;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $p93: ref;
  var $i94: i64;
  var $i95: i1;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $i101: i64;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $i106: i32;
  var $i107: i1;
  var $p108: ref;
  var $i109: i32;
  var $i110: i1;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $i116: i8;
  var $i117: i32;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $i121: i8;
  var $p122: ref;
  var $p123: ref;
  var $i124: i32;
  var $i125: i32;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i8;
  var $i130: i32;
  var $i131: i1;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i8;
  var $i136: i32;
  var $i137: i1;
  var $i139: i32;
  var $i140: i1;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $i144: i8;
  var $i145: i32;
  var $i146: i1;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $i150: i64;
  var $i151: i1;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $i157: i32;
  var $i158: i64;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $i162: i64;
  var $i163: i1;
  var $p164: ref;
  var $p165: ref;
  var $i166: i64;
  var $p167: ref;
  var $p168: ref;
  var $i169: i32;
  var $i170: i1;
  var $p171: ref;
  var $p172: ref;
  var $i173: i32;
  var $i174: i64;
  var $p175: ref;
  var $i176: i64;
  var $i177: i1;
  var $p178: ref;
  var $p179: ref;
  var $i180: i64;
  var $p181: ref;
  var $p182: ref;
  var $i183: i32;
  var $i184: i64;
  var $i185: i32;
  var $p186: ref;
  var $p187: ref;
  var $i188: i32;
  var $p189: ref;
  var $i190: i32;
  var $i191: i1;
  var $p192: ref;
  var $i193: i32;
  var $i194: i32;
  var $i195: i1;
  var $i196: i64;
  var $p197: ref;
  var $p198: ref;
  var $i199: i32;
  var $i200: i64;
  var $i201: i64;
  var $i202: i1;
  var $p204: ref;
  var $p205: ref;
  var $i206: i64;
  var $i207: i32;
  var $p208: ref;
  var $p210: ref;
  var $i211: i32;
  var $i212: i1;
  var $p213: ref;
  var $i214: i32;
  var $i215: i1;
  var $p216: ref;
  var $i217: i32;
  var $i218: i32;
  var $i219: i1;
  var $i220: i64;
  var $p221: ref;
  var $p222: ref;
  var $i223: i32;
  var $i224: i64;
  var $i225: i64;
  var $i226: i1;
  var $i227: i32;
  var $i228: i32;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $i233: i64;
  var $i234: i1;
  var $i235: i32;
  var $i203: i32;
  var $p236: ref;
  var $i237: i32;
  var $i238: i1;
  var $p239: ref;
  var $p240: ref;
  var $i241: i32;
  var $i242: i64;
  var $i243: i64;
  var $p244: ref;
  var $p245: ref;
  var $i246: i64;
  var $p247: ref;
  var $p248: ref;
  var $i249: i32;
  var $i250: i1;
  var $p251: ref;
  var $p252: ref;
  var $i253: i32;
  var $i254: i64;
  var $p255: ref;
  var $i256: i64;
  var $i257: i1;
  var $p258: ref;
  var $p259: ref;
  var $p260: ref;
  var $p261: ref;
  var $p262: ref;
  var $i263: i32;
  var $p264: ref;
  var $i265: i32;
  var $p266: ref;
  var $i267: i32;
  var $i268: i1;
  var $p269: ref;
  var $i270: i32;
  var $i271: i32;
  var $i272: i1;
  var $i273: i64;
  var $p274: ref;
  var $p275: ref;
  var $i276: i32;
  var $i277: i64;
  var $i278: i64;
  var $i279: i1;
  var $p280: ref;
  var $p281: ref;
  var $i282: i32;
  var $i283: i64;
  var $i284: i64;
  var $p285: ref;
  var $p286: ref;
  var $p287: ref;
  var $p288: ref;
  var $p289: ref;
  var $i290: i64;
  var $i291: i32;
  var $p292: ref;
  var $p294: ref;
  var $i295: i32;
  var $i296: i1;
  var $p297: ref;
  var $i298: i32;
  var $i299: i1;
  var $p300: ref;
  var $p301: ref;
  var $i302: i32;
  var $i303: i64;
  var $i304: i64;
  var $p305: ref;
  var $p306: ref;
  var $i307: i32;
  var $i308: i1;
  var $p309: ref;
  var $i310: i32;
  var $i311: i32;
  var $i312: i1;
  var $i313: i64;
  var $p314: ref;
  var $p315: ref;
  var $i316: i32;
  var $i317: i64;
  var $i318: i64;
  var $i319: i1;
  var $i320: i32;
  var $i321: i32;
  var $p322: ref;
  var $i323: i32;
  var $i324: i1;
  var $p325: ref;
  var $p326: ref;
  var $i327: i32;
  var $i328: i64;
  var $i329: i64;
  var $p330: ref;
  var $i12: i32;
  var cmdloc_dummy_var_74: [ref]i8;
  var cmdloc_dummy_var_75: [ref]i8;
  var cmdloc_dummy_var_76: [ref]i8;
  var cmdloc_dummy_var_77: [ref]i8;
  var cmdloc_dummy_var_78: [ref]i8;
  var cmdloc_dummy_var_79: [ref]i8;
  var cmdloc_dummy_var_80: [ref]i8;
  var cmdloc_dummy_var_81: [ref]i8;
  var cmdloc_dummy_var_82: [ref]i8;
  var vslice_dummy_var_182: i32;
  var vslice_dummy_var_183: i32;
  var vslice_dummy_var_184: i32;
  var vslice_dummy_var_185: i32;
  var vslice_dummy_var_186: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1877} $p3 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1878} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1880} $p6 := $alloc($mul.ref(20, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1881} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1882} {:cexpr "megadev_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 1883} {:cexpr "megadev_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i32($i1, 8);
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 255);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 109);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p3);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_74 := $M.1;
    call {:si_unique_call 1884} cmdloc_dummy_var_75 := $memset.i8(cmdloc_dummy_var_74, $p13, 0, 48, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_75;
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i2);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1885} $i15 := mega_m_to_n($p14, $p3);
    call {:si_unique_call 1886} {:cexpr "rval"} boogie_si_record_i32($i15);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.1, $p17);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 65536);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.1, $p20);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 131072);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.1, $p23);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 196608);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.1, $p26);
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb23:
    assume $i28 == 1;
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(12, 1));
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.1, $p96);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $i98 := $xor.i32($i97, 27904);
    call {:si_unique_call 1892} {:cexpr "adapno"} boogie_si_record_i32($i98);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $i99 := $M.6;
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $i100 := $sge.i32($i98, $i99);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i101 := $sext.i32.i64($i98);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref(hba_soft_state, $mul.ref(0, 256)), $mul.ref($i101, 8));
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.9, $p102);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p3);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($p104, $mul.ref(4, 4));
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.1, $p105);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i106, 1835172);
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $p127 := $bitcast.ref.ref($p126);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p127, $mul.ref(0, 18)), $mul.ref(0, 1));
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $i129 := $load.i8($M.1, $p128);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $i130 := $zext.i8.i32($i129);
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    $i131 := $eq.i32($i130, 195);
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    assume {:branchcond $i131} true;
    goto $bb67, $bb69;

  $bb69:
    assume !($i131 == 1);
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p132);
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p133, $mul.ref(0, 18)), $mul.ref(0, 1));
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $i135 := $load.i8($M.1, $p134);
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $i136 := $zext.i8.i32($i135);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i136, 227);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    assume {:branchcond $i137} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1915} $i139 := make_local_pdev($p103, $p7);
    call {:si_unique_call 1916} {:cexpr "tmp___0"} boogie_si_record_i32($i139);
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $i140 := $ne.i32($i139, 0);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $p142 := $bitcast.ref.ref($p141);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p142, $mul.ref(0, 18)), $mul.ref(0, 1));
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $i144 := $load.i8($M.1, $p143);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $i145 := $zext.i8.i32($i144);
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i145, 3);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i146 == 1);
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $i249 := $load.i32($M.1, $p248);
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $i250 := $ne.i32($i249, 0);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i250} true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i250 == 1);
    assume {:verifier.code 0} true;
    $p264, $i265 := $0.ref, 0;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $i267 := $load.i32($M.1, $p266);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $i268 := $ne.i32($i267, 0);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    assume {:branchcond $i268} true;
    goto $bb124, $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    assume !($i268 == 1);
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $p286 := $bitcast.ref.ref($p6);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $p288 := $bitcast.ref.ref($p287);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $p289 := $bitcast.ref.ref($p288);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_80 := $M.1;
    cmdloc_dummy_var_81 := $M.1;
    call {:si_unique_call 1947} cmdloc_dummy_var_82 := $memcpy.i8(cmdloc_dummy_var_80, cmdloc_dummy_var_81, $p286, $p289, 18, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_82;
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $i290 := $load.i64($M.28, $p5);
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $i291 := $trunc.i64.i32($i290);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p6, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p292, $i291);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1948} vslice_dummy_var_186 := mega_internal_command($p103, $p6, $0.ref);
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $p294 := $i2p.i64.ref($i2);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1949} $i295 := mega_n_to_m($p294, $p6);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    call {:si_unique_call 1950} {:cexpr "rval"} boogie_si_record_i32($i295);
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $i296 := $ne.i32($i295, 0);
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i296} true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $i307 := $load.i32($M.1, $p306);
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $i308 := $ne.i32($i307, 0);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    assume {:branchcond $i308} true;
    goto $bb139, $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    assume !($i308 == 1);
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $i321 := $i295;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $i323 := $load.i32($M.1, $p322);
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    $i324 := $ne.i32($i323, 0);
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    assume {:branchcond $i324} true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i324 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $p330 := $load.ref($M.26, $p7);
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1956} free_local_pdev($p330);
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $i12 := $i321;
    goto $bb6;

  $bb148:
    assume $i324 == 1;
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    $p325 := $load.ref($M.26, $p7);
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $i327 := $load.i32($M.1, $p326);
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    $i328 := $zext.i32.i64($i327);
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    $i329 := $load.i64($M.28, $p5);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1955} pci_free_consistent($p325, $i328, $p264, $i329);
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb139:
    assume $i308 == 1;
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $i310 := $load.i32($M.1, $p309);
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $i311 := $and.i32($i310, 1);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $i312 := $ne.i32($i311, 0);
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    assume {:branchcond $i312} true;
    goto $bb142, $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    assume !($i312 == 1);
    goto $bb141;

  $bb142:
    assume $i312 == 1;
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $i313 := $zext.i32.i64($i265);
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $p314 := $i2p.i64.ref($i313);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $i316 := $load.i32($M.1, $p315);
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    $i317 := $zext.i32.i64($i316);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1953} $i318 := copy_to_user($p314, $p264, $i317);
    call {:si_unique_call 1954} {:cexpr "tmp___7"} boogie_si_record_i64($i318);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    $i319 := $ne.i64($i318, 0);
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    assume {:branchcond $i319} true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i319 == 1);
    assume {:verifier.code 0} true;
    $i320 := $i295;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $i321 := $i320;
    goto $bb147;

  $bb144:
    assume $i319 == 1;
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $i320 := $sub.i32(0, 14);
    goto $bb146;

  $bb133:
    assume $i296 == 1;
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $i298 := $load.i32($M.1, $p297);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $i299 := $ne.i32($i298, 0);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    assume {:branchcond $i299} true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i299 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $p305 := $load.ref($M.26, $p7);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1952} free_local_pdev($p305);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $i12 := $i295;
    goto $bb6;

  $bb135:
    assume $i299 == 1;
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $p300 := $load.ref($M.26, $p7);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $i302 := $load.i32($M.1, $p301);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $i303 := $zext.i32.i64($i302);
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $i304 := $load.i64($M.28, $p5);
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1951} pci_free_consistent($p300, $i303, $p264, $i304);
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    goto $bb137;

  SeqInstr_424:
    assume !assertsPassed;
    return;

  SeqInstr_421:
    assume !assertsPassed;
    return;

  $bb124:
    assume $i268 == 1;
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $i270 := $load.i32($M.1, $p269);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $i271 := $and.i32($i270, 2);
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $i272 := $ne.i32($i271, 0);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    assume {:branchcond $i272} true;
    goto $bb127, $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    assume !($i272 == 1);
    goto $bb126;

  $bb127:
    assume $i272 == 1;
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $i273 := $zext.i32.i64($i265);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $p274 := $i2p.i64.ref($i273);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $i276 := $load.i32($M.1, $p275);
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $i277 := $zext.i32.i64($i276);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1943} $i278 := copy_from_user($p264, $p274, $i277);
    call {:si_unique_call 1944} {:cexpr "tmp___6"} boogie_si_record_i64($i278);
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $i279 := $ne.i64($i278, 0);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    assume {:branchcond $i279} true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i279 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb129:
    assume $i279 == 1;
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $p280 := $load.ref($M.26, $p7);
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $i282 := $load.i32($M.1, $p281);
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $i283 := $zext.i32.i64($i282);
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $i284 := $load.i64($M.28, $p5);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1945} pci_free_consistent($p280, $i283, $p264, $i284);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $p285 := $load.ref($M.26, $p7);
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1946} free_local_pdev($p285);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 14);
    goto $bb6;

  $bb118:
    assume $i250 == 1;
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $p251 := $load.ref($M.26, $p7);
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $i253 := $load.i32($M.1, $p252);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $i254 := $zext.i32.i64($i253);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1940} $p255 := pci_alloc_consistent($p251, $i254, $p5);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $i256 := $p2i.ref.i64($p255);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $i257 := $eq.i64($i256, 0);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    assume {:branchcond $i257} true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $p260 := $bitcast.ref.ref($p259);
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $p261 := $bitcast.ref.ref($p260);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p261, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $i263 := $load.i32($M.1, $p262);
    call {:si_unique_call 1942} {:cexpr "uxferaddr"} boogie_si_record_i32($i263);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $p264, $i265 := $p255, $i263;
    goto $bb123;

  $bb120:
    assume $i257 == 1;
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $p258 := $load.ref($M.26, $p7);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1941} free_local_pdev($p258);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 12);
    goto $bb6;

  $bb76:
    assume $i146 == 1;
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.26, $p7);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1917} $p148 := pci_alloc_consistent($p147, 60, $p4);
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p148);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $i150 := $p2i.ref.i64($p149);
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $i151 := $eq.i64($i150, 0);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    assume {:branchcond $i151} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $p154 := $bitcast.ref.ref($p153);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $p155 := $bitcast.ref.ref($p154);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p155, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $i157 := $load.i32($M.1, $p156);
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $i158 := $zext.i32.i64($i157);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $p159 := $i2p.i64.ref($i158);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $p160 := $bitcast.ref.ref($p149);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $p161 := $bitcast.ref.ref($p159);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1919} $i162 := copy_from_user($p160, $p161, 60);
    call {:si_unique_call 1920} {:cexpr "tmp___2"} boogie_si_record_i64($i162);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $i163 := $ne.i64($i162, 0);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    assume {:branchcond $i163} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p149, $mul.ref(0, 60)), $mul.ref(56, 1));
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    $i169 := $load.i32($M.1, $p168);
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $i170 := $ne.i32($i169, 0);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    $p187, $i188 := $0.ref, 0;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p149, $mul.ref(0, 60)), $mul.ref(56, 1));
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $i190 := $load.i32($M.1, $p189);
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $i191 := $ne.i32($i190, 0);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    assume {:branchcond $i191} true;
    goto $bb90, $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    assume !($i191 == 1);
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p204 := $bitcast.ref.ref($p6);
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_78 := $M.1;
    call {:si_unique_call 1929} cmdloc_dummy_var_79 := $memset.i8(cmdloc_dummy_var_78, $p204, 0, 18, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_79;
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p6, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p205, 3);
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $i206 := $load.i64($M.27, $p4);
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $i207 := $trunc.i64.i32($i206);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p6, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p208, $i207);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1930} vslice_dummy_var_185 := mega_internal_command($p103, $p6, $p149);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $p210 := $i2p.i64.ref($i2);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1931} $i211 := mega_n_to_m($p210, $p6);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    call {:si_unique_call 1932} {:cexpr "rval"} boogie_si_record_i32($i211);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $i212 := $ne.i32($i211, 0);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    assume {:branchcond $i212} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p149, $mul.ref(0, 60)), $mul.ref(56, 1));
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $i214 := $load.i32($M.1, $p213);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $i215 := $ne.i32($i214, 0);
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    assume {:branchcond $i215} true;
    goto $bb103, $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    assume !($i215 == 1);
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $i228 := $i211;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p159, $mul.ref(0, 60)), $mul.ref(18, 1));
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $p230 := $bitcast.ref.ref($p229);
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p149, $mul.ref(0, 60)), $mul.ref(18, 1));
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $p232 := $bitcast.ref.ref($p231);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1935} $i233 := copy_to_user($p230, $p232, 14);
    call {:si_unique_call 1936} {:cexpr "tmp___5"} boogie_si_record_i64($i233);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $i234 := $ne.i64($i233, 0);
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    assume {:branchcond $i234} true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    $i235 := $i228;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $i203 := $i235;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p149, $mul.ref(0, 60)), $mul.ref(56, 1));
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $i237 := $load.i32($M.1, $p236);
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    $i238 := $ne.i32($i237, 0);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    assume {:branchcond $i238} true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $p244 := $load.ref($M.26, $p7);
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $p245 := $bitcast.ref.ref($p149);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $i246 := $load.i64($M.27, $p4);
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1938} pci_free_consistent($p244, 60, $p245, $i246);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $p247 := $load.ref($M.26, $p7);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1939} free_local_pdev($p247);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $i12 := $i203;
    goto $bb6;

  $bb115:
    assume $i238 == 1;
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $p239 := $load.ref($M.26, $p7);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p149, $mul.ref(0, 60)), $mul.ref(56, 1));
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $i241 := $load.i32($M.1, $p240);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $i242 := $zext.i32.i64($i241);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $i243 := $load.i64($M.28, $p5);
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1937} pci_free_consistent($p239, $i242, $p187, $i243);
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb112:
    assume $i234 == 1;
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $i235 := $sub.i32(0, 14);
    goto $bb114;

  $bb103:
    assume $i215 == 1;
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $i217 := $load.i32($M.1, $p216);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $i218 := $and.i32($i217, 1);
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $i219 := $ne.i32($i218, 0);
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    assume {:branchcond $i219} true;
    goto $bb106, $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    assume !($i219 == 1);
    goto $bb105;

  $bb106:
    assume $i219 == 1;
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $i220 := $zext.i32.i64($i188);
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $p221 := $i2p.i64.ref($i220);
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p149, $mul.ref(0, 60)), $mul.ref(56, 1));
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $i223 := $load.i32($M.1, $p222);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $i224 := $zext.i32.i64($i223);
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1933} $i225 := copy_to_user($p221, $p187, $i224);
    call {:si_unique_call 1934} {:cexpr "tmp___4"} boogie_si_record_i64($i225);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $i226 := $ne.i64($i225, 0);
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    assume {:branchcond $i226} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i226 == 1);
    assume {:verifier.code 0} true;
    $i227 := $i211;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $i228 := $i227;
    goto $bb111;

  $bb108:
    assume $i226 == 1;
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $i227 := $sub.i32(0, 14);
    goto $bb110;

  $bb100:
    assume $i212 == 1;
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $i203 := $i211;
    goto $bb97;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  SeqInstr_415:
    assume !assertsPassed;
    return;

  $bb90:
    assume $i191 == 1;
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $i193 := $load.i32($M.1, $p192);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $i194 := $and.i32($i193, 2);
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $i195 := $ne.i32($i194, 0);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    assume {:branchcond $i195} true;
    goto $bb93, $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    assume !($i195 == 1);
    goto $bb92;

  $bb93:
    assume $i195 == 1;
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    $i196 := $zext.i32.i64($i188);
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $p197 := $i2p.i64.ref($i196);
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p149, $mul.ref(0, 60)), $mul.ref(56, 1));
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $i199 := $load.i32($M.1, $p198);
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $i200 := $zext.i32.i64($i199);
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1927} $i201 := copy_from_user($p187, $p197, $i200);
    call {:si_unique_call 1928} {:cexpr "tmp___3"} boogie_si_record_i64($i201);
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $i202 := $ne.i64($i201, 0);
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    assume {:branchcond $i202} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb95:
    assume $i202 == 1;
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $i203 := $sub.i32(0, 14);
    goto $bb97;

  $bb84:
    assume $i170 == 1;
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $p171 := $load.ref($M.26, $p7);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p149, $mul.ref(0, 60)), $mul.ref(56, 1));
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $i173 := $load.i32($M.1, $p172);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $i174 := $zext.i32.i64($i173);
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1923} $p175 := pci_alloc_consistent($p171, $i174, $p5);
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $i176 := $p2i.ref.i64($p175);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $i177 := $eq.i64($i176, 0);
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p149, $mul.ref(0, 60)), $mul.ref(52, 1));
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $i183 := $load.i32($M.1, $p182);
    call {:si_unique_call 1926} {:cexpr "uxferaddr"} boogie_si_record_i32($i183);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $i184 := $load.i64($M.28, $p5);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $i185 := $trunc.i64.i32($i184);
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p149, $mul.ref(0, 60)), $mul.ref(52, 1));
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p186, $i185);
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $p187, $i188 := $p175, $i183;
    goto $bb89;

  $bb86:
    assume $i177 == 1;
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $p178 := $load.ref($M.26, $p7);
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $p179 := $bitcast.ref.ref($p149);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $i180 := $load.i64($M.27, $p4);
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1924} pci_free_consistent($p178, 60, $p179, $i180);
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $p181 := $load.ref($M.26, $p7);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1925} free_local_pdev($p181);
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 12);
    goto $bb6;

  $bb81:
    assume $i163 == 1;
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    $p164 := $load.ref($M.26, $p7);
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $p165 := $bitcast.ref.ref($p149);
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $i166 := $load.i64($M.27, $p4);
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1921} pci_free_consistent($p164, 60, $p165, $i166);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $p167 := $load.ref($M.26, $p7);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1922} free_local_pdev($p167);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 14);
    goto $bb6;

  $bb78:
    assume $i151 == 1;
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $p152 := $load.ref($M.26, $p7);
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1918} free_local_pdev($p152);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 12);
    goto $bb6;

  $bb73:
    assume $i140 == 1;
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 5);
    goto $bb6;

  $bb70:
    assume {:verifier.code 0} true;
    assume $i137 == 1;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} vslice_dummy_var_184 := printk.ref(.str.167);
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb6;

  $bb67:
    assume {:verifier.code 0} true;
    assume $i131 == 1;
    goto $bb68;

  $bb58:
    assume $i107 == 1;
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p103, $mul.ref(0, 1912)), $mul.ref(1348, 1));
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.1, $p108);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i109, 0);
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    assume {:branchcond $i110} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p113);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p114, $mul.ref(0, 18)), $mul.ref(3, 1));
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $i116 := $load.i8($M.1, $p115);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i116);
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1909} $i118 := mega_del_logdrv($p103, $i117);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    call {:si_unique_call 1910} {:cexpr "rval"} boogie_si_record_i32($i118);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i118, 0);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    $i125 := $i118;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $i12 := $i125;
    goto $bb6;

  $bb63:
    assume $i119 == 1;
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $p120 := $bitcast.ref.ref($p6);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_76 := $M.1;
    call {:si_unique_call 1911} cmdloc_dummy_var_77 := $memset.i8(cmdloc_dummy_var_76, $p120, 0, 18, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_77;
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $i121 := $trunc.i32.i8($i118);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p6, $mul.ref(0, 20)), $mul.ref(17, 1));
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p122, $i121);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $p123 := $i2p.i64.ref($i2);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1912} $i124 := mega_n_to_m($p123, $p6);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    call {:si_unique_call 1913} {:cexpr "rval"} boogie_si_record_i32($i124);
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $i125 := $i124;
    goto $bb65;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  SeqInstr_409:
    assume !assertsPassed;
    return;

  $bb60:
    assume $i110 == 1;
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1907} vslice_dummy_var_182 := printk.ref(.str.165);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} vslice_dummy_var_183 := printk.ref(.str.166);
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb6;

  $bb55:
    assume $i100 == 1;
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 19);
    goto $bb6;

  $bb19:
    assume $i25 == 1;
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(12, 1));
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.1, $p84);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $i86 := $xor.i32($i85, 27904);
    call {:si_unique_call 1891} {:cexpr "adapno"} boogie_si_record_i32($i86);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $i87 := $M.6;
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $i88 := $sge.i32($i86, $i87);
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.1, $p90);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $i92 := $sext.i32.i64($i86);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $p93 := $add.ref(mcontroller, $mul.ref($i92, 1));
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1905} $i94 := copy_to_user($p91, $p93, 32);
    call {:si_unique_call 1906} {:cexpr "tmp"} boogie_si_record_i64($i94);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $i95 := $ne.i64($i94, 0);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb6;

  $bb52:
    assume $i95 == 1;
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 14);
    goto $bb6;

  $bb49:
    assume $i88 == 1;
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 19);
    goto $bb6;

  $bb15:
    assume $i22 == 1;
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1889} might_fault();
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $i56 := $M.6;
    call {:si_unique_call 1890} {:cexpr "__pu_val___0"} boogie_si_record_i32($i56);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.1, $p68);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    call {:si_unique_call 1899} $i71 := devirtbounce.12(0, $i56, $p70);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    call {:si_unique_call 1900} {:cexpr "__ret_pu___0"} boogie_si_record_i32($i71);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i71, 0);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i83 := $M.6;
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $i12 := $i83;
    goto $bb6;

  $bb46:
    assume $i82 == 1;
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 14);
    goto $bb6;

  SeqInstr_394:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i19 == 1;
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} might_fault();
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $i29 := $M.25;
    call {:si_unique_call 1888} {:cexpr "__pu_val"} boogie_si_record_i32($i29);
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.1, $p41);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    call {:si_unique_call 1893} $i44 := devirtbounce.12(0, $i29, $p43);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    call {:si_unique_call 1894} {:cexpr "__ret_pu"} boogie_si_record_i32($i44);
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i44, 0);
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb35:
    assume $i55 == 1;
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 14);
    goto $bb6;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $i12 := $i15;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i1, 224);
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb6;
}



const ldv_mutex_unlock_107: ref;

axiom ldv_mutex_unlock_107 == $sub.ref(0, 470268);

procedure ldv_mutex_unlock_107($p0: ref);
  free requires assertsPassed;
  modifies $M.29, assertsPassed;



implementation ldv_mutex_unlock_107($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1957} ldv_linux_kernel_locking_mutex_mutex_unlock_megadev_mutex($p0);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_427:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_unlock_megadev_mutex: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_unlock_megadev_mutex == $sub.ref(0, 471300);

procedure ldv_linux_kernel_locking_mutex_mutex_unlock_megadev_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.29, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_unlock_megadev_mutex($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    $i1 := $M.29;
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1958} ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i3);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    $M.29 := 0;
    call {:si_unique_call 1959} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_megadev_mutex"} boogie_si_record_i8(0);
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_430:
    assume !assertsPassed;
    return;
}



const mega_m_to_n: ref;

axiom mega_m_to_n == $sub.ref(0, 472332);

procedure mega_m_to_n($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation mega_m_to_n($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i64;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i16;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $i86: i32;
  var $i87: i32;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i16;
  var $i94: i32;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i32;
  var $p103: ref;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $i107: i32;
  var $p109: ref;
  var $i110: i32;
  var $i108: i32;
  var $p111: ref;
  var $p112: ref;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $p116: ref;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $i120: i32;
  var $i121: i32;
  var $p122: ref;
  var $i13: i32;
  var cmdloc_dummy_var_83: [ref]i8;
  var cmdloc_dummy_var_84: [ref]i8;
  var cmdloc_dummy_var_85: [ref]i8;
  var cmdloc_dummy_var_86: [ref]i8;
  var cmdloc_dummy_var_87: [ref]i8;
  var cmdloc_dummy_var_88: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1960} $p2 := $alloc($mul.ref(120, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1961} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p4, 0);
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb1;

  $bb1:
    call $i5, $i6, $i7, $p8, $i9 := mega_m_to_n_loop_$bb1($p3, $i5, $i6, $i7, $p8, $i9);
    goto $bb1_last;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := $uge.i32($i5, 8);
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i5);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref($i7, 1));
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p8, 0);
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i5, 1);
    call {:si_unique_call 1964} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $i5 := $i9;
    goto corral_source_split_7461_dummy;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p3);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1962} $i11 := copy_from_user($p10, $p0, 7);
    call {:si_unique_call 1963} {:cexpr "tmp___0"} boogie_si_record_i64($i11);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p3);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1965} $i15 := memcmp($p14, .str.168, 7);
    call {:si_unique_call 1966} {:cexpr "tmp___1"} boogie_si_record_i32($i15);
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p2);
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1967} $i18 := copy_from_user($p17, $p0, 110);
    call {:si_unique_call 1968} {:cexpr "tmp___2"} boogie_si_record_i64($i18);
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.1, $p22);
    call {:si_unique_call 1969} {:cexpr "opcode"} boogie_si_record_i8($i23);
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 24)), $mul.ref(1, 1));
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.1, $p26);
    call {:si_unique_call 1970} {:cexpr "subopcode"} boogie_si_record_i8($i27);
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i23);
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 130);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i23);
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 129);
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i23);
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 128);
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb25:
    assume $i33 == 1;
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p89, 0);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p2, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p90);
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p91, $mul.ref(0, 24)), $mul.ref(2, 1));
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $i93 := $load.i16($M.1, $p92);
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $i94 := $zext.i16.i32($i93);
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(12, 1));
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p95, $i94);
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p96);
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p97);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p2, $mul.ref(0, 120)), $mul.ref(32, 1));
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_86 := $M.1;
    cmdloc_dummy_var_87 := $M.1;
    call {:si_unique_call 1972} cmdloc_dummy_var_88 := $memcpy.i8(cmdloc_dummy_var_86, cmdloc_dummy_var_87, $p98, $p100, 18, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_88;
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p2, $mul.ref(0, 120)), $mul.ref(4, 1));
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.1, $p101);
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p2, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.1, $p103);
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    $i105 := $ugt.i32($i102, $i104);
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i105 == 1);
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p2, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.1, $p109);
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $i108 := $i110;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p111, $i108);
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p2, $mul.ref(0, 120)), $mul.ref(4, 1));
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.1, $p112);
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $i114 := $ne.i32($i113, 0);
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p2, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.1, $p116);
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i117, 0);
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb9;

  $bb58:
    assume $i118 == 1;
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.1, $p119);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $i121 := $or.i32($i120, 2);
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p122, $i121);
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb55:
    assume $i114 == 1;
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p115, 1);
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb52:
    assume $i105 == 1;
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p2, $mul.ref(0, 120)), $mul.ref(4, 1));
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.1, $p106);
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    $i108 := $i107;
    goto $bb54;

  $bb21:
    assume $i31 == 1;
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p61, 0);
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 24)), $mul.ref(2, 1));
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $i65 := $load.i16($M.1, $p64);
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    $i66 := $zext.i16.i32($i65);
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(12, 1));
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p67, $i66);
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p2, $mul.ref(0, 120)), $mul.ref(32, 1));
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_83 := $M.1;
    cmdloc_dummy_var_84 := $M.1;
    call {:si_unique_call 1971} cmdloc_dummy_var_85 := $memcpy.i8(cmdloc_dummy_var_83, cmdloc_dummy_var_84, $p70, $p72, 18, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_85;
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p2, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p74, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.1, $p75);
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p77, $i76);
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p2, $mul.ref(0, 120)), $mul.ref(4, 1));
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.1, $p78);
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p2, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.1, $p82);
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, 0);
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb49:
    assume $i84 == 1;
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.1, $p85);
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    $i87 := $or.i32($i86, 2);
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p88, $i87);
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb46:
    assume $i80 == 1;
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p81, 1);
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb17:
    assume $i29 == 1;
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i27);
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 101);
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i27);
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 109);
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i27);
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 103);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb9;

  $bb38:
    assume $i39 == 1;
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p50, 196608);
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 24)), $mul.ref(2, 1));
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.1, $p53);
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(12, 1));
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p56, $i55);
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p2, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.1, $p57);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p60, $p58);
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb34:
    assume $i37 == 1;
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p45, 131072);
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.1, $p46);
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p49, $p47);
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb30:
    assume $i35 == 1;
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p40, 65536);
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.1, $p41);
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p44, $p42);
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb14:
    assume $i19 == 1;
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 14);
    goto $bb9;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb9;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 14);
    goto $bb9;

  corral_source_split_7461_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7448;
}



const might_fault: ref;

axiom might_fault == $sub.ref(0, 473364);

procedure might_fault();
  free requires assertsPassed;



implementation might_fault()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    return;
}



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 474396);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1973} {:cexpr "copy_to_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1974} might_fault();
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($sub.i32(0, 1), 0);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1975} $i6 := ldv__builtin_expect($i5, 1);
    call {:si_unique_call 1976} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($sub.i32(0, 1));
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    $i12 := $uge.i64($i11, $i2);
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1979} $i15 := ldv__builtin_expect($i14, 1);
    call {:si_unique_call 1980} {:cexpr "tmp___0"} boogie_si_record_i64($i15);
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1983} __copy_to_user_overflow();
    assume {:verifier.code 0} true;
    $i19 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i10 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i2);
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1981} $i18 := _copy_to_user($p0, $p1, $i17);
    call {:si_unique_call 1982} {:cexpr "n"} boogie_si_record_i64($i18);
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i2);
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1977} $i9 := _copy_to_user($p0, $p1, $i8);
    call {:si_unique_call 1978} {:cexpr "n"} boogie_si_record_i64($i9);
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const mega_del_logdrv: ref;

axiom mega_del_logdrv == $sub.ref(0, 475428);

procedure mega_del_logdrv($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.19, assertsPassed, $CurrAddr, $M.20, $M.21;



implementation mega_del_logdrv($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $i36: i8;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p21: ref;
  var $p44: ref;
  var $p45: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1984} {:cexpr "mega_del_logdrv:arg:logdrv"} boogie_si_record_i32($i1);
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1356, 1));
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1985} atomic_set($p2, 1);
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(88, 1));
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $p4, $i5, $i6, $i7, $i8 := mega_del_logdrv_loop_$bb1($p0, $p3, $p4, $i5, $i6, $i7, $i8);
    goto $bb1_last;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1986} $i5 := atomic_read($p4);
    call {:si_unique_call 1987} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 0);
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1989} $i7 := list_empty($p3);
    call {:si_unique_call 1990} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1991} $i9 := mega_do_del_logdrv($p0, $i1);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    call {:si_unique_call 1992} {:cexpr "rval"} boogie_si_record_i32($i9);
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1360, 1));
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1993} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_108($p10);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1352, 1));
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.1, $p11);
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1356, 1));
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1994} atomic_set($p44, 0);
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1995} mega_runpendq($p0);
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1360, 1));
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1996} ldv_spin_unlock_irqrestore_97($p45, $u0);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(88, 1)), $mul.ref(0, 1));
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(88, 1));
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i17, $i19);
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $p21 := $p16;
    goto $bb13;

  $bb13:
    call $p22, $p24, $p25, $p26, $i27, $i28, $i29, $p30, $p31, $p32, $i33, $i34, $i35, $i36, $p37, $p38, $p39, $p40, $p41, $i42, $i43, $p21 := mega_del_logdrv_loop_$bb13($i19, $p22, $p24, $p25, $p26, $i27, $i28, $i29, $p30, $p31, $p32, $i33, $i34, $i35, $i36, $p37, $p38, $p39, $p40, $p41, $i42, $i43, $p21);
    goto $bb13_last;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p22, $mul.ref($sub.ref(0, 8), 184)), $mul.ref(152, 1));
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.1, $p24);
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 60)), $mul.ref(1, 1));
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.1, $p26);
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    $i28 := $sext.i8.i32($i27);
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    $i29 := $sge.i32($i28, 0);
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p21, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.1, $p40);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, $i19);
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i43 == 1);
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb18:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $p21 := $p41;
    goto $bb18_dummy;

  $bb15:
    assume $i29 == 1;
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p22, $mul.ref($sub.ref(0, 8), 184)), $mul.ref(152, 1));
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.1, $p30);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 60)), $mul.ref(1, 1));
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.1, $p32);
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i34, 128);
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i8($i35);
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p22, $mul.ref($sub.ref(0, 8), 184)), $mul.ref(152, 1));
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.1, $p37);
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 60)), $mul.ref(1, 1));
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p39, $i36);
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    goto $bb17;

  SeqInstr_436:
    assume !assertsPassed;
    return;

  SeqInstr_433:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1988} msleep(1000);
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    goto corral_source_split_7678_dummy;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb18_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7707;

  corral_source_split_7678_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1184, 1));
    goto corral_source_split_7674;
}



const mega_n_to_m: ref;

axiom mega_n_to_m == $sub.ref(0, 476460);

procedure mega_n_to_m($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.11, $CurrAddr, $M.19, $M.6, assertsPassed, $M.20, $M.21, $M.12;



implementation mega_n_to_m($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i64;
  var $i63: i32;
  var $p64: ref;
  var $i65: i1;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i32;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $i90: i8;
  var $i91: i32;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i32;
  var $i96: i32;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $i100: i32;
  var $i101: i32;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $i106: i32;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $i111: i32;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i32;
  var $i116: i1;
  var $p117: ref;
  var $i118: i8;
  var $i119: i32;
  var $i120: i1;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i64;
  var $i128: i64;
  var $i129: i32;
  var $p130: ref;
  var $i131: i1;
  var $p132: ref;
  var $i133: i8;
  var $i134: i32;
  var $p135: ref;
  var $i136: i32;
  var $i137: i32;
  var $p138: ref;
  var $p139: ref;
  var $i140: i32;
  var $i141: i32;
  var $p142: ref;
  var $p143: ref;
  var $i144: i32;
  var $i145: i32;
  var $p146: ref;
  var $p147: ref;
  var $i148: i32;
  var $i149: i32;
  var $p150: ref;
  var $p151: ref;
  var $i152: i32;
  var $i153: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1997} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p3, 0);
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb1;

  $bb1:
    call $i4, $i5, $i6, $p7, $i8 := mega_n_to_m_loop_$bb1($p2, $i4, $i5, $i6, $p7, $i8);
    goto $bb1_last;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i4, 8);
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i4);
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref($i6, 1));
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p7, 0);
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i4, 1);
    call {:si_unique_call 2000} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $i4 := $i8;
    goto corral_source_split_7761_dummy;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1998} $i10 := copy_from_user($p9, $p0, 7);
    call {:si_unique_call 1999} {:cexpr "tmp___0"} boogie_si_record_i64($i10);
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p2);
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2001} $i14 := memcmp($p13, .str.168, 7);
    call {:si_unique_call 2002} {:cexpr "tmp___1"} boogie_si_record_i32($i14);
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p0);
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2005} might_fault();
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(17, 1));
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.1, $p89);
    call {:si_unique_call 2006} {:cexpr "__pu_val___1"} boogie_si_record_i8($i90);
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i32($i90);
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p88, $mul.ref(0, 120)), $mul.ref(32, 1));
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p92);
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($p93, $mul.ref(17, 1));
    call {:si_unique_call 2024} $i95 := devirtbounce.13(0, $i91, $p94);
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    call {:si_unique_call 2025} {:cexpr "__ret_pu___1"} boogie_si_record_i32($i95);
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i95, 0);
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    assume {:branchcond $i116} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    $i118 := $load.i8($M.1, $p117);
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $i119 := $zext.i8.i32($i118);
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i119, 3);
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb50:
    assume $i120 == 1;
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p88, $mul.ref(0, 120)), $mul.ref(32, 1));
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p121);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2030} might_fault();
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p122, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p123);
    call {:si_unique_call 2031} $p125 := devirtbounce.14(0, $p124, 8);
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    $p126 := $extractvalue($p125, 0);
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    $i127 := $extractvalue($p125, 1);
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    $i128 := $p2i.ref.i64($p126);
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    $i129 := $trunc.i64.i32($i128);
    call {:si_unique_call 2032} {:cexpr "__ret_gu___0"} boogie_si_record_i32($i129);
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    $p130 := $i2p.i64.ref($i127);
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    $i131 := $ne.i32($i129, 0);
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    assume {:branchcond $i131} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2033} might_fault();
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(17, 1));
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    $i133 := $load.i8($M.1, $p132);
    call {:si_unique_call 2034} {:cexpr "__pu_val___2"} boogie_si_record_i8($i133);
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i134 := $zext.i8.i32($i133);
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p130, $mul.ref(0, 60)), $mul.ref(51, 1));
    call {:si_unique_call 2035} $i136 := devirtbounce.13(0, $i134, $p135);
    goto SeqInstr_487, SeqInstr_488;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  SeqInstr_489:
    call {:si_unique_call 2036} {:cexpr "__ret_pu___2"} boogie_si_record_i32($i136);
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i153 := $ne.i32($i136, 0);
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    assume {:branchcond $i153} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb62:
    assume $i153 == 1;
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 14);
    goto $bb9;

  SeqInstr_487:
    assume !assertsPassed;
    return;

  $bb52:
    assume $i131 == 1;
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 14);
    goto $bb9;

  $bb47:
    assume $i116 == 1;
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 14);
    goto $bb9;

  SeqInstr_472:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p0);
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2003} might_fault();
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(17, 1));
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.1, $p17);
    call {:si_unique_call 2004} {:cexpr "__pu_val"} boogie_si_record_i8($i18);
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p16, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 20)), $mul.ref(17, 1));
    call {:si_unique_call 2007} $i24 := devirtbounce.13(0, $i19, $p23);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    call {:si_unique_call 2008} {:cexpr "__ret_pu"} boogie_si_record_i32($i24);
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i24, 0);
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.1, $p50);
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 3);
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb23:
    assume $i53 == 1;
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p16, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2013} might_fault();
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    call {:si_unique_call 2014} $p59 := devirtbounce.14(0, $p58, 8);
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $p60 := $extractvalue($p59, 0);
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $i61 := $extractvalue($p59, 1);
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p60);
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i64.i32($i62);
    call {:si_unique_call 2015} {:cexpr "__ret_gu"} boogie_si_record_i32($i63);
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    $p64 := $i2p.i64.ref($i61);
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i63, 0);
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2016} might_fault();
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(17, 1));
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.1, $p66);
    call {:si_unique_call 2017} {:cexpr "__pu_val___0"} boogie_si_record_i8($i67);
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p64, $mul.ref(0, 60)), $mul.ref(51, 1));
    call {:si_unique_call 2018} $i70 := devirtbounce.13(0, $i68, $p69);
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    call {:si_unique_call 2019} {:cexpr "__ret_pu___0"} boogie_si_record_i32($i70);
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i70, 0);
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb35:
    assume $i87 == 1;
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 14);
    goto $bb9;

  SeqInstr_457:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i65 == 1;
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 14);
    goto $bb9;

  $bb20:
    assume $i49 == 1;
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 14);
    goto $bb9;

  SeqInstr_442:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 14);
    goto $bb9;

  corral_source_split_7761_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7748;
}



const make_local_pdev: ref;

axiom make_local_pdev == $sub.ref(0, 477492);

procedure make_local_pdev($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.1;



implementation make_local_pdev($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i6: i32;
  var cmdloc_dummy_var_89: [ref]i8;
  var cmdloc_dummy_var_90: [ref]i8;
  var cmdloc_dummy_var_91: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2041} $p2 := pci_alloc_dev($0.ref);
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p1, $p2);
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.26, $p1);
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.26, $p1);
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(64, 1));
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_89 := $M.1;
    cmdloc_dummy_var_90 := $M.1;
    call {:si_unique_call 2042} cmdloc_dummy_var_91 := $memcpy.i8(cmdloc_dummy_var_89, cmdloc_dummy_var_90, $p8, $p11, 2968, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_91;
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.26, $p1);
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2043} $i13 := pci_set_dma_mask($p12, 4294967295);
    call {:si_unique_call 2044} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.26, $p1);
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2045} kfree($p16);
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 1);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 1);
    goto $bb3;
}



const free_local_pdev: ref;

axiom free_local_pdev == $sub.ref(0, 478524);

procedure free_local_pdev($p0: ref);
  free requires assertsPassed;



implementation free_local_pdev($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2046} kfree($p1);
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    return;
}



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 479556);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2047} {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2048} might_fault();
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($sub.i32(0, 1), 0);
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2049} $i6 := ldv__builtin_expect($i5, 1);
    call {:si_unique_call 2050} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($sub.i32(0, 1));
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    $i12 := $uge.i64($i11, $i2);
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2053} $i15 := ldv__builtin_expect($i14, 1);
    call {:si_unique_call 2054} {:cexpr "tmp___0"} boogie_si_record_i64($i15);
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2057} __copy_from_user_overflow();
    assume {:verifier.code 0} true;
    $i19 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i10 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i2);
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2055} $i18 := _copy_from_user($p0, $p1, $i17);
    call {:si_unique_call 2056} {:cexpr "n"} boogie_si_record_i64($i18);
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i2);
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2051} $i9 := _copy_from_user($p0, $p1, $i8);
    call {:si_unique_call 2052} {:cexpr "n"} boogie_si_record_i64($i9);
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 480588);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2058} {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2059} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 2060} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_from_user_overflow: ref;

axiom __copy_from_user_overflow == $sub.ref(0, 481620);

procedure __copy_from_user_overflow();
  free requires assertsPassed;



implementation __copy_from_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    return;
}



const pci_alloc_dev: ref;

axiom pci_alloc_dev == $sub.ref(0, 482652);

procedure pci_alloc_dev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_alloc_dev($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2061} $p1 := external_alloc();
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const memcmp: ref;

axiom memcmp == $sub.ref(0, 483684);

procedure memcmp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const msleep: ref;

axiom msleep == $sub.ref(0, 484716);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2062} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    return;
}



const mega_do_del_logdrv: ref;

axiom mega_do_del_logdrv == $sub.ref(0, 485748);

procedure mega_do_del_logdrv($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.19, $CurrAddr, $M.20, $M.21, assertsPassed;



implementation mega_do_del_logdrv($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var cmdloc_dummy_var_92: [ref]i8;
  var cmdloc_dummy_var_93: [ref]i8;
  var vslice_dummy_var_187: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2063} $p2 := $alloc($mul.ref(20, $zext.i32.i64(1)));
    call {:si_unique_call 2064} {:cexpr "mega_do_del_logdrv:arg:logdrv"} boogie_si_record_i32($i1);
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_92 := $M.1;
    call {:si_unique_call 2065} cmdloc_dummy_var_93 := $memset.i8(cmdloc_dummy_var_92, $p3, 0, 18, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_93;
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p4, $sub.i8(0, 92));
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(2, 1));
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p5, 28);
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i1);
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(3, 1));
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p7, $i6);
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2066} $i8 := mega_internal_command($p0, $p2, $0.ref);
    goto SeqInstr_502, SeqInstr_503;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  SeqInstr_504:
    call {:si_unique_call 2067} {:cexpr "rval"} boogie_si_record_i32($i8);
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1352, 1));
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p11, 1);
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2068} vslice_dummy_var_187 := printk.ref.i32(.str.169, $i1);
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_502:
    assume !assertsPassed;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_108: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_108 == $sub.ref(0, 486780);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_108($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_108($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2069} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_NOT_ARG_SIGN();
    goto SeqInstr_505, SeqInstr_506;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  SeqInstr_507:
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2070} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_505:
    assume !assertsPassed;
    return;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 487812);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2071} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2072} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 2073} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_to_user_overflow: ref;

axiom __copy_to_user_overflow == $sub.ref(0, 488844);

procedure __copy_to_user_overflow();
  free requires assertsPassed;



implementation __copy_to_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_lock_megadev_mutex: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_lock_megadev_mutex == $sub.ref(0, 489876);

procedure ldv_linux_kernel_locking_mutex_mutex_lock_megadev_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.29, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_lock_megadev_mutex($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    $i1 := $M.29;
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    $i3 := $xor.i1($i2, 1);
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2074} ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i4);
    goto SeqInstr_508, SeqInstr_509;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  SeqInstr_510:
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 2075} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_megadev_mutex"} boogie_si_record_i8(1);
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_508:
    assume !assertsPassed;
    return;
}



const ldv_linux_net_register_check_return_value_probe: ref;

axiom ldv_linux_net_register_check_return_value_probe == $sub.ref(0, 490908);

procedure ldv_linux_net_register_check_return_value_probe($i0: i32);
  free requires assertsPassed;
  modifies $M.30, assertsPassed;



implementation ldv_linux_net_register_check_return_value_probe($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2076} {:cexpr "ldv_linux_net_register_check_return_value_probe:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    $i1 := $M.30;
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2078} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2077} ldv_assert_linux_net_register__wrong_return_value($i4);
    goto SeqInstr_511, SeqInstr_512;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  SeqInstr_513:
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_511:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_register_check_return_value_probe: ref;

axiom ldv_linux_usb_register_check_return_value_probe == $sub.ref(0, 491940);

procedure ldv_linux_usb_register_check_return_value_probe($i0: i32);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_linux_usb_register_check_return_value_probe($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2079} {:cexpr "ldv_linux_usb_register_check_return_value_probe:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    $i1 := $M.31;
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2081} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2080} ldv_assert_linux_usb_register__wrong_return_value($i4);
    goto SeqInstr_514, SeqInstr_515;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  SeqInstr_516:
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_514:
    assume !assertsPassed;
    return;
}



const ldv_post_probe: ref;

axiom ldv_post_probe == $sub.ref(0, 492972);

procedure ldv_post_probe($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_post_probe($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2082} {:cexpr "ldv_post_probe:arg:probe_ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2083} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 2084} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_filter_positive_int: ref;

axiom ldv_filter_positive_int == $sub.ref(0, 494004);

procedure ldv_filter_positive_int($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_filter_positive_int($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2085} {:cexpr "ldv_filter_positive_int:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    $i1 := $sle.i32($i0, 0);
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2086} ldv_assume($i2);
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_assert_linux_usb_register__wrong_return_value: ref;

axiom ldv_assert_linux_usb_register__wrong_return_value == $sub.ref(0, 495036);

procedure ldv_assert_linux_usb_register__wrong_return_value($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_register__wrong_return_value($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2087} {:cexpr "ldv_assert_linux_usb_register__wrong_return_value:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2088} __VERIFIER_error();
    goto SeqInstr_517, SeqInstr_518;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  SeqInstr_519:
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_517:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_usb_register_reset_error_counter: ref;

axiom ldv_linux_usb_register_reset_error_counter == $sub.ref(0, 496068);

procedure ldv_linux_usb_register_reset_error_counter();
  free requires assertsPassed;
  modifies $M.31;



implementation ldv_linux_usb_register_reset_error_counter()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    $M.31 := 0;
    call {:si_unique_call 2089} {:cexpr "ldv_linux_usb_register_probe_state"} boogie_si_record_i32(0);
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    return;
}



const ldv_assert_linux_net_register__wrong_return_value: ref;

axiom ldv_assert_linux_net_register__wrong_return_value == $sub.ref(0, 497100);

procedure ldv_assert_linux_net_register__wrong_return_value($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_register__wrong_return_value($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2090} {:cexpr "ldv_assert_linux_net_register__wrong_return_value:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2091} __VERIFIER_error();
    goto SeqInstr_520, SeqInstr_521;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  SeqInstr_522:
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_520:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_net_register_reset_error_counter: ref;

axiom ldv_linux_net_register_reset_error_counter == $sub.ref(0, 498132);

procedure ldv_linux_net_register_reset_error_counter();
  free requires assertsPassed;
  modifies $M.30;



implementation ldv_linux_net_register_reset_error_counter()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    $M.30 := 0;
    call {:si_unique_call 2092} {:cexpr "ldv_linux_net_register_probe_state"} boogie_si_record_i32(0);
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    return;
}



const ldv_pre_probe: ref;

axiom ldv_pre_probe == $sub.ref(0, 499164);

procedure ldv_pre_probe();
  free requires assertsPassed;



implementation ldv_pre_probe()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    return;
}



const ldv_ldv_pre_probe_134: ref;

axiom ldv_ldv_pre_probe_134 == $sub.ref(0, 500196);

procedure ldv_ldv_pre_probe_134();
  free requires assertsPassed;
  modifies $M.30, $M.31;



implementation ldv_ldv_pre_probe_134()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2093} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2094} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2095} ldv_pre_probe();
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    return;
}



const ldv_scsi_host_template_instance_probe_4_10: ref;

axiom ldv_scsi_host_template_instance_probe_4_10 == $sub.ref(0, 501228);

procedure ldv_scsi_host_template_instance_probe_4_10($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.11, $M.6, $CurrAddr, $M.19, $M.20, $M.21, $M.12, assertsPassed;



implementation ldv_scsi_host_template_instance_probe_4_10($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2096} $i2 := devirtbounce.8($p0, $p1);
    goto SeqInstr_523, SeqInstr_524;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  SeqInstr_525:
    call {:si_unique_call 2097} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_523:
    assume !assertsPassed;
    return;
}



const ldv_ldv_post_probe_135: ref;

axiom ldv_ldv_post_probe_135 == $sub.ref(0, 502260);

procedure ldv_ldv_post_probe_135($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.31, assertsPassed;



implementation ldv_ldv_post_probe_135($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2098} {:cexpr "ldv_ldv_post_probe_135:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2099} ldv_linux_net_register_check_return_value_probe($i0);
    goto SeqInstr_526, SeqInstr_527;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  SeqInstr_528:
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2100} ldv_linux_usb_register_check_return_value_probe($i0);
    goto SeqInstr_529, SeqInstr_530;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  SeqInstr_531:
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2101} $i1 := ldv_post_probe($i0);
    call {:si_unique_call 2102} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_529:
    assume !assertsPassed;
    return;

  SeqInstr_526:
    assume !assertsPassed;
    return;
}



const ldv_scsi_host_template_instance_release_4_2: ref;

axiom ldv_scsi_host_template_instance_release_4_2 == $sub.ref(0, 503292);

procedure ldv_scsi_host_template_instance_release_4_2($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.11, $M.6, $CurrAddr, $M.19, $M.20, $M.21, $M.12, assertsPassed;



implementation ldv_scsi_host_template_instance_release_4_2($p0: ref, $p1: ref)
{
  var vslice_dummy_var_188: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2103} vslice_dummy_var_188 := devirtbounce.8($p0, $p1);
    goto SeqInstr_532, SeqInstr_533;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  SeqInstr_534:
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_532:
    assume !assertsPassed;
    return;
}



const ldv_scsi_host_template_instance_callback_4_32: ref;

axiom ldv_scsi_host_template_instance_callback_4_32 == $sub.ref(0, 504324);

procedure ldv_scsi_host_template_instance_callback_4_32($p0: ref, $p1: ref, $i2: i32, $i3: i64);
  free requires assertsPassed;
  modifies $M.1, $M.11, $M.29, $M.19, $M.26, assertsPassed, $CurrAddr, $M.20, $M.21, $M.6, $M.12;



implementation ldv_scsi_host_template_instance_callback_4_32($p0: ref, $p1: ref, $i2: i32, $i3: i64)
{
  var vslice_dummy_var_189: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2104} {:cexpr "ldv_scsi_host_template_instance_callback_4_32:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 2105} {:cexpr "ldv_scsi_host_template_instance_callback_4_32:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2106} vslice_dummy_var_189 := megadev_unlocked_ioctl($p1, $i2, $i3);
    goto SeqInstr_535, SeqInstr_536;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  SeqInstr_537:
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_535:
    assume !assertsPassed;
    return;
}



const ldv_scsi_host_template_instance_callback_4_29: ref;

axiom ldv_scsi_host_template_instance_callback_4_29 == $sub.ref(0, 505356);

procedure ldv_scsi_host_template_instance_callback_4_29($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;



implementation ldv_scsi_host_template_instance_callback_4_29($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref)
{
  var vslice_dummy_var_190: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2107} {:cexpr "ldv_scsi_host_template_instance_callback_4_29:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2108} vslice_dummy_var_190 := seq_read($p1, $p2, $i3, $p4);
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    return;
}



const ldv_scsi_host_template_instance_callback_4_28: ref;

axiom ldv_scsi_host_template_instance_callback_4_28 == $sub.ref(0, 506388);

procedure ldv_scsi_host_template_instance_callback_4_28($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.23, $M.1, $M.19, $M.24, $M.11, assertsPassed, $CurrAddr, $M.6, $M.12, $M.20, $M.21;



implementation ldv_scsi_host_template_instance_callback_4_28($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_191: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2109} vslice_dummy_var_191 := megaraid_queue($p1, $p2);
    goto SeqInstr_538, SeqInstr_539;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  SeqInstr_540:
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_538:
    assume !assertsPassed;
    return;
}



const ldv_scsi_host_template_instance_callback_4_25: ref;

axiom ldv_scsi_host_template_instance_callback_4_25 == $sub.ref(0, 507420);

procedure ldv_scsi_host_template_instance_callback_4_25($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_scsi_host_template_instance_callback_4_25($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_192: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2110} vslice_dummy_var_192 := single_release($p1, $p2);
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    return;
}



const ldv_scsi_host_template_instance_callback_4_22: ref;

axiom ldv_scsi_host_template_instance_callback_4_22 == $sub.ref(0, 508452);

procedure ldv_scsi_host_template_instance_callback_4_22($p0: ref, $p1: ref, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation ldv_scsi_host_template_instance_callback_4_22($p0: ref, $p1: ref, $i2: i64, $i3: i32)
{
  var vslice_dummy_var_193: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2111} {:cexpr "ldv_scsi_host_template_instance_callback_4_22:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 2112} {:cexpr "ldv_scsi_host_template_instance_callback_4_22:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2113} vslice_dummy_var_193 := noop_llseek($p1, $i2, $i3);
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    return;
}



const ldv_scsi_host_template_instance_callback_4_21: ref;

axiom ldv_scsi_host_template_instance_callback_4_21 == $sub.ref(0, 509484);

procedure ldv_scsi_host_template_instance_callback_4_21($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_scsi_host_template_instance_callback_4_21($p0: ref, $p1: ref)
{
  var vslice_dummy_var_194: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2114} vslice_dummy_var_194 := megaraid_info($p1);
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    return;
}



const ldv_scsi_host_template_instance_callback_4_20: ref;

axiom ldv_scsi_host_template_instance_callback_4_20 == $sub.ref(0, 510516);

procedure ldv_scsi_host_template_instance_callback_4_20($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.11, $M.6, $CurrAddr, $M.19, $M.20, $M.21, $M.12, assertsPassed;



implementation ldv_scsi_host_template_instance_callback_4_20($p0: ref, $p1: ref)
{
  var vslice_dummy_var_195: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2115} vslice_dummy_var_195 := megaraid_reset($p1);
    goto SeqInstr_541, SeqInstr_542;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  SeqInstr_543:
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_541:
    assume !assertsPassed;
    return;
}



const ldv_scsi_host_template_instance_callback_4_19: ref;

axiom ldv_scsi_host_template_instance_callback_4_19 == $sub.ref(0, 511548);

procedure ldv_scsi_host_template_instance_callback_4_19($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.11, $M.6, $CurrAddr, $M.19, $M.20, $M.21, $M.12, assertsPassed;



implementation ldv_scsi_host_template_instance_callback_4_19($p0: ref, $p1: ref)
{
  var vslice_dummy_var_196: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2116} vslice_dummy_var_196 := megaraid_reset($p1);
    goto SeqInstr_544, SeqInstr_545;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  SeqInstr_546:
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_544:
    assume !assertsPassed;
    return;
}



const ldv_scsi_host_template_instance_callback_4_18: ref;

axiom ldv_scsi_host_template_instance_callback_4_18 == $sub.ref(0, 512580);

procedure ldv_scsi_host_template_instance_callback_4_18($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.11, $M.6, $CurrAddr, $M.19, $M.20, $M.21, $M.12, assertsPassed;



implementation ldv_scsi_host_template_instance_callback_4_18($p0: ref, $p1: ref)
{
  var vslice_dummy_var_197: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2117} vslice_dummy_var_197 := megaraid_reset($p1);
    goto SeqInstr_547, SeqInstr_548;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  SeqInstr_549:
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_547:
    assume !assertsPassed;
    return;
}



const ldv_scsi_host_template_instance_callback_4_17: ref;

axiom ldv_scsi_host_template_instance_callback_4_17 == $sub.ref(0, 513612);

procedure ldv_scsi_host_template_instance_callback_4_17($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.11, $M.6, $CurrAddr, $M.12, assertsPassed, $M.19, $M.20, $M.21;



implementation ldv_scsi_host_template_instance_callback_4_17($p0: ref, $p1: ref)
{
  var vslice_dummy_var_198: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2118} vslice_dummy_var_198 := megaraid_abort($p1);
    goto SeqInstr_550, SeqInstr_551;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  SeqInstr_552:
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_550:
    assume !assertsPassed;
    return;
}



const ldv_scsi_host_template_instance_callback_4_4: ref;

axiom ldv_scsi_host_template_instance_callback_4_4 == $sub.ref(0, 514644);

procedure ldv_scsi_host_template_instance_callback_4_4($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_scsi_host_template_instance_callback_4_4($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref)
{
  var vslice_dummy_var_199: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2119} {:cexpr "ldv_scsi_host_template_instance_callback_4_4:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2120} vslice_dummy_var_199 := megaraid_biosparam($p1, $p2, $i3, $p4);
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    return;
}



const noop_llseek: ref;

axiom noop_llseek == $sub.ref(0, 515676);

procedure noop_llseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation noop_llseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2121} {:cexpr "noop_llseek:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 2122} {:cexpr "noop_llseek:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2123} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 2124} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 516708);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 2125} $r := $malloc($i0);
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 517740);

procedure ldv_is_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 4294967295);
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const scsi_add_host_with_dma: ref;

axiom scsi_add_host_with_dma == $sub.ref(0, 518772);

procedure scsi_add_host_with_dma($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_add_host_with_dma($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2126} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2127} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const proc_mkdir_data: ref;

axiom proc_mkdir_data == $sub.ref(0, 519804);

procedure proc_mkdir_data($p0: ref, $i1: i16, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation proc_mkdir_data($p0: ref, $i1: i16, $p2: ref, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2128} {:cexpr "proc_mkdir_data:arg:arg1"} boogie_si_record_i16($i1);
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2129} $p4 := external_alloc();
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const proc_create_data: ref;

axiom proc_create_data == $sub.ref(0, 520836);

procedure proc_create_data($p0: ref, $i1: i16, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation proc_create_data($p0: ref, $i1: i16, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2130} {:cexpr "proc_create_data:arg:arg1"} boogie_si_record_i16($i1);
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2131} $p5 := external_alloc();
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 521868);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(512, 1));
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, $p1);
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_kernel_sched_completion_init_completion_int_waitq_of_NOT_ARG_SIGN: ref;

axiom ldv_linux_kernel_sched_completion_init_completion_int_waitq_of_NOT_ARG_SIGN == $sub.ref(0, 522900);

procedure ldv_linux_kernel_sched_completion_init_completion_int_waitq_of_NOT_ARG_SIGN();
  free requires assertsPassed;
  modifies $M.21;



implementation ldv_linux_kernel_sched_completion_init_completion_int_waitq_of_NOT_ARG_SIGN()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 2132} {:cexpr "ldv_linux_kernel_sched_completion_completion_int_waitq_of_NOT_ARG_SIGN"} boogie_si_record_i32(1);
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    return;
}



const dma_set_mask: ref;

axiom dma_set_mask == $sub.ref(0, 523932);

procedure dma_set_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dma_set_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2133} {:cexpr "dma_set_mask:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2134} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2135} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mega_8_to_40ld: ref;

axiom mega_8_to_40ld == $sub.ref(0, 524964);

procedure mega_8_to_40ld($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation mega_8_to_40ld($p0: ref, $p1: ref, $p2: ref)
{
  var $p4: ref;
  var $i5: i8;
  var $p6: ref;
  var $p8: ref;
  var $i9: i8;
  var $p10: ref;
  var $p12: ref;
  var $i13: i8;
  var $p14: ref;
  var $p17: ref;
  var $i18: i8;
  var $p20: ref;
  var $p23: ref;
  var $i24: i8;
  var $p26: ref;
  var $p28: ref;
  var $i29: i8;
  var $p30: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i16;
  var $p35: ref;
  var $p37: ref;
  var $i38: i8;
  var $p39: ref;
  var $p42: ref;
  var $i43: i32;
  var $p45: ref;
  var $p48: ref;
  var $i49: i8;
  var $p51: ref;
  var $p54: ref;
  var $i55: i8;
  var $p57: ref;
  var $p60: ref;
  var $i61: i8;
  var $p63: ref;
  var $p66: ref;
  var $i67: i8;
  var $p69: ref;
  var $p72: ref;
  var $i73: i8;
  var $p75: ref;
  var $p78: ref;
  var $i79: i8;
  var $p81: ref;
  var $p84: ref;
  var $i85: i8;
  var $p87: ref;
  var $p90: ref;
  var $i91: i8;
  var $p93: ref;
  var $p96: ref;
  var $i97: i8;
  var $p99: ref;
  var $p102: ref;
  var $i103: i8;
  var $p105: ref;
  var $p108: ref;
  var $i109: i8;
  var $p111: ref;
  var $p114: ref;
  var $i115: i8;
  var $p117: ref;
  var $p120: ref;
  var $i121: i8;
  var $p123: ref;
  var $p126: ref;
  var $i127: i8;
  var $p129: ref;
  var $p132: ref;
  var $i133: i8;
  var $p135: ref;
  var $p138: ref;
  var $i139: i8;
  var $p141: ref;
  var $p144: ref;
  var $i145: i8;
  var $p147: ref;
  var $p150: ref;
  var $i151: i8;
  var $p153: ref;
  var $p156: ref;
  var $i157: i8;
  var $p159: ref;
  var $p162: ref;
  var $i163: i8;
  var $p165: ref;
  var $p168: ref;
  var $i169: i8;
  var $p171: ref;
  var $p174: ref;
  var $i175: i8;
  var $p177: ref;
  var $p180: ref;
  var $i181: i8;
  var $p183: ref;
  var $p186: ref;
  var $i187: i8;
  var $p189: ref;
  var $p192: ref;
  var $i193: i8;
  var $p195: ref;
  var $p198: ref;
  var $i199: i8;
  var $p201: ref;
  var $p204: ref;
  var $i205: i8;
  var $p207: ref;
  var $p210: ref;
  var $i211: i8;
  var $p213: ref;
  var $p216: ref;
  var $i217: i8;
  var $p219: ref;
  var $p222: ref;
  var $i223: i8;
  var $p225: ref;
  var $p228: ref;
  var $i229: i8;
  var $p231: ref;
  var $p234: ref;
  var $i235: i8;
  var $p237: ref;
  var $p240: ref;
  var $i241: i8;
  var $p243: ref;
  var $p246: ref;
  var $i247: i8;
  var $p249: ref;
  var $p252: ref;
  var $i253: i8;
  var $p255: ref;
  var $p258: ref;
  var $i259: i8;
  var $p261: ref;
  var $p264: ref;
  var $i265: i8;
  var $p267: ref;
  var $p270: ref;
  var $i271: i8;
  var $p273: ref;
  var $p276: ref;
  var $i277: i8;
  var $p279: ref;
  var $p282: ref;
  var $i283: i8;
  var $p285: ref;
  var $p288: ref;
  var $i289: i8;
  var $p291: ref;
  var $p294: ref;
  var $i295: i8;
  var $p297: ref;
  var $p300: ref;
  var $i301: i8;
  var $p303: ref;
  var $p306: ref;
  var $i307: i8;
  var $p309: ref;
  var $p312: ref;
  var $i313: i8;
  var $p315: ref;
  var $p318: ref;
  var $i319: i8;
  var $p321: ref;
  var $p324: ref;
  var $i325: i8;
  var $p327: ref;
  var $p330: ref;
  var $i331: i8;
  var $p333: ref;
  var $p336: ref;
  var $i337: i8;
  var $p339: ref;
  var $p342: ref;
  var $i343: i8;
  var $p345: ref;
  var $p348: ref;
  var $i349: i8;
  var $p351: ref;
  var $p354: ref;
  var $i355: i8;
  var $p357: ref;
  var $p360: ref;
  var $i361: i8;
  var $p363: ref;
  var $p366: ref;
  var $i367: i8;
  var $p369: ref;
  var $p372: ref;
  var $i373: i8;
  var $p375: ref;
  var $p378: ref;
  var $i379: i8;
  var $p381: ref;
  var $p384: ref;
  var $i385: i8;
  var $p387: ref;
  var $p390: ref;
  var $i391: i8;
  var $p393: ref;
  var $p396: ref;
  var $i397: i8;
  var $p399: ref;
  var $p402: ref;
  var $i403: i8;
  var $p405: ref;
  var $p408: ref;
  var $i409: i8;
  var $p411: ref;
  var $p414: ref;
  var $i415: i8;
  var $p417: ref;
  var $p420: ref;
  var $i421: i8;
  var $p423: ref;
  var $p426: ref;
  var $i427: i8;
  var $p429: ref;
  var $p432: ref;
  var $i433: i8;
  var $p435: ref;
  var $p438: ref;
  var $i439: i8;
  var $p441: ref;
  var $p444: ref;
  var $i445: i8;
  var $p447: ref;
  var $p450: ref;
  var $i451: i8;
  var $p453: ref;
  var $p456: ref;
  var $i457: i8;
  var $p459: ref;
  var $p462: ref;
  var $i463: i8;
  var $p465: ref;
  var $p468: ref;
  var $i469: i8;
  var $p471: ref;
  var $p474: ref;
  var $i475: i8;
  var $p477: ref;
  var $p480: ref;
  var $i481: i8;
  var $p483: ref;
  var $p486: ref;
  var $i487: i8;
  var $p489: ref;
  var $p492: ref;
  var $i493: i8;
  var $p495: ref;
  var $p498: ref;
  var $i499: i8;
  var $p501: ref;
  var $p504: ref;
  var $i505: i8;
  var $p507: ref;
  var $p510: ref;
  var $i511: i32;
  var $p513: ref;
  var $p516: ref;
  var $i517: i8;
  var $p519: ref;
  var $p522: ref;
  var $i523: i8;
  var $p525: ref;
  var $p528: ref;
  var $i529: i32;
  var $p531: ref;
  var $p534: ref;
  var $i535: i8;
  var $p537: ref;
  var $p540: ref;
  var $i541: i8;
  var $p543: ref;
  var $p546: ref;
  var $i547: i32;
  var $p549: ref;
  var $p552: ref;
  var $i553: i8;
  var $p555: ref;
  var $p558: ref;
  var $i559: i8;
  var $p561: ref;
  var $p564: ref;
  var $i565: i32;
  var $p567: ref;
  var $p570: ref;
  var $i571: i8;
  var $p573: ref;
  var $p576: ref;
  var $i577: i8;
  var $p579: ref;
  var $p582: ref;
  var $i583: i32;
  var $p585: ref;
  var $p588: ref;
  var $i589: i8;
  var $p591: ref;
  var $p594: ref;
  var $i595: i8;
  var $p597: ref;
  var $p600: ref;
  var $i601: i32;
  var $p603: ref;
  var $p606: ref;
  var $i607: i8;
  var $p609: ref;
  var $p612: ref;
  var $i613: i8;
  var $p615: ref;
  var $p618: ref;
  var $i619: i32;
  var $p621: ref;
  var $p624: ref;
  var $i625: i8;
  var $p627: ref;
  var $p630: ref;
  var $i631: i8;
  var $p633: ref;
  var $p636: ref;
  var $i637: i8;
  var $p639: ref;
  var $p642: ref;
  var $i643: i8;
  var $p645: ref;
  var $p648: ref;
  var $i649: i8;
  var $p651: ref;
  var $p654: ref;
  var $i655: i8;
  var $p657: ref;
  var $p660: ref;
  var $i661: i8;
  var $p663: ref;
  var $p666: ref;
  var $i667: i8;
  var $p669: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.13, $p4);
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 1024)), $mul.ref(120, 1));
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p6, $i5);
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.13, $p8);
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(132, 1));
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p10, $i9);
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.13, $p12);
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 1024)), $mul.ref(121, 1));
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p14, $i13);
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.13, $p17);
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1024)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p20, $i18);
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(13, 1)), $mul.ref(0, 1));
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.13, $p23);
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1024)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p26, $i24);
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p636 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(1, 1));
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    $i637 := $load.i8($M.13, $p636);
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    $p639 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1024)), $mul.ref(8, 1)), $mul.ref(1, 1));
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p639, $i637);
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    $p642 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(13, 1)), $mul.ref(1, 1));
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    $i643 := $load.i8($M.13, $p642);
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $p645 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1024)), $mul.ref(24, 1)), $mul.ref(1, 1));
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p645, $i643);
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $p648 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(2, 1));
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    $i649 := $load.i8($M.13, $p648);
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    $p651 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1024)), $mul.ref(8, 1)), $mul.ref(2, 1));
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p651, $i649);
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    $p654 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(13, 1)), $mul.ref(2, 1));
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    $i655 := $load.i8($M.13, $p654);
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    $p657 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1024)), $mul.ref(24, 1)), $mul.ref(2, 1));
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p657, $i655);
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $p660 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(3, 1));
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    $i661 := $load.i8($M.13, $p660);
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    $p663 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1024)), $mul.ref(8, 1)), $mul.ref(3, 1));
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p663, $i661);
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    $p666 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(13, 1)), $mul.ref(3, 1));
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    $i667 := $load.i8($M.13, $p666);
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    $p669 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1024)), $mul.ref(24, 1)), $mul.ref(3, 1));
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p669, $i667);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.13, $p28);
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(133, 1));
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p30, $i29);
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(11, 1));
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.13, $p32);
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i16($i33);
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 1024)), $mul.ref(128, 1));
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p35, $i34);
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.13, $p37);
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(137, 1));
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p39, $i38);
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.13, $p42);
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(156, 1)), $mul.ref(0, 4));
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p45, $i43);
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(24, 1)), $mul.ref(36, 1)), $mul.ref(0, 1));
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.13, $p48);
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(316, 1)), $mul.ref(0, 1));
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p51, $i49);
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(24, 1)), $mul.ref(44, 1)), $mul.ref(0, 1));
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.13, $p54);
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(356, 1)), $mul.ref(0, 1));
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p57, $i55);
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p510 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(1, 4));
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    $i511 := $load.i32($M.13, $p510);
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    $p513 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(156, 1)), $mul.ref(1, 4));
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p513, $i511);
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    $p516 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(24, 1)), $mul.ref(36, 1)), $mul.ref(1, 1));
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    $i517 := $load.i8($M.13, $p516);
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    $p519 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(316, 1)), $mul.ref(1, 1));
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p519, $i517);
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $p522 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(24, 1)), $mul.ref(44, 1)), $mul.ref(1, 1));
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    $i523 := $load.i8($M.13, $p522);
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    $p525 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(356, 1)), $mul.ref(1, 1));
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p525, $i523);
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p528 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(2, 4));
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    $i529 := $load.i32($M.13, $p528);
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    $p531 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(156, 1)), $mul.ref(2, 4));
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p531, $i529);
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    $p534 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(24, 1)), $mul.ref(36, 1)), $mul.ref(2, 1));
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    $i535 := $load.i8($M.13, $p534);
    goto corral_source_split_8640;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    $p537 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(316, 1)), $mul.ref(2, 1));
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p537, $i535);
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    $p540 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(24, 1)), $mul.ref(44, 1)), $mul.ref(2, 1));
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    $i541 := $load.i8($M.13, $p540);
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    $p543 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(356, 1)), $mul.ref(2, 1));
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p543, $i541);
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p546 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(3, 4));
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    $i547 := $load.i32($M.13, $p546);
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    $p549 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(156, 1)), $mul.ref(3, 4));
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p549, $i547);
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    $p552 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(24, 1)), $mul.ref(36, 1)), $mul.ref(3, 1));
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    $i553 := $load.i8($M.13, $p552);
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $p555 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(316, 1)), $mul.ref(3, 1));
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p555, $i553);
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    $p558 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(24, 1)), $mul.ref(44, 1)), $mul.ref(3, 1));
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    $i559 := $load.i8($M.13, $p558);
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    $p561 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(356, 1)), $mul.ref(3, 1));
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p561, $i559);
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p564 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(4, 4));
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    $i565 := $load.i32($M.13, $p564);
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $p567 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(156, 1)), $mul.ref(4, 4));
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p567, $i565);
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    $p570 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(24, 1)), $mul.ref(36, 1)), $mul.ref(4, 1));
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    $i571 := $load.i8($M.13, $p570);
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    $p573 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(316, 1)), $mul.ref(4, 1));
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p573, $i571);
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    $p576 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(24, 1)), $mul.ref(44, 1)), $mul.ref(4, 1));
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    $i577 := $load.i8($M.13, $p576);
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    $p579 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(356, 1)), $mul.ref(4, 1));
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p579, $i577);
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p582 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(5, 4));
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    $i583 := $load.i32($M.13, $p582);
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    $p585 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(156, 1)), $mul.ref(5, 4));
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p585, $i583);
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    $p588 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(24, 1)), $mul.ref(36, 1)), $mul.ref(5, 1));
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    $i589 := $load.i8($M.13, $p588);
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    $p591 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(316, 1)), $mul.ref(5, 1));
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p591, $i589);
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    $p594 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(24, 1)), $mul.ref(44, 1)), $mul.ref(5, 1));
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    $i595 := $load.i8($M.13, $p594);
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    $p597 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(356, 1)), $mul.ref(5, 1));
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p597, $i595);
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p600 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(6, 4));
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    $i601 := $load.i32($M.13, $p600);
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    $p603 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(156, 1)), $mul.ref(6, 4));
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p603, $i601);
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    $p606 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(24, 1)), $mul.ref(36, 1)), $mul.ref(6, 1));
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    $i607 := $load.i8($M.13, $p606);
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    $p609 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(316, 1)), $mul.ref(6, 1));
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p609, $i607);
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $p612 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(24, 1)), $mul.ref(44, 1)), $mul.ref(6, 1));
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    $i613 := $load.i8($M.13, $p612);
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $p615 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(356, 1)), $mul.ref(6, 1));
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p615, $i613);
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p618 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(7, 4));
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    $i619 := $load.i32($M.13, $p618);
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    $p621 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(156, 1)), $mul.ref(7, 4));
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p621, $i619);
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    $p624 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(24, 1)), $mul.ref(36, 1)), $mul.ref(7, 1));
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    $i625 := $load.i8($M.13, $p624);
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    $p627 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(316, 1)), $mul.ref(7, 1));
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p627, $i625);
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    $p630 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(24, 1)), $mul.ref(44, 1)), $mul.ref(7, 1));
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    $i631 := $load.i8($M.13, $p630);
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    $p633 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(356, 1)), $mul.ref(7, 1));
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p633, $i631);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.13, $p60);
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(0, 1));
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p63, $i61);
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.13, $p66);
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(1, 1));
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p69, $i67);
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.13, $p72);
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(2, 1));
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p75, $i73);
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.13, $p78);
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(3, 1));
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p81, $i79);
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.13, $p84);
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(4, 1));
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p87, $i85);
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(5, 1));
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.13, $p90);
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(5, 1));
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p93, $i91);
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.13, $p96);
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(6, 1));
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p99, $i97);
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(7, 1));
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    $i103 := $load.i8($M.13, $p102);
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(7, 1));
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p105, $i103);
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.13, $p108);
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(8, 1));
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p111, $i109);
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(9, 1));
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    $i115 := $load.i8($M.13, $p114);
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(9, 1));
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p117, $i115);
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(10, 1));
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    $i121 := $load.i8($M.13, $p120);
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(10, 1));
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p123, $i121);
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(11, 1));
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    $i127 := $load.i8($M.13, $p126);
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(11, 1));
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p129, $i127);
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    $i133 := $load.i8($M.13, $p132);
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(12, 1));
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p135, $i133);
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(13, 1));
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    $i139 := $load.i8($M.13, $p138);
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(13, 1));
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p141, $i139);
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(14, 1));
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    $i145 := $load.i8($M.13, $p144);
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(14, 1));
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p147, $i145);
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(15, 1));
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    $i151 := $load.i8($M.13, $p150);
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(15, 1));
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p153, $i151);
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    $i157 := $load.i8($M.13, $p156);
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(16, 1));
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p159, $i157);
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(17, 1));
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    $i163 := $load.i8($M.13, $p162);
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(17, 1));
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p165, $i163);
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(18, 1));
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    $i169 := $load.i8($M.13, $p168);
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(18, 1));
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p171, $i169);
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(19, 1));
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    $i175 := $load.i8($M.13, $p174);
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(19, 1));
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p177, $i175);
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(20, 1));
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    $i181 := $load.i8($M.13, $p180);
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(20, 1));
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p183, $i181);
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(21, 1));
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    $i187 := $load.i8($M.13, $p186);
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(21, 1));
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p189, $i187);
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(22, 1));
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    $i193 := $load.i8($M.13, $p192);
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(22, 1));
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p195, $i193);
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(23, 1));
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    $i199 := $load.i8($M.13, $p198);
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(23, 1));
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p201, $i199);
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    $i205 := $load.i8($M.13, $p204);
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(24, 1));
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p207, $i205);
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(25, 1));
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $i211 := $load.i8($M.13, $p210);
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(25, 1));
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p213, $i211);
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(26, 1));
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    $i217 := $load.i8($M.13, $p216);
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(26, 1));
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p219, $i217);
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(27, 1));
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    $i223 := $load.i8($M.13, $p222);
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(27, 1));
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p225, $i223);
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(28, 1));
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    $i229 := $load.i8($M.13, $p228);
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(28, 1));
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p231, $i229);
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(29, 1));
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    $i235 := $load.i8($M.13, $p234);
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(29, 1));
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p237, $i235);
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(30, 1));
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    $i241 := $load.i8($M.13, $p240);
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(30, 1));
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p243, $i241);
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(31, 1));
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    $i247 := $load.i8($M.13, $p246);
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(31, 1));
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p249, $i247);
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    $i253 := $load.i8($M.13, $p252);
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(32, 1));
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p255, $i253);
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(33, 1));
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $i259 := $load.i8($M.13, $p258);
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(33, 1));
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p261, $i259);
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(34, 1));
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    $i265 := $load.i8($M.13, $p264);
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(34, 1));
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p267, $i265);
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(35, 1));
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $i271 := $load.i8($M.13, $p270);
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(35, 1));
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p273, $i271);
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(36, 1));
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    $i277 := $load.i8($M.13, $p276);
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(36, 1));
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p279, $i277);
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(37, 1));
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    $i283 := $load.i8($M.13, $p282);
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(37, 1));
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p285, $i283);
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(38, 1));
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    $i289 := $load.i8($M.13, $p288);
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(38, 1));
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p291, $i289);
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(39, 1));
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    $i295 := $load.i8($M.13, $p294);
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(39, 1));
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p297, $i295);
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    $i301 := $load.i8($M.13, $p300);
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(40, 1));
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p303, $i301);
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(41, 1));
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    $i307 := $load.i8($M.13, $p306);
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(41, 1));
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p309, $i307);
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(42, 1));
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    $i313 := $load.i8($M.13, $p312);
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(42, 1));
    goto corral_source_split_8473;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p315, $i313);
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(43, 1));
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    $i319 := $load.i8($M.13, $p318);
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(43, 1));
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p321, $i319);
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(44, 1));
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    $i325 := $load.i8($M.13, $p324);
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(44, 1));
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p327, $i325);
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(45, 1));
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    $i331 := $load.i8($M.13, $p330);
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(45, 1));
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p333, $i331);
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(46, 1));
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    $i337 := $load.i8($M.13, $p336);
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(46, 1));
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p339, $i337);
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(47, 1));
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    $i343 := $load.i8($M.13, $p342);
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(47, 1));
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p345, $i343);
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    $i349 := $load.i8($M.13, $p348);
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(48, 1));
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p351, $i349);
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(49, 1));
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    $i355 := $load.i8($M.13, $p354);
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(49, 1));
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p357, $i355);
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(50, 1));
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    $i361 := $load.i8($M.13, $p360);
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(50, 1));
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p363, $i361);
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(51, 1));
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    $i367 := $load.i8($M.13, $p366);
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(51, 1));
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p369, $i367);
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(52, 1));
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    $i373 := $load.i8($M.13, $p372);
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(52, 1));
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p375, $i373);
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p378 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(53, 1));
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    $i379 := $load.i8($M.13, $p378);
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(53, 1));
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p381, $i379);
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(54, 1));
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    $i385 := $load.i8($M.13, $p384);
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(54, 1));
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p387, $i385);
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(55, 1));
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    $i391 := $load.i8($M.13, $p390);
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(55, 1));
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p393, $i391);
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    $i397 := $load.i8($M.13, $p396);
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(56, 1));
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p399, $i397);
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p402 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(57, 1));
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    $i403 := $load.i8($M.13, $p402);
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(57, 1));
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p405, $i403);
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p408 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(58, 1));
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    $i409 := $load.i8($M.13, $p408);
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(58, 1));
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p411, $i409);
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p414 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(59, 1));
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    $i415 := $load.i8($M.13, $p414);
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(59, 1));
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p417, $i415);
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p420 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(60, 1));
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $i421 := $load.i8($M.13, $p420);
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    $p423 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(60, 1));
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p423, $i421);
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(61, 1));
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    $i427 := $load.i8($M.13, $p426);
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    $p429 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(61, 1));
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p429, $i427);
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(62, 1));
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    $i433 := $load.i8($M.13, $p432);
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(62, 1));
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p435, $i433);
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(63, 1));
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    $i439 := $load.i8($M.13, $p438);
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(63, 1));
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p441, $i439);
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p444 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(64, 1));
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    $i445 := $load.i8($M.13, $p444);
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(64, 1));
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p447, $i445);
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p450 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(65, 1));
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    $i451 := $load.i8($M.13, $p450);
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    $p453 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(65, 1));
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p453, $i451);
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p456 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(66, 1));
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    $i457 := $load.i8($M.13, $p456);
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    $p459 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(66, 1));
    goto corral_source_split_8593;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p459, $i457);
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p462 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(67, 1));
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    $i463 := $load.i8($M.13, $p462);
    goto corral_source_split_8597;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    $p465 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(67, 1));
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p465, $i463);
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p468 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(68, 1));
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $i469 := $load.i8($M.13, $p468);
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(68, 1));
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p471, $i469);
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p474 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(69, 1));
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    $i475 := $load.i8($M.13, $p474);
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    $p477 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(69, 1));
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p477, $i475);
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p480 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(70, 1));
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    $i481 := $load.i8($M.13, $p480);
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    $p483 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(70, 1));
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p483, $i481);
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p486 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(71, 1));
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    $i487 := $load.i8($M.13, $p486);
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    $p489 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(71, 1));
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p489, $i487);
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p492 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    $i493 := $load.i8($M.13, $p492);
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    $p495 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(72, 1));
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p495, $i493);
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p498 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(73, 1));
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    $i499 := $load.i8($M.13, $p498);
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    $p501 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(73, 1));
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p501, $i499);
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p504 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(76, 1)), $mul.ref(0, 1)), $mul.ref(74, 1));
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    $i505 := $load.i8($M.13, $p504);
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    $p507 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1028)), $mul.ref(396, 1)), $mul.ref(74, 1));
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p507, $i505);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;
}



const pci_map_single: ref;

axiom pci_map_single == $sub.ref(0, 525996);

procedure pci_map_single($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i64);
  free requires assertsPassed;



implementation pci_map_single($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i64)
{
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2136} {:cexpr "pci_map_single:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 2137} {:cexpr "pci_map_single:arg:direction"} boogie_si_record_i32($i3);
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2138} $i8 := dma_map_single_attrs($p7, $p1, $i2, $i3, $0.ref);
    call {:si_unique_call 2139} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const pci_unmap_single: ref;

axiom pci_unmap_single == $sub.ref(0, 527028);

procedure pci_unmap_single($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation pci_unmap_single($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2140} {:cexpr "pci_unmap_single:arg:dma_addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 2141} {:cexpr "pci_unmap_single:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 2142} {:cexpr "pci_unmap_single:arg:direction"} boogie_si_record_i32($i3);
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2143} dma_unmap_single_attrs($p7, $i1, $i2, $i3, $0.ref);
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const mega_get_max_sgl: ref;

axiom mega_get_max_sgl == $sub.ref(0, 528060);

procedure mega_get_max_sgl($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.11, $M.6, $M.19, $M.20, $M.21, $M.12, assertsPassed;



implementation mega_get_max_sgl($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var cmdloc_dummy_var_94: [ref]i8;
  var cmdloc_dummy_var_95: [ref]i8;
  var cmdloc_dummy_var_96: [ref]i8;
  var cmdloc_dummy_var_97: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2144} $p1 := $alloc($mul.ref(15, $zext.i32.i64(1)));
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_94 := $M.1;
    call {:si_unique_call 2145} cmdloc_dummy_var_95 := $memset.i8(cmdloc_dummy_var_94, $p3, 0, 15, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_95;
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(128, 1));
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_96 := $M.1;
    call {:si_unique_call 2146} cmdloc_dummy_var_97 := $memset.i8(cmdloc_dummy_var_96, $p5, 0, 2048, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_97;
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(136, 1));
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.1, $p6);
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p10, $i8);
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 15)), $mul.ref(0, 1));
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p11, $sub.i8(0, 92));
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 15)), $mul.ref(2, 1));
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p12, 1);
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p1);
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2147} $i14 := issue_scb_block($p0, $p13);
    goto SeqInstr_553, SeqInstr_554;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  SeqInstr_555:
    call {:si_unique_call 2148} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(128, 1));
    goto corral_source_split_8778;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.1, $p18);
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1448, 1));
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p20, $i19);
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1448, 1));
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.1, $p21);
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    $i24 := $ugt.i32($i23, 64);
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1448, 1));
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p25, 64);
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1448, 1));
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p16, 26);
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_553:
    assume !assertsPassed;
    return;
}



const mega_support_ext_cdb: ref;

axiom mega_support_ext_cdb == $sub.ref(0, 529092);

procedure mega_support_ext_cdb($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.11, $M.6, $M.19, $M.20, $M.21, $M.12, assertsPassed;



implementation mega_support_ext_cdb($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var cmdloc_dummy_var_98: [ref]i8;
  var cmdloc_dummy_var_99: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2149} $p1 := $alloc($mul.ref(15, $zext.i32.i64(1)));
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_98 := $M.1;
    call {:si_unique_call 2150} cmdloc_dummy_var_99 := $memset.i8(cmdloc_dummy_var_98, $p4, 0, 15, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_99;
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 15)), $mul.ref(0, 1));
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p5, $sub.i8(0, 92));
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 15)), $mul.ref(2, 1));
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p6, 22);
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2151} $i8 := issue_scb_block($p0, $p7);
    goto SeqInstr_556, SeqInstr_557;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  SeqInstr_558:
    call {:si_unique_call 2152} {:cexpr "rval"} boogie_si_record_i32($i8);
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_556:
    assume !assertsPassed;
    return;
}



const dma_unmap_single_attrs: ref;

axiom dma_unmap_single_attrs == $sub.ref(0, 530124);

procedure dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref);
  free requires assertsPassed;



implementation dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2153} {:cexpr "dma_unmap_single_attrs:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 2154} {:cexpr "dma_unmap_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 2155} {:cexpr "dma_unmap_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2156} $p5 := get_dma_ops($p0);
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2157} $i6 := valid_dma_direction($i3);
    call {:si_unique_call 2158} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2159} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 2160} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_8812;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2163} debug_dma_unmap_page($p0, $i1, $i2, $i3, 1);
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    call {:si_unique_call 2162} devirtbounce.15($p17, $p0, $i1, $i2, $i3, $p4);
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    call {:si_unique_call 2161} devirtbounce.6(0, .str.129, 36, 12);
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    assume false;
    return;
}



const valid_dma_direction: ref;

axiom valid_dma_direction == $sub.ref(0, 531156);

procedure valid_dma_direction($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation valid_dma_direction($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2164} {:cexpr "valid_dma_direction:arg:dma_direction"} boogie_si_record_i32($i0);
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    $i1 := $ule.i32($i0, 2);
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const debug_dma_unmap_page: ref;

axiom debug_dma_unmap_page == $sub.ref(0, 532188);

procedure debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1);
  free requires assertsPassed;



implementation debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2165} {:cexpr "debug_dma_unmap_page:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 2166} {:cexpr "debug_dma_unmap_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 2167} {:cexpr "debug_dma_unmap_page:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 2168} {:cexpr "debug_dma_unmap_page:arg:arg4"} boogie_si_record_i1($i4);
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    return;
}



const dma_map_single_attrs: ref;

axiom dma_map_single_attrs == $sub.ref(0, 533220);

procedure dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64);
  free requires assertsPassed;



implementation dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2169} {:cexpr "dma_map_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 2170} {:cexpr "dma_map_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2171} $p5 := get_dma_ops($p0);
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i2);
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2172} kmemcheck_mark_initialized($p1, $i6);
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2173} $i7 := valid_dma_direction($i3);
    call {:si_unique_call 2174} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2175} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 2176} {:cexpr "tmp___1"} boogie_si_record_i64($i11);
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p1);
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2178} $i14 := __phys_addr($i13);
    call {:si_unique_call 2179} {:cexpr "tmp___2"} boogie_si_record_i64($i14);
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_8849;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    $i17 := $lshr.i64($i14, 12);
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i17, 64));
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p1);
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 4095);
    call {:si_unique_call 2180} $i21 := devirtbounce.16($p16, $p0, $p18, $i20, $i2, $i3, $p4);
    call {:si_unique_call 2181} {:cexpr "addr"} boogie_si_record_i64($i21);
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p1);
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2182} $i23 := __phys_addr($i22);
    call {:si_unique_call 2183} {:cexpr "tmp___3"} boogie_si_record_i64($i23);
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    $i24 := $lshr.i64($i23, 12);
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i24, 64));
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p1);
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 4095);
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2184} debug_dma_map_page($p0, $p25, $i27, $i2, $i3, $i21, 1);
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb1:
    assume $i12 == 1;
    call {:si_unique_call 2177} devirtbounce.6(0, .str.129, 19, 12);
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    assume false;
    return;
}



const kmemcheck_mark_initialized: ref;

axiom kmemcheck_mark_initialized == $sub.ref(0, 534252);

procedure kmemcheck_mark_initialized($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation kmemcheck_mark_initialized($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2185} {:cexpr "kmemcheck_mark_initialized:arg:n"} boogie_si_record_i32($i1);
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    return;
}



const __phys_addr: ref;

axiom __phys_addr == $sub.ref(0, 535284);

procedure __phys_addr($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __phys_addr($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2186} {:cexpr "__phys_addr:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2187} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 2188} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const debug_dma_map_page: ref;

axiom debug_dma_map_page == $sub.ref(0, 536316);

procedure debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1);
  free requires assertsPassed;



implementation debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2189} {:cexpr "debug_dma_map_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 2190} {:cexpr "debug_dma_map_page:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 2191} {:cexpr "debug_dma_map_page:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 2192} {:cexpr "debug_dma_map_page:arg:arg5"} boogie_si_record_i64($i5);
    call {:si_unique_call 2193} {:cexpr "debug_dma_map_page:arg:arg6"} boogie_si_record_i1($i6);
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    return;
}



const request_irq: ref;

axiom request_irq == $sub.ref(0, 537348);

procedure request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2194} {:cexpr "request_irq:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 2195} {:cexpr "request_irq:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2196} $i5 := request_threaded_irq($i0, $p1, $0.ref, $i2, $p3, $p4);
    call {:si_unique_call 2197} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv_request_irq: ref;

axiom ldv_request_irq == $sub.ref(0, 538380);

procedure ldv_request_irq($i0: i32, $i1: i32, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $CurrAddr, $M.19, $M.11, $M.6, assertsPassed, $M.20, $M.21, $M.12;



implementation ldv_request_irq($i0: i32, $i1: i32, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2198} {:cexpr "ldv_request_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 2199} {:cexpr "ldv_request_irq:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2200} {:cexpr "ldv_request_irq:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2201} $i6 := ldv_undef_int();
    call {:si_unique_call 2202} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i0, 0);
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2206} ldv_assume($i11);
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i0, 0);
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2203} ldv_assume($i9);
    call {:si_unique_call 2204} {:cexpr "ldv_request_irq:arg:ldv_20_line_line"} boogie_si_record_i32($i1);
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2205} ldv_dispatch_irq_register_20_2($i1, $p2, $0.ref, $p5);
    goto SeqInstr_559, SeqInstr_560;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  SeqInstr_561:
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_559:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_irq_register_20_2: ref;

axiom ldv_dispatch_irq_register_20_2 == $sub.ref(0, 539412);

procedure ldv_dispatch_irq_register_20_2($i0: i32, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $CurrAddr, $M.19, $M.11, $M.6, assertsPassed, $M.20, $M.21, $M.12;



implementation ldv_dispatch_irq_register_20_2($i0: i32, $p1: ref, $p2: ref, $p3: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2207} {:cexpr "ldv_dispatch_irq_register_20_2:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2208} $p4 := ldv_xmalloc(40);
    goto corral_source_split_8889;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p6, $i0);
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p7, $p1);
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p8, $p2);
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p9, $p3);
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p5);
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2209} ldv_interrupt_interrupt_instance_2($p10);
    goto SeqInstr_562, SeqInstr_563;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  SeqInstr_564:
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_562:
    assume !assertsPassed;
    return;
}



const ldv_interrupt_interrupt_instance_2: ref;

axiom ldv_interrupt_interrupt_instance_2 == $sub.ref(0, 540444);

procedure ldv_interrupt_interrupt_instance_2($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.19, $CurrAddr, $M.11, $M.6, assertsPassed, $M.20, $M.21, $M.12;



implementation ldv_interrupt_interrupt_instance_2($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i1;
  var $i27: i1;
  var $i28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i13, $p14, $p15, $p16 := $u4, $u17, $u18, $u18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2212} ldv_switch_to_interrupt_context();
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p15);
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i20 := $u4;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2215} ldv_switch_to_process_context();
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2216} $i21 := ldv_undef_int();
    call {:si_unique_call 2217} {:cexpr "tmp"} boogie_si_record_i32($i21);
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i22 == 1);
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i20, 2);
    goto corral_source_split_8940;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2219} ldv_assume($i28);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i20, 2);
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2218} ldv_assume($i24);
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p16);
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i26 == 1;
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2220} ldv_interrupt_instance_thread_2_3($p16, $i13, $p14);
    goto SeqInstr_568, SeqInstr_569;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  SeqInstr_570:
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_568:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2213} $i19 := ldv_interrupt_instance_handler_2_5($p15, $i13, $p14);
    goto SeqInstr_565, SeqInstr_566;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  SeqInstr_567:
    call {:si_unique_call 2214} {:cexpr "ldv_2_ret_val_default"} boogie_si_record_i32($i19);
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb6;

  SeqInstr_565:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    call {:si_unique_call 2210} {:cexpr "ldv_2_line_line"} boogie_si_record_i32($i5);
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_8915;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p1);
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2211} ldv_free($p12);
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    $i13, $p14, $p15, $p16 := $i5, $p11, $p7, $p9;
    goto $bb3;
}



const ldv_switch_to_interrupt_context: ref;

axiom ldv_switch_to_interrupt_context == $sub.ref(0, 541476);

procedure ldv_switch_to_interrupt_context();
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_switch_to_interrupt_context()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    $M.0 := 1;
    call {:si_unique_call 2221} {:cexpr "__ldv_in_interrupt_context"} boogie_si_record_i8(1);
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    return;
}



const ldv_interrupt_instance_handler_2_5: ref;

axiom ldv_interrupt_instance_handler_2_5 == $sub.ref(0, 542508);

procedure ldv_interrupt_instance_handler_2_5($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.19, $CurrAddr, $M.11, $M.6, assertsPassed, $M.20, $M.21, $M.12;



implementation ldv_interrupt_instance_handler_2_5($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2222} {:cexpr "ldv_interrupt_instance_handler_2_5:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2223} $i3 := devirtbounce.13($p0, $i1, $p2);
    goto SeqInstr_571, SeqInstr_572;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  SeqInstr_573:
    call {:si_unique_call 2224} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_571:
    assume !assertsPassed;
    return;
}



const ldv_switch_to_process_context: ref;

axiom ldv_switch_to_process_context == $sub.ref(0, 543540);

procedure ldv_switch_to_process_context();
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_switch_to_process_context()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    $M.0 := 0;
    call {:si_unique_call 2225} {:cexpr "__ldv_in_interrupt_context"} boogie_si_record_i8(0);
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    return;
}



const ldv_interrupt_instance_thread_2_3: ref;

axiom ldv_interrupt_instance_thread_2_3 == $sub.ref(0, 544572);

procedure ldv_interrupt_instance_thread_2_3($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.1, $M.19, $CurrAddr, $M.11, $M.6, assertsPassed, $M.20, $M.21, $M.12;



implementation ldv_interrupt_instance_thread_2_3($p0: ref, $i1: i32, $p2: ref)
{
  var vslice_dummy_var_200: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2226} {:cexpr "ldv_interrupt_instance_thread_2_3:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2227} vslice_dummy_var_200 := devirtbounce.13($p0, $i1, $p2);
    goto SeqInstr_574, SeqInstr_575;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  SeqInstr_576:
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_574:
    assume !assertsPassed;
    return;
}



const request_threaded_irq: ref;

axiom request_threaded_irq == $sub.ref(0, 545604);

procedure request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2228} {:cexpr "request_threaded_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 2229} {:cexpr "request_threaded_irq:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2230} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 2231} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_100: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_100 == $sub.ref(0, 546636);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_100($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_100($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2232} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_NOT_ARG_SIGN();
    goto SeqInstr_577, SeqInstr_578;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  SeqInstr_579:
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2233} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_577:
    assume !assertsPassed;
    return;
}



const atomic_sub: ref;

axiom atomic_sub == $sub.ref(0, 547668);

procedure atomic_sub($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation atomic_sub($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2234} {:cexpr "atomic_sub:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2235} ldv_linux_usb_dev_atomic_sub($i0, $p1);
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    return;
}



const mega_cmd_done: ref;

axiom mega_cmd_done == $sub.ref(0, 548700);

procedure mega_cmd_done($p0: ref, $p1: ref, $i2: i32, $i3: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation mega_cmd_done($p0: ref, $p1: ref, $i2: i32, $i3: i32)
{
  var $i4: i1;
  var $i11: i64;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $i69: i32;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i32;
  var $i91: i64;
  var $p93: ref;
  var $i94: i8;
  var $i95: i32;
  var $p96: ref;
  var $p97: ref;
  var $i98: i8;
  var $i99: i32;
  var $i100: i1;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $i104: i64;
  var $i105: i1;
  var $p106: ref;
  var $i107: i8;
  var $i108: i8;
  var $p110: ref;
  var $i111: i32;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i32;
  var $i116: i32;
  var $i117: i32;
  var $i118: i1;
  var $i119: i32;
  var $i120: i32;
  var $i121: i1;
  var $i122: i32;
  var $i123: i32;
  var $p124: ref;
  var $i125: i1;
  var $i126: i1;
  var $i127: i1;
  var $p128: ref;
  var $i129: i32;
  var $p130: ref;
  var $p132: ref;
  var $i133: i8;
  var $i134: i32;
  var $i135: i1;
  var $p137: ref;
  var $i138: i8;
  var $i139: i32;
  var $i140: i1;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p147: ref;
  var $i148: i8;
  var $i149: i32;
  var $i150: i1;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $i162: i32;
  var $i163: i32;
  var $p164: ref;
  var $p165: ref;
  var $i166: i32;
  var $i167: i32;
  var $i168: i32;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $i172: i8;
  var $i173: i32;
  var $i174: i1;
  var $p175: ref;
  var $i176: i32;
  var $i177: i32;
  var $p178: ref;
  var $i179: i1;
  var $p180: ref;
  var $p181: ref;
  var $i182: i8;
  var $i183: i32;
  var $i184: i32;
  var $i185: i1;
  var $p186: ref;
  var $i187: i32;
  var $i188: i32;
  var $p189: ref;
  var $p190: ref;
  var $i191: i32;
  var $i192: i32;
  var $i193: i32;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i198: i32;
  var $i199: i1;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var cmdloc_dummy_var_100: [ref]i8;
  var cmdloc_dummy_var_101: [ref]i8;
  var cmdloc_dummy_var_102: [ref]i8;
  var cmdloc_dummy_var_103: [ref]i8;
  var cmdloc_dummy_var_104: [ref]i8;
  var cmdloc_dummy_var_105: [ref]i8;
  var vslice_dummy_var_201: i32;
  var vslice_dummy_var_202: i32;
  var vslice_dummy_var_203: i32;
  var vslice_dummy_var_204: i32;
  var vslice_dummy_var_205: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2236} {:cexpr "mega_cmd_done:arg:nstatus"} boogie_si_record_i32($i2);
    call {:si_unique_call 2237} {:cexpr "mega_cmd_done:arg:status"} boogie_si_record_i32($i3);
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32(0, $i2);
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    $i5, $i6, $p7, $p8, $p9, $p10 := 0, $i3, $0.ref, $0.ref, $0.ref, $0.ref;
    goto $bb4;

  $bb4:
    call $i11, $p12, $i13, $i14, $i15, $p16, $p17, $p18, $p19, $p20, $p26, $p27, $i28, $p29, $p30, $i31, $i32, $i33, $p34, $p35, $i36, $i37, $p39, $i40, $p41, $p42, $p49, $i50, $i51, $i52, $p53, $i54, $p56, $p57, $p58, $p59, $p60, $p61, $p62, $p63, $p64, $i65, $i66, $i67, $p68, $i69, $p71, $p72, $p73, $p74, $p75, $p76, $p77, $p78, $p79, $p80, $p81, $p82, $p83, $p84, $p85, $p21, $p22, $p23, $p24, $p25, $p87, $p88, $p89, $i90, $i91, $p93, $i94, $i95, $p96, $p97, $i98, $i99, $i100, $i101, $p102, $p103, $i104, $i105, $p106, $i107, $i108, $p110, $i111, $p112, $p113, $p114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $p124, $i125, $i126, $i127, $p128, $i129, $p130, $p132, $i133, $i134, $i135, $p137, $i138, $i139, $i140, $p141, $p142, $p143, $p144, $p145, $p147, $i148, $i149, $i150, $p151, $p152, $p153, $p154, $p155, $p156, $p157, $p158, $p159, $p160, $p161, $i162, $i163, $p164, $p165, $i166, $i167, $i168, $p169, $p170, $p171, $i172, $i173, $i174, $p175, $i176, $i177, $p178, $i179, $p180, $p181, $i182, $i183, $i184, $i185, $p186, $i187, $i188, $p189, $p190, $i191, $i192, $i193, $p194, $p195, $p196, $p197, $p44, $p45, $p46, $p47, $i48, $i198, $i199, $i5, $i6, $p7, $p8, $p9, $p10, cmdloc_dummy_var_100, cmdloc_dummy_var_101, cmdloc_dummy_var_102, cmdloc_dummy_var_103, cmdloc_dummy_var_104, cmdloc_dummy_var_105, vslice_dummy_var_201, vslice_dummy_var_202, vslice_dummy_var_203, vslice_dummy_var_204, vslice_dummy_var_205 := mega_cmd_done_loop_$bb4($p0, $p1, $i2, $i11, $p12, $i13, $i14, $i15, $p16, $p17, $p18, $p19, $p20, $p26, $p27, $i28, $p29, $p30, $i31, $i32, $i33, $p34, $p35, $i36, $i37, $p39, $i40, $p41, $p42, $p49, $i50, $i51, $i52, $p53, $i54, $p56, $p57, $p58, $p59, $p60, $p61, $p62, $p63, $p64, $i65, $i66, $i67, $p68, $i69, $p71, $p72, $p73, $p74, $p75, $p76, $p77, $p78, $p79, $p80, $p81, $p82, $p83, $p84, $p85, $p21, $p22, $p23, $p24, $p25, $p87, $p88, $p89, $i90, $i91, $p93, $i94, $i95, $p96, $p97, $i98, $i99, $i100, $i101, $p102, $p103, $i104, $i105, $p106, $i107, $i108, $p110, $i111, $p112, $p113, $p114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $p124, $i125, $i126, $i127, $p128, $i129, $p130, $p132, $i133, $i134, $i135, $p137, $i138, $i139, $i140, $p141, $p142, $p143, $p144, $p145, $p147, $i148, $i149, $i150, $p151, $p152, $p153, $p154, $p155, $p156, $p157, $p158, $p159, $p160, $p161, $i162, $i163, $p164, $p165, $i166, $i167, $i168, $p169, $p170, $p171, $i172, $i173, $i174, $p175, $i176, $i177, $p178, $i179, $p180, $p181, $i182, $i183, $i184, $i185, $p186, $i187, $i188, $p189, $p190, $i191, $i192, $i193, $p194, $p195, $p196, $p197, $p44, $p45, $p46, $p47, $i48, $i198, $i199, $i5, $i6, $p7, $p8, $p9, $p10, cmdloc_dummy_var_100, cmdloc_dummy_var_101, cmdloc_dummy_var_102, cmdloc_dummy_var_103, cmdloc_dummy_var_104, cmdloc_dummy_var_105, vslice_dummy_var_201, vslice_dummy_var_202, vslice_dummy_var_203, vslice_dummy_var_204, vslice_dummy_var_205);
    goto $bb4_last;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i5);
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p1, $mul.ref($i11, 1));
    goto corral_source_split_8974;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.1, $p12);
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    call {:si_unique_call 2238} {:cexpr "cmdid"} boogie_si_record_i32($i14);
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 127);
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1176, 1));
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i14);
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p27, $mul.ref($i28, 184));
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p27, $mul.ref($i28, 184)), $mul.ref(4, 1));
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.1, $p30);
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 4);
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb11;

  $bb11:
    assume !($i33 == 1);
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p27, $mul.ref($i28, 184)), $mul.ref(104, 1));
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.1, $p34);
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p27, $mul.ref($i28, 184)), $mul.ref(4, 1));
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.1, $p49);
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i50, 8);
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p27, $mul.ref($i28, 184)), $mul.ref(4, 1));
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.1, $p64);
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    $i66 := $and.i32($i65, 16);
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_9054;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p27, $mul.ref($i28, 184)), $mul.ref(104, 1));
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.1, $p79);
    goto corral_source_split_9073;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p27, $mul.ref($i28, 184)), $mul.ref(152, 1));
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.1, $p81);
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p27, $mul.ref($i28, 184)), $mul.ref(168, 1));
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.1, $p83);
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p27, $mul.ref($i28, 184)), $mul.ref(24, 1));
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p21, $p22, $p23, $p24, $p25 := $p82, $p80, $p85, $p84, $p29;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p22, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.1, $p87);
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p88, $mul.ref(0, 3480)), $mul.ref(204, 1));
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.1, $p89);
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    $i91 := $zext.i32.i64($i90);
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1432, 1)), $mul.ref($i91, 1));
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.1, $p93);
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    call {:si_unique_call 2241} {:cexpr "islogical"} boogie_si_record_i32($i95);
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p22, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.1, $p96);
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.1, $p97);
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i98);
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i99, 18);
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i123 := $i6;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p22, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_9116;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p124, 0);
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i123, 0);
    goto corral_source_split_9118;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i123, 2);
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i123, 8);
    goto corral_source_split_9136;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p22, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    $p171 := $load.ref($M.1, $p170);
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    $i172 := $load.i8($M.1, $p171);
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    $i173 := $zext.i8.i32($i172);
    goto corral_source_split_9150;

  corral_source_split_9150:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i173, 0);
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i174 == 1);
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    $i179 := $eq.i32($i123, 1);
    goto corral_source_split_9209;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !($i179 == 1);
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p22, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    $i191 := $load.i32($M.1, $p190);
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    $i192 := $or.i32($i123, 262144);
    goto corral_source_split_9221;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    $i193 := $or.i32($i191, $i192);
    goto corral_source_split_9222;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p22, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_9223;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p194, $i193);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2256} mega_free_scb($p0, $p25);
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p22, $mul.ref(0, 472)), $mul.ref(384, 1));
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    $p196 := $bitcast.ref.ref($p195);
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(104, 1));
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2257} list_add_tail($p196, $p197);
    goto corral_source_split_9157;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    $p44, $p45, $p46, $p47, $i48 := $p21, $p22, $p23, $p24, $i123;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    $i198 := $add.i32($i5, 1);
    call {:si_unique_call 2244} {:cexpr "i"} boogie_si_record_i32($i198);
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    $i199 := $slt.i32($i198, $i2);
    goto corral_source_split_9028;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i199 == 1);
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb70:
    assume $i199 == 1;
    assume {:verifier.code 0} true;
    $i5, $i6, $p7, $p8, $p9, $p10 := $i198, $i48, $p47, $p46, $p45, $p44;
    goto $bb70_dummy;

  $bb63:
    assume $i179 == 1;
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p22, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    $p181 := $load.ref($M.1, $p180);
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    $i182 := $load.i8($M.1, $p181);
    goto corral_source_split_9214;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    $i183 := $zext.i8.i32($i182);
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    $i184 := $sub.i32($i183, 22);
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    $i185 := $ule.i32($i184, 1);
    goto corral_source_split_9217;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    assume !($i185 == 1);
    goto $bb65;

  $bb66:
    assume $i185 == 1;
    goto corral_source_split_9225;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p22, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    $i187 := $load.i32($M.1, $p186);
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    $i188 := $or.i32($i187, 458776);
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p22, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_9229;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p189, $i188);
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb60:
    assume $i174 == 1;
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p22, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_9202;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    $i176 := $load.i32($M.1, $p175);
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    $i177 := $or.i32($i176, 458776);
    goto corral_source_split_9204;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p22, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p178, $i177);
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb45:
    assume $i127 == 1;
    goto corral_source_split_9138;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p22, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.1, $p165);
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    $i167 := $or.i32($i123, 131072);
    goto corral_source_split_9142;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    $i168 := $or.i32($i166, $i167);
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p22, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p169, $i168);
    goto corral_source_split_9145;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb41:
    assume $i126 == 1;
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    $i133 := $load.i8($M.1, $p132);
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    $i134 := $zext.i8.i32($i133);
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i134, 3);
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb53;

  $bb53:
    assume !($i135 == 1);
    goto corral_source_split_9167;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9168;

  corral_source_split_9168:
    assume {:verifier.code 0} true;
    $i138 := $load.i8($M.1, $p137);
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    $i139 := $zext.i8.i32($i138);
    goto corral_source_split_9170;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i139, 195);
    goto corral_source_split_9171;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i140 == 1);
    goto corral_source_split_9173;

  corral_source_split_9173:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9174;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    $i148 := $load.i8($M.1, $p147);
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    $i149 := $zext.i8.i32($i148);
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    $i150 := $eq.i32($i149, 227);
    goto corral_source_split_9177;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i150 == 1);
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p22, $mul.ref(0, 472)), $mul.ref(368, 1));
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.1, $p156);
    goto corral_source_split_9190;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p157, 112);
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p22, $mul.ref(0, 472)), $mul.ref(368, 1));
    goto corral_source_split_9192;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    $p159 := $load.ref($M.1, $p158);
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($p159, $mul.ref(2, 1));
    goto corral_source_split_9194;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p160, 11);
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p22, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_9196;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    $i162 := $load.i32($M.1, $p161);
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    $i163 := $or.i32($i162, 2);
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p22, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_9199;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p164, $i163);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb57:
    assume $i150 == 1;
    goto corral_source_split_9179;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p22, $mul.ref(0, 472)), $mul.ref(368, 1));
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    $p152 := $load.ref($M.1, $p151);
    goto corral_source_split_9181;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p24, $mul.ref(0, 68)), $mul.ref(27, 1));
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    $p154 := $bitcast.ref.ref($p153);
    goto corral_source_split_9183;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_103 := $M.1;
    cmdloc_dummy_var_104 := $M.1;
    call {:si_unique_call 2259} cmdloc_dummy_var_105 := $memcpy.i8(cmdloc_dummy_var_103, cmdloc_dummy_var_104, $p152, $p154, 14, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_105;
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p22, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_9185;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p155, 134217730);
    goto corral_source_split_9186;

  corral_source_split_9186:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb54:
    assume {:verifier.code 0} true;
    assume $i140 == 1;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p22, $mul.ref(0, 472)), $mul.ref(368, 1));
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.1, $p141);
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p21, $mul.ref(0, 60)), $mul.ref(18, 1));
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    $p144 := $bitcast.ref.ref($p143);
    goto corral_source_split_9162;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_100 := $M.1;
    cmdloc_dummy_var_101 := $M.1;
    call {:si_unique_call 2258} cmdloc_dummy_var_102 := $memcpy.i8(cmdloc_dummy_var_100, cmdloc_dummy_var_101, $p142, $p144, 14, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_102;
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p22, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_9164;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p145, 134217730);
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i135 == 1;
    goto $bb52;

  $bb37:
    assume $i125 == 1;
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p22, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.1, $p128);
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p22, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_9124;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p130, $i129);
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb22:
    assume $i100 == 1;
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i95, 0);
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i101 == 1);
    goto $bb24;

  $bb25:
    assume $i101 == 1;
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2251} $p102 := scsi_sglist($p22);
    goto corral_source_split_9084;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2252} $p103 := sg_page($p102);
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    $i104 := $p2i.ref.i64($p103);
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    $i105 := $ne.i64($i104, 0);
    goto corral_source_split_9087;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i105 == 1);
    goto corral_source_split_9093;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2255} vslice_dummy_var_205 := printk.ref(.str.121);
    assume {:verifier.code 0} true;
    $i108 := 0;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1444, 1));
    goto corral_source_split_9096;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    $i111 := $load.i32($M.1, $p110);
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p22, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.1, $p112);
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p113, $mul.ref(0, 3480)), $mul.ref(204, 1));
    goto corral_source_split_9100;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.1, $p114);
    goto corral_source_split_9101;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    $i116 := $ashr.i32($i111, $i115);
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    $i117 := $and.i32($i116, 1);
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i117, 0);
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i118 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i122 := $i6;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_9113;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    $i123 := $i122;
    goto $bb36;

  $bb30:
    assume $i118 == 1;
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    $i119 := $zext.i8.i32($i108);
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    $i120 := $and.i32($i119, 31);
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    $i121 := $eq.i32($i120, 0);
    goto corral_source_split_9109;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i121 == 1);
    goto $bb32;

  $bb33:
    assume $i121 == 1;
    goto corral_source_split_9111;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    $i122 := 240;
    goto $bb35;

  $bb27:
    assume $i105 == 1;
    goto corral_source_split_9089;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2253} $p106 := sg_virt($p102);
    goto corral_source_split_9090;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    $i107 := $load.i8($M.11, $p106);
    call {:si_unique_call 2254} {:cexpr "c"} boogie_si_record_i8($i107);
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    $i108 := $i107;
    goto $bb29;

  $bb19:
    assume $i67 == 1;
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p27, $mul.ref($i28, 184)), $mul.ref(0, 1));
    goto corral_source_split_9057;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.1, $p68);
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2248} vslice_dummy_var_204 := printk.ref.i32(.str.120, $i69);
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p27, $mul.ref($i28, 184)), $mul.ref(104, 1));
    goto corral_source_split_9060;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.1, $p71);
    goto corral_source_split_9061;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p73, 524288);
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p27, $mul.ref($i28, 184)), $mul.ref(104, 1));
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.1, $p74);
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 472)), $mul.ref(384, 1));
    goto corral_source_split_9066;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(104, 1));
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2249} list_add_tail($p77, $p78);
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2250} mega_free_scb($p0, $p29);
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    $p44, $p45, $p46, $p47, $i48 := $p10, $p9, $p8, $p7, $i6;
    goto $bb14;

  $bb16:
    assume $i52 == 1;
    goto corral_source_split_9035;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p27, $mul.ref($i28, 184)), $mul.ref(0, 1));
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.1, $p53);
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2245} vslice_dummy_var_203 := printk.ref.i32(.str.119, $i54);
    goto corral_source_split_9038;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p27, $mul.ref($i28, 184)), $mul.ref(104, 1));
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.1, $p56);
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p58, 327680);
    goto corral_source_split_9042;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p27, $mul.ref($i28, 184)), $mul.ref(104, 1));
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.1, $p59);
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 472)), $mul.ref(384, 1));
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(104, 1));
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2246} list_add_tail($p62, $p63);
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2247} mega_free_scb($p0, $p29);
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    $p44, $p45, $p46, $p47, $i48 := $p10, $p9, $p8, $p7, $i6;
    goto $bb14;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2242} vslice_dummy_var_201 := printk.ref(.str.117);
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p27, $mul.ref($i28, 184)), $mul.ref(4, 1));
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.1, $p39);
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p27, $mul.ref($i28, 184)), $mul.ref(104, 1));
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.1, $p41);
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2243} vslice_dummy_var_202 := printk.ref.i32.i32.ref(.str.118, $i14, $i40, $p42);
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    $p44, $p45, $p46, $p47, $i48 := $p10, $p9, $p8, $p7, $i6;
    goto $bb14;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb10;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1456, 1));
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1456, 1)), $mul.ref(8, 1));
    goto corral_source_split_8980;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2239} list_del_init($p17);
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1456, 1)), $mul.ref(4, 1));
    goto corral_source_split_8981;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p18, 0);
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1800, 1));
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p19, $i6);
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(1808, 1));
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2240} complete_($p20);
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    $p21, $p22, $p23, $p24, $p25 := $p10, $p9, $p8, $p7, $p16;
    goto $bb8;

  $bb70_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8971;
}



const complete_: ref;

axiom complete_ == $sub.ref(0, 549732);

procedure complete_($p0: ref);
  free requires assertsPassed;



implementation complete_($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9234;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    return;
}



const sg_virt: ref;

axiom sg_virt == $sub.ref(0, 550764);

procedure sg_virt($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation sg_virt($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2260} $p1 := sg_page($p0);
    goto corral_source_split_9237;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2261} $p2 := lowmem_page_address($p1);
    goto corral_source_split_9238;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.1, $p3);
    goto corral_source_split_9240;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_9242;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const ldv_linux_usb_dev_atomic_sub: ref;

axiom ldv_linux_usb_dev_atomic_sub == $sub.ref(0, 551796);

procedure ldv_linux_usb_dev_atomic_sub($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_linux_usb_dev_atomic_sub($i0: i32, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2262} {:cexpr "ldv_linux_usb_dev_atomic_sub:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_9244;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, $p2);
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32($i3, $i0);
    goto corral_source_split_9247;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p5, $i4);
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_102: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_102 == $sub.ref(0, 552828);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_102($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_102($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2263} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_NOT_ARG_SIGN();
    goto SeqInstr_580, SeqInstr_581;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  SeqInstr_582:
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2264} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_9253;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_580:
    assume !assertsPassed;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 553860);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2265} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2266} ldv_linux_alloc_irq_check_alloc_flags($i0);
    goto SeqInstr_583, SeqInstr_584;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  SeqInstr_585:
    goto corral_source_split_9256;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2267} ldv_linux_alloc_usb_lock_check_alloc_flags($i0);
    goto SeqInstr_586, SeqInstr_587;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  SeqInstr_588:
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_586:
    assume !assertsPassed;
    return;

  SeqInstr_583:
    assume !assertsPassed;
    return;
}



const ldv_malloc_unknown_size: ref;

axiom ldv_malloc_unknown_size == $sub.ref(0, 554892);

procedure ldv_malloc_unknown_size() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_malloc_unknown_size() returns ($r: ref)
{
  var $i0: i32;
  var $i1: i1;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2268} $i0 := ldv_undef_int();
    call {:si_unique_call 2269} {:cexpr "tmp___1"} boogie_si_record_i32($i0);
    goto corral_source_split_9260;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_9274;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9276;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2270} $p2 := external_allocated_data();
    goto corral_source_split_9264;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_9265;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_9267;

  corral_source_split_9267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2271} ldv_assume($i5);
    goto corral_source_split_9268;

  corral_source_split_9268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2272} $i6 := ldv_is_err($p2);
    call {:si_unique_call 2273} {:cexpr "tmp___0"} boogie_si_record_i64($i6);
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_9270;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_9271;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2274} ldv_assume($i8);
    goto corral_source_split_9272;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    $p9 := $p2;
    goto $bb3;
}



const ldv_after_alloc: ref;

axiom ldv_after_alloc == $sub.ref(0, 555924);

procedure ldv_after_alloc($p0: ref);
  free requires assertsPassed;



implementation ldv_after_alloc($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    return;
}



const external_allocated_data: ref;

axiom external_allocated_data == $sub.ref(0, 556956);

procedure external_allocated_data() returns ($r: ref);
  free requires assertsPassed;



implementation external_allocated_data() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9280;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2275} $p0 := external_alloc();
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_linux_alloc_irq_check_alloc_flags: ref;

axiom ldv_linux_alloc_irq_check_alloc_flags == $sub.ref(0, 557988);

procedure ldv_linux_alloc_irq_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_alloc_irq_check_alloc_flags($i0: i32)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i6: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2276} {:cexpr "ldv_linux_alloc_irq_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2277} $i1 := ldv_in_interrupt_context();
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 2278} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_9285;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_9291;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, 32);
    goto corral_source_split_9298;

  corral_source_split_9298:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i6);
    goto corral_source_split_9294;

  corral_source_split_9294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2279} ldv_assert_linux_alloc_irq__wrong_flags($i8);
    goto SeqInstr_589, SeqInstr_590;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  SeqInstr_591:
    goto corral_source_split_9295;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_589:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb5;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9288;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const ldv_linux_alloc_usb_lock_check_alloc_flags: ref;

axiom ldv_linux_alloc_usb_lock_check_alloc_flags == $sub.ref(0, 559020);

procedure ldv_linux_alloc_usb_lock_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_alloc_usb_lock_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i5: i1;
  var $i4: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2280} {:cexpr "ldv_linux_alloc_usb_lock_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_9300;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    $i1 := $M.32;
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_9302;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 16);
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    $i4 := 1;
    assume {:branchcond $i3} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_9311;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 32);
    goto corral_source_split_9312;

  corral_source_split_9312:
    assume {:verifier.code 0} true;
    $i4 := $i5;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i4);
    goto corral_source_split_9308;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2281} ldv_assert_linux_alloc_usb_lock__wrong_flags($i6);
    goto SeqInstr_592, SeqInstr_593;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  SeqInstr_594:
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_592:
    assume !assertsPassed;
    return;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb4;
}



const ldv_assert_linux_alloc_usb_lock__wrong_flags: ref;

axiom ldv_assert_linux_alloc_usb_lock__wrong_flags == $sub.ref(0, 560052);

procedure ldv_assert_linux_alloc_usb_lock__wrong_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_alloc_usb_lock__wrong_flags($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2282} {:cexpr "ldv_assert_linux_alloc_usb_lock__wrong_flags:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_9314;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2283} __VERIFIER_error();
    goto SeqInstr_595, SeqInstr_596;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  SeqInstr_597:
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_595:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_alloc_irq__wrong_flags: ref;

axiom ldv_assert_linux_alloc_irq__wrong_flags == $sub.ref(0, 561084);

procedure ldv_assert_linux_alloc_irq__wrong_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_alloc_irq__wrong_flags($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2284} {:cexpr "ldv_assert_linux_alloc_irq__wrong_flags:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_9320;

  corral_source_split_9320:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9321;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_9323;

  corral_source_split_9323:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2285} __VERIFIER_error();
    goto SeqInstr_598, SeqInstr_599;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  SeqInstr_600:
    goto corral_source_split_9324;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_598:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dma_alloc_attrs: ref;

axiom dma_alloc_attrs == $sub.ref(0, 562116);

procedure dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2286} {:cexpr "dma_alloc_attrs:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 2287} {:cexpr "dma_alloc_attrs:arg:gfp"} boogie_si_record_i32($i3);
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2288} $p5 := get_dma_ops($p0);
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i3, $sub.i32(0, 8));
    call {:si_unique_call 2289} {:cexpr "gfp"} boogie_si_record_i32($i6);
    goto corral_source_split_9328;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_9330;

  corral_source_split_9330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $p9 := $p0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9334;

  corral_source_split_9334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2290} $i10 := is_device_dma_capable($p9);
    call {:si_unique_call 2291} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_9336;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_9342;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_9343;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_9345;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2292} $i17 := dma_alloc_coherent_gfp_flags($p9, $i6);
    call {:si_unique_call 2293} {:cexpr "tmp___1"} boogie_si_record_i32($i17);
    goto corral_source_split_9349;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    call {:si_unique_call 2294} $p20 := devirtbounce.17($p19, $p9, $i1, $p2, $i17, $p4);
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.1, $p2);
    goto corral_source_split_9352;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2295} debug_dma_alloc_coherent($p9, $i1, $i21, $p20);
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    $p12 := $p20;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_9340;

  corral_source_split_9340:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb6;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_9332;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    $p9 := x86_dma_fallback_dev;
    goto $bb3;
}



const is_device_dma_capable: ref;

axiom is_device_dma_capable == $sub.ref(0, 563148);

procedure is_device_dma_capable($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation is_device_dma_capable($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i5: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9355;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(1152, 1));
    goto corral_source_split_9356;

  corral_source_split_9356:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_9357;

  corral_source_split_9357:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    $i5 := 0;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9366;

  corral_source_split_9366:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i5);
    goto corral_source_split_9367;

  corral_source_split_9367:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_9361;

  corral_source_split_9361:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(1152, 1));
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_9363;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.1, $p7);
    goto corral_source_split_9364;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    assume {:verifier.code 0} true;
    $i5 := $i9;
    goto $bb3;
}



const dma_alloc_coherent_gfp_flags: ref;

axiom dma_alloc_coherent_gfp_flags == $sub.ref(0, 564180);

procedure dma_alloc_coherent_gfp_flags($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dma_alloc_coherent_gfp_flags($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2296} {:cexpr "dma_alloc_coherent_gfp_flags:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_9369;

  corral_source_split_9369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2297} $i2 := dma_alloc_coherent_mask($p0, $i1);
    call {:si_unique_call 2298} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_9370;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    $i3 := $ule.i64($i2, 16777215);
    goto corral_source_split_9371;

  corral_source_split_9371:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i5 := $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    $i6 := $ule.i64($i2, 4294967295);
    goto corral_source_split_9377;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i10 := $i5;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_9379;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i5, 1);
    goto corral_source_split_9380;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i5, 4);
    call {:si_unique_call 2300} {:cexpr "gfp"} boogie_si_record_i32($i9);
    goto corral_source_split_9384;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb9;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9373;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    $i4 := $or.i32($i1, 1);
    call {:si_unique_call 2299} {:cexpr "gfp"} boogie_si_record_i32($i4);
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const debug_dma_alloc_coherent: ref;

axiom debug_dma_alloc_coherent == $sub.ref(0, 565212);

procedure debug_dma_alloc_coherent($p0: ref, $i1: i64, $i2: i64, $p3: ref);
  free requires assertsPassed;



implementation debug_dma_alloc_coherent($p0: ref, $i1: i64, $i2: i64, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2301} {:cexpr "debug_dma_alloc_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 2302} {:cexpr "debug_dma_alloc_coherent:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_9388;

  corral_source_split_9388:
    assume {:verifier.code 0} true;
    return;
}



const dma_alloc_coherent_mask: ref;

axiom dma_alloc_coherent_mask == $sub.ref(0, 566244);

procedure dma_alloc_coherent_mask($p0: ref, $i1: i32) returns ($r: i64);
  free requires assertsPassed;



implementation dma_alloc_coherent_mask($p0: ref, $i1: i32) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i64;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2303} {:cexpr "dma_alloc_coherent_mask:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_9390;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(1160, 1));
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.1, $p2);
    call {:si_unique_call 2304} {:cexpr "dma_mask"} boogie_si_record_i64($i3);
    goto corral_source_split_9392;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_9393;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i8 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9400;

  corral_source_split_9400:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_9395;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i1, 1);
    goto corral_source_split_9396;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_9397;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    $i7 := (if $i6 == 1 then 16777215 else 4294967295);
    call {:si_unique_call 2305} {:cexpr "dma_mask"} boogie_si_record_i64($i7);
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const scsi_host_alloc: ref;

axiom scsi_host_alloc == $sub.ref(0, 567276);

procedure scsi_host_alloc($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation scsi_host_alloc($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2306} {:cexpr "scsi_host_alloc:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_9402;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2307} $p2 := external_alloc();
    goto corral_source_split_9403;

  corral_source_split_9403:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const ldv_scsi_host_alloc: ref;

axiom ldv_scsi_host_alloc == $sub.ref(0, 568308);

procedure ldv_scsi_host_alloc($p0: ref, $p1: ref, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation ldv_scsi_host_alloc($p0: ref, $p1: ref, $i2: i32) returns ($r: ref)
{
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2308} {:cexpr "ldv_scsi_host_alloc:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_9406;

  corral_source_split_9406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2309} $i3 := ldv_undef_int();
    call {:si_unique_call 2310} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_9408;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_9416;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9418;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_9410;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2311} $p5 := ldv_xmalloc(3800);
    goto corral_source_split_9411;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_9412;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 3816)), $mul.ref(504, 1));
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p7, $p1);
    goto corral_source_split_9414;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    $p8 := $p5;
    goto $bb3;
}



const ldv_linux_arch_io_io_mem_remap: ref;

axiom ldv_linux_arch_io_io_mem_remap == $sub.ref(0, 569340);

procedure ldv_linux_arch_io_io_mem_remap() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.12;



implementation ldv_linux_arch_io_io_mem_remap() returns ($r: ref)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2312} $p0 := ldv_undef_ptr();
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_9423;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_9425;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    $i3 := $M.12;
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 1);
    goto corral_source_split_9427;

  corral_source_split_9427:
    assume {:verifier.code 0} true;
    $M.12 := $i4;
    call {:si_unique_call 2313} {:cexpr "ldv_linux_arch_io_iomem"} boogie_si_record_i32($i4);
    goto corral_source_split_9428;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 570372);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9430;

  corral_source_split_9430:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2314} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 2315} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_9431;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const pci_bus_read_config_dword: ref;

axiom pci_bus_read_config_dword == $sub.ref(0, 571404);

procedure pci_bus_read_config_dword($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_bus_read_config_dword($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2316} {:cexpr "pci_bus_read_config_dword:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2317} {:cexpr "pci_bus_read_config_dword:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_9433;

  corral_source_split_9433:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2318} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 2319} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const pci_bus_read_config_word: ref;

axiom pci_bus_read_config_word == $sub.ref(0, 572436);

procedure pci_bus_read_config_word($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_bus_read_config_word($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2320} {:cexpr "pci_bus_read_config_word:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2321} {:cexpr "pci_bus_read_config_word:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_9436;

  corral_source_split_9436:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2322} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 2323} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_9437;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const megadev_open: ref;

axiom megadev_open == $sub.ref(0, 573468);

procedure megadev_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation megadev_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9439;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2324} $i2 := capable(21);
    goto corral_source_split_9440;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 2325} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_9442;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9446;

  corral_source_split_9446:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_9447;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_9451;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_9449;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 13);
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_9444;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const capable: ref;

axiom capable == $sub.ref(0, 574500);

procedure capable($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation capable($i0: i32) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2326} {:cexpr "capable:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_9453;

  corral_source_split_9453:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2327} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 2328} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_9454;

  corral_source_split_9454:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const proc_show_config: ref;

axiom proc_show_config == $sub.ref(0, 575532);

procedure proc_show_config($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation proc_show_config($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p41: ref;
  var $i42: i64;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p61: ref;
  var $i62: i16;
  var $i63: i32;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $p73: ref;
  var $i74: i32;
  var $p76: ref;
  var $i77: i32;
  var $p79: ref;
  var $i80: i32;
  var $p82: ref;
  var $i83: i32;
  var $p85: ref;
  var $i86: i32;
  var $p88: ref;
  var $i89: i32;
  var $p91: ref;
  var $i92: i32;
  var $p94: ref;
  var $i95: i32;
  var $p97: ref;
  var $i98: i32;
  var $i101: i32;
  var $i103: i16;
  var $i104: i32;
  var vslice_dummy_var_206: i32;
  var vslice_dummy_var_207: i32;
  var vslice_dummy_var_208: i32;
  var vslice_dummy_var_209: i32;
  var vslice_dummy_var_210: i32;
  var vslice_dummy_var_211: i32;
  var vslice_dummy_var_212: i32;
  var vslice_dummy_var_213: i32;
  var vslice_dummy_var_214: i32;
  var vslice_dummy_var_215: i32;
  var vslice_dummy_var_216: i32;
  var vslice_dummy_var_217: i32;
  var vslice_dummy_var_218: i32;
  var vslice_dummy_var_219: i32;
  var vslice_dummy_var_220: i32;
  var vslice_dummy_var_221: i32;
  var vslice_dummy_var_222: i32;
  var vslice_dummy_var_223: i32;
  var vslice_dummy_var_224: i32;
  var vslice_dummy_var_225: i32;
  var vslice_dummy_var_226: i32;
  var vslice_dummy_var_227: i32;
  var vslice_dummy_var_228: i32;
  var vslice_dummy_var_229: i32;
  var vslice_dummy_var_230: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9456;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(248, 1));
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.33, $p2);
    goto corral_source_split_9458;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9459;

  corral_source_split_9459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2329} vslice_dummy_var_206 := seq_puts($p0, .str.63);
    goto corral_source_split_9460;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 1912)), $mul.ref(144, 1)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_9461;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.1, $p8);
    goto corral_source_split_9462;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_9463;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_9464;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2331} vslice_dummy_var_208 := seq_puts($p0, .str.65);
    goto corral_source_split_9471;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_9472;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.1, $p17);
    goto corral_source_split_9473;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i18);
    goto corral_source_split_9474;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 536870912);
    goto corral_source_split_9475;

  corral_source_split_9475:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    goto corral_source_split_9481;

  corral_source_split_9481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2333} vslice_dummy_var_210 := seq_puts($p0, .str.67);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_9483;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.1, $p24);
    goto corral_source_split_9484;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    $i26 := $zext.i32.i64($i25);
    goto corral_source_split_9485;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 134217728);
    goto corral_source_split_9486;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_9487;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_9492;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.1, $p30);
    goto corral_source_split_9493;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64($i31);
    goto corral_source_split_9494;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    $i33 := $and.i64($i32, 67108864);
    goto corral_source_split_9495;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 1912)), $mul.ref(1320, 1));
    goto corral_source_split_9501;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.1, $p36);
    goto corral_source_split_9502;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_9503;

  corral_source_split_9503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i38 == 1);
    goto corral_source_split_9508;

  corral_source_split_9508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2337} vslice_dummy_var_214 := seq_puts($p0, .str.71);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 1912)), $mul.ref(8, 1));
    goto corral_source_split_9510;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.1, $p41);
    goto corral_source_split_9511;

  corral_source_split_9511:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 1912)), $mul.ref(120, 1));
    goto corral_source_split_9512;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.1, $p43);
    goto corral_source_split_9513;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 3816)), $mul.ref(940, 1));
    goto corral_source_split_9514;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.1, $p45);
    goto corral_source_split_9515;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2338} vslice_dummy_var_215 := seq_printf.ref.ref.i64.i32($p0, .str.72, $i42, $i46);
    goto corral_source_split_9516;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 1912)), $mul.ref(1188, 1));
    goto corral_source_split_9517;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.1, $p48);
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_9519;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1912)), $mul.ref(144, 1)), $mul.ref(121, 1));
    goto corral_source_split_9520;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.1, $p52);
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_9522;

  corral_source_split_9522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2339} vslice_dummy_var_216 := seq_printf.ref.ref.i32.i32($p0, .str.73, $i50, $i54);
    goto corral_source_split_9523;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref(0, 1912)), $mul.ref(1189, 1));
    goto corral_source_split_9524;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_9525;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p4, $mul.ref(0, 1912)), $mul.ref(1196, 1));
    goto corral_source_split_9526;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_9527;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1912)), $mul.ref(144, 1)), $mul.ref(128, 1));
    goto corral_source_split_9528;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    $i62 := $load.i16($M.1, $p61);
    goto corral_source_split_9529;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i62);
    goto corral_source_split_9530;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2340} vslice_dummy_var_217 := seq_printf.ref.ref.ref.ref.i32($p0, .str.74, $p57, $p59, $i63);
    goto corral_source_split_9531;

  corral_source_split_9531:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1912)), $mul.ref(144, 1)), $mul.ref(120, 1));
    goto corral_source_split_9532;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.1, $p66);
    goto corral_source_split_9533;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_9534;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p4, $mul.ref(0, 1912)), $mul.ref(1168, 1));
    goto corral_source_split_9535;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.1, $p69);
    goto corral_source_split_9536;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_9537;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2341} vslice_dummy_var_218 := seq_printf.ref.ref.i32.i32($p0, .str.75, $i68, $i71);
    goto corral_source_split_9538;

  corral_source_split_9538:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p4, $mul.ref(0, 1912)), $mul.ref(1324, 1));
    goto corral_source_split_9539;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.1, $p73);
    goto corral_source_split_9540;

  corral_source_split_9540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2342} vslice_dummy_var_219 := seq_printf.ref.ref.i32($p0, .str.76, $i74);
    goto corral_source_split_9541;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p4, $mul.ref(0, 1912)), $mul.ref(1348, 1));
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.1, $p76);
    goto corral_source_split_9543;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2343} vslice_dummy_var_220 := seq_printf.ref.ref.i32($p0, .str.77, $i77);
    goto corral_source_split_9544;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p4, $mul.ref(0, 1912)), $mul.ref(1328, 1));
    goto corral_source_split_9545;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.1, $p79);
    goto corral_source_split_9546;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2344} vslice_dummy_var_221 := seq_printf.ref.ref.i32($p0, .str.78, $i80);
    goto corral_source_split_9547;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p4, $mul.ref(0, 1912)), $mul.ref(1332, 1));
    goto corral_source_split_9548;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.1, $p82);
    goto corral_source_split_9549;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2345} vslice_dummy_var_222 := seq_printf.ref.ref.i32($p0, .str.79, $i83);
    goto corral_source_split_9550;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p4, $mul.ref(0, 1912)), $mul.ref(1336, 1));
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.1, $p85);
    goto corral_source_split_9552;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2346} vslice_dummy_var_223 := seq_printf.ref.ref.i32($p0, .str.80, $i86);
    goto corral_source_split_9553;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p4, $mul.ref(0, 1912)), $mul.ref(1340, 1));
    goto corral_source_split_9554;

  corral_source_split_9554:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.1, $p88);
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2347} vslice_dummy_var_224 := seq_printf.ref.ref.i32($p0, .str.81, $i89);
    goto corral_source_split_9556;

  corral_source_split_9556:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p4, $mul.ref(0, 1912)), $mul.ref(1344, 1));
    goto corral_source_split_9557;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.1, $p91);
    goto corral_source_split_9558;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2348} vslice_dummy_var_225 := seq_printf.ref.ref.i32($p0, .str.82, $i92);
    goto corral_source_split_9559;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p4, $mul.ref(0, 1912)), $mul.ref(1356, 1));
    goto corral_source_split_9560;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2349} $i95 := atomic_read($p94);
    call {:si_unique_call 2350} {:cexpr "tmp"} boogie_si_record_i32($i95);
    goto corral_source_split_9561;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2351} vslice_dummy_var_226 := seq_printf.ref.ref.i32($p0, .str.83, $i95);
    goto corral_source_split_9562;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p4, $mul.ref(0, 1912)), $mul.ref(1904, 1));
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.1, $p97);
    goto corral_source_split_9564;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2352} vslice_dummy_var_227 := seq_printf.ref.ref.i32($p0, .str.84, $i98);
    goto corral_source_split_9565;

  corral_source_split_9565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2353} vslice_dummy_var_228 := seq_puts($p0, .str.85);
    goto corral_source_split_9566;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    $i101 := $M.4;
    goto corral_source_split_9567;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2354} vslice_dummy_var_229 := seq_printf.ref.ref.i32($p0, .str.86, $i101);
    goto corral_source_split_9568;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    $i103 := $M.5;
    goto corral_source_split_9569;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    $i104 := $zext.i16.i32($i103);
    goto corral_source_split_9570;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2355} vslice_dummy_var_230 := seq_printf.ref.ref.i32($p0, .str.87, $i104);
    goto corral_source_split_9571;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb13:
    assume $i38 == 1;
    goto corral_source_split_9505;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2336} vslice_dummy_var_213 := seq_puts($p0, .str.70);
    goto corral_source_split_9506;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i34 == 1;
    goto corral_source_split_9498;

  corral_source_split_9498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2335} vslice_dummy_var_212 := seq_puts($p0, .str.69);
    goto corral_source_split_9499;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_9489;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2334} vslice_dummy_var_211 := seq_puts($p0, .str.68);
    goto corral_source_split_9490;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_9478;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2332} vslice_dummy_var_209 := seq_puts($p0, .str.66);
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_9466;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1912)), $mul.ref(144, 1)), $mul.ref(40, 1));
    goto corral_source_split_9467;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_9468;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2330} vslice_dummy_var_207 := seq_printf.ref.ref.ref($p0, .str.64, $p14);
    goto corral_source_split_9469;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const proc_show_stat: ref;

axiom proc_show_stat == $sub.ref(0, 576564);

procedure proc_show_stat($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation proc_show_stat($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i32;
  var vslice_dummy_var_231: i32;
  var vslice_dummy_var_232: i32;
  var vslice_dummy_var_233: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9573;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(248, 1));
    goto corral_source_split_9574;

  corral_source_split_9574:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.33, $p2);
    goto corral_source_split_9575;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9576;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2356} vslice_dummy_var_231 := seq_puts($p0, .str.51);
    goto corral_source_split_9577;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 1912)), $mul.ref(1184, 1));
    goto corral_source_split_9578;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2357} $i7 := atomic_read($p6);
    call {:si_unique_call 2358} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_9579;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2359} vslice_dummy_var_232 := seq_printf.ref.ref.i32($p0, .str.52, $i7);
    goto corral_source_split_9580;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2360} vslice_dummy_var_233 := seq_puts($p0, .str.53);
    goto corral_source_split_9581;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const proc_show_mbox: ref;

axiom proc_show_mbox == $sub.ref(0, 577596);

procedure proc_show_mbox($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation proc_show_mbox($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $p24: ref;
  var $i25: i32;
  var $p28: ref;
  var $i29: i32;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var vslice_dummy_var_234: i32;
  var vslice_dummy_var_235: i32;
  var vslice_dummy_var_236: i32;
  var vslice_dummy_var_237: i32;
  var vslice_dummy_var_238: i32;
  var vslice_dummy_var_239: i32;
  var vslice_dummy_var_240: i32;
  var vslice_dummy_var_241: i32;
  var vslice_dummy_var_242: i32;
  var vslice_dummy_var_243: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9583;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(248, 1));
    goto corral_source_split_9584;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.33, $p2);
    goto corral_source_split_9585;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9586;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1912)), $mul.ref(48, 1));
    goto corral_source_split_9587;

  corral_source_split_9587:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_9588;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2361} vslice_dummy_var_234 := seq_puts($p0, .str.88);
    goto corral_source_split_9589;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9590;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.34, $p9);
    goto corral_source_split_9591;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_9592;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2362} vslice_dummy_var_235 := seq_printf.ref.ref.i32($p0, .str.89, $i11);
    goto corral_source_split_9593;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_9594;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.35, $p14);
    goto corral_source_split_9595;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2363} vslice_dummy_var_236 := seq_printf.ref.ref.i32($p0, .str.90, $i16);
    goto corral_source_split_9597;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_9598;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.36, $p19);
    goto corral_source_split_9599;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_9600;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2364} vslice_dummy_var_237 := seq_printf.ref.ref.i32($p0, .str.91, $i21);
    goto corral_source_split_9601;

  corral_source_split_9601:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_9602;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.37, $p24);
    goto corral_source_split_9603;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2365} vslice_dummy_var_238 := seq_printf.ref.ref.i32($p0, .str.92, $i25);
    goto corral_source_split_9604;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_9605;

  corral_source_split_9605:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.38, $p28);
    goto corral_source_split_9606;

  corral_source_split_9606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2366} vslice_dummy_var_239 := seq_printf.ref.ref.i32($p0, .str.93, $i29);
    goto corral_source_split_9607;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_9608;

  corral_source_split_9608:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.39, $p32);
    goto corral_source_split_9609;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_9610;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2367} vslice_dummy_var_240 := seq_printf.ref.ref.i32($p0, .str.94, $i34);
    goto corral_source_split_9611;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(13, 1));
    goto corral_source_split_9612;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.40, $p37);
    goto corral_source_split_9613;

  corral_source_split_9613:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_9614;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2368} vslice_dummy_var_241 := seq_printf.ref.ref.i32($p0, .str.95, $i39);
    goto corral_source_split_9615;

  corral_source_split_9615:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_9616;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.41, $p42);
    goto corral_source_split_9617;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_9618;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2369} vslice_dummy_var_242 := seq_printf.ref.ref.i32($p0, .str.96, $i44);
    goto corral_source_split_9619;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_9620;

  corral_source_split_9620:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.42, $p47);
    goto corral_source_split_9621;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_9622;

  corral_source_split_9622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2370} vslice_dummy_var_243 := seq_printf.ref.ref.i32($p0, .str.97, $i49);
    goto corral_source_split_9623;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const proc_show_rebuild_rate: ref;

axiom proc_show_rebuild_rate == $sub.ref(0, 578628);

procedure proc_show_rebuild_rate($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.1, $CurrAddr, $M.19, $M.20, $M.21, assertsPassed;



implementation proc_show_rebuild_rate($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i14: i64;
  var $i15: i32;
  var $i16: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $p29: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var vslice_dummy_var_244: i32;
  var vslice_dummy_var_245: i32;
  var vslice_dummy_var_246: i32;
  var vslice_dummy_var_247: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2371} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2372} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_9625;

  corral_source_split_9625:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(248, 1));
    goto corral_source_split_9626;

  corral_source_split_9626:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.33, $p4);
    goto corral_source_split_9627;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_9628;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2373} $i7 := make_local_pdev($p6, $p3);
    call {:si_unique_call 2374} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_9630;

  corral_source_split_9630:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.26, $p3);
    goto corral_source_split_9634;

  corral_source_split_9634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2375} $p10 := mega_allocate_inquiry($p2, $p9);
    goto corral_source_split_9635;

  corral_source_split_9635:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_9636;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_9637;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_9638;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.44, $p2);
    goto corral_source_split_9645;

  corral_source_split_9645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2377} $i15 := mega_adapinq($p6, $i14);
    goto SeqInstr_601, SeqInstr_602;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  SeqInstr_603:
    call {:si_unique_call 2378} {:cexpr "tmp___1"} boogie_si_record_i32($i15);
    goto corral_source_split_9646;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_9647;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_9658;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.1, $p19);
    goto corral_source_split_9659;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    $i21 := $zext.i32.i64($i20);
    goto corral_source_split_9660;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 134217728);
    goto corral_source_split_9661;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_9662;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i23 == 1);
    goto corral_source_split_9671;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p11);
    goto corral_source_split_9672;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($p29, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_9673;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.43, $p32);
    goto corral_source_split_9674;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_9675;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2383} vslice_dummy_var_247 := seq_printf.ref.ref.i32($p0, .str.50, $i34);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p11);
    goto corral_source_split_9653;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.44, $p2);
    goto corral_source_split_9654;

  corral_source_split_9654:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.26, $p3);
    goto corral_source_split_9655;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2381} mega_free_inquiry($p36, $i37, $p38);
    goto corral_source_split_9656;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.26, $p3);
    goto corral_source_split_9642;

  corral_source_split_9642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2376} free_local_pdev($p39);
    goto corral_source_split_9643;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb13:
    assume $i23 == 1;
    goto corral_source_split_9664;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p11);
    goto corral_source_split_9665;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 1028)), $mul.ref(132, 1));
    goto corral_source_split_9666;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.43, $p25);
    goto corral_source_split_9667;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_9668;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2382} vslice_dummy_var_246 := seq_printf.ref.ref.i32($p0, .str.50, $i27);
    goto corral_source_split_9669;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb9:
    assume $i16 == 1;
    goto corral_source_split_9649;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2379} vslice_dummy_var_244 := seq_puts($p0, .str.7);
    goto corral_source_split_9650;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2380} vslice_dummy_var_245 := printk.ref(.str.8);
    goto corral_source_split_9651;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_601:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_9640;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_9632;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const proc_show_battery: ref;

axiom proc_show_battery == $sub.ref(0, 579660);

procedure proc_show_battery($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.1, $CurrAddr, $M.19, $M.20, $M.21, assertsPassed;



implementation proc_show_battery($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i14: i64;
  var $i15: i32;
  var $i16: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $p28: ref;
  var $p31: ref;
  var $i32: i8;
  var $i27: i8;
  var $i33: i32;
  var $i35: i32;
  var $i36: i1;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $i62: i32;
  var $i63: i32;
  var $i64: i1;
  var $p67: ref;
  var $i68: i64;
  var $p69: ref;
  var $p70: ref;
  var vslice_dummy_var_248: i32;
  var vslice_dummy_var_249: i32;
  var vslice_dummy_var_250: i32;
  var vslice_dummy_var_251: i32;
  var vslice_dummy_var_252: i32;
  var vslice_dummy_var_253: i32;
  var vslice_dummy_var_254: i32;
  var vslice_dummy_var_255: i32;
  var vslice_dummy_var_256: i32;
  var vslice_dummy_var_257: i32;
  var vslice_dummy_var_258: i32;
  var vslice_dummy_var_259: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2384} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2385} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_9677;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(248, 1));
    goto corral_source_split_9678;

  corral_source_split_9678:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.33, $p4);
    goto corral_source_split_9679;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_9680;

  corral_source_split_9680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2386} $i7 := make_local_pdev($p6, $p3);
    call {:si_unique_call 2387} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_9681;

  corral_source_split_9681:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_9682;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.26, $p3);
    goto corral_source_split_9686;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2388} $p10 := mega_allocate_inquiry($p2, $p9);
    goto corral_source_split_9687;

  corral_source_split_9687:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_9689;

  corral_source_split_9689:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_9690;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.44, $p2);
    goto corral_source_split_9697;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2390} $i15 := mega_adapinq($p6, $i14);
    goto SeqInstr_604, SeqInstr_605;

  SeqInstr_605:
    assume assertsPassed;
    goto SeqInstr_606;

  SeqInstr_606:
    call {:si_unique_call 2391} {:cexpr "tmp___1"} boogie_si_record_i32($i15);
    goto corral_source_split_9698;

  corral_source_split_9698:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_9699;

  corral_source_split_9699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_9710;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.1, $p19);
    goto corral_source_split_9711;

  corral_source_split_9711:
    assume {:verifier.code 0} true;
    $i21 := $zext.i32.i64($i20);
    goto corral_source_split_9712;

  corral_source_split_9712:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 134217728);
    goto corral_source_split_9713;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_9714;

  corral_source_split_9714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i23 == 1);
    goto corral_source_split_9721;

  corral_source_split_9721:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p11);
    goto corral_source_split_9722;

  corral_source_split_9722:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($add.ref($p28, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(22, 1));
    goto corral_source_split_9723;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.43, $p31);
    call {:si_unique_call 2396} {:cexpr "battery_status"} boogie_si_record_i8($i32);
    assume {:verifier.code 0} true;
    $i27 := $i32;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_9725;

  corral_source_split_9725:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i27);
    goto corral_source_split_9726;

  corral_source_split_9726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2397} vslice_dummy_var_250 := seq_printf.ref.ref.i32($p0, .str.54, $i33);
    goto corral_source_split_9727;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i27);
    goto corral_source_split_9728;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_9729;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i27);
    goto corral_source_split_9734;

  corral_source_split_9734:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 1);
    goto corral_source_split_9735;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_9736;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i27);
    goto corral_source_split_9741;

  corral_source_split_9741:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 2);
    goto corral_source_split_9742;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_9743;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i27);
    goto corral_source_split_9748;

  corral_source_split_9748:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, 4);
    goto corral_source_split_9749;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_9750;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i27);
    goto corral_source_split_9755;

  corral_source_split_9755:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i50, 8);
    goto corral_source_split_9756;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_9757;

  corral_source_split_9757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i27);
    goto corral_source_split_9762;

  corral_source_split_9762:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 16);
    goto corral_source_split_9763;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_9764;

  corral_source_split_9764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i27);
    goto corral_source_split_9769;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    $i59 := $and.i32($i58, 32);
    goto corral_source_split_9770;

  corral_source_split_9770:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_9771;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i27);
    goto corral_source_split_9776;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    $i63 := $and.i32($i62, 64);
    goto corral_source_split_9777;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_9778;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2406} vslice_dummy_var_259 := seq_putc($p0, 10);
    goto corral_source_split_9783;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p11);
    goto corral_source_split_9705;

  corral_source_split_9705:
    assume {:verifier.code 0} true;
    $i68 := $load.i64($M.44, $p2);
    goto corral_source_split_9706;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.26, $p3);
    goto corral_source_split_9707;

  corral_source_split_9707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2394} mega_free_inquiry($p67, $i68, $p69);
    goto corral_source_split_9708;

  corral_source_split_9708:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.26, $p3);
    goto corral_source_split_9694;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2389} free_local_pdev($p70);
    goto corral_source_split_9695;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb37:
    assume $i64 == 1;
    goto corral_source_split_9780;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2405} vslice_dummy_var_258 := seq_puts($p0, .str.62);
    goto corral_source_split_9781;

  corral_source_split_9781:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume $i60 == 1;
    goto corral_source_split_9773;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2404} vslice_dummy_var_257 := seq_puts($p0, .str.61);
    goto corral_source_split_9774;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume $i56 == 1;
    goto corral_source_split_9766;

  corral_source_split_9766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2403} vslice_dummy_var_256 := seq_puts($p0, .str.60);
    goto corral_source_split_9767;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume $i52 == 1;
    goto corral_source_split_9759;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2402} vslice_dummy_var_255 := seq_puts($p0, .str.59);
    goto corral_source_split_9760;

  corral_source_split_9760:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i48 == 1;
    goto corral_source_split_9752;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2401} vslice_dummy_var_254 := seq_puts($p0, .str.58);
    goto corral_source_split_9753;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i44 == 1;
    goto corral_source_split_9745;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2400} vslice_dummy_var_253 := seq_puts($p0, .str.57);
    goto corral_source_split_9746;

  corral_source_split_9746:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i40 == 1;
    goto corral_source_split_9738;

  corral_source_split_9738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2399} vslice_dummy_var_252 := seq_puts($p0, .str.56);
    goto corral_source_split_9739;

  corral_source_split_9739:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i36 == 1;
    goto corral_source_split_9731;

  corral_source_split_9731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2398} vslice_dummy_var_251 := seq_puts($p0, .str.55);
    goto corral_source_split_9732;

  corral_source_split_9732:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i23 == 1;
    goto corral_source_split_9716;

  corral_source_split_9716:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p11);
    goto corral_source_split_9717;

  corral_source_split_9717:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 1028)), $mul.ref(136, 1));
    goto corral_source_split_9718;

  corral_source_split_9718:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.43, $p25);
    call {:si_unique_call 2395} {:cexpr "battery_status"} boogie_si_record_i8($i26);
    goto corral_source_split_9719;

  corral_source_split_9719:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb15;

  $bb9:
    assume $i16 == 1;
    goto corral_source_split_9701;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2392} vslice_dummy_var_248 := seq_puts($p0, .str.7);
    goto corral_source_split_9702;

  corral_source_split_9702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2393} vslice_dummy_var_249 := printk.ref(.str.8);
    goto corral_source_split_9703;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_604:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_9692;

  corral_source_split_9692:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_9684;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const proc_show_pdrv_ch0: ref;

axiom proc_show_pdrv_ch0 == $sub.ref(0, 580692);

procedure proc_show_pdrv_ch0($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.1, $M.47, $M.19, $M.49, $CurrAddr, $M.20, $M.21, assertsPassed;



implementation proc_show_pdrv_ch0($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9785;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(248, 1));
    goto corral_source_split_9786;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.33, $p2);
    goto corral_source_split_9787;

  corral_source_split_9787:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9788;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2407} $i5 := proc_show_pdrv($p0, $p4, 0);
    goto SeqInstr_607, SeqInstr_608;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  SeqInstr_609:
    call {:si_unique_call 2408} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_9789;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_607:
    assume !assertsPassed;
    return;
}



const proc_show_pdrv_ch1: ref;

axiom proc_show_pdrv_ch1 == $sub.ref(0, 581724);

procedure proc_show_pdrv_ch1($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.1, $M.47, $M.19, $M.49, $CurrAddr, $M.20, $M.21, assertsPassed;



implementation proc_show_pdrv_ch1($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9791;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(248, 1));
    goto corral_source_split_9792;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.33, $p2);
    goto corral_source_split_9793;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9794;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2409} $i5 := proc_show_pdrv($p0, $p4, 1);
    goto SeqInstr_610, SeqInstr_611;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  SeqInstr_612:
    call {:si_unique_call 2410} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_9795;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_610:
    assume !assertsPassed;
    return;
}



const proc_show_pdrv_ch2: ref;

axiom proc_show_pdrv_ch2 == $sub.ref(0, 582756);

procedure proc_show_pdrv_ch2($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.1, $M.47, $M.19, $M.49, $CurrAddr, $M.20, $M.21, assertsPassed;



implementation proc_show_pdrv_ch2($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9797;

  corral_source_split_9797:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(248, 1));
    goto corral_source_split_9798;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.33, $p2);
    goto corral_source_split_9799;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9800;

  corral_source_split_9800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2411} $i5 := proc_show_pdrv($p0, $p4, 2);
    goto SeqInstr_613, SeqInstr_614;

  SeqInstr_614:
    assume assertsPassed;
    goto SeqInstr_615;

  SeqInstr_615:
    call {:si_unique_call 2412} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_9801;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_613:
    assume !assertsPassed;
    return;
}



const proc_show_pdrv_ch3: ref;

axiom proc_show_pdrv_ch3 == $sub.ref(0, 583788);

procedure proc_show_pdrv_ch3($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.1, $M.47, $M.19, $M.49, $CurrAddr, $M.20, $M.21, assertsPassed;



implementation proc_show_pdrv_ch3($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9803;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(248, 1));
    goto corral_source_split_9804;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.33, $p2);
    goto corral_source_split_9805;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9806;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2413} $i5 := proc_show_pdrv($p0, $p4, 3);
    goto SeqInstr_616, SeqInstr_617;

  SeqInstr_617:
    assume assertsPassed;
    goto SeqInstr_618;

  SeqInstr_618:
    call {:si_unique_call 2414} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_9807;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_616:
    assume !assertsPassed;
    return;
}



const proc_show_rdrv_10: ref;

axiom proc_show_rdrv_10 == $sub.ref(0, 584820);

procedure proc_show_rdrv_10($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.1, $M.19, $CurrAddr, $M.20, $M.21, assertsPassed;



implementation proc_show_rdrv_10($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9809;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(248, 1));
    goto corral_source_split_9810;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.33, $p2);
    goto corral_source_split_9811;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9812;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2415} $i5 := proc_show_rdrv($p0, $p4, 0, 9);
    goto SeqInstr_619, SeqInstr_620;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  SeqInstr_621:
    call {:si_unique_call 2416} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_9813;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_619:
    assume !assertsPassed;
    return;
}



const proc_show_rdrv_20: ref;

axiom proc_show_rdrv_20 == $sub.ref(0, 585852);

procedure proc_show_rdrv_20($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.1, $M.19, $CurrAddr, $M.20, $M.21, assertsPassed;



implementation proc_show_rdrv_20($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9815;

  corral_source_split_9815:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(248, 1));
    goto corral_source_split_9816;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.33, $p2);
    goto corral_source_split_9817;

  corral_source_split_9817:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9818;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2417} $i5 := proc_show_rdrv($p0, $p4, 10, 19);
    goto SeqInstr_622, SeqInstr_623;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  SeqInstr_624:
    call {:si_unique_call 2418} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_9819;

  corral_source_split_9819:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_622:
    assume !assertsPassed;
    return;
}



const proc_show_rdrv_30: ref;

axiom proc_show_rdrv_30 == $sub.ref(0, 586884);

procedure proc_show_rdrv_30($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.1, $M.19, $CurrAddr, $M.20, $M.21, assertsPassed;



implementation proc_show_rdrv_30($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9821;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(248, 1));
    goto corral_source_split_9822;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.33, $p2);
    goto corral_source_split_9823;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9824;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2419} $i5 := proc_show_rdrv($p0, $p4, 20, 29);
    goto SeqInstr_625, SeqInstr_626;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  SeqInstr_627:
    call {:si_unique_call 2420} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_9825;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_625:
    assume !assertsPassed;
    return;
}



const proc_show_rdrv_40: ref;

axiom proc_show_rdrv_40 == $sub.ref(0, 587916);

procedure proc_show_rdrv_40($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.1, $M.19, $CurrAddr, $M.20, $M.21, assertsPassed;



implementation proc_show_rdrv_40($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9827;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(248, 1));
    goto corral_source_split_9828;

  corral_source_split_9828:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.33, $p2);
    goto corral_source_split_9829;

  corral_source_split_9829:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9830;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2421} $i5 := proc_show_rdrv($p0, $p4, 30, 39);
    goto SeqInstr_628, SeqInstr_629;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  SeqInstr_630:
    call {:si_unique_call 2422} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_9831;

  corral_source_split_9831:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_628:
    assume !assertsPassed;
    return;
}



const proc_show_rdrv: ref;

axiom proc_show_rdrv == $sub.ref(0, 588948);

procedure proc_show_rdrv($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.1, $M.19, $CurrAddr, $M.20, $M.21, assertsPassed;



implementation proc_show_rdrv($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i15: i64;
  var $i16: i32;
  var $i17: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $p36: ref;
  var $p39: ref;
  var $p41: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $p47: ref;
  var $i48: i64;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $i53: i64;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $p74: ref;
  var $i75: i32;
  var $i76: i64;
  var $i77: i64;
  var $i78: i1;
  var $i79: i64;
  var $p80: ref;
  var $p83: ref;
  var $i85: i64;
  var $p86: ref;
  var $p89: ref;
  var $p84: ref;
  var $i91: i64;
  var $p92: ref;
  var $i93: i8;
  var $i94: i32;
  var $i95: i32;
  var $i96: i1;
  var $i97: i64;
  var $p98: ref;
  var $i99: i8;
  var $i100: i32;
  var $i101: i32;
  var $i102: i1;
  var $i103: i64;
  var $p104: ref;
  var $i105: i8;
  var $i106: i32;
  var $i107: i32;
  var $i108: i1;
  var $i109: i64;
  var $p110: ref;
  var $i111: i8;
  var $i112: i32;
  var $i113: i32;
  var $i114: i1;
  var $i120: i64;
  var $p121: ref;
  var $i122: i8;
  var $i123: i32;
  var $i124: i32;
  var $i125: i1;
  var $i127: i64;
  var $p128: ref;
  var $i129: i8;
  var $i130: i32;
  var $i131: i32;
  var $i132: i1;
  var $p135: ref;
  var $i136: i8;
  var $i137: i32;
  var $p139: ref;
  var $i140: i8;
  var $i141: i32;
  var $p143: ref;
  var $i144: i8;
  var $i145: i32;
  var $i146: i1;
  var $p147: ref;
  var $i148: i8;
  var $i149: i32;
  var $i150: i32;
  var $i151: i32;
  var $p153: ref;
  var $i154: i8;
  var $i155: i32;
  var $p158: ref;
  var $i159: i8;
  var $i160: i32;
  var $i161: i1;
  var $p162: ref;
  var $i163: i8;
  var $i164: i32;
  var $i165: i1;
  var $p166: ref;
  var $i167: i8;
  var $i168: i32;
  var $i169: i1;
  var $p174: ref;
  var $i175: i8;
  var $i176: i32;
  var $i177: i1;
  var $p178: ref;
  var $i179: i8;
  var $i180: i32;
  var $i181: i1;
  var $p185: ref;
  var $i186: i8;
  var $i187: i32;
  var $i188: i1;
  var $p189: ref;
  var $i190: i8;
  var $i191: i32;
  var $i192: i1;
  var $i195: i32;
  var $i73: i32;
  var $i196: i32;
  var $i197: i1;
  var $i198: i32;
  var $i199: i32;
  var $i200: i1;
  var $p201: ref;
  var $i202: i64;
  var $i203: i64;
  var $p204: ref;
  var $i205: i64;
  var $p206: ref;
  var $p207: ref;
  var cmdloc_dummy_var_106: [ref]i8;
  var cmdloc_dummy_var_107: [ref]i8;
  var vslice_dummy_var_260: i32;
  var vslice_dummy_var_261: i32;
  var vslice_dummy_var_262: i32;
  var vslice_dummy_var_263: i32;
  var vslice_dummy_var_264: i32;
  var vslice_dummy_var_265: i32;
  var vslice_dummy_var_266: i32;
  var vslice_dummy_var_267: i32;
  var vslice_dummy_var_268: i32;
  var vslice_dummy_var_269: i32;
  var vslice_dummy_var_270: i32;
  var vslice_dummy_var_271: i32;
  var vslice_dummy_var_272: i32;
  var vslice_dummy_var_273: i32;
  var vslice_dummy_var_274: i32;
  var vslice_dummy_var_275: i32;
  var vslice_dummy_var_276: i32;
  var vslice_dummy_var_277: i32;
  var vslice_dummy_var_278: i32;
  var vslice_dummy_var_279: i32;
  var vslice_dummy_var_280: i32;
  var vslice_dummy_var_281: i32;
  var vslice_dummy_var_282: i32;
  var vslice_dummy_var_283: i32;
  var vslice_dummy_var_284: i32;
  var vslice_dummy_var_285: i32;
  var vslice_dummy_var_286: i32;
  var vslice_dummy_var_287: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2423} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2424} $p5 := $alloc($mul.ref(20, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2425} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2426} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 2427} {:cexpr "proc_show_rdrv:arg:start"} boogie_si_record_i32($i2);
    call {:si_unique_call 2428} {:cexpr "proc_show_rdrv:arg:end"} boogie_si_record_i32($i3);
    goto corral_source_split_9833;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2429} $i8 := make_local_pdev($p1, $p7);
    call {:si_unique_call 2430} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_9834;

  corral_source_split_9834:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_9835;

  corral_source_split_9835:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.26, $p7);
    goto corral_source_split_9839;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2431} $p11 := mega_allocate_inquiry($p4, $p10);
    goto corral_source_split_9840;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_9841;

  corral_source_split_9841:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_9842;

  corral_source_split_9842:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_9843;

  corral_source_split_9843:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.44, $p4);
    goto corral_source_split_9850;

  corral_source_split_9850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2433} $i16 := mega_adapinq($p1, $i15);
    goto SeqInstr_631, SeqInstr_632;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  SeqInstr_633:
    call {:si_unique_call 2434} {:cexpr "tmp___1"} boogie_si_record_i32($i16);
    goto corral_source_split_9851;

  corral_source_split_9851:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_9852;

  corral_source_split_9852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p5);
    goto corral_source_split_9863;

  corral_source_split_9863:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_106 := $M.1;
    call {:si_unique_call 2438} cmdloc_dummy_var_107 := $memset.i8(cmdloc_dummy_var_106, $p20, 0, 18, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_107;
    goto corral_source_split_9864;

  corral_source_split_9864:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_9865;

  corral_source_split_9865:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.1, $p21);
    goto corral_source_split_9866;

  corral_source_split_9866:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i22);
    goto corral_source_split_9867;

  corral_source_split_9867:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 134217728);
    goto corral_source_split_9868;

  corral_source_split_9868:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_9869;

  corral_source_split_9869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i25 == 1);
    goto corral_source_split_9880;

  corral_source_split_9880:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p12);
    goto corral_source_split_9881;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($p36, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(44, 1));
    goto corral_source_split_9882;

  corral_source_split_9882:
    assume {:verifier.code 0} true;
    goto corral_source_split_9883;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p12);
    goto corral_source_split_9884;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($p41, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_9885;

  corral_source_split_9885:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.43, $p44);
    goto corral_source_split_9886;

  corral_source_split_9886:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    call {:si_unique_call 2440} {:cexpr "num_ldrv"} boogie_si_record_i32($i46);
    assume {:verifier.code 0} true;
    $p33, $i34, $i35 := $p39, $i46, 2204;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9888;

  corral_source_split_9888:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.26, $p7);
    goto corral_source_split_9889;

  corral_source_split_9889:
    assume {:verifier.code 0} true;
    $i48 := $zext.i32.i64($i35);
    goto corral_source_split_9890;

  corral_source_split_9890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2441} $p49 := pci_alloc_consistent($p47, $i48, $p6);
    goto corral_source_split_9891;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_9892;

  corral_source_split_9892:
    assume {:verifier.code 0} true;
    $i51 := $eq.i64($i50, 0);
    goto corral_source_split_9893;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.46, $p6);
    goto corral_source_split_9898;

  corral_source_split_9898:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i64.i32($i53);
    goto corral_source_split_9899;

  corral_source_split_9899:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p5, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_9900;

  corral_source_split_9900:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p55, $i54);
    goto corral_source_split_9901;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_9902;

  corral_source_split_9902:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.1, $p56);
    goto corral_source_split_9903;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    $i58 := $zext.i32.i64($i57);
    goto corral_source_split_9904;

  corral_source_split_9904:
    assume {:verifier.code 0} true;
    $i59 := $and.i64($i58, 134217728);
    goto corral_source_split_9905;

  corral_source_split_9905:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_9906;

  corral_source_split_9906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i60 == 1);
    goto corral_source_split_9916;

  corral_source_split_9916:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p5, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_9917;

  corral_source_split_9917:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p66, 103);
    goto corral_source_split_9918;

  corral_source_split_9918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2445} $i67 := mega_internal_command($p1, $p5, $0.ref);
    goto SeqInstr_637, SeqInstr_638;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  SeqInstr_639:
    call {:si_unique_call 2446} {:cexpr "tmp___5"} boogie_si_record_i32($i67);
    goto corral_source_split_9919;

  corral_source_split_9919:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_9920;

  corral_source_split_9920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    call {:si_unique_call 2449} {:cexpr "proc_show_rdrv:arg:i"} boogie_si_record_i32($i2);
    goto corral_source_split_9930;

  corral_source_split_9930:
    assume {:verifier.code 0} true;
    $i73 := $i2;
    goto $bb32;

  $bb32:
    call $p74, $i75, $i76, $i77, $i78, $i79, $p80, $p83, $i85, $p86, $p89, $p84, $i91, $p92, $i93, $i94, $i95, $i96, $i97, $p98, $i99, $i100, $i101, $i102, $i103, $p104, $i105, $i106, $i107, $i108, $i109, $p110, $i111, $i112, $i113, $i114, $i120, $p121, $i122, $i123, $i124, $i125, $i127, $p128, $i129, $i130, $i131, $i132, $p135, $i136, $i137, $p139, $i140, $i141, $p143, $i144, $i145, $i146, $p147, $i148, $i149, $i150, $i151, $p153, $i154, $i155, $p158, $i159, $i160, $i161, $p162, $i163, $i164, $i165, $p166, $i167, $i168, $i169, $p174, $i175, $i176, $i177, $p178, $i179, $i180, $i181, $p185, $i186, $i187, $i188, $p189, $i190, $i191, $i192, $i195, $i73, $i196, $i197, $i198, $i199, $i200, vslice_dummy_var_265, vslice_dummy_var_266, vslice_dummy_var_267, vslice_dummy_var_268, vslice_dummy_var_269, vslice_dummy_var_270, vslice_dummy_var_271, vslice_dummy_var_272, vslice_dummy_var_273, vslice_dummy_var_274, vslice_dummy_var_275, vslice_dummy_var_276, vslice_dummy_var_277, vslice_dummy_var_278, vslice_dummy_var_279, vslice_dummy_var_280, vslice_dummy_var_281, vslice_dummy_var_282, vslice_dummy_var_283, vslice_dummy_var_284, vslice_dummy_var_285, vslice_dummy_var_286, vslice_dummy_var_287 := proc_show_rdrv_loop_$bb32($p0, $p1, $i3, $p33, $i34, $p49, $p74, $i75, $i76, $i77, $i78, $i79, $p80, $p83, $i85, $p86, $p89, $p84, $i91, $p92, $i93, $i94, $i95, $i96, $i97, $p98, $i99, $i100, $i101, $i102, $i103, $p104, $i105, $i106, $i107, $i108, $i109, $p110, $i111, $i112, $i113, $i114, $i120, $p121, $i122, $i123, $i124, $i125, $i127, $p128, $i129, $i130, $i131, $i132, $p135, $i136, $i137, $p139, $i140, $i141, $p143, $i144, $i145, $i146, $p147, $i148, $i149, $i150, $i151, $p153, $i154, $i155, $p158, $i159, $i160, $i161, $p162, $i163, $i164, $i165, $p166, $i167, $i168, $i169, $p174, $i175, $i176, $i177, $p178, $i179, $i180, $i181, $p185, $i186, $i187, $i188, $p189, $i190, $i191, $i192, $i195, $i73, $i196, $i197, $i198, $i199, $i200, vslice_dummy_var_265, vslice_dummy_var_266, vslice_dummy_var_267, vslice_dummy_var_268, vslice_dummy_var_269, vslice_dummy_var_270, vslice_dummy_var_271, vslice_dummy_var_272, vslice_dummy_var_273, vslice_dummy_var_274, vslice_dummy_var_275, vslice_dummy_var_276, vslice_dummy_var_277, vslice_dummy_var_278, vslice_dummy_var_279, vslice_dummy_var_280, vslice_dummy_var_281, vslice_dummy_var_282, vslice_dummy_var_283, vslice_dummy_var_284, vslice_dummy_var_285, vslice_dummy_var_286, vslice_dummy_var_287);
    goto $bb32_last;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    $i196 := $add.i32($i3, 1);
    goto corral_source_split_9942;

  corral_source_split_9942:
    assume {:verifier.code 0} true;
    $i197 := $slt.i32($i196, $i34);
    goto corral_source_split_9943;

  corral_source_split_9943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i197 == 1);
    goto corral_source_split_10128;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    $i199 := $i34;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto corral_source_split_10130;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    $i200 := $slt.i32($i73, $i199);
    goto corral_source_split_10131;

  corral_source_split_10131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p201 := $load.ref($M.26, $p7);
    goto corral_source_split_9925;

  corral_source_split_9925:
    assume {:verifier.code 0} true;
    $i202 := $zext.i32.i64($i35);
    goto corral_source_split_9926;

  corral_source_split_9926:
    assume {:verifier.code 0} true;
    $i203 := $load.i64($M.46, $p6);
    goto corral_source_split_9927;

  corral_source_split_9927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2448} pci_free_consistent($p201, $i202, $p49, $i203);
    goto corral_source_split_9928;

  corral_source_split_9928:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p204 := $bitcast.ref.ref($p12);
    goto corral_source_split_9858;

  corral_source_split_9858:
    assume {:verifier.code 0} true;
    $i205 := $load.i64($M.44, $p4);
    goto corral_source_split_9859;

  corral_source_split_9859:
    assume {:verifier.code 0} true;
    $p206 := $load.ref($M.26, $p7);
    goto corral_source_split_9860;

  corral_source_split_9860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2437} mega_free_inquiry($p204, $i205, $p206);
    goto corral_source_split_9861;

  corral_source_split_9861:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p207 := $load.ref($M.26, $p7);
    goto corral_source_split_9847;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2432} free_local_pdev($p207);
    goto corral_source_split_9848;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb102:
    assume $i200 == 1;
    goto corral_source_split_10133;

  corral_source_split_10133:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_9945;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.1, $p74);
    goto corral_source_split_9946;

  corral_source_split_9946:
    assume {:verifier.code 0} true;
    $i76 := $zext.i32.i64($i75);
    goto corral_source_split_9947;

  corral_source_split_9947:
    assume {:verifier.code 0} true;
    $i77 := $and.i64($i76, 134217728);
    goto corral_source_split_9948;

  corral_source_split_9948:
    assume {:verifier.code 0} true;
    $i78 := $ne.i64($i77, 0);
    goto corral_source_split_9949;

  corral_source_split_9949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i78 == 1);
    goto corral_source_split_9956;

  corral_source_split_9956:
    assume {:verifier.code 0} true;
    $i85 := $sext.i32.i64($i73);
    goto corral_source_split_9957;

  corral_source_split_9957:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p49);
    goto corral_source_split_9958;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($add.ref($p86, $mul.ref(0, 2204)), $mul.ref(4, 1)), $mul.ref($i85, 200)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $p84 := $p89;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_9960;

  corral_source_split_9960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2453} vslice_dummy_var_265 := seq_printf.ref.ref.i32($p0, .str.28, $i73);
    goto corral_source_split_9961;

  corral_source_split_9961:
    assume {:verifier.code 0} true;
    $i91 := $sext.i32.i64($i73);
    goto corral_source_split_9962;

  corral_source_split_9962:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($p33, $mul.ref($i91, 1));
    goto corral_source_split_9963;

  corral_source_split_9963:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.43, $p92);
    goto corral_source_split_9964;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i32($i93);
    goto corral_source_split_9965;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    $i95 := $and.i32($i94, 15);
    goto corral_source_split_9966;

  corral_source_split_9966:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i95, 0);
    goto corral_source_split_9967;

  corral_source_split_9967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i97 := $sext.i32.i64($i73);
    goto corral_source_split_9973;

  corral_source_split_9973:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($p33, $mul.ref($i97, 1));
    goto corral_source_split_9974;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    $i99 := $load.i8($M.43, $p98);
    goto corral_source_split_9975;

  corral_source_split_9975:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i32($i99);
    goto corral_source_split_9976;

  corral_source_split_9976:
    assume {:verifier.code 0} true;
    $i101 := $and.i32($i100, 15);
    goto corral_source_split_9977;

  corral_source_split_9977:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, 1);
    goto corral_source_split_9978;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i103 := $sext.i32.i64($i73);
    goto corral_source_split_9984;

  corral_source_split_9984:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($p33, $mul.ref($i103, 1));
    goto corral_source_split_9985;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    $i105 := $load.i8($M.43, $p104);
    goto corral_source_split_9986;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    $i106 := $zext.i8.i32($i105);
    goto corral_source_split_9987;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    $i107 := $and.i32($i106, 15);
    goto corral_source_split_9988;

  corral_source_split_9988:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, 2);
    goto corral_source_split_9989;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i109 := $sext.i32.i64($i73);
    goto corral_source_split_9995;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($p33, $mul.ref($i109, 1));
    goto corral_source_split_9996;

  corral_source_split_9996:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.43, $p110);
    goto corral_source_split_9997;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i111);
    goto corral_source_split_9998;

  corral_source_split_9998:
    assume {:verifier.code 0} true;
    $i113 := $and.i32($i112, 15);
    goto corral_source_split_9999;

  corral_source_split_9999:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 3);
    goto corral_source_split_10000;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2458} vslice_dummy_var_270 := seq_puts($p0, .str.33);
    goto corral_source_split_10006;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i120 := $sext.i32.i64($i73);
    goto corral_source_split_10008;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($p33, $mul.ref($i120, 1));
    goto corral_source_split_10009;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    $i122 := $load.i8($M.43, $p121);
    goto corral_source_split_10010;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    $i123 := $zext.i8.i32($i122);
    goto corral_source_split_10011;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    $i124 := $and.i32($i123, 240);
    goto corral_source_split_10012;

  corral_source_split_10012:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i124, 32);
    goto corral_source_split_10013;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i125 == 1);
    goto corral_source_split_10018;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    $i127 := $sext.i32.i64($i73);
    goto corral_source_split_10019;

  corral_source_split_10019:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($p33, $mul.ref($i127, 1));
    goto corral_source_split_10020;

  corral_source_split_10020:
    assume {:verifier.code 0} true;
    $i129 := $load.i8($M.43, $p128);
    goto corral_source_split_10021;

  corral_source_split_10021:
    assume {:verifier.code 0} true;
    $i130 := $zext.i8.i32($i129);
    goto corral_source_split_10022;

  corral_source_split_10022:
    assume {:verifier.code 0} true;
    $i131 := $and.i32($i130, 240);
    goto corral_source_split_10023;

  corral_source_split_10023:
    assume {:verifier.code 0} true;
    $i132 := $eq.i32($i131, 16);
    goto corral_source_split_10024;

  corral_source_split_10024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2460} vslice_dummy_var_272 := seq_putc($p0, 10);
    goto corral_source_split_10026;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p84, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_10027;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    $i136 := $load.i8($M.45, $p135);
    goto corral_source_split_10028;

  corral_source_split_10028:
    assume {:verifier.code 0} true;
    $i137 := $zext.i8.i32($i136);
    goto corral_source_split_10029;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2461} vslice_dummy_var_273 := seq_printf.ref.ref.i32($p0, .str.36, $i137);
    goto corral_source_split_10030;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p84, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_10031;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    $i140 := $load.i8($M.45, $p139);
    goto corral_source_split_10032;

  corral_source_split_10032:
    assume {:verifier.code 0} true;
    $i141 := $zext.i8.i32($i140);
    goto corral_source_split_10033;

  corral_source_split_10033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2462} vslice_dummy_var_274 := seq_printf.ref.ref.i32($p0, .str.37, $i141);
    goto corral_source_split_10034;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p84, $mul.ref(0, 8)), $mul.ref(3, 1));
    goto corral_source_split_10035;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    $i144 := $load.i8($M.45, $p143);
    goto corral_source_split_10036;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    $i145 := $zext.i8.i32($i144);
    goto corral_source_split_10037;

  corral_source_split_10037:
    assume {:verifier.code 0} true;
    $i146 := $ne.i32($i145, 0);
    goto corral_source_split_10038;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i146 == 1);
    goto corral_source_split_10049;

  corral_source_split_10049:
    assume {:verifier.code 0} true;
    $i151 := 128;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_10051;

  corral_source_split_10051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2464} vslice_dummy_var_276 := seq_printf.ref.ref.i32($p0, .str.38, $i151);
    goto corral_source_split_10052;

  corral_source_split_10052:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p84, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_10053;

  corral_source_split_10053:
    assume {:verifier.code 0} true;
    $i154 := $load.i8($M.45, $p153);
    goto corral_source_split_10054;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    $i155 := $zext.i8.i32($i154);
    goto corral_source_split_10055;

  corral_source_split_10055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2465} vslice_dummy_var_277 := seq_printf.ref.ref.i32($p0, .str.39, $i155);
    goto corral_source_split_10056;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2466} vslice_dummy_var_278 := seq_puts($p0, .str.40);
    goto corral_source_split_10057;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p84, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_10058;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    $i159 := $load.i8($M.45, $p158);
    goto corral_source_split_10059;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    $i160 := $zext.i8.i32($i159);
    goto corral_source_split_10060;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i160, 0);
    goto corral_source_split_10061;

  corral_source_split_10061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p84, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_10067;

  corral_source_split_10067:
    assume {:verifier.code 0} true;
    $i163 := $load.i8($M.45, $p162);
    goto corral_source_split_10068;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    $i164 := $zext.i8.i32($i163);
    goto corral_source_split_10069;

  corral_source_split_10069:
    assume {:verifier.code 0} true;
    $i165 := $eq.i32($i164, 1);
    goto corral_source_split_10070;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p84, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_10076;

  corral_source_split_10076:
    assume {:verifier.code 0} true;
    $i167 := $load.i8($M.45, $p166);
    goto corral_source_split_10077;

  corral_source_split_10077:
    assume {:verifier.code 0} true;
    $i168 := $zext.i8.i32($i167);
    goto corral_source_split_10078;

  corral_source_split_10078:
    assume {:verifier.code 0} true;
    $i169 := $eq.i32($i168, 2);
    goto corral_source_split_10079;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2470} vslice_dummy_var_282 := seq_puts($p0, .str.44);
    goto corral_source_split_10085;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p84, $mul.ref(0, 8)), $mul.ref(5, 1));
    goto corral_source_split_10086;

  corral_source_split_10086:
    assume {:verifier.code 0} true;
    $i175 := $load.i8($M.45, $p174);
    goto corral_source_split_10087;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    $i176 := $zext.i8.i32($i175);
    goto corral_source_split_10088;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    $i177 := $eq.i32($i176, 0);
    goto corral_source_split_10089;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p84, $mul.ref(0, 8)), $mul.ref(5, 1));
    goto corral_source_split_10095;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    $i179 := $load.i8($M.45, $p178);
    goto corral_source_split_10096;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    $i180 := $zext.i8.i32($i179);
    goto corral_source_split_10097;

  corral_source_split_10097:
    assume {:verifier.code 0} true;
    $i181 := $eq.i32($i180, 1);
    goto corral_source_split_10098;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2473} vslice_dummy_var_285 := seq_puts($p0, .str.47);
    goto corral_source_split_10104;

  corral_source_split_10104:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p84, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_10105;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    $i186 := $load.i8($M.45, $p185);
    goto corral_source_split_10106;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    $i187 := $zext.i8.i32($i186);
    goto corral_source_split_10107;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i187, 0);
    goto corral_source_split_10108;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p84, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_10114;

  corral_source_split_10114:
    assume {:verifier.code 0} true;
    $i190 := $load.i8($M.45, $p189);
    goto corral_source_split_10115;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    $i191 := $zext.i8.i32($i190);
    goto corral_source_split_10116;

  corral_source_split_10116:
    assume {:verifier.code 0} true;
    $i192 := $eq.i32($i191, 1);
    goto corral_source_split_10117;

  corral_source_split_10117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $i195 := $add.i32($i73, 1);
    call {:si_unique_call 2476} {:cexpr "i"} boogie_si_record_i32($i195);
    goto corral_source_split_10123;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    $i73 := $i195;
    goto corral_source_split_10123_dummy;

  $bb93:
    assume $i192 == 1;
    goto corral_source_split_10119;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2475} vslice_dummy_var_287 := seq_puts($p0, .str.49);
    goto corral_source_split_10121;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb89:
    assume $i188 == 1;
    goto corral_source_split_10110;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2474} vslice_dummy_var_286 := seq_puts($p0, .str.48);
    goto corral_source_split_10112;

  corral_source_split_10112:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb83:
    assume $i181 == 1;
    goto corral_source_split_10100;

  corral_source_split_10100:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2472} vslice_dummy_var_284 := seq_puts($p0, .str.46);
    goto corral_source_split_10102;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb79:
    assume $i177 == 1;
    goto corral_source_split_10091;

  corral_source_split_10091:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2471} vslice_dummy_var_283 := seq_puts($p0, .str.45);
    goto corral_source_split_10093;

  corral_source_split_10093:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb73:
    assume $i169 == 1;
    goto corral_source_split_10081;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2469} vslice_dummy_var_281 := seq_puts($p0, .str.43);
    goto corral_source_split_10083;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb69:
    assume $i165 == 1;
    goto corral_source_split_10072;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2468} vslice_dummy_var_280 := seq_puts($p0, .str.42);
    goto corral_source_split_10074;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb65:
    assume $i161 == 1;
    goto corral_source_split_10063;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2467} vslice_dummy_var_279 := seq_puts($p0, .str.41);
    goto corral_source_split_10065;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb62:
    assume $i146 == 1;
    goto corral_source_split_10043;

  corral_source_split_10043:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p84, $mul.ref(0, 8)), $mul.ref(3, 1));
    goto corral_source_split_10044;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    $i148 := $load.i8($M.45, $p147);
    goto corral_source_split_10045;

  corral_source_split_10045:
    assume {:verifier.code 0} true;
    $i149 := $zext.i8.i32($i148);
    goto corral_source_split_10046;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    $i150 := $udiv.i32($i149, 2);
    goto corral_source_split_10047;

  corral_source_split_10047:
    assume {:verifier.code 0} true;
    $i151 := $i150;
    goto $bb64;

  $bb59:
    assume $i132 == 1;
    goto corral_source_split_10040;

  corral_source_split_10040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2463} vslice_dummy_var_275 := seq_puts($p0, .str.35);
    goto corral_source_split_10041;

  corral_source_split_10041:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb56:
    assume $i125 == 1;
    goto corral_source_split_10015;

  corral_source_split_10015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2459} vslice_dummy_var_271 := seq_puts($p0, .str.34);
    goto corral_source_split_10016;

  corral_source_split_10016:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb49:
    assume $i114 == 1;
    goto corral_source_split_10002;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2457} vslice_dummy_var_269 := seq_puts($p0, .str.32);
    goto corral_source_split_10004;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb45:
    assume $i108 == 1;
    goto corral_source_split_9991;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2456} vslice_dummy_var_268 := seq_puts($p0, .str.31);
    goto corral_source_split_9993;

  corral_source_split_9993:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb41:
    assume $i102 == 1;
    goto corral_source_split_9980;

  corral_source_split_9980:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2455} vslice_dummy_var_267 := seq_puts($p0, .str.30);
    goto corral_source_split_9982;

  corral_source_split_9982:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb37:
    assume $i96 == 1;
    goto corral_source_split_9969;

  corral_source_split_9969:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2454} vslice_dummy_var_266 := seq_puts($p0, .str.29);
    goto corral_source_split_9971;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb34:
    assume $i78 == 1;
    goto corral_source_split_9951;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    $i79 := $sext.i32.i64($i73);
    goto corral_source_split_9952;

  corral_source_split_9952:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p49);
    goto corral_source_split_9953;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($add.ref($p80, $mul.ref(0, 23964)), $mul.ref(4, 1)), $mul.ref($i79, 584)), $mul.ref(0, 1));
    goto corral_source_split_9954;

  corral_source_split_9954:
    assume {:verifier.code 0} true;
    $p84 := $p83;
    goto $bb36;

  $bb99:
    assume $i197 == 1;
    goto corral_source_split_10125;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    $i198 := $add.i32($i3, 1);
    goto corral_source_split_10126;

  corral_source_split_10126:
    assume {:verifier.code 0} true;
    $i199 := $i198;
    goto $bb101;

  $bb26:
    assume $i68 == 1;
    goto corral_source_split_9932;

  corral_source_split_9932:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p5, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_9933;

  corral_source_split_9933:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p69, 7);
    goto corral_source_split_9934;

  corral_source_split_9934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2450} $i70 := mega_internal_command($p1, $p5, $0.ref);
    goto SeqInstr_640, SeqInstr_641;

  SeqInstr_641:
    assume assertsPassed;
    goto SeqInstr_642;

  SeqInstr_642:
    call {:si_unique_call 2451} {:cexpr "tmp___4"} boogie_si_record_i32($i70);
    goto corral_source_split_9935;

  corral_source_split_9935:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_9936;

  corral_source_split_9936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i71 == 1;
    goto corral_source_split_9938;

  corral_source_split_9938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2452} vslice_dummy_var_264 := seq_puts($p0, .str.27);
    goto corral_source_split_9939;

  corral_source_split_9939:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_640:
    assume !assertsPassed;
    return;

  SeqInstr_637:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i60 == 1;
    goto corral_source_split_9908;

  corral_source_split_9908:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p5, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_9909;

  corral_source_split_9909:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p61, $sub.i8(0, 95));
    goto corral_source_split_9910;

  corral_source_split_9910:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p5, $mul.ref(0, 20)), $mul.ref(2, 1));
    goto corral_source_split_9911;

  corral_source_split_9911:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p62, 4);
    goto corral_source_split_9912;

  corral_source_split_9912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2443} $i63 := mega_internal_command($p1, $p5, $0.ref);
    goto SeqInstr_634, SeqInstr_635;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  SeqInstr_636:
    call {:si_unique_call 2444} {:cexpr "tmp___3"} boogie_si_record_i32($i63);
    goto corral_source_split_9913;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_9914;

  corral_source_split_9914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb21:
    assume $i64 == 1;
    goto corral_source_split_9922;

  corral_source_split_9922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2447} vslice_dummy_var_263 := seq_puts($p0, .str.26);
    goto corral_source_split_9923;

  corral_source_split_9923:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_634:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i51 == 1;
    goto corral_source_split_9895;

  corral_source_split_9895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2442} vslice_dummy_var_262 := seq_puts($p0, .str.25);
    goto corral_source_split_9896;

  corral_source_split_9896:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb13:
    assume $i25 == 1;
    goto corral_source_split_9871;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p12);
    goto corral_source_split_9872;

  corral_source_split_9872:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 1028)), $mul.ref(356, 1));
    goto corral_source_split_9873;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    goto corral_source_split_9874;

  corral_source_split_9874:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p12);
    goto corral_source_split_9875;

  corral_source_split_9875:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 1028)), $mul.ref(137, 1));
    goto corral_source_split_9876;

  corral_source_split_9876:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.43, $p30);
    goto corral_source_split_9877;

  corral_source_split_9877:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    call {:si_unique_call 2439} {:cexpr "num_ldrv"} boogie_si_record_i32($i32);
    goto corral_source_split_9878;

  corral_source_split_9878:
    assume {:verifier.code 0} true;
    $p33, $i34, $i35 := $p27, $i32, 23964;
    goto $bb15;

  $bb9:
    assume $i17 == 1;
    goto corral_source_split_9854;

  corral_source_split_9854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2435} vslice_dummy_var_260 := seq_puts($p0, .str.7);
    goto corral_source_split_9855;

  corral_source_split_9855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2436} vslice_dummy_var_261 := printk.ref(.str.8);
    goto corral_source_split_9856;

  corral_source_split_9856:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_631:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_9845;

  corral_source_split_9845:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_9837;

  corral_source_split_9837:
    assume {:verifier.code 0} true;
    goto $bb3;

  corral_source_split_10123_dummy:
    assume false;
    return;

  $bb32_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9941;
}



const mega_allocate_inquiry: ref;

axiom mega_allocate_inquiry == $sub.ref(0, 589980);

procedure mega_allocate_inquiry($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation mega_allocate_inquiry($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10135;

  corral_source_split_10135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2477} $p2 := pci_alloc_consistent($p1, 1024, $p0);
    goto corral_source_split_10136;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const mega_adapinq: ref;

axiom mega_adapinq == $sub.ref(0, 591012);

procedure mega_adapinq($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.19, $CurrAddr, $M.20, $M.21, assertsPassed;



implementation mega_adapinq($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var cmdloc_dummy_var_108: [ref]i8;
  var cmdloc_dummy_var_109: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2478} $p2 := $alloc($mul.ref(20, $zext.i32.i64(1)));
    call {:si_unique_call 2479} {:cexpr "mega_adapinq:arg:dma_handle"} boogie_si_record_i64($i1);
    goto corral_source_split_10138;

  corral_source_split_10138:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_10139;

  corral_source_split_10139:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_108 := $M.1;
    call {:si_unique_call 2480} cmdloc_dummy_var_109 := $memset.i8(cmdloc_dummy_var_108, $p3, 0, 18, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_109;
    goto corral_source_split_10140;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_10141;

  corral_source_split_10141:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    goto corral_source_split_10142;

  corral_source_split_10142:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i5);
    goto corral_source_split_10143;

  corral_source_split_10143:
    assume {:verifier.code 0} true;
    $i7 := $and.i64($i6, 134217728);
    goto corral_source_split_10144;

  corral_source_split_10144:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_10145;

  corral_source_split_10145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_10155;

  corral_source_split_10155:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_10156;

  corral_source_split_10156:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p12, 4);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i32($i1);
    goto corral_source_split_10158;

  corral_source_split_10158:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_10159;

  corral_source_split_10159:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p14, $i13);
    goto corral_source_split_10160;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2481} $i15 := mega_internal_command($p0, $p2, $0.ref);
    goto SeqInstr_643, SeqInstr_644;

  SeqInstr_644:
    assume assertsPassed;
    goto SeqInstr_645;

  SeqInstr_645:
    call {:si_unique_call 2482} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_10161;

  corral_source_split_10161:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_10162;

  corral_source_split_10162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_10166;

  corral_source_split_10166:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_10164;

  corral_source_split_10164:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 1);
    goto $bb6;

  SeqInstr_643:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_10147;

  corral_source_split_10147:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_10148;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p9, $sub.i8(0, 95));
    goto corral_source_split_10149;

  corral_source_split_10149:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(2, 1));
    goto corral_source_split_10150;

  corral_source_split_10150:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p10, 15);
    goto corral_source_split_10151;

  corral_source_split_10151:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(3, 1));
    goto corral_source_split_10152;

  corral_source_split_10152:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p11, 2);
    goto corral_source_split_10153;

  corral_source_split_10153:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const seq_puts: ref;

axiom seq_puts == $sub.ref(0, 592044);

procedure seq_puts($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation seq_puts($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10168;

  corral_source_split_10168:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2483} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2484} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10169;

  corral_source_split_10169:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const seq_printf: ref;

axiom seq_printf == $sub.ref(0, 593076);

procedure seq_printf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10171;

  corral_source_split_10171:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2485} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2486} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10172;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure seq_printf.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_10174;

  corral_source_split_10174:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2487} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2488} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10175;

  corral_source_split_10175:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure seq_printf.ref.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_10177;

  corral_source_split_10177:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2489} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2490} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10178;

  corral_source_split_10178:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure seq_printf.ref.ref.i64.i32($p0: ref, $p1: ref, p.2: i64, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.i64.i32($p0: ref, $p1: ref, p.2: i64, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_10180;

  corral_source_split_10180:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2491} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2492} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10181;

  corral_source_split_10181:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure seq_printf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_10183;

  corral_source_split_10183:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2493} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2494} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10184;

  corral_source_split_10184:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const seq_putc: ref;

axiom seq_putc == $sub.ref(0, 594108);

procedure seq_putc($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;



implementation seq_putc($p0: ref, $i1: i8) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2495} {:cexpr "seq_putc:arg:arg1"} boogie_si_record_i8($i1);
    goto corral_source_split_10186;

  corral_source_split_10186:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2496} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2497} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10187;

  corral_source_split_10187:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mega_free_inquiry: ref;

axiom mega_free_inquiry == $sub.ref(0, 595140);

procedure mega_free_inquiry($p0: ref, $i1: i64, $p2: ref);
  free requires assertsPassed;



implementation mega_free_inquiry($p0: ref, $i1: i64, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2498} {:cexpr "mega_free_inquiry:arg:dma_handle"} boogie_si_record_i64($i1);
    goto corral_source_split_10189;

  corral_source_split_10189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2499} pci_free_consistent($p2, 1024, $p0, $i1);
    goto corral_source_split_10190;

  corral_source_split_10190:
    assume {:verifier.code 0} true;
    return;
}



const proc_show_pdrv: ref;

axiom proc_show_pdrv == $sub.ref(0, 596172);

procedure proc_show_pdrv($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.1, $M.47, $M.19, $M.49, $CurrAddr, $M.20, $M.21, assertsPassed;



implementation proc_show_pdrv($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i64;
  var $i14: i32;
  var $i15: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p32: ref;
  var $p35: ref;
  var $p31: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i1;
  var $i43: i32;
  var $i44: i32;
  var $i45: i64;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $i65: i8;
  var $i66: i32;
  var $i67: i8;
  var $i68: i8;
  var $i69: i32;
  var $i70: i8;
  var $i71: i64;
  var $i72: i32;
  var $i73: i1;
  var $i74: i8;
  var $i75: i32;
  var $i76: i32;
  var $i77: i1;
  var $i79: i32;
  var $i80: i1;
  var $i42: i32;
  var $p81: ref;
  var $i82: i64;
  var $p83: ref;
  var $i84: i64;
  var $p85: ref;
  var $p86: ref;
  var cmdloc_dummy_var_110: [ref]i8;
  var cmdloc_dummy_var_111: [ref]i8;
  var vslice_dummy_var_288: i32;
  var vslice_dummy_var_289: i32;
  var vslice_dummy_var_290: i32;
  var vslice_dummy_var_291: i32;
  var vslice_dummy_var_292: i32;
  var vslice_dummy_var_293: i32;
  var vslice_dummy_var_294: i32;
  var vslice_dummy_var_295: i32;
  var vslice_dummy_var_296: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2500} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2501} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2502} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 2503} {:cexpr "proc_show_pdrv:arg:channel"} boogie_si_record_i32($i2);
    goto corral_source_split_10192;

  corral_source_split_10192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2504} $i6 := make_local_pdev($p1, $p5);
    call {:si_unique_call 2505} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_10193;

  corral_source_split_10193:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_10194;

  corral_source_split_10194:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.26, $p5);
    goto corral_source_split_10198;

  corral_source_split_10198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2506} $p9 := mega_allocate_inquiry($p3, $p8);
    goto corral_source_split_10199;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_10200;

  corral_source_split_10200:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_10201;

  corral_source_split_10201:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_10202;

  corral_source_split_10202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.44, $p3);
    goto corral_source_split_10209;

  corral_source_split_10209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2508} $i14 := mega_adapinq($p1, $i13);
    goto SeqInstr_646, SeqInstr_647;

  SeqInstr_647:
    assume assertsPassed;
    goto SeqInstr_648;

  SeqInstr_648:
    call {:si_unique_call 2509} {:cexpr "tmp___1"} boogie_si_record_i32($i14);
    goto corral_source_split_10210;

  corral_source_split_10210:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_10211;

  corral_source_split_10211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.26, $p5);
    goto corral_source_split_10222;

  corral_source_split_10222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2513} $p19 := pci_alloc_consistent($p18, 256, $p4);
    goto corral_source_split_10223;

  corral_source_split_10223:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_10224;

  corral_source_split_10224:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_10225;

  corral_source_split_10225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_10230;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.1, $p23);
    goto corral_source_split_10231;

  corral_source_split_10231:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i24);
    goto corral_source_split_10232;

  corral_source_split_10232:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 134217728);
    goto corral_source_split_10233;

  corral_source_split_10233:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_10234;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i27 == 1);
    goto corral_source_split_10241;

  corral_source_split_10241:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p10);
    goto corral_source_split_10242;

  corral_source_split_10242:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($add.ref($p32, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(76, 1)), $mul.ref(0, 1));
    goto corral_source_split_10243;

  corral_source_split_10243:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p31 := $p35;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_10245;

  corral_source_split_10245:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1912)), $mul.ref(144, 1)), $mul.ref(121, 1));
    goto corral_source_split_10246;

  corral_source_split_10246:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.1, $p38);
    goto corral_source_split_10247;

  corral_source_split_10247:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    call {:si_unique_call 2515} {:cexpr "max_channels"} boogie_si_record_i32($i40);
    goto corral_source_split_10248;

  corral_source_split_10248:
    assume {:verifier.code 0} true;
    $i41 := $sge.i32($i2, $i40);
    goto corral_source_split_10249;

  corral_source_split_10249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb23;

  $bb23:
    call $i43, $i44, $i45, $p46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i79, $i80, $i42, cmdloc_dummy_var_110, cmdloc_dummy_var_111, vslice_dummy_var_291, vslice_dummy_var_292, vslice_dummy_var_293, vslice_dummy_var_294, vslice_dummy_var_295, vslice_dummy_var_296 := proc_show_pdrv_loop_$bb23($p0, $p1, $i2, $p4, $p19, $p31, $i43, $i44, $i45, $p46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i79, $i80, $i42, cmdloc_dummy_var_110, cmdloc_dummy_var_111, vslice_dummy_var_291, vslice_dummy_var_292, vslice_dummy_var_293, vslice_dummy_var_294, vslice_dummy_var_295, vslice_dummy_var_296);
    goto $bb23_last;

  corral_source_split_10257:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i43 := $mul.i32($i2, 16);
    goto corral_source_split_10259;

  corral_source_split_10259:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, $i42);
    call {:si_unique_call 2517} {:cexpr "i"} boogie_si_record_i32($i44);
    goto corral_source_split_10260;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i44);
    goto corral_source_split_10261;

  corral_source_split_10261:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p31, $mul.ref($i45, 1));
    goto corral_source_split_10262;

  corral_source_split_10262:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.43, $p46);
    call {:si_unique_call 2518} {:cexpr "state"} boogie_si_record_i8($i47);
    goto corral_source_split_10263;

  corral_source_split_10263:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_10264;

  corral_source_split_10264:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i48, 15);
    goto corral_source_split_10265;

  corral_source_split_10265:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 3);
    goto corral_source_split_10266;

  corral_source_split_10266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i47);
    goto corral_source_split_10272;

  corral_source_split_10272:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, 15);
    goto corral_source_split_10273;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 4);
    goto corral_source_split_10274;

  corral_source_split_10274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i47);
    goto corral_source_split_10280;

  corral_source_split_10280:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 15);
    goto corral_source_split_10281;

  corral_source_split_10281:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 5);
    goto corral_source_split_10282;

  corral_source_split_10282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i47);
    goto corral_source_split_10288;

  corral_source_split_10288:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i57, 15);
    goto corral_source_split_10289;

  corral_source_split_10289:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 6);
    goto corral_source_split_10290;

  corral_source_split_10290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2523} vslice_dummy_var_295 := seq_printf.ref.ref.i32.i32($p0, .str.14, $i2, $i42);
    goto corral_source_split_10296;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_110 := $M.47;
    call {:si_unique_call 2524} cmdloc_dummy_var_111 := $memset.i8(cmdloc_dummy_var_110, $p19, 0, 256, $zext.i32.i64(1), 0 == 1);
    $M.47 := cmdloc_dummy_var_111;
    goto corral_source_split_10298;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i32.i8($i2);
    goto corral_source_split_10299;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_10300;

  corral_source_split_10300:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i8($i66);
    goto corral_source_split_10301;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i8($i42);
    goto corral_source_split_10302;

  corral_source_split_10302:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_10303;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i32.i8($i69);
    goto corral_source_split_10304;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    $i71 := $load.i64($M.48, $p4);
    goto corral_source_split_10305;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2525} $i72 := mega_internal_dev_inquiry($p1, $i67, $i70, $i71);
    goto SeqInstr_649, SeqInstr_650;

  SeqInstr_650:
    assume assertsPassed;
    goto SeqInstr_651;

  SeqInstr_651:
    call {:si_unique_call 2526} {:cexpr "tmp___3"} boogie_si_record_i32($i72);
    goto corral_source_split_10306;

  corral_source_split_10306:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_10307;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb46;

  $bb46:
    assume !($i73 == 1);
    goto corral_source_split_10309;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.47, $p19);
    goto corral_source_split_10310;

  corral_source_split_10310:
    assume {:verifier.code 0} true;
    $i75 := $sext.i8.i32($i74);
    goto corral_source_split_10311;

  corral_source_split_10311:
    assume {:verifier.code 0} true;
    $i76 := $and.i32($i75, 31);
    goto corral_source_split_10312;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 0);
    goto corral_source_split_10313;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2528} vslice_dummy_var_296 := seq_puts($p0, .str.15);
    goto corral_source_split_10318;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2529} mega_print_inquiry($p0, $p19);
    goto corral_source_split_10319;

  corral_source_split_10319:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i42, 1);
    call {:si_unique_call 2527} {:cexpr "tgt"} boogie_si_record_i32($i79);
    goto corral_source_split_10315;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    $i80 := $sle.i32($i79, 15);
    goto corral_source_split_10316;

  corral_source_split_10316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.26, $p5);
    goto corral_source_split_10253;

  corral_source_split_10253:
    assume {:verifier.code 0} true;
    $i82 := $load.i64($M.48, $p4);
    goto corral_source_split_10254;

  corral_source_split_10254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2516} pci_free_consistent($p81, 256, $p19, $i82);
    goto corral_source_split_10255;

  corral_source_split_10255:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p10);
    goto corral_source_split_10217;

  corral_source_split_10217:
    assume {:verifier.code 0} true;
    $i84 := $load.i64($M.44, $p3);
    goto corral_source_split_10218;

  corral_source_split_10218:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.26, $p5);
    goto corral_source_split_10219;

  corral_source_split_10219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2512} mega_free_inquiry($p83, $i84, $p85);
    goto corral_source_split_10220;

  corral_source_split_10220:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.26, $p5);
    goto corral_source_split_10206;

  corral_source_split_10206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2507} free_local_pdev($p86);
    goto corral_source_split_10207;

  corral_source_split_10207:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb51:
    assume $i80 == 1;
    assume {:verifier.code 0} true;
    $i42 := $i79;
    goto $bb51_dummy;

  $bb47:
    assume {:verifier.code 0} true;
    assume $i77 == 1;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i73 == 1;
    goto $bb45;

  SeqInstr_649:
    assume !assertsPassed;
    return;

  $bb37:
    assume $i59 == 1;
    goto corral_source_split_10292;

  corral_source_split_10292:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2522} vslice_dummy_var_294 := seq_printf.ref.ref.i32.i32($p0, .str.13, $i2, $i42);
    goto corral_source_split_10294;

  corral_source_split_10294:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb33:
    assume $i56 == 1;
    goto corral_source_split_10284;

  corral_source_split_10284:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2521} vslice_dummy_var_293 := seq_printf.ref.ref.i32.i32($p0, .str.12, $i2, $i42);
    goto corral_source_split_10286;

  corral_source_split_10286:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb29:
    assume $i53 == 1;
    goto corral_source_split_10276;

  corral_source_split_10276:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2520} vslice_dummy_var_292 := seq_printf.ref.ref.i32.i32($p0, .str.11, $i2, $i42);
    goto corral_source_split_10278;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb25:
    assume $i50 == 1;
    goto corral_source_split_10268;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2519} vslice_dummy_var_291 := seq_printf.ref.ref.i32.i32($p0, .str.10, $i2, $i42);
    goto corral_source_split_10270;

  corral_source_split_10270:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb19:
    assume $i41 == 1;
    goto corral_source_split_10251;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i27 == 1;
    goto corral_source_split_10236;

  corral_source_split_10236:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p10);
    goto corral_source_split_10237;

  corral_source_split_10237:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 1028)), $mul.ref(396, 1));
    goto corral_source_split_10238;

  corral_source_split_10238:
    assume {:verifier.code 0} true;
    goto corral_source_split_10239;

  corral_source_split_10239:
    assume {:verifier.code 0} true;
    $p31 := $p29;
    goto $bb18;

  $bb13:
    assume $i21 == 1;
    goto corral_source_split_10227;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2514} vslice_dummy_var_290 := seq_puts($p0, .str.9);
    goto corral_source_split_10228;

  corral_source_split_10228:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb9:
    assume $i15 == 1;
    goto corral_source_split_10213;

  corral_source_split_10213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2510} vslice_dummy_var_288 := seq_puts($p0, .str.7);
    goto corral_source_split_10214;

  corral_source_split_10214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2511} vslice_dummy_var_289 := printk.ref(.str.8);
    goto corral_source_split_10215;

  corral_source_split_10215:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_646:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_10204;

  corral_source_split_10204:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_10196;

  corral_source_split_10196:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb51_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10257;
}



const mega_internal_dev_inquiry: ref;

axiom mega_internal_dev_inquiry == $sub.ref(0, 597204);

procedure mega_internal_dev_inquiry($p0: ref, $i1: i8, $i2: i8, $i3: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.1, $M.49, $M.19, $CurrAddr, $M.20, $M.21, assertsPassed;



implementation mega_internal_dev_inquiry($p0: ref, $i1: i8, $i2: i8, $i3: i64) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i8;
  var $i19: i8;
  var $p20: ref;
  var $i21: i8;
  var $i22: i8;
  var $i23: i8;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i8;
  var $p28: ref;
  var $i29: i32;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $i33: i32;
  var $i34: i32;
  var $i35: i8;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $i42: i32;
  var $i43: i32;
  var $i44: i8;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i8;
  var $i49: i32;
  var $i51: i32;
  var $i50: i32;
  var $i52: i8;
  var $p53: ref;
  var $p54: ref;
  var $p56: ref;
  var $p58: ref;
  var $p60: ref;
  var $p62: ref;
  var $p64: ref;
  var $p66: ref;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $i73: i32;
  var $p74: ref;
  var $i75: i32;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $p79: ref;
  var $i9: i32;
  var cmdloc_dummy_var_112: [ref]i8;
  var cmdloc_dummy_var_113: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2530} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2531} $p5 := $alloc($mul.ref(20, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2532} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 2533} {:cexpr "mega_internal_dev_inquiry:arg:ch"} boogie_si_record_i8($i1);
    call {:si_unique_call 2534} {:cexpr "mega_internal_dev_inquiry:arg:tgt"} boogie_si_record_i8($i2);
    call {:si_unique_call 2535} {:cexpr "mega_internal_dev_inquiry:arg:buf_dma_handle"} boogie_si_record_i64($i3);
    goto corral_source_split_10321;

  corral_source_split_10321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2536} $i7 := make_local_pdev($p0, $p6);
    call {:si_unique_call 2537} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_10322;

  corral_source_split_10322:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_10323;

  corral_source_split_10323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.26, $p6);
    goto corral_source_split_10329;

  corral_source_split_10329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2538} $p11 := pci_alloc_consistent($p10, 60, $p4);
    goto corral_source_split_10330;

  corral_source_split_10330:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_10331;

  corral_source_split_10331:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_10332;

  corral_source_split_10332:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_10333;

  corral_source_split_10333:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p12);
    goto corral_source_split_10339;

  corral_source_split_10339:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.49, $p16);
    goto corral_source_split_10340;

  corral_source_split_10340:
    assume {:verifier.code 0} true;
    $i18 := $and.i8($i17, $sub.i8(0, 8));
    goto corral_source_split_10341;

  corral_source_split_10341:
    assume {:verifier.code 0} true;
    $i19 := $or.i8($i18, 2);
    goto corral_source_split_10342;

  corral_source_split_10342:
    assume {:verifier.code 0} true;
    $M.49 := $store.i8($M.49, $p16, $i19);
    goto corral_source_split_10343;

  corral_source_split_10343:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p12);
    goto corral_source_split_10344;

  corral_source_split_10344:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.49, $p20);
    goto corral_source_split_10345;

  corral_source_split_10345:
    assume {:verifier.code 0} true;
    $i22 := $and.i8($i21, $sub.i8(0, 9));
    goto corral_source_split_10346;

  corral_source_split_10346:
    assume {:verifier.code 0} true;
    $i23 := $or.i8($i22, 8);
    goto corral_source_split_10347;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    $M.49 := $store.i8($M.49, $p20, $i23);
    goto corral_source_split_10348;

  corral_source_split_10348:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p12, $mul.ref(0, 60)), $mul.ref(17, 1));
    goto corral_source_split_10349;

  corral_source_split_10349:
    assume {:verifier.code 0} true;
    $M.49 := $store.i8($M.49, $p24, 14);
    goto corral_source_split_10350;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p12);
    goto corral_source_split_10351;

  corral_source_split_10351:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.49, $p25);
    goto corral_source_split_10352;

  corral_source_split_10352:
    assume {:verifier.code 0} true;
    $i27 := $and.i8($i26, 127);
    goto corral_source_split_10353;

  corral_source_split_10353:
    assume {:verifier.code 0} true;
    $M.49 := $store.i8($M.49, $p25, $i27);
    goto corral_source_split_10354;

  corral_source_split_10354:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_10355;

  corral_source_split_10355:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.1, $p28);
    goto corral_source_split_10356;

  corral_source_split_10356:
    assume {:verifier.code 0} true;
    $i30 := $zext.i32.i64($i29);
    goto corral_source_split_10357;

  corral_source_split_10357:
    assume {:verifier.code 0} true;
    $i31 := $and.i64($i30, 134217728);
    goto corral_source_split_10358;

  corral_source_split_10358:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i31, 0);
    goto corral_source_split_10359;

  corral_source_split_10359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i32 == 1);
    goto corral_source_split_10364;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_10366;

  corral_source_split_10366:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    goto corral_source_split_10367;

  corral_source_split_10367:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p12, $mul.ref(0, 60)), $mul.ref(2, 1));
    goto corral_source_split_10368;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    $M.49 := $store.i8($M.49, $p36, $i35);
    goto corral_source_split_10369;

  corral_source_split_10369:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_10370;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.1, $p37);
    goto corral_source_split_10371;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    $i39 := $zext.i32.i64($i38);
    goto corral_source_split_10372;

  corral_source_split_10372:
    assume {:verifier.code 0} true;
    $i40 := $and.i64($i39, 134217728);
    goto corral_source_split_10373;

  corral_source_split_10373:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_10374;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i41 == 1);
    goto corral_source_split_10386;

  corral_source_split_10386:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i2);
    goto corral_source_split_10387;

  corral_source_split_10387:
    assume {:verifier.code 0} true;
    $i50 := $i51;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_10389;

  corral_source_split_10389:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i8($i50);
    goto corral_source_split_10390;

  corral_source_split_10390:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p12, $mul.ref(0, 60)), $mul.ref(3, 1));
    goto corral_source_split_10391;

  corral_source_split_10391:
    assume {:verifier.code 0} true;
    $M.49 := $store.i8($M.49, $p53, $i52);
    goto corral_source_split_10392;

  corral_source_split_10392:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p12, $mul.ref(0, 60)), $mul.ref(16, 1));
    goto corral_source_split_10393;

  corral_source_split_10393:
    assume {:verifier.code 0} true;
    $M.49 := $store.i8($M.49, $p54, 6);
    goto corral_source_split_10394;

  corral_source_split_10394:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 60)), $mul.ref(6, 1)), $mul.ref(0, 1));
    goto corral_source_split_10395;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    $M.49 := $store.i8($M.49, $p56, 18);
    goto corral_source_split_10396;

  corral_source_split_10396:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 60)), $mul.ref(6, 1)), $mul.ref(1, 1));
    goto corral_source_split_10397;

  corral_source_split_10397:
    assume {:verifier.code 0} true;
    $M.49 := $store.i8($M.49, $p58, 0);
    goto corral_source_split_10398;

  corral_source_split_10398:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 60)), $mul.ref(6, 1)), $mul.ref(2, 1));
    goto corral_source_split_10399;

  corral_source_split_10399:
    assume {:verifier.code 0} true;
    $M.49 := $store.i8($M.49, $p60, 0);
    goto corral_source_split_10400;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 60)), $mul.ref(6, 1)), $mul.ref(3, 1));
    goto corral_source_split_10401;

  corral_source_split_10401:
    assume {:verifier.code 0} true;
    $M.49 := $store.i8($M.49, $p62, 0);
    goto corral_source_split_10402;

  corral_source_split_10402:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 60)), $mul.ref(6, 1)), $mul.ref(4, 1));
    goto corral_source_split_10403;

  corral_source_split_10403:
    assume {:verifier.code 0} true;
    $M.49 := $store.i8($M.49, $p64, $sub.i8(0, 1));
    goto corral_source_split_10404;

  corral_source_split_10404:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 60)), $mul.ref(6, 1)), $mul.ref(5, 1));
    goto corral_source_split_10405;

  corral_source_split_10405:
    assume {:verifier.code 0} true;
    $M.49 := $store.i8($M.49, $p66, 0);
    goto corral_source_split_10406;

  corral_source_split_10406:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i64.i32($i3);
    goto corral_source_split_10407;

  corral_source_split_10407:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p12, $mul.ref(0, 60)), $mul.ref(52, 1));
    goto corral_source_split_10408;

  corral_source_split_10408:
    assume {:verifier.code 0} true;
    $M.49 := $store.i32($M.49, $p68, $i67);
    goto corral_source_split_10409;

  corral_source_split_10409:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p12, $mul.ref(0, 60)), $mul.ref(56, 1));
    goto corral_source_split_10410;

  corral_source_split_10410:
    assume {:verifier.code 0} true;
    $M.49 := $store.i32($M.49, $p69, 256);
    goto corral_source_split_10411;

  corral_source_split_10411:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p5);
    goto corral_source_split_10412;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_112 := $M.1;
    call {:si_unique_call 2540} cmdloc_dummy_var_113 := $memset.i8(cmdloc_dummy_var_112, $p70, 0, 18, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_113;
    goto corral_source_split_10413;

  corral_source_split_10413:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p5, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_10414;

  corral_source_split_10414:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p71, 3);
    goto corral_source_split_10415;

  corral_source_split_10415:
    assume {:verifier.code 0} true;
    $i72 := $load.i64($M.50, $p4);
    goto corral_source_split_10416;

  corral_source_split_10416:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i64.i32($i72);
    goto corral_source_split_10417;

  corral_source_split_10417:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p5, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_10418;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p74, $i73);
    goto corral_source_split_10419;

  corral_source_split_10419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2541} $i75 := mega_internal_command($p0, $p5, $p12);
    goto SeqInstr_652, SeqInstr_653;

  SeqInstr_653:
    assume assertsPassed;
    goto SeqInstr_654;

  SeqInstr_654:
    call {:si_unique_call 2542} {:cexpr "rval"} boogie_si_record_i32($i75);
    goto corral_source_split_10420;

  corral_source_split_10420:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.26, $p6);
    goto corral_source_split_10421;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p12);
    goto corral_source_split_10422;

  corral_source_split_10422:
    assume {:verifier.code 0} true;
    $i78 := $load.i64($M.50, $p4);
    goto corral_source_split_10423;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2543} pci_free_consistent($p76, 60, $p77, $i78);
    goto corral_source_split_10424;

  corral_source_split_10424:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.26, $p6);
    goto corral_source_split_10425;

  corral_source_split_10425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2544} free_local_pdev($p79);
    goto corral_source_split_10426;

  corral_source_split_10426:
    assume {:verifier.code 0} true;
    $i9 := $i75;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10327;

  corral_source_split_10327:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_652:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i41 == 1;
    goto corral_source_split_10376;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i1);
    goto corral_source_split_10377;

  corral_source_split_10377:
    assume {:verifier.code 0} true;
    $i43 := $shl.i32($i42, 4);
    goto corral_source_split_10378;

  corral_source_split_10378:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i8($i43);
    goto corral_source_split_10379;

  corral_source_split_10379:
    assume {:verifier.code 0} true;
    $i45 := $sext.i8.i32($i44);
    goto corral_source_split_10380;

  corral_source_split_10380:
    assume {:verifier.code 0} true;
    $i46 := $sext.i8.i32($i2);
    goto corral_source_split_10381;

  corral_source_split_10381:
    assume {:verifier.code 0} true;
    $i47 := $or.i32($i45, $i46);
    goto corral_source_split_10382;

  corral_source_split_10382:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i8($i47);
    goto corral_source_split_10383;

  corral_source_split_10383:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_10384;

  corral_source_split_10384:
    assume {:verifier.code 0} true;
    $i50 := $i49;
    goto $bb13;

  $bb8:
    assume $i32 == 1;
    goto corral_source_split_10361;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i1);
    goto corral_source_split_10362;

  corral_source_split_10362:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb10;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_10335;

  corral_source_split_10335:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.26, $p6);
    goto corral_source_split_10336;

  corral_source_split_10336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2539} free_local_pdev($p15);
    goto corral_source_split_10337;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 1);
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_10325;

  corral_source_split_10325:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 1);
    goto $bb3;
}



const mega_print_inquiry: ref;

axiom mega_print_inquiry == $sub.ref(0, 598236);

procedure mega_print_inquiry($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation mega_print_inquiry($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $p6: ref;
  var $p9: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i32;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var vslice_dummy_var_297: i32;
  var vslice_dummy_var_298: i32;
  var vslice_dummy_var_299: i32;
  var vslice_dummy_var_300: i32;
  var vslice_dummy_var_301: i32;
  var vslice_dummy_var_302: i32;
  var vslice_dummy_var_303: i32;
  var vslice_dummy_var_304: i32;
  var vslice_dummy_var_305: i32;
  var vslice_dummy_var_306: i32;
  var vslice_dummy_var_307: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10428;

  corral_source_split_10428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2545} vslice_dummy_var_297 := seq_puts($p0, .str.17);
    goto corral_source_split_10429;

  corral_source_split_10429:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref(8, 1));
    goto corral_source_split_10430;

  corral_source_split_10430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2546} vslice_dummy_var_298 := seq_write($p0, $p3, 8);
    goto corral_source_split_10431;

  corral_source_split_10431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2547} vslice_dummy_var_299 := seq_puts($p0, .str.18);
    goto corral_source_split_10432;

  corral_source_split_10432:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p1, $mul.ref(16, 1));
    goto corral_source_split_10433;

  corral_source_split_10433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2548} vslice_dummy_var_300 := seq_write($p0, $p6, 16);
    goto corral_source_split_10434;

  corral_source_split_10434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2549} vslice_dummy_var_301 := seq_puts($p0, .str.19);
    goto corral_source_split_10435;

  corral_source_split_10435:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p1, $mul.ref(32, 1));
    goto corral_source_split_10436;

  corral_source_split_10436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2550} vslice_dummy_var_302 := seq_write($p0, $p9, 4);
    goto corral_source_split_10437;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2551} vslice_dummy_var_303 := seq_putc($p0, 10);
    goto corral_source_split_10438;

  corral_source_split_10438:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.47, $p1);
    goto corral_source_split_10439;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    $i13 := $sext.i8.i32($i12);
    goto corral_source_split_10440;

  corral_source_split_10440:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 31);
    call {:si_unique_call 2552} {:cexpr "i"} boogie_si_record_i32($i14);
    goto corral_source_split_10441;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2553} $p15 := scsi_device_type($i14);
    goto corral_source_split_10442;

  corral_source_split_10442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2554} vslice_dummy_var_304 := seq_printf.ref.ref.ref($p0, .str.20, $p15);
    goto corral_source_split_10443;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_10444;

  corral_source_split_10444:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.47, $p17);
    goto corral_source_split_10445;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    $i19 := $sext.i8.i32($i18);
    goto corral_source_split_10446;

  corral_source_split_10446:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 7);
    goto corral_source_split_10447;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2555} vslice_dummy_var_305 := seq_printf.ref.ref.i32($p0, .str.21, $i20);
    goto corral_source_split_10448;

  corral_source_split_10448:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_10449;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.47, $p22);
    goto corral_source_split_10450;

  corral_source_split_10450:
    assume {:verifier.code 0} true;
    $i24 := $sext.i8.i32($i23);
    goto corral_source_split_10451;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 7);
    goto corral_source_split_10452;

  corral_source_split_10452:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 1);
    goto corral_source_split_10453;

  corral_source_split_10453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2556} vslice_dummy_var_306 := seq_putc($p0, 10);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i26 == 1;
    goto corral_source_split_10455;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p1, $mul.ref(3, 1));
    goto corral_source_split_10456;

  corral_source_split_10456:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.47, $p27);
    goto corral_source_split_10457;

  corral_source_split_10457:
    assume {:verifier.code 0} true;
    $i29 := $sext.i8.i32($i28);
    goto corral_source_split_10458;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 15);
    goto corral_source_split_10459;

  corral_source_split_10459:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 1);
    goto corral_source_split_10460;

  corral_source_split_10460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb3;

  $bb4:
    assume $i31 == 1;
    goto corral_source_split_10462;

  corral_source_split_10462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2557} vslice_dummy_var_307 := seq_puts($p0, .str.22);
    goto corral_source_split_10463;

  corral_source_split_10463:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const seq_write: ref;

axiom seq_write == $sub.ref(0, 599268);

procedure seq_write($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation seq_write($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2558} {:cexpr "seq_write:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_10465;

  corral_source_split_10465:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2559} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2560} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_10466;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const scsi_device_type: ref;

axiom scsi_device_type == $sub.ref(0, 600300);

procedure scsi_device_type($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation scsi_device_type($i0: i32) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2561} {:cexpr "scsi_device_type:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_10468;

  corral_source_split_10468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2562} $p1 := external_alloc();
    goto corral_source_split_10469;

  corral_source_split_10469:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const mega_proc_open: ref;

axiom mega_proc_open == $sub.ref(0, 601332);

procedure mega_proc_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mega_proc_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10471;

  corral_source_split_10471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2563} $p2 := proc_get_parent_data($p0);
    goto corral_source_split_10472;

  corral_source_split_10472:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_10473;

  corral_source_split_10473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2564} $p4 := PDE_DATA($p0);
    goto corral_source_split_10474;

  corral_source_split_10474:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_10475;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p3);
    goto corral_source_split_10476;

  corral_source_split_10476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2565} $i7 := single_open($p1, $p5, $p6);
    call {:si_unique_call 2566} {:cexpr "tmp___1"} boogie_si_record_i32($i7);
    goto corral_source_split_10477;

  corral_source_split_10477:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const proc_get_parent_data: ref;

axiom proc_get_parent_data == $sub.ref(0, 602364);

procedure proc_get_parent_data($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation proc_get_parent_data($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10479;

  corral_source_split_10479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2567} $p1 := external_alloc();
    goto corral_source_split_10480;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const PDE_DATA: ref;

axiom PDE_DATA == $sub.ref(0, 603396);

procedure PDE_DATA($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation PDE_DATA($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10482;

  corral_source_split_10482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2568} $p1 := external_alloc();
    goto corral_source_split_10483;

  corral_source_split_10483:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const single_open: ref;

axiom single_open == $sub.ref(0, 604428);

procedure single_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation single_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10485;

  corral_source_split_10485:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2569} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2570} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_10486;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_undef_int_nonpositive: ref;

axiom ldv_undef_int_nonpositive == $sub.ref(0, 605460);

procedure ldv_undef_int_nonpositive() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int_nonpositive() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10488;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2571} $i0 := ldv_undef_int();
    call {:si_unique_call 2572} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_10489;

  corral_source_split_10489:
    assume {:verifier.code 0} true;
    $i1 := $sle.i32($i0, 0);
    goto corral_source_split_10490;

  corral_source_split_10490:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10491;

  corral_source_split_10491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2573} ldv_assume($i2);
    goto corral_source_split_10492;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_EMGentry_exit_megaraid_exit_28_2: ref;

axiom ldv_EMGentry_exit_megaraid_exit_28_2 == $sub.ref(0, 606492);

procedure ldv_EMGentry_exit_megaraid_exit_28_2($p0: ref);
  free requires assertsPassed;
  modifies $M.52, assertsPassed;



implementation ldv_EMGentry_exit_megaraid_exit_28_2($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10494;

  corral_source_split_10494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2574} megaraid_exit();
    goto SeqInstr_655, SeqInstr_656;

  SeqInstr_656:
    assume assertsPassed;
    goto SeqInstr_657;

  SeqInstr_657:
    goto corral_source_split_10495;

  corral_source_split_10495:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_655:
    assume !assertsPassed;
    return;
}



const megaraid_exit: ref;

axiom megaraid_exit == $sub.ref(0, 607524);

procedure megaraid_exit();
  free requires assertsPassed;
  modifies $M.52, assertsPassed;



implementation megaraid_exit()
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10497;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    $i0 := $M.51;
    goto corral_source_split_10498;

  corral_source_split_10498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2575} ldv_unregister_chrdev_126($i0, .str.2);
    goto SeqInstr_658, SeqInstr_659;

  SeqInstr_659:
    assume assertsPassed;
    goto SeqInstr_660;

  SeqInstr_660:
    goto corral_source_split_10499;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2576} ldv_pci_unregister_driver_127(megaraid_pci_driver);
    goto corral_source_split_10500;

  corral_source_split_10500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2577} remove_proc_entry(.str.3, $0.ref);
    goto corral_source_split_10501;

  corral_source_split_10501:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_658:
    assume !assertsPassed;
    return;
}



const ldv_unregister_chrdev_126: ref;

axiom ldv_unregister_chrdev_126 == $sub.ref(0, 608556);

procedure ldv_unregister_chrdev_126($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.52, assertsPassed;



implementation ldv_unregister_chrdev_126($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2578} {:cexpr "ldv_unregister_chrdev_126:arg:major___0"} boogie_si_record_i32($i0);
    goto corral_source_split_10503;

  corral_source_split_10503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2579} unregister_chrdev($i0, $p1);
    goto SeqInstr_661, SeqInstr_662;

  SeqInstr_662:
    assume assertsPassed;
    goto SeqInstr_663;

  SeqInstr_663:
    goto corral_source_split_10504;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2580} ldv_unregister_chrdev($0.ref, $i0, $p1);
    goto corral_source_split_10505;

  corral_source_split_10505:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_661:
    assume !assertsPassed;
    return;
}



const ldv_pci_unregister_driver_127: ref;

axiom ldv_pci_unregister_driver_127 == $sub.ref(0, 609588);

procedure ldv_pci_unregister_driver_127($p0: ref);
  free requires assertsPassed;



implementation ldv_pci_unregister_driver_127($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10507;

  corral_source_split_10507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2581} pci_unregister_driver($p0);
    goto corral_source_split_10508;

  corral_source_split_10508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2582} ldv_pci_unregister_driver($0.ref, $p0);
    goto corral_source_split_10509;

  corral_source_split_10509:
    assume {:verifier.code 0} true;
    return;
}



const pci_unregister_driver: ref;

axiom pci_unregister_driver == $sub.ref(0, 610620);

procedure pci_unregister_driver($p0: ref);
  free requires assertsPassed;



implementation pci_unregister_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10511;

  corral_source_split_10511:
    assume {:verifier.code 0} true;
    return;
}



const ldv_pci_unregister_driver: ref;

axiom ldv_pci_unregister_driver == $sub.ref(0, 611652);

procedure ldv_pci_unregister_driver($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_pci_unregister_driver($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10513;

  corral_source_split_10513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2583} ldv_dispatch_deregister_26_1($p1);
    goto corral_source_split_10514;

  corral_source_split_10514:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_26_1: ref;

axiom ldv_dispatch_deregister_26_1 == $sub.ref(0, 612684);

procedure ldv_dispatch_deregister_26_1($p0: ref);
  free requires assertsPassed;



implementation ldv_dispatch_deregister_26_1($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10516;

  corral_source_split_10516:
    assume {:verifier.code 0} true;
    return;
}



const unregister_chrdev: ref;

axiom unregister_chrdev == $sub.ref(0, 613716);

procedure unregister_chrdev($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.52, assertsPassed;



implementation unregister_chrdev($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2584} {:cexpr "unregister_chrdev:arg:major___0"} boogie_si_record_i32($i0);
    goto corral_source_split_10518;

  corral_source_split_10518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2585} ldv_unregister_chrdev_91($i0, $p1);
    goto corral_source_split_10519;

  corral_source_split_10519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2586} ldv_linux_fs_char_dev_unregister_chrdev_region();
    goto SeqInstr_664, SeqInstr_665;

  SeqInstr_665:
    assume assertsPassed;
    goto SeqInstr_666;

  SeqInstr_666:
    goto corral_source_split_10520;

  corral_source_split_10520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2587} ldv_linux_usb_gadget_unregister_chrdev_region();
    goto SeqInstr_667, SeqInstr_668;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  SeqInstr_669:
    goto corral_source_split_10521;

  corral_source_split_10521:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_667:
    assume !assertsPassed;
    return;

  SeqInstr_664:
    assume !assertsPassed;
    return;
}



const ldv_unregister_chrdev: ref;

axiom ldv_unregister_chrdev == $sub.ref(0, 614748);

procedure ldv_unregister_chrdev($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation ldv_unregister_chrdev($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2588} {:cexpr "ldv_unregister_chrdev:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_10523;

  corral_source_split_10523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2589} ldv_dispatch_deregister_24_1($u19);
    goto corral_source_split_10524;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_24_1: ref;

axiom ldv_dispatch_deregister_24_1 == $sub.ref(0, 615780);

procedure ldv_dispatch_deregister_24_1($p0: ref);
  free requires assertsPassed;



implementation ldv_dispatch_deregister_24_1($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10526;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    return;
}



const ldv_unregister_chrdev_91: ref;

axiom ldv_unregister_chrdev_91 == $sub.ref(0, 616812);

procedure ldv_unregister_chrdev_91($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation ldv_unregister_chrdev_91($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2590} {:cexpr "ldv_unregister_chrdev_91:arg:major___0"} boogie_si_record_i32($i0);
    goto corral_source_split_10528;

  corral_source_split_10528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2591} __unregister_chrdev($i0, 0, 256, $p1);
    goto corral_source_split_10529;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_fs_char_dev_unregister_chrdev_region: ref;

axiom ldv_linux_fs_char_dev_unregister_chrdev_region == $sub.ref(0, 617844);

procedure ldv_linux_fs_char_dev_unregister_chrdev_region();
  free requires assertsPassed;
  modifies $M.52, assertsPassed;



implementation ldv_linux_fs_char_dev_unregister_chrdev_region()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10531;

  corral_source_split_10531:
    assume {:verifier.code 0} true;
    $i0 := $M.52;
    goto corral_source_split_10532;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_10533;

  corral_source_split_10533:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10534;

  corral_source_split_10534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2592} ldv_assert_linux_fs_char_dev__double_deregistration($i2);
    goto SeqInstr_670, SeqInstr_671;

  SeqInstr_671:
    assume assertsPassed;
    goto SeqInstr_672;

  SeqInstr_672:
    goto corral_source_split_10535;

  corral_source_split_10535:
    assume {:verifier.code 0} true;
    $M.52 := 0;
    call {:si_unique_call 2593} {:cexpr "ldv_linux_fs_char_dev_usb_gadget_chrdev"} boogie_si_record_i32(0);
    goto corral_source_split_10536;

  corral_source_split_10536:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_670:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_gadget_unregister_chrdev_region: ref;

axiom ldv_linux_usb_gadget_unregister_chrdev_region == $sub.ref(0, 618876);

procedure ldv_linux_usb_gadget_unregister_chrdev_region();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_gadget_unregister_chrdev_region()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10538;

  corral_source_split_10538:
    assume {:verifier.code 0} true;
    $i0 := $M.53;
    goto corral_source_split_10539;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_10540;

  corral_source_split_10540:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10541;

  corral_source_split_10541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2594} ldv_assert_linux_usb_gadget__chrdev_deregistration_with_usb_gadget($i2);
    goto SeqInstr_673, SeqInstr_674;

  SeqInstr_674:
    assume assertsPassed;
    goto SeqInstr_675;

  SeqInstr_675:
    goto corral_source_split_10542;

  corral_source_split_10542:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_673:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_usb_gadget__chrdev_deregistration_with_usb_gadget: ref;

axiom ldv_assert_linux_usb_gadget__chrdev_deregistration_with_usb_gadget == $sub.ref(0, 619908);

procedure ldv_assert_linux_usb_gadget__chrdev_deregistration_with_usb_gadget($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_gadget__chrdev_deregistration_with_usb_gadget($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2595} {:cexpr "ldv_assert_linux_usb_gadget__chrdev_deregistration_with_usb_gadget:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_10544;

  corral_source_split_10544:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_10545;

  corral_source_split_10545:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_10547;

  corral_source_split_10547:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2596} __VERIFIER_error();
    goto SeqInstr_676, SeqInstr_677;

  SeqInstr_677:
    assume assertsPassed;
    goto SeqInstr_678;

  SeqInstr_678:
    goto corral_source_split_10548;

  corral_source_split_10548:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_676:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_char_dev__double_deregistration: ref;

axiom ldv_assert_linux_fs_char_dev__double_deregistration == $sub.ref(0, 620940);

procedure ldv_assert_linux_fs_char_dev__double_deregistration($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_char_dev__double_deregistration($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2597} {:cexpr "ldv_assert_linux_fs_char_dev__double_deregistration:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_10550;

  corral_source_split_10550:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_10551;

  corral_source_split_10551:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_10553;

  corral_source_split_10553:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2598} __VERIFIER_error();
    goto SeqInstr_679, SeqInstr_680;

  SeqInstr_680:
    assume assertsPassed;
    goto SeqInstr_681;

  SeqInstr_681:
    goto corral_source_split_10554;

  corral_source_split_10554:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_679:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __unregister_chrdev: ref;

axiom __unregister_chrdev == $sub.ref(0, 621972);

procedure __unregister_chrdev($i0: i32, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __unregister_chrdev($i0: i32, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2599} {:cexpr "__unregister_chrdev:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 2600} {:cexpr "__unregister_chrdev:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2601} {:cexpr "__unregister_chrdev:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_10556;

  corral_source_split_10556:
    assume {:verifier.code 0} true;
    return;
}



const ldv_EMGentry_init_megaraid_init_28_9: ref;

axiom ldv_EMGentry_init_megaraid_init_28_9 == $sub.ref(0, 623004);

procedure ldv_EMGentry_init_megaraid_init_28_9($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.22, $M.10, $M.51, $M.1, $M.52, $M.30, $M.31, $M.7, $M.8, $M.9, $M.6, $M.11, $M.55, $M.56, assertsPassed, $CurrAddr, $M.12, $M.21, $M.19, $M.20, $M.0, $M.23, $M.29, $M.26, $M.24;



implementation ldv_EMGentry_init_megaraid_init_28_9($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10558;

  corral_source_split_10558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2602} $i1 := megaraid_init();
    goto SeqInstr_682, SeqInstr_683;

  SeqInstr_683:
    assume assertsPassed;
    goto SeqInstr_684;

  SeqInstr_684:
    call {:si_unique_call 2603} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_10559;

  corral_source_split_10559:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_682:
    assume !assertsPassed;
    return;
}



const megaraid_init: ref;

axiom megaraid_init == $sub.ref(0, 624036);

procedure megaraid_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.22, $M.10, $M.51, $M.1, $M.52, $M.30, $M.31, $M.7, $M.8, $M.9, $M.6, $M.11, $M.55, $M.56, assertsPassed, $CurrAddr, $M.12, $M.21, $M.19, $M.20, $M.0, $M.23, $M.29, $M.26, $M.24;



implementation megaraid_init() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i1;
  var $i3: i16;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i11: i32;
  var $i12: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i13: i32;
  var vslice_dummy_var_308: i32;
  var vslice_dummy_var_309: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10561;

  corral_source_split_10561:
    assume {:verifier.code 0} true;
    $i0 := $M.4;
    goto corral_source_split_10562;

  corral_source_split_10562:
    assume {:verifier.code 0} true;
    $i1 := $sub.i32($i0, 1);
    goto corral_source_split_10563;

  corral_source_split_10563:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i32($i1, 125);
    goto corral_source_split_10564;

  corral_source_split_10564:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i3 := $M.22;
    goto corral_source_split_10569;

  corral_source_split_10569:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_10570;

  corral_source_split_10570:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i4, 10);
    goto corral_source_split_10571;

  corral_source_split_10571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2606} $p6 := proc_mkdir(.str.3, $0.ref);
    goto corral_source_split_10576;

  corral_source_split_10576:
    assume {:verifier.code 0} true;
    $M.10 := $p6;
    goto corral_source_split_10577;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    $p7 := $M.10;
    goto corral_source_split_10578;

  corral_source_split_10578:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_10579;

  corral_source_split_10579:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_10580;

  corral_source_split_10580:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2608} $i11 := ldv___pci_register_driver_124(megaraid_pci_driver, __this_module, .str.3);
    goto SeqInstr_685, SeqInstr_686;

  SeqInstr_686:
    assume assertsPassed;
    goto SeqInstr_687;

  SeqInstr_687:
    call {:si_unique_call 2609} {:cexpr "error"} boogie_si_record_i32($i11);
    goto corral_source_split_10585;

  corral_source_split_10585:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_10586;

  corral_source_split_10586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2611} $i14 := ldv_register_chrdev_125(0, .str.2, megadev_fops);
    goto SeqInstr_688, SeqInstr_689;

  SeqInstr_689:
    assume assertsPassed;
    goto SeqInstr_690;

  SeqInstr_690:
    goto corral_source_split_10593;

  corral_source_split_10593:
    assume {:verifier.code 0} true;
    $M.51 := $i14;
    call {:si_unique_call 2612} {:cexpr "major"} boogie_si_record_i32($i14);
    goto corral_source_split_10594;

  corral_source_split_10594:
    assume {:verifier.code 0} true;
    $i15 := $M.51;
    goto corral_source_split_10595;

  corral_source_split_10595:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_10596;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_10591;

  corral_source_split_10591:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb14:
    assume $i16 == 1;
    goto corral_source_split_10598;

  corral_source_split_10598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2613} vslice_dummy_var_309 := printk.ref(.str.6);
    goto corral_source_split_10599;

  corral_source_split_10599:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_688:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i12 == 1;
    goto corral_source_split_10588;

  corral_source_split_10588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2610} remove_proc_entry(.str.3, $0.ref);
    goto corral_source_split_10589;

  corral_source_split_10589:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    goto $bb12;

  SeqInstr_685:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i9 == 1;
    goto corral_source_split_10582;

  corral_source_split_10582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2607} vslice_dummy_var_308 := printk.ref(.str.5);
    goto corral_source_split_10583;

  corral_source_split_10583:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_10573;

  corral_source_split_10573:
    assume {:verifier.code 0} true;
    $M.22 := 10;
    call {:si_unique_call 2605} {:cexpr "max_mbox_busy_wait"} boogie_si_record_i16(10);
    goto corral_source_split_10574;

  corral_source_split_10574:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10566;

  corral_source_split_10566:
    assume {:verifier.code 0} true;
    $M.4 := 126;
    call {:si_unique_call 2604} {:cexpr "max_cmd_per_lun"} boogie_si_record_i32(126);
    goto corral_source_split_10567;

  corral_source_split_10567:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const proc_mkdir: ref;

axiom proc_mkdir == $sub.ref(0, 625068);

procedure proc_mkdir($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation proc_mkdir($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10601;

  corral_source_split_10601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2614} $p2 := external_alloc();
    goto corral_source_split_10602;

  corral_source_split_10602:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_10603;

  corral_source_split_10603:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const ldv___pci_register_driver_124: ref;

axiom ldv___pci_register_driver_124 == $sub.ref(0, 626100);

procedure ldv___pci_register_driver_124($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.30, $M.31, $M.7, $M.8, $M.9, $M.6, $M.11, $M.55, $M.56, $CurrAddr, $M.12, $M.21, assertsPassed, $M.19, $M.20, $M.0, $M.23, $M.29, $M.26, $M.24;



implementation ldv___pci_register_driver_124($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10605;

  corral_source_split_10605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2615} $i3 := __pci_register_driver($p0, $p1, $p2);
    call {:si_unique_call 2616} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_10606;

  corral_source_split_10606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2617} $i4 := ldv___pci_register_driver($i3, $p0, $p1, $p2);
    goto SeqInstr_691, SeqInstr_692;

  SeqInstr_692:
    assume assertsPassed;
    goto SeqInstr_693;

  SeqInstr_693:
    call {:si_unique_call 2618} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_10607;

  corral_source_split_10607:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_691:
    assume !assertsPassed;
    return;
}



const ldv_register_chrdev_125: ref;

axiom ldv_register_chrdev_125 == $sub.ref(0, 627132);

procedure ldv_register_chrdev_125($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.52, $M.1, assertsPassed, $CurrAddr;



implementation ldv_register_chrdev_125($i0: i32, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2619} {:cexpr "ldv_register_chrdev_125:arg:major___0"} boogie_si_record_i32($i0);
    goto corral_source_split_10609;

  corral_source_split_10609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2620} $i3 := register_chrdev($i0, $p1, $p2);
    goto SeqInstr_694, SeqInstr_695;

  SeqInstr_695:
    assume assertsPassed;
    goto SeqInstr_696;

  SeqInstr_696:
    call {:si_unique_call 2621} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_10610;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2622} $i4 := ldv_register_chrdev($i3, $i0, $p1, $p2);
    call {:si_unique_call 2623} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_10611;

  corral_source_split_10611:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_694:
    assume !assertsPassed;
    return;
}



const register_chrdev: ref;

axiom register_chrdev == $sub.ref(0, 628164);

procedure register_chrdev($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.52, assertsPassed;



implementation register_chrdev($i0: i32, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2624} {:cexpr "register_chrdev:arg:major___0"} boogie_si_record_i32($i0);
    goto corral_source_split_10613;

  corral_source_split_10613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2625} $i3 := ldv_register_chrdev_90($i0, $p1, $p2);
    call {:si_unique_call 2626} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_10614;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2627} $i4 := ldv_linux_fs_char_dev_register_chrdev($i0);
    goto SeqInstr_697, SeqInstr_698;

  SeqInstr_698:
    assume assertsPassed;
    goto SeqInstr_699;

  SeqInstr_699:
    call {:si_unique_call 2628} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_10615;

  corral_source_split_10615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2629} $i5 := ldv_linux_usb_gadget_register_chrdev($i0);
    goto SeqInstr_700, SeqInstr_701;

  SeqInstr_701:
    assume assertsPassed;
    goto SeqInstr_702;

  SeqInstr_702:
    call {:si_unique_call 2630} {:cexpr "tmp___1"} boogie_si_record_i32($i5);
    goto corral_source_split_10616;

  corral_source_split_10616:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i4, $i5);
    goto corral_source_split_10617;

  corral_source_split_10617:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_10618;

  corral_source_split_10618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2631} ldv_assume($i7);
    goto corral_source_split_10619;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_700:
    assume !assertsPassed;
    return;

  SeqInstr_697:
    assume !assertsPassed;
    return;
}



const ldv_register_chrdev: ref;

axiom ldv_register_chrdev == $sub.ref(0, 629196);

procedure ldv_register_chrdev($i0: i32, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation ldv_register_chrdev($i0: i32, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2632} {:cexpr "ldv_register_chrdev:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 2633} {:cexpr "ldv_register_chrdev:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_10621;

  corral_source_split_10621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2634} $i4 := ldv_undef_int();
    call {:si_unique_call 2635} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_10622;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_10623;

  corral_source_split_10623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_10631;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i0, 0);
    goto corral_source_split_10632;

  corral_source_split_10632:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_10633;

  corral_source_split_10633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2638} ldv_assume($i9);
    goto corral_source_split_10634;

  corral_source_split_10634:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_10625;

  corral_source_split_10625:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 0);
    goto corral_source_split_10626;

  corral_source_split_10626:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_10627;

  corral_source_split_10627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2636} ldv_assume($i7);
    goto corral_source_split_10628;

  corral_source_split_10628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2637} ldv_dispatch_register_25_2($p3);
    goto corral_source_split_10629;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_dispatch_register_25_2: ref;

axiom ldv_dispatch_register_25_2 == $sub.ref(0, 630228);

procedure ldv_dispatch_register_25_2($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation ldv_dispatch_register_25_2($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10636;

  corral_source_split_10636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2639} $i1 := ldv_undef_int();
    call {:si_unique_call 2640} {:cexpr "tmp___1"} boogie_si_record_i32($i1);
    goto corral_source_split_10637;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10638;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_10648;

  corral_source_split_10648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2643} $p7 := ldv_xmalloc(16);
    goto corral_source_split_10649;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_10650;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10651;

  corral_source_split_10651:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p9, $p0);
    goto corral_source_split_10652;

  corral_source_split_10652:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p8);
    goto corral_source_split_10653;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2644} ldv_file_operations_file_operations_instance_1($p10);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10640;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2641} $p3 := ldv_xmalloc(16);
    goto corral_source_split_10641;

  corral_source_split_10641:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10642;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10643;

  corral_source_split_10643:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, $p0);
    goto corral_source_split_10644;

  corral_source_split_10644:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p4);
    goto corral_source_split_10645;

  corral_source_split_10645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2642} ldv_file_operations_file_operations_instance_0($p6);
    goto corral_source_split_10646;

  corral_source_split_10646:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_file_operations_file_operations_instance_0: ref;

axiom ldv_file_operations_file_operations_instance_0 == $sub.ref(0, 631260);

procedure ldv_file_operations_file_operations_instance_0($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_file_operations_file_operations_instance_0($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i1;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10655;

  corral_source_split_10655:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_10656;

  corral_source_split_10656:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_10657;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_10658;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $p7 := $u19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10666;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2646} $p8 := ldv_xmalloc(504);
    goto corral_source_split_10667;

  corral_source_split_10667:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_10668;

  corral_source_split_10668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2647} $p10 := ldv_xmalloc(976);
    goto corral_source_split_10669;

  corral_source_split_10669:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_10670;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2648} $i12 := ldv_undef_int();
    call {:si_unique_call 2649} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    goto corral_source_split_10671;

  corral_source_split_10671:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    call {:si_unique_call 2650} {:cexpr "ldv_0_size_cnt_write_size"} boogie_si_record_i64($i13);
    goto corral_source_split_10672;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2651} $i14 := ldv_undef_int();
    call {:si_unique_call 2652} {:cexpr "tmp___3"} boogie_si_record_i32($i14);
    goto corral_source_split_10673;

  corral_source_split_10673:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_10674;

  corral_source_split_10674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p9);
    goto corral_source_split_10678;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2653} ldv_free($p28);
    goto corral_source_split_10679;

  corral_source_split_10679:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p11);
    goto corral_source_split_10680;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2654} ldv_free($p29);
    goto corral_source_split_10681;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_10676;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $p16, $p17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i30, $i31, $i32, $i33, $i34, $p35, $p36, $p37, $i38, $i39, $p40, $p41, $i42, $i43, $p44, $p45, $p46 := ldv_file_operations_file_operations_instance_0_loop_$bb7($p7, $p9, $p11, $i13, $p16, $p17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i30, $i31, $i32, $i33, $i34, $p35, $p36, $p37, $i38, $i39, $p40, $p41, $i42, $i43, $p44, $p45, $p46);
    goto $bb7_last;

  corral_source_split_10683:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_10684;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2655} $i18 := ldv_file_operations_instance_probe_0_12($p17, $p11, $p9);
    call {:si_unique_call 2656} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32($i18);
    goto corral_source_split_10685;

  corral_source_split_10685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2657} $i19 := ldv_filter_err_code($i18);
    call {:si_unique_call 2658} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32($i19);
    goto corral_source_split_10686;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2659} $i20 := ldv_undef_int();
    call {:si_unique_call 2660} {:cexpr "tmp___2"} boogie_si_record_i32($i20);
    goto corral_source_split_10687;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_10688;

  corral_source_split_10688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    goto corral_source_split_10695;

  corral_source_split_10695:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i19, 0);
    goto corral_source_split_10696;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    goto corral_source_split_10697;

  corral_source_split_10697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2662} ldv_assume($i25);
    goto corral_source_split_10698;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2665} $i26 := ldv_undef_int();
    call {:si_unique_call 2666} {:cexpr "tmp___3"} boogie_si_record_i32($i26);
    goto corral_source_split_10703;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_10704;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i27 == 1);
    goto corral_source_split_10706;

  corral_source_split_10706:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb12_dummy;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_10690;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i19, 0);
    goto corral_source_split_10691;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    goto corral_source_split_10692;

  corral_source_split_10692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2661} ldv_assume($i23);
    goto corral_source_split_10693;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call $i30, $i31, $i32, $i33, $p35, $p36, $p37, $i38, $i39, $p40, $p41, $i42, $i43, $p44, $p45, $p46 := ldv_file_operations_file_operations_instance_0_loop_$bb10($p7, $p9, $i13, $i30, $i31, $i32, $i33, $p35, $p36, $p37, $i38, $i39, $p40, $p41, $i42, $i43, $p44, $p45, $p46);
    goto $bb10_last;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 1);
    goto corral_source_split_10701;

  corral_source_split_10701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i30, 2);
    goto corral_source_split_10721;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    $i33 := $i30;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 3);
    goto corral_source_split_10725;

  corral_source_split_10725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2670} ldv_stop();
    goto corral_source_split_10729;

  corral_source_split_10729:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb23:
    assume $i34 == 1;
    goto corral_source_split_10727;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb19:
    assume $i32 == 1;
    goto corral_source_split_10723;

  corral_source_split_10723:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb31_dummy;

  $bb15:
    assume $i31 == 1;
    goto corral_source_split_10708;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2667} $p35 := ldv_xmalloc(1);
    goto corral_source_split_10710;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2668} $p36 := ldv_xmalloc(8);
    goto corral_source_split_10711;

  corral_source_split_10711:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_10712;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    $i38 := $ule.i64($i13, 2147479552);
    goto corral_source_split_10713;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i32($i38);
    goto corral_source_split_10714;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2669} ldv_assume($i39);
    goto corral_source_split_10715;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p7, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_10716;

  corral_source_split_10716:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.1, $p40);
    goto corral_source_split_10717;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_10718;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_10719;

  corral_source_split_10719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2672} ldv_free($p35);
    goto corral_source_split_10736;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p37);
    goto corral_source_split_10737;

  corral_source_split_10737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2673} ldv_free($p46);
    goto corral_source_split_10738;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i43 == 1;
    goto corral_source_split_10731;

  corral_source_split_10731:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p7, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_10732;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.1, $p44);
    goto corral_source_split_10733;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2671} ldv_file_operations_instance_write_0_4($p45, $p9, $p35, $i13, $p37);
    goto corral_source_split_10734;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_10660;

  corral_source_split_10660:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10661;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_10662;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_10663;

  corral_source_split_10663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2645} ldv_free($p6);
    goto corral_source_split_10664;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    $p7 := $p5;
    goto $bb3;

  $bb31_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2663} $i30 := ldv_undef_int();
    call {:si_unique_call 2664} {:cexpr "tmp___4"} boogie_si_record_i32($i30);
    goto corral_source_split_10700;

  $bb12_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p7, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_10683;
}



const ldv_file_operations_file_operations_instance_1: ref;

axiom ldv_file_operations_file_operations_instance_1 == $sub.ref(0, 632292);

procedure ldv_file_operations_file_operations_instance_1($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_file_operations_file_operations_instance_1($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i1;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10740;

  corral_source_split_10740:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_10741;

  corral_source_split_10741:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_10742;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_10743;

  corral_source_split_10743:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $p7 := $u19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10751;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2675} $p8 := ldv_xmalloc(504);
    goto corral_source_split_10752;

  corral_source_split_10752:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_10753;

  corral_source_split_10753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2676} $p10 := ldv_xmalloc(976);
    goto corral_source_split_10754;

  corral_source_split_10754:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_10755;

  corral_source_split_10755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2677} $i12 := ldv_undef_int();
    call {:si_unique_call 2678} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    goto corral_source_split_10756;

  corral_source_split_10756:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    call {:si_unique_call 2679} {:cexpr "ldv_1_size_cnt_write_size"} boogie_si_record_i64($i13);
    goto corral_source_split_10757;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2680} $i14 := ldv_undef_int();
    call {:si_unique_call 2681} {:cexpr "tmp___3"} boogie_si_record_i32($i14);
    goto corral_source_split_10758;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_10759;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p9);
    goto corral_source_split_10763;

  corral_source_split_10763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2682} ldv_free($p28);
    goto corral_source_split_10764;

  corral_source_split_10764:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p11);
    goto corral_source_split_10765;

  corral_source_split_10765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2683} ldv_free($p29);
    goto corral_source_split_10766;

  corral_source_split_10766:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_10761;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $p16, $p17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i30, $i31, $i32, $i33, $i34, $p35, $p36, $p37, $i38, $i39, $p40, $p41, $i42, $i43, $p44, $p45, $p46 := ldv_file_operations_file_operations_instance_1_loop_$bb7($p7, $p9, $p11, $i13, $p16, $p17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i30, $i31, $i32, $i33, $i34, $p35, $p36, $p37, $i38, $i39, $p40, $p41, $i42, $i43, $p44, $p45, $p46);
    goto $bb7_last;

  corral_source_split_10768:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_10769;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2684} $i18 := ldv_file_operations_instance_probe_1_12($p17, $p11, $p9);
    call {:si_unique_call 2685} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32($i18);
    goto corral_source_split_10770;

  corral_source_split_10770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2686} $i19 := ldv_filter_err_code($i18);
    call {:si_unique_call 2687} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32($i19);
    goto corral_source_split_10771;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2688} $i20 := ldv_undef_int();
    call {:si_unique_call 2689} {:cexpr "tmp___2"} boogie_si_record_i32($i20);
    goto corral_source_split_10772;

  corral_source_split_10772:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_10773;

  corral_source_split_10773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    goto corral_source_split_10780;

  corral_source_split_10780:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i19, 0);
    goto corral_source_split_10781;

  corral_source_split_10781:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    goto corral_source_split_10782;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2691} ldv_assume($i25);
    goto corral_source_split_10783;

  corral_source_split_10783:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2694} $i26 := ldv_undef_int();
    call {:si_unique_call 2695} {:cexpr "tmp___3"} boogie_si_record_i32($i26);
    goto corral_source_split_10788;

  corral_source_split_10788:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_10789;

  corral_source_split_10789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i27 == 1);
    goto corral_source_split_10791;

  corral_source_split_10791:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb12_dummy;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_10775;

  corral_source_split_10775:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i19, 0);
    goto corral_source_split_10776;

  corral_source_split_10776:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    goto corral_source_split_10777;

  corral_source_split_10777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2690} ldv_assume($i23);
    goto corral_source_split_10778;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call $i30, $i31, $i32, $i33, $p35, $p36, $p37, $i38, $i39, $p40, $p41, $i42, $i43, $p44, $p45, $p46 := ldv_file_operations_file_operations_instance_1_loop_$bb10($p7, $p9, $i13, $i30, $i31, $i32, $i33, $p35, $p36, $p37, $i38, $i39, $p40, $p41, $i42, $i43, $p44, $p45, $p46);
    goto $bb10_last;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 1);
    goto corral_source_split_10786;

  corral_source_split_10786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i30, 2);
    goto corral_source_split_10806;

  corral_source_split_10806:
    assume {:verifier.code 0} true;
    $i33 := $i30;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 3);
    goto corral_source_split_10810;

  corral_source_split_10810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2699} ldv_stop();
    goto corral_source_split_10814;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb23:
    assume $i34 == 1;
    goto corral_source_split_10812;

  corral_source_split_10812:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb19:
    assume $i32 == 1;
    goto corral_source_split_10808;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb31_dummy;

  $bb15:
    assume $i31 == 1;
    goto corral_source_split_10793;

  corral_source_split_10793:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2696} $p35 := ldv_xmalloc(1);
    goto corral_source_split_10795;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2697} $p36 := ldv_xmalloc(8);
    goto corral_source_split_10796;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_10797;

  corral_source_split_10797:
    assume {:verifier.code 0} true;
    $i38 := $ule.i64($i13, 2147479552);
    goto corral_source_split_10798;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i32($i38);
    goto corral_source_split_10799;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2698} ldv_assume($i39);
    goto corral_source_split_10800;

  corral_source_split_10800:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p7, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_10801;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.1, $p40);
    goto corral_source_split_10802;

  corral_source_split_10802:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_10803;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_10804;

  corral_source_split_10804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2701} ldv_free($p35);
    goto corral_source_split_10821;

  corral_source_split_10821:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p37);
    goto corral_source_split_10822;

  corral_source_split_10822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2702} ldv_free($p46);
    goto corral_source_split_10823;

  corral_source_split_10823:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i43 == 1;
    goto corral_source_split_10816;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p7, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_10817;

  corral_source_split_10817:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.1, $p44);
    goto corral_source_split_10818;

  corral_source_split_10818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2700} ldv_file_operations_instance_write_1_4($p45, $p9, $p35, $i13, $p37);
    goto corral_source_split_10819;

  corral_source_split_10819:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_10745;

  corral_source_split_10745:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10746;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_10747;

  corral_source_split_10747:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_10748;

  corral_source_split_10748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2674} ldv_free($p6);
    goto corral_source_split_10749;

  corral_source_split_10749:
    assume {:verifier.code 0} true;
    $p7 := $p5;
    goto $bb3;

  $bb31_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2692} $i30 := ldv_undef_int();
    call {:si_unique_call 2693} {:cexpr "tmp___4"} boogie_si_record_i32($i30);
    goto corral_source_split_10785;

  $bb12_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p7, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_10768;
}



const ldv_file_operations_instance_probe_1_12: ref;

axiom ldv_file_operations_instance_probe_1_12 == $sub.ref(0, 633324);

procedure ldv_file_operations_instance_probe_1_12($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_file_operations_instance_probe_1_12($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10825;

  corral_source_split_10825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2703} $i3 := megadev_open($p1, $p2);
    call {:si_unique_call 2704} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_10826;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_filter_err_code: ref;

axiom ldv_filter_err_code == $sub.ref(0, 634356);

procedure ldv_filter_err_code($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_filter_err_code($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2705} {:cexpr "ldv_filter_err_code:arg:ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_10828;

  corral_source_split_10828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2706} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 2707} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_10829;

  corral_source_split_10829:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_file_operations_instance_write_1_4: ref;

axiom ldv_file_operations_instance_write_1_4 == $sub.ref(0, 635388);

procedure ldv_file_operations_instance_write_1_4($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;



implementation ldv_file_operations_instance_write_1_4($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref)
{
  var vslice_dummy_var_310: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2708} {:cexpr "ldv_file_operations_instance_write_1_4:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 2709} vslice_dummy_var_310 := devirtbounce.18($p0, $p1, $p2, $i3, $p4);
    goto corral_source_split_10831;

  corral_source_split_10831:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_instance_probe_0_12: ref;

axiom ldv_file_operations_instance_probe_0_12 == $sub.ref(0, 636420);

procedure ldv_file_operations_instance_probe_0_12($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_file_operations_instance_probe_0_12($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10833;

  corral_source_split_10833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2710} $i3 := mega_proc_open($p1, $p2);
    call {:si_unique_call 2711} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_10834;

  corral_source_split_10834:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_file_operations_instance_write_0_4: ref;

axiom ldv_file_operations_instance_write_0_4 == $sub.ref(0, 637452);

procedure ldv_file_operations_instance_write_0_4($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;



implementation ldv_file_operations_instance_write_0_4($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref)
{
  var vslice_dummy_var_311: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2712} {:cexpr "ldv_file_operations_instance_write_0_4:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 2713} vslice_dummy_var_311 := devirtbounce.18($p0, $p1, $p2, $i3, $p4);
    goto corral_source_split_10836;

  corral_source_split_10836:
    assume {:verifier.code 0} true;
    return;
}



const ldv_register_chrdev_90: ref;

axiom ldv_register_chrdev_90 == $sub.ref(0, 638484);

procedure ldv_register_chrdev_90($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_register_chrdev_90($i0: i32, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2714} {:cexpr "ldv_register_chrdev_90:arg:major___0"} boogie_si_record_i32($i0);
    goto corral_source_split_10838;

  corral_source_split_10838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2715} $i3 := __register_chrdev($i0, 0, 256, $p1, $p2);
    call {:si_unique_call 2716} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_10839;

  corral_source_split_10839:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_linux_fs_char_dev_register_chrdev: ref;

axiom ldv_linux_fs_char_dev_register_chrdev == $sub.ref(0, 639516);

procedure ldv_linux_fs_char_dev_register_chrdev($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.52, assertsPassed;



implementation ldv_linux_fs_char_dev_register_chrdev($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2717} {:cexpr "ldv_linux_fs_char_dev_register_chrdev:arg:major___0"} boogie_si_record_i32($i0);
    goto corral_source_split_10841;

  corral_source_split_10841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2718} $i1 := ldv_undef_int_nonpositive();
    call {:si_unique_call 2719} {:cexpr "is_reg"} boogie_si_record_i32($i1);
    goto corral_source_split_10842;

  corral_source_split_10842:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_10843;

  corral_source_split_10843:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i11 := $i1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_10861;

  corral_source_split_10861:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10845;

  corral_source_split_10845:
    assume {:verifier.code 0} true;
    $i3 := $M.52;
    goto corral_source_split_10846;

  corral_source_split_10846:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_10847;

  corral_source_split_10847:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_10848;

  corral_source_split_10848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2720} ldv_assert_linux_fs_char_dev__double_registration($i5);
    goto SeqInstr_703, SeqInstr_704;

  SeqInstr_704:
    assume assertsPassed;
    goto SeqInstr_705;

  SeqInstr_705:
    goto corral_source_split_10849;

  corral_source_split_10849:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 2721} {:cexpr "ldv_linux_fs_char_dev_usb_gadget_chrdev"} boogie_si_record_i32(1);
    goto corral_source_split_10850;

  corral_source_split_10850:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 0);
    goto corral_source_split_10851;

  corral_source_split_10851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i10 := $i1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_10859;

  corral_source_split_10859:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb6;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_10853;

  corral_source_split_10853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2722} $i7 := ldv_undef_int();
    call {:si_unique_call 2723} {:cexpr "is_reg"} boogie_si_record_i32($i7);
    goto corral_source_split_10854;

  corral_source_split_10854:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 0);
    goto corral_source_split_10855;

  corral_source_split_10855:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_10856;

  corral_source_split_10856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2724} ldv_assume($i9);
    goto corral_source_split_10857;

  corral_source_split_10857:
    assume {:verifier.code 0} true;
    $i10 := $i7;
    goto $bb5;

  SeqInstr_703:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_gadget_register_chrdev: ref;

axiom ldv_linux_usb_gadget_register_chrdev == $sub.ref(0, 640548);

procedure ldv_linux_usb_gadget_register_chrdev($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_gadget_register_chrdev($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2725} {:cexpr "ldv_linux_usb_gadget_register_chrdev:arg:major___0"} boogie_si_record_i32($i0);
    goto corral_source_split_10863;

  corral_source_split_10863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2726} $i1 := ldv_undef_int_nonpositive();
    call {:si_unique_call 2727} {:cexpr "is_reg"} boogie_si_record_i32($i1);
    goto corral_source_split_10864;

  corral_source_split_10864:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_10865;

  corral_source_split_10865:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i11 := $i1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_10882;

  corral_source_split_10882:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_10867;

  corral_source_split_10867:
    assume {:verifier.code 0} true;
    $i3 := $M.53;
    goto corral_source_split_10868;

  corral_source_split_10868:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_10869;

  corral_source_split_10869:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_10870;

  corral_source_split_10870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2728} ldv_assert_linux_usb_gadget__chrdev_registration_with_usb_gadget($i5);
    goto SeqInstr_706, SeqInstr_707;

  SeqInstr_707:
    assume assertsPassed;
    goto SeqInstr_708;

  SeqInstr_708:
    goto corral_source_split_10871;

  corral_source_split_10871:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 0);
    goto corral_source_split_10872;

  corral_source_split_10872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i10 := $i1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_10880;

  corral_source_split_10880:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb6;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_10874;

  corral_source_split_10874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2729} $i7 := ldv_undef_int();
    call {:si_unique_call 2730} {:cexpr "is_reg"} boogie_si_record_i32($i7);
    goto corral_source_split_10875;

  corral_source_split_10875:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 0);
    goto corral_source_split_10876;

  corral_source_split_10876:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_10877;

  corral_source_split_10877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2731} ldv_assume($i9);
    goto corral_source_split_10878;

  corral_source_split_10878:
    assume {:verifier.code 0} true;
    $i10 := $i7;
    goto $bb5;

  SeqInstr_706:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_usb_gadget__chrdev_registration_with_usb_gadget: ref;

axiom ldv_assert_linux_usb_gadget__chrdev_registration_with_usb_gadget == $sub.ref(0, 641580);

procedure ldv_assert_linux_usb_gadget__chrdev_registration_with_usb_gadget($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_gadget__chrdev_registration_with_usb_gadget($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2732} {:cexpr "ldv_assert_linux_usb_gadget__chrdev_registration_with_usb_gadget:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_10884;

  corral_source_split_10884:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_10885;

  corral_source_split_10885:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_10887;

  corral_source_split_10887:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2733} __VERIFIER_error();
    goto SeqInstr_709, SeqInstr_710;

  SeqInstr_710:
    assume assertsPassed;
    goto SeqInstr_711;

  SeqInstr_711:
    goto corral_source_split_10888;

  corral_source_split_10888:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_709:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_char_dev__double_registration: ref;

axiom ldv_assert_linux_fs_char_dev__double_registration == $sub.ref(0, 642612);

procedure ldv_assert_linux_fs_char_dev__double_registration($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_char_dev__double_registration($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2734} {:cexpr "ldv_assert_linux_fs_char_dev__double_registration:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_10890;

  corral_source_split_10890:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_10891;

  corral_source_split_10891:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_10893;

  corral_source_split_10893:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2735} __VERIFIER_error();
    goto SeqInstr_712, SeqInstr_713;

  SeqInstr_713:
    assume assertsPassed;
    goto SeqInstr_714;

  SeqInstr_714:
    goto corral_source_split_10894;

  corral_source_split_10894:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_712:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __register_chrdev: ref;

axiom __register_chrdev == $sub.ref(0, 643644);

procedure __register_chrdev($i0: i32, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __register_chrdev($i0: i32, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2736} {:cexpr "__register_chrdev:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 2737} {:cexpr "__register_chrdev:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2738} {:cexpr "__register_chrdev:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_10896;

  corral_source_split_10896:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2739} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 2740} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_10897;

  corral_source_split_10897:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const __pci_register_driver: ref;

axiom __pci_register_driver == $sub.ref(0, 644676);

procedure __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10899;

  corral_source_split_10899:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2741} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2742} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_10900;

  corral_source_split_10900:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv___pci_register_driver: ref;

axiom ldv___pci_register_driver == $sub.ref(0, 645708);

procedure ldv___pci_register_driver($i0: i32, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.30, $M.31, $M.7, $M.8, $M.9, $M.6, $M.11, $M.55, $M.56, $CurrAddr, $M.12, $M.21, assertsPassed, $M.19, $M.20, $M.0, $M.23, $M.29, $M.26, $M.24;



implementation ldv___pci_register_driver($i0: i32, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2743} {:cexpr "ldv___pci_register_driver:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_10902;

  corral_source_split_10902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2744} $i4 := ldv_undef_int();
    call {:si_unique_call 2745} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_10903;

  corral_source_split_10903:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_10904;

  corral_source_split_10904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_10912;

  corral_source_split_10912:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i0, 0);
    goto corral_source_split_10913;

  corral_source_split_10913:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_10914;

  corral_source_split_10914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2748} ldv_assume($i9);
    goto corral_source_split_10915;

  corral_source_split_10915:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_10906;

  corral_source_split_10906:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 0);
    goto corral_source_split_10907;

  corral_source_split_10907:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_10908;

  corral_source_split_10908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2746} ldv_assume($i7);
    goto corral_source_split_10909;

  corral_source_split_10909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2747} ldv_dispatch_register_27_2($p1);
    goto SeqInstr_715, SeqInstr_716;

  SeqInstr_716:
    assume assertsPassed;
    goto SeqInstr_717;

  SeqInstr_717:
    goto corral_source_split_10910;

  corral_source_split_10910:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_715:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_register_27_2: ref;

axiom ldv_dispatch_register_27_2 == $sub.ref(0, 646740);

procedure ldv_dispatch_register_27_2($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.30, $M.31, $M.7, $M.8, $M.9, $M.6, $M.11, $M.55, $M.56, $CurrAddr, $M.12, $M.21, assertsPassed, $M.19, $M.20, $M.0, $M.23, $M.29, $M.26, $M.24;



implementation ldv_dispatch_register_27_2($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10917;

  corral_source_split_10917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2749} $p1 := ldv_xmalloc(16);
    goto corral_source_split_10918;

  corral_source_split_10918:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_10919;

  corral_source_split_10919:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10920;

  corral_source_split_10920:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, $p0);
    goto corral_source_split_10921;

  corral_source_split_10921:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_10922;

  corral_source_split_10922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2750} ldv_pci_pci_instance_3($p4);
    goto SeqInstr_718, SeqInstr_719;

  SeqInstr_719:
    assume assertsPassed;
    goto SeqInstr_720;

  SeqInstr_720:
    goto corral_source_split_10923;

  corral_source_split_10923:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_718:
    assume !assertsPassed;
    return;
}



const ldv_pci_pci_instance_3: ref;

axiom ldv_pci_pci_instance_3 == $sub.ref(0, 647772);

procedure ldv_pci_pci_instance_3($p0: ref);
  free requires assertsPassed;
  modifies $M.30, $M.31, $M.1, $M.7, $M.8, $M.9, $M.6, $M.11, $M.55, $M.56, $CurrAddr, $M.12, $M.21, assertsPassed, $M.19, $M.20, $M.0, $M.23, $M.29, $M.26, $M.24;



implementation ldv_pci_pci_instance_3($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i26: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2751} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_10925;

  corral_source_split_10925:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_10926;

  corral_source_split_10926:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_10927;

  corral_source_split_10927:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_10928;

  corral_source_split_10928:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $p8 := $u20;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10936;

  corral_source_split_10936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2753} $p9 := ldv_xmalloc(2968);
    goto corral_source_split_10937;

  corral_source_split_10937:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_10938;

  corral_source_split_10938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2754} $p11 := ldv_xmalloc(32);
    goto corral_source_split_10939;

  corral_source_split_10939:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_10940;

  corral_source_split_10940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2755} $i13 := ldv_undef_int();
    call {:si_unique_call 2756} {:cexpr "tmp___2"} boogie_si_record_i32($i13);
    goto corral_source_split_10941;

  corral_source_split_10941:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_10942;

  corral_source_split_10942:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p10);
    goto corral_source_split_10946;

  corral_source_split_10946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2757} ldv_free($p31);
    goto corral_source_split_10947;

  corral_source_split_10947:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p12);
    goto corral_source_split_10948;

  corral_source_split_10948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2758} ldv_free($p32);
    goto corral_source_split_10949;

  corral_source_split_10949:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_10944;

  corral_source_split_10944:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $p15, $p16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i27, $i28, $i29, $i30, $i33, $i26, $i34, $i35, $i36, $i37, $i38, $p39, $p40, $i41, $i42, $p43, $p44, $p45, $i46, $i47, $i48, $i49, $p50, $p51, $i52, $i53, $p54, $p55, $p56, $i57, $i58, $i59, $i60, $p61, $p62, $i63, $i64, $p65, $p66, $p67, $p68, $i69, $i70, $p71, $p72, $p73, $p74, $p75, $p76 := ldv_pci_pci_instance_3_loop_$bb7($p1, $p8, $p10, $p12, $p15, $p16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i27, $i28, $i29, $i30, $i33, $i26, $i34, $i35, $i36, $i37, $i38, $p39, $p40, $i41, $i42, $p43, $p44, $p45, $i46, $i47, $i48, $i49, $p50, $p51, $i52, $i53, $p54, $p55, $p56, $i57, $i58, $i59, $i60, $p61, $p62, $i63, $i64, $p65, $p66, $p67, $p68, $i69, $i70, $p71, $p72, $p73, $p74, $p75, $p76);
    goto $bb7_last;

  corral_source_split_10951:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_10952;

  corral_source_split_10952:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_10953;

  corral_source_split_10953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2760} $i17 := ldv_pci_instance_probe_3_17($p16, $p10, $p12);
    goto SeqInstr_721, SeqInstr_722;

  SeqInstr_722:
    assume assertsPassed;
    goto SeqInstr_723;

  SeqInstr_723:
    call {:si_unique_call 2761} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32($i17);
    goto corral_source_split_10954;

  corral_source_split_10954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2762} $i18 := ldv_ldv_post_probe_133($i17);
    goto SeqInstr_724, SeqInstr_725;

  SeqInstr_725:
    assume assertsPassed;
    goto SeqInstr_726;

  SeqInstr_726:
    call {:si_unique_call 2763} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32($i18);
    goto corral_source_split_10955;

  corral_source_split_10955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2764} $i19 := ldv_undef_int();
    call {:si_unique_call 2765} {:cexpr "tmp___1"} boogie_si_record_i32($i19);
    goto corral_source_split_10956;

  corral_source_split_10956:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_10957;

  corral_source_split_10957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    goto corral_source_split_10964;

  corral_source_split_10964:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i18, 0);
    goto corral_source_split_10965;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    goto corral_source_split_10966;

  corral_source_split_10966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2767} ldv_assume($i28);
    goto corral_source_split_10967;

  corral_source_split_10967:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2770} $i29 := ldv_undef_int();
    call {:si_unique_call 2771} {:cexpr "tmp___2"} boogie_si_record_i32($i29);
    goto corral_source_split_10975;

  corral_source_split_10975:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_10976;

  corral_source_split_10976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i30 == 1);
    goto corral_source_split_10978;

  corral_source_split_10978:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb16_dummy;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_10959;

  corral_source_split_10959:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i18, 0);
    goto corral_source_split_10960;

  corral_source_split_10960:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_10961;

  corral_source_split_10961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2766} ldv_assume($i22);
    goto corral_source_split_10962;

  corral_source_split_10962:
    assume {:verifier.code 0} true;
    $i23 := $i18;
    goto $bb10;

  $bb10:
    call $i23, $i24, $i25, $i33, $i26, $i34, $i35, $i37, $i38, $p39, $p40, $i41, $i42, $p43, $p44, $p45, $i46, $i47, $i48, $i49, $p50, $p51, $i52, $i53, $p54, $p55, $p56, $i57, $i58, $i59, $i60, $p61, $p62, $i63, $i64, $p65, $p66, $p67, $p68, $i69, $i70, $p71, $p72 := ldv_pci_pci_instance_3_loop_$bb10($p1, $p8, $p10, $i23, $i24, $i25, $i33, $i26, $i34, $i35, $i37, $i38, $p39, $p40, $i41, $i42, $p43, $p44, $p45, $i46, $i47, $i48, $i49, $p50, $p51, $i52, $i53, $p54, $p55, $p56, $i57, $i58, $i59, $i60, $p61, $p62, $i63, $i64, $p65, $p66, $p67, $p68, $i69, $i70, $p71, $p72);
    goto $bb10_last;

  corral_source_split_10969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2768} $i24 := ldv_undef_int();
    call {:si_unique_call 2769} {:cexpr "tmp___3"} boogie_si_record_i32($i24);
    goto corral_source_split_10970;

  corral_source_split_10970:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 1);
    goto corral_source_split_10971;

  corral_source_split_10971:
    assume {:verifier.code 0} true;
    $i26 := $i24;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i26, 2);
    goto corral_source_split_10985;

  corral_source_split_10985:
    assume {:verifier.code 0} true;
    $i35 := $i26;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 3);
    goto corral_source_split_10994;

  corral_source_split_10994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2776} ldv_stop();
    goto corral_source_split_11005;

  corral_source_split_11005:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb26:
    assume $i36 == 1;
    goto corral_source_split_10996;

  corral_source_split_10996:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_10998;

  corral_source_split_10998:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.1, $p73);
    goto corral_source_split_10999;

  corral_source_split_10999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2774} ldv_pci_instance_shutdown_3_3($p74, $p10);
    goto SeqInstr_727, SeqInstr_728;

  SeqInstr_728:
    assume assertsPassed;
    goto SeqInstr_729;

  SeqInstr_729:
    goto corral_source_split_11000;

  corral_source_split_11000:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_11001;

  corral_source_split_11001:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.1, $p75);
    goto corral_source_split_11002;

  corral_source_split_11002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2775} ldv_pci_instance_release_3_2($p76, $p10);
    goto SeqInstr_730, SeqInstr_731;

  SeqInstr_731:
    assume assertsPassed;
    goto SeqInstr_732;

  SeqInstr_732:
    goto corral_source_split_11003;

  corral_source_split_11003:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_730:
    assume !assertsPassed;
    return;

  SeqInstr_727:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i34 == 1;
    goto corral_source_split_10987;

  corral_source_split_10987:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_10989;

  corral_source_split_10989:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.1, $p39);
    goto corral_source_split_10990;

  corral_source_split_10990:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_10991;

  corral_source_split_10991:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_10992;

  corral_source_split_10992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i48 := $i23;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_11014;

  corral_source_split_11014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2779} $i49 := ldv_filter_err_code($i48);
    call {:si_unique_call 2780} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32($i49);
    goto corral_source_split_11015;

  corral_source_split_11015:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_11016;

  corral_source_split_11016:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.1, $p50);
    goto corral_source_split_11017;

  corral_source_split_11017:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_11018;

  corral_source_split_11018:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_11019;

  corral_source_split_11019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i59 := $i49;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_11028;

  corral_source_split_11028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2783} $i60 := ldv_filter_err_code($i59);
    call {:si_unique_call 2784} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32($i60);
    goto corral_source_split_11029;

  corral_source_split_11029:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_11030;

  corral_source_split_11030:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.1, $p61);
    goto corral_source_split_11031;

  corral_source_split_11031:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_11032;

  corral_source_split_11032:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_11033;

  corral_source_split_11033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_11040;

  corral_source_split_11040:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.1, $p67);
    goto corral_source_split_11041;

  corral_source_split_11041:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_11042;

  corral_source_split_11042:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_11043;

  corral_source_split_11043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i23 := $i60;
    goto $bb43_dummy;

  $bb41:
    assume $i70 == 1;
    goto corral_source_split_11045;

  corral_source_split_11045:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_11046;

  corral_source_split_11046:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.1, $p71);
    goto corral_source_split_11047;

  corral_source_split_11047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2786} ldv_pci_instance_resume_3_5($p72, $p10);
    goto SeqInstr_736, SeqInstr_737;

  SeqInstr_737:
    assume assertsPassed;
    goto SeqInstr_738;

  SeqInstr_738:
    goto corral_source_split_11048;

  corral_source_split_11048:
    assume {:verifier.code 0} true;
    goto $bb43;

  SeqInstr_736:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i64 == 1;
    goto corral_source_split_11035;

  corral_source_split_11035:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_11036;

  corral_source_split_11036:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.1, $p65);
    goto corral_source_split_11037;

  corral_source_split_11037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2785} ldv_pci_instance_resume_early_3_6($p66, $p10);
    goto SeqInstr_733, SeqInstr_734;

  SeqInstr_734:
    assume assertsPassed;
    goto SeqInstr_735;

  SeqInstr_735:
    goto corral_source_split_11038;

  corral_source_split_11038:
    assume {:verifier.code 0} true;
    goto $bb40;

  SeqInstr_733:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i53 == 1;
    goto corral_source_split_11021;

  corral_source_split_11021:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_11022;

  corral_source_split_11022:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.1, $p54);
    goto corral_source_split_11023;

  corral_source_split_11023:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_11024;

  corral_source_split_11024:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.54, $p56);
    goto corral_source_split_11025;

  corral_source_split_11025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2781} $i58 := ldv_pci_instance_suspend_late_3_7($p55, $p10, $i57);
    call {:si_unique_call 2782} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32($i58);
    goto corral_source_split_11026;

  corral_source_split_11026:
    assume {:verifier.code 0} true;
    $i59 := $i58;
    goto $bb37;

  $bb32:
    assume $i42 == 1;
    goto corral_source_split_11007;

  corral_source_split_11007:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_11008;

  corral_source_split_11008:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.1, $p43);
    goto corral_source_split_11009;

  corral_source_split_11009:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_11010;

  corral_source_split_11010:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.54, $p45);
    goto corral_source_split_11011;

  corral_source_split_11011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2777} $i47 := ldv_pci_instance_suspend_3_8($p44, $p10, $i46);
    call {:si_unique_call 2778} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32($i47);
    goto corral_source_split_11012;

  corral_source_split_11012:
    assume {:verifier.code 0} true;
    $i48 := $i47;
    goto $bb34;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_10973;

  corral_source_split_10973:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    call $i33, $i37, $i38 := ldv_pci_pci_instance_3_loop_$bb14($i33, $i37, $i38);
    goto $bb14_last;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2772} $i37 := ldv_undef_int();
    call {:si_unique_call 2773} {:cexpr "tmp___3"} boogie_si_record_i32($i37);
    goto corral_source_split_10980;

  corral_source_split_10980:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 1);
    goto corral_source_split_10981;

  corral_source_split_10981:
    assume {:verifier.code 0} true;
    $i33 := $i37;
    assume true;
    goto $bb31, $bb20;

  $bb20:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_10983;

  corral_source_split_10983:
    assume {:verifier.code 0} true;
    $i26 := $i33;
    goto $bb13;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb31_dummy;

  SeqInstr_724:
    assume !assertsPassed;
    return;

  SeqInstr_721:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_10930;

  corral_source_split_10930:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10931;

  corral_source_split_10931:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_10932;

  corral_source_split_10932:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_10933;

  corral_source_split_10933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2752} ldv_free($p7);
    goto corral_source_split_10934;

  corral_source_split_10934:
    assume {:verifier.code 0} true;
    $p8 := $p6;
    goto $bb3;

  $bb31_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb43_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10969;

  $bb16_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2759} ldv_ldv_pre_probe_132();
    goto corral_source_split_10951;
}



const ldv_ldv_pre_probe_132: ref;

axiom ldv_ldv_pre_probe_132 == $sub.ref(0, 648804);

procedure ldv_ldv_pre_probe_132();
  free requires assertsPassed;
  modifies $M.30, $M.31;



implementation ldv_ldv_pre_probe_132()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11050;

  corral_source_split_11050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2787} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_11051;

  corral_source_split_11051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2788} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_11052;

  corral_source_split_11052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2789} ldv_pre_probe();
    goto corral_source_split_11053;

  corral_source_split_11053:
    assume {:verifier.code 0} true;
    return;
}



const ldv_pci_instance_probe_3_17: ref;

axiom ldv_pci_instance_probe_3_17 == $sub.ref(0, 649836);

procedure ldv_pci_instance_probe_3_17($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.7, $M.8, $M.9, $M.6, $M.12, $CurrAddr, $M.21, assertsPassed, $M.11, $M.0, $M.19, $M.30, $M.31, $M.20, $M.23, $M.29, $M.26, $M.24;



implementation ldv_pci_instance_probe_3_17($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11055;

  corral_source_split_11055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2790} $i3 := megaraid_probe_one($p1, $p2);
    goto SeqInstr_739, SeqInstr_740;

  SeqInstr_740:
    assume assertsPassed;
    goto SeqInstr_741;

  SeqInstr_741:
    call {:si_unique_call 2791} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_11056;

  corral_source_split_11056:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_739:
    assume !assertsPassed;
    return;
}



const ldv_ldv_post_probe_133: ref;

axiom ldv_ldv_post_probe_133 == $sub.ref(0, 650868);

procedure ldv_ldv_post_probe_133($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.31, assertsPassed;



implementation ldv_ldv_post_probe_133($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2792} {:cexpr "ldv_ldv_post_probe_133:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_11058;

  corral_source_split_11058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2793} ldv_linux_net_register_check_return_value_probe($i0);
    goto SeqInstr_742, SeqInstr_743;

  SeqInstr_743:
    assume assertsPassed;
    goto SeqInstr_744;

  SeqInstr_744:
    goto corral_source_split_11059;

  corral_source_split_11059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2794} ldv_linux_usb_register_check_return_value_probe($i0);
    goto SeqInstr_745, SeqInstr_746;

  SeqInstr_746:
    assume assertsPassed;
    goto SeqInstr_747;

  SeqInstr_747:
    goto corral_source_split_11060;

  corral_source_split_11060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2795} $i1 := ldv_post_probe($i0);
    call {:si_unique_call 2796} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11061;

  corral_source_split_11061:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_745:
    assume !assertsPassed;
    return;

  SeqInstr_742:
    assume !assertsPassed;
    return;
}



const ldv_pci_instance_suspend_3_8: ref;

axiom ldv_pci_instance_suspend_3_8 == $sub.ref(0, 651900);

procedure ldv_pci_instance_suspend_3_8($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.55, $CurrAddr;



implementation ldv_pci_instance_suspend_3_8($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2797} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.55 := $store.i32($M.55, $p4, $i2);
    goto corral_source_split_11063;

  corral_source_split_11063:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_11064;

  corral_source_split_11064:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.55, $p5);
    call {:si_unique_call 2798} $i7 := devirtbounce.19($p0, $p1, $i6);
    call {:si_unique_call 2799} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_11065;

  corral_source_split_11065:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const ldv_pci_instance_suspend_late_3_7: ref;

axiom ldv_pci_instance_suspend_late_3_7 == $sub.ref(0, 652932);

procedure ldv_pci_instance_suspend_late_3_7($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.56, $CurrAddr;



implementation ldv_pci_instance_suspend_late_3_7($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2800} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.56 := $store.i32($M.56, $p4, $i2);
    goto corral_source_split_11067;

  corral_source_split_11067:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_11068;

  corral_source_split_11068:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.56, $p5);
    call {:si_unique_call 2801} $i7 := devirtbounce.19($p0, $p1, $i6);
    call {:si_unique_call 2802} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_11069;

  corral_source_split_11069:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const ldv_pci_instance_resume_early_3_6: ref;

axiom ldv_pci_instance_resume_early_3_6 == $sub.ref(0, 653964);

procedure ldv_pci_instance_resume_early_3_6($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.11, $M.6, $CurrAddr, $M.19, $M.20, $M.21, $M.12, assertsPassed;



implementation ldv_pci_instance_resume_early_3_6($p0: ref, $p1: ref)
{
  var vslice_dummy_var_312: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2803} vslice_dummy_var_312 := devirtbounce.20($p0, $p1);
    goto SeqInstr_748, SeqInstr_749;

  SeqInstr_749:
    assume assertsPassed;
    goto SeqInstr_750;

  SeqInstr_750:
    goto corral_source_split_11071;

  corral_source_split_11071:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_748:
    assume !assertsPassed;
    return;
}



const ldv_pci_instance_resume_3_5: ref;

axiom ldv_pci_instance_resume_3_5 == $sub.ref(0, 654996);

procedure ldv_pci_instance_resume_3_5($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.11, $M.6, $CurrAddr, $M.19, $M.20, $M.21, $M.12, assertsPassed;



implementation ldv_pci_instance_resume_3_5($p0: ref, $p1: ref)
{
  var vslice_dummy_var_313: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2804} vslice_dummy_var_313 := devirtbounce.20($p0, $p1);
    goto SeqInstr_751, SeqInstr_752;

  SeqInstr_752:
    assume assertsPassed;
    goto SeqInstr_753;

  SeqInstr_753:
    goto corral_source_split_11073;

  corral_source_split_11073:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_751:
    assume !assertsPassed;
    return;
}



const ldv_pci_instance_shutdown_3_3: ref;

axiom ldv_pci_instance_shutdown_3_3 == $sub.ref(0, 656028);

procedure ldv_pci_instance_shutdown_3_3($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.11, $M.6, $M.19, $M.20, $M.21, $M.12, assertsPassed;



implementation ldv_pci_instance_shutdown_3_3($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11075;

  corral_source_split_11075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2805} megaraid_shutdown($p1);
    goto SeqInstr_754, SeqInstr_755;

  SeqInstr_755:
    assume assertsPassed;
    goto SeqInstr_756;

  SeqInstr_756:
    goto corral_source_split_11076;

  corral_source_split_11076:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_754:
    assume !assertsPassed;
    return;
}



const ldv_pci_instance_release_3_2: ref;

axiom ldv_pci_instance_release_3_2 == $sub.ref(0, 657060);

procedure ldv_pci_instance_release_3_2($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.11, $M.6, $M.1, $CurrAddr, $M.12, assertsPassed, $M.19, $M.20, $M.21;



implementation ldv_pci_instance_release_3_2($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11078;

  corral_source_split_11078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2806} megaraid_remove_one($p1);
    goto SeqInstr_757, SeqInstr_758;

  SeqInstr_758:
    assume assertsPassed;
    goto SeqInstr_759;

  SeqInstr_759:
    goto corral_source_split_11079;

  corral_source_split_11079:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_757:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_deregister_dummy_resourceless_instance_14_28_4: ref;

axiom ldv_dispatch_deregister_dummy_resourceless_instance_14_28_4 == $sub.ref(0, 658092);

procedure ldv_dispatch_deregister_dummy_resourceless_instance_14_28_4();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_dummy_resourceless_instance_14_28_4()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11081;

  corral_source_split_11081:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_register_dummy_resourceless_instance_14_28_5: ref;

axiom ldv_dispatch_register_dummy_resourceless_instance_14_28_5 == $sub.ref(0, 659124);

procedure ldv_dispatch_register_dummy_resourceless_instance_14_28_5();
  free requires assertsPassed;
  modifies $M.26, $M.1, $CurrAddr, $M.47, $M.19, $M.49, $M.20, $M.21, assertsPassed;



implementation ldv_dispatch_register_dummy_resourceless_instance_14_28_5()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11083;

  corral_source_split_11083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2807} $p0 := ldv_xmalloc(4);
    goto corral_source_split_11084;

  corral_source_split_11084:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_11085;

  corral_source_split_11085:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_11086;

  corral_source_split_11086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2808} ldv_struct_mega_proc_file_dummy_resourceless_instance_6($p2);
    goto SeqInstr_760, SeqInstr_761;

  SeqInstr_761:
    assume assertsPassed;
    goto SeqInstr_762;

  SeqInstr_762:
    goto corral_source_split_11087;

  corral_source_split_11087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2809} $p3 := ldv_xmalloc(4);
    goto corral_source_split_11088;

  corral_source_split_11088:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_11089;

  corral_source_split_11089:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_11090;

  corral_source_split_11090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2810} ldv_struct_mega_proc_file_dummy_resourceless_instance_7($p5);
    goto corral_source_split_11091;

  corral_source_split_11091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2811} $p6 := ldv_xmalloc(4);
    goto corral_source_split_11092;

  corral_source_split_11092:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_11093;

  corral_source_split_11093:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_11094;

  corral_source_split_11094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2812} ldv_struct_mega_proc_file_dummy_resourceless_instance_8($p8);
    goto corral_source_split_11095;

  corral_source_split_11095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2813} $p9 := ldv_xmalloc(4);
    goto corral_source_split_11096;

  corral_source_split_11096:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_11097;

  corral_source_split_11097:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_11098;

  corral_source_split_11098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2814} ldv_struct_mega_proc_file_dummy_resourceless_instance_9($p11);
    goto SeqInstr_763, SeqInstr_764;

  SeqInstr_764:
    assume assertsPassed;
    goto SeqInstr_765;

  SeqInstr_765:
    goto corral_source_split_11099;

  corral_source_split_11099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2815} $p12 := ldv_xmalloc(4);
    goto corral_source_split_11100;

  corral_source_split_11100:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_11101;

  corral_source_split_11101:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_11102;

  corral_source_split_11102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2816} ldv_struct_mega_proc_file_dummy_resourceless_instance_10($p14);
    goto SeqInstr_766, SeqInstr_767;

  SeqInstr_767:
    assume assertsPassed;
    goto SeqInstr_768;

  SeqInstr_768:
    goto corral_source_split_11103;

  corral_source_split_11103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2817} $p15 := ldv_xmalloc(4);
    goto corral_source_split_11104;

  corral_source_split_11104:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_11105;

  corral_source_split_11105:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_11106;

  corral_source_split_11106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2818} ldv_struct_mega_proc_file_dummy_resourceless_instance_11($p17);
    goto SeqInstr_769, SeqInstr_770;

  SeqInstr_770:
    assume assertsPassed;
    goto SeqInstr_771;

  SeqInstr_771:
    goto corral_source_split_11107;

  corral_source_split_11107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2819} $p18 := ldv_xmalloc(4);
    goto corral_source_split_11108;

  corral_source_split_11108:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_11109;

  corral_source_split_11109:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_11110;

  corral_source_split_11110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2820} ldv_struct_mega_proc_file_dummy_resourceless_instance_12($p20);
    goto SeqInstr_772, SeqInstr_773;

  SeqInstr_773:
    assume assertsPassed;
    goto SeqInstr_774;

  SeqInstr_774:
    goto corral_source_split_11111;

  corral_source_split_11111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2821} $p21 := ldv_xmalloc(4);
    goto corral_source_split_11112;

  corral_source_split_11112:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_11113;

  corral_source_split_11113:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_11114;

  corral_source_split_11114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2822} ldv_struct_mega_proc_file_dummy_resourceless_instance_13($p23);
    goto SeqInstr_775, SeqInstr_776;

  SeqInstr_776:
    assume assertsPassed;
    goto SeqInstr_777;

  SeqInstr_777:
    goto corral_source_split_11115;

  corral_source_split_11115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2823} $p24 := ldv_xmalloc(4);
    goto corral_source_split_11116;

  corral_source_split_11116:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_11117;

  corral_source_split_11117:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_11118;

  corral_source_split_11118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2824} ldv_struct_mega_proc_file_dummy_resourceless_instance_14($p26);
    goto SeqInstr_778, SeqInstr_779;

  SeqInstr_779:
    assume assertsPassed;
    goto SeqInstr_780;

  SeqInstr_780:
    goto corral_source_split_11119;

  corral_source_split_11119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2825} $p27 := ldv_xmalloc(4);
    goto corral_source_split_11120;

  corral_source_split_11120:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_11121;

  corral_source_split_11121:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_11122;

  corral_source_split_11122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2826} ldv_struct_mega_proc_file_dummy_resourceless_instance_15($p29);
    goto SeqInstr_781, SeqInstr_782;

  SeqInstr_782:
    assume assertsPassed;
    goto SeqInstr_783;

  SeqInstr_783:
    goto corral_source_split_11123;

  corral_source_split_11123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2827} $p30 := ldv_xmalloc(4);
    goto corral_source_split_11124;

  corral_source_split_11124:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_11125;

  corral_source_split_11125:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_11126;

  corral_source_split_11126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2828} ldv_struct_mega_proc_file_dummy_resourceless_instance_16($p32);
    goto SeqInstr_784, SeqInstr_785;

  SeqInstr_785:
    assume assertsPassed;
    goto SeqInstr_786;

  SeqInstr_786:
    goto corral_source_split_11127;

  corral_source_split_11127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2829} $p33 := ldv_xmalloc(4);
    goto corral_source_split_11128;

  corral_source_split_11128:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_11129;

  corral_source_split_11129:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_11130;

  corral_source_split_11130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2830} ldv_struct_mega_proc_file_dummy_resourceless_instance_17($p35);
    goto SeqInstr_787, SeqInstr_788;

  SeqInstr_788:
    assume assertsPassed;
    goto SeqInstr_789;

  SeqInstr_789:
    goto corral_source_split_11131;

  corral_source_split_11131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2831} $p36 := ldv_xmalloc(4);
    goto corral_source_split_11132;

  corral_source_split_11132:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_11133;

  corral_source_split_11133:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_11134;

  corral_source_split_11134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2832} ldv_struct_mega_proc_file_dummy_resourceless_instance_18($p38);
    goto corral_source_split_11135;

  corral_source_split_11135:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_787:
    assume !assertsPassed;
    return;

  SeqInstr_784:
    assume !assertsPassed;
    return;

  SeqInstr_781:
    assume !assertsPassed;
    return;

  SeqInstr_778:
    assume !assertsPassed;
    return;

  SeqInstr_775:
    assume !assertsPassed;
    return;

  SeqInstr_772:
    assume !assertsPassed;
    return;

  SeqInstr_769:
    assume !assertsPassed;
    return;

  SeqInstr_766:
    assume !assertsPassed;
    return;

  SeqInstr_763:
    assume !assertsPassed;
    return;

  SeqInstr_760:
    assume !assertsPassed;
    return;
}



const ldv_struct_mega_proc_file_dummy_resourceless_instance_6: ref;

axiom ldv_struct_mega_proc_file_dummy_resourceless_instance_6 == $sub.ref(0, 660156);

procedure ldv_struct_mega_proc_file_dummy_resourceless_instance_6($p0: ref);
  free requires assertsPassed;
  modifies $M.26, $M.1, $CurrAddr, $M.19, $M.20, $M.21, assertsPassed;



implementation ldv_struct_mega_proc_file_dummy_resourceless_instance_6($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11137;

  corral_source_split_11137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2833} $i1 := ldv_undef_int();
    call {:si_unique_call 2834} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11138;

  corral_source_split_11138:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_11139;

  corral_source_split_11139:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11141;

  corral_source_split_11141:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5 := ldv_struct_mega_proc_file_dummy_resourceless_instance_6_loop_$bb4($p3, $i4, $i5);
    goto $bb4_last;

  corral_source_split_11143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2836} ldv_dummy_resourceless_instance_callback_6_3($u21, $u22, $p3);
    goto SeqInstr_790, SeqInstr_791;

  SeqInstr_791:
    assume assertsPassed;
    goto SeqInstr_792;

  SeqInstr_792:
    goto corral_source_split_11144;

  corral_source_split_11144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2837} ldv_free($p3);
    goto corral_source_split_11145;

  corral_source_split_11145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2838} $i4 := ldv_undef_int();
    call {:si_unique_call 2839} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_11146;

  corral_source_split_11146:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_11147;

  corral_source_split_11147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_11149;

  corral_source_split_11149:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb5_dummy;

  SeqInstr_790:
    assume !assertsPassed;
    return;

  $bb5_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2835} $p3 := ldv_xmalloc(1);
    goto corral_source_split_11143;
}



const ldv_struct_mega_proc_file_dummy_resourceless_instance_7: ref;

axiom ldv_struct_mega_proc_file_dummy_resourceless_instance_7 == $sub.ref(0, 661188);

procedure ldv_struct_mega_proc_file_dummy_resourceless_instance_7($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_struct_mega_proc_file_dummy_resourceless_instance_7($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11151;

  corral_source_split_11151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2840} $i1 := ldv_undef_int();
    call {:si_unique_call 2841} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11152;

  corral_source_split_11152:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_11153;

  corral_source_split_11153:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11155;

  corral_source_split_11155:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5 := ldv_struct_mega_proc_file_dummy_resourceless_instance_7_loop_$bb4($p3, $i4, $i5);
    goto $bb4_last;

  corral_source_split_11157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2843} ldv_dummy_resourceless_instance_callback_7_3($u21, $u22, $p3);
    goto corral_source_split_11158;

  corral_source_split_11158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2844} ldv_free($p3);
    goto corral_source_split_11159;

  corral_source_split_11159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2845} $i4 := ldv_undef_int();
    call {:si_unique_call 2846} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_11160;

  corral_source_split_11160:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_11161;

  corral_source_split_11161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_11163;

  corral_source_split_11163:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb5_dummy;

  $bb5_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2842} $p3 := ldv_xmalloc(1);
    goto corral_source_split_11157;
}



const ldv_struct_mega_proc_file_dummy_resourceless_instance_8: ref;

axiom ldv_struct_mega_proc_file_dummy_resourceless_instance_8 == $sub.ref(0, 662220);

procedure ldv_struct_mega_proc_file_dummy_resourceless_instance_8($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_struct_mega_proc_file_dummy_resourceless_instance_8($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11165;

  corral_source_split_11165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2847} $i1 := ldv_undef_int();
    call {:si_unique_call 2848} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11166;

  corral_source_split_11166:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_11167;

  corral_source_split_11167:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11169;

  corral_source_split_11169:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5 := ldv_struct_mega_proc_file_dummy_resourceless_instance_8_loop_$bb4($p3, $i4, $i5);
    goto $bb4_last;

  corral_source_split_11171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2850} ldv_dummy_resourceless_instance_callback_8_3($u21, $u22, $p3);
    goto corral_source_split_11172;

  corral_source_split_11172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2851} ldv_free($p3);
    goto corral_source_split_11173;

  corral_source_split_11173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2852} $i4 := ldv_undef_int();
    call {:si_unique_call 2853} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_11174;

  corral_source_split_11174:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_11175;

  corral_source_split_11175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_11177;

  corral_source_split_11177:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb5_dummy;

  $bb5_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2849} $p3 := ldv_xmalloc(1);
    goto corral_source_split_11171;
}



const ldv_struct_mega_proc_file_dummy_resourceless_instance_9: ref;

axiom ldv_struct_mega_proc_file_dummy_resourceless_instance_9 == $sub.ref(0, 663252);

procedure ldv_struct_mega_proc_file_dummy_resourceless_instance_9($p0: ref);
  free requires assertsPassed;
  modifies $M.26, $M.1, $M.47, $CurrAddr, $M.19, $M.49, $M.20, $M.21, assertsPassed;



implementation ldv_struct_mega_proc_file_dummy_resourceless_instance_9($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11179;

  corral_source_split_11179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2854} $i1 := ldv_undef_int();
    call {:si_unique_call 2855} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11180;

  corral_source_split_11180:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_11181;

  corral_source_split_11181:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11183;

  corral_source_split_11183:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5 := ldv_struct_mega_proc_file_dummy_resourceless_instance_9_loop_$bb4($p3, $i4, $i5);
    goto $bb4_last;

  corral_source_split_11185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2857} ldv_dummy_resourceless_instance_callback_9_3($u21, $u22, $p3);
    goto SeqInstr_793, SeqInstr_794;

  SeqInstr_794:
    assume assertsPassed;
    goto SeqInstr_795;

  SeqInstr_795:
    goto corral_source_split_11186;

  corral_source_split_11186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2858} ldv_free($p3);
    goto corral_source_split_11187;

  corral_source_split_11187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2859} $i4 := ldv_undef_int();
    call {:si_unique_call 2860} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_11188;

  corral_source_split_11188:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_11189;

  corral_source_split_11189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_11191;

  corral_source_split_11191:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb5_dummy;

  SeqInstr_793:
    assume !assertsPassed;
    return;

  $bb5_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2856} $p3 := ldv_xmalloc(1);
    goto corral_source_split_11185;
}



const ldv_struct_mega_proc_file_dummy_resourceless_instance_10: ref;

axiom ldv_struct_mega_proc_file_dummy_resourceless_instance_10 == $sub.ref(0, 664284);

procedure ldv_struct_mega_proc_file_dummy_resourceless_instance_10($p0: ref);
  free requires assertsPassed;
  modifies $M.26, $M.1, $M.47, $CurrAddr, $M.19, $M.49, $M.20, $M.21, assertsPassed;



implementation ldv_struct_mega_proc_file_dummy_resourceless_instance_10($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11193;

  corral_source_split_11193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2861} $i1 := ldv_undef_int();
    call {:si_unique_call 2862} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11194;

  corral_source_split_11194:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_11195;

  corral_source_split_11195:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11197;

  corral_source_split_11197:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5 := ldv_struct_mega_proc_file_dummy_resourceless_instance_10_loop_$bb4($p3, $i4, $i5);
    goto $bb4_last;

  corral_source_split_11199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2864} ldv_dummy_resourceless_instance_callback_10_3($u21, $u22, $p3);
    goto SeqInstr_796, SeqInstr_797;

  SeqInstr_797:
    assume assertsPassed;
    goto SeqInstr_798;

  SeqInstr_798:
    goto corral_source_split_11200;

  corral_source_split_11200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2865} ldv_free($p3);
    goto corral_source_split_11201;

  corral_source_split_11201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2866} $i4 := ldv_undef_int();
    call {:si_unique_call 2867} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_11202;

  corral_source_split_11202:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_11203;

  corral_source_split_11203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_11205;

  corral_source_split_11205:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb5_dummy;

  SeqInstr_796:
    assume !assertsPassed;
    return;

  $bb5_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2863} $p3 := ldv_xmalloc(1);
    goto corral_source_split_11199;
}



const ldv_struct_mega_proc_file_dummy_resourceless_instance_11: ref;

axiom ldv_struct_mega_proc_file_dummy_resourceless_instance_11 == $sub.ref(0, 665316);

procedure ldv_struct_mega_proc_file_dummy_resourceless_instance_11($p0: ref);
  free requires assertsPassed;
  modifies $M.26, $M.1, $M.47, $CurrAddr, $M.19, $M.49, $M.20, $M.21, assertsPassed;



implementation ldv_struct_mega_proc_file_dummy_resourceless_instance_11($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11207;

  corral_source_split_11207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2868} $i1 := ldv_undef_int();
    call {:si_unique_call 2869} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11208;

  corral_source_split_11208:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_11209;

  corral_source_split_11209:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11211;

  corral_source_split_11211:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5 := ldv_struct_mega_proc_file_dummy_resourceless_instance_11_loop_$bb4($p3, $i4, $i5);
    goto $bb4_last;

  corral_source_split_11213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2871} ldv_dummy_resourceless_instance_callback_11_3($u21, $u22, $p3);
    goto SeqInstr_799, SeqInstr_800;

  SeqInstr_800:
    assume assertsPassed;
    goto SeqInstr_801;

  SeqInstr_801:
    goto corral_source_split_11214;

  corral_source_split_11214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2872} ldv_free($p3);
    goto corral_source_split_11215;

  corral_source_split_11215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2873} $i4 := ldv_undef_int();
    call {:si_unique_call 2874} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_11216;

  corral_source_split_11216:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_11217;

  corral_source_split_11217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_11219;

  corral_source_split_11219:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb5_dummy;

  SeqInstr_799:
    assume !assertsPassed;
    return;

  $bb5_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2870} $p3 := ldv_xmalloc(1);
    goto corral_source_split_11213;
}



const ldv_struct_mega_proc_file_dummy_resourceless_instance_12: ref;

axiom ldv_struct_mega_proc_file_dummy_resourceless_instance_12 == $sub.ref(0, 666348);

procedure ldv_struct_mega_proc_file_dummy_resourceless_instance_12($p0: ref);
  free requires assertsPassed;
  modifies $M.26, $M.1, $M.47, $CurrAddr, $M.19, $M.49, $M.20, $M.21, assertsPassed;



implementation ldv_struct_mega_proc_file_dummy_resourceless_instance_12($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11221;

  corral_source_split_11221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2875} $i1 := ldv_undef_int();
    call {:si_unique_call 2876} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11222;

  corral_source_split_11222:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_11223;

  corral_source_split_11223:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11225;

  corral_source_split_11225:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5 := ldv_struct_mega_proc_file_dummy_resourceless_instance_12_loop_$bb4($p3, $i4, $i5);
    goto $bb4_last;

  corral_source_split_11227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2878} ldv_dummy_resourceless_instance_callback_12_3($u21, $u22, $p3);
    goto SeqInstr_802, SeqInstr_803;

  SeqInstr_803:
    assume assertsPassed;
    goto SeqInstr_804;

  SeqInstr_804:
    goto corral_source_split_11228;

  corral_source_split_11228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2879} ldv_free($p3);
    goto corral_source_split_11229;

  corral_source_split_11229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2880} $i4 := ldv_undef_int();
    call {:si_unique_call 2881} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_11230;

  corral_source_split_11230:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_11231;

  corral_source_split_11231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_11233;

  corral_source_split_11233:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb5_dummy;

  SeqInstr_802:
    assume !assertsPassed;
    return;

  $bb5_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2877} $p3 := ldv_xmalloc(1);
    goto corral_source_split_11227;
}



const ldv_struct_mega_proc_file_dummy_resourceless_instance_13: ref;

axiom ldv_struct_mega_proc_file_dummy_resourceless_instance_13 == $sub.ref(0, 667380);

procedure ldv_struct_mega_proc_file_dummy_resourceless_instance_13($p0: ref);
  free requires assertsPassed;
  modifies $M.26, $M.1, $CurrAddr, $M.19, $M.20, $M.21, assertsPassed;



implementation ldv_struct_mega_proc_file_dummy_resourceless_instance_13($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11235;

  corral_source_split_11235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2882} $i1 := ldv_undef_int();
    call {:si_unique_call 2883} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11236;

  corral_source_split_11236:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_11237;

  corral_source_split_11237:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11239;

  corral_source_split_11239:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5 := ldv_struct_mega_proc_file_dummy_resourceless_instance_13_loop_$bb4($p3, $i4, $i5);
    goto $bb4_last;

  corral_source_split_11241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2885} ldv_dummy_resourceless_instance_callback_13_3($u21, $u22, $p3);
    goto SeqInstr_805, SeqInstr_806;

  SeqInstr_806:
    assume assertsPassed;
    goto SeqInstr_807;

  SeqInstr_807:
    goto corral_source_split_11242;

  corral_source_split_11242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2886} ldv_free($p3);
    goto corral_source_split_11243;

  corral_source_split_11243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2887} $i4 := ldv_undef_int();
    call {:si_unique_call 2888} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_11244;

  corral_source_split_11244:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_11245;

  corral_source_split_11245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_11247;

  corral_source_split_11247:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb5_dummy;

  SeqInstr_805:
    assume !assertsPassed;
    return;

  $bb5_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2884} $p3 := ldv_xmalloc(1);
    goto corral_source_split_11241;
}



const ldv_struct_mega_proc_file_dummy_resourceless_instance_14: ref;

axiom ldv_struct_mega_proc_file_dummy_resourceless_instance_14 == $sub.ref(0, 668412);

procedure ldv_struct_mega_proc_file_dummy_resourceless_instance_14($p0: ref);
  free requires assertsPassed;
  modifies $M.26, $M.1, $CurrAddr, $M.19, $M.20, $M.21, assertsPassed;



implementation ldv_struct_mega_proc_file_dummy_resourceless_instance_14($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11249;

  corral_source_split_11249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2889} $i1 := ldv_undef_int();
    call {:si_unique_call 2890} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11250;

  corral_source_split_11250:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_11251;

  corral_source_split_11251:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11253;

  corral_source_split_11253:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5 := ldv_struct_mega_proc_file_dummy_resourceless_instance_14_loop_$bb4($p3, $i4, $i5);
    goto $bb4_last;

  corral_source_split_11255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2892} ldv_dummy_resourceless_instance_callback_14_3($u21, $u22, $p3);
    goto SeqInstr_808, SeqInstr_809;

  SeqInstr_809:
    assume assertsPassed;
    goto SeqInstr_810;

  SeqInstr_810:
    goto corral_source_split_11256;

  corral_source_split_11256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2893} ldv_free($p3);
    goto corral_source_split_11257;

  corral_source_split_11257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2894} $i4 := ldv_undef_int();
    call {:si_unique_call 2895} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_11258;

  corral_source_split_11258:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_11259;

  corral_source_split_11259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_11261;

  corral_source_split_11261:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb5_dummy;

  SeqInstr_808:
    assume !assertsPassed;
    return;

  $bb5_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2891} $p3 := ldv_xmalloc(1);
    goto corral_source_split_11255;
}



const ldv_struct_mega_proc_file_dummy_resourceless_instance_15: ref;

axiom ldv_struct_mega_proc_file_dummy_resourceless_instance_15 == $sub.ref(0, 669444);

procedure ldv_struct_mega_proc_file_dummy_resourceless_instance_15($p0: ref);
  free requires assertsPassed;
  modifies $M.26, $M.1, $CurrAddr, $M.19, $M.20, $M.21, assertsPassed;



implementation ldv_struct_mega_proc_file_dummy_resourceless_instance_15($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11263;

  corral_source_split_11263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2896} $i1 := ldv_undef_int();
    call {:si_unique_call 2897} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11264;

  corral_source_split_11264:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_11265;

  corral_source_split_11265:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11267;

  corral_source_split_11267:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5 := ldv_struct_mega_proc_file_dummy_resourceless_instance_15_loop_$bb4($p3, $i4, $i5);
    goto $bb4_last;

  corral_source_split_11269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2899} ldv_dummy_resourceless_instance_callback_15_3($u21, $u22, $p3);
    goto SeqInstr_811, SeqInstr_812;

  SeqInstr_812:
    assume assertsPassed;
    goto SeqInstr_813;

  SeqInstr_813:
    goto corral_source_split_11270;

  corral_source_split_11270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2900} ldv_free($p3);
    goto corral_source_split_11271;

  corral_source_split_11271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2901} $i4 := ldv_undef_int();
    call {:si_unique_call 2902} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_11272;

  corral_source_split_11272:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_11273;

  corral_source_split_11273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_11275;

  corral_source_split_11275:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb5_dummy;

  SeqInstr_811:
    assume !assertsPassed;
    return;

  $bb5_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2898} $p3 := ldv_xmalloc(1);
    goto corral_source_split_11269;
}



const ldv_struct_mega_proc_file_dummy_resourceless_instance_16: ref;

axiom ldv_struct_mega_proc_file_dummy_resourceless_instance_16 == $sub.ref(0, 670476);

procedure ldv_struct_mega_proc_file_dummy_resourceless_instance_16($p0: ref);
  free requires assertsPassed;
  modifies $M.26, $M.1, $CurrAddr, $M.19, $M.20, $M.21, assertsPassed;



implementation ldv_struct_mega_proc_file_dummy_resourceless_instance_16($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11277;

  corral_source_split_11277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2903} $i1 := ldv_undef_int();
    call {:si_unique_call 2904} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11278;

  corral_source_split_11278:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_11279;

  corral_source_split_11279:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11281;

  corral_source_split_11281:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5 := ldv_struct_mega_proc_file_dummy_resourceless_instance_16_loop_$bb4($p3, $i4, $i5);
    goto $bb4_last;

  corral_source_split_11283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2906} ldv_dummy_resourceless_instance_callback_16_3($u21, $u22, $p3);
    goto SeqInstr_814, SeqInstr_815;

  SeqInstr_815:
    assume assertsPassed;
    goto SeqInstr_816;

  SeqInstr_816:
    goto corral_source_split_11284;

  corral_source_split_11284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2907} ldv_free($p3);
    goto corral_source_split_11285;

  corral_source_split_11285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2908} $i4 := ldv_undef_int();
    call {:si_unique_call 2909} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_11286;

  corral_source_split_11286:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_11287;

  corral_source_split_11287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_11289;

  corral_source_split_11289:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb5_dummy;

  SeqInstr_814:
    assume !assertsPassed;
    return;

  $bb5_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2905} $p3 := ldv_xmalloc(1);
    goto corral_source_split_11283;
}



const ldv_struct_mega_proc_file_dummy_resourceless_instance_17: ref;

axiom ldv_struct_mega_proc_file_dummy_resourceless_instance_17 == $sub.ref(0, 671508);

procedure ldv_struct_mega_proc_file_dummy_resourceless_instance_17($p0: ref);
  free requires assertsPassed;
  modifies $M.26, $M.1, $CurrAddr, $M.19, $M.20, $M.21, assertsPassed;



implementation ldv_struct_mega_proc_file_dummy_resourceless_instance_17($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11291;

  corral_source_split_11291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2910} $i1 := ldv_undef_int();
    call {:si_unique_call 2911} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11292;

  corral_source_split_11292:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_11293;

  corral_source_split_11293:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11295;

  corral_source_split_11295:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5 := ldv_struct_mega_proc_file_dummy_resourceless_instance_17_loop_$bb4($p3, $i4, $i5);
    goto $bb4_last;

  corral_source_split_11297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2913} ldv_dummy_resourceless_instance_callback_17_3($u21, $u22, $p3);
    goto SeqInstr_817, SeqInstr_818;

  SeqInstr_818:
    assume assertsPassed;
    goto SeqInstr_819;

  SeqInstr_819:
    goto corral_source_split_11298;

  corral_source_split_11298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2914} ldv_free($p3);
    goto corral_source_split_11299;

  corral_source_split_11299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2915} $i4 := ldv_undef_int();
    call {:si_unique_call 2916} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_11300;

  corral_source_split_11300:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_11301;

  corral_source_split_11301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_11303;

  corral_source_split_11303:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb5_dummy;

  SeqInstr_817:
    assume !assertsPassed;
    return;

  $bb5_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2912} $p3 := ldv_xmalloc(1);
    goto corral_source_split_11297;
}



const ldv_struct_mega_proc_file_dummy_resourceless_instance_18: ref;

axiom ldv_struct_mega_proc_file_dummy_resourceless_instance_18 == $sub.ref(0, 672540);

procedure ldv_struct_mega_proc_file_dummy_resourceless_instance_18($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_struct_mega_proc_file_dummy_resourceless_instance_18($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11305;

  corral_source_split_11305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2917} $i1 := ldv_undef_int();
    call {:si_unique_call 2918} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11306;

  corral_source_split_11306:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_11307;

  corral_source_split_11307:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11309;

  corral_source_split_11309:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5 := ldv_struct_mega_proc_file_dummy_resourceless_instance_18_loop_$bb4($p3, $i4, $i5);
    goto $bb4_last;

  corral_source_split_11311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2920} ldv_dummy_resourceless_instance_callback_18_3($u21, $u22, $p3);
    goto corral_source_split_11312;

  corral_source_split_11312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2921} ldv_free($p3);
    goto corral_source_split_11313;

  corral_source_split_11313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2922} $i4 := ldv_undef_int();
    call {:si_unique_call 2923} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_11314;

  corral_source_split_11314:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_11315;

  corral_source_split_11315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_11317;

  corral_source_split_11317:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb5_dummy;

  $bb5_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2919} $p3 := ldv_xmalloc(1);
    goto corral_source_split_11311;
}



const ldv_dummy_resourceless_instance_callback_18_3: ref;

axiom ldv_dummy_resourceless_instance_callback_18_3 == $sub.ref(0, 673572);

procedure ldv_dummy_resourceless_instance_callback_18_3($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_18_3($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_314: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11319;

  corral_source_split_11319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2924} vslice_dummy_var_314 := proc_show_stat($p1, $p2);
    goto corral_source_split_11320;

  corral_source_split_11320:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_17_3: ref;

axiom ldv_dummy_resourceless_instance_callback_17_3 == $sub.ref(0, 674604);

procedure ldv_dummy_resourceless_instance_callback_17_3($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.26, $M.1, $CurrAddr, $M.19, $M.20, $M.21, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_17_3($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_315: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11322;

  corral_source_split_11322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2925} vslice_dummy_var_315 := proc_show_rebuild_rate($p1, $p2);
    goto SeqInstr_820, SeqInstr_821;

  SeqInstr_821:
    assume assertsPassed;
    goto SeqInstr_822;

  SeqInstr_822:
    goto corral_source_split_11323;

  corral_source_split_11323:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_820:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_16_3: ref;

axiom ldv_dummy_resourceless_instance_callback_16_3 == $sub.ref(0, 675636);

procedure ldv_dummy_resourceless_instance_callback_16_3($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.26, $M.1, $M.19, $CurrAddr, $M.20, $M.21, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_16_3($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_316: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11325;

  corral_source_split_11325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2926} vslice_dummy_var_316 := proc_show_rdrv_40($p1, $p2);
    goto SeqInstr_823, SeqInstr_824;

  SeqInstr_824:
    assume assertsPassed;
    goto SeqInstr_825;

  SeqInstr_825:
    goto corral_source_split_11326;

  corral_source_split_11326:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_823:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_15_3: ref;

axiom ldv_dummy_resourceless_instance_callback_15_3 == $sub.ref(0, 676668);

procedure ldv_dummy_resourceless_instance_callback_15_3($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.26, $M.1, $M.19, $CurrAddr, $M.20, $M.21, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_15_3($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_317: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11328;

  corral_source_split_11328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2927} vslice_dummy_var_317 := proc_show_rdrv_30($p1, $p2);
    goto SeqInstr_826, SeqInstr_827;

  SeqInstr_827:
    assume assertsPassed;
    goto SeqInstr_828;

  SeqInstr_828:
    goto corral_source_split_11329;

  corral_source_split_11329:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_826:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_14_3: ref;

axiom ldv_dummy_resourceless_instance_callback_14_3 == $sub.ref(0, 677700);

procedure ldv_dummy_resourceless_instance_callback_14_3($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.26, $M.1, $M.19, $CurrAddr, $M.20, $M.21, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_14_3($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_318: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11331;

  corral_source_split_11331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2928} vslice_dummy_var_318 := proc_show_rdrv_20($p1, $p2);
    goto SeqInstr_829, SeqInstr_830;

  SeqInstr_830:
    assume assertsPassed;
    goto SeqInstr_831;

  SeqInstr_831:
    goto corral_source_split_11332;

  corral_source_split_11332:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_829:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_13_3: ref;

axiom ldv_dummy_resourceless_instance_callback_13_3 == $sub.ref(0, 678732);

procedure ldv_dummy_resourceless_instance_callback_13_3($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.26, $M.1, $M.19, $CurrAddr, $M.20, $M.21, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_13_3($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_319: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11334;

  corral_source_split_11334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2929} vslice_dummy_var_319 := proc_show_rdrv_10($p1, $p2);
    goto SeqInstr_832, SeqInstr_833;

  SeqInstr_833:
    assume assertsPassed;
    goto SeqInstr_834;

  SeqInstr_834:
    goto corral_source_split_11335;

  corral_source_split_11335:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_832:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_12_3: ref;

axiom ldv_dummy_resourceless_instance_callback_12_3 == $sub.ref(0, 679764);

procedure ldv_dummy_resourceless_instance_callback_12_3($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.26, $M.1, $M.47, $M.19, $M.49, $CurrAddr, $M.20, $M.21, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_12_3($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_320: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11337;

  corral_source_split_11337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2930} vslice_dummy_var_320 := proc_show_pdrv_ch3($p1, $p2);
    goto SeqInstr_835, SeqInstr_836;

  SeqInstr_836:
    assume assertsPassed;
    goto SeqInstr_837;

  SeqInstr_837:
    goto corral_source_split_11338;

  corral_source_split_11338:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_835:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_11_3: ref;

axiom ldv_dummy_resourceless_instance_callback_11_3 == $sub.ref(0, 680796);

procedure ldv_dummy_resourceless_instance_callback_11_3($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.26, $M.1, $M.47, $M.19, $M.49, $CurrAddr, $M.20, $M.21, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_11_3($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_321: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11340;

  corral_source_split_11340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2931} vslice_dummy_var_321 := proc_show_pdrv_ch2($p1, $p2);
    goto SeqInstr_838, SeqInstr_839;

  SeqInstr_839:
    assume assertsPassed;
    goto SeqInstr_840;

  SeqInstr_840:
    goto corral_source_split_11341;

  corral_source_split_11341:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_838:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_10_3: ref;

axiom ldv_dummy_resourceless_instance_callback_10_3 == $sub.ref(0, 681828);

procedure ldv_dummy_resourceless_instance_callback_10_3($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.26, $M.1, $M.47, $M.19, $M.49, $CurrAddr, $M.20, $M.21, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_10_3($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_322: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11343;

  corral_source_split_11343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2932} vslice_dummy_var_322 := proc_show_pdrv_ch1($p1, $p2);
    goto SeqInstr_841, SeqInstr_842;

  SeqInstr_842:
    assume assertsPassed;
    goto SeqInstr_843;

  SeqInstr_843:
    goto corral_source_split_11344;

  corral_source_split_11344:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_841:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_9_3: ref;

axiom ldv_dummy_resourceless_instance_callback_9_3 == $sub.ref(0, 682860);

procedure ldv_dummy_resourceless_instance_callback_9_3($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.26, $M.1, $M.47, $M.19, $M.49, $CurrAddr, $M.20, $M.21, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_9_3($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_323: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11346;

  corral_source_split_11346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2933} vslice_dummy_var_323 := proc_show_pdrv_ch0($p1, $p2);
    goto SeqInstr_844, SeqInstr_845;

  SeqInstr_845:
    assume assertsPassed;
    goto SeqInstr_846;

  SeqInstr_846:
    goto corral_source_split_11347;

  corral_source_split_11347:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_844:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_8_3: ref;

axiom ldv_dummy_resourceless_instance_callback_8_3 == $sub.ref(0, 683892);

procedure ldv_dummy_resourceless_instance_callback_8_3($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_8_3($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_324: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11349;

  corral_source_split_11349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2934} vslice_dummy_var_324 := proc_show_mbox($p1, $p2);
    goto corral_source_split_11350;

  corral_source_split_11350:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_7_3: ref;

axiom ldv_dummy_resourceless_instance_callback_7_3 == $sub.ref(0, 684924);

procedure ldv_dummy_resourceless_instance_callback_7_3($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_7_3($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_325: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11352;

  corral_source_split_11352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2935} vslice_dummy_var_325 := proc_show_config($p1, $p2);
    goto corral_source_split_11353;

  corral_source_split_11353:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_6_3: ref;

axiom ldv_dummy_resourceless_instance_callback_6_3 == $sub.ref(0, 685956);

procedure ldv_dummy_resourceless_instance_callback_6_3($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.26, $M.1, $CurrAddr, $M.19, $M.20, $M.21, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_6_3($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_326: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11355;

  corral_source_split_11355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2936} vslice_dummy_var_326 := proc_show_battery($p1, $p2);
    goto SeqInstr_847, SeqInstr_848;

  SeqInstr_848:
    assume assertsPassed;
    goto SeqInstr_849;

  SeqInstr_849:
    goto corral_source_split_11356;

  corral_source_split_11356:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_847:
    assume !assertsPassed;
    return;
}



const ldv_entry_EMGentry_28: ref;

axiom ldv_entry_EMGentry_28 == $sub.ref(0, 686988);

procedure ldv_entry_EMGentry_28($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.22, $M.10, $M.51, $M.30, $M.31, $M.26, $M.1, $CurrAddr, $M.47, $M.52, assertsPassed, $M.19, $M.49, $M.20, $M.21, $M.7, $M.8, $M.9, $M.6, $M.11, $M.55, $M.56, $M.12, $M.0, $M.23, $M.29, $M.24;



implementation ldv_entry_EMGentry_28($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11358;

  corral_source_split_11358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2937} $i1 := ldv_EMGentry_init_megaraid_init_28_9($u23);
    goto SeqInstr_850, SeqInstr_851;

  SeqInstr_851:
    assume assertsPassed;
    goto SeqInstr_852;

  SeqInstr_852:
    call {:si_unique_call 2938} {:cexpr "ldv_28_ret_default"} boogie_si_record_i32($i1);
    goto corral_source_split_11359;

  corral_source_split_11359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2939} $i2 := ldv_ldv_post_init_128($i1);
    call {:si_unique_call 2940} {:cexpr "ldv_28_ret_default"} boogie_si_record_i32($i2);
    goto corral_source_split_11360;

  corral_source_split_11360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2941} $i3 := ldv_undef_int();
    call {:si_unique_call 2942} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_11361;

  corral_source_split_11361:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_11362;

  corral_source_split_11362:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_11371;

  corral_source_split_11371:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i2, 0);
    goto corral_source_split_11372;

  corral_source_split_11372:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_11373;

  corral_source_split_11373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2946} ldv_assume($i8);
    goto corral_source_split_11374;

  corral_source_split_11374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2947} $i9 := ldv_undef_int();
    call {:si_unique_call 2948} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_11375;

  corral_source_split_11375:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_11376;

  corral_source_split_11376:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2951} ldv_EMGentry_exit_megaraid_exit_28_2($u24);
    goto SeqInstr_859, SeqInstr_860;

  SeqInstr_860:
    assume assertsPassed;
    goto SeqInstr_861;

  SeqInstr_861:
    goto corral_source_split_11382;

  corral_source_split_11382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2952} ldv_ldv_check_final_state_130();
    goto SeqInstr_862, SeqInstr_863;

  SeqInstr_863:
    assume assertsPassed;
    goto SeqInstr_864;

  SeqInstr_864:
    goto corral_source_split_11383;

  corral_source_split_11383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2953} ldv_stop();
    goto corral_source_split_11384;

  corral_source_split_11384:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_862:
    assume !assertsPassed;
    return;

  SeqInstr_859:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_11378;

  corral_source_split_11378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2949} ldv_dispatch_register_dummy_resourceless_instance_14_28_5();
    goto SeqInstr_856, SeqInstr_857;

  SeqInstr_857:
    assume assertsPassed;
    goto SeqInstr_858;

  SeqInstr_858:
    goto corral_source_split_11379;

  corral_source_split_11379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2950} ldv_dispatch_deregister_dummy_resourceless_instance_14_28_4();
    goto corral_source_split_11380;

  corral_source_split_11380:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_856:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_11364;

  corral_source_split_11364:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i2, 0);
    goto corral_source_split_11365;

  corral_source_split_11365:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_11366;

  corral_source_split_11366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2943} ldv_assume($i6);
    goto corral_source_split_11367;

  corral_source_split_11367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2944} ldv_ldv_check_final_state_129();
    goto SeqInstr_853, SeqInstr_854;

  SeqInstr_854:
    assume assertsPassed;
    goto SeqInstr_855;

  SeqInstr_855:
    goto corral_source_split_11368;

  corral_source_split_11368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2945} ldv_stop();
    goto corral_source_split_11369;

  corral_source_split_11369:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_853:
    assume !assertsPassed;
    return;

  SeqInstr_850:
    assume !assertsPassed;
    return;
}



const ldv_ldv_post_init_128: ref;

axiom ldv_ldv_post_init_128 == $sub.ref(0, 688020);

procedure ldv_ldv_post_init_128($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.31;



implementation ldv_ldv_post_init_128($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2954} {:cexpr "ldv_ldv_post_init_128:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_11386;

  corral_source_split_11386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2955} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_11387;

  corral_source_split_11387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2956} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_11388;

  corral_source_split_11388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2957} $i1 := ldv_post_init($i0);
    call {:si_unique_call 2958} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11389;

  corral_source_split_11389:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_ldv_check_final_state_129: ref;

axiom ldv_ldv_check_final_state_129 == $sub.ref(0, 689052);

procedure ldv_ldv_check_final_state_129();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_ldv_check_final_state_129()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11391;

  corral_source_split_11391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2959} ldv_linux_arch_io_check_final_state();
    goto SeqInstr_865, SeqInstr_866;

  SeqInstr_866:
    assume assertsPassed;
    goto SeqInstr_867;

  SeqInstr_867:
    goto corral_source_split_11392;

  corral_source_split_11392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2960} ldv_linux_block_genhd_check_final_state();
    goto SeqInstr_868, SeqInstr_869;

  SeqInstr_869:
    assume assertsPassed;
    goto SeqInstr_870;

  SeqInstr_870:
    goto corral_source_split_11393;

  corral_source_split_11393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2961} ldv_linux_block_queue_check_final_state();
    goto SeqInstr_871, SeqInstr_872;

  SeqInstr_872:
    assume assertsPassed;
    goto SeqInstr_873;

  SeqInstr_873:
    goto corral_source_split_11394;

  corral_source_split_11394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2962} ldv_linux_block_request_check_final_state();
    goto SeqInstr_874, SeqInstr_875;

  SeqInstr_875:
    assume assertsPassed;
    goto SeqInstr_876;

  SeqInstr_876:
    goto corral_source_split_11395;

  corral_source_split_11395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2963} ldv_linux_drivers_base_class_check_final_state();
    goto SeqInstr_877, SeqInstr_878;

  SeqInstr_878:
    assume assertsPassed;
    goto SeqInstr_879;

  SeqInstr_879:
    goto corral_source_split_11396;

  corral_source_split_11396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2964} ldv_linux_fs_char_dev_check_final_state();
    goto SeqInstr_880, SeqInstr_881;

  SeqInstr_881:
    assume assertsPassed;
    goto SeqInstr_882;

  SeqInstr_882:
    goto corral_source_split_11397;

  corral_source_split_11397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2965} ldv_linux_fs_sysfs_check_final_state();
    goto SeqInstr_883, SeqInstr_884;

  SeqInstr_884:
    assume assertsPassed;
    goto SeqInstr_885;

  SeqInstr_885:
    goto corral_source_split_11398;

  corral_source_split_11398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2966} ldv_linux_kernel_locking_rwlock_check_final_state();
    goto SeqInstr_886, SeqInstr_887;

  SeqInstr_887:
    assume assertsPassed;
    goto SeqInstr_888;

  SeqInstr_888:
    goto corral_source_split_11399;

  corral_source_split_11399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2967} ldv_linux_kernel_module_check_final_state();
    goto SeqInstr_889, SeqInstr_890;

  SeqInstr_890:
    assume assertsPassed;
    goto SeqInstr_891;

  SeqInstr_891:
    goto corral_source_split_11400;

  corral_source_split_11400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2968} ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
    goto SeqInstr_892, SeqInstr_893;

  SeqInstr_893:
    assume assertsPassed;
    goto SeqInstr_894;

  SeqInstr_894:
    goto corral_source_split_11401;

  corral_source_split_11401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2969} ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
    goto SeqInstr_895, SeqInstr_896;

  SeqInstr_896:
    assume assertsPassed;
    goto SeqInstr_897;

  SeqInstr_897:
    goto corral_source_split_11402;

  corral_source_split_11402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2970} ldv_linux_kernel_rcu_update_lock_check_final_state();
    goto SeqInstr_898, SeqInstr_899;

  SeqInstr_899:
    assume assertsPassed;
    goto SeqInstr_900;

  SeqInstr_900:
    goto corral_source_split_11403;

  corral_source_split_11403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2971} ldv_linux_kernel_rcu_srcu_check_final_state();
    goto SeqInstr_901, SeqInstr_902;

  SeqInstr_902:
    assume assertsPassed;
    goto SeqInstr_903;

  SeqInstr_903:
    goto corral_source_split_11404;

  corral_source_split_11404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2972} ldv_linux_lib_idr_check_final_state();
    goto SeqInstr_904, SeqInstr_905;

  SeqInstr_905:
    assume assertsPassed;
    goto SeqInstr_906;

  SeqInstr_906:
    goto corral_source_split_11405;

  corral_source_split_11405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2973} ldv_linux_mmc_sdio_func_check_final_state();
    goto SeqInstr_907, SeqInstr_908;

  SeqInstr_908:
    assume assertsPassed;
    goto SeqInstr_909;

  SeqInstr_909:
    goto corral_source_split_11406;

  corral_source_split_11406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2974} ldv_linux_net_rtnetlink_check_final_state();
    goto SeqInstr_910, SeqInstr_911;

  SeqInstr_911:
    assume assertsPassed;
    goto SeqInstr_912;

  SeqInstr_912:
    goto corral_source_split_11407;

  corral_source_split_11407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2975} ldv_linux_net_sock_check_final_state();
    goto SeqInstr_913, SeqInstr_914;

  SeqInstr_914:
    assume assertsPassed;
    goto SeqInstr_915;

  SeqInstr_915:
    goto corral_source_split_11408;

  corral_source_split_11408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2976} ldv_linux_usb_coherent_check_final_state();
    goto SeqInstr_916, SeqInstr_917;

  SeqInstr_917:
    assume assertsPassed;
    goto SeqInstr_918;

  SeqInstr_918:
    goto corral_source_split_11409;

  corral_source_split_11409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2977} ldv_linux_usb_gadget_check_final_state();
    goto SeqInstr_919, SeqInstr_920;

  SeqInstr_920:
    assume assertsPassed;
    goto SeqInstr_921;

  SeqInstr_921:
    goto corral_source_split_11410;

  corral_source_split_11410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2978} ldv_linux_usb_urb_check_final_state();
    goto SeqInstr_922, SeqInstr_923;

  SeqInstr_923:
    assume assertsPassed;
    goto SeqInstr_924;

  SeqInstr_924:
    goto corral_source_split_11411;

  corral_source_split_11411:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_922:
    assume !assertsPassed;
    return;

  SeqInstr_919:
    assume !assertsPassed;
    return;

  SeqInstr_916:
    assume !assertsPassed;
    return;

  SeqInstr_913:
    assume !assertsPassed;
    return;

  SeqInstr_910:
    assume !assertsPassed;
    return;

  SeqInstr_907:
    assume !assertsPassed;
    return;

  SeqInstr_904:
    assume !assertsPassed;
    return;

  SeqInstr_901:
    assume !assertsPassed;
    return;

  SeqInstr_898:
    assume !assertsPassed;
    return;

  SeqInstr_895:
    assume !assertsPassed;
    return;

  SeqInstr_892:
    assume !assertsPassed;
    return;

  SeqInstr_889:
    assume !assertsPassed;
    return;

  SeqInstr_886:
    assume !assertsPassed;
    return;

  SeqInstr_883:
    assume !assertsPassed;
    return;

  SeqInstr_880:
    assume !assertsPassed;
    return;

  SeqInstr_877:
    assume !assertsPassed;
    return;

  SeqInstr_874:
    assume !assertsPassed;
    return;

  SeqInstr_871:
    assume !assertsPassed;
    return;

  SeqInstr_868:
    assume !assertsPassed;
    return;

  SeqInstr_865:
    assume !assertsPassed;
    return;
}



const ldv_ldv_check_final_state_130: ref;

axiom ldv_ldv_check_final_state_130 == $sub.ref(0, 690084);

procedure ldv_ldv_check_final_state_130();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_ldv_check_final_state_130()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11413;

  corral_source_split_11413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2979} ldv_linux_arch_io_check_final_state();
    goto SeqInstr_925, SeqInstr_926;

  SeqInstr_926:
    assume assertsPassed;
    goto SeqInstr_927;

  SeqInstr_927:
    goto corral_source_split_11414;

  corral_source_split_11414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2980} ldv_linux_block_genhd_check_final_state();
    goto SeqInstr_928, SeqInstr_929;

  SeqInstr_929:
    assume assertsPassed;
    goto SeqInstr_930;

  SeqInstr_930:
    goto corral_source_split_11415;

  corral_source_split_11415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2981} ldv_linux_block_queue_check_final_state();
    goto SeqInstr_931, SeqInstr_932;

  SeqInstr_932:
    assume assertsPassed;
    goto SeqInstr_933;

  SeqInstr_933:
    goto corral_source_split_11416;

  corral_source_split_11416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2982} ldv_linux_block_request_check_final_state();
    goto SeqInstr_934, SeqInstr_935;

  SeqInstr_935:
    assume assertsPassed;
    goto SeqInstr_936;

  SeqInstr_936:
    goto corral_source_split_11417;

  corral_source_split_11417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2983} ldv_linux_drivers_base_class_check_final_state();
    goto SeqInstr_937, SeqInstr_938;

  SeqInstr_938:
    assume assertsPassed;
    goto SeqInstr_939;

  SeqInstr_939:
    goto corral_source_split_11418;

  corral_source_split_11418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2984} ldv_linux_fs_char_dev_check_final_state();
    goto SeqInstr_940, SeqInstr_941;

  SeqInstr_941:
    assume assertsPassed;
    goto SeqInstr_942;

  SeqInstr_942:
    goto corral_source_split_11419;

  corral_source_split_11419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2985} ldv_linux_fs_sysfs_check_final_state();
    goto SeqInstr_943, SeqInstr_944;

  SeqInstr_944:
    assume assertsPassed;
    goto SeqInstr_945;

  SeqInstr_945:
    goto corral_source_split_11420;

  corral_source_split_11420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2986} ldv_linux_kernel_locking_rwlock_check_final_state();
    goto SeqInstr_946, SeqInstr_947;

  SeqInstr_947:
    assume assertsPassed;
    goto SeqInstr_948;

  SeqInstr_948:
    goto corral_source_split_11421;

  corral_source_split_11421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2987} ldv_linux_kernel_module_check_final_state();
    goto SeqInstr_949, SeqInstr_950;

  SeqInstr_950:
    assume assertsPassed;
    goto SeqInstr_951;

  SeqInstr_951:
    goto corral_source_split_11422;

  corral_source_split_11422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2988} ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
    goto SeqInstr_952, SeqInstr_953;

  SeqInstr_953:
    assume assertsPassed;
    goto SeqInstr_954;

  SeqInstr_954:
    goto corral_source_split_11423;

  corral_source_split_11423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2989} ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
    goto SeqInstr_955, SeqInstr_956;

  SeqInstr_956:
    assume assertsPassed;
    goto SeqInstr_957;

  SeqInstr_957:
    goto corral_source_split_11424;

  corral_source_split_11424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2990} ldv_linux_kernel_rcu_update_lock_check_final_state();
    goto SeqInstr_958, SeqInstr_959;

  SeqInstr_959:
    assume assertsPassed;
    goto SeqInstr_960;

  SeqInstr_960:
    goto corral_source_split_11425;

  corral_source_split_11425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2991} ldv_linux_kernel_rcu_srcu_check_final_state();
    goto SeqInstr_961, SeqInstr_962;

  SeqInstr_962:
    assume assertsPassed;
    goto SeqInstr_963;

  SeqInstr_963:
    goto corral_source_split_11426;

  corral_source_split_11426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2992} ldv_linux_lib_idr_check_final_state();
    goto SeqInstr_964, SeqInstr_965;

  SeqInstr_965:
    assume assertsPassed;
    goto SeqInstr_966;

  SeqInstr_966:
    goto corral_source_split_11427;

  corral_source_split_11427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2993} ldv_linux_mmc_sdio_func_check_final_state();
    goto SeqInstr_967, SeqInstr_968;

  SeqInstr_968:
    assume assertsPassed;
    goto SeqInstr_969;

  SeqInstr_969:
    goto corral_source_split_11428;

  corral_source_split_11428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2994} ldv_linux_net_rtnetlink_check_final_state();
    goto SeqInstr_970, SeqInstr_971;

  SeqInstr_971:
    assume assertsPassed;
    goto SeqInstr_972;

  SeqInstr_972:
    goto corral_source_split_11429;

  corral_source_split_11429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2995} ldv_linux_net_sock_check_final_state();
    goto SeqInstr_973, SeqInstr_974;

  SeqInstr_974:
    assume assertsPassed;
    goto SeqInstr_975;

  SeqInstr_975:
    goto corral_source_split_11430;

  corral_source_split_11430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2996} ldv_linux_usb_coherent_check_final_state();
    goto SeqInstr_976, SeqInstr_977;

  SeqInstr_977:
    assume assertsPassed;
    goto SeqInstr_978;

  SeqInstr_978:
    goto corral_source_split_11431;

  corral_source_split_11431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2997} ldv_linux_usb_gadget_check_final_state();
    goto SeqInstr_979, SeqInstr_980;

  SeqInstr_980:
    assume assertsPassed;
    goto SeqInstr_981;

  SeqInstr_981:
    goto corral_source_split_11432;

  corral_source_split_11432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2998} ldv_linux_usb_urb_check_final_state();
    goto SeqInstr_982, SeqInstr_983;

  SeqInstr_983:
    assume assertsPassed;
    goto SeqInstr_984;

  SeqInstr_984:
    goto corral_source_split_11433;

  corral_source_split_11433:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_982:
    assume !assertsPassed;
    return;

  SeqInstr_979:
    assume !assertsPassed;
    return;

  SeqInstr_976:
    assume !assertsPassed;
    return;

  SeqInstr_973:
    assume !assertsPassed;
    return;

  SeqInstr_970:
    assume !assertsPassed;
    return;

  SeqInstr_967:
    assume !assertsPassed;
    return;

  SeqInstr_964:
    assume !assertsPassed;
    return;

  SeqInstr_961:
    assume !assertsPassed;
    return;

  SeqInstr_958:
    assume !assertsPassed;
    return;

  SeqInstr_955:
    assume !assertsPassed;
    return;

  SeqInstr_952:
    assume !assertsPassed;
    return;

  SeqInstr_949:
    assume !assertsPassed;
    return;

  SeqInstr_946:
    assume !assertsPassed;
    return;

  SeqInstr_943:
    assume !assertsPassed;
    return;

  SeqInstr_940:
    assume !assertsPassed;
    return;

  SeqInstr_937:
    assume !assertsPassed;
    return;

  SeqInstr_934:
    assume !assertsPassed;
    return;

  SeqInstr_931:
    assume !assertsPassed;
    return;

  SeqInstr_928:
    assume !assertsPassed;
    return;

  SeqInstr_925:
    assume !assertsPassed;
    return;
}



const ldv_linux_arch_io_check_final_state: ref;

axiom ldv_linux_arch_io_check_final_state == $sub.ref(0, 691116);

procedure ldv_linux_arch_io_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_arch_io_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11435;

  corral_source_split_11435:
    assume {:verifier.code 0} true;
    $i0 := $M.12;
    goto corral_source_split_11436;

  corral_source_split_11436:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_11437;

  corral_source_split_11437:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_11438;

  corral_source_split_11438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2999} ldv_assert_linux_arch_io__more_initial_at_exit($i2);
    goto SeqInstr_985, SeqInstr_986;

  SeqInstr_986:
    assume assertsPassed;
    goto SeqInstr_987;

  SeqInstr_987:
    goto corral_source_split_11439;

  corral_source_split_11439:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_985:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_genhd_check_final_state: ref;

axiom ldv_linux_block_genhd_check_final_state == $sub.ref(0, 692148);

procedure ldv_linux_block_genhd_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_genhd_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11441;

  corral_source_split_11441:
    assume {:verifier.code 0} true;
    $i0 := $M.57;
    goto corral_source_split_11442;

  corral_source_split_11442:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_11443;

  corral_source_split_11443:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_11444;

  corral_source_split_11444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3000} ldv_assert_linux_block_genhd__more_initial_at_exit($i2);
    goto SeqInstr_988, SeqInstr_989;

  SeqInstr_989:
    assume assertsPassed;
    goto SeqInstr_990;

  SeqInstr_990:
    goto corral_source_split_11445;

  corral_source_split_11445:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_988:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_queue_check_final_state: ref;

axiom ldv_linux_block_queue_check_final_state == $sub.ref(0, 693180);

procedure ldv_linux_block_queue_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_queue_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11447;

  corral_source_split_11447:
    assume {:verifier.code 0} true;
    $i0 := $M.58;
    goto corral_source_split_11448;

  corral_source_split_11448:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_11449;

  corral_source_split_11449:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_11450;

  corral_source_split_11450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3001} ldv_assert_linux_block_queue__more_initial_at_exit($i2);
    goto SeqInstr_991, SeqInstr_992;

  SeqInstr_992:
    assume assertsPassed;
    goto SeqInstr_993;

  SeqInstr_993:
    goto corral_source_split_11451;

  corral_source_split_11451:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_991:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_request_check_final_state: ref;

axiom ldv_linux_block_request_check_final_state == $sub.ref(0, 694212);

procedure ldv_linux_block_request_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_request_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11453;

  corral_source_split_11453:
    assume {:verifier.code 0} true;
    $i0 := $M.59;
    goto corral_source_split_11454;

  corral_source_split_11454:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_11455;

  corral_source_split_11455:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_11456;

  corral_source_split_11456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3002} ldv_assert_linux_block_request__get_at_exit($i2);
    goto SeqInstr_994, SeqInstr_995;

  SeqInstr_995:
    assume assertsPassed;
    goto SeqInstr_996;

  SeqInstr_996:
    goto corral_source_split_11457;

  corral_source_split_11457:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_994:
    assume !assertsPassed;
    return;
}



const ldv_linux_drivers_base_class_check_final_state: ref;

axiom ldv_linux_drivers_base_class_check_final_state == $sub.ref(0, 695244);

procedure ldv_linux_drivers_base_class_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_drivers_base_class_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11459;

  corral_source_split_11459:
    assume {:verifier.code 0} true;
    $i0 := $M.60;
    goto corral_source_split_11460;

  corral_source_split_11460:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_11461;

  corral_source_split_11461:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_11462;

  corral_source_split_11462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3003} ldv_assert_linux_drivers_base_class__registered_at_exit($i2);
    goto SeqInstr_997, SeqInstr_998;

  SeqInstr_998:
    assume assertsPassed;
    goto SeqInstr_999;

  SeqInstr_999:
    goto corral_source_split_11463;

  corral_source_split_11463:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_997:
    assume !assertsPassed;
    return;
}



const ldv_linux_fs_char_dev_check_final_state: ref;

axiom ldv_linux_fs_char_dev_check_final_state == $sub.ref(0, 696276);

procedure ldv_linux_fs_char_dev_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_fs_char_dev_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11465;

  corral_source_split_11465:
    assume {:verifier.code 0} true;
    $i0 := $M.52;
    goto corral_source_split_11466;

  corral_source_split_11466:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_11467;

  corral_source_split_11467:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_11468;

  corral_source_split_11468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3004} ldv_assert_linux_fs_char_dev__registered_at_exit($i2);
    goto SeqInstr_1000, SeqInstr_1001;

  SeqInstr_1001:
    assume assertsPassed;
    goto SeqInstr_1002;

  SeqInstr_1002:
    goto corral_source_split_11469;

  corral_source_split_11469:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1000:
    assume !assertsPassed;
    return;
}



const ldv_linux_fs_sysfs_check_final_state: ref;

axiom ldv_linux_fs_sysfs_check_final_state == $sub.ref(0, 697308);

procedure ldv_linux_fs_sysfs_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_fs_sysfs_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11471;

  corral_source_split_11471:
    assume {:verifier.code 0} true;
    $i0 := $M.61;
    goto corral_source_split_11472;

  corral_source_split_11472:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_11473;

  corral_source_split_11473:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_11474;

  corral_source_split_11474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3005} ldv_assert_linux_fs_sysfs__more_initial_at_exit($i2);
    goto SeqInstr_1003, SeqInstr_1004;

  SeqInstr_1004:
    assume assertsPassed;
    goto SeqInstr_1005;

  SeqInstr_1005:
    goto corral_source_split_11475;

  corral_source_split_11475:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1003:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_rwlock_check_final_state: ref;

axiom ldv_linux_kernel_locking_rwlock_check_final_state == $sub.ref(0, 698340);

procedure ldv_linux_kernel_locking_rwlock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_locking_rwlock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11477;

  corral_source_split_11477:
    assume {:verifier.code 0} true;
    $i0 := $M.62;
    goto corral_source_split_11478;

  corral_source_split_11478:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_11479;

  corral_source_split_11479:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_11480;

  corral_source_split_11480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3006} ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i2);
    goto SeqInstr_1006, SeqInstr_1007;

  SeqInstr_1007:
    assume assertsPassed;
    goto SeqInstr_1008;

  SeqInstr_1008:
    goto corral_source_split_11481;

  corral_source_split_11481:
    assume {:verifier.code 0} true;
    $i3 := $M.63;
    goto corral_source_split_11482;

  corral_source_split_11482:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_11483;

  corral_source_split_11483:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_11484;

  corral_source_split_11484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3007} ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i5);
    goto SeqInstr_1009, SeqInstr_1010;

  SeqInstr_1010:
    assume assertsPassed;
    goto SeqInstr_1011;

  SeqInstr_1011:
    goto corral_source_split_11485;

  corral_source_split_11485:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1009:
    assume !assertsPassed;
    return;

  SeqInstr_1006:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_module_check_final_state: ref;

axiom ldv_linux_kernel_module_check_final_state == $sub.ref(0, 699372);

procedure ldv_linux_kernel_module_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_module_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11487;

  corral_source_split_11487:
    assume {:verifier.code 0} true;
    $i0 := $M.64;
    goto corral_source_split_11488;

  corral_source_split_11488:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_11489;

  corral_source_split_11489:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_11490;

  corral_source_split_11490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3008} ldv_assert_linux_kernel_module__more_initial_at_exit($i2);
    goto SeqInstr_1012, SeqInstr_1013;

  SeqInstr_1013:
    assume assertsPassed;
    goto SeqInstr_1014;

  SeqInstr_1014:
    goto corral_source_split_11491;

  corral_source_split_11491:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1012:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_bh_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_bh_check_final_state == $sub.ref(0, 700404);

procedure ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_bh_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11493;

  corral_source_split_11493:
    assume {:verifier.code 0} true;
    $i0 := $M.65;
    goto corral_source_split_11494;

  corral_source_split_11494:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_11495;

  corral_source_split_11495:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_11496;

  corral_source_split_11496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3009} ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i2);
    goto SeqInstr_1015, SeqInstr_1016;

  SeqInstr_1016:
    assume assertsPassed;
    goto SeqInstr_1017;

  SeqInstr_1017:
    goto corral_source_split_11497;

  corral_source_split_11497:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1015:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_sched_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_sched_check_final_state == $sub.ref(0, 701436);

procedure ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_sched_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11499;

  corral_source_split_11499:
    assume {:verifier.code 0} true;
    $i0 := $M.66;
    goto corral_source_split_11500;

  corral_source_split_11500:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_11501;

  corral_source_split_11501:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_11502;

  corral_source_split_11502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3010} ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i2);
    goto SeqInstr_1018, SeqInstr_1019;

  SeqInstr_1019:
    assume assertsPassed;
    goto SeqInstr_1020;

  SeqInstr_1020:
    goto corral_source_split_11503;

  corral_source_split_11503:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1018:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_check_final_state == $sub.ref(0, 702468);

procedure ldv_linux_kernel_rcu_update_lock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11505;

  corral_source_split_11505:
    assume {:verifier.code 0} true;
    $i0 := $M.67;
    goto corral_source_split_11506;

  corral_source_split_11506:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_11507;

  corral_source_split_11507:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_11508;

  corral_source_split_11508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3011} ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i2);
    goto SeqInstr_1021, SeqInstr_1022;

  SeqInstr_1022:
    assume assertsPassed;
    goto SeqInstr_1023;

  SeqInstr_1023:
    goto corral_source_split_11509;

  corral_source_split_11509:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1021:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_srcu_check_final_state: ref;

axiom ldv_linux_kernel_rcu_srcu_check_final_state == $sub.ref(0, 703500);

procedure ldv_linux_kernel_rcu_srcu_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_srcu_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11511;

  corral_source_split_11511:
    assume {:verifier.code 0} true;
    $i0 := $M.68;
    goto corral_source_split_11512;

  corral_source_split_11512:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_11513;

  corral_source_split_11513:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_11514;

  corral_source_split_11514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3012} ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i2);
    goto SeqInstr_1024, SeqInstr_1025;

  SeqInstr_1025:
    assume assertsPassed;
    goto SeqInstr_1026;

  SeqInstr_1026:
    goto corral_source_split_11515;

  corral_source_split_11515:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1024:
    assume !assertsPassed;
    return;
}



const ldv_linux_lib_idr_check_final_state: ref;

axiom ldv_linux_lib_idr_check_final_state == $sub.ref(0, 704532);

procedure ldv_linux_lib_idr_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_lib_idr_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11517;

  corral_source_split_11517:
    assume {:verifier.code 0} true;
    $i0 := $M.69;
    goto corral_source_split_11518;

  corral_source_split_11518:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_11519;

  corral_source_split_11519:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_11525;

  corral_source_split_11525:
    assume {:verifier.code 0} true;
    $i3 := $M.69;
    goto corral_source_split_11526;

  corral_source_split_11526:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 3);
    goto corral_source_split_11527;

  corral_source_split_11527:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_11521;

  corral_source_split_11521:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_11522;

  corral_source_split_11522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3013} ldv_assert_linux_lib_idr__more_at_exit($i5);
    goto SeqInstr_1027, SeqInstr_1028;

  SeqInstr_1028:
    assume assertsPassed;
    goto SeqInstr_1029;

  SeqInstr_1029:
    goto corral_source_split_11523;

  corral_source_split_11523:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1027:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const ldv_linux_mmc_sdio_func_check_final_state: ref;

axiom ldv_linux_mmc_sdio_func_check_final_state == $sub.ref(0, 705564);

procedure ldv_linux_mmc_sdio_func_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_mmc_sdio_func_check_final_state()
{
  var $i0: i16;
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11529;

  corral_source_split_11529:
    assume {:verifier.code 0} true;
    $i0 := $M.70;
    goto corral_source_split_11530;

  corral_source_split_11530:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_11531;

  corral_source_split_11531:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_11532;

  corral_source_split_11532:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_11533;

  corral_source_split_11533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3014} ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i3);
    goto SeqInstr_1030, SeqInstr_1031;

  SeqInstr_1031:
    assume assertsPassed;
    goto SeqInstr_1032;

  SeqInstr_1032:
    goto corral_source_split_11534;

  corral_source_split_11534:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1030:
    assume !assertsPassed;
    return;
}



const ldv_linux_net_rtnetlink_check_final_state: ref;

axiom ldv_linux_net_rtnetlink_check_final_state == $sub.ref(0, 706596);

procedure ldv_linux_net_rtnetlink_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_net_rtnetlink_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11536;

  corral_source_split_11536:
    assume {:verifier.code 0} true;
    $i0 := $M.71;
    goto corral_source_split_11537;

  corral_source_split_11537:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_11538;

  corral_source_split_11538:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_11539;

  corral_source_split_11539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3015} ldv_assert_linux_net_rtnetlink__lock_on_exit($i2);
    goto SeqInstr_1033, SeqInstr_1034;

  SeqInstr_1034:
    assume assertsPassed;
    goto SeqInstr_1035;

  SeqInstr_1035:
    goto corral_source_split_11540;

  corral_source_split_11540:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1033:
    assume !assertsPassed;
    return;
}



const ldv_linux_net_sock_check_final_state: ref;

axiom ldv_linux_net_sock_check_final_state == $sub.ref(0, 707628);

procedure ldv_linux_net_sock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_net_sock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11542;

  corral_source_split_11542:
    assume {:verifier.code 0} true;
    $i0 := $M.72;
    goto corral_source_split_11543;

  corral_source_split_11543:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_11544;

  corral_source_split_11544:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_11545;

  corral_source_split_11545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3016} ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i2);
    goto SeqInstr_1036, SeqInstr_1037;

  SeqInstr_1037:
    assume assertsPassed;
    goto SeqInstr_1038;

  SeqInstr_1038:
    goto corral_source_split_11546;

  corral_source_split_11546:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1036:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_coherent_check_final_state: ref;

axiom ldv_linux_usb_coherent_check_final_state == $sub.ref(0, 708660);

procedure ldv_linux_usb_coherent_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_coherent_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11548;

  corral_source_split_11548:
    assume {:verifier.code 0} true;
    $i0 := $M.73;
    goto corral_source_split_11549;

  corral_source_split_11549:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_11550;

  corral_source_split_11550:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_11551;

  corral_source_split_11551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3017} ldv_assert_linux_usb_coherent__more_initial_at_exit($i2);
    goto SeqInstr_1039, SeqInstr_1040;

  SeqInstr_1040:
    assume assertsPassed;
    goto SeqInstr_1041;

  SeqInstr_1041:
    goto corral_source_split_11552;

  corral_source_split_11552:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1039:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_gadget_check_final_state: ref;

axiom ldv_linux_usb_gadget_check_final_state == $sub.ref(0, 709692);

procedure ldv_linux_usb_gadget_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_gadget_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11554;

  corral_source_split_11554:
    assume {:verifier.code 0} true;
    $i0 := $M.53;
    goto corral_source_split_11555;

  corral_source_split_11555:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_11556;

  corral_source_split_11556:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_11557;

  corral_source_split_11557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3018} ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i2);
    goto SeqInstr_1042, SeqInstr_1043;

  SeqInstr_1043:
    assume assertsPassed;
    goto SeqInstr_1044;

  SeqInstr_1044:
    goto corral_source_split_11558;

  corral_source_split_11558:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1042:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_urb_check_final_state: ref;

axiom ldv_linux_usb_urb_check_final_state == $sub.ref(0, 710724);

procedure ldv_linux_usb_urb_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_urb_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11560;

  corral_source_split_11560:
    assume {:verifier.code 0} true;
    $i0 := $M.74;
    goto corral_source_split_11561;

  corral_source_split_11561:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_11562;

  corral_source_split_11562:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_11563;

  corral_source_split_11563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3019} ldv_assert_linux_usb_urb__more_initial_at_exit($i2);
    goto SeqInstr_1045, SeqInstr_1046;

  SeqInstr_1046:
    assume assertsPassed;
    goto SeqInstr_1047;

  SeqInstr_1047:
    goto corral_source_split_11564;

  corral_source_split_11564:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1045:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_usb_urb__more_initial_at_exit: ref;

axiom ldv_assert_linux_usb_urb__more_initial_at_exit == $sub.ref(0, 711756);

procedure ldv_assert_linux_usb_urb__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_urb__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3020} {:cexpr "ldv_assert_linux_usb_urb__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11566;

  corral_source_split_11566:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11567;

  corral_source_split_11567:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11569;

  corral_source_split_11569:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3021} __VERIFIER_error();
    goto SeqInstr_1048, SeqInstr_1049;

  SeqInstr_1049:
    assume assertsPassed;
    goto SeqInstr_1050;

  SeqInstr_1050:
    goto corral_source_split_11570;

  corral_source_split_11570:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1048:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit: ref;

axiom ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit == $sub.ref(0, 712788);

procedure ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3022} {:cexpr "ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11572;

  corral_source_split_11572:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11573;

  corral_source_split_11573:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11575;

  corral_source_split_11575:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3023} __VERIFIER_error();
    goto SeqInstr_1051, SeqInstr_1052;

  SeqInstr_1052:
    assume assertsPassed;
    goto SeqInstr_1053;

  SeqInstr_1053:
    goto corral_source_split_11576;

  corral_source_split_11576:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1051:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_usb_coherent__more_initial_at_exit: ref;

axiom ldv_assert_linux_usb_coherent__more_initial_at_exit == $sub.ref(0, 713820);

procedure ldv_assert_linux_usb_coherent__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_coherent__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3024} {:cexpr "ldv_assert_linux_usb_coherent__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11578;

  corral_source_split_11578:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11579;

  corral_source_split_11579:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11581;

  corral_source_split_11581:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3025} __VERIFIER_error();
    goto SeqInstr_1054, SeqInstr_1055;

  SeqInstr_1055:
    assume assertsPassed;
    goto SeqInstr_1056;

  SeqInstr_1056:
    goto corral_source_split_11582;

  corral_source_split_11582:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1054:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_net_sock__all_locked_sockets_must_be_released: ref;

axiom ldv_assert_linux_net_sock__all_locked_sockets_must_be_released == $sub.ref(0, 714852);

procedure ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3026} {:cexpr "ldv_assert_linux_net_sock__all_locked_sockets_must_be_released:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11584;

  corral_source_split_11584:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11585;

  corral_source_split_11585:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11587;

  corral_source_split_11587:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3027} __VERIFIER_error();
    goto SeqInstr_1057, SeqInstr_1058;

  SeqInstr_1058:
    assume assertsPassed;
    goto SeqInstr_1059;

  SeqInstr_1059:
    goto corral_source_split_11588;

  corral_source_split_11588:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1057:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_net_rtnetlink__lock_on_exit: ref;

axiom ldv_assert_linux_net_rtnetlink__lock_on_exit == $sub.ref(0, 715884);

procedure ldv_assert_linux_net_rtnetlink__lock_on_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_rtnetlink__lock_on_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3028} {:cexpr "ldv_assert_linux_net_rtnetlink__lock_on_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11590;

  corral_source_split_11590:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11591;

  corral_source_split_11591:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11593;

  corral_source_split_11593:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3029} __VERIFIER_error();
    goto SeqInstr_1060, SeqInstr_1061;

  SeqInstr_1061:
    assume assertsPassed;
    goto SeqInstr_1062;

  SeqInstr_1062:
    goto corral_source_split_11594;

  corral_source_split_11594:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1060:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_mmc_sdio_func__unreleased_at_exit: ref;

axiom ldv_assert_linux_mmc_sdio_func__unreleased_at_exit == $sub.ref(0, 716916);

procedure ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3030} {:cexpr "ldv_assert_linux_mmc_sdio_func__unreleased_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11596;

  corral_source_split_11596:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11597;

  corral_source_split_11597:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11599;

  corral_source_split_11599:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3031} __VERIFIER_error();
    goto SeqInstr_1063, SeqInstr_1064;

  SeqInstr_1064:
    assume assertsPassed;
    goto SeqInstr_1065;

  SeqInstr_1065:
    goto corral_source_split_11600;

  corral_source_split_11600:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1063:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_lib_idr__more_at_exit: ref;

axiom ldv_assert_linux_lib_idr__more_at_exit == $sub.ref(0, 717948);

procedure ldv_assert_linux_lib_idr__more_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_lib_idr__more_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3032} {:cexpr "ldv_assert_linux_lib_idr__more_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11602;

  corral_source_split_11602:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11603;

  corral_source_split_11603:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11605;

  corral_source_split_11605:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3033} __VERIFIER_error();
    goto SeqInstr_1066, SeqInstr_1067;

  SeqInstr_1067:
    assume assertsPassed;
    goto SeqInstr_1068;

  SeqInstr_1068:
    goto corral_source_split_11606;

  corral_source_split_11606:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1066:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_srcu__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_srcu__locked_at_exit == $sub.ref(0, 718980);

procedure ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3034} {:cexpr "ldv_assert_linux_kernel_rcu_srcu__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11608;

  corral_source_split_11608:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11609;

  corral_source_split_11609:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11611;

  corral_source_split_11611:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3035} __VERIFIER_error();
    goto SeqInstr_1069, SeqInstr_1070;

  SeqInstr_1070:
    assume assertsPassed;
    goto SeqInstr_1071;

  SeqInstr_1071:
    goto corral_source_split_11612;

  corral_source_split_11612:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1069:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit == $sub.ref(0, 720012);

procedure ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3036} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11614;

  corral_source_split_11614:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11615;

  corral_source_split_11615:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11617;

  corral_source_split_11617:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3037} __VERIFIER_error();
    goto SeqInstr_1072, SeqInstr_1073;

  SeqInstr_1073:
    assume assertsPassed;
    goto SeqInstr_1074;

  SeqInstr_1074:
    goto corral_source_split_11618;

  corral_source_split_11618:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1072:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit == $sub.ref(0, 721044);

procedure ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3038} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11620;

  corral_source_split_11620:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11621;

  corral_source_split_11621:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11623;

  corral_source_split_11623:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3039} __VERIFIER_error();
    goto SeqInstr_1075, SeqInstr_1076;

  SeqInstr_1076:
    assume assertsPassed;
    goto SeqInstr_1077;

  SeqInstr_1077:
    goto corral_source_split_11624;

  corral_source_split_11624:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1075:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit == $sub.ref(0, 722076);

procedure ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3040} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11626;

  corral_source_split_11626:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11627;

  corral_source_split_11627:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11629;

  corral_source_split_11629:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3041} __VERIFIER_error();
    goto SeqInstr_1078, SeqInstr_1079;

  SeqInstr_1079:
    assume assertsPassed;
    goto SeqInstr_1080;

  SeqInstr_1080:
    goto corral_source_split_11630;

  corral_source_split_11630:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1078:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_module__more_initial_at_exit: ref;

axiom ldv_assert_linux_kernel_module__more_initial_at_exit == $sub.ref(0, 723108);

procedure ldv_assert_linux_kernel_module__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_module__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3042} {:cexpr "ldv_assert_linux_kernel_module__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11632;

  corral_source_split_11632:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11633;

  corral_source_split_11633:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11635;

  corral_source_split_11635:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3043} __VERIFIER_error();
    goto SeqInstr_1081, SeqInstr_1082;

  SeqInstr_1082:
    assume assertsPassed;
    goto SeqInstr_1083;

  SeqInstr_1083:
    goto corral_source_split_11636;

  corral_source_split_11636:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1081:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit: ref;

axiom ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit == $sub.ref(0, 724140);

procedure ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3044} {:cexpr "ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11638;

  corral_source_split_11638:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11639;

  corral_source_split_11639:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11641;

  corral_source_split_11641:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3045} __VERIFIER_error();
    goto SeqInstr_1084, SeqInstr_1085;

  SeqInstr_1085:
    assume assertsPassed;
    goto SeqInstr_1086;

  SeqInstr_1086:
    goto corral_source_split_11642;

  corral_source_split_11642:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1084:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit: ref;

axiom ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit == $sub.ref(0, 725172);

procedure ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3046} {:cexpr "ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11644;

  corral_source_split_11644:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11645;

  corral_source_split_11645:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11647;

  corral_source_split_11647:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3047} __VERIFIER_error();
    goto SeqInstr_1087, SeqInstr_1088;

  SeqInstr_1088:
    assume assertsPassed;
    goto SeqInstr_1089;

  SeqInstr_1089:
    goto corral_source_split_11648;

  corral_source_split_11648:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1087:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_sysfs__more_initial_at_exit: ref;

axiom ldv_assert_linux_fs_sysfs__more_initial_at_exit == $sub.ref(0, 726204);

procedure ldv_assert_linux_fs_sysfs__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_sysfs__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3048} {:cexpr "ldv_assert_linux_fs_sysfs__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11650;

  corral_source_split_11650:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11651;

  corral_source_split_11651:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11653;

  corral_source_split_11653:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3049} __VERIFIER_error();
    goto SeqInstr_1090, SeqInstr_1091;

  SeqInstr_1091:
    assume assertsPassed;
    goto SeqInstr_1092;

  SeqInstr_1092:
    goto corral_source_split_11654;

  corral_source_split_11654:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1090:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_char_dev__registered_at_exit: ref;

axiom ldv_assert_linux_fs_char_dev__registered_at_exit == $sub.ref(0, 727236);

procedure ldv_assert_linux_fs_char_dev__registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_char_dev__registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3050} {:cexpr "ldv_assert_linux_fs_char_dev__registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11656;

  corral_source_split_11656:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11657;

  corral_source_split_11657:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11659;

  corral_source_split_11659:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3051} __VERIFIER_error();
    goto SeqInstr_1093, SeqInstr_1094;

  SeqInstr_1094:
    assume assertsPassed;
    goto SeqInstr_1095;

  SeqInstr_1095:
    goto corral_source_split_11660;

  corral_source_split_11660:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1093:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_drivers_base_class__registered_at_exit: ref;

axiom ldv_assert_linux_drivers_base_class__registered_at_exit == $sub.ref(0, 728268);

procedure ldv_assert_linux_drivers_base_class__registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_drivers_base_class__registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3052} {:cexpr "ldv_assert_linux_drivers_base_class__registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11662;

  corral_source_split_11662:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11663;

  corral_source_split_11663:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11665;

  corral_source_split_11665:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3053} __VERIFIER_error();
    goto SeqInstr_1096, SeqInstr_1097;

  SeqInstr_1097:
    assume assertsPassed;
    goto SeqInstr_1098;

  SeqInstr_1098:
    goto corral_source_split_11666;

  corral_source_split_11666:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1096:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_request__get_at_exit: ref;

axiom ldv_assert_linux_block_request__get_at_exit == $sub.ref(0, 729300);

procedure ldv_assert_linux_block_request__get_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_request__get_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3054} {:cexpr "ldv_assert_linux_block_request__get_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11668;

  corral_source_split_11668:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11669;

  corral_source_split_11669:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11671;

  corral_source_split_11671:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3055} __VERIFIER_error();
    goto SeqInstr_1099, SeqInstr_1100;

  SeqInstr_1100:
    assume assertsPassed;
    goto SeqInstr_1101;

  SeqInstr_1101:
    goto corral_source_split_11672;

  corral_source_split_11672:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1099:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_queue__more_initial_at_exit: ref;

axiom ldv_assert_linux_block_queue__more_initial_at_exit == $sub.ref(0, 730332);

procedure ldv_assert_linux_block_queue__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_queue__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3056} {:cexpr "ldv_assert_linux_block_queue__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11674;

  corral_source_split_11674:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11675;

  corral_source_split_11675:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11677;

  corral_source_split_11677:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3057} __VERIFIER_error();
    goto SeqInstr_1102, SeqInstr_1103;

  SeqInstr_1103:
    assume assertsPassed;
    goto SeqInstr_1104;

  SeqInstr_1104:
    goto corral_source_split_11678;

  corral_source_split_11678:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1102:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_genhd__more_initial_at_exit: ref;

axiom ldv_assert_linux_block_genhd__more_initial_at_exit == $sub.ref(0, 731364);

procedure ldv_assert_linux_block_genhd__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_genhd__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3058} {:cexpr "ldv_assert_linux_block_genhd__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11680;

  corral_source_split_11680:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11681;

  corral_source_split_11681:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11683;

  corral_source_split_11683:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3059} __VERIFIER_error();
    goto SeqInstr_1105, SeqInstr_1106;

  SeqInstr_1106:
    assume assertsPassed;
    goto SeqInstr_1107;

  SeqInstr_1107:
    goto corral_source_split_11684;

  corral_source_split_11684:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1105:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_arch_io__more_initial_at_exit: ref;

axiom ldv_assert_linux_arch_io__more_initial_at_exit == $sub.ref(0, 732396);

procedure ldv_assert_linux_arch_io__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_arch_io__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3060} {:cexpr "ldv_assert_linux_arch_io__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11686;

  corral_source_split_11686:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11687;

  corral_source_split_11687:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11689;

  corral_source_split_11689:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3061} __VERIFIER_error();
    goto SeqInstr_1108, SeqInstr_1109;

  SeqInstr_1109:
    assume assertsPassed;
    goto SeqInstr_1110;

  SeqInstr_1110:
    goto corral_source_split_11690;

  corral_source_split_11690:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1108:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_post_init: ref;

axiom ldv_post_init == $sub.ref(0, 733428);

procedure ldv_post_init($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_post_init($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3062} {:cexpr "ldv_post_init:arg:init_ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_11692;

  corral_source_split_11692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3063} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 3064} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11693;

  corral_source_split_11693:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 734460);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.32, $M.12, $M.59, $M.60, $M.52, $M.61, $M.62, $M.63, $M.64, $M.68, $M.65, $M.66, $M.67, $M.70, $M.30, $M.71, $M.72, $M.73, $M.53, $M.31, $M.74, $M.20, $M.29, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.69, $M.21, $M.19, $M.24, $M.0, $M.58, $M.57, $M.25, $M.11, $M.15, $M.17, $M.16, $M.1, $M.9, $M.7, $M.8, $M.6, $M.5, $M.18, $M.10, $M.22, $M.4, $M.51, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.168, $M.169, $M.170, $CurrAddr, $M.26, $M.47, assertsPassed, $M.49, $M.55, $M.56, $M.23;



implementation main() returns ($r: i32)
{

  $bb0:
    call {:si_unique_call 3065} $initialize();
    goto corral_source_split_11695;

  corral_source_split_11695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3066} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_11696;

  corral_source_split_11696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3067} ldv_ldv_initialize_131();
    goto corral_source_split_11697;

  corral_source_split_11697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3068} ldv_entry_EMGentry_28($0.ref);
    goto SeqInstr_1111, SeqInstr_1112;

  SeqInstr_1112:
    assume assertsPassed;
    goto SeqInstr_1113;

  SeqInstr_1113:
    goto corral_source_split_11698;

  corral_source_split_11698:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_1111:
    assume !assertsPassed;
    return;
}



const ldv_ldv_initialize_131: ref;

axiom ldv_ldv_initialize_131 == $sub.ref(0, 735492);

procedure ldv_ldv_initialize_131();
  free requires assertsPassed;



implementation ldv_ldv_initialize_131()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11700;

  corral_source_split_11700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3069} ldv_linux_lib_find_bit_initialize();
    goto corral_source_split_11701;

  corral_source_split_11701:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_lib_find_bit_initialize: ref;

axiom ldv_linux_lib_find_bit_initialize == $sub.ref(0, 736524);

procedure ldv_linux_lib_find_bit_initialize();
  free requires assertsPassed;



implementation ldv_linux_lib_find_bit_initialize()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11703;

  corral_source_split_11703:
    assume {:verifier.code 0} true;
    $i0 := $load.i32($M.11, nr_cpu_ids);
    goto corral_source_split_11704;

  corral_source_split_11704:
    assume {:verifier.code 0} true;
    $i1 := $sgt.i32($i0, 0);
    goto corral_source_split_11705;

  corral_source_split_11705:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_11706;

  corral_source_split_11706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3070} ldv_assume($i2);
    goto corral_source_split_11707;

  corral_source_split_11707:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 737556);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3071} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_11709;

  corral_source_split_11709:
    assume {:verifier.code 1} true;
    goto corral_source_split_11710;

  corral_source_split_11710:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_11711;

  corral_source_split_11711:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 738588);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 739620);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 740652);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11713;

  corral_source_split_11713:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_1114, SeqInstr_1115;

  SeqInstr_1115:
    assume assertsPassed;
    goto SeqInstr_1116;

  SeqInstr_1116:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_11714;

  corral_source_split_11714:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1114:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 741684);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 742716);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 743748);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 744780);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 745812);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 746844);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 747876);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 748908);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 749940);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 750972);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11716;

  corral_source_split_11716:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3072} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 3073} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 3074} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_11717;

  corral_source_split_11717:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_11718;

  corral_source_split_11718:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_11722;

  corral_source_split_11722:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_11723;

  corral_source_split_11723:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3075} __VERIFIER_assume($i4);
    goto corral_source_split_11724;

  corral_source_split_11724:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_11720;

  corral_source_split_11720:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 752004);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 753036);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 754068);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 755100);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 756132);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11726;

  corral_source_split_11726:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3076} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 3077} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 3078} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_11727;

  corral_source_split_11727:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_11728;

  corral_source_split_11728:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_11732;

  corral_source_split_11732:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_11733;

  corral_source_split_11733:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3079} __VERIFIER_assume($i4);
    goto corral_source_split_11734;

  corral_source_split_11734:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_11730;

  corral_source_split_11730:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 757164);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 758196);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 759228);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 760260);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 761292);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11736;

  corral_source_split_11736:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3080} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 3081} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 3082} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_11737;

  corral_source_split_11737:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3083} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 3084} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 3085} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_11738;

  corral_source_split_11738:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3086} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 3087} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 3088} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_11739;

  corral_source_split_11739:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_11740;

  corral_source_split_11740:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_11745;

  corral_source_split_11745:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_11746;

  corral_source_split_11746:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3089} __VERIFIER_assume($i7);
    goto corral_source_split_11747;

  corral_source_split_11747:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_11748;

  corral_source_split_11748:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_11754;

  corral_source_split_11754:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_11755;

  corral_source_split_11755:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3090} __VERIFIER_assume($i11);
    goto corral_source_split_11756;

  corral_source_split_11756:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_11752;

  corral_source_split_11752:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_11742;

  corral_source_split_11742:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_11743;

  corral_source_split_11743:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_11750;

  corral_source_split_11750:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 762324);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 763356);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 764388);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 765420);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 766452);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 767484);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 768516);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 769548);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 770580);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11758;

  corral_source_split_11758:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3091} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3092} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_11759;

  corral_source_split_11759:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11760;

  corral_source_split_11760:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 3093} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_11761;

  corral_source_split_11761:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_11762;

  corral_source_split_11762:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_11763;

  corral_source_split_11763:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_11764;

  corral_source_split_11764:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_11771;

  corral_source_split_11771:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_11772;

  corral_source_split_11772:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_11773;

  corral_source_split_11773:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_11774;

  corral_source_split_11774:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_11766;

  corral_source_split_11766:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_11767;

  corral_source_split_11767:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3094} __VERIFIER_assume($i10);
    goto corral_source_split_11768;

  corral_source_split_11768:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_11769;

  corral_source_split_11769:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 771612);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11776;

  corral_source_split_11776:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3095} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 3096} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 3097} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_11777;

  corral_source_split_11777:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 772644);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11779;

  corral_source_split_11779:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3098} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 3099} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_11780;

  corral_source_split_11780:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 773676);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 774708);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 3100} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 3101} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 775740);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 776772);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11782;

  corral_source_split_11782:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_11783;

  corral_source_split_11783:
    assume {:verifier.code 0} true;
    return;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 777804);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 778836);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.32, $M.12, $M.59, $M.60, $M.52, $M.61, $M.62, $M.63, $M.64, $M.68, $M.65, $M.66, $M.67, $M.70, $M.30, $M.71, $M.72, $M.73, $M.53, $M.31, $M.74, $M.20, $M.29, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.69, $M.21, $M.19, $M.24, $M.0, $M.58, $M.57, $M.25, $M.11, $M.15, $M.17, $M.16, $M.1, $M.9, $M.7, $M.8, $M.6, $M.5, $M.18, $M.10, $M.22, $M.4, $M.51, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.168, $M.169, $M.170;



implementation __SMACK_static_init()
{

  $bb0:
    $M.32 := 1;
    call {:si_unique_call 3102} {:cexpr "ldv_linux_alloc_usb_lock_lock"} boogie_si_record_i32(1);
    $M.12 := 0;
    call {:si_unique_call 3103} {:cexpr "ldv_linux_arch_io_iomem"} boogie_si_record_i32(0);
    $M.59 := 0;
    call {:si_unique_call 3104} {:cexpr "ldv_linux_block_request_blk_rq"} boogie_si_record_i32(0);
    $M.60 := 0;
    call {:si_unique_call 3105} {:cexpr "ldv_linux_drivers_base_class_usb_gadget_class"} boogie_si_record_i32(0);
    $M.52 := 0;
    call {:si_unique_call 3106} {:cexpr "ldv_linux_fs_char_dev_usb_gadget_chrdev"} boogie_si_record_i32(0);
    $M.61 := 0;
    call {:si_unique_call 3107} {:cexpr "ldv_linux_fs_sysfs_sysfs"} boogie_si_record_i32(0);
    $M.62 := 1;
    call {:si_unique_call 3108} {:cexpr "ldv_linux_kernel_locking_rwlock_rlock"} boogie_si_record_i32(1);
    $M.63 := 1;
    call {:si_unique_call 3109} {:cexpr "ldv_linux_kernel_locking_rwlock_wlock"} boogie_si_record_i32(1);
    $M.64 := 1;
    call {:si_unique_call 3110} {:cexpr "ldv_linux_kernel_module_module_refcounter"} boogie_si_record_i32(1);
    $M.68 := 0;
    call {:si_unique_call 3111} {:cexpr "ldv_linux_kernel_rcu_srcu_srcu_nested"} boogie_si_record_i32(0);
    $M.65 := 0;
    call {:si_unique_call 3112} {:cexpr "ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh"} boogie_si_record_i32(0);
    $M.66 := 0;
    call {:si_unique_call 3113} {:cexpr "ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched"} boogie_si_record_i32(0);
    $M.67 := 0;
    call {:si_unique_call 3114} {:cexpr "ldv_linux_kernel_rcu_update_lock_rcu_nested"} boogie_si_record_i32(0);
    $M.70 := 0;
    call {:si_unique_call 3115} {:cexpr "ldv_linux_mmc_sdio_func_sdio_element"} boogie_si_record_i16(0);
    $M.30 := 0;
    call {:si_unique_call 3116} {:cexpr "ldv_linux_net_register_probe_state"} boogie_si_record_i32(0);
    $M.71 := 0;
    call {:si_unique_call 3117} {:cexpr "rtnllocknumber"} boogie_si_record_i32(0);
    $M.72 := 0;
    call {:si_unique_call 3118} {:cexpr "locksocknumber"} boogie_si_record_i32(0);
    $M.73 := 0;
    call {:si_unique_call 3119} {:cexpr "ldv_linux_usb_coherent_coherent_state"} boogie_si_record_i32(0);
    call {:si_unique_call 3120} {:cexpr "LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS"} boogie_si_record_i32(0);
    $M.53 := 0;
    call {:si_unique_call 3121} {:cexpr "ldv_linux_usb_gadget_usb_gadget"} boogie_si_record_i32(0);
    $M.31 := 0;
    call {:si_unique_call 3122} {:cexpr "ldv_linux_usb_register_probe_state"} boogie_si_record_i32(0);
    $M.74 := 0;
    call {:si_unique_call 3123} {:cexpr "ldv_linux_usb_urb_urb_state"} boogie_si_record_i32(0);
    call {:si_unique_call 3124} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode"} boogie_si_record_i8(0);
    $M.20 := 0;
    call {:si_unique_call 3125} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_int_mtx_of_NOT_ARG_SIGN"} boogie_si_record_i8(0);
    call {:si_unique_call 3126} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock"} boogie_si_record_i8(0);
    $M.29 := 0;
    call {:si_unique_call 3127} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_megadev_mutex"} boogie_si_record_i8(0);
    call {:si_unique_call 3128} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device"} boogie_si_record_i8(0);
    $M.79 := $store.i32($M.79, __mod_pci__megaraid_pci_tbl_device_table, 0);
    $M.80 := $store.i32($M.80, $add.ref($add.ref($add.ref(__mod_pci__megaraid_pci_tbl_device_table, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.81 := $store.i32($M.81, $add.ref($add.ref($add.ref(__mod_pci__megaraid_pci_tbl_device_table, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.82 := $store.i32($M.82, $add.ref($add.ref($add.ref(__mod_pci__megaraid_pci_tbl_device_table, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.83 := $store.i32($M.83, $add.ref($add.ref($add.ref(__mod_pci__megaraid_pci_tbl_device_table, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.84 := $store.i32($M.84, $add.ref($add.ref($add.ref(__mod_pci__megaraid_pci_tbl_device_table, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.85 := $store.i64($M.85, $add.ref($add.ref($add.ref(__mod_pci__megaraid_pci_tbl_device_table, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.79 := $store.i32($M.79, $add.ref($add.ref($add.ref(__mod_pci__megaraid_pci_tbl_device_table, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i32($M.80, $add.ref($add.ref($add.ref(__mod_pci__megaraid_pci_tbl_device_table, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.81 := $store.i32($M.81, $add.ref($add.ref($add.ref(__mod_pci__megaraid_pci_tbl_device_table, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.82 := $store.i32($M.82, $add.ref($add.ref($add.ref(__mod_pci__megaraid_pci_tbl_device_table, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.83 := $store.i32($M.83, $add.ref($add.ref($add.ref(__mod_pci__megaraid_pci_tbl_device_table, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.84 := $store.i32($M.84, $add.ref($add.ref($add.ref(__mod_pci__megaraid_pci_tbl_device_table, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.85 := $store.i64($M.85, $add.ref($add.ref($add.ref(__mod_pci__megaraid_pci_tbl_device_table, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.79 := $store.i32($M.79, $add.ref($add.ref($add.ref(__mod_pci__megaraid_pci_tbl_device_table, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i32($M.80, $add.ref($add.ref($add.ref(__mod_pci__megaraid_pci_tbl_device_table, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.81 := $store.i32($M.81, $add.ref($add.ref($add.ref(__mod_pci__megaraid_pci_tbl_device_table, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.82 := $store.i32($M.82, $add.ref($add.ref($add.ref(__mod_pci__megaraid_pci_tbl_device_table, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.83 := $store.i32($M.83, $add.ref($add.ref($add.ref(__mod_pci__megaraid_pci_tbl_device_table, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.84 := $store.i32($M.84, $add.ref($add.ref($add.ref(__mod_pci__megaraid_pci_tbl_device_table, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(20, 1)), 0);
    $M.85 := $store.i64($M.85, $add.ref($add.ref($add.ref(__mod_pci__megaraid_pci_tbl_device_table, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.79 := $store.i32($M.79, $add.ref($add.ref($add.ref(__mod_pci__megaraid_pci_tbl_device_table, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i32($M.80, $add.ref($add.ref($add.ref(__mod_pci__megaraid_pci_tbl_device_table, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(4, 1)), 0);
    $M.81 := $store.i32($M.81, $add.ref($add.ref($add.ref(__mod_pci__megaraid_pci_tbl_device_table, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.82 := $store.i32($M.82, $add.ref($add.ref($add.ref(__mod_pci__megaraid_pci_tbl_device_table, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.83 := $store.i32($M.83, $add.ref($add.ref($add.ref(__mod_pci__megaraid_pci_tbl_device_table, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.84 := $store.i32($M.84, $add.ref($add.ref($add.ref(__mod_pci__megaraid_pci_tbl_device_table, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(20, 1)), 0);
    $M.85 := $store.i64($M.85, $add.ref($add.ref($add.ref(__mod_pci__megaraid_pci_tbl_device_table, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.69 := 0;
    call {:si_unique_call 3129} {:cexpr "ldv_linux_lib_idr_idr"} boogie_si_record_i32(0);
    $M.21 := 0;
    call {:si_unique_call 3130} {:cexpr "ldv_linux_kernel_sched_completion_completion_int_waitq_of_NOT_ARG_SIGN"} boogie_si_record_i32(0);
    call {:si_unique_call 3131} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct"} boogie_si_record_i32(1);
    call {:si_unique_call 3132} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_ptl"} boogie_si_record_i32(1);
    call {:si_unique_call 3133} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data"} boogie_si_record_i32(1);
    $M.19 := 1;
    call {:si_unique_call 3134} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN"} boogie_si_record_i32(1);
    call {:si_unique_call 3135} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock"} boogie_si_record_i32(1);
    call {:si_unique_call 3136} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode"} boogie_si_record_i32(1);
    $M.24 := 1;
    call {:si_unique_call 3137} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_host_lock_of_Scsi_Host"} boogie_si_record_i32(1);
    call {:si_unique_call 3138} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct"} boogie_si_record_i32(1);
    $M.0 := 0;
    call {:si_unique_call 3139} {:cexpr "__ldv_in_interrupt_context"} boogie_si_record_i8(0);
    $M.58 := 0;
    call {:si_unique_call 3140} {:cexpr "ldv_linux_block_queue_queue_state"} boogie_si_record_i32(0);
    $M.57 := 0;
    call {:si_unique_call 3141} {:cexpr "ldv_linux_block_genhd_disk_state"} boogie_si_record_i32(0);
    $M.25 := 33554432;
    call {:si_unique_call 3142} {:cexpr "driver_ver"} boogie_si_record_i32(33554432);
    $M.11 := $store.i32($M.11, megadev_mutex, 1);
    $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(megadev_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(megadev_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(megadev_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref(megadev_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(megadev_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(megadev_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(megadev_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(megadev_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.163);
    $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(megadev_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.11 := $store.i64($M.11, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(megadev_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(megadev_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(megadev_mutex, $mul.ref(80, 1)));
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(megadev_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(megadev_mutex, $mul.ref(80, 1)));
    $M.11 := $store.ref($M.11, $add.ref($add.ref(megadev_mutex, $mul.ref(0, 160)), $mul.ref(96, 1)), $0.ref);
    $M.11 := $store.ref($M.11, $add.ref($add.ref(megadev_mutex, $mul.ref(0, 160)), $mul.ref(104, 1)), megadev_mutex);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(megadev_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref(megadev_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref($add.ref(megadev_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.11 := $store.ref($M.11, $add.ref($add.ref($add.ref(megadev_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(24, 1)), .str.164);
    $M.11 := $store.i32($M.11, $add.ref($add.ref($add.ref(megadev_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.11 := $store.i64($M.11, $add.ref($add.ref($add.ref(megadev_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.15 := $store.ref($M.15, mega_proc_files, .str.138);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(0, 24)), $mul.ref(8, 1)), 1216);
    $M.16 := $store.ref($M.16, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(0, 24)), $mul.ref(16, 1)), proc_show_config);
    $M.15 := $store.ref($M.15, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(1, 24)), $mul.ref(0, 1)), .str.139);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(1, 24)), $mul.ref(8, 1)), 1224);
    $M.16 := $store.ref($M.16, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(1, 24)), $mul.ref(16, 1)), proc_show_stat);
    $M.15 := $store.ref($M.15, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(2, 24)), $mul.ref(0, 1)), .str.140);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(2, 24)), $mul.ref(8, 1)), 1232);
    $M.16 := $store.ref($M.16, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(2, 24)), $mul.ref(16, 1)), proc_show_mbox);
    $M.15 := $store.ref($M.15, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(3, 24)), $mul.ref(0, 1)), .str.141);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(3, 24)), $mul.ref(8, 1)), 1240);
    $M.16 := $store.ref($M.16, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(3, 24)), $mul.ref(16, 1)), proc_show_rebuild_rate);
    $M.15 := $store.ref($M.15, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(4, 24)), $mul.ref(0, 1)), .str.142);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(4, 24)), $mul.ref(8, 1)), 1248);
    $M.16 := $store.ref($M.16, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(4, 24)), $mul.ref(16, 1)), proc_show_battery);
    $M.15 := $store.ref($M.15, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(5, 24)), $mul.ref(0, 1)), .str.143);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(5, 24)), $mul.ref(8, 1)), 1256);
    $M.16 := $store.ref($M.16, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(5, 24)), $mul.ref(16, 1)), proc_show_pdrv_ch0);
    $M.15 := $store.ref($M.15, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(6, 24)), $mul.ref(0, 1)), .str.144);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(6, 24)), $mul.ref(8, 1)), 1264);
    $M.16 := $store.ref($M.16, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(6, 24)), $mul.ref(16, 1)), proc_show_pdrv_ch1);
    $M.15 := $store.ref($M.15, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(7, 24)), $mul.ref(0, 1)), .str.145);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(7, 24)), $mul.ref(8, 1)), 1272);
    $M.16 := $store.ref($M.16, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(7, 24)), $mul.ref(16, 1)), proc_show_pdrv_ch2);
    $M.15 := $store.ref($M.15, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(8, 24)), $mul.ref(0, 1)), .str.146);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(8, 24)), $mul.ref(8, 1)), 1280);
    $M.16 := $store.ref($M.16, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(8, 24)), $mul.ref(16, 1)), proc_show_pdrv_ch3);
    $M.15 := $store.ref($M.15, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(9, 24)), $mul.ref(0, 1)), .str.147);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(9, 24)), $mul.ref(8, 1)), 1288);
    $M.16 := $store.ref($M.16, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(9, 24)), $mul.ref(16, 1)), proc_show_rdrv_10);
    $M.15 := $store.ref($M.15, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(10, 24)), $mul.ref(0, 1)), .str.148);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(10, 24)), $mul.ref(8, 1)), 1296);
    $M.16 := $store.ref($M.16, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(10, 24)), $mul.ref(16, 1)), proc_show_rdrv_20);
    $M.15 := $store.ref($M.15, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(11, 24)), $mul.ref(0, 1)), .str.149);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(11, 24)), $mul.ref(8, 1)), 1304);
    $M.16 := $store.ref($M.16, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(11, 24)), $mul.ref(16, 1)), proc_show_rdrv_30);
    $M.15 := $store.ref($M.15, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(12, 24)), $mul.ref(0, 1)), .str.150);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(12, 24)), $mul.ref(8, 1)), 1312);
    $M.16 := $store.ref($M.16, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(12, 24)), $mul.ref(16, 1)), proc_show_rdrv_40);
    $M.15 := $store.ref($M.15, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(13, 24)), $mul.ref(0, 1)), $0.ref);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(13, 24)), $mul.ref(8, 1)), 0);
    $M.16 := $store.ref($M.16, $add.ref($add.ref($add.ref(mega_proc_files, $mul.ref(0, 336)), $mul.ref(13, 24)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i64($M.1, mcontroller, 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(0, 32)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(0, 32)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(1, 32)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(1, 32)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(2, 32)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(2, 32)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(2, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(3, 32)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(3, 32)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(3, 32)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(3, 32)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(3, 32)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(3, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(4, 32)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(4, 32)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(4, 32)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(4, 32)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(4, 32)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(4, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(5, 32)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(5, 32)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(5, 32)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(5, 32)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(5, 32)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(5, 32)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(5, 32)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(5, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(5, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(6, 32)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(6, 32)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(6, 32)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(6, 32)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(6, 32)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(6, 32)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(6, 32)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(6, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(6, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(7, 32)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(7, 32)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(7, 32)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(7, 32)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(7, 32)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(7, 32)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(7, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(7, 32)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(7, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(7, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(8, 32)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(8, 32)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(8, 32)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(8, 32)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(8, 32)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(8, 32)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(8, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(8, 32)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(8, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(8, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(9, 32)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(9, 32)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(9, 32)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(9, 32)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(9, 32)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(9, 32)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(9, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(9, 32)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(9, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(9, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(10, 32)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(10, 32)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(10, 32)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(10, 32)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(10, 32)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(10, 32)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(10, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(10, 32)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(10, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(10, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(11, 32)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(11, 32)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(11, 32)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(11, 32)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(11, 32)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(11, 32)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(11, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(11, 32)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(11, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(11, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(12, 32)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(12, 32)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(12, 32)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(12, 32)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(12, 32)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(12, 32)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(12, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(12, 32)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(12, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(12, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(13, 32)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(13, 32)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(13, 32)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(13, 32)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(13, 32)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(13, 32)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(13, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(13, 32)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(13, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(13, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(14, 32)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(14, 32)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(14, 32)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(14, 32)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(14, 32)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(14, 32)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(14, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(14, 32)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(14, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(14, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(15, 32)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(15, 32)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(15, 32)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(15, 32)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(15, 32)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(15, 32)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(15, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(15, 32)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(15, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(15, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(16, 32)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(16, 32)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(16, 32)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(16, 32)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(16, 32)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(16, 32)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(16, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(16, 32)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(16, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(16, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(17, 32)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(17, 32)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(17, 32)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(17, 32)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(17, 32)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(17, 32)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(17, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(17, 32)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(17, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(17, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(18, 32)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(18, 32)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(18, 32)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(18, 32)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(18, 32)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(18, 32)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(18, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(18, 32)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(18, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(18, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(19, 32)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(19, 32)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(19, 32)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(19, 32)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(19, 32)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(19, 32)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(19, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(19, 32)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(19, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(19, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(20, 32)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(20, 32)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(20, 32)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(20, 32)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(20, 32)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(20, 32)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(20, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(20, 32)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(20, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(20, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(21, 32)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(21, 32)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(21, 32)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(21, 32)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(21, 32)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(21, 32)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(21, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(21, 32)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(21, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(21, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(22, 32)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(22, 32)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(22, 32)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(22, 32)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(22, 32)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(22, 32)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(22, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(22, 32)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(22, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(22, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(23, 32)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(23, 32)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(23, 32)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(23, 32)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(23, 32)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(23, 32)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(23, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(23, 32)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(23, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(23, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(24, 32)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(24, 32)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(24, 32)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(24, 32)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(24, 32)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(24, 32)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(24, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(24, 32)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(24, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(24, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(25, 32)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(25, 32)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(25, 32)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(25, 32)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(25, 32)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(25, 32)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(25, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(25, 32)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(25, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(25, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(26, 32)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(26, 32)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(26, 32)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(26, 32)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(26, 32)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(26, 32)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(26, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(26, 32)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(26, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(26, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(27, 32)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(27, 32)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(27, 32)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(27, 32)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(27, 32)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(27, 32)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(27, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(27, 32)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(27, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(27, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(28, 32)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(28, 32)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(28, 32)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(28, 32)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(28, 32)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(28, 32)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(28, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(28, 32)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(28, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(28, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(29, 32)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(29, 32)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(29, 32)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(29, 32)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(29, 32)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(29, 32)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(29, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(29, 32)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(29, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(29, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(30, 32)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(30, 32)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(30, 32)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(30, 32)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(30, 32)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(30, 32)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(30, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(30, 32)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(30, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(30, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(31, 32)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(31, 32)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(31, 32)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(31, 32)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(31, 32)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(31, 32)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(31, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(31, 32)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(31, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mcontroller, $mul.ref(0, 1024)), $mul.ref(31, 32)), $mul.ref(24, 1)), 0);
    $M.9 := $store.ref($M.9, hba_soft_state, $0.ref);
    $M.9 := $store.ref($M.9, $add.ref($add.ref(hba_soft_state, $mul.ref(0, 256)), $mul.ref(1, 8)), $0.ref);
    $M.9 := $store.ref($M.9, $add.ref($add.ref(hba_soft_state, $mul.ref(0, 256)), $mul.ref(2, 8)), $0.ref);
    $M.9 := $store.ref($M.9, $add.ref($add.ref(hba_soft_state, $mul.ref(0, 256)), $mul.ref(3, 8)), $0.ref);
    $M.9 := $store.ref($M.9, $add.ref($add.ref(hba_soft_state, $mul.ref(0, 256)), $mul.ref(4, 8)), $0.ref);
    $M.9 := $store.ref($M.9, $add.ref($add.ref(hba_soft_state, $mul.ref(0, 256)), $mul.ref(5, 8)), $0.ref);
    $M.9 := $store.ref($M.9, $add.ref($add.ref(hba_soft_state, $mul.ref(0, 256)), $mul.ref(6, 8)), $0.ref);
    $M.9 := $store.ref($M.9, $add.ref($add.ref(hba_soft_state, $mul.ref(0, 256)), $mul.ref(7, 8)), $0.ref);
    $M.9 := $store.ref($M.9, $add.ref($add.ref(hba_soft_state, $mul.ref(0, 256)), $mul.ref(8, 8)), $0.ref);
    $M.9 := $store.ref($M.9, $add.ref($add.ref(hba_soft_state, $mul.ref(0, 256)), $mul.ref(9, 8)), $0.ref);
    $M.9 := $store.ref($M.9, $add.ref($add.ref(hba_soft_state, $mul.ref(0, 256)), $mul.ref(10, 8)), $0.ref);
    $M.9 := $store.ref($M.9, $add.ref($add.ref(hba_soft_state, $mul.ref(0, 256)), $mul.ref(11, 8)), $0.ref);
    $M.9 := $store.ref($M.9, $add.ref($add.ref(hba_soft_state, $mul.ref(0, 256)), $mul.ref(12, 8)), $0.ref);
    $M.9 := $store.ref($M.9, $add.ref($add.ref(hba_soft_state, $mul.ref(0, 256)), $mul.ref(13, 8)), $0.ref);
    $M.9 := $store.ref($M.9, $add.ref($add.ref(hba_soft_state, $mul.ref(0, 256)), $mul.ref(14, 8)), $0.ref);
    $M.9 := $store.ref($M.9, $add.ref($add.ref(hba_soft_state, $mul.ref(0, 256)), $mul.ref(15, 8)), $0.ref);
    $M.9 := $store.ref($M.9, $add.ref($add.ref(hba_soft_state, $mul.ref(0, 256)), $mul.ref(16, 8)), $0.ref);
    $M.9 := $store.ref($M.9, $add.ref($add.ref(hba_soft_state, $mul.ref(0, 256)), $mul.ref(17, 8)), $0.ref);
    $M.9 := $store.ref($M.9, $add.ref($add.ref(hba_soft_state, $mul.ref(0, 256)), $mul.ref(18, 8)), $0.ref);
    $M.9 := $store.ref($M.9, $add.ref($add.ref(hba_soft_state, $mul.ref(0, 256)), $mul.ref(19, 8)), $0.ref);
    $M.9 := $store.ref($M.9, $add.ref($add.ref(hba_soft_state, $mul.ref(0, 256)), $mul.ref(20, 8)), $0.ref);
    $M.9 := $store.ref($M.9, $add.ref($add.ref(hba_soft_state, $mul.ref(0, 256)), $mul.ref(21, 8)), $0.ref);
    $M.9 := $store.ref($M.9, $add.ref($add.ref(hba_soft_state, $mul.ref(0, 256)), $mul.ref(22, 8)), $0.ref);
    $M.9 := $store.ref($M.9, $add.ref($add.ref(hba_soft_state, $mul.ref(0, 256)), $mul.ref(23, 8)), $0.ref);
    $M.9 := $store.ref($M.9, $add.ref($add.ref(hba_soft_state, $mul.ref(0, 256)), $mul.ref(24, 8)), $0.ref);
    $M.9 := $store.ref($M.9, $add.ref($add.ref(hba_soft_state, $mul.ref(0, 256)), $mul.ref(25, 8)), $0.ref);
    $M.9 := $store.ref($M.9, $add.ref($add.ref(hba_soft_state, $mul.ref(0, 256)), $mul.ref(26, 8)), $0.ref);
    $M.9 := $store.ref($M.9, $add.ref($add.ref(hba_soft_state, $mul.ref(0, 256)), $mul.ref(27, 8)), $0.ref);
    $M.9 := $store.ref($M.9, $add.ref($add.ref(hba_soft_state, $mul.ref(0, 256)), $mul.ref(28, 8)), $0.ref);
    $M.9 := $store.ref($M.9, $add.ref($add.ref(hba_soft_state, $mul.ref(0, 256)), $mul.ref(29, 8)), $0.ref);
    $M.9 := $store.ref($M.9, $add.ref($add.ref(hba_soft_state, $mul.ref(0, 256)), $mul.ref(30, 8)), $0.ref);
    $M.9 := $store.ref($M.9, $add.ref($add.ref(hba_soft_state, $mul.ref(0, 256)), $mul.ref(31, 8)), $0.ref);
    $M.7 := $store.i32($M.7, mega_hbas, 0);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(0, 16)), $mul.ref(8, 1)), $0.ref);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(1, 16)), $mul.ref(0, 1)), 0);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(1, 16)), $mul.ref(8, 1)), $0.ref);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(2, 16)), $mul.ref(0, 1)), 0);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(2, 16)), $mul.ref(8, 1)), $0.ref);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(3, 16)), $mul.ref(0, 1)), 0);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(3, 16)), $mul.ref(8, 1)), $0.ref);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(4, 16)), $mul.ref(0, 1)), 0);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(4, 16)), $mul.ref(8, 1)), $0.ref);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(5, 16)), $mul.ref(0, 1)), 0);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(5, 16)), $mul.ref(8, 1)), $0.ref);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(6, 16)), $mul.ref(0, 1)), 0);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(6, 16)), $mul.ref(8, 1)), $0.ref);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(7, 16)), $mul.ref(0, 1)), 0);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(7, 16)), $mul.ref(8, 1)), $0.ref);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(8, 16)), $mul.ref(0, 1)), 0);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(8, 16)), $mul.ref(8, 1)), $0.ref);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(9, 16)), $mul.ref(0, 1)), 0);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(9, 16)), $mul.ref(8, 1)), $0.ref);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(10, 16)), $mul.ref(0, 1)), 0);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(10, 16)), $mul.ref(8, 1)), $0.ref);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(11, 16)), $mul.ref(0, 1)), 0);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(11, 16)), $mul.ref(8, 1)), $0.ref);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(12, 16)), $mul.ref(0, 1)), 0);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(12, 16)), $mul.ref(8, 1)), $0.ref);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(13, 16)), $mul.ref(0, 1)), 0);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(13, 16)), $mul.ref(8, 1)), $0.ref);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(14, 16)), $mul.ref(0, 1)), 0);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(14, 16)), $mul.ref(8, 1)), $0.ref);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(15, 16)), $mul.ref(0, 1)), 0);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(15, 16)), $mul.ref(8, 1)), $0.ref);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(16, 16)), $mul.ref(0, 1)), 0);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(16, 16)), $mul.ref(8, 1)), $0.ref);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(17, 16)), $mul.ref(0, 1)), 0);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(17, 16)), $mul.ref(8, 1)), $0.ref);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(18, 16)), $mul.ref(0, 1)), 0);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(18, 16)), $mul.ref(8, 1)), $0.ref);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(19, 16)), $mul.ref(0, 1)), 0);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(19, 16)), $mul.ref(8, 1)), $0.ref);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(20, 16)), $mul.ref(0, 1)), 0);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(20, 16)), $mul.ref(8, 1)), $0.ref);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(21, 16)), $mul.ref(0, 1)), 0);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(21, 16)), $mul.ref(8, 1)), $0.ref);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(22, 16)), $mul.ref(0, 1)), 0);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(22, 16)), $mul.ref(8, 1)), $0.ref);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(23, 16)), $mul.ref(0, 1)), 0);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(23, 16)), $mul.ref(8, 1)), $0.ref);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(24, 16)), $mul.ref(0, 1)), 0);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(24, 16)), $mul.ref(8, 1)), $0.ref);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(25, 16)), $mul.ref(0, 1)), 0);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(25, 16)), $mul.ref(8, 1)), $0.ref);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(26, 16)), $mul.ref(0, 1)), 0);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(26, 16)), $mul.ref(8, 1)), $0.ref);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(27, 16)), $mul.ref(0, 1)), 0);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(27, 16)), $mul.ref(8, 1)), $0.ref);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(28, 16)), $mul.ref(0, 1)), 0);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(28, 16)), $mul.ref(8, 1)), $0.ref);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(29, 16)), $mul.ref(0, 1)), 0);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(29, 16)), $mul.ref(8, 1)), $0.ref);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(30, 16)), $mul.ref(0, 1)), 0);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(30, 16)), $mul.ref(8, 1)), $0.ref);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(31, 16)), $mul.ref(0, 1)), 0);
    $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(mega_hbas, $mul.ref(0, 512)), $mul.ref(31, 16)), $mul.ref(8, 1)), $0.ref);
    $M.6 := 0;
    call {:si_unique_call 3143} {:cexpr "hba_count"} boogie_si_record_i32(0);
    $M.1 := $store.ref($M.1, megaraid_template, __this_module);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(8, 1)), .str.115);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(32, 1)), megaraid_info);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(48, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(56, 1)), megaraid_queue);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(64, 1)), megaraid_abort);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(72, 1)), megaraid_reset);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(80, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(88, 1)), megaraid_reset);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(96, 1)), megaraid_reset);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(104, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(112, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(120, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(128, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(136, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(144, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(152, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(160, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(168, 1)), megaraid_biosparam);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(176, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(184, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(192, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(200, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(208, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(216, 1)), .str.4);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(224, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(232, 1)), 126);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(236, 1)), 7);
    $M.1 := $store.i16($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(240, 1)), 64);
    $M.1 := $store.i16($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(242, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(244, 1)), 128);
    $M.1 := $store.i64($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(248, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(256, 1)), 63);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(258, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(260, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(264, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(265, 1)), 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(268, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(272, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(280, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(288, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(288, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.i64($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(304, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(312, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(320, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(megaraid_template, $mul.ref(0, 336)), $mul.ref(328, 1)), 0);
    $M.5 := 128;
    call {:si_unique_call 3144} {:cexpr "max_sectors_per_io"} boogie_si_record_i16(128);
    $M.18 := 0;
    call {:si_unique_call 3145} {:cexpr "trace_level"} boogie_si_record_i32(0);
    $M.1 := $store.ref($M.1, megadev_fops, __this_module);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megadev_fops, $mul.ref(0, 240)), $mul.ref(8, 1)), noop_llseek);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megadev_fops, $mul.ref(0, 240)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megadev_fops, $mul.ref(0, 240)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megadev_fops, $mul.ref(0, 240)), $mul.ref(32, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megadev_fops, $mul.ref(0, 240)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megadev_fops, $mul.ref(0, 240)), $mul.ref(48, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megadev_fops, $mul.ref(0, 240)), $mul.ref(56, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megadev_fops, $mul.ref(0, 240)), $mul.ref(64, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megadev_fops, $mul.ref(0, 240)), $mul.ref(72, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megadev_fops, $mul.ref(0, 240)), $mul.ref(80, 1)), megadev_unlocked_ioctl);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megadev_fops, $mul.ref(0, 240)), $mul.ref(88, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megadev_fops, $mul.ref(0, 240)), $mul.ref(96, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megadev_fops, $mul.ref(0, 240)), $mul.ref(104, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megadev_fops, $mul.ref(0, 240)), $mul.ref(112, 1)), megadev_open);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megadev_fops, $mul.ref(0, 240)), $mul.ref(120, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megadev_fops, $mul.ref(0, 240)), $mul.ref(128, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megadev_fops, $mul.ref(0, 240)), $mul.ref(136, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megadev_fops, $mul.ref(0, 240)), $mul.ref(144, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megadev_fops, $mul.ref(0, 240)), $mul.ref(152, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megadev_fops, $mul.ref(0, 240)), $mul.ref(160, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megadev_fops, $mul.ref(0, 240)), $mul.ref(168, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megadev_fops, $mul.ref(0, 240)), $mul.ref(176, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megadev_fops, $mul.ref(0, 240)), $mul.ref(184, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megadev_fops, $mul.ref(0, 240)), $mul.ref(192, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megadev_fops, $mul.ref(0, 240)), $mul.ref(200, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megadev_fops, $mul.ref(0, 240)), $mul.ref(208, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megadev_fops, $mul.ref(0, 240)), $mul.ref(216, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megadev_fops, $mul.ref(0, 240)), $mul.ref(224, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megadev_fops, $mul.ref(0, 240)), $mul.ref(232, 1)), $0.ref);
    $M.10 := $0.ref;
    $M.22 := 10;
    call {:si_unique_call 3146} {:cexpr "max_mbox_busy_wait"} boogie_si_record_i16(10);
    $M.4 := 63;
    call {:si_unique_call 3147} {:cexpr "max_cmd_per_lun"} boogie_si_record_i32(63);
    $M.1 := $store.i32($M.1, megaraid_pci_tbl, 4126);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(megaraid_pci_tbl, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(4, 1)), 36880);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(megaraid_pci_tbl, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(megaraid_pci_tbl, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(megaraid_pci_tbl, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(megaraid_pci_tbl, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(megaraid_pci_tbl, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(megaraid_pci_tbl, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(0, 1)), 4126);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(megaraid_pci_tbl, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(4, 1)), 36960);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(megaraid_pci_tbl, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(megaraid_pci_tbl, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(megaraid_pci_tbl, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(megaraid_pci_tbl, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(megaraid_pci_tbl, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(megaraid_pci_tbl, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(0, 1)), 32902);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(megaraid_pci_tbl, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(4, 1)), 6496);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(megaraid_pci_tbl, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(megaraid_pci_tbl, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(megaraid_pci_tbl, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(megaraid_pci_tbl, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(megaraid_pci_tbl, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(megaraid_pci_tbl, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(megaraid_pci_tbl, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(megaraid_pci_tbl, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(megaraid_pci_tbl, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(megaraid_pci_tbl, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(megaraid_pci_tbl, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(megaraid_pci_tbl, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.ref($M.1, megaraid_pci_driver, $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(16, 1)), .str.4);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(24, 1)), megaraid_pci_tbl);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(32, 1)), megaraid_probe_one);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(40, 1)), megaraid_remove_one);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(48, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(56, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(64, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(72, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(80, 1)), megaraid_shutdown);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(88, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(96, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(48, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(56, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(64, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(72, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(80, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(88, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(96, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(104, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(112, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(megaraid_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.51 := 0;
    call {:si_unique_call 3148} {:cexpr "major"} boogie_si_record_i32(0);
    $M.162 := $store.i8($M.162, .str.135, 104);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(.str.135, $mul.ref(0, 6)), $mul.ref(1, 1)), 98);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(.str.135, $mul.ref(0, 6)), $mul.ref(2, 1)), 97);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(.str.135, $mul.ref(0, 6)), $mul.ref(3, 1)), 37);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(.str.135, $mul.ref(0, 6)), $mul.ref(4, 1)), 100);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(.str.135, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.163 := $store.i8($M.163, .str.106, 51);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(.str.106, $mul.ref(0, 5)), $mul.ref(1, 1)), 46);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(.str.106, $mul.ref(0, 5)), $mul.ref(2, 1)), 48);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(.str.106, $mul.ref(0, 5)), $mul.ref(3, 1)), 48);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(.str.106, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.164 := $store.i8($M.164, .str.108, 51);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(.str.108, $mul.ref(0, 5)), $mul.ref(1, 1)), 46);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(.str.108, $mul.ref(0, 5)), $mul.ref(2, 1)), 48);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(.str.108, $mul.ref(0, 5)), $mul.ref(3, 1)), 49);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(.str.108, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.165 := $store.i8($M.165, .str.109, 72);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(.str.109, $mul.ref(0, 7)), $mul.ref(1, 1)), 48);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(.str.109, $mul.ref(0, 7)), $mul.ref(2, 1)), 49);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(.str.109, $mul.ref(0, 7)), $mul.ref(3, 1)), 46);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(.str.109, $mul.ref(0, 7)), $mul.ref(4, 1)), 48);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(.str.109, $mul.ref(0, 7)), $mul.ref(5, 1)), 55);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(.str.109, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.166 := $store.i8($M.166, .str.111, 72);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(.str.111, $mul.ref(0, 7)), $mul.ref(1, 1)), 48);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(.str.111, $mul.ref(0, 7)), $mul.ref(2, 1)), 49);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(.str.111, $mul.ref(0, 7)), $mul.ref(3, 1)), 46);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(.str.111, $mul.ref(0, 7)), $mul.ref(4, 1)), 48);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(.str.111, $mul.ref(0, 7)), $mul.ref(5, 1)), 56);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(.str.111, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.167 := $store.i8($M.167, .str.112, 72);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(.str.112, $mul.ref(0, 7)), $mul.ref(1, 1)), 48);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(.str.112, $mul.ref(0, 7)), $mul.ref(2, 1)), 49);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(.str.112, $mul.ref(0, 7)), $mul.ref(3, 1)), 46);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(.str.112, $mul.ref(0, 7)), $mul.ref(4, 1)), 48);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(.str.112, $mul.ref(0, 7)), $mul.ref(5, 1)), 57);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(.str.112, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.168 := $store.i8($M.168, .str, 76);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(1, 1)), 83);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(2, 1)), 73);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(3, 1)), 32);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(4, 1)), 76);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(5, 1)), 111);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(6, 1)), 103);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(7, 1)), 105);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(8, 1)), 99);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(9, 1)), 32);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(10, 1)), 77);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(11, 1)), 101);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(12, 1)), 103);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(13, 1)), 97);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(14, 1)), 82);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(15, 1)), 65);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(16, 1)), 73);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(17, 1)), 68);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(18, 1)), 32);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(19, 1)), 37);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(20, 1)), 115);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(21, 1)), 32);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(22, 1)), 37);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(23, 1)), 100);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(24, 1)), 32);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(25, 1)), 99);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(26, 1)), 111);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(27, 1)), 109);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(28, 1)), 109);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(29, 1)), 97);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(30, 1)), 110);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(31, 1)), 100);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(32, 1)), 115);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(33, 1)), 32);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(34, 1)), 37);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(35, 1)), 100);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(36, 1)), 32);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(37, 1)), 116);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(38, 1)), 97);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(39, 1)), 114);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(40, 1)), 103);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(41, 1)), 115);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(42, 1)), 32);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(43, 1)), 37);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(44, 1)), 100);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(45, 1)), 32);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(46, 1)), 99);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(47, 1)), 104);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(48, 1)), 97);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(49, 1)), 110);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(50, 1)), 115);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(51, 1)), 32);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(52, 1)), 37);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(53, 1)), 100);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(54, 1)), 32);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(55, 1)), 108);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(56, 1)), 117);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(57, 1)), 110);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(58, 1)), 115);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(.str, $mul.ref(0, 60)), $mul.ref(59, 1)), 0);
    $M.169 := $store.i8($M.169, .str.168, 77);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(.str.168, $mul.ref(0, 8)), $mul.ref(1, 1)), 69);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(.str.168, $mul.ref(0, 8)), $mul.ref(2, 1)), 71);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(.str.168, $mul.ref(0, 8)), $mul.ref(3, 1)), 65);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(.str.168, $mul.ref(0, 8)), $mul.ref(4, 1)), 78);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(.str.168, $mul.ref(0, 8)), $mul.ref(5, 1)), 73);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(.str.168, $mul.ref(0, 8)), $mul.ref(6, 1)), 84);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(.str.168, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.170 := $store.i8($M.170, .str.124, 37);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(.str.124, $mul.ref(0, 12)), $mul.ref(1, 1)), 99);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(.str.124, $mul.ref(0, 12)), $mul.ref(2, 1)), 37);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(.str.124, $mul.ref(0, 12)), $mul.ref(3, 1)), 100);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(.str.124, $mul.ref(0, 12)), $mul.ref(4, 1)), 37);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(.str.124, $mul.ref(0, 12)), $mul.ref(5, 1)), 100);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(.str.124, $mul.ref(0, 12)), $mul.ref(6, 1)), 46);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(.str.124, $mul.ref(0, 12)), $mul.ref(7, 1)), 37);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(.str.124, $mul.ref(0, 12)), $mul.ref(8, 1)), 100);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(.str.124, $mul.ref(0, 12)), $mul.ref(9, 1)), 37);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(.str.124, $mul.ref(0, 12)), $mul.ref(10, 1)), 100);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(.str.124, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    call {:si_unique_call 3149} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 779868);

procedure devirtbounce(funcPtr: ref, arg: i32, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: i32, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 780900);

procedure devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.11, $M.6, $CurrAddr, $M.19, $M.20, $M.21, $M.12, assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(megaraid_reset, $p0);
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    $i5 := $eq.ref(megaraid_abort, $p0);
    assume true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3150} $i2 := megaraid_abort($p1);
    goto SeqInstr_1117, SeqInstr_1118;

  SeqInstr_1118:
    assume assertsPassed;
    goto SeqInstr_1119;

  SeqInstr_1119:
    $r := $i2;
    return;

  SeqInstr_1117:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i6 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3151} $i4 := megaraid_reset($p3);
    goto SeqInstr_1120, SeqInstr_1121;

  SeqInstr_1121:
    assume assertsPassed;
    goto SeqInstr_1122;

  SeqInstr_1122:
    $r := $i4;
    return;

  SeqInstr_1120:
    assume !assertsPassed;
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 781932);

procedure devirtbounce.2(funcPtr: ref, arg: i32) returns ($r: i8);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: i32) returns ($r: i8)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 782964);

procedure devirtbounce.3(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 783996);

procedure devirtbounce.4(funcPtr: ref, arg: i8, arg1: i32);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: i8, arg1: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 785028);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i64, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i64, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 786060);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 787092);

procedure devirtbounce.7(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 788124);

procedure devirtbounce.8(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.11, $M.6, $CurrAddr, $M.19, $M.20, $M.21, $M.12, assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(megaraid_reset, $p0);
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    $i5 := $eq.ref(megaraid_abort, $p0);
    assume true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3152} $i2 := megaraid_abort($p1);
    goto SeqInstr_1123, SeqInstr_1124;

  SeqInstr_1124:
    assume assertsPassed;
    goto SeqInstr_1125;

  SeqInstr_1125:
    $r := $i2;
    return;

  SeqInstr_1123:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i6 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3153} $i4 := megaraid_reset($p3);
    goto SeqInstr_1126, SeqInstr_1127;

  SeqInstr_1127:
    assume assertsPassed;
    goto SeqInstr_1128;

  SeqInstr_1128:
    $r := $i4;
    return;

  SeqInstr_1126:
    assume !assertsPassed;
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 789156);

procedure devirtbounce.9(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.11, $M.6, $M.1, $CurrAddr, $M.12, assertsPassed, $M.19, $M.20, $M.21;



implementation devirtbounce.9(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(megaraid_shutdown, $p0);
    assume {:branchcond $i4} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i4 == 1);
    $i3 := $eq.ref(megaraid_remove_one, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3154} megaraid_remove_one($p1);
    goto SeqInstr_1129, SeqInstr_1130;

  SeqInstr_1130:
    assume assertsPassed;
    goto SeqInstr_1131;

  SeqInstr_1131:
    return;

  SeqInstr_1129:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i4 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3155} megaraid_shutdown($p2);
    goto SeqInstr_1132, SeqInstr_1133;

  SeqInstr_1133:
    assume assertsPassed;
    goto SeqInstr_1134;

  SeqInstr_1134:
    return;

  SeqInstr_1132:
    assume !assertsPassed;
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 790188);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 791220);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: i32, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: ref, arg1: i32, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 792252);

procedure devirtbounce.12(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.19, $CurrAddr, $M.11, $M.6, assertsPassed, $M.20, $M.21, $M.12;



implementation devirtbounce.12(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(megaraid_isr_iomapped, $p0);
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    $i5 := $eq.ref(megaraid_isr_memmapped, $p0);
    assume true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    $p1 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3156} $i2 := megaraid_isr_memmapped(arg, $p1);
    goto SeqInstr_1135, SeqInstr_1136;

  SeqInstr_1136:
    assume assertsPassed;
    goto SeqInstr_1137;

  SeqInstr_1137:
    $r := $i2;
    return;

  SeqInstr_1135:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i6 == 1;
    $p3 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3157} $i4 := megaraid_isr_iomapped(arg, $p3);
    goto SeqInstr_1138, SeqInstr_1139;

  SeqInstr_1139:
    assume assertsPassed;
    goto SeqInstr_1140;

  SeqInstr_1140:
    $r := $i4;
    return;

  SeqInstr_1138:
    assume !assertsPassed;
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 793284);

procedure devirtbounce.13(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.19, $CurrAddr, $M.11, $M.6, assertsPassed, $M.20, $M.21, $M.12;



implementation devirtbounce.13(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(megaraid_isr_iomapped, $p0);
    assume {:branchcond $i4} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i4 == 1);
    $i3 := $eq.ref(megaraid_isr_memmapped, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    call {:si_unique_call 3158} $i1 := megaraid_isr_memmapped(arg, arg1);
    goto SeqInstr_1141, SeqInstr_1142;

  SeqInstr_1142:
    assume assertsPassed;
    goto SeqInstr_1143;

  SeqInstr_1143:
    $r := $i1;
    return;

  SeqInstr_1141:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i4 == 1;
    call {:si_unique_call 3159} $i2 := megaraid_isr_iomapped(arg, arg1);
    goto SeqInstr_1144, SeqInstr_1145;

  SeqInstr_1145:
    assume assertsPassed;
    goto SeqInstr_1146;

  SeqInstr_1146:
    $r := $i2;
    return;

  SeqInstr_1144:
    assume !assertsPassed;
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 794316);

procedure devirtbounce.14(funcPtr: ref, arg: ref, arg1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.14(funcPtr: ref, arg: ref, arg1: i64) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 795348);

procedure devirtbounce.15(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.15(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 796380);

procedure devirtbounce.16(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.16(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 797412);

procedure devirtbounce.17(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i32, arg4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.17(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i32, arg4: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.18: ref;

axiom devirtbounce.18 == $sub.ref(0, 798444);

procedure devirtbounce.18(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.18(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref) returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(seq_read, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 3160} $i1 := seq_read(arg, arg1, arg2, arg3);
    $r := $i1;
    return;
}



const devirtbounce.19: ref;

axiom devirtbounce.19 == $sub.ref(0, 799476);

procedure devirtbounce.19(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.19(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.20: ref;

axiom devirtbounce.20 == $sub.ref(0, 800508);

procedure devirtbounce.20(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.11, $M.6, $CurrAddr, $M.19, $M.20, $M.21, $M.12, assertsPassed;



implementation devirtbounce.20(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(megaraid_reset, $p0);
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    $i5 := $eq.ref(megaraid_abort, $p0);
    assume true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3161} $i2 := megaraid_abort($p1);
    goto SeqInstr_1147, SeqInstr_1148;

  SeqInstr_1148:
    assume assertsPassed;
    goto SeqInstr_1149;

  SeqInstr_1149:
    $r := $i2;
    return;

  SeqInstr_1147:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i6 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3162} $i4 := megaraid_reset($p3);
    goto SeqInstr_1150, SeqInstr_1151;

  SeqInstr_1151:
    assume assertsPassed;
    goto SeqInstr_1152;

  SeqInstr_1152:
    $r := $i4;
    return;

  SeqInstr_1150:
    assume !assertsPassed;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

const $u1: ref;

const $u10: ref;

const $u11: ref;

const $u12: ref;

const $u13: ref;

const $u14: ref;

const $u15: ref;

const $u16: ref;

const $u17: ref;

const $u18: ref;

const $u19: ref;

const $u2: ref;

const $u20: ref;

const $u21: ref;

const $u22: ref;

const $u23: ref;

const $u24: ref;

const $u3: ref;

const $u4: i32;

const $u5: ref;

const $u6: ref;

const $u7: ref;

const $u8: ref;

const $u9: ref;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.32, $M.12, $M.59, $M.60, $M.52, $M.61, $M.62, $M.63, $M.64, $M.68, $M.65, $M.66, $M.67, $M.70, $M.30, $M.71, $M.72, $M.73, $M.53, $M.31, $M.74, $M.20, $M.29, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.69, $M.21, $M.19, $M.24, $M.0, $M.58, $M.57, $M.25, $M.11, $M.15, $M.17, $M.16, $M.1, $M.9, $M.7, $M.8, $M.6, $M.5, $M.18, $M.10, $M.22, $M.4, $M.51, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.168, $M.169, $M.170, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 3163} __SMACK_static_init();
    call {:si_unique_call 3164} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.32, $M.12, $M.59, $M.60, $M.52, $M.61, $M.62, $M.63, $M.64, $M.68, $M.65, $M.66, $M.67, $M.70, $M.30, $M.71, $M.72, $M.73, $M.53, $M.31, $M.74, $M.20, $M.29, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.69, $M.21, $M.19, $M.24, $M.0, $M.58, $M.57, $M.25, $M.11, $M.15, $M.17, $M.16, $M.1, $M.9, $M.7, $M.8, $M.6, $M.5, $M.18, $M.10, $M.22, $M.4, $M.51, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.168, $M.169, $M.170, $CurrAddr, $M.26, $M.47, $M.49, $M.55, $M.56, $M.23;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation {:SIextraRecBound 4} megaraid_probe_one_loop_$bb108(in_$p96: ref, in_$i252: i32, in_$i254: i64, in_$p256: ref, in_$i257: i32, in_$i258: i1, in_$i253: i32) returns (out_$i254: i64, out_$p256: ref, out_$i257: i32, out_$i258: i1, out_$i253: i32)
{

  entry:
    out_$i254, out_$p256, out_$i257, out_$i258, out_$i253 := in_$i254, in_$p256, in_$i257, in_$i258, in_$i253;
    goto $bb108, exit;

  $bb108:
    assume {:verifier.code 0} true;
    goto corral_source_split_407;

  $bb110:
    assume out_$i258 == 1;
    assume {:verifier.code 0} true;
    out_$i253 := out_$i257;
    goto $bb110_dummy;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    out_$i258 := $slt.i32(out_$i257, in_$i252);
    goto corral_source_split_413;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    out_$i257 := $add.i32(out_$i253, 1);
    call {:si_unique_call 74} {:cexpr "i"} boogie_si_record_i32(out_$i257);
    goto corral_source_split_412;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p256, 1);
    goto corral_source_split_411;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    out_$p256 := $add.ref($add.ref($add.ref(in_$p96, $mul.ref(0, 1912)), $mul.ref(1432, 1)), $mul.ref(out_$i254, 1));
    goto corral_source_split_410;

  $bb109:
    assume {:verifier.code 0} true;
    out_$i254 := $sext.i32.i64(out_$i253);
    goto corral_source_split_409;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb110_dummy:
    call {:si_unique_call 1} out_$i254, out_$p256, out_$i257, out_$i258, out_$i253 := megaraid_probe_one_loop_$bb108(in_$p96, in_$i252, out_$i254, out_$p256, out_$i257, out_$i258, out_$i253);
    return;

  exit:
    return;
}



procedure megaraid_probe_one_loop_$bb108(in_$p96: ref, in_$i252: i32, in_$i254: i64, in_$p256: ref, in_$i257: i32, in_$i258: i1, in_$i253: i32) returns (out_$i254: i64, out_$p256: ref, out_$i257: i32, out_$i258: i1, out_$i253: i32);
  modifies $M.1;



implementation megaraid_probe_one_loop_$bb103(in_$p96: ref, in_$i244: i32, in_$i247: i64, in_$p249: ref, in_$i250: i32, in_$i251: i1, in_$i246: i32) returns (out_$i247: i64, out_$p249: ref, out_$i250: i32, out_$i251: i1, out_$i246: i32)
{

  entry:
    out_$i247, out_$p249, out_$i250, out_$i251, out_$i246 := in_$i247, in_$p249, in_$i250, in_$i251, in_$i246;
    goto $bb103, exit;

  $bb103:
    assume {:verifier.code 0} true;
    goto corral_source_split_395;

  $bb105:
    assume out_$i251 == 1;
    assume {:verifier.code 0} true;
    out_$i246 := out_$i250;
    goto $bb105_dummy;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    out_$i251 := $slt.i32(out_$i250, in_$i244);
    goto corral_source_split_401;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    out_$i250 := $add.i32(out_$i246, 1);
    call {:si_unique_call 73} {:cexpr "i"} boogie_si_record_i32(out_$i250);
    goto corral_source_split_400;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p249, 0);
    goto corral_source_split_399;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    out_$p249 := $add.ref($add.ref($add.ref(in_$p96, $mul.ref(0, 1912)), $mul.ref(1432, 1)), $mul.ref(out_$i247, 1));
    goto corral_source_split_398;

  $bb104:
    assume {:verifier.code 0} true;
    out_$i247 := $sext.i32.i64(out_$i246);
    goto corral_source_split_397;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb105_dummy:
    call {:si_unique_call 1} out_$i247, out_$p249, out_$i250, out_$i251, out_$i246 := megaraid_probe_one_loop_$bb103(in_$p96, in_$i244, out_$i247, out_$p249, out_$i250, out_$i251, out_$i246);
    return;

  exit:
    return;
}



procedure megaraid_probe_one_loop_$bb103(in_$p96: ref, in_$i244: i32, in_$i247: i64, in_$p249: ref, in_$i250: i32, in_$i251: i1, in_$i246: i32) returns (out_$i247: i64, out_$p249: ref, out_$i250: i32, out_$i251: i1, out_$i246: i32);
  modifies $M.1;



implementation {:SIextraRecBound 12} megaraid_remove_one_loop_$bb6(in_$p1: ref, in_$i51: i32, in_$i52: i1, in_$i53: i64, in_$p54: ref, in_$i55: i32) returns (out_$i51: i32, out_$i52: i1, out_$i53: i64, out_$p54: ref, out_$i55: i32)
{

  entry:
    out_$i51, out_$i52, out_$i53, out_$p54, out_$i55 := in_$i51, in_$i52, in_$i53, in_$p54, in_$i55;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_652;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i55;
    goto corral_source_split_671_dummy;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    out_$i55 := $add.i32(out_$i51, 1);
    call {:si_unique_call 119} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i55);
    goto corral_source_split_671;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, out_$p54, 0);
    goto corral_source_split_670;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p1, $mul.ref(0, 12)), $mul.ref(out_$i53, 1));
    goto corral_source_split_669;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i32.i64(out_$i51);
    goto corral_source_split_668;

  $bb9:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i52 := $uge.i32(out_$i51, 12);
    goto corral_source_split_654;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_671_dummy:
    call {:si_unique_call 1} out_$i51, out_$i52, out_$i53, out_$p54, out_$i55 := megaraid_remove_one_loop_$bb6(in_$p1, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55);
    return;

  exit:
    return;
}



procedure megaraid_remove_one_loop_$bb6(in_$p1: ref, in_$i51: i32, in_$i52: i1, in_$i53: i64, in_$p54: ref, in_$i55: i32) returns (out_$i51: i32, out_$i52: i1, out_$i53: i64, out_$p54: ref, out_$i55: i32);
  modifies $M.11;



implementation {:SIextraRecBound 11} __megaraid_shutdown_loop_$bb4(in_$i23: i32, in_$i24: i1, in_$i22: i32) returns (out_$i23: i32, out_$i24: i1, out_$i22: i32)
{

  entry:
    out_$i23, out_$i24, out_$i22 := in_$i23, in_$i24, in_$i22;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_738;

  $bb10:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$i22 := out_$i23;
    goto $bb10_dummy;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    out_$i24 := $sle.i32(out_$i23, 10);
    goto corral_source_split_745;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i32(out_$i22, 1);
    call {:si_unique_call 140} {:cexpr "i"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_744;

  $bb1010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    goto $bb1010;

  $bb1009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} __const_udelay(4295000);
    goto corral_source_split_2739;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    goto $bb1009;

  $bb1008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} __const_udelay(4295000);
    goto corral_source_split_2737;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    goto $bb1008;

  $bb1007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} __const_udelay(4295000);
    goto corral_source_split_2735;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    goto $bb1007;

  $bb1006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} __const_udelay(4295000);
    goto corral_source_split_2733;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    goto $bb1006;

  $bb1005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} __const_udelay(4295000);
    goto corral_source_split_2731;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    goto $bb1005;

  $bb1004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} __const_udelay(4295000);
    goto corral_source_split_2729;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    goto $bb1004;

  $bb1003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} __const_udelay(4295000);
    goto corral_source_split_2727;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    goto $bb1003;

  $bb1002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} __const_udelay(4295000);
    goto corral_source_split_2725;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    goto $bb1002;

  $bb1001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} __const_udelay(4295000);
    goto corral_source_split_2723;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    goto $bb1001;

  $bb1000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} __const_udelay(4295000);
    goto corral_source_split_2721;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    goto $bb1000;

  $bb999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} __const_udelay(4295000);
    goto corral_source_split_2719;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    goto $bb999;

  $bb998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} __const_udelay(4295000);
    goto corral_source_split_2717;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    goto $bb998;

  $bb997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} __const_udelay(4295000);
    goto corral_source_split_2715;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    goto $bb997;

  $bb996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} __const_udelay(4295000);
    goto corral_source_split_2713;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    goto $bb996;

  $bb995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} __const_udelay(4295000);
    goto corral_source_split_2711;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    goto $bb995;

  $bb994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} __const_udelay(4295000);
    goto corral_source_split_2709;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    goto $bb994;

  $bb993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} __const_udelay(4295000);
    goto corral_source_split_2707;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    goto $bb993;

  $bb992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} __const_udelay(4295000);
    goto corral_source_split_2705;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    goto $bb992;

  $bb991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} __const_udelay(4295000);
    goto corral_source_split_2703;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    goto $bb991;

  $bb990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} __const_udelay(4295000);
    goto corral_source_split_2701;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    goto $bb990;

  $bb989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} __const_udelay(4295000);
    goto corral_source_split_2699;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    goto $bb989;

  $bb988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} __const_udelay(4295000);
    goto corral_source_split_2697;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    goto $bb988;

  $bb987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} __const_udelay(4295000);
    goto corral_source_split_2695;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    goto $bb987;

  $bb986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} __const_udelay(4295000);
    goto corral_source_split_2693;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    goto $bb986;

  $bb985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} __const_udelay(4295000);
    goto corral_source_split_2691;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    goto $bb985;

  $bb984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} __const_udelay(4295000);
    goto corral_source_split_2689;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    goto $bb984;

  $bb983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} __const_udelay(4295000);
    goto corral_source_split_2687;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    goto $bb983;

  $bb982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} __const_udelay(4295000);
    goto corral_source_split_2685;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    goto $bb982;

  $bb981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} __const_udelay(4295000);
    goto corral_source_split_2683;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    goto $bb981;

  $bb980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} __const_udelay(4295000);
    goto corral_source_split_2681;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    goto $bb980;

  $bb979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} __const_udelay(4295000);
    goto corral_source_split_2679;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    goto $bb979;

  $bb978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} __const_udelay(4295000);
    goto corral_source_split_2677;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    goto $bb978;

  $bb977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} __const_udelay(4295000);
    goto corral_source_split_2675;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    goto $bb977;

  $bb976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} __const_udelay(4295000);
    goto corral_source_split_2673;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    goto $bb976;

  $bb975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} __const_udelay(4295000);
    goto corral_source_split_2671;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    goto $bb975;

  $bb974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} __const_udelay(4295000);
    goto corral_source_split_2669;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    goto $bb974;

  $bb973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} __const_udelay(4295000);
    goto corral_source_split_2667;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    goto $bb973;

  $bb972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} __const_udelay(4295000);
    goto corral_source_split_2665;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    goto $bb972;

  $bb971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} __const_udelay(4295000);
    goto corral_source_split_2663;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    goto $bb971;

  $bb970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} __const_udelay(4295000);
    goto corral_source_split_2661;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    goto $bb970;

  $bb969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} __const_udelay(4295000);
    goto corral_source_split_2659;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    goto $bb969;

  $bb968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} __const_udelay(4295000);
    goto corral_source_split_2657;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    goto $bb968;

  $bb967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} __const_udelay(4295000);
    goto corral_source_split_2655;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    goto $bb967;

  $bb966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} __const_udelay(4295000);
    goto corral_source_split_2653;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    goto $bb966;

  $bb965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} __const_udelay(4295000);
    goto corral_source_split_2651;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    goto $bb965;

  $bb964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} __const_udelay(4295000);
    goto corral_source_split_2649;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    goto $bb964;

  $bb963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} __const_udelay(4295000);
    goto corral_source_split_2647;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    goto $bb963;

  $bb962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} __const_udelay(4295000);
    goto corral_source_split_2645;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    goto $bb962;

  $bb961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} __const_udelay(4295000);
    goto corral_source_split_2643;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    goto $bb961;

  $bb960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} __const_udelay(4295000);
    goto corral_source_split_2641;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    goto $bb960;

  $bb959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} __const_udelay(4295000);
    goto corral_source_split_2639;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    goto $bb959;

  $bb958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} __const_udelay(4295000);
    goto corral_source_split_2637;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    goto $bb958;

  $bb957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} __const_udelay(4295000);
    goto corral_source_split_2635;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    goto $bb957;

  $bb956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} __const_udelay(4295000);
    goto corral_source_split_2633;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    goto $bb956;

  $bb955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} __const_udelay(4295000);
    goto corral_source_split_2631;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    goto $bb955;

  $bb954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} __const_udelay(4295000);
    goto corral_source_split_2629;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    goto $bb954;

  $bb953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} __const_udelay(4295000);
    goto corral_source_split_2627;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    goto $bb953;

  $bb952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} __const_udelay(4295000);
    goto corral_source_split_2625;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    goto $bb952;

  $bb951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} __const_udelay(4295000);
    goto corral_source_split_2623;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    goto $bb951;

  $bb950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} __const_udelay(4295000);
    goto corral_source_split_2621;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    goto $bb950;

  $bb949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} __const_udelay(4295000);
    goto corral_source_split_2619;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    goto $bb949;

  $bb948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} __const_udelay(4295000);
    goto corral_source_split_2617;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    goto $bb948;

  $bb947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} __const_udelay(4295000);
    goto corral_source_split_2615;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    goto $bb947;

  $bb946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} __const_udelay(4295000);
    goto corral_source_split_2613;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    goto $bb946;

  $bb945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} __const_udelay(4295000);
    goto corral_source_split_2611;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    goto $bb945;

  $bb944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} __const_udelay(4295000);
    goto corral_source_split_2609;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    goto $bb944;

  $bb943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} __const_udelay(4295000);
    goto corral_source_split_2607;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    goto $bb943;

  $bb942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} __const_udelay(4295000);
    goto corral_source_split_2605;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    goto $bb942;

  $bb941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} __const_udelay(4295000);
    goto corral_source_split_2603;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    goto $bb941;

  $bb940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} __const_udelay(4295000);
    goto corral_source_split_2601;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    goto $bb940;

  $bb939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} __const_udelay(4295000);
    goto corral_source_split_2599;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    goto $bb939;

  $bb938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} __const_udelay(4295000);
    goto corral_source_split_2597;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    goto $bb938;

  $bb937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} __const_udelay(4295000);
    goto corral_source_split_2595;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    goto $bb937;

  $bb936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} __const_udelay(4295000);
    goto corral_source_split_2593;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    goto $bb936;

  $bb935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} __const_udelay(4295000);
    goto corral_source_split_2591;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    goto $bb935;

  $bb934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} __const_udelay(4295000);
    goto corral_source_split_2589;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    goto $bb934;

  $bb933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} __const_udelay(4295000);
    goto corral_source_split_2587;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    goto $bb933;

  $bb932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} __const_udelay(4295000);
    goto corral_source_split_2585;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    goto $bb932;

  $bb931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} __const_udelay(4295000);
    goto corral_source_split_2583;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    goto $bb931;

  $bb930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} __const_udelay(4295000);
    goto corral_source_split_2581;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    goto $bb930;

  $bb929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} __const_udelay(4295000);
    goto corral_source_split_2579;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    goto $bb929;

  $bb928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} __const_udelay(4295000);
    goto corral_source_split_2577;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    goto $bb928;

  $bb927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} __const_udelay(4295000);
    goto corral_source_split_2575;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    goto $bb927;

  $bb926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} __const_udelay(4295000);
    goto corral_source_split_2573;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    goto $bb926;

  $bb925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} __const_udelay(4295000);
    goto corral_source_split_2571;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    goto $bb925;

  $bb924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} __const_udelay(4295000);
    goto corral_source_split_2569;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    goto $bb924;

  $bb923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} __const_udelay(4295000);
    goto corral_source_split_2567;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    goto $bb923;

  $bb922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} __const_udelay(4295000);
    goto corral_source_split_2565;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    goto $bb922;

  $bb921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} __const_udelay(4295000);
    goto corral_source_split_2563;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    goto $bb921;

  $bb920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} __const_udelay(4295000);
    goto corral_source_split_2561;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    goto $bb920;

  $bb919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} __const_udelay(4295000);
    goto corral_source_split_2559;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    goto $bb919;

  $bb918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} __const_udelay(4295000);
    goto corral_source_split_2557;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} __const_udelay(4295000);
    goto corral_source_split_2555;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    goto $bb917;

  $bb916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} __const_udelay(4295000);
    goto corral_source_split_2553;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    goto $bb916;

  $bb915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} __const_udelay(4295000);
    goto corral_source_split_2551;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    goto $bb915;

  $bb914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} __const_udelay(4295000);
    goto corral_source_split_2549;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    goto $bb914;

  $bb913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} __const_udelay(4295000);
    goto corral_source_split_2547;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    goto $bb913;

  $bb912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} __const_udelay(4295000);
    goto corral_source_split_2545;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    goto $bb912;

  $bb911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} __const_udelay(4295000);
    goto corral_source_split_2543;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    goto $bb911;

  $bb910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} __const_udelay(4295000);
    goto corral_source_split_2541;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    goto $bb910;

  $bb909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} __const_udelay(4295000);
    goto corral_source_split_2539;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    goto $bb909;

  $bb908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} __const_udelay(4295000);
    goto corral_source_split_2537;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    goto $bb908;

  $bb907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} __const_udelay(4295000);
    goto corral_source_split_2535;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    goto $bb907;

  $bb906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} __const_udelay(4295000);
    goto corral_source_split_2533;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    goto $bb906;

  $bb905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} __const_udelay(4295000);
    goto corral_source_split_2531;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    goto $bb905;

  $bb904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} __const_udelay(4295000);
    goto corral_source_split_2529;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    goto $bb904;

  $bb903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} __const_udelay(4295000);
    goto corral_source_split_2527;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    goto $bb903;

  $bb902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} __const_udelay(4295000);
    goto corral_source_split_2525;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    goto $bb902;

  $bb901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} __const_udelay(4295000);
    goto corral_source_split_2523;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    goto $bb901;

  $bb900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} __const_udelay(4295000);
    goto corral_source_split_2521;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    goto $bb900;

  $bb899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} __const_udelay(4295000);
    goto corral_source_split_2519;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    goto $bb899;

  $bb898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} __const_udelay(4295000);
    goto corral_source_split_2517;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    goto $bb898;

  $bb897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} __const_udelay(4295000);
    goto corral_source_split_2515;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    goto $bb897;

  $bb896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} __const_udelay(4295000);
    goto corral_source_split_2513;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    goto $bb896;

  $bb895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} __const_udelay(4295000);
    goto corral_source_split_2511;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    goto $bb895;

  $bb894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} __const_udelay(4295000);
    goto corral_source_split_2509;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    goto $bb894;

  $bb893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} __const_udelay(4295000);
    goto corral_source_split_2507;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    goto $bb893;

  $bb892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} __const_udelay(4295000);
    goto corral_source_split_2505;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    goto $bb892;

  $bb891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} __const_udelay(4295000);
    goto corral_source_split_2503;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    goto $bb891;

  $bb890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} __const_udelay(4295000);
    goto corral_source_split_2501;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    goto $bb890;

  $bb889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} __const_udelay(4295000);
    goto corral_source_split_2499;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    goto $bb889;

  $bb888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} __const_udelay(4295000);
    goto corral_source_split_2497;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    goto $bb888;

  $bb887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} __const_udelay(4295000);
    goto corral_source_split_2495;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    goto $bb887;

  $bb886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} __const_udelay(4295000);
    goto corral_source_split_2493;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    goto $bb886;

  $bb885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} __const_udelay(4295000);
    goto corral_source_split_2491;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    goto $bb885;

  $bb884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} __const_udelay(4295000);
    goto corral_source_split_2489;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    goto $bb884;

  $bb883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} __const_udelay(4295000);
    goto corral_source_split_2487;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    goto $bb883;

  $bb882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} __const_udelay(4295000);
    goto corral_source_split_2485;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    goto $bb882;

  $bb881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} __const_udelay(4295000);
    goto corral_source_split_2483;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} __const_udelay(4295000);
    goto corral_source_split_2481;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    goto $bb880;

  $bb879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} __const_udelay(4295000);
    goto corral_source_split_2479;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    goto $bb879;

  $bb878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} __const_udelay(4295000);
    goto corral_source_split_2477;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    goto $bb878;

  $bb877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} __const_udelay(4295000);
    goto corral_source_split_2475;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    goto $bb877;

  $bb876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} __const_udelay(4295000);
    goto corral_source_split_2473;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    goto $bb876;

  $bb875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} __const_udelay(4295000);
    goto corral_source_split_2471;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    goto $bb875;

  $bb874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} __const_udelay(4295000);
    goto corral_source_split_2469;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    goto $bb874;

  $bb873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} __const_udelay(4295000);
    goto corral_source_split_2467;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    goto $bb873;

  $bb872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} __const_udelay(4295000);
    goto corral_source_split_2465;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    goto $bb872;

  $bb871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} __const_udelay(4295000);
    goto corral_source_split_2463;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    goto $bb871;

  $bb870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} __const_udelay(4295000);
    goto corral_source_split_2461;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    goto $bb870;

  $bb869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} __const_udelay(4295000);
    goto corral_source_split_2459;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    goto $bb869;

  $bb868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} __const_udelay(4295000);
    goto corral_source_split_2457;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    goto $bb868;

  $bb867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} __const_udelay(4295000);
    goto corral_source_split_2455;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    goto $bb867;

  $bb866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} __const_udelay(4295000);
    goto corral_source_split_2453;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    goto $bb866;

  $bb865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} __const_udelay(4295000);
    goto corral_source_split_2451;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    goto $bb865;

  $bb864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} __const_udelay(4295000);
    goto corral_source_split_2449;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    goto $bb864;

  $bb863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} __const_udelay(4295000);
    goto corral_source_split_2447;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    goto $bb863;

  $bb862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} __const_udelay(4295000);
    goto corral_source_split_2445;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    goto $bb862;

  $bb861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} __const_udelay(4295000);
    goto corral_source_split_2443;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    goto $bb861;

  $bb860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} __const_udelay(4295000);
    goto corral_source_split_2441;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    goto $bb860;

  $bb859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} __const_udelay(4295000);
    goto corral_source_split_2439;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    goto $bb859;

  $bb858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} __const_udelay(4295000);
    goto corral_source_split_2437;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    goto $bb858;

  $bb857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} __const_udelay(4295000);
    goto corral_source_split_2435;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    goto $bb857;

  $bb856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} __const_udelay(4295000);
    goto corral_source_split_2433;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    goto $bb856;

  $bb855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} __const_udelay(4295000);
    goto corral_source_split_2431;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    goto $bb855;

  $bb854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} __const_udelay(4295000);
    goto corral_source_split_2429;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    goto $bb854;

  $bb853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} __const_udelay(4295000);
    goto corral_source_split_2427;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    goto $bb853;

  $bb852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} __const_udelay(4295000);
    goto corral_source_split_2425;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    goto $bb852;

  $bb851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} __const_udelay(4295000);
    goto corral_source_split_2423;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    goto $bb851;

  $bb850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} __const_udelay(4295000);
    goto corral_source_split_2421;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    goto $bb850;

  $bb849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} __const_udelay(4295000);
    goto corral_source_split_2419;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    goto $bb849;

  $bb848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} __const_udelay(4295000);
    goto corral_source_split_2417;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    goto $bb848;

  $bb847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} __const_udelay(4295000);
    goto corral_source_split_2415;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    goto $bb847;

  $bb846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} __const_udelay(4295000);
    goto corral_source_split_2413;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    goto $bb846;

  $bb845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} __const_udelay(4295000);
    goto corral_source_split_2411;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    goto $bb845;

  $bb844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} __const_udelay(4295000);
    goto corral_source_split_2409;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    goto $bb844;

  $bb843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} __const_udelay(4295000);
    goto corral_source_split_2407;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    goto $bb843;

  $bb842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} __const_udelay(4295000);
    goto corral_source_split_2405;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    goto $bb842;

  $bb841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} __const_udelay(4295000);
    goto corral_source_split_2403;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    goto $bb841;

  $bb840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} __const_udelay(4295000);
    goto corral_source_split_2401;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    goto $bb840;

  $bb839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} __const_udelay(4295000);
    goto corral_source_split_2399;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    goto $bb839;

  $bb838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} __const_udelay(4295000);
    goto corral_source_split_2397;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    goto $bb838;

  $bb837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} __const_udelay(4295000);
    goto corral_source_split_2395;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    goto $bb837;

  $bb836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} __const_udelay(4295000);
    goto corral_source_split_2393;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    goto $bb836;

  $bb835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} __const_udelay(4295000);
    goto corral_source_split_2391;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    goto $bb835;

  $bb834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} __const_udelay(4295000);
    goto corral_source_split_2389;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    goto $bb834;

  $bb833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} __const_udelay(4295000);
    goto corral_source_split_2387;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    goto $bb833;

  $bb832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} __const_udelay(4295000);
    goto corral_source_split_2385;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    goto $bb832;

  $bb831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} __const_udelay(4295000);
    goto corral_source_split_2383;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    goto $bb831;

  $bb830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} __const_udelay(4295000);
    goto corral_source_split_2381;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    goto $bb830;

  $bb829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} __const_udelay(4295000);
    goto corral_source_split_2379;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    goto $bb829;

  $bb828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} __const_udelay(4295000);
    goto corral_source_split_2377;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    goto $bb828;

  $bb827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} __const_udelay(4295000);
    goto corral_source_split_2375;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    goto $bb827;

  $bb826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} __const_udelay(4295000);
    goto corral_source_split_2373;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    goto $bb826;

  $bb825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} __const_udelay(4295000);
    goto corral_source_split_2371;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    goto $bb825;

  $bb824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} __const_udelay(4295000);
    goto corral_source_split_2369;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    goto $bb824;

  $bb823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} __const_udelay(4295000);
    goto corral_source_split_2367;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    goto $bb823;

  $bb822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} __const_udelay(4295000);
    goto corral_source_split_2365;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    goto $bb822;

  $bb821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} __const_udelay(4295000);
    goto corral_source_split_2363;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    goto $bb821;

  $bb820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} __const_udelay(4295000);
    goto corral_source_split_2361;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    goto $bb820;

  $bb819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} __const_udelay(4295000);
    goto corral_source_split_2359;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    goto $bb819;

  $bb818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} __const_udelay(4295000);
    goto corral_source_split_2357;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    goto $bb818;

  $bb817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} __const_udelay(4295000);
    goto corral_source_split_2355;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    goto $bb817;

  $bb816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} __const_udelay(4295000);
    goto corral_source_split_2353;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    goto $bb816;

  $bb815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} __const_udelay(4295000);
    goto corral_source_split_2351;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    goto $bb815;

  $bb814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} __const_udelay(4295000);
    goto corral_source_split_2349;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    goto $bb814;

  $bb813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} __const_udelay(4295000);
    goto corral_source_split_2347;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    goto $bb813;

  $bb812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} __const_udelay(4295000);
    goto corral_source_split_2345;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    goto $bb812;

  $bb811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} __const_udelay(4295000);
    goto corral_source_split_2343;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    goto $bb811;

  $bb810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} __const_udelay(4295000);
    goto corral_source_split_2341;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    goto $bb810;

  $bb809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} __const_udelay(4295000);
    goto corral_source_split_2339;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    goto $bb809;

  $bb808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} __const_udelay(4295000);
    goto corral_source_split_2337;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    goto $bb808;

  $bb807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} __const_udelay(4295000);
    goto corral_source_split_2335;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    goto $bb807;

  $bb806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} __const_udelay(4295000);
    goto corral_source_split_2333;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    goto $bb806;

  $bb805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} __const_udelay(4295000);
    goto corral_source_split_2331;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    goto $bb805;

  $bb804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} __const_udelay(4295000);
    goto corral_source_split_2329;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    goto $bb804;

  $bb803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} __const_udelay(4295000);
    goto corral_source_split_2327;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    goto $bb803;

  $bb802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} __const_udelay(4295000);
    goto corral_source_split_2325;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    goto $bb802;

  $bb801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} __const_udelay(4295000);
    goto corral_source_split_2323;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    goto $bb801;

  $bb800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} __const_udelay(4295000);
    goto corral_source_split_2321;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    goto $bb800;

  $bb799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} __const_udelay(4295000);
    goto corral_source_split_2319;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    goto $bb799;

  $bb798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} __const_udelay(4295000);
    goto corral_source_split_2317;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    goto $bb798;

  $bb797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} __const_udelay(4295000);
    goto corral_source_split_2315;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    goto $bb797;

  $bb796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} __const_udelay(4295000);
    goto corral_source_split_2313;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    goto $bb796;

  $bb795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} __const_udelay(4295000);
    goto corral_source_split_2311;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    goto $bb795;

  $bb794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} __const_udelay(4295000);
    goto corral_source_split_2309;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    goto $bb794;

  $bb793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} __const_udelay(4295000);
    goto corral_source_split_2307;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    goto $bb793;

  $bb792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} __const_udelay(4295000);
    goto corral_source_split_2305;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    goto $bb792;

  $bb791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} __const_udelay(4295000);
    goto corral_source_split_2303;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    goto $bb791;

  $bb790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} __const_udelay(4295000);
    goto corral_source_split_2301;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    goto $bb790;

  $bb789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} __const_udelay(4295000);
    goto corral_source_split_2299;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    goto $bb789;

  $bb788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} __const_udelay(4295000);
    goto corral_source_split_2297;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    goto $bb788;

  $bb787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} __const_udelay(4295000);
    goto corral_source_split_2295;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    goto $bb787;

  $bb786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} __const_udelay(4295000);
    goto corral_source_split_2293;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    goto $bb786;

  $bb785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} __const_udelay(4295000);
    goto corral_source_split_2291;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    goto $bb785;

  $bb784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} __const_udelay(4295000);
    goto corral_source_split_2289;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    goto $bb784;

  $bb783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} __const_udelay(4295000);
    goto corral_source_split_2287;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    goto $bb783;

  $bb782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} __const_udelay(4295000);
    goto corral_source_split_2285;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    goto $bb782;

  $bb781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} __const_udelay(4295000);
    goto corral_source_split_2283;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    goto $bb781;

  $bb780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} __const_udelay(4295000);
    goto corral_source_split_2281;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    goto $bb780;

  $bb779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} __const_udelay(4295000);
    goto corral_source_split_2279;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    goto $bb779;

  $bb778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} __const_udelay(4295000);
    goto corral_source_split_2277;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    goto $bb778;

  $bb777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} __const_udelay(4295000);
    goto corral_source_split_2275;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    goto $bb777;

  $bb776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} __const_udelay(4295000);
    goto corral_source_split_2273;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    goto $bb776;

  $bb775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} __const_udelay(4295000);
    goto corral_source_split_2271;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    goto $bb775;

  $bb774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} __const_udelay(4295000);
    goto corral_source_split_2269;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    goto $bb774;

  $bb773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} __const_udelay(4295000);
    goto corral_source_split_2267;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    goto $bb773;

  $bb772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} __const_udelay(4295000);
    goto corral_source_split_2265;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    goto $bb772;

  $bb771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} __const_udelay(4295000);
    goto corral_source_split_2263;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    goto $bb771;

  $bb770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} __const_udelay(4295000);
    goto corral_source_split_2261;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    goto $bb770;

  $bb769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} __const_udelay(4295000);
    goto corral_source_split_2259;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    goto $bb769;

  $bb768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} __const_udelay(4295000);
    goto corral_source_split_2257;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    goto $bb768;

  $bb767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} __const_udelay(4295000);
    goto corral_source_split_2255;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    goto $bb767;

  $bb766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} __const_udelay(4295000);
    goto corral_source_split_2253;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    goto $bb766;

  $bb765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} __const_udelay(4295000);
    goto corral_source_split_2251;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    goto $bb765;

  $bb764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} __const_udelay(4295000);
    goto corral_source_split_2249;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    goto $bb764;

  $bb763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} __const_udelay(4295000);
    goto corral_source_split_2247;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    goto $bb763;

  $bb762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} __const_udelay(4295000);
    goto corral_source_split_2245;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    goto $bb762;

  $bb761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} __const_udelay(4295000);
    goto corral_source_split_2243;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    goto $bb761;

  $bb760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} __const_udelay(4295000);
    goto corral_source_split_2241;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    goto $bb760;

  $bb759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} __const_udelay(4295000);
    goto corral_source_split_2239;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    goto $bb759;

  $bb758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} __const_udelay(4295000);
    goto corral_source_split_2237;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    goto $bb758;

  $bb757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} __const_udelay(4295000);
    goto corral_source_split_2235;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    goto $bb757;

  $bb756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} __const_udelay(4295000);
    goto corral_source_split_2233;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    goto $bb756;

  $bb755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} __const_udelay(4295000);
    goto corral_source_split_2231;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    goto $bb755;

  $bb754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} __const_udelay(4295000);
    goto corral_source_split_2229;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    goto $bb754;

  $bb753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} __const_udelay(4295000);
    goto corral_source_split_2227;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    goto $bb753;

  $bb752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} __const_udelay(4295000);
    goto corral_source_split_2225;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    goto $bb752;

  $bb751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} __const_udelay(4295000);
    goto corral_source_split_2223;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    goto $bb751;

  $bb750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} __const_udelay(4295000);
    goto corral_source_split_2221;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    goto $bb750;

  $bb749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} __const_udelay(4295000);
    goto corral_source_split_2219;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    goto $bb749;

  $bb748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} __const_udelay(4295000);
    goto corral_source_split_2217;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    goto $bb748;

  $bb747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} __const_udelay(4295000);
    goto corral_source_split_2215;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    goto $bb747;

  $bb746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} __const_udelay(4295000);
    goto corral_source_split_2213;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    goto $bb746;

  $bb745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} __const_udelay(4295000);
    goto corral_source_split_2211;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    goto $bb745;

  $bb744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} __const_udelay(4295000);
    goto corral_source_split_2209;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    goto $bb744;

  $bb743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} __const_udelay(4295000);
    goto corral_source_split_2207;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    goto $bb743;

  $bb742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} __const_udelay(4295000);
    goto corral_source_split_2205;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    goto $bb742;

  $bb741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} __const_udelay(4295000);
    goto corral_source_split_2203;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    goto $bb741;

  $bb740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} __const_udelay(4295000);
    goto corral_source_split_2201;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    goto $bb740;

  $bb739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} __const_udelay(4295000);
    goto corral_source_split_2199;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    goto $bb739;

  $bb738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} __const_udelay(4295000);
    goto corral_source_split_2197;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    goto $bb738;

  $bb737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} __const_udelay(4295000);
    goto corral_source_split_2195;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    goto $bb737;

  $bb736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} __const_udelay(4295000);
    goto corral_source_split_2193;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    goto $bb736;

  $bb735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} __const_udelay(4295000);
    goto corral_source_split_2191;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    goto $bb735;

  $bb734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} __const_udelay(4295000);
    goto corral_source_split_2189;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    goto $bb734;

  $bb733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} __const_udelay(4295000);
    goto corral_source_split_2187;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    goto $bb733;

  $bb732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} __const_udelay(4295000);
    goto corral_source_split_2185;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    goto $bb732;

  $bb731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} __const_udelay(4295000);
    goto corral_source_split_2183;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    goto $bb731;

  $bb730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} __const_udelay(4295000);
    goto corral_source_split_2181;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    goto $bb730;

  $bb729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} __const_udelay(4295000);
    goto corral_source_split_2179;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    goto $bb729;

  $bb728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} __const_udelay(4295000);
    goto corral_source_split_2177;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    goto $bb728;

  $bb727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} __const_udelay(4295000);
    goto corral_source_split_2175;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    goto $bb727;

  $bb726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} __const_udelay(4295000);
    goto corral_source_split_2173;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} __const_udelay(4295000);
    goto corral_source_split_2171;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    goto $bb725;

  $bb724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} __const_udelay(4295000);
    goto corral_source_split_2169;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    goto $bb724;

  $bb723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} __const_udelay(4295000);
    goto corral_source_split_2167;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    goto $bb723;

  $bb722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} __const_udelay(4295000);
    goto corral_source_split_2165;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    goto $bb722;

  $bb721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} __const_udelay(4295000);
    goto corral_source_split_2163;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    goto $bb721;

  $bb720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} __const_udelay(4295000);
    goto corral_source_split_2161;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    goto $bb720;

  $bb719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} __const_udelay(4295000);
    goto corral_source_split_2159;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    goto $bb719;

  $bb718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} __const_udelay(4295000);
    goto corral_source_split_2157;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    goto $bb718;

  $bb717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} __const_udelay(4295000);
    goto corral_source_split_2155;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    goto $bb717;

  $bb716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} __const_udelay(4295000);
    goto corral_source_split_2153;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    goto $bb716;

  $bb715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} __const_udelay(4295000);
    goto corral_source_split_2151;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    goto $bb715;

  $bb714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} __const_udelay(4295000);
    goto corral_source_split_2149;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    goto $bb714;

  $bb713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} __const_udelay(4295000);
    goto corral_source_split_2147;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    goto $bb713;

  $bb712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} __const_udelay(4295000);
    goto corral_source_split_2145;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    goto $bb712;

  $bb711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} __const_udelay(4295000);
    goto corral_source_split_2143;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    goto $bb711;

  $bb710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} __const_udelay(4295000);
    goto corral_source_split_2141;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    goto $bb710;

  $bb709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} __const_udelay(4295000);
    goto corral_source_split_2139;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    goto $bb709;

  $bb708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} __const_udelay(4295000);
    goto corral_source_split_2137;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    goto $bb708;

  $bb707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} __const_udelay(4295000);
    goto corral_source_split_2135;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    goto $bb707;

  $bb706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} __const_udelay(4295000);
    goto corral_source_split_2133;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    goto $bb706;

  $bb705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} __const_udelay(4295000);
    goto corral_source_split_2131;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    goto $bb705;

  $bb704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} __const_udelay(4295000);
    goto corral_source_split_2129;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    goto $bb704;

  $bb703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} __const_udelay(4295000);
    goto corral_source_split_2127;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    goto $bb703;

  $bb702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} __const_udelay(4295000);
    goto corral_source_split_2125;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    goto $bb702;

  $bb701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} __const_udelay(4295000);
    goto corral_source_split_2123;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    goto $bb701;

  $bb700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} __const_udelay(4295000);
    goto corral_source_split_2121;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    goto $bb700;

  $bb699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} __const_udelay(4295000);
    goto corral_source_split_2119;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    goto $bb699;

  $bb698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} __const_udelay(4295000);
    goto corral_source_split_2117;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    goto $bb698;

  $bb697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} __const_udelay(4295000);
    goto corral_source_split_2115;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    goto $bb697;

  $bb696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} __const_udelay(4295000);
    goto corral_source_split_2113;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    goto $bb696;

  $bb695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} __const_udelay(4295000);
    goto corral_source_split_2111;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    goto $bb695;

  $bb694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} __const_udelay(4295000);
    goto corral_source_split_2109;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    goto $bb694;

  $bb693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} __const_udelay(4295000);
    goto corral_source_split_2107;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    goto $bb693;

  $bb692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} __const_udelay(4295000);
    goto corral_source_split_2105;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    goto $bb692;

  $bb691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} __const_udelay(4295000);
    goto corral_source_split_2103;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    goto $bb691;

  $bb690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} __const_udelay(4295000);
    goto corral_source_split_2101;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    goto $bb690;

  $bb689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} __const_udelay(4295000);
    goto corral_source_split_2099;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    goto $bb689;

  $bb688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} __const_udelay(4295000);
    goto corral_source_split_2097;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    goto $bb688;

  $bb687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} __const_udelay(4295000);
    goto corral_source_split_2095;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    goto $bb687;

  $bb686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} __const_udelay(4295000);
    goto corral_source_split_2093;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    goto $bb686;

  $bb685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} __const_udelay(4295000);
    goto corral_source_split_2091;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    goto $bb685;

  $bb684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} __const_udelay(4295000);
    goto corral_source_split_2089;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    goto $bb684;

  $bb683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} __const_udelay(4295000);
    goto corral_source_split_2087;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    goto $bb683;

  $bb682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} __const_udelay(4295000);
    goto corral_source_split_2085;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    goto $bb682;

  $bb681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} __const_udelay(4295000);
    goto corral_source_split_2083;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    goto $bb681;

  $bb680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} __const_udelay(4295000);
    goto corral_source_split_2081;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    goto $bb680;

  $bb679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} __const_udelay(4295000);
    goto corral_source_split_2079;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    goto $bb679;

  $bb678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} __const_udelay(4295000);
    goto corral_source_split_2077;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    goto $bb678;

  $bb677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} __const_udelay(4295000);
    goto corral_source_split_2075;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    goto $bb677;

  $bb676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} __const_udelay(4295000);
    goto corral_source_split_2073;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    goto $bb676;

  $bb675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} __const_udelay(4295000);
    goto corral_source_split_2071;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    goto $bb675;

  $bb674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} __const_udelay(4295000);
    goto corral_source_split_2069;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    goto $bb674;

  $bb673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} __const_udelay(4295000);
    goto corral_source_split_2067;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    goto $bb673;

  $bb672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} __const_udelay(4295000);
    goto corral_source_split_2065;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    goto $bb672;

  $bb671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} __const_udelay(4295000);
    goto corral_source_split_2063;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    goto $bb671;

  $bb670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} __const_udelay(4295000);
    goto corral_source_split_2061;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    goto $bb670;

  $bb669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} __const_udelay(4295000);
    goto corral_source_split_2059;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    goto $bb669;

  $bb668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} __const_udelay(4295000);
    goto corral_source_split_2057;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    goto $bb668;

  $bb667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} __const_udelay(4295000);
    goto corral_source_split_2055;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    goto $bb667;

  $bb666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} __const_udelay(4295000);
    goto corral_source_split_2053;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    goto $bb666;

  $bb665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} __const_udelay(4295000);
    goto corral_source_split_2051;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    goto $bb665;

  $bb664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} __const_udelay(4295000);
    goto corral_source_split_2049;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    goto $bb664;

  $bb663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} __const_udelay(4295000);
    goto corral_source_split_2047;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    goto $bb663;

  $bb662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} __const_udelay(4295000);
    goto corral_source_split_2045;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    goto $bb662;

  $bb661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} __const_udelay(4295000);
    goto corral_source_split_2043;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    goto $bb661;

  $bb660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} __const_udelay(4295000);
    goto corral_source_split_2041;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    goto $bb660;

  $bb659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} __const_udelay(4295000);
    goto corral_source_split_2039;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    goto $bb659;

  $bb658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} __const_udelay(4295000);
    goto corral_source_split_2037;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    goto $bb658;

  $bb657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} __const_udelay(4295000);
    goto corral_source_split_2035;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    goto $bb657;

  $bb656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} __const_udelay(4295000);
    goto corral_source_split_2033;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    goto $bb656;

  $bb655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} __const_udelay(4295000);
    goto corral_source_split_2031;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    goto $bb655;

  $bb654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} __const_udelay(4295000);
    goto corral_source_split_2029;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    goto $bb654;

  $bb653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} __const_udelay(4295000);
    goto corral_source_split_2027;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    goto $bb653;

  $bb652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} __const_udelay(4295000);
    goto corral_source_split_2025;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    goto $bb652;

  $bb651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} __const_udelay(4295000);
    goto corral_source_split_2023;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    goto $bb651;

  $bb650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} __const_udelay(4295000);
    goto corral_source_split_2021;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    goto $bb650;

  $bb649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} __const_udelay(4295000);
    goto corral_source_split_2019;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} __const_udelay(4295000);
    goto corral_source_split_2017;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    goto $bb648;

  $bb647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} __const_udelay(4295000);
    goto corral_source_split_2015;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    goto $bb647;

  $bb646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} __const_udelay(4295000);
    goto corral_source_split_2013;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    goto $bb646;

  $bb645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} __const_udelay(4295000);
    goto corral_source_split_2011;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    goto $bb645;

  $bb644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} __const_udelay(4295000);
    goto corral_source_split_2009;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    goto $bb644;

  $bb643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} __const_udelay(4295000);
    goto corral_source_split_2007;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    goto $bb643;

  $bb642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} __const_udelay(4295000);
    goto corral_source_split_2005;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    goto $bb642;

  $bb641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} __const_udelay(4295000);
    goto corral_source_split_2003;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    goto $bb641;

  $bb640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} __const_udelay(4295000);
    goto corral_source_split_2001;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    goto $bb640;

  $bb639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} __const_udelay(4295000);
    goto corral_source_split_1999;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    goto $bb639;

  $bb638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} __const_udelay(4295000);
    goto corral_source_split_1997;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    goto $bb638;

  $bb637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} __const_udelay(4295000);
    goto corral_source_split_1995;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    goto $bb637;

  $bb636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} __const_udelay(4295000);
    goto corral_source_split_1993;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    goto $bb636;

  $bb635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} __const_udelay(4295000);
    goto corral_source_split_1991;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    goto $bb635;

  $bb634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} __const_udelay(4295000);
    goto corral_source_split_1989;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    goto $bb634;

  $bb633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} __const_udelay(4295000);
    goto corral_source_split_1987;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    goto $bb633;

  $bb632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} __const_udelay(4295000);
    goto corral_source_split_1985;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    goto $bb632;

  $bb631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} __const_udelay(4295000);
    goto corral_source_split_1983;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    goto $bb631;

  $bb630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} __const_udelay(4295000);
    goto corral_source_split_1981;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    goto $bb630;

  $bb629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} __const_udelay(4295000);
    goto corral_source_split_1979;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    goto $bb629;

  $bb628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} __const_udelay(4295000);
    goto corral_source_split_1977;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    goto $bb628;

  $bb627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} __const_udelay(4295000);
    goto corral_source_split_1975;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    goto $bb627;

  $bb626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} __const_udelay(4295000);
    goto corral_source_split_1973;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    goto $bb626;

  $bb625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} __const_udelay(4295000);
    goto corral_source_split_1971;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    goto $bb625;

  $bb624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} __const_udelay(4295000);
    goto corral_source_split_1969;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    goto $bb624;

  $bb623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} __const_udelay(4295000);
    goto corral_source_split_1967;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    goto $bb623;

  $bb622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} __const_udelay(4295000);
    goto corral_source_split_1965;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    goto $bb622;

  $bb621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} __const_udelay(4295000);
    goto corral_source_split_1963;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    goto $bb621;

  $bb620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} __const_udelay(4295000);
    goto corral_source_split_1961;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    goto $bb620;

  $bb619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} __const_udelay(4295000);
    goto corral_source_split_1959;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    goto $bb619;

  $bb618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} __const_udelay(4295000);
    goto corral_source_split_1957;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    goto $bb618;

  $bb617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} __const_udelay(4295000);
    goto corral_source_split_1955;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    goto $bb617;

  $bb616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} __const_udelay(4295000);
    goto corral_source_split_1953;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    goto $bb616;

  $bb615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} __const_udelay(4295000);
    goto corral_source_split_1951;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    goto $bb615;

  $bb614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} __const_udelay(4295000);
    goto corral_source_split_1949;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    goto $bb614;

  $bb613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} __const_udelay(4295000);
    goto corral_source_split_1947;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    goto $bb613;

  $bb612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} __const_udelay(4295000);
    goto corral_source_split_1945;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    goto $bb612;

  $bb611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} __const_udelay(4295000);
    goto corral_source_split_1943;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    goto $bb611;

  $bb610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} __const_udelay(4295000);
    goto corral_source_split_1941;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    goto $bb610;

  $bb609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} __const_udelay(4295000);
    goto corral_source_split_1939;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    goto $bb609;

  $bb608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} __const_udelay(4295000);
    goto corral_source_split_1937;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    goto $bb608;

  $bb607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} __const_udelay(4295000);
    goto corral_source_split_1935;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    goto $bb607;

  $bb606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} __const_udelay(4295000);
    goto corral_source_split_1933;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    goto $bb606;

  $bb605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} __const_udelay(4295000);
    goto corral_source_split_1931;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    goto $bb605;

  $bb604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} __const_udelay(4295000);
    goto corral_source_split_1929;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    goto $bb604;

  $bb603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} __const_udelay(4295000);
    goto corral_source_split_1927;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    goto $bb603;

  $bb602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} __const_udelay(4295000);
    goto corral_source_split_1925;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    goto $bb602;

  $bb601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} __const_udelay(4295000);
    goto corral_source_split_1923;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    goto $bb601;

  $bb600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} __const_udelay(4295000);
    goto corral_source_split_1921;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    goto $bb600;

  $bb599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} __const_udelay(4295000);
    goto corral_source_split_1919;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    goto $bb599;

  $bb598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} __const_udelay(4295000);
    goto corral_source_split_1917;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    goto $bb598;

  $bb597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} __const_udelay(4295000);
    goto corral_source_split_1915;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    goto $bb597;

  $bb596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} __const_udelay(4295000);
    goto corral_source_split_1913;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    goto $bb596;

  $bb595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} __const_udelay(4295000);
    goto corral_source_split_1911;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    goto $bb595;

  $bb594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} __const_udelay(4295000);
    goto corral_source_split_1909;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    goto $bb594;

  $bb593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} __const_udelay(4295000);
    goto corral_source_split_1907;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    goto $bb593;

  $bb592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} __const_udelay(4295000);
    goto corral_source_split_1905;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    goto $bb592;

  $bb591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} __const_udelay(4295000);
    goto corral_source_split_1903;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    goto $bb591;

  $bb590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} __const_udelay(4295000);
    goto corral_source_split_1901;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    goto $bb590;

  $bb589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} __const_udelay(4295000);
    goto corral_source_split_1899;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    goto $bb589;

  $bb588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} __const_udelay(4295000);
    goto corral_source_split_1897;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    goto $bb588;

  $bb587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} __const_udelay(4295000);
    goto corral_source_split_1895;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    goto $bb587;

  $bb586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} __const_udelay(4295000);
    goto corral_source_split_1893;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} __const_udelay(4295000);
    goto corral_source_split_1891;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    goto $bb585;

  $bb584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} __const_udelay(4295000);
    goto corral_source_split_1889;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    goto $bb584;

  $bb583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} __const_udelay(4295000);
    goto corral_source_split_1887;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    goto $bb583;

  $bb582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} __const_udelay(4295000);
    goto corral_source_split_1885;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    goto $bb582;

  $bb581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} __const_udelay(4295000);
    goto corral_source_split_1883;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    goto $bb581;

  $bb580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} __const_udelay(4295000);
    goto corral_source_split_1881;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    goto $bb580;

  $bb579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} __const_udelay(4295000);
    goto corral_source_split_1879;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    goto $bb579;

  $bb578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} __const_udelay(4295000);
    goto corral_source_split_1877;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    goto $bb578;

  $bb577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} __const_udelay(4295000);
    goto corral_source_split_1875;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    goto $bb577;

  $bb576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} __const_udelay(4295000);
    goto corral_source_split_1873;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    goto $bb576;

  $bb575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} __const_udelay(4295000);
    goto corral_source_split_1871;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    goto $bb575;

  $bb574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} __const_udelay(4295000);
    goto corral_source_split_1869;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    goto $bb574;

  $bb573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} __const_udelay(4295000);
    goto corral_source_split_1867;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    goto $bb573;

  $bb572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} __const_udelay(4295000);
    goto corral_source_split_1865;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} __const_udelay(4295000);
    goto corral_source_split_1863;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    goto $bb571;

  $bb570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} __const_udelay(4295000);
    goto corral_source_split_1861;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    goto $bb570;

  $bb569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} __const_udelay(4295000);
    goto corral_source_split_1859;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    goto $bb569;

  $bb568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} __const_udelay(4295000);
    goto corral_source_split_1857;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    goto $bb568;

  $bb567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} __const_udelay(4295000);
    goto corral_source_split_1855;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    goto $bb567;

  $bb566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} __const_udelay(4295000);
    goto corral_source_split_1853;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    goto $bb566;

  $bb565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} __const_udelay(4295000);
    goto corral_source_split_1851;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    goto $bb565;

  $bb564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} __const_udelay(4295000);
    goto corral_source_split_1849;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    goto $bb564;

  $bb563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} __const_udelay(4295000);
    goto corral_source_split_1847;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    goto $bb563;

  $bb562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} __const_udelay(4295000);
    goto corral_source_split_1845;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    goto $bb562;

  $bb561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} __const_udelay(4295000);
    goto corral_source_split_1843;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    goto $bb561;

  $bb560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} __const_udelay(4295000);
    goto corral_source_split_1841;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    goto $bb560;

  $bb559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} __const_udelay(4295000);
    goto corral_source_split_1839;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    goto $bb559;

  $bb558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} __const_udelay(4295000);
    goto corral_source_split_1837;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    goto $bb558;

  $bb557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} __const_udelay(4295000);
    goto corral_source_split_1835;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    goto $bb557;

  $bb556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} __const_udelay(4295000);
    goto corral_source_split_1833;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    goto $bb556;

  $bb555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} __const_udelay(4295000);
    goto corral_source_split_1831;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    goto $bb555;

  $bb554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} __const_udelay(4295000);
    goto corral_source_split_1829;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    goto $bb554;

  $bb553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} __const_udelay(4295000);
    goto corral_source_split_1827;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    goto $bb553;

  $bb552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} __const_udelay(4295000);
    goto corral_source_split_1825;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    goto $bb552;

  $bb551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} __const_udelay(4295000);
    goto corral_source_split_1823;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    goto $bb551;

  $bb550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} __const_udelay(4295000);
    goto corral_source_split_1821;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    goto $bb550;

  $bb549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} __const_udelay(4295000);
    goto corral_source_split_1819;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    goto $bb549;

  $bb548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} __const_udelay(4295000);
    goto corral_source_split_1817;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    goto $bb548;

  $bb547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} __const_udelay(4295000);
    goto corral_source_split_1815;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    goto $bb547;

  $bb546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} __const_udelay(4295000);
    goto corral_source_split_1813;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    goto $bb546;

  $bb545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} __const_udelay(4295000);
    goto corral_source_split_1811;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    goto $bb545;

  $bb544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} __const_udelay(4295000);
    goto corral_source_split_1809;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    goto $bb544;

  $bb543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} __const_udelay(4295000);
    goto corral_source_split_1807;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} __const_udelay(4295000);
    goto corral_source_split_1805;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} __const_udelay(4295000);
    goto corral_source_split_1803;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    goto $bb541;

  $bb540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} __const_udelay(4295000);
    goto corral_source_split_1801;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    goto $bb540;

  $bb539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} __const_udelay(4295000);
    goto corral_source_split_1799;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    goto $bb539;

  $bb538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} __const_udelay(4295000);
    goto corral_source_split_1797;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    goto $bb538;

  $bb537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} __const_udelay(4295000);
    goto corral_source_split_1795;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    goto $bb537;

  $bb536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} __const_udelay(4295000);
    goto corral_source_split_1793;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} __const_udelay(4295000);
    goto corral_source_split_1791;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    goto $bb535;

  $bb534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} __const_udelay(4295000);
    goto corral_source_split_1789;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    goto $bb534;

  $bb533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} __const_udelay(4295000);
    goto corral_source_split_1787;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    goto $bb533;

  $bb532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} __const_udelay(4295000);
    goto corral_source_split_1785;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    goto $bb532;

  $bb531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} __const_udelay(4295000);
    goto corral_source_split_1783;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    goto $bb531;

  $bb530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} __const_udelay(4295000);
    goto corral_source_split_1781;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    goto $bb530;

  $bb529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} __const_udelay(4295000);
    goto corral_source_split_1779;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    goto $bb529;

  $bb528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} __const_udelay(4295000);
    goto corral_source_split_1777;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    goto $bb528;

  $bb527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} __const_udelay(4295000);
    goto corral_source_split_1775;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    goto $bb527;

  $bb526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} __const_udelay(4295000);
    goto corral_source_split_1773;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    goto $bb526;

  $bb525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} __const_udelay(4295000);
    goto corral_source_split_1771;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    goto $bb525;

  $bb524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} __const_udelay(4295000);
    goto corral_source_split_1769;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    goto $bb524;

  $bb523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} __const_udelay(4295000);
    goto corral_source_split_1767;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    goto $bb523;

  $bb522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} __const_udelay(4295000);
    goto corral_source_split_1765;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    goto $bb522;

  $bb521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} __const_udelay(4295000);
    goto corral_source_split_1763;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    goto $bb521;

  $bb520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} __const_udelay(4295000);
    goto corral_source_split_1761;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    goto $bb520;

  $bb519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} __const_udelay(4295000);
    goto corral_source_split_1759;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    goto $bb519;

  $bb518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} __const_udelay(4295000);
    goto corral_source_split_1757;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    goto $bb518;

  $bb517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} __const_udelay(4295000);
    goto corral_source_split_1755;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    goto $bb517;

  $bb516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} __const_udelay(4295000);
    goto corral_source_split_1753;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    goto $bb516;

  $bb515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} __const_udelay(4295000);
    goto corral_source_split_1751;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    goto $bb515;

  $bb514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} __const_udelay(4295000);
    goto corral_source_split_1749;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    goto $bb514;

  $bb513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} __const_udelay(4295000);
    goto corral_source_split_1747;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    goto $bb513;

  $bb512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} __const_udelay(4295000);
    goto corral_source_split_1745;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    goto $bb512;

  $bb511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} __const_udelay(4295000);
    goto corral_source_split_1743;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    goto $bb511;

  $bb510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} __const_udelay(4295000);
    goto corral_source_split_1741;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    goto $bb510;

  $bb509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} __const_udelay(4295000);
    goto corral_source_split_1739;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    goto $bb509;

  $bb508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} __const_udelay(4295000);
    goto corral_source_split_1737;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    goto $bb508;

  $bb507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} __const_udelay(4295000);
    goto corral_source_split_1735;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    goto $bb507;

  $bb506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} __const_udelay(4295000);
    goto corral_source_split_1733;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} __const_udelay(4295000);
    goto corral_source_split_1731;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} __const_udelay(4295000);
    goto corral_source_split_1729;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    goto $bb504;

  $bb503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} __const_udelay(4295000);
    goto corral_source_split_1727;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} __const_udelay(4295000);
    goto corral_source_split_1725;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    goto $bb502;

  $bb501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} __const_udelay(4295000);
    goto corral_source_split_1723;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    goto $bb501;

  $bb500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} __const_udelay(4295000);
    goto corral_source_split_1721;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    goto $bb500;

  $bb499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} __const_udelay(4295000);
    goto corral_source_split_1719;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    goto $bb499;

  $bb498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} __const_udelay(4295000);
    goto corral_source_split_1717;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    goto $bb498;

  $bb497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} __const_udelay(4295000);
    goto corral_source_split_1715;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    goto $bb497;

  $bb496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} __const_udelay(4295000);
    goto corral_source_split_1713;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    goto $bb496;

  $bb495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} __const_udelay(4295000);
    goto corral_source_split_1711;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    goto $bb495;

  $bb494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} __const_udelay(4295000);
    goto corral_source_split_1709;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} __const_udelay(4295000);
    goto corral_source_split_1707;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    goto $bb493;

  $bb492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} __const_udelay(4295000);
    goto corral_source_split_1705;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    goto $bb492;

  $bb491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} __const_udelay(4295000);
    goto corral_source_split_1703;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    goto $bb491;

  $bb490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} __const_udelay(4295000);
    goto corral_source_split_1701;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    goto $bb490;

  $bb489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} __const_udelay(4295000);
    goto corral_source_split_1699;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    goto $bb489;

  $bb488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} __const_udelay(4295000);
    goto corral_source_split_1697;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    goto $bb488;

  $bb487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} __const_udelay(4295000);
    goto corral_source_split_1695;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    goto $bb487;

  $bb486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} __const_udelay(4295000);
    goto corral_source_split_1693;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    goto $bb486;

  $bb485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} __const_udelay(4295000);
    goto corral_source_split_1691;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    goto $bb485;

  $bb484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} __const_udelay(4295000);
    goto corral_source_split_1689;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    goto $bb484;

  $bb483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} __const_udelay(4295000);
    goto corral_source_split_1687;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    goto $bb483;

  $bb482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} __const_udelay(4295000);
    goto corral_source_split_1685;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    goto $bb482;

  $bb481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} __const_udelay(4295000);
    goto corral_source_split_1683;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    goto $bb481;

  $bb480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} __const_udelay(4295000);
    goto corral_source_split_1681;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    goto $bb480;

  $bb479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} __const_udelay(4295000);
    goto corral_source_split_1679;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    goto $bb479;

  $bb478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} __const_udelay(4295000);
    goto corral_source_split_1677;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} __const_udelay(4295000);
    goto corral_source_split_1675;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    goto $bb477;

  $bb476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} __const_udelay(4295000);
    goto corral_source_split_1673;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    goto $bb476;

  $bb475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} __const_udelay(4295000);
    goto corral_source_split_1671;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} __const_udelay(4295000);
    goto corral_source_split_1669;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    goto $bb474;

  $bb473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} __const_udelay(4295000);
    goto corral_source_split_1667;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    goto $bb473;

  $bb472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} __const_udelay(4295000);
    goto corral_source_split_1665;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    goto $bb472;

  $bb471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} __const_udelay(4295000);
    goto corral_source_split_1663;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    goto $bb471;

  $bb470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} __const_udelay(4295000);
    goto corral_source_split_1661;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} __const_udelay(4295000);
    goto corral_source_split_1659;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    goto $bb469;

  $bb468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} __const_udelay(4295000);
    goto corral_source_split_1657;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    goto $bb468;

  $bb467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} __const_udelay(4295000);
    goto corral_source_split_1655;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} __const_udelay(4295000);
    goto corral_source_split_1653;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} __const_udelay(4295000);
    goto corral_source_split_1651;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    goto $bb465;

  $bb464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} __const_udelay(4295000);
    goto corral_source_split_1649;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    goto $bb464;

  $bb463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} __const_udelay(4295000);
    goto corral_source_split_1647;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    goto $bb463;

  $bb462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} __const_udelay(4295000);
    goto corral_source_split_1645;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    goto $bb462;

  $bb461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} __const_udelay(4295000);
    goto corral_source_split_1643;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    goto $bb461;

  $bb460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} __const_udelay(4295000);
    goto corral_source_split_1641;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    goto $bb460;

  $bb459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} __const_udelay(4295000);
    goto corral_source_split_1639;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    goto $bb459;

  $bb458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} __const_udelay(4295000);
    goto corral_source_split_1637;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    goto $bb458;

  $bb457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} __const_udelay(4295000);
    goto corral_source_split_1635;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    goto $bb457;

  $bb456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} __const_udelay(4295000);
    goto corral_source_split_1633;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    goto $bb456;

  $bb455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} __const_udelay(4295000);
    goto corral_source_split_1631;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} __const_udelay(4295000);
    goto corral_source_split_1629;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} __const_udelay(4295000);
    goto corral_source_split_1627;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    goto $bb453;

  $bb452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} __const_udelay(4295000);
    goto corral_source_split_1625;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    goto $bb452;

  $bb451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} __const_udelay(4295000);
    goto corral_source_split_1623;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    goto $bb451;

  $bb450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} __const_udelay(4295000);
    goto corral_source_split_1621;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} __const_udelay(4295000);
    goto corral_source_split_1619;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    goto $bb449;

  $bb448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} __const_udelay(4295000);
    goto corral_source_split_1617;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    goto $bb448;

  $bb447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} __const_udelay(4295000);
    goto corral_source_split_1615;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} __const_udelay(4295000);
    goto corral_source_split_1613;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    goto $bb446;

  $bb445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} __const_udelay(4295000);
    goto corral_source_split_1611;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    goto $bb445;

  $bb444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} __const_udelay(4295000);
    goto corral_source_split_1609;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    goto $bb444;

  $bb443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} __const_udelay(4295000);
    goto corral_source_split_1607;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} __const_udelay(4295000);
    goto corral_source_split_1605;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} __const_udelay(4295000);
    goto corral_source_split_1603;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} __const_udelay(4295000);
    goto corral_source_split_1601;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    goto $bb440;

  $bb439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} __const_udelay(4295000);
    goto corral_source_split_1599;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} __const_udelay(4295000);
    goto corral_source_split_1597;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    goto $bb438;

  $bb437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} __const_udelay(4295000);
    goto corral_source_split_1595;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} __const_udelay(4295000);
    goto corral_source_split_1593;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} __const_udelay(4295000);
    goto corral_source_split_1591;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} __const_udelay(4295000);
    goto corral_source_split_1589;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} __const_udelay(4295000);
    goto corral_source_split_1587;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    goto $bb433;

  $bb432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} __const_udelay(4295000);
    goto corral_source_split_1585;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    goto $bb432;

  $bb431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} __const_udelay(4295000);
    goto corral_source_split_1583;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} __const_udelay(4295000);
    goto corral_source_split_1581;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} __const_udelay(4295000);
    goto corral_source_split_1579;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    goto $bb429;

  $bb428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} __const_udelay(4295000);
    goto corral_source_split_1577;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    goto $bb428;

  $bb427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} __const_udelay(4295000);
    goto corral_source_split_1575;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    goto $bb427;

  $bb426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} __const_udelay(4295000);
    goto corral_source_split_1573;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    goto $bb426;

  $bb425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} __const_udelay(4295000);
    goto corral_source_split_1571;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} __const_udelay(4295000);
    goto corral_source_split_1569;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    goto $bb424;

  $bb423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} __const_udelay(4295000);
    goto corral_source_split_1567;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    goto $bb423;

  $bb422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} __const_udelay(4295000);
    goto corral_source_split_1565;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} __const_udelay(4295000);
    goto corral_source_split_1563;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    goto $bb421;

  $bb420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} __const_udelay(4295000);
    goto corral_source_split_1561;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    goto $bb420;

  $bb419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} __const_udelay(4295000);
    goto corral_source_split_1559;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} __const_udelay(4295000);
    goto corral_source_split_1557;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} __const_udelay(4295000);
    goto corral_source_split_1555;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} __const_udelay(4295000);
    goto corral_source_split_1553;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} __const_udelay(4295000);
    goto corral_source_split_1551;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} __const_udelay(4295000);
    goto corral_source_split_1549;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} __const_udelay(4295000);
    goto corral_source_split_1547;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} __const_udelay(4295000);
    goto corral_source_split_1545;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} __const_udelay(4295000);
    goto corral_source_split_1543;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} __const_udelay(4295000);
    goto corral_source_split_1541;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    goto $bb410;

  $bb409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} __const_udelay(4295000);
    goto corral_source_split_1539;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    goto $bb409;

  $bb408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} __const_udelay(4295000);
    goto corral_source_split_1537;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    goto $bb408;

  $bb407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} __const_udelay(4295000);
    goto corral_source_split_1535;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    goto $bb407;

  $bb406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} __const_udelay(4295000);
    goto corral_source_split_1533;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} __const_udelay(4295000);
    goto corral_source_split_1531;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} __const_udelay(4295000);
    goto corral_source_split_1529;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} __const_udelay(4295000);
    goto corral_source_split_1527;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} __const_udelay(4295000);
    goto corral_source_split_1525;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} __const_udelay(4295000);
    goto corral_source_split_1523;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    goto $bb401;

  $bb400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} __const_udelay(4295000);
    goto corral_source_split_1521;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} __const_udelay(4295000);
    goto corral_source_split_1519;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} __const_udelay(4295000);
    goto corral_source_split_1517;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} __const_udelay(4295000);
    goto corral_source_split_1515;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} __const_udelay(4295000);
    goto corral_source_split_1513;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} __const_udelay(4295000);
    goto corral_source_split_1511;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} __const_udelay(4295000);
    goto corral_source_split_1509;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} __const_udelay(4295000);
    goto corral_source_split_1507;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} __const_udelay(4295000);
    goto corral_source_split_1505;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} __const_udelay(4295000);
    goto corral_source_split_1503;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} __const_udelay(4295000);
    goto corral_source_split_1501;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} __const_udelay(4295000);
    goto corral_source_split_1499;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} __const_udelay(4295000);
    goto corral_source_split_1497;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} __const_udelay(4295000);
    goto corral_source_split_1495;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} __const_udelay(4295000);
    goto corral_source_split_1493;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} __const_udelay(4295000);
    goto corral_source_split_1491;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} __const_udelay(4295000);
    goto corral_source_split_1489;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} __const_udelay(4295000);
    goto corral_source_split_1487;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} __const_udelay(4295000);
    goto corral_source_split_1485;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} __const_udelay(4295000);
    goto corral_source_split_1483;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} __const_udelay(4295000);
    goto corral_source_split_1481;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} __const_udelay(4295000);
    goto corral_source_split_1479;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} __const_udelay(4295000);
    goto corral_source_split_1477;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} __const_udelay(4295000);
    goto corral_source_split_1475;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} __const_udelay(4295000);
    goto corral_source_split_1473;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} __const_udelay(4295000);
    goto corral_source_split_1471;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} __const_udelay(4295000);
    goto corral_source_split_1469;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} __const_udelay(4295000);
    goto corral_source_split_1467;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} __const_udelay(4295000);
    goto corral_source_split_1465;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} __const_udelay(4295000);
    goto corral_source_split_1463;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} __const_udelay(4295000);
    goto corral_source_split_1461;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} __const_udelay(4295000);
    goto corral_source_split_1459;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} __const_udelay(4295000);
    goto corral_source_split_1457;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} __const_udelay(4295000);
    goto corral_source_split_1455;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} __const_udelay(4295000);
    goto corral_source_split_1453;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} __const_udelay(4295000);
    goto corral_source_split_1451;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} __const_udelay(4295000);
    goto corral_source_split_1449;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} __const_udelay(4295000);
    goto corral_source_split_1447;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} __const_udelay(4295000);
    goto corral_source_split_1445;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} __const_udelay(4295000);
    goto corral_source_split_1443;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} __const_udelay(4295000);
    goto corral_source_split_1441;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} __const_udelay(4295000);
    goto corral_source_split_1439;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    goto $bb359;

  $bb358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} __const_udelay(4295000);
    goto corral_source_split_1437;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} __const_udelay(4295000);
    goto corral_source_split_1435;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} __const_udelay(4295000);
    goto corral_source_split_1433;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} __const_udelay(4295000);
    goto corral_source_split_1431;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} __const_udelay(4295000);
    goto corral_source_split_1429;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} __const_udelay(4295000);
    goto corral_source_split_1427;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} __const_udelay(4295000);
    goto corral_source_split_1425;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} __const_udelay(4295000);
    goto corral_source_split_1423;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} __const_udelay(4295000);
    goto corral_source_split_1421;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} __const_udelay(4295000);
    goto corral_source_split_1419;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} __const_udelay(4295000);
    goto corral_source_split_1417;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} __const_udelay(4295000);
    goto corral_source_split_1415;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} __const_udelay(4295000);
    goto corral_source_split_1413;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} __const_udelay(4295000);
    goto corral_source_split_1411;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} __const_udelay(4295000);
    goto corral_source_split_1409;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} __const_udelay(4295000);
    goto corral_source_split_1407;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} __const_udelay(4295000);
    goto corral_source_split_1405;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} __const_udelay(4295000);
    goto corral_source_split_1403;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} __const_udelay(4295000);
    goto corral_source_split_1401;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} __const_udelay(4295000);
    goto corral_source_split_1399;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} __const_udelay(4295000);
    goto corral_source_split_1397;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} __const_udelay(4295000);
    goto corral_source_split_1395;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} __const_udelay(4295000);
    goto corral_source_split_1393;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} __const_udelay(4295000);
    goto corral_source_split_1391;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} __const_udelay(4295000);
    goto corral_source_split_1389;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} __const_udelay(4295000);
    goto corral_source_split_1387;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} __const_udelay(4295000);
    goto corral_source_split_1385;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} __const_udelay(4295000);
    goto corral_source_split_1383;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} __const_udelay(4295000);
    goto corral_source_split_1381;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} __const_udelay(4295000);
    goto corral_source_split_1379;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} __const_udelay(4295000);
    goto corral_source_split_1377;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} __const_udelay(4295000);
    goto corral_source_split_1375;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} __const_udelay(4295000);
    goto corral_source_split_1373;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} __const_udelay(4295000);
    goto corral_source_split_1371;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} __const_udelay(4295000);
    goto corral_source_split_1369;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} __const_udelay(4295000);
    goto corral_source_split_1367;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} __const_udelay(4295000);
    goto corral_source_split_1365;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} __const_udelay(4295000);
    goto corral_source_split_1363;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} __const_udelay(4295000);
    goto corral_source_split_1361;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} __const_udelay(4295000);
    goto corral_source_split_1359;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} __const_udelay(4295000);
    goto corral_source_split_1357;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} __const_udelay(4295000);
    goto corral_source_split_1355;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} __const_udelay(4295000);
    goto corral_source_split_1353;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} __const_udelay(4295000);
    goto corral_source_split_1351;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} __const_udelay(4295000);
    goto corral_source_split_1349;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} __const_udelay(4295000);
    goto corral_source_split_1347;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} __const_udelay(4295000);
    goto corral_source_split_1345;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} __const_udelay(4295000);
    goto corral_source_split_1343;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} __const_udelay(4295000);
    goto corral_source_split_1341;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} __const_udelay(4295000);
    goto corral_source_split_1339;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} __const_udelay(4295000);
    goto corral_source_split_1337;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} __const_udelay(4295000);
    goto corral_source_split_1335;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} __const_udelay(4295000);
    goto corral_source_split_1333;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} __const_udelay(4295000);
    goto corral_source_split_1331;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} __const_udelay(4295000);
    goto corral_source_split_1329;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} __const_udelay(4295000);
    goto corral_source_split_1327;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} __const_udelay(4295000);
    goto corral_source_split_1325;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} __const_udelay(4295000);
    goto corral_source_split_1323;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} __const_udelay(4295000);
    goto corral_source_split_1321;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} __const_udelay(4295000);
    goto corral_source_split_1319;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} __const_udelay(4295000);
    goto corral_source_split_1317;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} __const_udelay(4295000);
    goto corral_source_split_1315;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} __const_udelay(4295000);
    goto corral_source_split_1313;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} __const_udelay(4295000);
    goto corral_source_split_1311;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} __const_udelay(4295000);
    goto corral_source_split_1309;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} __const_udelay(4295000);
    goto corral_source_split_1307;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} __const_udelay(4295000);
    goto corral_source_split_1305;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} __const_udelay(4295000);
    goto corral_source_split_1303;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} __const_udelay(4295000);
    goto corral_source_split_1301;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} __const_udelay(4295000);
    goto corral_source_split_1299;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} __const_udelay(4295000);
    goto corral_source_split_1297;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} __const_udelay(4295000);
    goto corral_source_split_1295;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} __const_udelay(4295000);
    goto corral_source_split_1293;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} __const_udelay(4295000);
    goto corral_source_split_1291;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} __const_udelay(4295000);
    goto corral_source_split_1289;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} __const_udelay(4295000);
    goto corral_source_split_1287;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} __const_udelay(4295000);
    goto corral_source_split_1285;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} __const_udelay(4295000);
    goto corral_source_split_1283;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} __const_udelay(4295000);
    goto corral_source_split_1281;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} __const_udelay(4295000);
    goto corral_source_split_1279;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} __const_udelay(4295000);
    goto corral_source_split_1277;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} __const_udelay(4295000);
    goto corral_source_split_1275;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} __const_udelay(4295000);
    goto corral_source_split_1273;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} __const_udelay(4295000);
    goto corral_source_split_1271;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} __const_udelay(4295000);
    goto corral_source_split_1269;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} __const_udelay(4295000);
    goto corral_source_split_1267;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} __const_udelay(4295000);
    goto corral_source_split_1265;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} __const_udelay(4295000);
    goto corral_source_split_1263;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} __const_udelay(4295000);
    goto corral_source_split_1261;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} __const_udelay(4295000);
    goto corral_source_split_1259;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} __const_udelay(4295000);
    goto corral_source_split_1257;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} __const_udelay(4295000);
    goto corral_source_split_1255;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} __const_udelay(4295000);
    goto corral_source_split_1253;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} __const_udelay(4295000);
    goto corral_source_split_1251;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} __const_udelay(4295000);
    goto corral_source_split_1249;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} __const_udelay(4295000);
    goto corral_source_split_1247;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} __const_udelay(4295000);
    goto corral_source_split_1245;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} __const_udelay(4295000);
    goto corral_source_split_1243;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} __const_udelay(4295000);
    goto corral_source_split_1241;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} __const_udelay(4295000);
    goto corral_source_split_1239;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} __const_udelay(4295000);
    goto corral_source_split_1237;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} __const_udelay(4295000);
    goto corral_source_split_1235;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} __const_udelay(4295000);
    goto corral_source_split_1233;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} __const_udelay(4295000);
    goto corral_source_split_1231;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} __const_udelay(4295000);
    goto corral_source_split_1229;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} __const_udelay(4295000);
    goto corral_source_split_1227;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} __const_udelay(4295000);
    goto corral_source_split_1225;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} __const_udelay(4295000);
    goto corral_source_split_1223;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} __const_udelay(4295000);
    goto corral_source_split_1221;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} __const_udelay(4295000);
    goto corral_source_split_1219;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} __const_udelay(4295000);
    goto corral_source_split_1217;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} __const_udelay(4295000);
    goto corral_source_split_1215;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} __const_udelay(4295000);
    goto corral_source_split_1213;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} __const_udelay(4295000);
    goto corral_source_split_1211;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} __const_udelay(4295000);
    goto corral_source_split_1209;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} __const_udelay(4295000);
    goto corral_source_split_1207;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} __const_udelay(4295000);
    goto corral_source_split_1205;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} __const_udelay(4295000);
    goto corral_source_split_1203;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} __const_udelay(4295000);
    goto corral_source_split_1201;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} __const_udelay(4295000);
    goto corral_source_split_1199;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} __const_udelay(4295000);
    goto corral_source_split_1197;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} __const_udelay(4295000);
    goto corral_source_split_1195;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} __const_udelay(4295000);
    goto corral_source_split_1193;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} __const_udelay(4295000);
    goto corral_source_split_1191;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} __const_udelay(4295000);
    goto corral_source_split_1189;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} __const_udelay(4295000);
    goto corral_source_split_1187;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} __const_udelay(4295000);
    goto corral_source_split_1185;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} __const_udelay(4295000);
    goto corral_source_split_1183;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} __const_udelay(4295000);
    goto corral_source_split_1181;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} __const_udelay(4295000);
    goto corral_source_split_1179;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} __const_udelay(4295000);
    goto corral_source_split_1177;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} __const_udelay(4295000);
    goto corral_source_split_1175;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} __const_udelay(4295000);
    goto corral_source_split_1173;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} __const_udelay(4295000);
    goto corral_source_split_1171;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} __const_udelay(4295000);
    goto corral_source_split_1169;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} __const_udelay(4295000);
    goto corral_source_split_1167;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} __const_udelay(4295000);
    goto corral_source_split_1165;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} __const_udelay(4295000);
    goto corral_source_split_1163;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} __const_udelay(4295000);
    goto corral_source_split_1161;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} __const_udelay(4295000);
    goto corral_source_split_1159;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} __const_udelay(4295000);
    goto corral_source_split_1157;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} __const_udelay(4295000);
    goto corral_source_split_1155;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} __const_udelay(4295000);
    goto corral_source_split_1153;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} __const_udelay(4295000);
    goto corral_source_split_1151;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} __const_udelay(4295000);
    goto corral_source_split_1149;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} __const_udelay(4295000);
    goto corral_source_split_1147;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} __const_udelay(4295000);
    goto corral_source_split_1145;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} __const_udelay(4295000);
    goto corral_source_split_1143;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} __const_udelay(4295000);
    goto corral_source_split_1141;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} __const_udelay(4295000);
    goto corral_source_split_1139;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} __const_udelay(4295000);
    goto corral_source_split_1137;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} __const_udelay(4295000);
    goto corral_source_split_1135;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} __const_udelay(4295000);
    goto corral_source_split_1133;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} __const_udelay(4295000);
    goto corral_source_split_1131;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} __const_udelay(4295000);
    goto corral_source_split_1129;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} __const_udelay(4295000);
    goto corral_source_split_1127;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} __const_udelay(4295000);
    goto corral_source_split_1125;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} __const_udelay(4295000);
    goto corral_source_split_1123;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} __const_udelay(4295000);
    goto corral_source_split_1121;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} __const_udelay(4295000);
    goto corral_source_split_1119;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} __const_udelay(4295000);
    goto corral_source_split_1117;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} __const_udelay(4295000);
    goto corral_source_split_1115;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} __const_udelay(4295000);
    goto corral_source_split_1113;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} __const_udelay(4295000);
    goto corral_source_split_1111;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} __const_udelay(4295000);
    goto corral_source_split_1109;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} __const_udelay(4295000);
    goto corral_source_split_1107;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} __const_udelay(4295000);
    goto corral_source_split_1105;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} __const_udelay(4295000);
    goto corral_source_split_1103;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} __const_udelay(4295000);
    goto corral_source_split_1101;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} __const_udelay(4295000);
    goto corral_source_split_1099;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} __const_udelay(4295000);
    goto corral_source_split_1097;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} __const_udelay(4295000);
    goto corral_source_split_1095;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} __const_udelay(4295000);
    goto corral_source_split_1093;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} __const_udelay(4295000);
    goto corral_source_split_1091;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} __const_udelay(4295000);
    goto corral_source_split_1089;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} __const_udelay(4295000);
    goto corral_source_split_1087;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} __const_udelay(4295000);
    goto corral_source_split_1085;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} __const_udelay(4295000);
    goto corral_source_split_1083;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} __const_udelay(4295000);
    goto corral_source_split_1081;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} __const_udelay(4295000);
    goto corral_source_split_1079;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} __const_udelay(4295000);
    goto corral_source_split_1077;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} __const_udelay(4295000);
    goto corral_source_split_1075;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} __const_udelay(4295000);
    goto corral_source_split_1073;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} __const_udelay(4295000);
    goto corral_source_split_1071;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} __const_udelay(4295000);
    goto corral_source_split_1069;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} __const_udelay(4295000);
    goto corral_source_split_1067;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} __const_udelay(4295000);
    goto corral_source_split_1065;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} __const_udelay(4295000);
    goto corral_source_split_1063;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} __const_udelay(4295000);
    goto corral_source_split_1061;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} __const_udelay(4295000);
    goto corral_source_split_1059;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} __const_udelay(4295000);
    goto corral_source_split_1057;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} __const_udelay(4295000);
    goto corral_source_split_1055;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} __const_udelay(4295000);
    goto corral_source_split_1053;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} __const_udelay(4295000);
    goto corral_source_split_1051;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} __const_udelay(4295000);
    goto corral_source_split_1049;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} __const_udelay(4295000);
    goto corral_source_split_1047;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} __const_udelay(4295000);
    goto corral_source_split_1045;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} __const_udelay(4295000);
    goto corral_source_split_1043;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} __const_udelay(4295000);
    goto corral_source_split_1041;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} __const_udelay(4295000);
    goto corral_source_split_1039;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} __const_udelay(4295000);
    goto corral_source_split_1037;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} __const_udelay(4295000);
    goto corral_source_split_1035;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} __const_udelay(4295000);
    goto corral_source_split_1033;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} __const_udelay(4295000);
    goto corral_source_split_1031;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} __const_udelay(4295000);
    goto corral_source_split_1029;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} __const_udelay(4295000);
    goto corral_source_split_1027;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} __const_udelay(4295000);
    goto corral_source_split_1025;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} __const_udelay(4295000);
    goto corral_source_split_1023;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} __const_udelay(4295000);
    goto corral_source_split_1021;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} __const_udelay(4295000);
    goto corral_source_split_1019;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} __const_udelay(4295000);
    goto corral_source_split_1017;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} __const_udelay(4295000);
    goto corral_source_split_1015;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} __const_udelay(4295000);
    goto corral_source_split_1013;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} __const_udelay(4295000);
    goto corral_source_split_1011;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} __const_udelay(4295000);
    goto corral_source_split_1009;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} __const_udelay(4295000);
    goto corral_source_split_1007;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} __const_udelay(4295000);
    goto corral_source_split_1005;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} __const_udelay(4295000);
    goto corral_source_split_1003;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} __const_udelay(4295000);
    goto corral_source_split_1001;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} __const_udelay(4295000);
    goto corral_source_split_999;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} __const_udelay(4295000);
    goto corral_source_split_997;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} __const_udelay(4295000);
    goto corral_source_split_995;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} __const_udelay(4295000);
    goto corral_source_split_993;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} __const_udelay(4295000);
    goto corral_source_split_991;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} __const_udelay(4295000);
    goto corral_source_split_989;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} __const_udelay(4295000);
    goto corral_source_split_987;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} __const_udelay(4295000);
    goto corral_source_split_985;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} __const_udelay(4295000);
    goto corral_source_split_983;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} __const_udelay(4295000);
    goto corral_source_split_981;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} __const_udelay(4295000);
    goto corral_source_split_979;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} __const_udelay(4295000);
    goto corral_source_split_977;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} __const_udelay(4295000);
    goto corral_source_split_975;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} __const_udelay(4295000);
    goto corral_source_split_973;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} __const_udelay(4295000);
    goto corral_source_split_971;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} __const_udelay(4295000);
    goto corral_source_split_969;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} __const_udelay(4295000);
    goto corral_source_split_967;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} __const_udelay(4295000);
    goto corral_source_split_965;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} __const_udelay(4295000);
    goto corral_source_split_963;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} __const_udelay(4295000);
    goto corral_source_split_961;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} __const_udelay(4295000);
    goto corral_source_split_959;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} __const_udelay(4295000);
    goto corral_source_split_957;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} __const_udelay(4295000);
    goto corral_source_split_955;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} __const_udelay(4295000);
    goto corral_source_split_953;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} __const_udelay(4295000);
    goto corral_source_split_951;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} __const_udelay(4295000);
    goto corral_source_split_949;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} __const_udelay(4295000);
    goto corral_source_split_947;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} __const_udelay(4295000);
    goto corral_source_split_945;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} __const_udelay(4295000);
    goto corral_source_split_943;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} __const_udelay(4295000);
    goto corral_source_split_941;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} __const_udelay(4295000);
    goto corral_source_split_939;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} __const_udelay(4295000);
    goto corral_source_split_937;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} __const_udelay(4295000);
    goto corral_source_split_935;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} __const_udelay(4295000);
    goto corral_source_split_933;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} __const_udelay(4295000);
    goto corral_source_split_931;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} __const_udelay(4295000);
    goto corral_source_split_929;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} __const_udelay(4295000);
    goto corral_source_split_927;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} __const_udelay(4295000);
    goto corral_source_split_925;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} __const_udelay(4295000);
    goto corral_source_split_923;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} __const_udelay(4295000);
    goto corral_source_split_921;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} __const_udelay(4295000);
    goto corral_source_split_919;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} __const_udelay(4295000);
    goto corral_source_split_917;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} __const_udelay(4295000);
    goto corral_source_split_915;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} __const_udelay(4295000);
    goto corral_source_split_913;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} __const_udelay(4295000);
    goto corral_source_split_911;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb94:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} __const_udelay(4295000);
    goto corral_source_split_909;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} __const_udelay(4295000);
    goto corral_source_split_907;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} __const_udelay(4295000);
    goto corral_source_split_905;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} __const_udelay(4295000);
    goto corral_source_split_903;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} __const_udelay(4295000);
    goto corral_source_split_901;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} __const_udelay(4295000);
    goto corral_source_split_899;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} __const_udelay(4295000);
    goto corral_source_split_897;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} __const_udelay(4295000);
    goto corral_source_split_895;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} __const_udelay(4295000);
    goto corral_source_split_893;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} __const_udelay(4295000);
    goto corral_source_split_891;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} __const_udelay(4295000);
    goto corral_source_split_889;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} __const_udelay(4295000);
    goto corral_source_split_887;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} __const_udelay(4295000);
    goto corral_source_split_885;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} __const_udelay(4295000);
    goto corral_source_split_883;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} __const_udelay(4295000);
    goto corral_source_split_881;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} __const_udelay(4295000);
    goto corral_source_split_879;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} __const_udelay(4295000);
    goto corral_source_split_877;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} __const_udelay(4295000);
    goto corral_source_split_875;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} __const_udelay(4295000);
    goto corral_source_split_873;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} __const_udelay(4295000);
    goto corral_source_split_871;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} __const_udelay(4295000);
    goto corral_source_split_869;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} __const_udelay(4295000);
    goto corral_source_split_867;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} __const_udelay(4295000);
    goto corral_source_split_865;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} __const_udelay(4295000);
    goto corral_source_split_863;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} __const_udelay(4295000);
    goto corral_source_split_861;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} __const_udelay(4295000);
    goto corral_source_split_859;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} __const_udelay(4295000);
    goto corral_source_split_857;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} __const_udelay(4295000);
    goto corral_source_split_855;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} __const_udelay(4295000);
    goto corral_source_split_853;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} __const_udelay(4295000);
    goto corral_source_split_851;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} __const_udelay(4295000);
    goto corral_source_split_849;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} __const_udelay(4295000);
    goto corral_source_split_847;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} __const_udelay(4295000);
    goto corral_source_split_845;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} __const_udelay(4295000);
    goto corral_source_split_843;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} __const_udelay(4295000);
    goto corral_source_split_841;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} __const_udelay(4295000);
    goto corral_source_split_839;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} __const_udelay(4295000);
    goto corral_source_split_837;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} __const_udelay(4295000);
    goto corral_source_split_835;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} __const_udelay(4295000);
    goto corral_source_split_833;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} __const_udelay(4295000);
    goto corral_source_split_831;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} __const_udelay(4295000);
    goto corral_source_split_829;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} __const_udelay(4295000);
    goto corral_source_split_827;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} __const_udelay(4295000);
    goto corral_source_split_825;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} __const_udelay(4295000);
    goto corral_source_split_823;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} __const_udelay(4295000);
    goto corral_source_split_821;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} __const_udelay(4295000);
    goto corral_source_split_819;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} __const_udelay(4295000);
    goto corral_source_split_817;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} __const_udelay(4295000);
    goto corral_source_split_815;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} __const_udelay(4295000);
    goto corral_source_split_813;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} __const_udelay(4295000);
    goto corral_source_split_811;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} __const_udelay(4295000);
    goto corral_source_split_809;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} __const_udelay(4295000);
    goto corral_source_split_807;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} __const_udelay(4295000);
    goto corral_source_split_805;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} __const_udelay(4295000);
    goto corral_source_split_803;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} __const_udelay(4295000);
    goto corral_source_split_801;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} __const_udelay(4295000);
    goto corral_source_split_799;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} __const_udelay(4295000);
    goto corral_source_split_797;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} __const_udelay(4295000);
    goto corral_source_split_795;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} __const_udelay(4295000);
    goto corral_source_split_793;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} __const_udelay(4295000);
    goto corral_source_split_791;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} __const_udelay(4295000);
    goto corral_source_split_789;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} __const_udelay(4295000);
    goto corral_source_split_787;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} __const_udelay(4295000);
    goto corral_source_split_785;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} __const_udelay(4295000);
    goto corral_source_split_783;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} __const_udelay(4295000);
    goto corral_source_split_781;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} __const_udelay(4295000);
    goto corral_source_split_779;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} __const_udelay(4295000);
    goto corral_source_split_777;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} __const_udelay(4295000);
    goto corral_source_split_775;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} __const_udelay(4295000);
    goto corral_source_split_773;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} __const_udelay(4295000);
    goto corral_source_split_771;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} __const_udelay(4295000);
    goto corral_source_split_769;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} __const_udelay(4295000);
    goto corral_source_split_767;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} __const_udelay(4295000);
    goto corral_source_split_765;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} __const_udelay(4295000);
    goto corral_source_split_763;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} __const_udelay(4295000);
    goto corral_source_split_761;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} __const_udelay(4295000);
    goto corral_source_split_759;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} __const_udelay(4295000);
    goto corral_source_split_757;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} __const_udelay(4295000);
    goto corral_source_split_755;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} __const_udelay(4295000);
    goto corral_source_split_753;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} __const_udelay(4295000);
    goto corral_source_split_751;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} __const_udelay(4295000);
    goto corral_source_split_749;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} __const_udelay(4295000);
    goto corral_source_split_747;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} __const_udelay(4295000);
    goto corral_source_split_742;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} __const_udelay(4295000);
    goto corral_source_split_740;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i23, out_$i24, out_$i22 := __megaraid_shutdown_loop_$bb4(out_$i23, out_$i24, out_$i22);
    return;

  exit:
    return;
}



procedure __megaraid_shutdown_loop_$bb4(in_$i23: i32, in_$i24: i1, in_$i22: i32) returns (out_$i23: i32, out_$i24: i1, out_$i22: i32);



implementation issue_scb_block_loop_$bb54(in_$p105: ref, in_$i114: i64, in_$i115: i32, in_$i116: i32, in_$i117: i8, in_$i118: i32, in_$i119: i32, in_$i120: i1, in_$i121: i8) returns (out_$i114: i64, out_$i115: i32, out_$i116: i32, out_$i117: i8, out_$i118: i32, out_$i119: i32, out_$i120: i1, out_$i121: i8)
{

  entry:
    out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121 := in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121;
    goto $bb54, exit;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb56:
    assume {:verifier.code 0} true;
    assume out_$i120 == 1;
    goto $bb56_dummy;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    out_$i121 := out_$i117;
    assume true;
    goto $bb56;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    out_$i120 := $eq.i32(out_$i119, 0);
    goto corral_source_split_2921;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    out_$i119 := $and.i32(out_$i118, 64);
    goto corral_source_split_2920;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    out_$i118 := $zext.i8.i32(out_$i117);
    goto corral_source_split_2919;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} out_$i117 := inb_p(out_$i116);
    call {:si_unique_call 1164} {:cexpr "byte"} boogie_si_record_i8(out_$i117);
    goto corral_source_split_2918;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    out_$i116 := $add.i32(out_$i115, 10);
    goto corral_source_split_2917;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    out_$i115 := $trunc.i64.i32(out_$i114);
    goto corral_source_split_2916;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    out_$i114 := $load.i64($M.1, in_$p105);
    goto corral_source_split_2915;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} cpu_relax();
    goto corral_source_split_2914;

  $bb56_dummy:
    call {:si_unique_call 1} out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121 := issue_scb_block_loop_$bb54(in_$p105, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121);
    return;

  exit:
    return;
}



procedure issue_scb_block_loop_$bb54(in_$p105: ref, in_$i114: i64, in_$i115: i32, in_$i116: i32, in_$i117: i8, in_$i118: i32, in_$i119: i32, in_$i120: i1, in_$i121: i8) returns (out_$i114: i64, out_$i115: i32, out_$i116: i32, out_$i117: i8, out_$i118: i32, out_$i119: i32, out_$i120: i1, out_$i121: i8);



implementation issue_scb_block_loop_$bb45(in_$p87: ref, in_$p93: ref, in_$p94: ref, in_$i95: i32, in_$i96: i32, in_$i97: i1) returns (out_$p93: ref, out_$p94: ref, out_$i95: i32, out_$i96: i32, out_$i97: i1)
{

  entry:
    out_$p93, out_$p94, out_$i95, out_$i96, out_$i97 := in_$p93, in_$p94, in_$i95, in_$i96, in_$i97;
    goto $bb45, exit;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb47:
    assume {:verifier.code 0} true;
    assume out_$i97 == 1;
    goto $bb47_dummy;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    out_$i97 := $ne.i32(out_$i96, 0);
    goto corral_source_split_2904;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    out_$i96 := $and.i32(out_$i95, 2);
    goto corral_source_split_2903;

  SeqInstr_51:
    call {:si_unique_call 1161} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i95);
    goto corral_source_split_2902;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} out_$i95 := readl(out_$p94);
    goto SeqInstr_50;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref(out_$p93, $mul.ref(32, 1));
    goto corral_source_split_2901;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    out_$p93 := $load.ref($M.1, in_$p87);
    goto corral_source_split_2900;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} cpu_relax();
    goto corral_source_split_2899;

  $bb47_dummy:
    call {:si_unique_call 1} out_$p93, out_$p94, out_$i95, out_$i96, out_$i97 := issue_scb_block_loop_$bb45(in_$p87, out_$p93, out_$p94, out_$i95, out_$i96, out_$i97);
    return;

  exit:
    return;
}



procedure issue_scb_block_loop_$bb45(in_$p87: ref, in_$p93: ref, in_$p94: ref, in_$i95: i32, in_$i96: i32, in_$i97: i1) returns (out_$p93: ref, out_$p94: ref, out_$i95: i32, out_$i96: i32, out_$i97: i1);
  modifies $M.1, $M.11, $M.6, $CurrAddr, $M.19, $M.20, $M.21, $M.12, assertsPassed;



implementation issue_scb_block_loop_$bb37(in_$p69: ref, in_$i73: i8, in_$i74: i32, in_$i75: i1) returns (out_$i73: i8, out_$i74: i32, out_$i75: i1)
{

  entry:
    out_$i73, out_$i74, out_$i75 := in_$i73, in_$i74, in_$i75;
    goto $bb37, exit;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb39:
    assume {:verifier.code 0} true;
    assume out_$i75 == 1;
    goto $bb39_dummy;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    out_$i75 := $ne.i32(out_$i74, 119);
    goto corral_source_split_2874;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    out_$i74 := $zext.i8.i32(out_$i73);
    goto corral_source_split_2873;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i8($M.1, in_$p69);
    goto corral_source_split_2872;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} cpu_relax();
    goto corral_source_split_2871;

  $bb39_dummy:
    call {:si_unique_call 1} out_$i73, out_$i74, out_$i75 := issue_scb_block_loop_$bb37(in_$p69, out_$i73, out_$i74, out_$i75);
    return;

  exit:
    return;
}



procedure issue_scb_block_loop_$bb37(in_$p69: ref, in_$i73: i8, in_$i74: i32, in_$i75: i1) returns (out_$i73: i8, out_$i74: i32, out_$i75: i1);



implementation issue_scb_block_loop_$bb29(in_$p59: ref, in_$i63: i8, in_$i64: i32, in_$i65: i1) returns (out_$i63: i8, out_$i64: i32, out_$i65: i1)
{

  entry:
    out_$i63, out_$i64, out_$i65 := in_$i63, in_$i64, in_$i65;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb31:
    assume {:verifier.code 0} true;
    assume out_$i65 == 1;
    goto $bb31_dummy;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i32(out_$i64, 255);
    goto corral_source_split_2858;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    out_$i64 := $zext.i8.i32(out_$i63);
    goto corral_source_split_2857;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i8($M.1, in_$p59);
    goto corral_source_split_2856;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} cpu_relax();
    goto corral_source_split_2855;

  $bb31_dummy:
    call {:si_unique_call 1} out_$i63, out_$i64, out_$i65 := issue_scb_block_loop_$bb29(in_$p59, out_$i63, out_$i64, out_$i65);
    return;

  exit:
    return;
}



procedure issue_scb_block_loop_$bb29(in_$p59: ref, in_$i63: i8, in_$i64: i32, in_$i65: i1) returns (out_$i63: i8, out_$i64: i32, out_$i65: i1);



implementation __mega_busywait_mbox_loop_$bb1(in_$p2: ref, in_$p5: ref, in_$i6: i8, in_$i7: i32, in_$i8: i1, in_$i11: i64, in_$i12: i1, in_$i3: i64, in_vslice_dummy_var_138: i32) returns (out_$p5: ref, out_$i6: i8, out_$i7: i32, out_$i8: i1, out_$i11: i64, out_$i12: i1, out_$i3: i64, out_vslice_dummy_var_138: i32)
{

  entry:
    out_$p5, out_$i6, out_$i7, out_$i8, out_$i11, out_$i12, out_$i3, out_vslice_dummy_var_138 := in_$p5, in_$i6, in_$i7, in_$i8, in_$i11, in_$i12, in_$i3, in_vslice_dummy_var_138;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_3026;

  $bb7:
    assume out_$i12 == 1;
    assume {:verifier.code 0} true;
    out_$i3 := out_$i11;
    goto $bb7_dummy;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    out_$i12 := $sle.i64(out_$i11, 9999);
    goto corral_source_split_3041;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i64(out_$i3, 1);
    call {:si_unique_call 1217} {:cexpr "counter"} boogie_si_record_i64(out_$i11);
    goto corral_source_split_3040;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} out_vslice_dummy_var_138 := _cond_resched();
    goto corral_source_split_3039;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} ___might_sleep(.str.128, 1712, 0);
    goto corral_source_split_3038;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} __const_udelay(429500);
    goto corral_source_split_3037;

  $bb4:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i32(out_$i7, 0);
    goto corral_source_split_3031;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    out_$i7 := $zext.i8.i32(out_$i6);
    goto corral_source_split_3030;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    out_$i6 := $load.i8($M.1, out_$p5);
    goto corral_source_split_3029;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3028;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb7_dummy:
    call {:si_unique_call 1} out_$p5, out_$i6, out_$i7, out_$i8, out_$i11, out_$i12, out_$i3, out_vslice_dummy_var_138 := __mega_busywait_mbox_loop_$bb1(in_$p2, out_$p5, out_$i6, out_$i7, out_$i8, out_$i11, out_$i12, out_$i3, out_vslice_dummy_var_138);
    return;

  exit:
    return;
}



procedure __mega_busywait_mbox_loop_$bb1(in_$p2: ref, in_$p5: ref, in_$i6: i8, in_$i7: i32, in_$i8: i1, in_$i11: i64, in_$i12: i1, in_$i3: i64, in_vslice_dummy_var_138: i32) returns (out_$p5: ref, out_$i6: i8, out_$i7: i32, out_$i8: i1, out_$i11: i64, out_$i12: i1, out_$i3: i64, out_vslice_dummy_var_138: i32);



implementation mega_free_sgl_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i8, in_$i18: i64, in_$i19: i64, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$i50: i32, in_$i51: i8, in_$i52: i32, in_$i53: i1, in_$i5: i32) returns (out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i8, out_$i18: i64, out_$i19: i64, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$i50: i32, out_$i51: i8, out_$i52: i32, out_$i53: i1, out_$i5: i32)
{

  entry:
    out_$p6, out_$p7, out_$i8, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$i36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i5 := in_$p6, in_$p7, in_$i8, in_$p10, in_$p11, in_$i12, in_$i13, in_$p14, in_$p15, in_$p16, in_$i17, in_$i18, in_$i19, in_$p20, in_$p21, in_$p22, in_$p23, in_$i24, in_$p25, in_$p26, in_$p27, in_$i28, in_$i29, in_$p30, in_$p31, in_$p32, in_$p33, in_$p34, in_$p35, in_$i36, in_$p37, in_$p38, in_$p39, in_$i40, in_$i41, in_$p42, in_$p43, in_$p44, in_$p45, in_$p46, in_$p47, in_$i48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3076;

  $bb15:
    assume out_$i53 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i50;
    goto $bb15_dummy;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    out_$i53 := $slt.i32(out_$i50, out_$i52);
    goto corral_source_split_3140;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    out_$i52 := $zext.i8.i32(out_$i51);
    goto corral_source_split_3139;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i8($M.1, in_$p1);
    goto corral_source_split_3138;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i50 := $add.i32(out_$i5, 1);
    call {:si_unique_call 1235} {:cexpr "i"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_3137;

  $bb13:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p49, $0.ref);
    goto corral_source_split_3135;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p7, $mul.ref(out_$i8, 184)), $mul.ref(168, 1));
    goto corral_source_split_3134;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} pci_free_consistent(out_$p43, 68, out_$p46, out_$i48);
    goto corral_source_split_3133;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i64($M.1, out_$p47);
    goto corral_source_split_3132;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p7, $mul.ref(out_$i8, 184)), $mul.ref(176, 1));
    goto corral_source_split_3131;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    out_$p46 := $bitcast.ref.ref(out_$p45);
    goto corral_source_split_3130;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.1, out_$p44);
    goto corral_source_split_3129;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p7, $mul.ref(out_$i8, 184)), $mul.ref(168, 1));
    goto corral_source_split_3128;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.1, out_$p42);
    goto corral_source_split_3127;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1912)), $mul.ref(64, 1));
    goto corral_source_split_3126;

  $bb12:
    assume out_$i41 == 1;
    goto corral_source_split_3125;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i64(out_$i40, 0);
    goto corral_source_split_3123;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    out_$i40 := $p2i.ref.i64(out_$p39);
    goto corral_source_split_3122;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.1, out_$p38);
    goto corral_source_split_3121;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p7, $mul.ref(out_$i8, 184)), $mul.ref(168, 1));
    goto corral_source_split_3120;

  $bb10:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p37, $0.ref);
    goto corral_source_split_3118;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p7, $mul.ref(out_$i8, 184)), $mul.ref(152, 1));
    goto corral_source_split_3117;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} pci_free_consistent(out_$p31, 60, out_$p34, out_$i36);
    goto corral_source_split_3116;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i64($M.1, out_$p35);
    goto corral_source_split_3115;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p7, $mul.ref(out_$i8, 184)), $mul.ref(160, 1));
    goto corral_source_split_3114;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    out_$p34 := $bitcast.ref.ref(out_$p33);
    goto corral_source_split_3113;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.1, out_$p32);
    goto corral_source_split_3112;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p7, $mul.ref(out_$i8, 184)), $mul.ref(152, 1));
    goto corral_source_split_3111;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.1, out_$p30);
    goto corral_source_split_3110;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1912)), $mul.ref(64, 1));
    goto corral_source_split_3109;

  $bb9:
    assume out_$i29 == 1;
    goto corral_source_split_3108;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i64(out_$i28, 0);
    goto corral_source_split_3106;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p27);
    goto corral_source_split_3105;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.1, out_$p26);
    goto corral_source_split_3104;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p7, $mul.ref(out_$i8, 184)), $mul.ref(152, 1));
    goto corral_source_split_3103;

  $bb7:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p25, $0.ref);
    goto corral_source_split_3101;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p7, $mul.ref(out_$i8, 184)), $mul.ref(136, 1));
    goto corral_source_split_3100;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} pci_free_consistent(out_$p15, out_$i19, out_$p22, out_$i24);
    goto corral_source_split_3099;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i64($M.1, out_$p23);
    goto corral_source_split_3098;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p7, $mul.ref(out_$i8, 184)), $mul.ref(144, 1));
    goto corral_source_split_3097;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(out_$p21);
    goto corral_source_split_3096;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.1, out_$p20);
    goto corral_source_split_3095;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p7, $mul.ref(out_$i8, 184)), $mul.ref(136, 1));
    goto corral_source_split_3094;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    out_$i19 := $mul.i64(out_$i18, 12);
    goto corral_source_split_3093;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i8.i64(out_$i17);
    goto corral_source_split_3092;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i8($M.1, out_$p16);
    goto corral_source_split_3091;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1912)), $mul.ref(1448, 1));
    goto corral_source_split_3090;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.1, out_$p14);
    goto corral_source_split_3089;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1912)), $mul.ref(64, 1));
    goto corral_source_split_3088;

  $bb6:
    assume out_$i13 == 1;
    goto corral_source_split_3087;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    out_$i13 := $ne.i64(out_$i12, 0);
    goto corral_source_split_3085;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    out_$i12 := $p2i.ref.i64(out_$p11);
    goto corral_source_split_3084;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.1, out_$p10);
    goto corral_source_split_3083;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p7, $mul.ref(out_$i8, 184)), $mul.ref(136, 1));
    goto corral_source_split_3082;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    goto corral_source_split_3081;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i5);
    goto corral_source_split_3080;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.1, out_$p6);
    goto corral_source_split_3079;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1912)), $mul.ref(1176, 1));
    goto corral_source_split_3078;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p6, out_$p7, out_$i8, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$i36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i5 := mega_free_sgl_loop_$bb4(in_$p0, in_$p1, out_$p6, out_$p7, out_$i8, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$i36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i5);
    return;

  exit:
    return;
}



procedure mega_free_sgl_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i8, in_$i18: i64, in_$i19: i64, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$i50: i32, in_$i51: i8, in_$i52: i32, in_$i53: i1, in_$i5: i32) returns (out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i8, out_$i18: i64, out_$i19: i64, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$i50: i32, out_$i51: i8, out_$i52: i32, out_$i53: i1, out_$i5: i32);
  modifies $M.1;



implementation megaraid_isr_memmapped_loop_$bb19(in_$p51: ref, in_$p57: ref, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$i61: i1) returns (out_$p57: ref, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$i61: i1)
{

  entry:
    out_$p57, out_$p58, out_$i59, out_$i60, out_$i61 := in_$p57, in_$p58, in_$i59, in_$i60, in_$i61;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb21:
    assume {:verifier.code 0} true;
    assume out_$i61 == 1;
    goto $bb21_dummy;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i32(out_$i60, 0);
    goto corral_source_split_3402;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    out_$i60 := $and.i32(out_$i59, 2);
    goto corral_source_split_3401;

  SeqInstr_81:
    call {:si_unique_call 1319} {:cexpr "tmp"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_3400;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} out_$i59 := readl(out_$p58);
    goto SeqInstr_80;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref(out_$p57, $mul.ref(32, 1));
    goto corral_source_split_3399;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.1, in_$p51);
    goto corral_source_split_3398;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} cpu_relax();
    goto corral_source_split_3397;

  $bb21_dummy:
    call {:si_unique_call 1} out_$p57, out_$p58, out_$i59, out_$i60, out_$i61 := megaraid_isr_memmapped_loop_$bb19(in_$p51, out_$p57, out_$p58, out_$i59, out_$i60, out_$i61);
    return;

  exit:
    return;
}



procedure megaraid_isr_memmapped_loop_$bb19(in_$p51: ref, in_$p57: ref, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$i61: i1) returns (out_$p57: ref, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$i61: i1);
  modifies $M.1, $M.11, $M.6, $CurrAddr, $M.19, $M.20, $M.21, $M.12, assertsPassed;



implementation megaraid_isr_memmapped_loop_$bb11(in_$p15: ref, in_$p23: ref, in_$p25: ref, in_$i26: i8, in_$i27: i32, in_$i28: i1, in_$i29: i8) returns (out_$p23: ref, out_$p25: ref, out_$i26: i8, out_$i27: i32, out_$i28: i1, out_$i29: i8)
{

  entry:
    out_$p23, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29 := in_$p23, in_$p25, in_$i26, in_$i27, in_$i28, in_$i29;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13:
    assume {:verifier.code 0} true;
    assume out_$i28 == 1;
    goto $bb13_dummy;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i26;
    assume true;
    goto $bb13;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i27, 255);
    goto corral_source_split_3362;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i8.i32(out_$i26);
    goto corral_source_split_3361;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i8($M.1, out_$p25);
    call {:si_unique_call 1310} {:cexpr "nstatus"} boogie_si_record_i8(out_$i26);
    goto corral_source_split_3360;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref(out_$p23, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_3359;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.1, in_$p15);
    goto corral_source_split_3358;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} cpu_relax();
    goto corral_source_split_3357;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p23, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29 := megaraid_isr_memmapped_loop_$bb11(in_$p15, out_$p23, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29);
    return;

  exit:
    return;
}



procedure megaraid_isr_memmapped_loop_$bb11(in_$p15: ref, in_$p23: ref, in_$p25: ref, in_$i26: i8, in_$i27: i32, in_$i28: i1, in_$i29: i8) returns (out_$p23: ref, out_$p25: ref, out_$i26: i8, out_$i27: i32, out_$i28: i1, out_$i29: i8);



implementation megaraid_isr_memmapped_loop_$bb4(in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$i11: i32, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p18: ref, in_$i19: i8, in_$i20: i32, in_$i21: i1, in_$p23: ref, in_$p25: ref, in_$i26: i8, in_$i27: i32, in_$i28: i1, in_$i29: i8, in_$i22: i8, in_$p30: ref, in_$p31: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p37: ref, in_$i38: i8, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$p57: ref, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$i61: i1, in_$p62: ref, in_$i63: i32, in_$i64: i32, in_$p65: ref, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$p69: ref, in_$i70: i32, in_$i71: i1, in_cmdloc_dummy_var_9: [ref]i8, in_cmdloc_dummy_var_10: [ref]i8, in_cmdloc_dummy_var_11: [ref]i8) returns (out_$i11: i32, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p18: ref, out_$i19: i8, out_$i20: i32, out_$i21: i1, out_$p23: ref, out_$p25: ref, out_$i26: i8, out_$i27: i32, out_$i28: i1, out_$i29: i8, out_$i22: i8, out_$p30: ref, out_$p31: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p37: ref, out_$i38: i8, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$p57: ref, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$i61: i1, out_$p62: ref, out_$i63: i32, out_$i64: i32, out_$p65: ref, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$p69: ref, out_$i70: i32, out_$i71: i1, out_cmdloc_dummy_var_9: [ref]i8, out_cmdloc_dummy_var_10: [ref]i8, out_cmdloc_dummy_var_11: [ref]i8)
{

  entry:
    out_$i11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i22, out_$p30, out_$p31, out_$p33, out_$p34, out_$p35, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p45, out_$p46, out_$i47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$p68, out_$p69, out_$i70, out_$i71, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11 := in_$i11, in_$p12, in_$p13, in_$p14, in_$p15, in_$p16, in_$p18, in_$i19, in_$i20, in_$i21, in_$p23, in_$p25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i22, in_$p30, in_$p31, in_$p33, in_$p34, in_$p35, in_$p37, in_$i38, in_$i39, in_$p40, in_$p41, in_$p42, in_$p43, in_$p45, in_$p46, in_$i47, in_$p48, in_$p49, in_$p50, in_$p51, in_$p52, in_$p53, in_$i54, in_$i55, in_$i56, in_$p57, in_$p58, in_$i59, in_$i60, in_$i61, in_$p62, in_$i63, in_$i64, in_$p65, in_$i66, in_$i67, in_$p68, in_$p69, in_$i70, in_$i71, in_cmdloc_dummy_var_9, in_cmdloc_dummy_var_10, in_cmdloc_dummy_var_11;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i71 == 1);
    goto $bb27_dummy;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    out_$i11 := 1;
    assume true;
    goto $bb27;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    out_$i71 := $ne.i32(out_$i70, 268440116);
    goto corral_source_split_3421;

  SeqInstr_87:
    call {:si_unique_call 1326} {:cexpr "dword"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_3420;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} out_$i70 := readl(out_$p69);
    goto SeqInstr_86;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref(out_$p68, $mul.ref(44, 1));
    goto corral_source_split_3419;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.1, in_$p5);
    goto corral_source_split_3418;

  $bb25:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} mega_runpendq(in_$p3);
    goto corral_source_split_3416;

  $bb24:
    assume out_$i67 == 1;
    goto corral_source_split_3415;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    out_$i67 := $eq.i32(out_$i66, 0);
    goto corral_source_split_3413;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} out_$i66 := atomic_read(out_$p65);
    call {:si_unique_call 1323} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_3412;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p3, $mul.ref(0, 1912)), $mul.ref(1356, 1));
    goto corral_source_split_3411;

  SeqInstr_84:
    goto corral_source_split_3410;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} mega_rundoneq(in_$p3);
    goto SeqInstr_83;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} mega_cmd_done(in_$p3, out_$p62, out_$i63, out_$i64);
    goto corral_source_split_3409;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    out_$i64 := $zext.i8.i32(out_$i38);
    goto corral_source_split_3408;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i8.i32(out_$i22);
    goto corral_source_split_3407;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p62 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_3406;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i56 == 1);
    goto $bb18;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb22:
    assume !(out_$i61 == 1);
    goto corral_source_split_3404;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i32(out_$i60, 0);
    goto corral_source_split_3402;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    out_$i60 := $and.i32(out_$i59, 2);
    goto corral_source_split_3401;

  SeqInstr_81:
    call {:si_unique_call 1319} {:cexpr "tmp"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_3400;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} out_$i59 := readl(out_$p58);
    goto SeqInstr_80;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref(out_$p57, $mul.ref(32, 1));
    goto corral_source_split_3399;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.1, out_$p51);
    goto corral_source_split_3398;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} cpu_relax();
    goto corral_source_split_3397;

  $bb19:
    call out_$p57, out_$p58, out_$i59, out_$i60, out_$i61 := megaraid_isr_memmapped_loop_$bb19(out_$p51, out_$p57, out_$p58, out_$i59, out_$i60, out_$i61);
    goto $bb19_last;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb21:
    assume {:verifier.code 0} true;
    assume out_$i61 == 1;
    assume false;
    return;

  $bb16:
    assume out_$i56 == 1;
    goto corral_source_split_3395;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i32(out_$i55, 0);
    goto corral_source_split_3393;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    out_$i55 := $and.i32(out_$i54, 2);
    goto corral_source_split_3392;

  SeqInstr_78:
    call {:si_unique_call 1316} {:cexpr "tmp"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_3391;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} out_$i54 := readl(out_$p53);
    goto SeqInstr_77;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref(out_$p52, $mul.ref(32, 1));
    goto corral_source_split_3390;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.1, out_$p51);
    goto corral_source_split_3389;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p3, $mul.ref(0, 1912)), $mul.ref(16, 1));
    goto corral_source_split_3388;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} writel(2, out_$p50);
    goto corral_source_split_3387;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref(out_$p49, $mul.ref(32, 1));
    goto corral_source_split_3386;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.1, out_$p48);
    goto corral_source_split_3385;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p3, $mul.ref(0, 1912)), $mul.ref(16, 1));
    goto corral_source_split_3384;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_9 := $M.1;
    out_cmdloc_dummy_var_10 := $M.1;
    call {:si_unique_call 1313} out_cmdloc_dummy_var_11 := $memcpy.i8(out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_$p41, out_$p46, out_$i47, $zext.i32.i64(1), 0 == 1);
    $M.1 := out_cmdloc_dummy_var_11;
    goto corral_source_split_3383;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    out_$i47 := $zext.i8.i64(out_$i22);
    goto corral_source_split_3382;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    out_$p46 := $bitcast.ref.ref(out_$p45);
    goto corral_source_split_3381;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref($add.ref(out_$p43, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(3, 1));
    goto corral_source_split_3380;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.1, out_$p42);
    goto corral_source_split_3379;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p3, $mul.ref(0, 1912)), $mul.ref(48, 1));
    goto corral_source_split_3378;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    out_$p41 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_3377;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} atomic_sub(out_$i39, out_$p40);
    goto corral_source_split_3376;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p3, $mul.ref(0, 1912)), $mul.ref(1184, 1));
    goto corral_source_split_3375;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i8.i32(out_$i22);
    goto corral_source_split_3374;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i8($M.1, out_$p37);
    call {:si_unique_call 1311} {:cexpr "status"} boogie_si_record_i8(out_$i38);
    goto corral_source_split_3373;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref($add.ref(out_$p35, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_3372;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.1, out_$p34);
    goto corral_source_split_3371;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p3, $mul.ref(0, 1912)), $mul.ref(48, 1));
    goto corral_source_split_3370;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p33, $sub.i8(0, 1));
    goto corral_source_split_3369;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref($add.ref(out_$p31, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_3368;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.1, out_$p30);
    goto corral_source_split_3367;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p3, $mul.ref(0, 1912)), $mul.ref(48, 1));
    goto corral_source_split_3366;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb9:
    assume {:verifier.code 0} true;
    assume !(out_$i21 == 1);
    goto $bb10;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i29;
    goto $bb10;

  $bb14:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3364;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i26;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i27, 255);
    goto corral_source_split_3362;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i8.i32(out_$i26);
    goto corral_source_split_3361;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i8($M.1, out_$p25);
    call {:si_unique_call 1310} {:cexpr "nstatus"} boogie_si_record_i8(out_$i26);
    goto corral_source_split_3360;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref(out_$p23, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_3359;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.1, out_$p15);
    goto corral_source_split_3358;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} cpu_relax();
    goto corral_source_split_3357;

  $bb11:
    call out_$p23, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29 := megaraid_isr_memmapped_loop_$bb11(out_$p15, out_$p23, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29);
    goto $bb11_last;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb13:
    assume {:verifier.code 0} true;
    assume out_$i28 == 1;
    assume false;
    return;

  $bb8:
    assume out_$i21 == 1;
    goto corral_source_split_3355;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i19;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i20, 255);
    goto corral_source_split_3353;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i8.i32(out_$i19);
    goto corral_source_split_3352;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i8($M.1, out_$p18);
    call {:si_unique_call 1308} {:cexpr "nstatus"} boogie_si_record_i8(out_$i19);
    goto corral_source_split_3351;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_3350;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.1, out_$p15);
    goto corral_source_split_3349;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p3, $mul.ref(0, 1912)), $mul.ref(48, 1));
    goto corral_source_split_3348;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} writel(268440116, out_$p14);
    goto corral_source_split_3347;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref(out_$p13, $mul.ref(44, 1));
    goto corral_source_split_3346;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.1, out_$p12);
    goto corral_source_split_3345;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p3, $mul.ref(0, 1912)), $mul.ref(16, 1));
    goto corral_source_split_3344;

  $bb27_dummy:
    call {:si_unique_call 1} out_$i11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i22, out_$p30, out_$p31, out_$p33, out_$p34, out_$p35, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p45, out_$p46, out_$i47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$p68, out_$p69, out_$i70, out_$i71, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11 := megaraid_isr_memmapped_loop_$bb4(in_$p2, in_$p3, in_$p5, out_$i11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i22, out_$p30, out_$p31, out_$p33, out_$p34, out_$p35, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p45, out_$p46, out_$i47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$p68, out_$p69, out_$i70, out_$i71, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11);
    return;

  exit:
    return;
}



procedure megaraid_isr_memmapped_loop_$bb4(in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$i11: i32, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p18: ref, in_$i19: i8, in_$i20: i32, in_$i21: i1, in_$p23: ref, in_$p25: ref, in_$i26: i8, in_$i27: i32, in_$i28: i1, in_$i29: i8, in_$i22: i8, in_$p30: ref, in_$p31: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p37: ref, in_$i38: i8, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$p57: ref, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$i61: i1, in_$p62: ref, in_$i63: i32, in_$i64: i32, in_$p65: ref, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$p69: ref, in_$i70: i32, in_$i71: i1, in_cmdloc_dummy_var_9: [ref]i8, in_cmdloc_dummy_var_10: [ref]i8, in_cmdloc_dummy_var_11: [ref]i8) returns (out_$i11: i32, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p18: ref, out_$i19: i8, out_$i20: i32, out_$i21: i1, out_$p23: ref, out_$p25: ref, out_$i26: i8, out_$i27: i32, out_$i28: i1, out_$i29: i8, out_$i22: i8, out_$p30: ref, out_$p31: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p37: ref, out_$i38: i8, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$p57: ref, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$i61: i1, out_$p62: ref, out_$i63: i32, out_$i64: i32, out_$p65: ref, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$p69: ref, out_$i70: i32, out_$i71: i1, out_cmdloc_dummy_var_9: [ref]i8, out_cmdloc_dummy_var_10: [ref]i8, out_cmdloc_dummy_var_11: [ref]i8);
  modifies $M.1, $M.11, $M.6, $CurrAddr, $M.19, $M.20, $M.21, $M.12, assertsPassed;



implementation megaraid_isr_iomapped_loop_$bb11(in_$p22: ref, in_$p30: ref, in_$p32: ref, in_$i33: i8, in_$i34: i32, in_$i35: i1, in_$i36: i8) returns (out_$p30: ref, out_$p32: ref, out_$i33: i8, out_$i34: i32, out_$i35: i1, out_$i36: i8)
{

  entry:
    out_$p30, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36 := in_$p30, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13:
    assume {:verifier.code 0} true;
    assume out_$i35 == 1;
    goto $bb13_dummy;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i33;
    assume true;
    goto $bb13;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i34, 255);
    goto corral_source_split_3468;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i8.i32(out_$i33);
    goto corral_source_split_3467;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i8($M.1, out_$p32);
    call {:si_unique_call 1336} {:cexpr "nstatus"} boogie_si_record_i8(out_$i33);
    goto corral_source_split_3466;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($add.ref(out_$p30, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_3465;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.1, in_$p22);
    goto corral_source_split_3464;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} cpu_relax();
    goto corral_source_split_3463;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p30, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36 := megaraid_isr_iomapped_loop_$bb11(in_$p22, out_$p30, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36);
    return;

  exit:
    return;
}



procedure megaraid_isr_iomapped_loop_$bb11(in_$p22: ref, in_$p30: ref, in_$p32: ref, in_$i33: i8, in_$i34: i32, in_$i35: i1, in_$i36: i8) returns (out_$p30: ref, out_$p32: ref, out_$i33: i8, out_$i34: i32, out_$i35: i1, out_$i36: i8);



implementation megaraid_isr_iomapped_loop_$bb4(in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$i15: i32, in_$i14: i8, in_$i16: i32, in_$i17: i8, in_$p18: ref, in_$i19: i64, in_$i20: i32, in_$i21: i32, in_$p22: ref, in_$p23: ref, in_$p25: ref, in_$i26: i8, in_$i27: i32, in_$i28: i1, in_$p30: ref, in_$p32: ref, in_$i33: i8, in_$i34: i32, in_$i35: i1, in_$i36: i8, in_$i29: i8, in_$p37: ref, in_$p38: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p44: ref, in_$i45: i8, in_$i46: i32, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$p55: ref, in_$i56: i64, in_$i57: i32, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$p61: ref, in_$i62: i32, in_$i63: i1, in_$i64: i64, in_$i65: i32, in_$i66: i32, in_$i67: i8, in_$i68: i32, in_$i69: i32, in_$i70: i1, in_cmdloc_dummy_var_12: [ref]i8, in_cmdloc_dummy_var_13: [ref]i8, in_cmdloc_dummy_var_14: [ref]i8) returns (out_$i15: i32, out_$i14: i8, out_$i16: i32, out_$i17: i8, out_$p18: ref, out_$i19: i64, out_$i20: i32, out_$i21: i32, out_$p22: ref, out_$p23: ref, out_$p25: ref, out_$i26: i8, out_$i27: i32, out_$i28: i1, out_$p30: ref, out_$p32: ref, out_$i33: i8, out_$i34: i32, out_$i35: i1, out_$i36: i8, out_$i29: i8, out_$p37: ref, out_$p38: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p44: ref, out_$i45: i8, out_$i46: i32, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$p55: ref, out_$i56: i64, out_$i57: i32, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$p61: ref, out_$i62: i32, out_$i63: i1, out_$i64: i64, out_$i65: i32, out_$i66: i32, out_$i67: i8, out_$i68: i32, out_$i69: i32, out_$i70: i1, out_cmdloc_dummy_var_12: [ref]i8, out_cmdloc_dummy_var_13: [ref]i8, out_cmdloc_dummy_var_14: [ref]i8)
{

  entry:
    out_$i15, out_$i14, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p25, out_$i26, out_$i27, out_$i28, out_$p30, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i29, out_$p37, out_$p38, out_$p40, out_$p41, out_$p42, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p52, out_$p53, out_$i54, out_$p55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_cmdloc_dummy_var_14 := in_$i15, in_$i14, in_$i16, in_$i17, in_$p18, in_$i19, in_$i20, in_$i21, in_$p22, in_$p23, in_$p25, in_$i26, in_$i27, in_$i28, in_$p30, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i29, in_$p37, in_$p38, in_$p40, in_$p41, in_$p42, in_$p44, in_$i45, in_$i46, in_$p47, in_$p48, in_$p49, in_$p50, in_$p52, in_$p53, in_$i54, in_$p55, in_$i56, in_$i57, in_$p58, in_$i59, in_$i60, in_$p61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_cmdloc_dummy_var_12, in_cmdloc_dummy_var_13, in_cmdloc_dummy_var_14;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb19:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    out_$i14 := out_$i67;
    goto $bb19_dummy;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    out_$i15 := 1;
    assume true;
    goto $bb19;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    out_$i70 := $eq.i32(out_$i69, 0);
    goto corral_source_split_3512;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    out_$i69 := $and.i32(out_$i68, 64);
    goto corral_source_split_3511;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    out_$i68 := $zext.i8.i32(out_$i67);
    goto corral_source_split_3510;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} out_$i67 := inb_p(out_$i66);
    call {:si_unique_call 1347} {:cexpr "byte"} boogie_si_record_i8(out_$i67);
    goto corral_source_split_3509;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    out_$i66 := $add.i32(out_$i65, 10);
    goto corral_source_split_3508;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    out_$i65 := $trunc.i64.i32(out_$i64);
    goto corral_source_split_3507;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i64($M.1, in_$p5);
    goto corral_source_split_3506;

  $bb17:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} mega_runpendq(in_$p3);
    goto corral_source_split_3504;

  $bb16:
    assume out_$i63 == 1;
    goto corral_source_split_3503;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    out_$i63 := $eq.i32(out_$i62, 0);
    goto corral_source_split_3501;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} out_$i62 := atomic_read(out_$p61);
    call {:si_unique_call 1344} {:cexpr "tmp"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_3500;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p3, $mul.ref(0, 1912)), $mul.ref(1356, 1));
    goto corral_source_split_3499;

  SeqInstr_96:
    goto corral_source_split_3498;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} mega_rundoneq(in_$p3);
    goto SeqInstr_95;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} mega_cmd_done(in_$p3, out_$p58, out_$i59, out_$i60);
    goto corral_source_split_3497;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    out_$i60 := $zext.i8.i32(out_$i45);
    goto corral_source_split_3496;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    out_$i59 := $zext.i8.i32(out_$i29);
    goto corral_source_split_3495;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    out_$p58 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_3494;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} outb_p(8, out_$i57);
    goto corral_source_split_3493;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    out_$i57 := $trunc.i64.i32(out_$i56);
    goto corral_source_split_3492;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i64($M.1, out_$p55);
    goto corral_source_split_3491;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p3, $mul.ref(0, 1912)), $mul.ref(8, 1));
    goto corral_source_split_3490;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_12 := $M.1;
    out_cmdloc_dummy_var_13 := $M.1;
    call {:si_unique_call 1339} out_cmdloc_dummy_var_14 := $memcpy.i8(out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_$p48, out_$p53, out_$i54, $zext.i32.i64(1), 0 == 1);
    $M.1 := out_cmdloc_dummy_var_14;
    goto corral_source_split_3489;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    out_$i54 := $zext.i8.i64(out_$i29);
    goto corral_source_split_3488;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    out_$p53 := $bitcast.ref.ref(out_$p52);
    goto corral_source_split_3487;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref($add.ref(out_$p50, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(3, 1));
    goto corral_source_split_3486;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.1, out_$p49);
    goto corral_source_split_3485;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p3, $mul.ref(0, 1912)), $mul.ref(48, 1));
    goto corral_source_split_3484;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_3483;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} atomic_sub(out_$i46, out_$p47);
    goto corral_source_split_3482;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p3, $mul.ref(0, 1912)), $mul.ref(1184, 1));
    goto corral_source_split_3481;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i8.i32(out_$i29);
    goto corral_source_split_3480;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i8($M.1, out_$p44);
    call {:si_unique_call 1337} {:cexpr "status"} boogie_si_record_i8(out_$i45);
    goto corral_source_split_3479;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref($add.ref(out_$p42, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_3478;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.1, out_$p41);
    goto corral_source_split_3477;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p3, $mul.ref(0, 1912)), $mul.ref(48, 1));
    goto corral_source_split_3476;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p40, $sub.i8(0, 1));
    goto corral_source_split_3475;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref($add.ref(out_$p38, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_3474;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.1, out_$p37);
    goto corral_source_split_3473;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p3, $mul.ref(0, 1912)), $mul.ref(48, 1));
    goto corral_source_split_3472;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb9:
    assume {:verifier.code 0} true;
    assume !(out_$i28 == 1);
    goto $bb10;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i36;
    goto $bb10;

  $bb14:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3470;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i33;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i34, 255);
    goto corral_source_split_3468;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i8.i32(out_$i33);
    goto corral_source_split_3467;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i8($M.1, out_$p32);
    call {:si_unique_call 1336} {:cexpr "nstatus"} boogie_si_record_i8(out_$i33);
    goto corral_source_split_3466;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($add.ref(out_$p30, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_3465;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.1, out_$p22);
    goto corral_source_split_3464;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} cpu_relax();
    goto corral_source_split_3463;

  $bb11:
    call out_$p30, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36 := megaraid_isr_iomapped_loop_$bb11(out_$p22, out_$p30, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36);
    goto $bb11_last;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb13:
    assume {:verifier.code 0} true;
    assume out_$i35 == 1;
    assume false;
    return;

  $bb8:
    assume out_$i28 == 1;
    goto corral_source_split_3461;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i26;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i27, 255);
    goto corral_source_split_3459;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i8.i32(out_$i26);
    goto corral_source_split_3458;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i8($M.1, out_$p25);
    call {:si_unique_call 1334} {:cexpr "nstatus"} boogie_si_record_i8(out_$i26);
    goto corral_source_split_3457;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref(out_$p23, $mul.ref(0, 68)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_3456;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.1, out_$p22);
    goto corral_source_split_3455;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p3, $mul.ref(0, 1912)), $mul.ref(48, 1));
    goto corral_source_split_3454;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} outb_p(out_$i17, out_$i21);
    goto corral_source_split_3453;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i32(out_$i20, 10);
    goto corral_source_split_3452;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    out_$i20 := $trunc.i64.i32(out_$i19);
    goto corral_source_split_3451;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i64($M.1, out_$p18);
    goto corral_source_split_3450;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p3, $mul.ref(0, 1912)), $mul.ref(8, 1));
    goto corral_source_split_3449;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    out_$i17 := $trunc.i32.i8(out_$i16);
    goto corral_source_split_3448;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i8.i32(out_$i14);
    goto corral_source_split_3447;

  $bb19_dummy:
    call {:si_unique_call 1} out_$i15, out_$i14, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p25, out_$i26, out_$i27, out_$i28, out_$p30, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i29, out_$p37, out_$p38, out_$p40, out_$p41, out_$p42, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p52, out_$p53, out_$i54, out_$p55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_cmdloc_dummy_var_14 := megaraid_isr_iomapped_loop_$bb4(in_$p2, in_$p3, in_$p5, out_$i15, out_$i14, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p25, out_$i26, out_$i27, out_$i28, out_$p30, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i29, out_$p37, out_$p38, out_$p40, out_$p41, out_$p42, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p52, out_$p53, out_$i54, out_$p55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_cmdloc_dummy_var_14);
    return;

  exit:
    return;
}



procedure megaraid_isr_iomapped_loop_$bb4(in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$i15: i32, in_$i14: i8, in_$i16: i32, in_$i17: i8, in_$p18: ref, in_$i19: i64, in_$i20: i32, in_$i21: i32, in_$p22: ref, in_$p23: ref, in_$p25: ref, in_$i26: i8, in_$i27: i32, in_$i28: i1, in_$p30: ref, in_$p32: ref, in_$i33: i8, in_$i34: i32, in_$i35: i1, in_$i36: i8, in_$i29: i8, in_$p37: ref, in_$p38: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p44: ref, in_$i45: i8, in_$i46: i32, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$p55: ref, in_$i56: i64, in_$i57: i32, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$p61: ref, in_$i62: i32, in_$i63: i1, in_$i64: i64, in_$i65: i32, in_$i66: i32, in_$i67: i8, in_$i68: i32, in_$i69: i32, in_$i70: i1, in_cmdloc_dummy_var_12: [ref]i8, in_cmdloc_dummy_var_13: [ref]i8, in_cmdloc_dummy_var_14: [ref]i8) returns (out_$i15: i32, out_$i14: i8, out_$i16: i32, out_$i17: i8, out_$p18: ref, out_$i19: i64, out_$i20: i32, out_$i21: i32, out_$p22: ref, out_$p23: ref, out_$p25: ref, out_$i26: i8, out_$i27: i32, out_$i28: i1, out_$p30: ref, out_$p32: ref, out_$i33: i8, out_$i34: i32, out_$i35: i1, out_$i36: i8, out_$i29: i8, out_$p37: ref, out_$p38: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p44: ref, out_$i45: i8, out_$i46: i32, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$p55: ref, out_$i56: i64, out_$i57: i32, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$p61: ref, out_$i62: i32, out_$i63: i1, out_$i64: i64, out_$i65: i32, out_$i66: i32, out_$i67: i8, out_$i68: i32, out_$i69: i32, out_$i70: i1, out_cmdloc_dummy_var_12: [ref]i8, out_cmdloc_dummy_var_13: [ref]i8, out_cmdloc_dummy_var_14: [ref]i8);
  modifies $M.1, $M.11, $M.6, $CurrAddr, $M.12, assertsPassed, $M.19, $M.20, $M.21;



implementation mega_enum_raid_scsi_loop_$bb7(in_$p0: ref, in_$p24: ref, in_$p29: ref, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$i36: i32, in_$i37: i8, in_$i38: i32, in_$i39: i1, in_$i28: i32, in_vslice_dummy_var_146: i32, in_vslice_dummy_var_147: i32) returns (out_$p29: ref, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$i36: i32, out_$i37: i8, out_$i38: i32, out_$i39: i1, out_$i28: i32, out_vslice_dummy_var_146: i32, out_vslice_dummy_var_147: i32)
{

  entry:
    out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i36, out_$i37, out_$i38, out_$i39, out_$i28, out_vslice_dummy_var_146, out_vslice_dummy_var_147 := in_$p29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i36, in_$i37, in_$i38, in_$i39, in_$i28, in_vslice_dummy_var_146, in_vslice_dummy_var_147;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3912;

  $bb12:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$i28 := out_$i36;
    goto $bb12_dummy;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    out_$i39 := $slt.i32(out_$i36, out_$i38);
    goto corral_source_split_3928;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i8.i32(out_$i37);
    goto corral_source_split_3927;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i8($M.1, in_$p24);
    goto corral_source_split_3926;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i36 := $add.i32(out_$i28, 1);
    call {:si_unique_call 1399} {:cexpr "i"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_3925;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} out_vslice_dummy_var_147 := printk.ref.i32(.str.131, out_$i28);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} out_vslice_dummy_var_146 := printk.ref.i32(.str.130, out_$i28);
    goto corral_source_split_3921;

  $bb9:
    assume out_$i33 == 1;
    goto corral_source_split_3920;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i32(out_$i32, 0);
    goto corral_source_split_3918;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    out_$i32 := $and.i32(out_$i31, 1);
    goto corral_source_split_3917;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    out_$i31 := $ashr.i32(out_$i30, out_$i28);
    goto corral_source_split_3916;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.1, out_$p29);
    goto corral_source_split_3915;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1912)), $mul.ref(1444, 1));
    goto corral_source_split_3914;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb10:
    assume !(out_$i33 == 1);
    goto corral_source_split_3923;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i36, out_$i37, out_$i38, out_$i39, out_$i28, out_vslice_dummy_var_146, out_vslice_dummy_var_147 := mega_enum_raid_scsi_loop_$bb7(in_$p0, in_$p24, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i36, out_$i37, out_$i38, out_$i39, out_$i28, out_vslice_dummy_var_146, out_vslice_dummy_var_147);
    return;

  exit:
    return;
}



procedure mega_enum_raid_scsi_loop_$bb7(in_$p0: ref, in_$p24: ref, in_$p29: ref, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$i36: i32, in_$i37: i8, in_$i38: i32, in_$i39: i1, in_$i28: i32, in_vslice_dummy_var_146: i32, in_vslice_dummy_var_147: i32) returns (out_$p29: ref, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$i36: i32, out_$i37: i8, out_$i38: i32, out_$i39: i1, out_$i28: i32, out_vslice_dummy_var_146: i32, out_vslice_dummy_var_147: i32);



implementation mega_init_scb_loop_$bb12(in_$p0: ref, in_$p18: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i8, in_$i32: i64, in_$i33: i64, in_$p34: ref, in_$p35: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$i68: i1, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i32, in_$i76: i8, in_$i77: i32, in_$i78: i1, in_$i22: i32) returns (out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i8, out_$i32: i64, out_$i33: i64, out_$p34: ref, out_$p35: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$i68: i1, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i32, out_$i76: i8, out_$i77: i32, out_$i78: i1, out_$i22: i32)
{

  entry:
    out_$p23, out_$p24, out_$i25, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p35, out_$p37, out_$p38, out_$p39, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p48, out_$p49, out_$p50, out_$p51, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p59, out_$p60, out_$p61, out_$p62, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i22 := in_$p23, in_$p24, in_$i25, in_$p27, in_$p28, in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_$p34, in_$p35, in_$p37, in_$p38, in_$p39, in_$p41, in_$p42, in_$p43, in_$i44, in_$i45, in_$p48, in_$p49, in_$p50, in_$p51, in_$p53, in_$p54, in_$p55, in_$i56, in_$i57, in_$p59, in_$p60, in_$p61, in_$p62, in_$p64, in_$p65, in_$p66, in_$i67, in_$i68, in_$p70, in_$p71, in_$p72, in_$p73, in_$p74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i22;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_4179;

  $bb24:
    assume out_$i78 == 1;
    assume {:verifier.code 0} true;
    out_$i22 := out_$i75;
    goto $bb24_dummy;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    out_$i78 := $slt.i32(out_$i75, out_$i77);
    goto corral_source_split_4258;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    out_$i77 := $zext.i8.i32(out_$i76);
    goto corral_source_split_4257;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i8($M.1, in_$p18);
    goto corral_source_split_4256;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    out_$i75 := $add.i32(out_$i22, 1);
    call {:si_unique_call 1422} {:cexpr "i"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_4255;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} list_add(out_$p73, out_$p74);
    goto corral_source_split_4254;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1912)), $mul.ref(72, 1));
    goto corral_source_split_4253;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(out_$p24, $mul.ref(out_$i25, 184)), $mul.ref(8, 1));
    goto corral_source_split_4252;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p72, $0.ref);
    goto corral_source_split_4251;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(out_$p24, $mul.ref(out_$i25, 184)), $mul.ref(104, 1));
    goto corral_source_split_4250;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p71, 0);
    goto corral_source_split_4249;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p24, $mul.ref(out_$i25, 184)), $mul.ref(4, 1));
    goto corral_source_split_4248;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p70, 65535);
    goto corral_source_split_4247;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(out_$p24, $mul.ref(out_$i25, 184)), $mul.ref(92, 1));
    goto corral_source_split_4246;

  $bb22:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    out_$i68 := $eq.i64(out_$i67, 0);
    goto corral_source_split_4240;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    out_$i67 := $p2i.ref.i64(out_$p66);
    goto corral_source_split_4239;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.1, out_$p65);
    goto corral_source_split_4238;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p24, $mul.ref(out_$i25, 184)), $mul.ref(168, 1));
    goto corral_source_split_4237;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p64, out_$p62);
    goto corral_source_split_4236;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(out_$p24, $mul.ref(out_$i25, 184)), $mul.ref(168, 1));
    goto corral_source_split_4235;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    goto corral_source_split_4234;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} out_$p62 := pci_alloc_consistent(out_$p60, 68, out_$p61);
    goto corral_source_split_4233;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p24, $mul.ref(out_$i25, 184)), $mul.ref(176, 1));
    goto corral_source_split_4232;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.1, out_$p59);
    goto corral_source_split_4231;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1912)), $mul.ref(64, 1));
    goto corral_source_split_4230;

  $bb19:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i64(out_$i56, 0);
    goto corral_source_split_4224;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    out_$i56 := $p2i.ref.i64(out_$p55);
    goto corral_source_split_4223;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.1, out_$p54);
    goto corral_source_split_4222;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p24, $mul.ref(out_$i25, 184)), $mul.ref(152, 1));
    goto corral_source_split_4221;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p53, out_$p51);
    goto corral_source_split_4220;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p24, $mul.ref(out_$i25, 184)), $mul.ref(152, 1));
    goto corral_source_split_4219;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    goto corral_source_split_4218;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} out_$p51 := pci_alloc_consistent(out_$p49, 60, out_$p50);
    goto corral_source_split_4217;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p24, $mul.ref(out_$i25, 184)), $mul.ref(160, 1));
    goto corral_source_split_4216;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.1, out_$p48);
    goto corral_source_split_4215;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1912)), $mul.ref(64, 1));
    goto corral_source_split_4214;

  $bb15:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i64(out_$i44, 0);
    goto corral_source_split_4206;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    out_$i44 := $p2i.ref.i64(out_$p43);
    goto corral_source_split_4205;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.1, out_$p42);
    goto corral_source_split_4204;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p24, $mul.ref(out_$i25, 184)), $mul.ref(128, 1));
    goto corral_source_split_4203;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p41, out_$p39);
    goto corral_source_split_4202;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p24, $mul.ref(out_$i25, 184)), $mul.ref(128, 1));
    goto corral_source_split_4201;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    goto corral_source_split_4200;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.1, out_$p38);
    goto corral_source_split_4199;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p24, $mul.ref(out_$i25, 184)), $mul.ref(136, 1));
    goto corral_source_split_4198;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p37, out_$p35);
    goto corral_source_split_4197;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p24, $mul.ref(out_$i25, 184)), $mul.ref(136, 1));
    goto corral_source_split_4196;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    goto corral_source_split_4195;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} out_$p35 := pci_alloc_consistent(out_$p29, out_$i33, out_$p34);
    goto corral_source_split_4194;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p24, $mul.ref(out_$i25, 184)), $mul.ref(144, 1));
    goto corral_source_split_4193;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    out_$i33 := $mul.i64(out_$i32, 12);
    goto corral_source_split_4192;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i8.i64(out_$i31);
    goto corral_source_split_4191;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i8($M.1, out_$p30);
    goto corral_source_split_4190;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1912)), $mul.ref(1448, 1));
    goto corral_source_split_4189;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.1, out_$p28);
    goto corral_source_split_4188;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1912)), $mul.ref(64, 1));
    goto corral_source_split_4187;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p27, out_$i22);
    goto corral_source_split_4186;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p24, $mul.ref(out_$i25, 184)), $mul.ref(0, 1));
    goto corral_source_split_4185;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    goto corral_source_split_4184;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i22);
    goto corral_source_split_4183;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.1, out_$p23);
    goto corral_source_split_4182;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1912)), $mul.ref(1176, 1));
    goto corral_source_split_4181;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb24_dummy:
    call {:si_unique_call 1} out_$p23, out_$p24, out_$i25, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p35, out_$p37, out_$p38, out_$p39, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p48, out_$p49, out_$p50, out_$p51, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p59, out_$p60, out_$p61, out_$p62, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i22 := mega_init_scb_loop_$bb12(in_$p0, in_$p18, out_$p23, out_$p24, out_$i25, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p35, out_$p37, out_$p38, out_$p39, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p48, out_$p49, out_$p50, out_$p51, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p59, out_$p60, out_$p61, out_$p62, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i22);
    return;

  exit:
    return;
}



procedure mega_init_scb_loop_$bb12(in_$p0: ref, in_$p18: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i8, in_$i32: i64, in_$i33: i64, in_$p34: ref, in_$p35: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$i68: i1, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i32, in_$i76: i8, in_$i77: i32, in_$i78: i1, in_$i22: i32) returns (out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i8, out_$i32: i64, out_$i33: i64, out_$p34: ref, out_$p35: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$i68: i1, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i32, out_$i76: i8, out_$i77: i32, out_$i78: i1, out_$i22: i32);
  modifies $M.1;



implementation mega_init_scb_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i8, in_$i16: i32, in_$i17: i1, in_$i5: i32) returns (out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i8, out_$i16: i32, out_$i17: i1, out_$i5: i32)
{

  entry:
    out_$p6, out_$p7, out_$i8, out_$p10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i5 := in_$p6, in_$p7, in_$i8, in_$p10, in_$p11, in_$p12, in_$p13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4151;

  $bb6:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i14;
    goto $bb6_dummy;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    out_$i17 := $slt.i32(out_$i14, out_$i16);
    goto corral_source_split_4168;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i8.i32(out_$i15);
    goto corral_source_split_4167;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i8($M.1, in_$p1);
    goto corral_source_split_4166;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    out_$i14 := $add.i32(out_$i5, 1);
    call {:si_unique_call 1411} {:cexpr "i"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_4165;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p13, $0.ref);
    goto corral_source_split_4164;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p7, $mul.ref(out_$i8, 184)), $mul.ref(168, 1));
    goto corral_source_split_4163;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p12, $0.ref);
    goto corral_source_split_4162;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p7, $mul.ref(out_$i8, 184)), $mul.ref(152, 1));
    goto corral_source_split_4161;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p11, $0.ref);
    goto corral_source_split_4160;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p7, $mul.ref(out_$i8, 184)), $mul.ref(128, 1));
    goto corral_source_split_4159;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p10, $0.ref);
    goto corral_source_split_4158;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p7, $mul.ref(out_$i8, 184)), $mul.ref(136, 1));
    goto corral_source_split_4157;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    goto corral_source_split_4156;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i5);
    goto corral_source_split_4155;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.1, out_$p6);
    goto corral_source_split_4154;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1912)), $mul.ref(1176, 1));
    goto corral_source_split_4153;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p6, out_$p7, out_$i8, out_$p10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i5 := mega_init_scb_loop_$bb4(in_$p0, in_$p1, out_$p6, out_$p7, out_$i8, out_$p10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i5);
    return;

  exit:
    return;
}



procedure mega_init_scb_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i8, in_$i16: i32, in_$i17: i1, in_$i5: i32) returns (out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i8, out_$i16: i32, out_$i17: i1, out_$i5: i32);
  modifies $M.1;



implementation mega_create_proc_entry_loop_$bb5(in_$p5: ref, in_$p14: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$p29: ref, in_$p30: ref, in_$i31: i16, in_$i32: i64, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$p19: ref) returns (out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$p29: ref, out_$p30: ref, out_$i31: i16, out_$i32: i64, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$p19: ref)
{

  entry:
    out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p19 := in_$p20, in_$p21, in_$p22, in_$p23, in_$p24, in_$p25, in_$i26, in_$i27, in_$p29, in_$p30, in_$i31, in_$i32, in_$p33, in_$p34, in_$p35, in_$p36, in_$i37, in_$i38, in_$p19;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4334;

  $bb10:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$p19 := out_$p34;
    goto $bb10_dummy;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i64(out_$i37, 0);
    goto corral_source_split_4358;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    out_$i37 := $p2i.ref.i64(out_$p36);
    goto corral_source_split_4357;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.15, out_$p35);
    goto corral_source_split_4356;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p19, $mul.ref(1, 24)), $mul.ref(0, 1));
    goto corral_source_split_4355;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref(out_$p19, $mul.ref(1, 24));
    goto corral_source_split_4354;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p33, out_$p25);
    goto corral_source_split_4353;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref(out_$p29, $mul.ref(out_$i32, 8));
    goto corral_source_split_4352;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i16.i64(out_$i31);
    goto corral_source_split_4351;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i16($M.17, out_$p30);
    goto corral_source_split_4350;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p19, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4349;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p29 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_4348;

  $bb8:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i64(out_$i26, 0);
    goto corral_source_split_4343;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    out_$i26 := $p2i.ref.i64(out_$p25);
    goto corral_source_split_4342;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} out_$p25 := proc_create_data(out_$p21, 256, in_$p14, mega_proc_fops, out_$p24);
    goto corral_source_split_4341;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_4340;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.16, out_$p22);
    goto corral_source_split_4339;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p19, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4338;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.15, out_$p20);
    goto corral_source_split_4337;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p19, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4336;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p19 := mega_create_proc_entry_loop_$bb5(in_$p5, in_$p14, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p19);
    return;

  exit:
    return;
}



procedure mega_create_proc_entry_loop_$bb5(in_$p5: ref, in_$p14: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$p29: ref, in_$p30: ref, in_$i31: i16, in_$i32: i64, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$p19: ref) returns (out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$p29: ref, out_$p30: ref, out_$i31: i16, out_$i32: i64, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$p19: ref);
  modifies $M.1;



implementation ldv_assume_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} ldv_assume_loop_$bb3();
    return;

  exit:
    return;
}



procedure ldv_assume_loop_$bb3();



implementation ldv_scsi_host_template_scsi_host_template_instance_4_loop_$bb16(in_$p7: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i1, in_$i58: i1, in_$i59: i1, in_$i60: i1, in_$i61: i1, in_$i62: i1, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i32, in_$i74: i1) returns (out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i1, out_$i58: i1, out_$i59: i1, out_$i60: i1, out_$i61: i1, out_$i62: i1, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i32, out_$i74: i1)
{

  entry:
    out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74 := in_$p45, in_$p46, in_$p47, in_$p48, in_$p49, in_$p50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$p63, in_$p64, in_$p65, in_$p66, in_$p67, in_$p68, in_$p69, in_$p70, in_$p71, in_$p72, in_$i73, in_$i74;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} out_$p45 := ldv_xmalloc(3464);
    goto corral_source_split_4486;

  $bb72:
    assume {:verifier.code 0} true;
    assume !(out_$i74 == 1);
    goto $bb72_dummy;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i32(out_$i73, 0);
    goto corral_source_split_4592;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} out_$i73 := ldv_undef_int();
    call {:si_unique_call 1514} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_4591;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} ldv_free(out_$p72);
    goto corral_source_split_4590;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    out_$p72 := $bitcast.ref.ref(out_$p50);
    goto corral_source_split_4589;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} ldv_free(out_$p71);
    goto corral_source_split_4588;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    out_$p71 := $bitcast.ref.ref(out_$p48);
    goto corral_source_split_4587;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} ldv_free(out_$p70);
    goto corral_source_split_4586;

  $bb71:
    assume {:verifier.code 0} true;
    out_$p70 := $bitcast.ref.ref(out_$p46);
    goto corral_source_split_4585;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    goto $bb69;

  SeqInstr_156:
    goto corral_source_split_4511;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} ldv_scsi_host_template_instance_callback_4_32($u2, $u3, $u4, $u0);
    goto SeqInstr_155;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb24:
    assume out_$i52 == 1;
    goto corral_source_split_4509;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i51, 1);
    goto corral_source_split_4493;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} out_$i51 := ldv_undef_int();
    call {:si_unique_call 1488} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_4492;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    out_$p50 := $bitcast.ref.ref(out_$p49);
    goto corral_source_split_4491;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} out_$p49 := ldv_xmalloc(4);
    goto corral_source_split_4490;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(out_$p47);
    goto corral_source_split_4489;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} out_$p47 := ldv_xmalloc(480);
    goto corral_source_split_4488;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    out_$p46 := $bitcast.ref.ref(out_$p45);
    goto corral_source_split_4487;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} ldv_free(out_$p66);
    goto corral_source_split_4523;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    out_$p66 := $bitcast.ref.ref(out_$p65);
    goto corral_source_split_4522;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} ldv_free(out_$p63);
    goto corral_source_split_4521;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} ldv_scsi_host_template_instance_callback_4_29($u5, $u3, out_$p63, $u0, out_$p65);
    goto corral_source_split_4520;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    out_$p65 := $bitcast.ref.ref(out_$p64);
    goto corral_source_split_4519;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} out_$p64 := ldv_xmalloc(8);
    goto corral_source_split_4518;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} out_$p63 := ldv_xmalloc(1);
    goto corral_source_split_4517;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb28:
    assume out_$i53 == 1;
    goto corral_source_split_4515;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i51, 2);
    goto corral_source_split_4513;

  $bb25:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  SeqInstr_159:
    goto corral_source_split_4529;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} ldv_scsi_host_template_instance_callback_4_28($u6, in_$p7, $u7);
    goto SeqInstr_158;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume out_$i54 == 1;
    goto corral_source_split_4527;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i51, 3);
    goto corral_source_split_4525;

  $bb29:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} ldv_free(out_$p69);
    goto corral_source_split_4539;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    out_$p69 := $bitcast.ref.ref(out_$p68);
    goto corral_source_split_4538;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} ldv_scsi_host_template_instance_callback_4_25($u8, out_$p68, $u3);
    goto corral_source_split_4537;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    out_$p68 := $bitcast.ref.ref(out_$p67);
    goto corral_source_split_4536;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} out_$p67 := ldv_xmalloc(976);
    goto corral_source_split_4535;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume out_$i55 == 1;
    goto corral_source_split_4533;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i51, 4);
    goto corral_source_split_4531;

  $bb33:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} ldv_scsi_host_template_instance_callback_4_22($u9, $u3, $u0, $u4);
    goto corral_source_split_4545;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb40:
    assume out_$i56 == 1;
    goto corral_source_split_4543;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i32(out_$i51, 5);
    goto corral_source_split_4541;

  $bb37:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} ldv_scsi_host_template_instance_callback_4_21($u10, in_$p7);
    goto corral_source_split_4551;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb44:
    assume out_$i57 == 1;
    goto corral_source_split_4549;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i32(out_$i51, 6);
    goto corral_source_split_4547;

  $bb41:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  SeqInstr_162:
    goto corral_source_split_4557;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} ldv_scsi_host_template_instance_callback_4_20($u11, $u7);
    goto SeqInstr_161;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb48:
    assume out_$i58 == 1;
    goto corral_source_split_4555;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i51, 7);
    goto corral_source_split_4553;

  $bb45:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  SeqInstr_165:
    goto corral_source_split_4563;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} ldv_scsi_host_template_instance_callback_4_19($u11, $u7);
    goto SeqInstr_164;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb52:
    assume out_$i59 == 1;
    goto corral_source_split_4561;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb51:
    assume {:verifier.code 0} true;
    out_$i59 := $eq.i32(out_$i51, 8);
    goto corral_source_split_4559;

  $bb49:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  SeqInstr_168:
    goto corral_source_split_4569;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} ldv_scsi_host_template_instance_callback_4_18($u11, $u7);
    goto SeqInstr_167;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb56:
    assume out_$i60 == 1;
    goto corral_source_split_4567;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb55:
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i32(out_$i51, 9);
    goto corral_source_split_4565;

  $bb53:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  SeqInstr_171:
    goto corral_source_split_4575;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} ldv_scsi_host_template_instance_callback_4_17($u11, $u7);
    goto SeqInstr_170;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb60:
    assume out_$i61 == 1;
    goto corral_source_split_4573;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb59:
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i32(out_$i51, 10);
    goto corral_source_split_4571;

  $bb57:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} ldv_scsi_host_template_instance_callback_4_4($u12, out_$p46, out_$p48, $u0, out_$p50);
    goto corral_source_split_4581;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb64:
    assume out_$i62 == 1;
    goto corral_source_split_4579;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb63:
    assume {:verifier.code 0} true;
    out_$i62 := $eq.i32(out_$i51, 11);
    goto corral_source_split_4577;

  $bb61:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} ldv_stop();
    goto corral_source_split_4583;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb65:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb72_dummy:
    call {:si_unique_call 1} out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74 := ldv_scsi_host_template_scsi_host_template_instance_4_loop_$bb16(in_$p7, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74);
    return;

  exit:
    return;
}



procedure ldv_scsi_host_template_scsi_host_template_instance_4_loop_$bb16(in_$p7: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i1, in_$i58: i1, in_$i59: i1, in_$i60: i1, in_$i61: i1, in_$i62: i1, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i32, in_$i74: i1) returns (out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i1, out_$i58: i1, out_$i59: i1, out_$i60: i1, out_$i61: i1, out_$i62: i1, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i32, out_$i74: i1);
  modifies $CurrAddr, $M.1, $M.11, $M.29, $M.19, $M.26, assertsPassed, $M.20, $M.21, $M.6, $M.12, $M.23, $M.24;



implementation ldv_scsi_host_template_scsi_host_template_instance_4_loop_$bb7(in_$p7: ref, in_$i10: i32, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i27: i1, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i31: i1, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i1, in_$i58: i1, in_$i59: i1, in_$i60: i1, in_$i61: i1, in_$i62: i1, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i32, in_$i74: i1) returns (out_$i10: i32, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i27: i1, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i31: i1, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i1, out_$i58: i1, out_$i59: i1, out_$i60: i1, out_$i61: i1, out_$i62: i1, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i32, out_$i74: i1)
{

  entry:
    out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74 := in_$i10, in_$p11, in_$p12, in_$p13, in_$p14, in_$i15, in_$i16, in_$p17, in_$p18, in_$p19, in_$p20, in_$p21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p35, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40, in_$p41, in_$p42, in_$p43, in_$p44, in_$p45, in_$p46, in_$p47, in_$p48, in_$p49, in_$p50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$p63, in_$p64, in_$p65, in_$p66, in_$p67, in_$p68, in_$p69, in_$p70, in_$p71, in_$p72, in_$i73, in_$i74;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4443;

  $bb18:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i24;
    goto $bb18_dummy;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i32(out_$i33, 0);
    goto corral_source_split_4496;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} out_$i33 := ldv_undef_int();
    call {:si_unique_call 1490} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_4495;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb22:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_153:
    goto corral_source_split_4507;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} ldv_scsi_host_template_instance_release_4_2(out_$p44, in_$p7);
    goto SeqInstr_152;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.1, out_$p43);
    goto corral_source_split_4506;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p42, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_4505;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.1, out_$p41);
    goto corral_source_split_4504;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p7, $mul.ref(0, 3816)), $mul.ref(504, 1));
    goto corral_source_split_4503;

  $bb21:
    assume out_$i40 == 1;
    goto corral_source_split_4502;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i64(out_$i39, 0);
    goto corral_source_split_4482;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    out_$i39 := $p2i.ref.i64(out_$p38);
    goto corral_source_split_4481;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.1, out_$p37);
    goto corral_source_split_4480;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p36, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_4479;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.1, out_$p35);
    goto corral_source_split_4478;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p7, $mul.ref(0, 3816)), $mul.ref(504, 1));
    goto corral_source_split_4477;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    assume out_$i30 == 1;
    goto $bb14;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i29, 0);
    goto corral_source_split_4470;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} out_$i29 := ldv_undef_int();
    call {:si_unique_call 1482} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_4469;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} ldv_assume(out_$i28);
    goto corral_source_split_4468;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i1.i32(out_$i27);
    goto corral_source_split_4467;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i24, 0);
    goto corral_source_split_4466;

  $bb11:
    assume out_$i26 == 1;
    goto corral_source_split_4465;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i32(out_$i25, 0);
    goto corral_source_split_4463;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} out_$i25 := ldv_undef_int();
    call {:si_unique_call 1479} {:cexpr "tmp"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_4462;

  SeqInstr_150:
    call {:si_unique_call 1477} {:cexpr "ldv_4_ret_default"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_4461;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} out_$i24 := ldv_ldv_post_probe_135(out_$i23);
    goto SeqInstr_149;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4460;

  $bb9:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    out_$i23 := out_$i10;
    goto $bb10;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    out_$i23 := out_$i22;
    goto $bb10;

  SeqInstr_147:
    call {:si_unique_call 1475} {:cexpr "ldv_4_ret_default"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_4458;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} out_$i22 := ldv_scsi_host_template_instance_probe_4_10(out_$p21, in_$p7);
    goto SeqInstr_146;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_4457;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.1, out_$p19);
    goto corral_source_split_4456;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p18, $mul.ref(0, 336)), $mul.ref(16, 1));
    goto corral_source_split_4455;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.1, out_$p17);
    goto corral_source_split_4454;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p7, $mul.ref(0, 3816)), $mul.ref(504, 1));
    goto corral_source_split_4453;

  $bb8:
    assume out_$i16 == 1;
    goto corral_source_split_4452;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_4450;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_4449;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.1, out_$p13);
    goto corral_source_split_4448;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p12, $mul.ref(0, 336)), $mul.ref(16, 1));
    goto corral_source_split_4447;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.1, out_$p11);
    goto corral_source_split_4446;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p7, $mul.ref(0, 3816)), $mul.ref(504, 1));
    goto corral_source_split_4445;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} ldv_ldv_pre_probe_134();
    goto corral_source_split_4444;

  $bb20:
    assume out_$i74 == 1;
    goto corral_source_split_4500;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb72;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i32(out_$i73, 0);
    goto corral_source_split_4592;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} out_$i73 := ldv_undef_int();
    call {:si_unique_call 1514} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_4591;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} ldv_free(out_$p72);
    goto corral_source_split_4590;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    out_$p72 := $bitcast.ref.ref(out_$p50);
    goto corral_source_split_4589;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} ldv_free(out_$p71);
    goto corral_source_split_4588;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    out_$p71 := $bitcast.ref.ref(out_$p48);
    goto corral_source_split_4587;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} ldv_free(out_$p70);
    goto corral_source_split_4586;

  $bb71:
    assume {:verifier.code 0} true;
    out_$p70 := $bitcast.ref.ref(out_$p46);
    goto corral_source_split_4585;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    goto $bb69;

  SeqInstr_156:
    goto corral_source_split_4511;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} ldv_scsi_host_template_instance_callback_4_32($u2, $u3, $u4, $u0);
    goto SeqInstr_155;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb24:
    assume out_$i52 == 1;
    goto corral_source_split_4509;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i51, 1);
    goto corral_source_split_4493;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} out_$i51 := ldv_undef_int();
    call {:si_unique_call 1488} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_4492;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    out_$p50 := $bitcast.ref.ref(out_$p49);
    goto corral_source_split_4491;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} out_$p49 := ldv_xmalloc(4);
    goto corral_source_split_4490;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(out_$p47);
    goto corral_source_split_4489;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} out_$p47 := ldv_xmalloc(480);
    goto corral_source_split_4488;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    out_$p46 := $bitcast.ref.ref(out_$p45);
    goto corral_source_split_4487;

  $bb16:
    call out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74 := ldv_scsi_host_template_scsi_host_template_instance_4_loop_$bb16(in_$p7, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74);
    goto $bb16_last;

  $bb16_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} out_$p45 := ldv_xmalloc(3464);
    goto corral_source_split_4486;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb72:
    assume {:verifier.code 0} true;
    assume !(out_$i74 == 1);
    assume false;
    return;

  $bb15:
    assume !(out_$i30 == 1);
    goto corral_source_split_4484;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} ldv_free(out_$p66);
    goto corral_source_split_4523;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    out_$p66 := $bitcast.ref.ref(out_$p65);
    goto corral_source_split_4522;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} ldv_free(out_$p63);
    goto corral_source_split_4521;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} ldv_scsi_host_template_instance_callback_4_29($u5, $u3, out_$p63, $u0, out_$p65);
    goto corral_source_split_4520;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    out_$p65 := $bitcast.ref.ref(out_$p64);
    goto corral_source_split_4519;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} out_$p64 := ldv_xmalloc(8);
    goto corral_source_split_4518;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} out_$p63 := ldv_xmalloc(1);
    goto corral_source_split_4517;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb28:
    assume out_$i53 == 1;
    goto corral_source_split_4515;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i51, 2);
    goto corral_source_split_4513;

  $bb25:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  SeqInstr_159:
    goto corral_source_split_4529;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} ldv_scsi_host_template_instance_callback_4_28($u6, in_$p7, $u7);
    goto SeqInstr_158;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume out_$i54 == 1;
    goto corral_source_split_4527;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i51, 3);
    goto corral_source_split_4525;

  $bb29:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} ldv_free(out_$p69);
    goto corral_source_split_4539;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    out_$p69 := $bitcast.ref.ref(out_$p68);
    goto corral_source_split_4538;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} ldv_scsi_host_template_instance_callback_4_25($u8, out_$p68, $u3);
    goto corral_source_split_4537;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    out_$p68 := $bitcast.ref.ref(out_$p67);
    goto corral_source_split_4536;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} out_$p67 := ldv_xmalloc(976);
    goto corral_source_split_4535;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume out_$i55 == 1;
    goto corral_source_split_4533;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i51, 4);
    goto corral_source_split_4531;

  $bb33:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} ldv_scsi_host_template_instance_callback_4_22($u9, $u3, $u0, $u4);
    goto corral_source_split_4545;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb40:
    assume out_$i56 == 1;
    goto corral_source_split_4543;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i32(out_$i51, 5);
    goto corral_source_split_4541;

  $bb37:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} ldv_scsi_host_template_instance_callback_4_21($u10, in_$p7);
    goto corral_source_split_4551;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb44:
    assume out_$i57 == 1;
    goto corral_source_split_4549;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i32(out_$i51, 6);
    goto corral_source_split_4547;

  $bb41:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  SeqInstr_162:
    goto corral_source_split_4557;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} ldv_scsi_host_template_instance_callback_4_20($u11, $u7);
    goto SeqInstr_161;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb48:
    assume out_$i58 == 1;
    goto corral_source_split_4555;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i51, 7);
    goto corral_source_split_4553;

  $bb45:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  SeqInstr_165:
    goto corral_source_split_4563;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} ldv_scsi_host_template_instance_callback_4_19($u11, $u7);
    goto SeqInstr_164;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb52:
    assume out_$i59 == 1;
    goto corral_source_split_4561;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb51:
    assume {:verifier.code 0} true;
    out_$i59 := $eq.i32(out_$i51, 8);
    goto corral_source_split_4559;

  $bb49:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  SeqInstr_168:
    goto corral_source_split_4569;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} ldv_scsi_host_template_instance_callback_4_18($u11, $u7);
    goto SeqInstr_167;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb56:
    assume out_$i60 == 1;
    goto corral_source_split_4567;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb55:
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i32(out_$i51, 9);
    goto corral_source_split_4565;

  $bb53:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  SeqInstr_171:
    goto corral_source_split_4575;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} ldv_scsi_host_template_instance_callback_4_17($u11, $u7);
    goto SeqInstr_170;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb60:
    assume out_$i61 == 1;
    goto corral_source_split_4573;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb59:
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i32(out_$i51, 10);
    goto corral_source_split_4571;

  $bb57:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} ldv_scsi_host_template_instance_callback_4_4($u12, out_$p46, out_$p48, $u0, out_$p50);
    goto corral_source_split_4581;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb64:
    assume out_$i62 == 1;
    goto corral_source_split_4579;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb63:
    assume {:verifier.code 0} true;
    out_$i62 := $eq.i32(out_$i51, 11);
    goto corral_source_split_4577;

  $bb61:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} ldv_stop();
    goto corral_source_split_4583;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb65:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} ldv_assume(out_$i32);
    goto corral_source_split_4475;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i1.i32(out_$i31);
    goto corral_source_split_4474;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i24, 0);
    goto corral_source_split_4473;

  $bb12:
    assume !(out_$i26 == 1);
    goto corral_source_split_4472;

  $bb18_dummy:
    call {:si_unique_call 1} out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74 := ldv_scsi_host_template_scsi_host_template_instance_4_loop_$bb7(in_$p7, out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74);
    return;

  exit:
    return;
}



procedure ldv_scsi_host_template_scsi_host_template_instance_4_loop_$bb7(in_$p7: ref, in_$i10: i32, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i27: i1, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i31: i1, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i1, in_$i58: i1, in_$i59: i1, in_$i60: i1, in_$i61: i1, in_$i62: i1, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i32, in_$i74: i1) returns (out_$i10: i32, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i27: i1, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i31: i1, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i1, out_$i58: i1, out_$i59: i1, out_$i60: i1, out_$i61: i1, out_$i62: i1, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i32, out_$i74: i1);
  modifies $M.1, $M.11, $M.6, $CurrAddr, $M.19, $M.20, $M.21, $M.12, assertsPassed, $M.30, $M.31, $M.29, $M.26, $M.23, $M.24;



implementation ldv_scsi_host_template_scsi_host_template_instance_5_loop_$bb16(in_$p7: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i1, in_$i58: i1, in_$i59: i1, in_$i60: i1, in_$i61: i1, in_$i62: i1, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i32, in_$i74: i1) returns (out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i1, out_$i58: i1, out_$i59: i1, out_$i60: i1, out_$i61: i1, out_$i62: i1, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i32, out_$i74: i1)
{

  entry:
    out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74 := in_$p45, in_$p46, in_$p47, in_$p48, in_$p49, in_$p50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$p63, in_$p64, in_$p65, in_$p66, in_$p67, in_$p68, in_$p69, in_$p70, in_$p71, in_$p72, in_$i73, in_$i74;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} out_$p45 := ldv_xmalloc(3464);
    goto corral_source_split_4654;

  $bb72:
    assume {:verifier.code 0} true;
    assume !(out_$i74 == 1);
    goto $bb72_dummy;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i32(out_$i73, 0);
    goto corral_source_split_4760;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} out_$i73 := ldv_undef_int();
    call {:si_unique_call 1559} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_4759;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} ldv_free(out_$p72);
    goto corral_source_split_4758;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    out_$p72 := $bitcast.ref.ref(out_$p50);
    goto corral_source_split_4757;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} ldv_free(out_$p71);
    goto corral_source_split_4756;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    out_$p71 := $bitcast.ref.ref(out_$p48);
    goto corral_source_split_4755;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} ldv_free(out_$p70);
    goto corral_source_split_4754;

  $bb71:
    assume {:verifier.code 0} true;
    out_$p70 := $bitcast.ref.ref(out_$p46);
    goto corral_source_split_4753;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    goto $bb69;

  SeqInstr_183:
    goto corral_source_split_4679;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} ldv_scsi_host_template_instance_callback_5_32($u2, $u3, $u4, $u0);
    goto SeqInstr_182;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb24:
    assume out_$i52 == 1;
    goto corral_source_split_4677;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i51, 1);
    goto corral_source_split_4661;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} out_$i51 := ldv_undef_int();
    call {:si_unique_call 1533} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_4660;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    out_$p50 := $bitcast.ref.ref(out_$p49);
    goto corral_source_split_4659;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} out_$p49 := ldv_xmalloc(4);
    goto corral_source_split_4658;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(out_$p47);
    goto corral_source_split_4657;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} out_$p47 := ldv_xmalloc(480);
    goto corral_source_split_4656;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    out_$p46 := $bitcast.ref.ref(out_$p45);
    goto corral_source_split_4655;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} ldv_free(out_$p66);
    goto corral_source_split_4691;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    out_$p66 := $bitcast.ref.ref(out_$p65);
    goto corral_source_split_4690;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} ldv_free(out_$p63);
    goto corral_source_split_4689;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} ldv_scsi_host_template_instance_callback_5_29($u5, $u3, out_$p63, $u0, out_$p65);
    goto corral_source_split_4688;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    out_$p65 := $bitcast.ref.ref(out_$p64);
    goto corral_source_split_4687;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} out_$p64 := ldv_xmalloc(8);
    goto corral_source_split_4686;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} out_$p63 := ldv_xmalloc(1);
    goto corral_source_split_4685;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb28:
    assume out_$i53 == 1;
    goto corral_source_split_4683;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i51, 2);
    goto corral_source_split_4681;

  $bb25:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  SeqInstr_186:
    goto corral_source_split_4697;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} ldv_scsi_host_template_instance_callback_5_28($u6, in_$p7, $u7);
    goto SeqInstr_185;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume out_$i54 == 1;
    goto corral_source_split_4695;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i51, 3);
    goto corral_source_split_4693;

  $bb29:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} ldv_free(out_$p69);
    goto corral_source_split_4707;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    out_$p69 := $bitcast.ref.ref(out_$p68);
    goto corral_source_split_4706;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} ldv_scsi_host_template_instance_callback_5_25($u8, out_$p68, $u3);
    goto corral_source_split_4705;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    out_$p68 := $bitcast.ref.ref(out_$p67);
    goto corral_source_split_4704;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} out_$p67 := ldv_xmalloc(976);
    goto corral_source_split_4703;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume out_$i55 == 1;
    goto corral_source_split_4701;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i51, 4);
    goto corral_source_split_4699;

  $bb33:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} ldv_scsi_host_template_instance_callback_5_22($u9, $u3, $u0, $u4);
    goto corral_source_split_4713;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb40:
    assume out_$i56 == 1;
    goto corral_source_split_4711;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i32(out_$i51, 5);
    goto corral_source_split_4709;

  $bb37:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} ldv_scsi_host_template_instance_callback_5_21($u10, in_$p7);
    goto corral_source_split_4719;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb44:
    assume out_$i57 == 1;
    goto corral_source_split_4717;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i32(out_$i51, 6);
    goto corral_source_split_4715;

  $bb41:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  SeqInstr_189:
    goto corral_source_split_4725;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} ldv_scsi_host_template_instance_callback_5_20($u11, $u7);
    goto SeqInstr_188;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb48:
    assume out_$i58 == 1;
    goto corral_source_split_4723;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i51, 7);
    goto corral_source_split_4721;

  $bb45:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  SeqInstr_192:
    goto corral_source_split_4731;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} ldv_scsi_host_template_instance_callback_5_19($u11, $u7);
    goto SeqInstr_191;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb52:
    assume out_$i59 == 1;
    goto corral_source_split_4729;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb51:
    assume {:verifier.code 0} true;
    out_$i59 := $eq.i32(out_$i51, 8);
    goto corral_source_split_4727;

  $bb49:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  SeqInstr_195:
    goto corral_source_split_4737;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} ldv_scsi_host_template_instance_callback_5_18($u11, $u7);
    goto SeqInstr_194;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb56:
    assume out_$i60 == 1;
    goto corral_source_split_4735;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb55:
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i32(out_$i51, 9);
    goto corral_source_split_4733;

  $bb53:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  SeqInstr_198:
    goto corral_source_split_4743;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} ldv_scsi_host_template_instance_callback_5_17($u11, $u7);
    goto SeqInstr_197;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb60:
    assume out_$i61 == 1;
    goto corral_source_split_4741;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb59:
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i32(out_$i51, 10);
    goto corral_source_split_4739;

  $bb57:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} ldv_scsi_host_template_instance_callback_5_4($u12, out_$p46, out_$p48, $u0, out_$p50);
    goto corral_source_split_4749;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb64:
    assume out_$i62 == 1;
    goto corral_source_split_4747;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb63:
    assume {:verifier.code 0} true;
    out_$i62 := $eq.i32(out_$i51, 11);
    goto corral_source_split_4745;

  $bb61:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} ldv_stop();
    goto corral_source_split_4751;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb65:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb72_dummy:
    call {:si_unique_call 1} out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74 := ldv_scsi_host_template_scsi_host_template_instance_5_loop_$bb16(in_$p7, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74);
    return;

  exit:
    return;
}



procedure ldv_scsi_host_template_scsi_host_template_instance_5_loop_$bb16(in_$p7: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i1, in_$i58: i1, in_$i59: i1, in_$i60: i1, in_$i61: i1, in_$i62: i1, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i32, in_$i74: i1) returns (out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i1, out_$i58: i1, out_$i59: i1, out_$i60: i1, out_$i61: i1, out_$i62: i1, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i32, out_$i74: i1);
  modifies $CurrAddr, $M.1, $M.11, $M.29, $M.19, $M.26, assertsPassed, $M.20, $M.21, $M.6, $M.12, $M.23, $M.24;



implementation ldv_scsi_host_template_scsi_host_template_instance_5_loop_$bb7(in_$p7: ref, in_$i10: i32, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i27: i1, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i31: i1, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i1, in_$i58: i1, in_$i59: i1, in_$i60: i1, in_$i61: i1, in_$i62: i1, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i32, in_$i74: i1) returns (out_$i10: i32, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i27: i1, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i31: i1, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i1, out_$i58: i1, out_$i59: i1, out_$i60: i1, out_$i61: i1, out_$i62: i1, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i32, out_$i74: i1)
{

  entry:
    out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74 := in_$i10, in_$p11, in_$p12, in_$p13, in_$p14, in_$i15, in_$i16, in_$p17, in_$p18, in_$p19, in_$p20, in_$p21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p35, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40, in_$p41, in_$p42, in_$p43, in_$p44, in_$p45, in_$p46, in_$p47, in_$p48, in_$p49, in_$p50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$p63, in_$p64, in_$p65, in_$p66, in_$p67, in_$p68, in_$p69, in_$p70, in_$p71, in_$p72, in_$i73, in_$i74;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4611;

  $bb18:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i24;
    goto $bb18_dummy;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i32(out_$i33, 0);
    goto corral_source_split_4664;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} out_$i33 := ldv_undef_int();
    call {:si_unique_call 1535} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_4663;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb22:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_180:
    goto corral_source_split_4675;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} ldv_scsi_host_template_instance_release_5_2(out_$p44, in_$p7);
    goto SeqInstr_179;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.1, out_$p43);
    goto corral_source_split_4674;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p42, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_4673;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.1, out_$p41);
    goto corral_source_split_4672;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p7, $mul.ref(0, 3816)), $mul.ref(504, 1));
    goto corral_source_split_4671;

  $bb21:
    assume out_$i40 == 1;
    goto corral_source_split_4670;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i64(out_$i39, 0);
    goto corral_source_split_4650;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    out_$i39 := $p2i.ref.i64(out_$p38);
    goto corral_source_split_4649;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.1, out_$p37);
    goto corral_source_split_4648;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p36, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_4647;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.1, out_$p35);
    goto corral_source_split_4646;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p7, $mul.ref(0, 3816)), $mul.ref(504, 1));
    goto corral_source_split_4645;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    assume out_$i30 == 1;
    goto $bb14;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i29, 0);
    goto corral_source_split_4638;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} out_$i29 := ldv_undef_int();
    call {:si_unique_call 1527} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_4637;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} ldv_assume(out_$i28);
    goto corral_source_split_4636;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i1.i32(out_$i27);
    goto corral_source_split_4635;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i24, 0);
    goto corral_source_split_4634;

  $bb11:
    assume out_$i26 == 1;
    goto corral_source_split_4633;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i32(out_$i25, 0);
    goto corral_source_split_4631;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} out_$i25 := ldv_undef_int();
    call {:si_unique_call 1524} {:cexpr "tmp"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_4630;

  SeqInstr_177:
    call {:si_unique_call 1522} {:cexpr "ldv_5_ret_default"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_4629;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} out_$i24 := ldv_ldv_post_probe_137(out_$i23);
    goto SeqInstr_176;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4628;

  $bb9:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    out_$i23 := out_$i10;
    goto $bb10;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    out_$i23 := out_$i22;
    goto $bb10;

  SeqInstr_174:
    call {:si_unique_call 1520} {:cexpr "ldv_5_ret_default"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_4626;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} out_$i22 := ldv_scsi_host_template_instance_probe_5_10(out_$p21, in_$p7);
    goto SeqInstr_173;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_4625;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.1, out_$p19);
    goto corral_source_split_4624;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p18, $mul.ref(0, 336)), $mul.ref(16, 1));
    goto corral_source_split_4623;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.1, out_$p17);
    goto corral_source_split_4622;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p7, $mul.ref(0, 3816)), $mul.ref(504, 1));
    goto corral_source_split_4621;

  $bb8:
    assume out_$i16 == 1;
    goto corral_source_split_4620;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_4618;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_4617;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.1, out_$p13);
    goto corral_source_split_4616;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p12, $mul.ref(0, 336)), $mul.ref(16, 1));
    goto corral_source_split_4615;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.1, out_$p11);
    goto corral_source_split_4614;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p7, $mul.ref(0, 3816)), $mul.ref(504, 1));
    goto corral_source_split_4613;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} ldv_ldv_pre_probe_136();
    goto corral_source_split_4612;

  $bb20:
    assume out_$i74 == 1;
    goto corral_source_split_4668;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb72;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i32(out_$i73, 0);
    goto corral_source_split_4760;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} out_$i73 := ldv_undef_int();
    call {:si_unique_call 1559} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_4759;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} ldv_free(out_$p72);
    goto corral_source_split_4758;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    out_$p72 := $bitcast.ref.ref(out_$p50);
    goto corral_source_split_4757;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} ldv_free(out_$p71);
    goto corral_source_split_4756;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    out_$p71 := $bitcast.ref.ref(out_$p48);
    goto corral_source_split_4755;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} ldv_free(out_$p70);
    goto corral_source_split_4754;

  $bb71:
    assume {:verifier.code 0} true;
    out_$p70 := $bitcast.ref.ref(out_$p46);
    goto corral_source_split_4753;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    goto $bb69;

  SeqInstr_183:
    goto corral_source_split_4679;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} ldv_scsi_host_template_instance_callback_5_32($u2, $u3, $u4, $u0);
    goto SeqInstr_182;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb24:
    assume out_$i52 == 1;
    goto corral_source_split_4677;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i51, 1);
    goto corral_source_split_4661;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} out_$i51 := ldv_undef_int();
    call {:si_unique_call 1533} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_4660;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    out_$p50 := $bitcast.ref.ref(out_$p49);
    goto corral_source_split_4659;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} out_$p49 := ldv_xmalloc(4);
    goto corral_source_split_4658;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(out_$p47);
    goto corral_source_split_4657;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} out_$p47 := ldv_xmalloc(480);
    goto corral_source_split_4656;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    out_$p46 := $bitcast.ref.ref(out_$p45);
    goto corral_source_split_4655;

  $bb16:
    call out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74 := ldv_scsi_host_template_scsi_host_template_instance_5_loop_$bb16(in_$p7, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74);
    goto $bb16_last;

  $bb16_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} out_$p45 := ldv_xmalloc(3464);
    goto corral_source_split_4654;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb72:
    assume {:verifier.code 0} true;
    assume !(out_$i74 == 1);
    assume false;
    return;

  $bb15:
    assume !(out_$i30 == 1);
    goto corral_source_split_4652;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} ldv_free(out_$p66);
    goto corral_source_split_4691;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    out_$p66 := $bitcast.ref.ref(out_$p65);
    goto corral_source_split_4690;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} ldv_free(out_$p63);
    goto corral_source_split_4689;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} ldv_scsi_host_template_instance_callback_5_29($u5, $u3, out_$p63, $u0, out_$p65);
    goto corral_source_split_4688;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    out_$p65 := $bitcast.ref.ref(out_$p64);
    goto corral_source_split_4687;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} out_$p64 := ldv_xmalloc(8);
    goto corral_source_split_4686;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} out_$p63 := ldv_xmalloc(1);
    goto corral_source_split_4685;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb28:
    assume out_$i53 == 1;
    goto corral_source_split_4683;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i51, 2);
    goto corral_source_split_4681;

  $bb25:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  SeqInstr_186:
    goto corral_source_split_4697;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} ldv_scsi_host_template_instance_callback_5_28($u6, in_$p7, $u7);
    goto SeqInstr_185;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume out_$i54 == 1;
    goto corral_source_split_4695;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i51, 3);
    goto corral_source_split_4693;

  $bb29:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} ldv_free(out_$p69);
    goto corral_source_split_4707;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    out_$p69 := $bitcast.ref.ref(out_$p68);
    goto corral_source_split_4706;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} ldv_scsi_host_template_instance_callback_5_25($u8, out_$p68, $u3);
    goto corral_source_split_4705;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    out_$p68 := $bitcast.ref.ref(out_$p67);
    goto corral_source_split_4704;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} out_$p67 := ldv_xmalloc(976);
    goto corral_source_split_4703;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume out_$i55 == 1;
    goto corral_source_split_4701;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i51, 4);
    goto corral_source_split_4699;

  $bb33:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} ldv_scsi_host_template_instance_callback_5_22($u9, $u3, $u0, $u4);
    goto corral_source_split_4713;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb40:
    assume out_$i56 == 1;
    goto corral_source_split_4711;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i32(out_$i51, 5);
    goto corral_source_split_4709;

  $bb37:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} ldv_scsi_host_template_instance_callback_5_21($u10, in_$p7);
    goto corral_source_split_4719;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb44:
    assume out_$i57 == 1;
    goto corral_source_split_4717;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i32(out_$i51, 6);
    goto corral_source_split_4715;

  $bb41:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  SeqInstr_189:
    goto corral_source_split_4725;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} ldv_scsi_host_template_instance_callback_5_20($u11, $u7);
    goto SeqInstr_188;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb48:
    assume out_$i58 == 1;
    goto corral_source_split_4723;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i51, 7);
    goto corral_source_split_4721;

  $bb45:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  SeqInstr_192:
    goto corral_source_split_4731;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} ldv_scsi_host_template_instance_callback_5_19($u11, $u7);
    goto SeqInstr_191;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb52:
    assume out_$i59 == 1;
    goto corral_source_split_4729;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb51:
    assume {:verifier.code 0} true;
    out_$i59 := $eq.i32(out_$i51, 8);
    goto corral_source_split_4727;

  $bb49:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  SeqInstr_195:
    goto corral_source_split_4737;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} ldv_scsi_host_template_instance_callback_5_18($u11, $u7);
    goto SeqInstr_194;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb56:
    assume out_$i60 == 1;
    goto corral_source_split_4735;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb55:
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i32(out_$i51, 9);
    goto corral_source_split_4733;

  $bb53:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  SeqInstr_198:
    goto corral_source_split_4743;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} ldv_scsi_host_template_instance_callback_5_17($u11, $u7);
    goto SeqInstr_197;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb60:
    assume out_$i61 == 1;
    goto corral_source_split_4741;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb59:
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i32(out_$i51, 10);
    goto corral_source_split_4739;

  $bb57:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} ldv_scsi_host_template_instance_callback_5_4($u12, out_$p46, out_$p48, $u0, out_$p50);
    goto corral_source_split_4749;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb64:
    assume out_$i62 == 1;
    goto corral_source_split_4747;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb63:
    assume {:verifier.code 0} true;
    out_$i62 := $eq.i32(out_$i51, 11);
    goto corral_source_split_4745;

  $bb61:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} ldv_stop();
    goto corral_source_split_4751;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb65:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} ldv_assume(out_$i32);
    goto corral_source_split_4643;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i1.i32(out_$i31);
    goto corral_source_split_4642;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i24, 0);
    goto corral_source_split_4641;

  $bb12:
    assume !(out_$i26 == 1);
    goto corral_source_split_4640;

  $bb18_dummy:
    call {:si_unique_call 1} out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74 := ldv_scsi_host_template_scsi_host_template_instance_5_loop_$bb7(in_$p7, out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74);
    return;

  exit:
    return;
}



procedure ldv_scsi_host_template_scsi_host_template_instance_5_loop_$bb7(in_$p7: ref, in_$i10: i32, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i27: i1, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i31: i1, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i1, in_$i58: i1, in_$i59: i1, in_$i60: i1, in_$i61: i1, in_$i62: i1, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i32, in_$i74: i1) returns (out_$i10: i32, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i27: i1, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i31: i1, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i1, out_$i58: i1, out_$i59: i1, out_$i60: i1, out_$i61: i1, out_$i62: i1, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i32, out_$i74: i1);
  modifies $M.1, $M.11, $M.6, $CurrAddr, $M.19, $M.20, $M.21, $M.12, assertsPassed, $M.30, $M.31, $M.29, $M.26, $M.23, $M.24;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation megaraid_abort_and_reset_loop_$bb8(in_$p1: ref, in_$i34: i64, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i64, in_$i44: i1, in_$p45: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$i73: i1, in_$p36: ref, in_$p37: ref) returns (out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i64, out_$i44: i1, out_$p45: ref, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$i73: i1, out_$p36: ref, out_$p37: ref)
{

  entry:
    out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$p45, out_$p70, out_$p71, out_$i72, out_$i73, out_$p36, out_$p37 := in_$p38, in_$p39, in_$p40, in_$p41, in_$i42, in_$i43, in_$i44, in_$p45, in_$p70, in_$p71, in_$i72, in_$i73, in_$p36, in_$p37;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4943;

  $bb18:
    assume out_$i73 == 1;
    assume {:verifier.code 0} true;
    out_$p36, out_$p37 := out_$p71, out_$p36;
    goto $bb18_dummy;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i64(out_$i72, in_$i34);
    goto corral_source_split_4995;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    out_$i72 := $p2i.ref.i64(out_$p36);
    goto corral_source_split_4994;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    out_$p71 := $load.ref($M.1, out_$p70);
    goto corral_source_split_4993;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(out_$p36, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4992;

  $bb11:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    out_$p45 := out_$p39;
    assume true;
    goto $bb11;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i64(out_$i42, out_$i43);
    goto corral_source_split_4951;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    out_$i43 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_4950;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(out_$p41);
    goto corral_source_split_4949;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.1, out_$p40);
    goto corral_source_split_4948;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p38, $mul.ref($sub.ref(0, 8), 184)), $mul.ref(104, 1));
    goto corral_source_split_4947;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref(out_$p38, $mul.ref($sub.ref(0, 8), 184));
    goto corral_source_split_4946;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p38 := $bitcast.ref.ref(out_$p37);
    goto corral_source_split_4945;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$p45, out_$p70, out_$p71, out_$i72, out_$i73, out_$p36, out_$p37 := megaraid_abort_and_reset_loop_$bb8(in_$p1, in_$i34, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$p45, out_$p70, out_$p71, out_$i72, out_$i73, out_$p36, out_$p37);
    return;

  exit:
    return;
}



procedure megaraid_abort_and_reset_loop_$bb8(in_$p1: ref, in_$i34: i64, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i64, in_$i44: i1, in_$p45: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$i73: i1, in_$p36: ref, in_$p37: ref) returns (out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i64, out_$i44: i1, out_$p45: ref, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$i73: i1, out_$p36: ref, out_$p37: ref);



implementation mega_rundoneq_loop_$bb4(in_$i6: i64, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$i17: i1, in_$p8: ref) returns (out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$i17: i1, out_$p8: ref)
{

  entry:
    out_$p9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p8 := in_$p9, in_$p10, in_$p11, in_$p12, in_$p13, in_$p14, in_$p15, in_$i16, in_$i17, in_$p8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5009;

  $bb6:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$p8 := out_$p15;
    goto $bb6_dummy;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i64(out_$i16, in_$i6);
    goto corral_source_split_5019;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    out_$i16 := $p2i.ref.i64(out_$p15);
    goto corral_source_split_5018;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.1, out_$p14);
    goto corral_source_split_5017;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5016;

  SeqInstr_234:
    goto corral_source_split_5015;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.1, out_$p12);
    call {:si_unique_call 1616} devirtbounce.9(out_$p13, out_$p11);
    goto SeqInstr_233;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p10, $mul.ref($sub.ref(0, 384), 472)), $mul.ref(376, 1));
    goto corral_source_split_5014;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref(out_$p10, $mul.ref($sub.ref(0, 384), 472));
    goto corral_source_split_5013;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    out_$p10 := $bitcast.ref.ref(out_$p9);
    goto corral_source_split_5012;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $bitcast.ref.ref(out_$p8);
    goto corral_source_split_5011;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p8 := mega_rundoneq_loop_$bb4(in_$i6, out_$p9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p8);
    return;

  exit:
    return;
}



procedure mega_rundoneq_loop_$bb4(in_$i6: i64, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$i17: i1, in_$p8: ref) returns (out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$i17: i1, out_$p8: ref);
  modifies $M.11, $M.6, $M.1, $CurrAddr, $M.12, assertsPassed, $M.19, $M.20, $M.21;



implementation __mega_runpendq_loop_$bb4(in_$p0: ref, in_$i8: i64, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p10: ref, in_$p11: ref) returns (out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p10: ref, out_$p11: ref)
{

  entry:
    out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p10, out_$p11 := in_$p12, in_$p13, in_$p14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$p20, in_$p21, in_$i22, in_$i23, in_$p10, in_$p11;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5298;

  $bb13:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$p10, out_$p11 := out_$p21, out_$p10;
    goto $bb13_dummy;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i64(out_$i22, in_$i8);
    goto corral_source_split_5316;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    out_$i22 := $p2i.ref.i64(out_$p10);
    goto corral_source_split_5315;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.1, out_$p20);
    goto corral_source_split_5314;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p10, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5313;

  $bb7:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i32(out_$i18, 0);
    goto corral_source_split_5309;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1687} out_$i18 := issue_scb(in_$p0, out_$p13);
    call {:si_unique_call 1688} {:cexpr "tmp"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_5308;

  $bb6:
    assume out_$i17 == 1;
    goto corral_source_split_5307;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i16, 0);
    goto corral_source_split_5305;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    out_$i16 := $and.i32(out_$i15, 4);
    goto corral_source_split_5304;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.1, out_$p14);
    goto corral_source_split_5303;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p12, $mul.ref($sub.ref(0, 8), 184)), $mul.ref(4, 1));
    goto corral_source_split_5302;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref(out_$p12, $mul.ref($sub.ref(0, 8), 184));
    goto corral_source_split_5301;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p12 := $bitcast.ref.ref(out_$p11);
    goto corral_source_split_5300;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p10, out_$p11 := __mega_runpendq_loop_$bb4(in_$p0, in_$i8, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p10, out_$p11);
    return;

  exit:
    return;
}



procedure __mega_runpendq_loop_$bb4(in_$p0: ref, in_$i8: i64, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p10: ref, in_$p11: ref) returns (out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p10: ref, out_$p11: ref);
  modifies $M.1;



implementation issue_scb_loop_$bb6(in_$p16: ref, in_$i21: i32, in_$i22: i32, in_$i23: i8, in_$i24: i32, in_$i25: i1, in_$i20: i32, in_$i26: i16, in_$i27: i32, in_$i28: i1) returns (out_$i21: i32, out_$i22: i32, out_$i23: i8, out_$i24: i32, out_$i25: i1, out_$i20: i32, out_$i26: i16, out_$i27: i32, out_$i28: i1)
{

  entry:
    out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i20, out_$i26, out_$i27, out_$i28 := in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i20, in_$i26, in_$i27, in_$i28;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5343;

  $bb8:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i20 := out_$i22;
    goto $bb8_dummy;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i32(out_$i24, 0);
    goto corral_source_split_5353;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i8.i32(out_$i23);
    goto corral_source_split_5352;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i8($M.1, in_$p16);
    goto corral_source_split_5351;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i32(out_$i21, 1);
    call {:si_unique_call 1693} {:cexpr "i"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_5350;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} __const_udelay(4295);
    goto corral_source_split_5349;

  $bb7:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5348;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i20;
    assume true;
    goto $bb7;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    out_$i28 := $ult.i32(out_$i20, out_$i27);
    goto corral_source_split_5346;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i16.i32(out_$i26);
    goto corral_source_split_5345;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    out_$i26 := $M.22;
    goto corral_source_split_5344;

  $bb8_dummy:
    call {:si_unique_call 1} out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i20, out_$i26, out_$i27, out_$i28 := issue_scb_loop_$bb6(in_$p16, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i20, out_$i26, out_$i27, out_$i28);
    return;

  exit:
    return;
}



procedure issue_scb_loop_$bb6(in_$p16: ref, in_$i21: i32, in_$i22: i32, in_$i23: i8, in_$i24: i32, in_$i25: i1, in_$i20: i32, in_$i26: i16, in_$i27: i32, in_$i28: i1) returns (out_$i21: i32, out_$i22: i32, out_$i23: i8, out_$i24: i32, out_$i25: i1, out_$i20: i32, out_$i26: i16, out_$i27: i32, out_$i28: i1);



implementation mega_build_sglist_loop_$bb17(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$i6: i32, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$p40: ref, in_$i41: i64, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$p46: ref, in_$p47: ref, in_$i48: i32, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$p53: ref, in_$i54: i32, in_$i55: i32, in_$p56: ref, in_$i57: i64, in_$i58: i32, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$p63: ref, in_$p64: ref, in_$i65: i32, in_$p66: ref, in_$p67: ref, in_$i68: i64, in_$p70: ref, in_$i71: i32, in_$i72: i32, in_$i73: i32, in_$p74: ref, in_$i75: i1, in_$i35: i32, in_$p36: ref) returns (out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$p40: ref, out_$i41: i64, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$p46: ref, out_$p47: ref, out_$i48: i32, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$p53: ref, out_$i54: i32, out_$i55: i32, out_$p56: ref, out_$i57: i64, out_$i58: i32, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$p63: ref, out_$p64: ref, out_$i65: i32, out_$p66: ref, out_$p67: ref, out_$i68: i64, out_$p70: ref, out_$i71: i32, out_$i72: i32, out_$i73: i32, out_$p74: ref, out_$i75: i1, out_$i35: i32, out_$p36: ref)
{

  entry:
    out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$p42, out_$p43, out_$i44, out_$p46, out_$p47, out_$i48, out_$p49, out_$p50, out_$i51, out_$p53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$p63, out_$p64, out_$i65, out_$p66, out_$p67, out_$i68, out_$p70, out_$i71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i35, out_$p36 := in_$p37, in_$i38, in_$i39, in_$p40, in_$i41, in_$p42, in_$p43, in_$i44, in_$p46, in_$p47, in_$i48, in_$p49, in_$p50, in_$i51, in_$p53, in_$i54, in_$i55, in_$p56, in_$i57, in_$i58, in_$p59, in_$p60, in_$i61, in_$p63, in_$p64, in_$i65, in_$p66, in_$p67, in_$i68, in_$p70, in_$i71, in_$i72, in_$i73, in_$p74, in_$i75, in_$i35, in_$p36;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6472;

  $bb22:
    assume out_$i75 == 1;
    assume {:verifier.code 0} true;
    out_$i35, out_$p36 := out_$i73, out_$p74;
    goto $bb22_dummy;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    out_$i75 := $slt.i32(out_$i73, in_$i6);
    goto corral_source_split_6522;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1812} out_$p74 := sg_next(out_$p36);
    goto corral_source_split_6521;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i73 := $add.i32(out_$i35, 1);
    call {:si_unique_call 1811} {:cexpr "idx"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_6520;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, in_$p3, out_$i72);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, in_$p3, out_$i55);
    goto corral_source_split_6497;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    out_$i55 := $add.i32(out_$i54, out_$i48);
    goto corral_source_split_6496;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.1, in_$p3);
    goto corral_source_split_6495;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p53, out_$i48);
    goto corral_source_split_6494;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p50, $mul.ref(out_$i51, 16)), $mul.ref(8, 1));
    goto corral_source_split_6493;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    goto corral_source_split_6492;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    out_$i51 := $sext.i32.i64(out_$i35);
    goto corral_source_split_6491;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.1, out_$p49);
    goto corral_source_split_6490;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_6489;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.1, out_$p47);
    call {:si_unique_call 1809} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_6488;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p36, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6487;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, out_$p46, out_$i41);
    goto corral_source_split_6486;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p43, $mul.ref(out_$i44, 16)), $mul.ref(0, 1));
    goto corral_source_split_6485;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    goto corral_source_split_6484;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i35);
    goto corral_source_split_6483;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.1, out_$p42);
    goto corral_source_split_6482;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_6481;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i64($M.1, out_$p40);
    goto corral_source_split_6480;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p36, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6479;

  $bb19:
    assume out_$i39 == 1;
    goto corral_source_split_6478;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i32(out_$i38, 0);
    goto corral_source_split_6476;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.1, out_$p37);
    goto corral_source_split_6475;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1912)), $mul.ref(1320, 1));
    goto corral_source_split_6474;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    out_$i72 := $add.i32(out_$i71, out_$i65);
    goto corral_source_split_6518;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i32($M.1, in_$p3);
    goto corral_source_split_6517;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p70, out_$i65);
    goto corral_source_split_6516;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(out_$p67, $mul.ref(out_$i68, 8)), $mul.ref(4, 1));
    goto corral_source_split_6515;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    goto corral_source_split_6514;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    out_$i68 := $sext.i32.i64(out_$i35);
    goto corral_source_split_6513;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.1, out_$p66);
    goto corral_source_split_6512;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_6511;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i32($M.1, out_$p64);
    call {:si_unique_call 1810} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_6510;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(out_$p36, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6509;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p63, out_$i58);
    goto corral_source_split_6508;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p60, $mul.ref(out_$i61, 8)), $mul.ref(0, 1));
    goto corral_source_split_6507;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    goto corral_source_split_6506;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    out_$i61 := $sext.i32.i64(out_$i35);
    goto corral_source_split_6505;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.1, out_$p59);
    goto corral_source_split_6504;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_6503;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    out_$i58 := $trunc.i64.i32(out_$i57);
    goto corral_source_split_6502;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i64($M.1, out_$p56);
    goto corral_source_split_6501;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p36, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6500;

  $bb20:
    assume !(out_$i39 == 1);
    goto corral_source_split_6499;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$p42, out_$p43, out_$i44, out_$p46, out_$p47, out_$i48, out_$p49, out_$p50, out_$i51, out_$p53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$p63, out_$p64, out_$i65, out_$p66, out_$p67, out_$i68, out_$p70, out_$i71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i35, out_$p36 := mega_build_sglist_loop_$bb17(in_$p0, in_$p1, in_$p3, in_$i6, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$p42, out_$p43, out_$i44, out_$p46, out_$p47, out_$i48, out_$p49, out_$p50, out_$i51, out_$p53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$p63, out_$p64, out_$i65, out_$p66, out_$p67, out_$i68, out_$p70, out_$i71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i35, out_$p36);
    return;

  exit:
    return;
}



procedure mega_build_sglist_loop_$bb17(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$i6: i32, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$p40: ref, in_$i41: i64, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$p46: ref, in_$p47: ref, in_$i48: i32, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$p53: ref, in_$i54: i32, in_$i55: i32, in_$p56: ref, in_$i57: i64, in_$i58: i32, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$p63: ref, in_$p64: ref, in_$i65: i32, in_$p66: ref, in_$p67: ref, in_$i68: i64, in_$p70: ref, in_$i71: i32, in_$i72: i32, in_$i73: i32, in_$p74: ref, in_$i75: i1, in_$i35: i32, in_$p36: ref) returns (out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$p40: ref, out_$i41: i64, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$p46: ref, out_$p47: ref, out_$i48: i32, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$p53: ref, out_$i54: i32, out_$i55: i32, out_$p56: ref, out_$i57: i64, out_$i58: i32, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$p63: ref, out_$p64: ref, out_$i65: i32, out_$p66: ref, out_$p67: ref, out_$i68: i64, out_$p70: ref, out_$i71: i32, out_$i72: i32, out_$i73: i32, out_$p74: ref, out_$i75: i1, out_$i35: i32, out_$p36: ref);
  modifies $M.1;



implementation {:SIextraRecBound 8} mega_m_to_n_loop_$bb1(in_$p3: ref, in_$i5: i32, in_$i6: i1, in_$i7: i64, in_$p8: ref, in_$i9: i32) returns (out_$i5: i32, out_$i6: i1, out_$i7: i64, out_$p8: ref, out_$i9: i32)
{

  entry:
    out_$i5, out_$i6, out_$i7, out_$p8, out_$i9 := in_$i5, in_$i6, in_$i7, in_$p8, in_$i9;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_7448;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    out_$i5 := out_$i9;
    goto corral_source_split_7461_dummy;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    out_$i9 := $add.i32(out_$i5, 1);
    call {:si_unique_call 1964} {:cexpr "tmp"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_7461;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p8, 0);
    goto corral_source_split_7460;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p3, $mul.ref(0, 8)), $mul.ref(out_$i7, 1));
    goto corral_source_split_7459;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i7 := $zext.i32.i64(out_$i5);
    goto corral_source_split_7458;

  $bb4:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i6 := $uge.i32(out_$i5, 8);
    goto corral_source_split_7450;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    goto $bb2;

  corral_source_split_7461_dummy:
    call {:si_unique_call 1} out_$i5, out_$i6, out_$i7, out_$p8, out_$i9 := mega_m_to_n_loop_$bb1(in_$p3, out_$i5, out_$i6, out_$i7, out_$p8, out_$i9);
    return;

  exit:
    return;
}



procedure mega_m_to_n_loop_$bb1(in_$p3: ref, in_$i5: i32, in_$i6: i1, in_$i7: i64, in_$p8: ref, in_$i9: i32) returns (out_$i5: i32, out_$i6: i1, out_$i7: i64, out_$p8: ref, out_$i9: i32);
  modifies $M.1;



implementation mega_del_logdrv_loop_$bb13(in_$i19: i64, in_$p22: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i8, in_$i28: i32, in_$i29: i1, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i8, in_$i34: i32, in_$i35: i32, in_$i36: i8, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p21: ref) returns (out_$p22: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i8, out_$i28: i32, out_$i29: i1, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i8, out_$i34: i32, out_$i35: i32, out_$i36: i8, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p21: ref)
{

  entry:
    out_$p22, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p21 := in_$p22, in_$p24, in_$p25, in_$p26, in_$i27, in_$i28, in_$i29, in_$p30, in_$p31, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$p37, in_$p38, in_$p39, in_$p40, in_$p41, in_$i42, in_$i43, in_$p21;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_7707;

  $bb18:
    assume out_$i43 == 1;
    assume {:verifier.code 0} true;
    out_$p21 := out_$p41;
    goto $bb18_dummy;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i64(out_$i42, in_$i19);
    goto corral_source_split_7734;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(out_$p41);
    goto corral_source_split_7733;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.1, out_$p40);
    goto corral_source_split_7732;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p21, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7731;

  $bb16:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p39, out_$i36);
    goto corral_source_split_7729;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p38, $mul.ref(0, 60)), $mul.ref(1, 1));
    goto corral_source_split_7728;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.1, out_$p37);
    goto corral_source_split_7727;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p22, $mul.ref($sub.ref(0, 8), 184)), $mul.ref(152, 1));
    goto corral_source_split_7726;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    out_$i36 := $trunc.i32.i8(out_$i35);
    goto corral_source_split_7725;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i34, 128);
    goto corral_source_split_7724;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i8.i32(out_$i33);
    goto corral_source_split_7723;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i8($M.1, out_$p32);
    goto corral_source_split_7722;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p31, $mul.ref(0, 60)), $mul.ref(1, 1));
    goto corral_source_split_7721;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.1, out_$p30);
    goto corral_source_split_7720;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p22, $mul.ref($sub.ref(0, 8), 184)), $mul.ref(152, 1));
    goto corral_source_split_7719;

  $bb15:
    assume out_$i29 == 1;
    goto corral_source_split_7718;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    out_$i29 := $sge.i32(out_$i28, 0);
    goto corral_source_split_7716;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    out_$i28 := $sext.i8.i32(out_$i27);
    goto corral_source_split_7715;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i8($M.1, out_$p26);
    goto corral_source_split_7714;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p25, $mul.ref(0, 60)), $mul.ref(1, 1));
    goto corral_source_split_7713;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.1, out_$p24);
    goto corral_source_split_7712;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p22, $mul.ref($sub.ref(0, 8), 184)), $mul.ref(152, 1));
    goto corral_source_split_7711;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    goto corral_source_split_7710;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(out_$p21);
    goto corral_source_split_7709;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p22, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p21 := mega_del_logdrv_loop_$bb13(in_$i19, out_$p22, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p21);
    return;

  exit:
    return;
}



procedure mega_del_logdrv_loop_$bb13(in_$i19: i64, in_$p22: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i8, in_$i28: i32, in_$i29: i1, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i8, in_$i34: i32, in_$i35: i32, in_$i36: i8, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p21: ref) returns (out_$p22: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i8, out_$i28: i32, out_$i29: i1, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i8, out_$i34: i32, out_$i35: i32, out_$i36: i8, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p21: ref);
  modifies $M.1;



implementation mega_del_logdrv_loop_$bb1(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$i5: i32, in_$i6: i1, in_$i7: i32, in_$i8: i1) returns (out_$p4: ref, out_$i5: i32, out_$i6: i1, out_$i7: i32, out_$i8: i1)
{

  entry:
    out_$p4, out_$i5, out_$i6, out_$i7, out_$i8 := in_$p4, in_$i5, in_$i6, in_$i7, in_$i8;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    out_$p4 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1912)), $mul.ref(1184, 1));
    goto corral_source_split_7674;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    goto corral_source_split_7678_dummy;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1988} msleep(1000);
    goto corral_source_split_7678;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    goto $bb2;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb3:
    assume out_$i6 == 1;
    goto corral_source_split_7680;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    out_$i6 := $sgt.i32(out_$i5, 0);
    goto corral_source_split_7676;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1986} out_$i5 := atomic_read(out_$p4);
    call {:si_unique_call 1987} {:cexpr "tmp"} boogie_si_record_i32(out_$i5);
    goto corral_source_split_7675;

  $bb5:
    assume out_$i8 == 1;
    goto corral_source_split_7686;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i32(out_$i7, 0);
    goto corral_source_split_7684;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1989} out_$i7 := list_empty(in_$p3);
    call {:si_unique_call 1990} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_7683;

  $bb4:
    assume !(out_$i6 == 1);
    goto corral_source_split_7682;

  corral_source_split_7678_dummy:
    call {:si_unique_call 1} out_$p4, out_$i5, out_$i6, out_$i7, out_$i8 := mega_del_logdrv_loop_$bb1(in_$p0, in_$p3, out_$p4, out_$i5, out_$i6, out_$i7, out_$i8);
    return;

  exit:
    return;
}



procedure mega_del_logdrv_loop_$bb1(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$i5: i32, in_$i6: i1, in_$i7: i32, in_$i8: i1) returns (out_$p4: ref, out_$i5: i32, out_$i6: i1, out_$i7: i32, out_$i8: i1);



implementation {:SIextraRecBound 8} mega_n_to_m_loop_$bb1(in_$p2: ref, in_$i4: i32, in_$i5: i1, in_$i6: i64, in_$p7: ref, in_$i8: i32) returns (out_$i4: i32, out_$i5: i1, out_$i6: i64, out_$p7: ref, out_$i8: i32)
{

  entry:
    out_$i4, out_$i5, out_$i6, out_$p7, out_$i8 := in_$i4, in_$i5, in_$i6, in_$p7, in_$i8;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_7748;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    out_$i4 := out_$i8;
    goto corral_source_split_7761_dummy;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    out_$i8 := $add.i32(out_$i4, 1);
    call {:si_unique_call 2000} {:cexpr "tmp"} boogie_si_record_i32(out_$i8);
    goto corral_source_split_7761;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p7, 0);
    goto corral_source_split_7760;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(in_$p2, $mul.ref(0, 8)), $mul.ref(out_$i6, 1));
    goto corral_source_split_7759;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i6 := $zext.i32.i64(out_$i4);
    goto corral_source_split_7758;

  $bb4:
    assume !(out_$i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i5 := $uge.i32(out_$i4, 8);
    goto corral_source_split_7750;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    goto $bb2;

  corral_source_split_7761_dummy:
    call {:si_unique_call 1} out_$i4, out_$i5, out_$i6, out_$p7, out_$i8 := mega_n_to_m_loop_$bb1(in_$p2, out_$i4, out_$i5, out_$i6, out_$p7, out_$i8);
    return;

  exit:
    return;
}



procedure mega_n_to_m_loop_$bb1(in_$p2: ref, in_$i4: i32, in_$i5: i1, in_$i6: i64, in_$p7: ref, in_$i8: i32) returns (out_$i4: i32, out_$i5: i1, out_$i6: i64, out_$p7: ref, out_$i8: i32);
  modifies $M.1;



implementation mega_cmd_done_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i11: i64, in_$p12: ref, in_$i13: i8, in_$i14: i32, in_$i15: i1, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$p39: ref, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$p53: ref, in_$i54: i32, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i32, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$i69: i32, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$i90: i32, in_$i91: i64, in_$p93: ref, in_$i94: i8, in_$i95: i32, in_$p96: ref, in_$p97: ref, in_$i98: i8, in_$i99: i32, in_$i100: i1, in_$i101: i1, in_$p102: ref, in_$p103: ref, in_$i104: i64, in_$i105: i1, in_$p106: ref, in_$i107: i8, in_$i108: i8, in_$p110: ref, in_$i111: i32, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$i115: i32, in_$i116: i32, in_$i117: i32, in_$i118: i1, in_$i119: i32, in_$i120: i32, in_$i121: i1, in_$i122: i32, in_$i123: i32, in_$p124: ref, in_$i125: i1, in_$i126: i1, in_$i127: i1, in_$p128: ref, in_$i129: i32, in_$p130: ref, in_$p132: ref, in_$i133: i8, in_$i134: i32, in_$i135: i1, in_$p137: ref, in_$i138: i8, in_$i139: i32, in_$i140: i1, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$p147: ref, in_$i148: i8, in_$i149: i32, in_$i150: i1, in_$p151: ref, in_$p152: ref, in_$p153: ref, in_$p154: ref, in_$p155: ref, in_$p156: ref, in_$p157: ref, in_$p158: ref, in_$p159: ref, in_$p160: ref, in_$p161: ref, in_$i162: i32, in_$i163: i32, in_$p164: ref, in_$p165: ref, in_$i166: i32, in_$i167: i32, in_$i168: i32, in_$p169: ref, in_$p170: ref, in_$p171: ref, in_$i172: i8, in_$i173: i32, in_$i174: i1, in_$p175: ref, in_$i176: i32, in_$i177: i32, in_$p178: ref, in_$i179: i1, in_$p180: ref, in_$p181: ref, in_$i182: i8, in_$i183: i32, in_$i184: i32, in_$i185: i1, in_$p186: ref, in_$i187: i32, in_$i188: i32, in_$p189: ref, in_$p190: ref, in_$i191: i32, in_$i192: i32, in_$i193: i32, in_$p194: ref, in_$p195: ref, in_$p196: ref, in_$p197: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i32, in_$i198: i32, in_$i199: i1, in_$i5: i32, in_$i6: i32, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_cmdloc_dummy_var_100: [ref]i8, in_cmdloc_dummy_var_101: [ref]i8, in_cmdloc_dummy_var_102: [ref]i8, in_cmdloc_dummy_var_103: [ref]i8, in_cmdloc_dummy_var_104: [ref]i8, in_cmdloc_dummy_var_105: [ref]i8, in_vslice_dummy_var_201: i32, in_vslice_dummy_var_202: i32, in_vslice_dummy_var_203: i32, in_vslice_dummy_var_204: i32, in_vslice_dummy_var_205: i32) returns (out_$i11: i64, out_$p12: ref, out_$i13: i8, out_$i14: i32, out_$i15: i1, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$p39: ref, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$p53: ref, out_$i54: i32, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i32, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$i69: i32, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$i90: i32, out_$i91: i64, out_$p93: ref, out_$i94: i8, out_$i95: i32, out_$p96: ref, out_$p97: ref, out_$i98: i8, out_$i99: i32, out_$i100: i1, out_$i101: i1, out_$p102: ref, out_$p103: ref, out_$i104: i64, out_$i105: i1, out_$p106: ref, out_$i107: i8, out_$i108: i8, out_$p110: ref, out_$i111: i32, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$i115: i32, out_$i116: i32, out_$i117: i32, out_$i118: i1, out_$i119: i32, out_$i120: i32, out_$i121: i1, out_$i122: i32, out_$i123: i32, out_$p124: ref, out_$i125: i1, out_$i126: i1, out_$i127: i1, out_$p128: ref, out_$i129: i32, out_$p130: ref, out_$p132: ref, out_$i133: i8, out_$i134: i32, out_$i135: i1, out_$p137: ref, out_$i138: i8, out_$i139: i32, out_$i140: i1, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$p147: ref, out_$i148: i8, out_$i149: i32, out_$i150: i1, out_$p151: ref, out_$p152: ref, out_$p153: ref, out_$p154: ref, out_$p155: ref, out_$p156: ref, out_$p157: ref, out_$p158: ref, out_$p159: ref, out_$p160: ref, out_$p161: ref, out_$i162: i32, out_$i163: i32, out_$p164: ref, out_$p165: ref, out_$i166: i32, out_$i167: i32, out_$i168: i32, out_$p169: ref, out_$p170: ref, out_$p171: ref, out_$i172: i8, out_$i173: i32, out_$i174: i1, out_$p175: ref, out_$i176: i32, out_$i177: i32, out_$p178: ref, out_$i179: i1, out_$p180: ref, out_$p181: ref, out_$i182: i8, out_$i183: i32, out_$i184: i32, out_$i185: i1, out_$p186: ref, out_$i187: i32, out_$i188: i32, out_$p189: ref, out_$p190: ref, out_$i191: i32, out_$i192: i32, out_$i193: i32, out_$p194: ref, out_$p195: ref, out_$p196: ref, out_$p197: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i32, out_$i198: i32, out_$i199: i1, out_$i5: i32, out_$i6: i32, out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_cmdloc_dummy_var_100: [ref]i8, out_cmdloc_dummy_var_101: [ref]i8, out_cmdloc_dummy_var_102: [ref]i8, out_cmdloc_dummy_var_103: [ref]i8, out_cmdloc_dummy_var_104: [ref]i8, out_cmdloc_dummy_var_105: [ref]i8, out_vslice_dummy_var_201: i32, out_vslice_dummy_var_202: i32, out_vslice_dummy_var_203: i32, out_vslice_dummy_var_204: i32, out_vslice_dummy_var_205: i32)
{

  entry:
    out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p26, out_$p27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p39, out_$i40, out_$p41, out_$p42, out_$p49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$p71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p87, out_$p88, out_$p89, out_$i90, out_$i91, out_$p93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p102, out_$p103, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$p110, out_$i111, out_$p112, out_$p113, out_$p114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p124, out_$i125, out_$i126, out_$i127, out_$p128, out_$i129, out_$p130, out_$p132, out_$i133, out_$i134, out_$i135, out_$p137, out_$i138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p143, out_$p144, out_$p145, out_$p147, out_$i148, out_$i149, out_$i150, out_$p151, out_$p152, out_$p153, out_$p154, out_$p155, out_$p156, out_$p157, out_$p158, out_$p159, out_$p160, out_$p161, out_$i162, out_$i163, out_$p164, out_$p165, out_$i166, out_$i167, out_$i168, out_$p169, out_$p170, out_$p171, out_$i172, out_$i173, out_$i174, out_$p175, out_$i176, out_$i177, out_$p178, out_$i179, out_$p180, out_$p181, out_$i182, out_$i183, out_$i184, out_$i185, out_$p186, out_$i187, out_$i188, out_$p189, out_$p190, out_$i191, out_$i192, out_$i193, out_$p194, out_$p195, out_$p196, out_$p197, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i198, out_$i199, out_$i5, out_$i6, out_$p7, out_$p8, out_$p9, out_$p10, out_cmdloc_dummy_var_100, out_cmdloc_dummy_var_101, out_cmdloc_dummy_var_102, out_cmdloc_dummy_var_103, out_cmdloc_dummy_var_104, out_cmdloc_dummy_var_105, out_vslice_dummy_var_201, out_vslice_dummy_var_202, out_vslice_dummy_var_203, out_vslice_dummy_var_204, out_vslice_dummy_var_205 := in_$i11, in_$p12, in_$i13, in_$i14, in_$i15, in_$p16, in_$p17, in_$p18, in_$p19, in_$p20, in_$p26, in_$p27, in_$i28, in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_$p34, in_$p35, in_$i36, in_$i37, in_$p39, in_$i40, in_$p41, in_$p42, in_$p49, in_$i50, in_$i51, in_$i52, in_$p53, in_$i54, in_$p56, in_$p57, in_$p58, in_$p59, in_$p60, in_$p61, in_$p62, in_$p63, in_$p64, in_$i65, in_$i66, in_$i67, in_$p68, in_$i69, in_$p71, in_$p72, in_$p73, in_$p74, in_$p75, in_$p76, in_$p77, in_$p78, in_$p79, in_$p80, in_$p81, in_$p82, in_$p83, in_$p84, in_$p85, in_$p21, in_$p22, in_$p23, in_$p24, in_$p25, in_$p87, in_$p88, in_$p89, in_$i90, in_$i91, in_$p93, in_$i94, in_$i95, in_$p96, in_$p97, in_$i98, in_$i99, in_$i100, in_$i101, in_$p102, in_$p103, in_$i104, in_$i105, in_$p106, in_$i107, in_$i108, in_$p110, in_$i111, in_$p112, in_$p113, in_$p114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$p124, in_$i125, in_$i126, in_$i127, in_$p128, in_$i129, in_$p130, in_$p132, in_$i133, in_$i134, in_$i135, in_$p137, in_$i138, in_$i139, in_$i140, in_$p141, in_$p142, in_$p143, in_$p144, in_$p145, in_$p147, in_$i148, in_$i149, in_$i150, in_$p151, in_$p152, in_$p153, in_$p154, in_$p155, in_$p156, in_$p157, in_$p158, in_$p159, in_$p160, in_$p161, in_$i162, in_$i163, in_$p164, in_$p165, in_$i166, in_$i167, in_$i168, in_$p169, in_$p170, in_$p171, in_$i172, in_$i173, in_$i174, in_$p175, in_$i176, in_$i177, in_$p178, in_$i179, in_$p180, in_$p181, in_$i182, in_$i183, in_$i184, in_$i185, in_$p186, in_$i187, in_$i188, in_$p189, in_$p190, in_$i191, in_$i192, in_$i193, in_$p194, in_$p195, in_$p196, in_$p197, in_$p44, in_$p45, in_$p46, in_$p47, in_$i48, in_$i198, in_$i199, in_$i5, in_$i6, in_$p7, in_$p8, in_$p9, in_$p10, in_cmdloc_dummy_var_100, in_cmdloc_dummy_var_101, in_cmdloc_dummy_var_102, in_cmdloc_dummy_var_103, in_cmdloc_dummy_var_104, in_cmdloc_dummy_var_105, in_vslice_dummy_var_201, in_vslice_dummy_var_202, in_vslice_dummy_var_203, in_vslice_dummy_var_204, in_vslice_dummy_var_205;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8971;

  $bb70:
    assume out_$i199 == 1;
    assume {:verifier.code 0} true;
    out_$i5, out_$i6, out_$p7, out_$p8, out_$p9, out_$p10 := out_$i198, out_$i48, out_$p47, out_$p46, out_$p45, out_$p44;
    goto $bb70_dummy;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    out_$i199 := $slt.i32(out_$i198, in_$i2);
    goto corral_source_split_9028;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    out_$i198 := $add.i32(out_$i5, 1);
    call {:si_unique_call 2244} {:cexpr "i"} boogie_si_record_i32(out_$i198);
    goto corral_source_split_9027;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9026;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    out_$p44, out_$p45, out_$p46, out_$p47, out_$i48 := out_$p21, out_$p22, out_$p23, out_$p24, out_$i123;
    goto $bb14;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    out_$p44, out_$p45, out_$p46, out_$p47, out_$i48 := out_$p10, out_$p9, out_$p8, out_$p7, out_$i6;
    goto $bb14;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    out_$p44, out_$p45, out_$p46, out_$p47, out_$i48 := out_$p10, out_$p9, out_$p8, out_$p7, out_$i6;
    goto $bb14;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    out_$p44, out_$p45, out_$p46, out_$p47, out_$i48 := out_$p10, out_$p9, out_$p8, out_$p7, out_$i6;
    goto $bb14;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2243} out_vslice_dummy_var_202 := printk.ref.i32.i32.ref(.str.118, out_$i14, out_$i40, out_$p42);
    goto corral_source_split_9018;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.1, out_$p41);
    goto corral_source_split_9017;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p27, $mul.ref(out_$i28, 184)), $mul.ref(104, 1));
    goto corral_source_split_9016;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i32($M.1, out_$p39);
    goto corral_source_split_9015;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p27, $mul.ref(out_$i28, 184)), $mul.ref(4, 1));
    goto corral_source_split_9014;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2242} out_vslice_dummy_var_201 := printk.ref(.str.117);
    goto corral_source_split_9013;

  $bb12:
    assume {:verifier.code 0} true;
    assume out_$i37 == 1;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    assume out_$i33 == 1;
    goto $bb10;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb11;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i32, 0);
    goto corral_source_split_8996;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    out_$i32 := $and.i32(out_$i31, 4);
    goto corral_source_split_8995;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.1, out_$p30);
    goto corral_source_split_8994;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p27, $mul.ref(out_$i28, 184)), $mul.ref(4, 1));
    goto corral_source_split_8993;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref(out_$p27, $mul.ref(out_$i28, 184));
    goto corral_source_split_8992;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    out_$i28 := $sext.i32.i64(out_$i14);
    goto corral_source_split_8991;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.1, out_$p26);
    goto corral_source_split_8990;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1912)), $mul.ref(1176, 1));
    goto corral_source_split_8989;

  $bb7:
    assume !(out_$i15 == 1);
    goto corral_source_split_8988;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i14, 127);
    goto corral_source_split_8977;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i8.i32(out_$i13);
    call {:si_unique_call 2238} {:cexpr "cmdid"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_8976;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i8($M.1, out_$p12);
    goto corral_source_split_8975;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref(in_$p1, $mul.ref(out_$i11, 1));
    goto corral_source_split_8974;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i32.i64(out_$i5);
    goto corral_source_split_8973;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i64(out_$i36, 0);
    goto corral_source_split_9024;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    out_$i36 := $p2i.ref.i64(out_$p35);
    goto corral_source_split_9023;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.1, out_$p34);
    goto corral_source_split_9022;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p27, $mul.ref(out_$i28, 184)), $mul.ref(104, 1));
    goto corral_source_split_9021;

  $bb11:
    assume !(out_$i33 == 1);
    goto corral_source_split_9020;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2247} mega_free_scb(in_$p0, out_$p29);
    goto corral_source_split_9049;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2246} list_add_tail(out_$p62, out_$p63);
    goto corral_source_split_9048;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1912)), $mul.ref(104, 1));
    goto corral_source_split_9047;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    out_$p62 := $bitcast.ref.ref(out_$p61);
    goto corral_source_split_9046;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p60, $mul.ref(0, 472)), $mul.ref(384, 1));
    goto corral_source_split_9045;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.1, out_$p59);
    goto corral_source_split_9044;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p27, $mul.ref(out_$i28, 184)), $mul.ref(104, 1));
    goto corral_source_split_9043;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p58, 327680);
    goto corral_source_split_9042;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p57, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_9041;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.1, out_$p56);
    goto corral_source_split_9040;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p27, $mul.ref(out_$i28, 184)), $mul.ref(104, 1));
    goto corral_source_split_9039;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2245} out_vslice_dummy_var_203 := printk.ref.i32(.str.119, out_$i54);
    goto corral_source_split_9038;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.1, out_$p53);
    goto corral_source_split_9037;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p27, $mul.ref(out_$i28, 184)), $mul.ref(0, 1));
    goto corral_source_split_9036;

  $bb16:
    assume out_$i52 == 1;
    goto corral_source_split_9035;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i32(out_$i51, 0);
    goto corral_source_split_9033;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    out_$i51 := $and.i32(out_$i50, 8);
    goto corral_source_split_9032;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.1, out_$p49);
    goto corral_source_split_9031;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p27, $mul.ref(out_$i28, 184)), $mul.ref(4, 1));
    goto corral_source_split_9030;

  $bb13:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2250} mega_free_scb(in_$p0, out_$p29);
    goto corral_source_split_9070;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2249} list_add_tail(out_$p77, out_$p78);
    goto corral_source_split_9069;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1912)), $mul.ref(104, 1));
    goto corral_source_split_9068;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    out_$p77 := $bitcast.ref.ref(out_$p76);
    goto corral_source_split_9067;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p75, $mul.ref(0, 472)), $mul.ref(384, 1));
    goto corral_source_split_9066;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    out_$p75 := $load.ref($M.1, out_$p74);
    goto corral_source_split_9065;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p27, $mul.ref(out_$i28, 184)), $mul.ref(104, 1));
    goto corral_source_split_9064;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p73, 524288);
    goto corral_source_split_9063;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(out_$p72, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_9062;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.1, out_$p71);
    goto corral_source_split_9061;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p27, $mul.ref(out_$i28, 184)), $mul.ref(104, 1));
    goto corral_source_split_9060;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2248} out_vslice_dummy_var_204 := printk.ref.i32(.str.120, out_$i69);
    goto corral_source_split_9059;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i32($M.1, out_$p68);
    goto corral_source_split_9058;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p27, $mul.ref(out_$i28, 184)), $mul.ref(0, 1));
    goto corral_source_split_9057;

  $bb19:
    assume out_$i67 == 1;
    goto corral_source_split_9056;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    out_$i67 := $ne.i32(out_$i66, 0);
    goto corral_source_split_9054;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    out_$i66 := $and.i32(out_$i65, 16);
    goto corral_source_split_9053;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i32($M.1, out_$p64);
    goto corral_source_split_9052;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(out_$p27, $mul.ref(out_$i28, 184)), $mul.ref(4, 1));
    goto corral_source_split_9051;

  $bb17:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2257} list_add_tail(out_$p196, out_$p197);
    goto corral_source_split_9157;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    out_$p197 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1912)), $mul.ref(104, 1));
    goto corral_source_split_9156;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    out_$p196 := $bitcast.ref.ref(out_$p195);
    goto corral_source_split_9155;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    out_$p195 := $add.ref($add.ref(out_$p22, $mul.ref(0, 472)), $mul.ref(384, 1));
    goto corral_source_split_9154;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2256} mega_free_scb(in_$p0, out_$p25);
    goto corral_source_split_9153;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p130, out_$i129);
    goto corral_source_split_9125;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref(out_$p22, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_9124;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    out_$i129 := $load.i32($M.1, out_$p128);
    goto corral_source_split_9123;

  $bb39:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref($add.ref(out_$p22, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_9122;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb37:
    assume out_$i125 == 1;
    goto corral_source_split_9120;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    out_$i125 := $eq.i32(out_$i123, 0);
    goto corral_source_split_9118;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p124, 0);
    goto corral_source_split_9117;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(out_$p22, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_9116;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_9115;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i123 := out_$i6;
    goto $bb36;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    out_$i123 := out_$i122;
    goto $bb36;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_9113;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i122 := out_$i6;
    goto $bb35;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    out_$i122 := 240;
    goto $bb35;

  $bb33:
    assume out_$i121 == 1;
    goto corral_source_split_9111;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    out_$i121 := $eq.i32(out_$i120, 0);
    goto corral_source_split_9109;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    out_$i120 := $and.i32(out_$i119, 31);
    goto corral_source_split_9108;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    out_$i119 := $zext.i8.i32(out_$i108);
    goto corral_source_split_9107;

  $bb30:
    assume out_$i118 == 1;
    goto corral_source_split_9106;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    out_$i118 := $ne.i32(out_$i117, 0);
    goto corral_source_split_9104;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    out_$i117 := $and.i32(out_$i116, 1);
    goto corral_source_split_9103;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    out_$i116 := $ashr.i32(out_$i111, out_$i115);
    goto corral_source_split_9102;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    out_$i115 := $load.i32($M.1, out_$p114);
    goto corral_source_split_9101;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(out_$p113, $mul.ref(0, 3480)), $mul.ref(204, 1));
    goto corral_source_split_9100;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    out_$p113 := $load.ref($M.1, out_$p112);
    goto corral_source_split_9099;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(out_$p22, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_9098;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    out_$i111 := $load.i32($M.1, out_$p110);
    goto corral_source_split_9097;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1912)), $mul.ref(1444, 1));
    goto corral_source_split_9096;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_9095;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2255} out_vslice_dummy_var_205 := printk.ref(.str.121);
    assume {:verifier.code 0} true;
    out_$i108 := 0;
    goto $bb29;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    out_$i108 := out_$i107;
    goto $bb29;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    out_$i107 := $load.i8($M.11, out_$p106);
    call {:si_unique_call 2254} {:cexpr "c"} boogie_si_record_i8(out_$i107);
    goto corral_source_split_9091;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2253} out_$p106 := sg_virt(out_$p102);
    goto corral_source_split_9090;

  $bb27:
    assume out_$i105 == 1;
    goto corral_source_split_9089;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    out_$i105 := $ne.i64(out_$i104, 0);
    goto corral_source_split_9087;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    out_$i104 := $p2i.ref.i64(out_$p103);
    goto corral_source_split_9086;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2252} out_$p103 := sg_page(out_$p102);
    goto corral_source_split_9085;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2251} out_$p102 := scsi_sglist(out_$p22);
    goto corral_source_split_9084;

  $bb25:
    assume out_$i101 == 1;
    goto corral_source_split_9083;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    out_$i101 := $eq.i32(out_$i95, 0);
    goto corral_source_split_9081;

  $bb22:
    assume out_$i100 == 1;
    goto corral_source_split_9080;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    out_$i100 := $eq.i32(out_$i99, 18);
    goto corral_source_split_9011;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    out_$i99 := $zext.i8.i32(out_$i98);
    goto corral_source_split_9010;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    out_$i98 := $load.i8($M.1, out_$p97);
    goto corral_source_split_9009;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    out_$p97 := $load.ref($M.1, out_$p96);
    goto corral_source_split_9008;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(out_$p22, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_9007;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    out_$i95 := $zext.i8.i32(out_$i94);
    call {:si_unique_call 2241} {:cexpr "islogical"} boogie_si_record_i32(out_$i95);
    goto corral_source_split_9006;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    out_$i94 := $load.i8($M.1, out_$p93);
    goto corral_source_split_9005;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1912)), $mul.ref(1432, 1)), $mul.ref(out_$i91, 1));
    goto corral_source_split_9004;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    out_$i91 := $zext.i32.i64(out_$i90);
    goto corral_source_split_9003;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i32($M.1, out_$p89);
    goto corral_source_split_9002;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(out_$p88, $mul.ref(0, 3480)), $mul.ref(204, 1));
    goto corral_source_split_9001;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.1, out_$p87);
    goto corral_source_split_9000;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(out_$p22, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_8999;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8998;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p21, out_$p22, out_$p23, out_$p24, out_$p25 := out_$p82, out_$p80, out_$p85, out_$p84, out_$p29;
    goto $bb8;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    out_$p21, out_$p22, out_$p23, out_$p24, out_$p25 := out_$p10, out_$p9, out_$p8, out_$p7, out_$p16;
    goto $bb8;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2240} complete_(out_$p20);
    goto corral_source_split_8986;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1912)), $mul.ref(1808, 1));
    goto corral_source_split_8985;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p19, out_$i6);
    goto corral_source_split_8984;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1912)), $mul.ref(1800, 1));
    goto corral_source_split_8983;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p18, 0);
    goto corral_source_split_8982;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2239} list_del_init(out_$p17);
    out_$p18 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1912)), $mul.ref(1456, 1)), $mul.ref(4, 1));
    goto corral_source_split_8981;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1912)), $mul.ref(1456, 1));
    out_$p17 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1912)), $mul.ref(1456, 1)), $mul.ref(8, 1));
    goto corral_source_split_8980;

  $bb6:
    assume out_$i15 == 1;
    goto corral_source_split_8979;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p27, $mul.ref(out_$i28, 184)), $mul.ref(24, 1));
    goto corral_source_split_9078;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    out_$p84 := $load.ref($M.1, out_$p83);
    goto corral_source_split_9077;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(out_$p27, $mul.ref(out_$i28, 184)), $mul.ref(168, 1));
    goto corral_source_split_9076;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.1, out_$p81);
    goto corral_source_split_9075;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(out_$p27, $mul.ref(out_$i28, 184)), $mul.ref(152, 1));
    goto corral_source_split_9074;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.1, out_$p79);
    goto corral_source_split_9073;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p27, $mul.ref(out_$i28, 184)), $mul.ref(104, 1));
    goto corral_source_split_9072;

  $bb20:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb28:
    assume !(out_$i105 == 1);
    goto corral_source_split_9093;

  $bb31:
    assume {:verifier.code 0} true;
    assume !(out_$i118 == 1);
    goto $bb32;

  $bb34:
    assume {:verifier.code 0} true;
    assume !(out_$i121 == 1);
    goto $bb32;

  $bb23:
    assume {:verifier.code 0} true;
    assume !(out_$i100 == 1);
    goto $bb24;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i101 == 1);
    goto $bb24;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p145, 134217730);
    goto corral_source_split_9165;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    out_$p145 := $add.ref($add.ref(out_$p22, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_9164;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_100 := $M.1;
    out_cmdloc_dummy_var_101 := $M.1;
    call {:si_unique_call 2258} out_cmdloc_dummy_var_102 := $memcpy.i8(out_cmdloc_dummy_var_100, out_cmdloc_dummy_var_101, out_$p142, out_$p144, 14, $zext.i32.i64(1), 0 == 1);
    $M.1 := out_cmdloc_dummy_var_102;
    goto corral_source_split_9163;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    out_$p144 := $bitcast.ref.ref(out_$p143);
    goto corral_source_split_9162;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref($add.ref(out_$p21, $mul.ref(0, 60)), $mul.ref(18, 1));
    goto corral_source_split_9161;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    out_$p142 := $load.ref($M.1, out_$p141);
    goto corral_source_split_9160;

  $bb52:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref($add.ref(out_$p22, $mul.ref(0, 472)), $mul.ref(368, 1));
    goto corral_source_split_9159;

  $bb54:
    assume {:verifier.code 0} true;
    assume out_$i140 == 1;
    goto $bb52;

  $bb51:
    assume {:verifier.code 0} true;
    assume out_$i135 == 1;
    goto $bb52;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb53;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    out_$i135 := $eq.i32(out_$i134, 3);
    goto corral_source_split_9134;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    out_$i134 := $zext.i8.i32(out_$i133);
    goto corral_source_split_9133;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    out_$i133 := $load.i8($M.1, out_$p132);
    goto corral_source_split_9132;

  $bb43:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref($add.ref(out_$p23, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9131;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb41:
    assume out_$i126 == 1;
    goto corral_source_split_9129;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i126 := $eq.i32(out_$i123, 2);
    goto corral_source_split_9127;

  $bb38:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    out_$i140 := $eq.i32(out_$i139, 195);
    goto corral_source_split_9171;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    out_$i139 := $zext.i8.i32(out_$i138);
    goto corral_source_split_9170;

  corral_source_split_9168:
    assume {:verifier.code 0} true;
    out_$i138 := $load.i8($M.1, out_$p137);
    goto corral_source_split_9169;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref($add.ref(out_$p23, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9168;

  $bb53:
    assume !(out_$i135 == 1);
    goto corral_source_split_9167;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p164, out_$i163);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_9186:
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p155, 134217730);
    goto corral_source_split_9186;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref(out_$p22, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_9185;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_103 := $M.1;
    out_cmdloc_dummy_var_104 := $M.1;
    call {:si_unique_call 2259} out_cmdloc_dummy_var_105 := $memcpy.i8(out_cmdloc_dummy_var_103, out_cmdloc_dummy_var_104, out_$p152, out_$p154, 14, $zext.i32.i64(1), 0 == 1);
    $M.1 := out_cmdloc_dummy_var_105;
    goto corral_source_split_9184;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    out_$p154 := $bitcast.ref.ref(out_$p153);
    goto corral_source_split_9183;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    out_$p153 := $add.ref($add.ref(out_$p24, $mul.ref(0, 68)), $mul.ref(27, 1));
    goto corral_source_split_9182;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    out_$p152 := $load.ref($M.1, out_$p151);
    goto corral_source_split_9181;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    out_$p151 := $add.ref($add.ref(out_$p22, $mul.ref(0, 472)), $mul.ref(368, 1));
    goto corral_source_split_9180;

  $bb57:
    assume out_$i150 == 1;
    goto corral_source_split_9179;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    out_$i150 := $eq.i32(out_$i149, 227);
    goto corral_source_split_9177;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    out_$i149 := $zext.i8.i32(out_$i148);
    goto corral_source_split_9176;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    out_$i148 := $load.i8($M.1, out_$p147);
    goto corral_source_split_9175;

  corral_source_split_9173:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref($add.ref($add.ref(out_$p23, $mul.ref(0, 68)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9174;

  $bb55:
    assume !(out_$i140 == 1);
    goto corral_source_split_9173;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    out_$p164 := $add.ref($add.ref(out_$p22, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_9199;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    out_$i163 := $or.i32(out_$i162, 2);
    goto corral_source_split_9198;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    out_$i162 := $load.i32($M.1, out_$p161);
    goto corral_source_split_9197;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref($add.ref(out_$p22, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_9196;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p160, 11);
    goto corral_source_split_9195;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    out_$p160 := $add.ref(out_$p159, $mul.ref(2, 1));
    goto corral_source_split_9194;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    out_$p159 := $load.ref($M.1, out_$p158);
    goto corral_source_split_9193;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    out_$p158 := $add.ref($add.ref(out_$p22, $mul.ref(0, 472)), $mul.ref(368, 1));
    goto corral_source_split_9192;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p157, 112);
    goto corral_source_split_9191;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    out_$p157 := $load.ref($M.1, out_$p156);
    goto corral_source_split_9190;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    out_$p156 := $add.ref($add.ref(out_$p22, $mul.ref(0, 472)), $mul.ref(368, 1));
    goto corral_source_split_9189;

  $bb58:
    assume !(out_$i150 == 1);
    goto corral_source_split_9188;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p169, out_$i168);
    goto corral_source_split_9145;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    out_$p169 := $add.ref($add.ref(out_$p22, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_9144;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    out_$i168 := $or.i32(out_$i166, out_$i167);
    goto corral_source_split_9143;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    out_$i167 := $or.i32(out_$i123, 131072);
    goto corral_source_split_9142;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    out_$i166 := $load.i32($M.1, out_$p165);
    goto corral_source_split_9141;

  $bb47:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref(out_$p22, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_9140;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb45:
    assume out_$i127 == 1;
    goto corral_source_split_9138;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb44:
    assume {:verifier.code 0} true;
    out_$i127 := $eq.i32(out_$i123, 8);
    goto corral_source_split_9136;

  $bb42:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p178, out_$i177);
    goto corral_source_split_9206;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    out_$p178 := $add.ref($add.ref(out_$p22, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_9205;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    out_$i177 := $or.i32(out_$i176, 458776);
    goto corral_source_split_9204;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    out_$i176 := $load.i32($M.1, out_$p175);
    goto corral_source_split_9203;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    out_$p175 := $add.ref($add.ref(out_$p22, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_9202;

  $bb60:
    assume out_$i174 == 1;
    goto corral_source_split_9201;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_9150:
    assume {:verifier.code 0} true;
    out_$i174 := $eq.i32(out_$i173, 0);
    goto corral_source_split_9151;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    out_$i173 := $zext.i8.i32(out_$i172);
    goto corral_source_split_9150;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    out_$i172 := $load.i8($M.1, out_$p171);
    goto corral_source_split_9149;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    out_$p171 := $load.ref($M.1, out_$p170);
    goto corral_source_split_9148;

  $bb49:
    assume {:verifier.code 0} true;
    out_$p170 := $add.ref($add.ref(out_$p22, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_9147;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb46:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p194, out_$i193);
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p189, out_$i188);
    goto corral_source_split_9230;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    out_$p189 := $add.ref($add.ref(out_$p22, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_9229;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    out_$i188 := $or.i32(out_$i187, 458776);
    goto corral_source_split_9228;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    out_$i187 := $load.i32($M.1, out_$p186);
    goto corral_source_split_9227;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    out_$p186 := $add.ref($add.ref(out_$p22, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_9226;

  $bb66:
    assume out_$i185 == 1;
    goto corral_source_split_9225;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    out_$i185 := $ule.i32(out_$i184, 1);
    goto corral_source_split_9217;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    out_$i184 := $sub.i32(out_$i183, 22);
    goto corral_source_split_9216;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    out_$i183 := $zext.i8.i32(out_$i182);
    goto corral_source_split_9215;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    out_$i182 := $load.i8($M.1, out_$p181);
    goto corral_source_split_9214;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    out_$p181 := $load.ref($M.1, out_$p180);
    goto corral_source_split_9213;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    out_$p180 := $add.ref($add.ref(out_$p22, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_9212;

  $bb63:
    assume out_$i179 == 1;
    goto corral_source_split_9211;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    out_$i179 := $eq.i32(out_$i123, 1);
    goto corral_source_split_9209;

  $bb61:
    assume !(out_$i174 == 1);
    goto corral_source_split_9208;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    out_$p194 := $add.ref($add.ref(out_$p22, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_9223;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    out_$i193 := $or.i32(out_$i191, out_$i192);
    goto corral_source_split_9222;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    out_$i192 := $or.i32(out_$i123, 262144);
    goto corral_source_split_9221;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    out_$i191 := $load.i32($M.1, out_$p190);
    goto corral_source_split_9220;

  $bb65:
    assume {:verifier.code 0} true;
    out_$p190 := $add.ref($add.ref(out_$p22, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_9219;

  $bb64:
    assume {:verifier.code 0} true;
    assume !(out_$i179 == 1);
    goto $bb65;

  $bb67:
    assume {:verifier.code 0} true;
    assume !(out_$i185 == 1);
    goto $bb65;

  $bb70_dummy:
    call {:si_unique_call 1} out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p26, out_$p27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p39, out_$i40, out_$p41, out_$p42, out_$p49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$p71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p87, out_$p88, out_$p89, out_$i90, out_$i91, out_$p93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p102, out_$p103, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$p110, out_$i111, out_$p112, out_$p113, out_$p114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p124, out_$i125, out_$i126, out_$i127, out_$p128, out_$i129, out_$p130, out_$p132, out_$i133, out_$i134, out_$i135, out_$p137, out_$i138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p143, out_$p144, out_$p145, out_$p147, out_$i148, out_$i149, out_$i150, out_$p151, out_$p152, out_$p153, out_$p154, out_$p155, out_$p156, out_$p157, out_$p158, out_$p159, out_$p160, out_$p161, out_$i162, out_$i163, out_$p164, out_$p165, out_$i166, out_$i167, out_$i168, out_$p169, out_$p170, out_$p171, out_$i172, out_$i173, out_$i174, out_$p175, out_$i176, out_$i177, out_$p178, out_$i179, out_$p180, out_$p181, out_$i182, out_$i183, out_$i184, out_$i185, out_$p186, out_$i187, out_$i188, out_$p189, out_$p190, out_$i191, out_$i192, out_$i193, out_$p194, out_$p195, out_$p196, out_$p197, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i198, out_$i199, out_$i5, out_$i6, out_$p7, out_$p8, out_$p9, out_$p10, out_cmdloc_dummy_var_100, out_cmdloc_dummy_var_101, out_cmdloc_dummy_var_102, out_cmdloc_dummy_var_103, out_cmdloc_dummy_var_104, out_cmdloc_dummy_var_105, out_vslice_dummy_var_201, out_vslice_dummy_var_202, out_vslice_dummy_var_203, out_vslice_dummy_var_204, out_vslice_dummy_var_205 := mega_cmd_done_loop_$bb4(in_$p0, in_$p1, in_$i2, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p26, out_$p27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p39, out_$i40, out_$p41, out_$p42, out_$p49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$p71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p87, out_$p88, out_$p89, out_$i90, out_$i91, out_$p93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p102, out_$p103, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$p110, out_$i111, out_$p112, out_$p113, out_$p114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p124, out_$i125, out_$i126, out_$i127, out_$p128, out_$i129, out_$p130, out_$p132, out_$i133, out_$i134, out_$i135, out_$p137, out_$i138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p143, out_$p144, out_$p145, out_$p147, out_$i148, out_$i149, out_$i150, out_$p151, out_$p152, out_$p153, out_$p154, out_$p155, out_$p156, out_$p157, out_$p158, out_$p159, out_$p160, out_$p161, out_$i162, out_$i163, out_$p164, out_$p165, out_$i166, out_$i167, out_$i168, out_$p169, out_$p170, out_$p171, out_$i172, out_$i173, out_$i174, out_$p175, out_$i176, out_$i177, out_$p178, out_$i179, out_$p180, out_$p181, out_$i182, out_$i183, out_$i184, out_$i185, out_$p186, out_$i187, out_$i188, out_$p189, out_$p190, out_$i191, out_$i192, out_$i193, out_$p194, out_$p195, out_$p196, out_$p197, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i198, out_$i199, out_$i5, out_$i6, out_$p7, out_$p8, out_$p9, out_$p10, out_cmdloc_dummy_var_100, out_cmdloc_dummy_var_101, out_cmdloc_dummy_var_102, out_cmdloc_dummy_var_103, out_cmdloc_dummy_var_104, out_cmdloc_dummy_var_105, out_vslice_dummy_var_201, out_vslice_dummy_var_202, out_vslice_dummy_var_203, out_vslice_dummy_var_204, out_vslice_dummy_var_205);
    return;

  exit:
    return;
}



procedure mega_cmd_done_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i11: i64, in_$p12: ref, in_$i13: i8, in_$i14: i32, in_$i15: i1, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$p39: ref, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$p53: ref, in_$i54: i32, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i32, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$i69: i32, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$i90: i32, in_$i91: i64, in_$p93: ref, in_$i94: i8, in_$i95: i32, in_$p96: ref, in_$p97: ref, in_$i98: i8, in_$i99: i32, in_$i100: i1, in_$i101: i1, in_$p102: ref, in_$p103: ref, in_$i104: i64, in_$i105: i1, in_$p106: ref, in_$i107: i8, in_$i108: i8, in_$p110: ref, in_$i111: i32, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$i115: i32, in_$i116: i32, in_$i117: i32, in_$i118: i1, in_$i119: i32, in_$i120: i32, in_$i121: i1, in_$i122: i32, in_$i123: i32, in_$p124: ref, in_$i125: i1, in_$i126: i1, in_$i127: i1, in_$p128: ref, in_$i129: i32, in_$p130: ref, in_$p132: ref, in_$i133: i8, in_$i134: i32, in_$i135: i1, in_$p137: ref, in_$i138: i8, in_$i139: i32, in_$i140: i1, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$p147: ref, in_$i148: i8, in_$i149: i32, in_$i150: i1, in_$p151: ref, in_$p152: ref, in_$p153: ref, in_$p154: ref, in_$p155: ref, in_$p156: ref, in_$p157: ref, in_$p158: ref, in_$p159: ref, in_$p160: ref, in_$p161: ref, in_$i162: i32, in_$i163: i32, in_$p164: ref, in_$p165: ref, in_$i166: i32, in_$i167: i32, in_$i168: i32, in_$p169: ref, in_$p170: ref, in_$p171: ref, in_$i172: i8, in_$i173: i32, in_$i174: i1, in_$p175: ref, in_$i176: i32, in_$i177: i32, in_$p178: ref, in_$i179: i1, in_$p180: ref, in_$p181: ref, in_$i182: i8, in_$i183: i32, in_$i184: i32, in_$i185: i1, in_$p186: ref, in_$i187: i32, in_$i188: i32, in_$p189: ref, in_$p190: ref, in_$i191: i32, in_$i192: i32, in_$i193: i32, in_$p194: ref, in_$p195: ref, in_$p196: ref, in_$p197: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i32, in_$i198: i32, in_$i199: i1, in_$i5: i32, in_$i6: i32, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_cmdloc_dummy_var_100: [ref]i8, in_cmdloc_dummy_var_101: [ref]i8, in_cmdloc_dummy_var_102: [ref]i8, in_cmdloc_dummy_var_103: [ref]i8, in_cmdloc_dummy_var_104: [ref]i8, in_cmdloc_dummy_var_105: [ref]i8, in_vslice_dummy_var_201: i32, in_vslice_dummy_var_202: i32, in_vslice_dummy_var_203: i32, in_vslice_dummy_var_204: i32, in_vslice_dummy_var_205: i32) returns (out_$i11: i64, out_$p12: ref, out_$i13: i8, out_$i14: i32, out_$i15: i1, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$p39: ref, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$p53: ref, out_$i54: i32, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i32, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$i69: i32, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$i90: i32, out_$i91: i64, out_$p93: ref, out_$i94: i8, out_$i95: i32, out_$p96: ref, out_$p97: ref, out_$i98: i8, out_$i99: i32, out_$i100: i1, out_$i101: i1, out_$p102: ref, out_$p103: ref, out_$i104: i64, out_$i105: i1, out_$p106: ref, out_$i107: i8, out_$i108: i8, out_$p110: ref, out_$i111: i32, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$i115: i32, out_$i116: i32, out_$i117: i32, out_$i118: i1, out_$i119: i32, out_$i120: i32, out_$i121: i1, out_$i122: i32, out_$i123: i32, out_$p124: ref, out_$i125: i1, out_$i126: i1, out_$i127: i1, out_$p128: ref, out_$i129: i32, out_$p130: ref, out_$p132: ref, out_$i133: i8, out_$i134: i32, out_$i135: i1, out_$p137: ref, out_$i138: i8, out_$i139: i32, out_$i140: i1, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$p147: ref, out_$i148: i8, out_$i149: i32, out_$i150: i1, out_$p151: ref, out_$p152: ref, out_$p153: ref, out_$p154: ref, out_$p155: ref, out_$p156: ref, out_$p157: ref, out_$p158: ref, out_$p159: ref, out_$p160: ref, out_$p161: ref, out_$i162: i32, out_$i163: i32, out_$p164: ref, out_$p165: ref, out_$i166: i32, out_$i167: i32, out_$i168: i32, out_$p169: ref, out_$p170: ref, out_$p171: ref, out_$i172: i8, out_$i173: i32, out_$i174: i1, out_$p175: ref, out_$i176: i32, out_$i177: i32, out_$p178: ref, out_$i179: i1, out_$p180: ref, out_$p181: ref, out_$i182: i8, out_$i183: i32, out_$i184: i32, out_$i185: i1, out_$p186: ref, out_$i187: i32, out_$i188: i32, out_$p189: ref, out_$p190: ref, out_$i191: i32, out_$i192: i32, out_$i193: i32, out_$p194: ref, out_$p195: ref, out_$p196: ref, out_$p197: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i32, out_$i198: i32, out_$i199: i1, out_$i5: i32, out_$i6: i32, out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_cmdloc_dummy_var_100: [ref]i8, out_cmdloc_dummy_var_101: [ref]i8, out_cmdloc_dummy_var_102: [ref]i8, out_cmdloc_dummy_var_103: [ref]i8, out_cmdloc_dummy_var_104: [ref]i8, out_cmdloc_dummy_var_105: [ref]i8, out_vslice_dummy_var_201: i32, out_vslice_dummy_var_202: i32, out_vslice_dummy_var_203: i32, out_vslice_dummy_var_204: i32, out_vslice_dummy_var_205: i32);
  modifies $M.1;



implementation proc_show_rdrv_loop_$bb32(in_$p0: ref, in_$p1: ref, in_$i3: i32, in_$p33: ref, in_$i34: i32, in_$p49: ref, in_$p74: ref, in_$i75: i32, in_$i76: i64, in_$i77: i64, in_$i78: i1, in_$i79: i64, in_$p80: ref, in_$p83: ref, in_$i85: i64, in_$p86: ref, in_$p89: ref, in_$p84: ref, in_$i91: i64, in_$p92: ref, in_$i93: i8, in_$i94: i32, in_$i95: i32, in_$i96: i1, in_$i97: i64, in_$p98: ref, in_$i99: i8, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$i103: i64, in_$p104: ref, in_$i105: i8, in_$i106: i32, in_$i107: i32, in_$i108: i1, in_$i109: i64, in_$p110: ref, in_$i111: i8, in_$i112: i32, in_$i113: i32, in_$i114: i1, in_$i120: i64, in_$p121: ref, in_$i122: i8, in_$i123: i32, in_$i124: i32, in_$i125: i1, in_$i127: i64, in_$p128: ref, in_$i129: i8, in_$i130: i32, in_$i131: i32, in_$i132: i1, in_$p135: ref, in_$i136: i8, in_$i137: i32, in_$p139: ref, in_$i140: i8, in_$i141: i32, in_$p143: ref, in_$i144: i8, in_$i145: i32, in_$i146: i1, in_$p147: ref, in_$i148: i8, in_$i149: i32, in_$i150: i32, in_$i151: i32, in_$p153: ref, in_$i154: i8, in_$i155: i32, in_$p158: ref, in_$i159: i8, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$i163: i8, in_$i164: i32, in_$i165: i1, in_$p166: ref, in_$i167: i8, in_$i168: i32, in_$i169: i1, in_$p174: ref, in_$i175: i8, in_$i176: i32, in_$i177: i1, in_$p178: ref, in_$i179: i8, in_$i180: i32, in_$i181: i1, in_$p185: ref, in_$i186: i8, in_$i187: i32, in_$i188: i1, in_$p189: ref, in_$i190: i8, in_$i191: i32, in_$i192: i1, in_$i195: i32, in_$i73: i32, in_$i196: i32, in_$i197: i1, in_$i198: i32, in_$i199: i32, in_$i200: i1, in_vslice_dummy_var_265: i32, in_vslice_dummy_var_266: i32, in_vslice_dummy_var_267: i32, in_vslice_dummy_var_268: i32, in_vslice_dummy_var_269: i32, in_vslice_dummy_var_270: i32, in_vslice_dummy_var_271: i32, in_vslice_dummy_var_272: i32, in_vslice_dummy_var_273: i32, in_vslice_dummy_var_274: i32, in_vslice_dummy_var_275: i32, in_vslice_dummy_var_276: i32, in_vslice_dummy_var_277: i32, in_vslice_dummy_var_278: i32, in_vslice_dummy_var_279: i32, in_vslice_dummy_var_280: i32, in_vslice_dummy_var_281: i32, in_vslice_dummy_var_282: i32, in_vslice_dummy_var_283: i32, in_vslice_dummy_var_284: i32, in_vslice_dummy_var_285: i32, in_vslice_dummy_var_286: i32, in_vslice_dummy_var_287: i32) returns (out_$p74: ref, out_$i75: i32, out_$i76: i64, out_$i77: i64, out_$i78: i1, out_$i79: i64, out_$p80: ref, out_$p83: ref, out_$i85: i64, out_$p86: ref, out_$p89: ref, out_$p84: ref, out_$i91: i64, out_$p92: ref, out_$i93: i8, out_$i94: i32, out_$i95: i32, out_$i96: i1, out_$i97: i64, out_$p98: ref, out_$i99: i8, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$i103: i64, out_$p104: ref, out_$i105: i8, out_$i106: i32, out_$i107: i32, out_$i108: i1, out_$i109: i64, out_$p110: ref, out_$i111: i8, out_$i112: i32, out_$i113: i32, out_$i114: i1, out_$i120: i64, out_$p121: ref, out_$i122: i8, out_$i123: i32, out_$i124: i32, out_$i125: i1, out_$i127: i64, out_$p128: ref, out_$i129: i8, out_$i130: i32, out_$i131: i32, out_$i132: i1, out_$p135: ref, out_$i136: i8, out_$i137: i32, out_$p139: ref, out_$i140: i8, out_$i141: i32, out_$p143: ref, out_$i144: i8, out_$i145: i32, out_$i146: i1, out_$p147: ref, out_$i148: i8, out_$i149: i32, out_$i150: i32, out_$i151: i32, out_$p153: ref, out_$i154: i8, out_$i155: i32, out_$p158: ref, out_$i159: i8, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$i163: i8, out_$i164: i32, out_$i165: i1, out_$p166: ref, out_$i167: i8, out_$i168: i32, out_$i169: i1, out_$p174: ref, out_$i175: i8, out_$i176: i32, out_$i177: i1, out_$p178: ref, out_$i179: i8, out_$i180: i32, out_$i181: i1, out_$p185: ref, out_$i186: i8, out_$i187: i32, out_$i188: i1, out_$p189: ref, out_$i190: i8, out_$i191: i32, out_$i192: i1, out_$i195: i32, out_$i73: i32, out_$i196: i32, out_$i197: i1, out_$i198: i32, out_$i199: i32, out_$i200: i1, out_vslice_dummy_var_265: i32, out_vslice_dummy_var_266: i32, out_vslice_dummy_var_267: i32, out_vslice_dummy_var_268: i32, out_vslice_dummy_var_269: i32, out_vslice_dummy_var_270: i32, out_vslice_dummy_var_271: i32, out_vslice_dummy_var_272: i32, out_vslice_dummy_var_273: i32, out_vslice_dummy_var_274: i32, out_vslice_dummy_var_275: i32, out_vslice_dummy_var_276: i32, out_vslice_dummy_var_277: i32, out_vslice_dummy_var_278: i32, out_vslice_dummy_var_279: i32, out_vslice_dummy_var_280: i32, out_vslice_dummy_var_281: i32, out_vslice_dummy_var_282: i32, out_vslice_dummy_var_283: i32, out_vslice_dummy_var_284: i32, out_vslice_dummy_var_285: i32, out_vslice_dummy_var_286: i32, out_vslice_dummy_var_287: i32)
{

  entry:
    out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p83, out_$i85, out_$p86, out_$p89, out_$p84, out_$i91, out_$p92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$p110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i120, out_$p121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i127, out_$p128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p135, out_$i136, out_$i137, out_$p139, out_$i140, out_$i141, out_$p143, out_$i144, out_$i145, out_$i146, out_$p147, out_$i148, out_$i149, out_$i150, out_$i151, out_$p153, out_$i154, out_$i155, out_$p158, out_$i159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$i165, out_$p166, out_$i167, out_$i168, out_$i169, out_$p174, out_$i175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$i181, out_$p185, out_$i186, out_$i187, out_$i188, out_$p189, out_$i190, out_$i191, out_$i192, out_$i195, out_$i73, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_vslice_dummy_var_265, out_vslice_dummy_var_266, out_vslice_dummy_var_267, out_vslice_dummy_var_268, out_vslice_dummy_var_269, out_vslice_dummy_var_270, out_vslice_dummy_var_271, out_vslice_dummy_var_272, out_vslice_dummy_var_273, out_vslice_dummy_var_274, out_vslice_dummy_var_275, out_vslice_dummy_var_276, out_vslice_dummy_var_277, out_vslice_dummy_var_278, out_vslice_dummy_var_279, out_vslice_dummy_var_280, out_vslice_dummy_var_281, out_vslice_dummy_var_282, out_vslice_dummy_var_283, out_vslice_dummy_var_284, out_vslice_dummy_var_285, out_vslice_dummy_var_286, out_vslice_dummy_var_287 := in_$p74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$p80, in_$p83, in_$i85, in_$p86, in_$p89, in_$p84, in_$i91, in_$p92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$p98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$p104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$p110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i120, in_$p121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i127, in_$p128, in_$i129, in_$i130, in_$i131, in_$i132, in_$p135, in_$i136, in_$i137, in_$p139, in_$i140, in_$i141, in_$p143, in_$i144, in_$i145, in_$i146, in_$p147, in_$i148, in_$i149, in_$i150, in_$i151, in_$p153, in_$i154, in_$i155, in_$p158, in_$i159, in_$i160, in_$i161, in_$p162, in_$i163, in_$i164, in_$i165, in_$p166, in_$i167, in_$i168, in_$i169, in_$p174, in_$i175, in_$i176, in_$i177, in_$p178, in_$i179, in_$i180, in_$i181, in_$p185, in_$i186, in_$i187, in_$i188, in_$p189, in_$i190, in_$i191, in_$i192, in_$i195, in_$i73, in_$i196, in_$i197, in_$i198, in_$i199, in_$i200, in_vslice_dummy_var_265, in_vslice_dummy_var_266, in_vslice_dummy_var_267, in_vslice_dummy_var_268, in_vslice_dummy_var_269, in_vslice_dummy_var_270, in_vslice_dummy_var_271, in_vslice_dummy_var_272, in_vslice_dummy_var_273, in_vslice_dummy_var_274, in_vslice_dummy_var_275, in_vslice_dummy_var_276, in_vslice_dummy_var_277, in_vslice_dummy_var_278, in_vslice_dummy_var_279, in_vslice_dummy_var_280, in_vslice_dummy_var_281, in_vslice_dummy_var_282, in_vslice_dummy_var_283, in_vslice_dummy_var_284, in_vslice_dummy_var_285, in_vslice_dummy_var_286, in_vslice_dummy_var_287;
    goto $bb32, exit;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_9941;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    out_$i73 := out_$i195;
    goto corral_source_split_10123_dummy;

  $bb98:
    assume {:verifier.code 0} true;
    out_$i195 := $add.i32(out_$i73, 1);
    call {:si_unique_call 2476} {:cexpr "i"} boogie_si_record_i32(out_$i195);
    goto corral_source_split_10123;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    goto $bb98;

  corral_source_split_10112:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2474} out_vslice_dummy_var_286 := seq_puts(in_$p0, .str.48);
    goto corral_source_split_10112;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb89:
    assume out_$i188 == 1;
    goto corral_source_split_10110;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    out_$i188 := $eq.i32(out_$i187, 0);
    goto corral_source_split_10108;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    out_$i187 := $zext.i8.i32(out_$i186);
    goto corral_source_split_10107;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    out_$i186 := $load.i8($M.45, out_$p185);
    goto corral_source_split_10106;

  corral_source_split_10104:
    assume {:verifier.code 0} true;
    out_$p185 := $add.ref($add.ref(out_$p84, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_10105;

  $bb88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2473} out_vslice_dummy_var_285 := seq_puts(in_$p0, .str.47);
    goto corral_source_split_10104;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_10093:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2471} out_vslice_dummy_var_283 := seq_puts(in_$p0, .str.45);
    goto corral_source_split_10093;

  corral_source_split_10091:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb79:
    assume out_$i177 == 1;
    goto corral_source_split_10091;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    out_$i177 := $eq.i32(out_$i176, 0);
    goto corral_source_split_10089;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    out_$i176 := $zext.i8.i32(out_$i175);
    goto corral_source_split_10088;

  corral_source_split_10086:
    assume {:verifier.code 0} true;
    out_$i175 := $load.i8($M.45, out_$p174);
    goto corral_source_split_10087;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    out_$p174 := $add.ref($add.ref(out_$p84, $mul.ref(0, 8)), $mul.ref(5, 1));
    goto corral_source_split_10086;

  $bb78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2470} out_vslice_dummy_var_282 := seq_puts(in_$p0, .str.44);
    goto corral_source_split_10085;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2467} out_vslice_dummy_var_279 := seq_puts(in_$p0, .str.41);
    goto corral_source_split_10065;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb65:
    assume out_$i161 == 1;
    goto corral_source_split_10063;

  corral_source_split_10061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    out_$i161 := $eq.i32(out_$i160, 0);
    goto corral_source_split_10061;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    out_$i160 := $zext.i8.i32(out_$i159);
    goto corral_source_split_10060;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    out_$i159 := $load.i8($M.45, out_$p158);
    goto corral_source_split_10059;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    out_$p158 := $add.ref($add.ref(out_$p84, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_10058;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2466} out_vslice_dummy_var_278 := seq_puts(in_$p0, .str.40);
    goto corral_source_split_10057;

  corral_source_split_10055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2465} out_vslice_dummy_var_277 := seq_printf.ref.ref.i32(in_$p0, .str.39, out_$i155);
    goto corral_source_split_10056;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    out_$i155 := $zext.i8.i32(out_$i154);
    goto corral_source_split_10055;

  corral_source_split_10053:
    assume {:verifier.code 0} true;
    out_$i154 := $load.i8($M.45, out_$p153);
    goto corral_source_split_10054;

  corral_source_split_10052:
    assume {:verifier.code 0} true;
    out_$p153 := $add.ref($add.ref(out_$p84, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_10053;

  corral_source_split_10051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2464} out_vslice_dummy_var_276 := seq_printf.ref.ref.i32(in_$p0, .str.38, out_$i151);
    goto corral_source_split_10052;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_10051;

  corral_source_split_10049:
    assume {:verifier.code 0} true;
    out_$i151 := 128;
    goto $bb64;

  corral_source_split_10047:
    assume {:verifier.code 0} true;
    out_$i151 := out_$i150;
    goto $bb64;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    out_$i150 := $udiv.i32(out_$i149, 2);
    goto corral_source_split_10047;

  corral_source_split_10045:
    assume {:verifier.code 0} true;
    out_$i149 := $zext.i8.i32(out_$i148);
    goto corral_source_split_10046;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    out_$i148 := $load.i8($M.45, out_$p147);
    goto corral_source_split_10045;

  corral_source_split_10043:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref($add.ref(out_$p84, $mul.ref(0, 8)), $mul.ref(3, 1));
    goto corral_source_split_10044;

  $bb62:
    assume out_$i146 == 1;
    goto corral_source_split_10043;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_10037:
    assume {:verifier.code 0} true;
    out_$i146 := $ne.i32(out_$i145, 0);
    goto corral_source_split_10038;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    out_$i145 := $zext.i8.i32(out_$i144);
    goto corral_source_split_10037;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    out_$i144 := $load.i8($M.45, out_$p143);
    goto corral_source_split_10036;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref($add.ref(out_$p84, $mul.ref(0, 8)), $mul.ref(3, 1));
    goto corral_source_split_10035;

  corral_source_split_10033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2462} out_vslice_dummy_var_274 := seq_printf.ref.ref.i32(in_$p0, .str.37, out_$i141);
    goto corral_source_split_10034;

  corral_source_split_10032:
    assume {:verifier.code 0} true;
    out_$i141 := $zext.i8.i32(out_$i140);
    goto corral_source_split_10033;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    out_$i140 := $load.i8($M.45, out_$p139);
    goto corral_source_split_10032;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref($add.ref(out_$p84, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_10031;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2461} out_vslice_dummy_var_273 := seq_printf.ref.ref.i32(in_$p0, .str.36, out_$i137);
    goto corral_source_split_10030;

  corral_source_split_10028:
    assume {:verifier.code 0} true;
    out_$i137 := $zext.i8.i32(out_$i136);
    goto corral_source_split_10029;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    out_$i136 := $load.i8($M.45, out_$p135);
    goto corral_source_split_10028;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref(out_$p84, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_10027;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2460} out_vslice_dummy_var_272 := seq_putc(in_$p0, 10);
    goto corral_source_split_10026;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_10016:
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_10015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2459} out_vslice_dummy_var_271 := seq_puts(in_$p0, .str.34);
    goto corral_source_split_10016;

  $bb56:
    assume out_$i125 == 1;
    goto corral_source_split_10015;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_10012:
    assume {:verifier.code 0} true;
    out_$i125 := $eq.i32(out_$i124, 32);
    goto corral_source_split_10013;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    out_$i124 := $and.i32(out_$i123, 240);
    goto corral_source_split_10012;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    out_$i123 := $zext.i8.i32(out_$i122);
    goto corral_source_split_10011;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    out_$i122 := $load.i8($M.43, out_$p121);
    goto corral_source_split_10010;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref(in_$p33, $mul.ref(out_$i120, 1));
    goto corral_source_split_10009;

  $bb54:
    assume {:verifier.code 0} true;
    out_$i120 := $sext.i32.i64(out_$i73);
    goto corral_source_split_10008;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_9993:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_9982:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2454} out_vslice_dummy_var_266 := seq_puts(in_$p0, .str.29);
    goto corral_source_split_9971;

  corral_source_split_9969:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb37:
    assume out_$i96 == 1;
    goto corral_source_split_9969;

  corral_source_split_9967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_9966:
    assume {:verifier.code 0} true;
    out_$i96 := $eq.i32(out_$i95, 0);
    goto corral_source_split_9967;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    out_$i95 := $and.i32(out_$i94, 15);
    goto corral_source_split_9966;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    out_$i94 := $zext.i8.i32(out_$i93);
    goto corral_source_split_9965;

  corral_source_split_9963:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i8($M.43, out_$p92);
    goto corral_source_split_9964;

  corral_source_split_9962:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref(in_$p33, $mul.ref(out_$i91, 1));
    goto corral_source_split_9963;

  corral_source_split_9961:
    assume {:verifier.code 0} true;
    out_$i91 := $sext.i32.i64(out_$i73);
    goto corral_source_split_9962;

  corral_source_split_9960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2453} out_vslice_dummy_var_265 := seq_printf.ref.ref.i32(in_$p0, .str.28, out_$i73);
    goto corral_source_split_9961;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_9960;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref($add.ref($add.ref(out_$p86, $mul.ref(0, 2204)), $mul.ref(4, 1)), $mul.ref(out_$i85, 200)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    out_$p84 := out_$p89;
    goto $bb36;

  corral_source_split_9954:
    assume {:verifier.code 0} true;
    out_$p84 := out_$p83;
    goto $bb36;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref($add.ref($add.ref(out_$p80, $mul.ref(0, 23964)), $mul.ref(4, 1)), $mul.ref(out_$i79, 584)), $mul.ref(0, 1));
    goto corral_source_split_9954;

  corral_source_split_9952:
    assume {:verifier.code 0} true;
    out_$p80 := $bitcast.ref.ref(in_$p49);
    goto corral_source_split_9953;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    out_$i79 := $sext.i32.i64(out_$i73);
    goto corral_source_split_9952;

  $bb34:
    assume out_$i78 == 1;
    goto corral_source_split_9951;

  corral_source_split_9949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_9948:
    assume {:verifier.code 0} true;
    out_$i78 := $ne.i64(out_$i77, 0);
    goto corral_source_split_9949;

  corral_source_split_9947:
    assume {:verifier.code 0} true;
    out_$i77 := $and.i64(out_$i76, 134217728);
    goto corral_source_split_9948;

  corral_source_split_9946:
    assume {:verifier.code 0} true;
    out_$i76 := $zext.i32.i64(out_$i75);
    goto corral_source_split_9947;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i32($M.1, out_$p74);
    goto corral_source_split_9946;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p1, $mul.ref(0, 1912)), $mul.ref(4, 1));
    goto corral_source_split_9945;

  corral_source_split_10133:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb102:
    assume out_$i200 == 1;
    goto corral_source_split_10133;

  corral_source_split_10131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    out_$i200 := $slt.i32(out_$i73, out_$i199);
    goto corral_source_split_10131;

  $bb101:
    assume {:verifier.code 0} true;
    goto corral_source_split_10130;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    out_$i199 := in_$i34;
    goto $bb101;

  corral_source_split_10126:
    assume {:verifier.code 0} true;
    out_$i199 := out_$i198;
    goto $bb101;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    out_$i198 := $add.i32(in_$i3, 1);
    goto corral_source_split_10126;

  $bb99:
    assume out_$i197 == 1;
    goto corral_source_split_10125;

  corral_source_split_9943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  corral_source_split_9942:
    assume {:verifier.code 0} true;
    out_$i197 := $slt.i32(out_$i196, in_$i34);
    goto corral_source_split_9943;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    out_$i196 := $add.i32(in_$i3, 1);
    goto corral_source_split_9942;

  $bb100:
    assume !(out_$i197 == 1);
    goto corral_source_split_10128;

  corral_source_split_9957:
    assume {:verifier.code 0} true;
    out_$p86 := $bitcast.ref.ref(in_$p49);
    goto corral_source_split_9958;

  corral_source_split_9956:
    assume {:verifier.code 0} true;
    out_$i85 := $sext.i32.i64(out_$i73);
    goto corral_source_split_9957;

  $bb35:
    assume !(out_$i78 == 1);
    goto corral_source_split_9956;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2455} out_vslice_dummy_var_267 := seq_puts(in_$p0, .str.30);
    goto corral_source_split_9982;

  corral_source_split_9980:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb41:
    assume out_$i102 == 1;
    goto corral_source_split_9980;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_9977:
    assume {:verifier.code 0} true;
    out_$i102 := $eq.i32(out_$i101, 1);
    goto corral_source_split_9978;

  corral_source_split_9976:
    assume {:verifier.code 0} true;
    out_$i101 := $and.i32(out_$i100, 15);
    goto corral_source_split_9977;

  corral_source_split_9975:
    assume {:verifier.code 0} true;
    out_$i100 := $zext.i8.i32(out_$i99);
    goto corral_source_split_9976;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    out_$i99 := $load.i8($M.43, out_$p98);
    goto corral_source_split_9975;

  corral_source_split_9973:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref(in_$p33, $mul.ref(out_$i97, 1));
    goto corral_source_split_9974;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i97 := $sext.i32.i64(out_$i73);
    goto corral_source_split_9973;

  $bb38:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2456} out_vslice_dummy_var_268 := seq_puts(in_$p0, .str.31);
    goto corral_source_split_9993;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb45:
    assume out_$i108 == 1;
    goto corral_source_split_9991;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_9988:
    assume {:verifier.code 0} true;
    out_$i108 := $eq.i32(out_$i107, 2);
    goto corral_source_split_9989;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    out_$i107 := $and.i32(out_$i106, 15);
    goto corral_source_split_9988;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    out_$i106 := $zext.i8.i32(out_$i105);
    goto corral_source_split_9987;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i8($M.43, out_$p104);
    goto corral_source_split_9986;

  corral_source_split_9984:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref(in_$p33, $mul.ref(out_$i103, 1));
    goto corral_source_split_9985;

  $bb44:
    assume {:verifier.code 0} true;
    out_$i103 := $sext.i32.i64(out_$i73);
    goto corral_source_split_9984;

  $bb42:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2457} out_vslice_dummy_var_269 := seq_puts(in_$p0, .str.32);
    goto corral_source_split_10004;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb49:
    assume out_$i114 == 1;
    goto corral_source_split_10002;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_9999:
    assume {:verifier.code 0} true;
    out_$i114 := $eq.i32(out_$i113, 3);
    goto corral_source_split_10000;

  corral_source_split_9998:
    assume {:verifier.code 0} true;
    out_$i113 := $and.i32(out_$i112, 15);
    goto corral_source_split_9999;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    out_$i112 := $zext.i8.i32(out_$i111);
    goto corral_source_split_9998;

  corral_source_split_9996:
    assume {:verifier.code 0} true;
    out_$i111 := $load.i8($M.43, out_$p110);
    goto corral_source_split_9997;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref(in_$p33, $mul.ref(out_$i109, 1));
    goto corral_source_split_9996;

  $bb48:
    assume {:verifier.code 0} true;
    out_$i109 := $sext.i32.i64(out_$i73);
    goto corral_source_split_9995;

  $bb46:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2458} out_vslice_dummy_var_270 := seq_puts(in_$p0, .str.33);
    goto corral_source_split_10006;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb50:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb60:
    assume !(out_$i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_10041:
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_10040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2463} out_vslice_dummy_var_275 := seq_puts(in_$p0, .str.35);
    goto corral_source_split_10041;

  $bb59:
    assume out_$i132 == 1;
    goto corral_source_split_10040;

  corral_source_split_10024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_10023:
    assume {:verifier.code 0} true;
    out_$i132 := $eq.i32(out_$i131, 16);
    goto corral_source_split_10024;

  corral_source_split_10022:
    assume {:verifier.code 0} true;
    out_$i131 := $and.i32(out_$i130, 240);
    goto corral_source_split_10023;

  corral_source_split_10021:
    assume {:verifier.code 0} true;
    out_$i130 := $zext.i8.i32(out_$i129);
    goto corral_source_split_10022;

  corral_source_split_10020:
    assume {:verifier.code 0} true;
    out_$i129 := $load.i8($M.43, out_$p128);
    goto corral_source_split_10021;

  corral_source_split_10019:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref(in_$p33, $mul.ref(out_$i127, 1));
    goto corral_source_split_10020;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    out_$i127 := $sext.i32.i64(out_$i73);
    goto corral_source_split_10019;

  $bb57:
    assume !(out_$i125 == 1);
    goto corral_source_split_10018;

  $bb63:
    assume !(out_$i146 == 1);
    goto corral_source_split_10049;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2468} out_vslice_dummy_var_280 := seq_puts(in_$p0, .str.42);
    goto corral_source_split_10074;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb69:
    assume out_$i165 == 1;
    goto corral_source_split_10072;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_10069:
    assume {:verifier.code 0} true;
    out_$i165 := $eq.i32(out_$i164, 1);
    goto corral_source_split_10070;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    out_$i164 := $zext.i8.i32(out_$i163);
    goto corral_source_split_10069;

  corral_source_split_10067:
    assume {:verifier.code 0} true;
    out_$i163 := $load.i8($M.45, out_$p162);
    goto corral_source_split_10068;

  $bb68:
    assume {:verifier.code 0} true;
    out_$p162 := $add.ref($add.ref(out_$p84, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_10067;

  $bb66:
    assume !(out_$i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2469} out_vslice_dummy_var_281 := seq_puts(in_$p0, .str.43);
    goto corral_source_split_10083;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb73:
    assume out_$i169 == 1;
    goto corral_source_split_10081;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_10078:
    assume {:verifier.code 0} true;
    out_$i169 := $eq.i32(out_$i168, 2);
    goto corral_source_split_10079;

  corral_source_split_10077:
    assume {:verifier.code 0} true;
    out_$i168 := $zext.i8.i32(out_$i167);
    goto corral_source_split_10078;

  corral_source_split_10076:
    assume {:verifier.code 0} true;
    out_$i167 := $load.i8($M.45, out_$p166);
    goto corral_source_split_10077;

  $bb72:
    assume {:verifier.code 0} true;
    out_$p166 := $add.ref($add.ref(out_$p84, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_10076;

  $bb70:
    assume !(out_$i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb74:
    assume !(out_$i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2472} out_vslice_dummy_var_284 := seq_puts(in_$p0, .str.46);
    goto corral_source_split_10102;

  corral_source_split_10100:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb83:
    assume out_$i181 == 1;
    goto corral_source_split_10100;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_10097:
    assume {:verifier.code 0} true;
    out_$i181 := $eq.i32(out_$i180, 1);
    goto corral_source_split_10098;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    out_$i180 := $zext.i8.i32(out_$i179);
    goto corral_source_split_10097;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    out_$i179 := $load.i8($M.45, out_$p178);
    goto corral_source_split_10096;

  $bb82:
    assume {:verifier.code 0} true;
    out_$p178 := $add.ref($add.ref(out_$p84, $mul.ref(0, 8)), $mul.ref(5, 1));
    goto corral_source_split_10095;

  $bb80:
    assume !(out_$i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb84:
    assume !(out_$i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2475} out_vslice_dummy_var_287 := seq_puts(in_$p0, .str.49);
    goto corral_source_split_10121;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb93:
    assume out_$i192 == 1;
    goto corral_source_split_10119;

  corral_source_split_10117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_10116:
    assume {:verifier.code 0} true;
    out_$i192 := $eq.i32(out_$i191, 1);
    goto corral_source_split_10117;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    out_$i191 := $zext.i8.i32(out_$i190);
    goto corral_source_split_10116;

  corral_source_split_10114:
    assume {:verifier.code 0} true;
    out_$i190 := $load.i8($M.45, out_$p189);
    goto corral_source_split_10115;

  $bb92:
    assume {:verifier.code 0} true;
    out_$p189 := $add.ref($add.ref(out_$p84, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_10114;

  $bb90:
    assume !(out_$i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb94:
    assume !(out_$i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_10123_dummy:
    call {:si_unique_call 1} out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p83, out_$i85, out_$p86, out_$p89, out_$p84, out_$i91, out_$p92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$p110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i120, out_$p121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i127, out_$p128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p135, out_$i136, out_$i137, out_$p139, out_$i140, out_$i141, out_$p143, out_$i144, out_$i145, out_$i146, out_$p147, out_$i148, out_$i149, out_$i150, out_$i151, out_$p153, out_$i154, out_$i155, out_$p158, out_$i159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$i165, out_$p166, out_$i167, out_$i168, out_$i169, out_$p174, out_$i175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$i181, out_$p185, out_$i186, out_$i187, out_$i188, out_$p189, out_$i190, out_$i191, out_$i192, out_$i195, out_$i73, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_vslice_dummy_var_265, out_vslice_dummy_var_266, out_vslice_dummy_var_267, out_vslice_dummy_var_268, out_vslice_dummy_var_269, out_vslice_dummy_var_270, out_vslice_dummy_var_271, out_vslice_dummy_var_272, out_vslice_dummy_var_273, out_vslice_dummy_var_274, out_vslice_dummy_var_275, out_vslice_dummy_var_276, out_vslice_dummy_var_277, out_vslice_dummy_var_278, out_vslice_dummy_var_279, out_vslice_dummy_var_280, out_vslice_dummy_var_281, out_vslice_dummy_var_282, out_vslice_dummy_var_283, out_vslice_dummy_var_284, out_vslice_dummy_var_285, out_vslice_dummy_var_286, out_vslice_dummy_var_287 := proc_show_rdrv_loop_$bb32(in_$p0, in_$p1, in_$i3, in_$p33, in_$i34, in_$p49, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p83, out_$i85, out_$p86, out_$p89, out_$p84, out_$i91, out_$p92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$p110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i120, out_$p121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i127, out_$p128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p135, out_$i136, out_$i137, out_$p139, out_$i140, out_$i141, out_$p143, out_$i144, out_$i145, out_$i146, out_$p147, out_$i148, out_$i149, out_$i150, out_$i151, out_$p153, out_$i154, out_$i155, out_$p158, out_$i159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$i165, out_$p166, out_$i167, out_$i168, out_$i169, out_$p174, out_$i175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$i181, out_$p185, out_$i186, out_$i187, out_$i188, out_$p189, out_$i190, out_$i191, out_$i192, out_$i195, out_$i73, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_vslice_dummy_var_265, out_vslice_dummy_var_266, out_vslice_dummy_var_267, out_vslice_dummy_var_268, out_vslice_dummy_var_269, out_vslice_dummy_var_270, out_vslice_dummy_var_271, out_vslice_dummy_var_272, out_vslice_dummy_var_273, out_vslice_dummy_var_274, out_vslice_dummy_var_275, out_vslice_dummy_var_276, out_vslice_dummy_var_277, out_vslice_dummy_var_278, out_vslice_dummy_var_279, out_vslice_dummy_var_280, out_vslice_dummy_var_281, out_vslice_dummy_var_282, out_vslice_dummy_var_283, out_vslice_dummy_var_284, out_vslice_dummy_var_285, out_vslice_dummy_var_286, out_vslice_dummy_var_287);
    return;

  exit:
    return;
}



procedure proc_show_rdrv_loop_$bb32(in_$p0: ref, in_$p1: ref, in_$i3: i32, in_$p33: ref, in_$i34: i32, in_$p49: ref, in_$p74: ref, in_$i75: i32, in_$i76: i64, in_$i77: i64, in_$i78: i1, in_$i79: i64, in_$p80: ref, in_$p83: ref, in_$i85: i64, in_$p86: ref, in_$p89: ref, in_$p84: ref, in_$i91: i64, in_$p92: ref, in_$i93: i8, in_$i94: i32, in_$i95: i32, in_$i96: i1, in_$i97: i64, in_$p98: ref, in_$i99: i8, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$i103: i64, in_$p104: ref, in_$i105: i8, in_$i106: i32, in_$i107: i32, in_$i108: i1, in_$i109: i64, in_$p110: ref, in_$i111: i8, in_$i112: i32, in_$i113: i32, in_$i114: i1, in_$i120: i64, in_$p121: ref, in_$i122: i8, in_$i123: i32, in_$i124: i32, in_$i125: i1, in_$i127: i64, in_$p128: ref, in_$i129: i8, in_$i130: i32, in_$i131: i32, in_$i132: i1, in_$p135: ref, in_$i136: i8, in_$i137: i32, in_$p139: ref, in_$i140: i8, in_$i141: i32, in_$p143: ref, in_$i144: i8, in_$i145: i32, in_$i146: i1, in_$p147: ref, in_$i148: i8, in_$i149: i32, in_$i150: i32, in_$i151: i32, in_$p153: ref, in_$i154: i8, in_$i155: i32, in_$p158: ref, in_$i159: i8, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$i163: i8, in_$i164: i32, in_$i165: i1, in_$p166: ref, in_$i167: i8, in_$i168: i32, in_$i169: i1, in_$p174: ref, in_$i175: i8, in_$i176: i32, in_$i177: i1, in_$p178: ref, in_$i179: i8, in_$i180: i32, in_$i181: i1, in_$p185: ref, in_$i186: i8, in_$i187: i32, in_$i188: i1, in_$p189: ref, in_$i190: i8, in_$i191: i32, in_$i192: i1, in_$i195: i32, in_$i73: i32, in_$i196: i32, in_$i197: i1, in_$i198: i32, in_$i199: i32, in_$i200: i1, in_vslice_dummy_var_265: i32, in_vslice_dummy_var_266: i32, in_vslice_dummy_var_267: i32, in_vslice_dummy_var_268: i32, in_vslice_dummy_var_269: i32, in_vslice_dummy_var_270: i32, in_vslice_dummy_var_271: i32, in_vslice_dummy_var_272: i32, in_vslice_dummy_var_273: i32, in_vslice_dummy_var_274: i32, in_vslice_dummy_var_275: i32, in_vslice_dummy_var_276: i32, in_vslice_dummy_var_277: i32, in_vslice_dummy_var_278: i32, in_vslice_dummy_var_279: i32, in_vslice_dummy_var_280: i32, in_vslice_dummy_var_281: i32, in_vslice_dummy_var_282: i32, in_vslice_dummy_var_283: i32, in_vslice_dummy_var_284: i32, in_vslice_dummy_var_285: i32, in_vslice_dummy_var_286: i32, in_vslice_dummy_var_287: i32) returns (out_$p74: ref, out_$i75: i32, out_$i76: i64, out_$i77: i64, out_$i78: i1, out_$i79: i64, out_$p80: ref, out_$p83: ref, out_$i85: i64, out_$p86: ref, out_$p89: ref, out_$p84: ref, out_$i91: i64, out_$p92: ref, out_$i93: i8, out_$i94: i32, out_$i95: i32, out_$i96: i1, out_$i97: i64, out_$p98: ref, out_$i99: i8, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$i103: i64, out_$p104: ref, out_$i105: i8, out_$i106: i32, out_$i107: i32, out_$i108: i1, out_$i109: i64, out_$p110: ref, out_$i111: i8, out_$i112: i32, out_$i113: i32, out_$i114: i1, out_$i120: i64, out_$p121: ref, out_$i122: i8, out_$i123: i32, out_$i124: i32, out_$i125: i1, out_$i127: i64, out_$p128: ref, out_$i129: i8, out_$i130: i32, out_$i131: i32, out_$i132: i1, out_$p135: ref, out_$i136: i8, out_$i137: i32, out_$p139: ref, out_$i140: i8, out_$i141: i32, out_$p143: ref, out_$i144: i8, out_$i145: i32, out_$i146: i1, out_$p147: ref, out_$i148: i8, out_$i149: i32, out_$i150: i32, out_$i151: i32, out_$p153: ref, out_$i154: i8, out_$i155: i32, out_$p158: ref, out_$i159: i8, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$i163: i8, out_$i164: i32, out_$i165: i1, out_$p166: ref, out_$i167: i8, out_$i168: i32, out_$i169: i1, out_$p174: ref, out_$i175: i8, out_$i176: i32, out_$i177: i1, out_$p178: ref, out_$i179: i8, out_$i180: i32, out_$i181: i1, out_$p185: ref, out_$i186: i8, out_$i187: i32, out_$i188: i1, out_$p189: ref, out_$i190: i8, out_$i191: i32, out_$i192: i1, out_$i195: i32, out_$i73: i32, out_$i196: i32, out_$i197: i1, out_$i198: i32, out_$i199: i32, out_$i200: i1, out_vslice_dummy_var_265: i32, out_vslice_dummy_var_266: i32, out_vslice_dummy_var_267: i32, out_vslice_dummy_var_268: i32, out_vslice_dummy_var_269: i32, out_vslice_dummy_var_270: i32, out_vslice_dummy_var_271: i32, out_vslice_dummy_var_272: i32, out_vslice_dummy_var_273: i32, out_vslice_dummy_var_274: i32, out_vslice_dummy_var_275: i32, out_vslice_dummy_var_276: i32, out_vslice_dummy_var_277: i32, out_vslice_dummy_var_278: i32, out_vslice_dummy_var_279: i32, out_vslice_dummy_var_280: i32, out_vslice_dummy_var_281: i32, out_vslice_dummy_var_282: i32, out_vslice_dummy_var_283: i32, out_vslice_dummy_var_284: i32, out_vslice_dummy_var_285: i32, out_vslice_dummy_var_286: i32, out_vslice_dummy_var_287: i32);



implementation {:SIextraRecBound 16} proc_show_pdrv_loop_$bb23(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$p4: ref, in_$p19: ref, in_$p31: ref, in_$i43: i32, in_$i44: i32, in_$i45: i64, in_$p46: ref, in_$i47: i8, in_$i48: i32, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$i57: i32, in_$i58: i32, in_$i59: i1, in_$i65: i8, in_$i66: i32, in_$i67: i8, in_$i68: i8, in_$i69: i32, in_$i70: i8, in_$i71: i64, in_$i72: i32, in_$i73: i1, in_$i74: i8, in_$i75: i32, in_$i76: i32, in_$i77: i1, in_$i79: i32, in_$i80: i1, in_$i42: i32, in_cmdloc_dummy_var_110: [ref]i8, in_cmdloc_dummy_var_111: [ref]i8, in_vslice_dummy_var_291: i32, in_vslice_dummy_var_292: i32, in_vslice_dummy_var_293: i32, in_vslice_dummy_var_294: i32, in_vslice_dummy_var_295: i32, in_vslice_dummy_var_296: i32) returns (out_$i43: i32, out_$i44: i32, out_$i45: i64, out_$p46: ref, out_$i47: i8, out_$i48: i32, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$i57: i32, out_$i58: i32, out_$i59: i1, out_$i65: i8, out_$i66: i32, out_$i67: i8, out_$i68: i8, out_$i69: i32, out_$i70: i8, out_$i71: i64, out_$i72: i32, out_$i73: i1, out_$i74: i8, out_$i75: i32, out_$i76: i32, out_$i77: i1, out_$i79: i32, out_$i80: i1, out_$i42: i32, out_cmdloc_dummy_var_110: [ref]i8, out_cmdloc_dummy_var_111: [ref]i8, out_vslice_dummy_var_291: i32, out_vslice_dummy_var_292: i32, out_vslice_dummy_var_293: i32, out_vslice_dummy_var_294: i32, out_vslice_dummy_var_295: i32, out_vslice_dummy_var_296: i32)
{

  entry:
    out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i79, out_$i80, out_$i42, out_cmdloc_dummy_var_110, out_cmdloc_dummy_var_111, out_vslice_dummy_var_291, out_vslice_dummy_var_292, out_vslice_dummy_var_293, out_vslice_dummy_var_294, out_vslice_dummy_var_295, out_vslice_dummy_var_296 := in_$i43, in_$i44, in_$i45, in_$p46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i79, in_$i80, in_$i42, in_cmdloc_dummy_var_110, in_cmdloc_dummy_var_111, in_vslice_dummy_var_291, in_vslice_dummy_var_292, in_vslice_dummy_var_293, in_vslice_dummy_var_294, in_vslice_dummy_var_295, in_vslice_dummy_var_296;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_10257;

  $bb51:
    assume out_$i80 == 1;
    assume {:verifier.code 0} true;
    out_$i42 := out_$i79;
    goto $bb51_dummy;

  corral_source_split_10316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    out_$i80 := $sle.i32(out_$i79, 15);
    goto corral_source_split_10316;

  $bb49:
    assume {:verifier.code 0} true;
    out_$i79 := $add.i32(out_$i42, 1);
    call {:si_unique_call 2527} {:cexpr "tgt"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_10315;

  corral_source_split_10319:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb47:
    assume {:verifier.code 0} true;
    assume out_$i77 == 1;
    goto $bb45;

  $bb44:
    assume {:verifier.code 0} true;
    assume out_$i73 == 1;
    goto $bb45;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb46;

  corral_source_split_10306:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i32(out_$i72, 0);
    goto corral_source_split_10307;

  SeqInstr_651:
    call {:si_unique_call 2526} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_10306;

  SeqInstr_650:
    assume assertsPassed;
    goto SeqInstr_651;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2525} out_$i72 := mega_internal_dev_inquiry(in_$p1, out_$i67, out_$i70, out_$i71);
    goto SeqInstr_650;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i64($M.48, in_$p4);
    goto corral_source_split_10305;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    out_$i70 := $trunc.i32.i8(out_$i69);
    goto corral_source_split_10304;

  corral_source_split_10302:
    assume {:verifier.code 0} true;
    out_$i69 := $zext.i8.i32(out_$i68);
    goto corral_source_split_10303;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    out_$i68 := $trunc.i32.i8(out_$i42);
    goto corral_source_split_10302;

  corral_source_split_10300:
    assume {:verifier.code 0} true;
    out_$i67 := $trunc.i32.i8(out_$i66);
    goto corral_source_split_10301;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    out_$i66 := $zext.i8.i32(out_$i65);
    goto corral_source_split_10300;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    out_$i65 := $trunc.i32.i8(in_$i2);
    goto corral_source_split_10299;

  $bb42:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_110 := $M.47;
    call {:si_unique_call 2524} out_cmdloc_dummy_var_111 := $memset.i8(out_cmdloc_dummy_var_110, in_$p19, 0, 256, $zext.i32.i64(1), 0 == 1);
    $M.47 := out_cmdloc_dummy_var_111;
    goto corral_source_split_10298;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_10294:
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_10286:
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_10270:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2519} out_vslice_dummy_var_291 := seq_printf.ref.ref.i32.i32(in_$p0, .str.10, in_$i2, out_$i42);
    goto corral_source_split_10270;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb25:
    assume out_$i50 == 1;
    goto corral_source_split_10268;

  corral_source_split_10266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_10265:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i49, 3);
    goto corral_source_split_10266;

  corral_source_split_10264:
    assume {:verifier.code 0} true;
    out_$i49 := $and.i32(out_$i48, 15);
    goto corral_source_split_10265;

  corral_source_split_10263:
    assume {:verifier.code 0} true;
    out_$i48 := $zext.i8.i32(out_$i47);
    goto corral_source_split_10264;

  corral_source_split_10262:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i8($M.43, out_$p46);
    call {:si_unique_call 2518} {:cexpr "state"} boogie_si_record_i8(out_$i47);
    goto corral_source_split_10263;

  corral_source_split_10261:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref(in_$p31, $mul.ref(out_$i45, 1));
    goto corral_source_split_10262;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    out_$i45 := $sext.i32.i64(out_$i44);
    goto corral_source_split_10261;

  corral_source_split_10259:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(out_$i43, out_$i42);
    call {:si_unique_call 2517} {:cexpr "i"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_10260;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i43 := $mul.i32(in_$i2, 16);
    goto corral_source_split_10259;

  corral_source_split_10257:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2520} out_vslice_dummy_var_292 := seq_printf.ref.ref.i32.i32(in_$p0, .str.11, in_$i2, out_$i42);
    goto corral_source_split_10278;

  corral_source_split_10276:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb29:
    assume out_$i53 == 1;
    goto corral_source_split_10276;

  corral_source_split_10274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i52, 4);
    goto corral_source_split_10274;

  corral_source_split_10272:
    assume {:verifier.code 0} true;
    out_$i52 := $and.i32(out_$i51, 15);
    goto corral_source_split_10273;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i51 := $zext.i8.i32(out_$i47);
    goto corral_source_split_10272;

  $bb26:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2521} out_vslice_dummy_var_293 := seq_printf.ref.ref.i32.i32(in_$p0, .str.12, in_$i2, out_$i42);
    goto corral_source_split_10286;

  corral_source_split_10284:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb33:
    assume out_$i56 == 1;
    goto corral_source_split_10284;

  corral_source_split_10282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_10281:
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i32(out_$i55, 5);
    goto corral_source_split_10282;

  corral_source_split_10280:
    assume {:verifier.code 0} true;
    out_$i55 := $and.i32(out_$i54, 15);
    goto corral_source_split_10281;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i54 := $zext.i8.i32(out_$i47);
    goto corral_source_split_10280;

  $bb30:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2522} out_vslice_dummy_var_294 := seq_printf.ref.ref.i32.i32(in_$p0, .str.13, in_$i2, out_$i42);
    goto corral_source_split_10294;

  corral_source_split_10292:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb37:
    assume out_$i59 == 1;
    goto corral_source_split_10292;

  corral_source_split_10290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_10289:
    assume {:verifier.code 0} true;
    out_$i59 := $eq.i32(out_$i58, 6);
    goto corral_source_split_10290;

  corral_source_split_10288:
    assume {:verifier.code 0} true;
    out_$i58 := $and.i32(out_$i57, 15);
    goto corral_source_split_10289;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i57 := $zext.i8.i32(out_$i47);
    goto corral_source_split_10288;

  $bb34:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2523} out_vslice_dummy_var_295 := seq_printf.ref.ref.i32.i32(in_$p0, .str.14, in_$i2, out_$i42);
    goto corral_source_split_10296;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb38:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    out_$i77 := $ne.i32(out_$i76, 0);
    goto corral_source_split_10313;

  corral_source_split_10311:
    assume {:verifier.code 0} true;
    out_$i76 := $and.i32(out_$i75, 31);
    goto corral_source_split_10312;

  corral_source_split_10310:
    assume {:verifier.code 0} true;
    out_$i75 := $sext.i8.i32(out_$i74);
    goto corral_source_split_10311;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i8($M.47, in_$p19);
    goto corral_source_split_10310;

  $bb46:
    assume !(out_$i73 == 1);
    goto corral_source_split_10309;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2529} mega_print_inquiry(in_$p0, in_$p19);
    goto corral_source_split_10319;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2528} out_vslice_dummy_var_296 := seq_puts(in_$p0, .str.15);
    goto corral_source_split_10318;

  $bb48:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb51_dummy:
    call {:si_unique_call 1} out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i79, out_$i80, out_$i42, out_cmdloc_dummy_var_110, out_cmdloc_dummy_var_111, out_vslice_dummy_var_291, out_vslice_dummy_var_292, out_vslice_dummy_var_293, out_vslice_dummy_var_294, out_vslice_dummy_var_295, out_vslice_dummy_var_296 := proc_show_pdrv_loop_$bb23(in_$p0, in_$p1, in_$i2, in_$p4, in_$p19, in_$p31, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i79, out_$i80, out_$i42, out_cmdloc_dummy_var_110, out_cmdloc_dummy_var_111, out_vslice_dummy_var_291, out_vslice_dummy_var_292, out_vslice_dummy_var_293, out_vslice_dummy_var_294, out_vslice_dummy_var_295, out_vslice_dummy_var_296);
    return;

  exit:
    return;
}



procedure proc_show_pdrv_loop_$bb23(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$p4: ref, in_$p19: ref, in_$p31: ref, in_$i43: i32, in_$i44: i32, in_$i45: i64, in_$p46: ref, in_$i47: i8, in_$i48: i32, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$i57: i32, in_$i58: i32, in_$i59: i1, in_$i65: i8, in_$i66: i32, in_$i67: i8, in_$i68: i8, in_$i69: i32, in_$i70: i8, in_$i71: i64, in_$i72: i32, in_$i73: i1, in_$i74: i8, in_$i75: i32, in_$i76: i32, in_$i77: i1, in_$i79: i32, in_$i80: i1, in_$i42: i32, in_cmdloc_dummy_var_110: [ref]i8, in_cmdloc_dummy_var_111: [ref]i8, in_vslice_dummy_var_291: i32, in_vslice_dummy_var_292: i32, in_vslice_dummy_var_293: i32, in_vslice_dummy_var_294: i32, in_vslice_dummy_var_295: i32, in_vslice_dummy_var_296: i32) returns (out_$i43: i32, out_$i44: i32, out_$i45: i64, out_$p46: ref, out_$i47: i8, out_$i48: i32, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$i57: i32, out_$i58: i32, out_$i59: i1, out_$i65: i8, out_$i66: i32, out_$i67: i8, out_$i68: i8, out_$i69: i32, out_$i70: i8, out_$i71: i64, out_$i72: i32, out_$i73: i1, out_$i74: i8, out_$i75: i32, out_$i76: i32, out_$i77: i1, out_$i79: i32, out_$i80: i1, out_$i42: i32, out_cmdloc_dummy_var_110: [ref]i8, out_cmdloc_dummy_var_111: [ref]i8, out_vslice_dummy_var_291: i32, out_vslice_dummy_var_292: i32, out_vslice_dummy_var_293: i32, out_vslice_dummy_var_294: i32, out_vslice_dummy_var_295: i32, out_vslice_dummy_var_296: i32);
  modifies $M.26, $M.1, $M.49, $M.19, $CurrAddr, $M.20, $M.21, assertsPassed, $M.47;



implementation ldv_file_operations_file_operations_instance_0_loop_$bb10(in_$p7: ref, in_$p9: ref, in_$i13: i64, in_$i30: i32, in_$i31: i1, in_$i32: i1, in_$i33: i32, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i1, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$p46: ref) returns (out_$i30: i32, out_$i31: i1, out_$i32: i1, out_$i33: i32, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i1, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$p46: ref)
{

  entry:
    out_$i30, out_$i31, out_$i32, out_$i33, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46 := in_$i30, in_$i31, in_$i32, in_$i33, in_$p35, in_$p36, in_$p37, in_$i38, in_$i39, in_$p40, in_$p41, in_$i42, in_$i43, in_$p44, in_$p45, in_$p46;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2663} out_$i30 := ldv_undef_int();
    call {:si_unique_call 2664} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_10700;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb31_dummy;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_10737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2673} ldv_free(out_$p46);
    goto corral_source_split_10738;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    out_$p46 := $bitcast.ref.ref(out_$p37);
    goto corral_source_split_10737;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2672} ldv_free(out_$p35);
    goto corral_source_split_10736;

  $bb29:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2671} ldv_file_operations_instance_write_0_4(out_$p45, in_$p9, out_$p35, in_$i13, out_$p37);
    goto corral_source_split_10734;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.1, out_$p44);
    goto corral_source_split_10733;

  corral_source_split_10731:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p7, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_10732;

  $bb28:
    assume out_$i43 == 1;
    goto corral_source_split_10731;

  corral_source_split_10719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i64(out_$i42, 0);
    goto corral_source_split_10719;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(out_$p41);
    goto corral_source_split_10718;

  corral_source_split_10716:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.1, out_$p40);
    goto corral_source_split_10717;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p7, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_10716;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2669} ldv_assume(out_$i39);
    goto corral_source_split_10715;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i1.i32(out_$i38);
    goto corral_source_split_10714;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    out_$i38 := $ule.i64(in_$i13, 2147479552);
    goto corral_source_split_10713;

  corral_source_split_10711:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(out_$p36);
    goto corral_source_split_10712;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2668} out_$p36 := ldv_xmalloc(8);
    goto corral_source_split_10711;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2667} out_$p35 := ldv_xmalloc(1);
    goto corral_source_split_10710;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume out_$i31 == 1;
    goto corral_source_split_10708;

  corral_source_split_10701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i30, 1);
    goto corral_source_split_10701;

  corral_source_split_10723:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i32 == 1;
    goto corral_source_split_10723;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i30;
    assume true;
    goto $bb19;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i30, 2);
    goto corral_source_split_10721;

  $bb16:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb31_dummy:
    call {:si_unique_call 1} out_$i30, out_$i31, out_$i32, out_$i33, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46 := ldv_file_operations_file_operations_instance_0_loop_$bb10(in_$p7, in_$p9, in_$i13, out_$i30, out_$i31, out_$i32, out_$i33, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46);
    return;

  exit:
    return;
}



procedure ldv_file_operations_file_operations_instance_0_loop_$bb10(in_$p7: ref, in_$p9: ref, in_$i13: i64, in_$i30: i32, in_$i31: i1, in_$i32: i1, in_$i33: i32, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i1, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$p46: ref) returns (out_$i30: i32, out_$i31: i1, out_$i32: i1, out_$i33: i32, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i1, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$p46: ref);
  modifies $CurrAddr;



implementation ldv_file_operations_file_operations_instance_0_loop_$bb7(in_$p7: ref, in_$p9: ref, in_$p11: ref, in_$i13: i64, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i30: i32, in_$i31: i1, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i1, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$p46: ref) returns (out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i30: i32, out_$i31: i1, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i1, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$p46: ref)
{

  entry:
    out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46 := in_$p16, in_$p17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p35, in_$p36, in_$p37, in_$i38, in_$i39, in_$p40, in_$p41, in_$i42, in_$i43, in_$p44, in_$p45, in_$p46;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(in_$p7, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_10683;

  $bb12:
    assume {:verifier.code 0} true;
    assume out_$i27 == 1;
    goto $bb12_dummy;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_10704;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2665} out_$i26 := ldv_undef_int();
    call {:si_unique_call 2666} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_10703;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume out_$i34 == 1;
    goto corral_source_split_10727;

  corral_source_split_10725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i33, 3);
    goto corral_source_split_10725;

  $bb20:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i30;
    assume true;
    goto $bb19, $bb20;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i30, 2);
    goto corral_source_split_10721;

  $bb16:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_10701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i30, 1);
    goto corral_source_split_10701;

  $bb10:
    call out_$i30, out_$i31, out_$i32, out_$i33, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46 := ldv_file_operations_file_operations_instance_0_loop_$bb10(in_$p7, in_$p9, in_$i13, out_$i30, out_$i31, out_$i32, out_$i33, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2663} out_$i30 := ldv_undef_int();
    call {:si_unique_call 2664} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_10700;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb31:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_10737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2673} ldv_free(out_$p46);
    goto corral_source_split_10738;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    out_$p46 := $bitcast.ref.ref(out_$p37);
    goto corral_source_split_10737;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2672} ldv_free(out_$p35);
    goto corral_source_split_10736;

  $bb29:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2671} ldv_file_operations_instance_write_0_4(out_$p45, in_$p9, out_$p35, in_$i13, out_$p37);
    goto corral_source_split_10734;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.1, out_$p44);
    goto corral_source_split_10733;

  corral_source_split_10731:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p7, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_10732;

  $bb28:
    assume out_$i43 == 1;
    goto corral_source_split_10731;

  corral_source_split_10719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i64(out_$i42, 0);
    goto corral_source_split_10719;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(out_$p41);
    goto corral_source_split_10718;

  corral_source_split_10716:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.1, out_$p40);
    goto corral_source_split_10717;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p7, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_10716;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2669} ldv_assume(out_$i39);
    goto corral_source_split_10715;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i1.i32(out_$i38);
    goto corral_source_split_10714;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    out_$i38 := $ule.i64(in_$i13, 2147479552);
    goto corral_source_split_10713;

  corral_source_split_10711:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(out_$p36);
    goto corral_source_split_10712;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2668} out_$p36 := ldv_xmalloc(8);
    goto corral_source_split_10711;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2667} out_$p35 := ldv_xmalloc(1);
    goto corral_source_split_10710;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume out_$i31 == 1;
    goto corral_source_split_10708;

  corral_source_split_10723:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i32 == 1;
    goto corral_source_split_10723;

  corral_source_split_10692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2661} ldv_assume(out_$i23);
    goto corral_source_split_10693;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i1.i32(out_$i22);
    goto corral_source_split_10692;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i19, 0);
    goto corral_source_split_10691;

  $bb8:
    assume out_$i21 == 1;
    goto corral_source_split_10690;

  corral_source_split_10688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i32(out_$i20, 0);
    goto corral_source_split_10688;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2659} out_$i20 := ldv_undef_int();
    call {:si_unique_call 2660} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_10687;

  corral_source_split_10685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2657} out_$i19 := ldv_filter_err_code(out_$i18);
    call {:si_unique_call 2658} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_10686;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2655} out_$i18 := ldv_file_operations_instance_probe_0_12(out_$p17, in_$p11, in_$p9);
    call {:si_unique_call 2656} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_10685;

  corral_source_split_10683:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.1, out_$p16);
    goto corral_source_split_10684;

  corral_source_split_10697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2662} ldv_assume(out_$i25);
    goto corral_source_split_10698;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i1.i32(out_$i24);
    goto corral_source_split_10697;

  corral_source_split_10695:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i32(out_$i19, 0);
    goto corral_source_split_10696;

  $bb9:
    assume !(out_$i21 == 1);
    goto corral_source_split_10695;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46 := ldv_file_operations_file_operations_instance_0_loop_$bb7(in_$p7, in_$p9, in_$p11, in_$i13, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46);
    return;

  exit:
    return;
}



procedure ldv_file_operations_file_operations_instance_0_loop_$bb7(in_$p7: ref, in_$p9: ref, in_$p11: ref, in_$i13: i64, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i30: i32, in_$i31: i1, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i1, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$p46: ref) returns (out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i30: i32, out_$i31: i1, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i1, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$p46: ref);
  modifies $CurrAddr;



implementation ldv_file_operations_file_operations_instance_1_loop_$bb10(in_$p7: ref, in_$p9: ref, in_$i13: i64, in_$i30: i32, in_$i31: i1, in_$i32: i1, in_$i33: i32, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i1, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$p46: ref) returns (out_$i30: i32, out_$i31: i1, out_$i32: i1, out_$i33: i32, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i1, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$p46: ref)
{

  entry:
    out_$i30, out_$i31, out_$i32, out_$i33, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46 := in_$i30, in_$i31, in_$i32, in_$i33, in_$p35, in_$p36, in_$p37, in_$i38, in_$i39, in_$p40, in_$p41, in_$i42, in_$i43, in_$p44, in_$p45, in_$p46;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2692} out_$i30 := ldv_undef_int();
    call {:si_unique_call 2693} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_10785;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb31_dummy;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_10823:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_10822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2702} ldv_free(out_$p46);
    goto corral_source_split_10823;

  corral_source_split_10821:
    assume {:verifier.code 0} true;
    out_$p46 := $bitcast.ref.ref(out_$p37);
    goto corral_source_split_10822;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2701} ldv_free(out_$p35);
    goto corral_source_split_10821;

  $bb29:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_10819:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_10818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2700} ldv_file_operations_instance_write_1_4(out_$p45, in_$p9, out_$p35, in_$i13, out_$p37);
    goto corral_source_split_10819;

  corral_source_split_10817:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.1, out_$p44);
    goto corral_source_split_10818;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p7, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_10817;

  $bb28:
    assume out_$i43 == 1;
    goto corral_source_split_10816;

  corral_source_split_10804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i64(out_$i42, 0);
    goto corral_source_split_10804;

  corral_source_split_10802:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(out_$p41);
    goto corral_source_split_10803;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.1, out_$p40);
    goto corral_source_split_10802;

  corral_source_split_10800:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p7, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_10801;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2698} ldv_assume(out_$i39);
    goto corral_source_split_10800;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i1.i32(out_$i38);
    goto corral_source_split_10799;

  corral_source_split_10797:
    assume {:verifier.code 0} true;
    out_$i38 := $ule.i64(in_$i13, 2147479552);
    goto corral_source_split_10798;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(out_$p36);
    goto corral_source_split_10797;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2697} out_$p36 := ldv_xmalloc(8);
    goto corral_source_split_10796;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2696} out_$p35 := ldv_xmalloc(1);
    goto corral_source_split_10795;

  corral_source_split_10793:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume out_$i31 == 1;
    goto corral_source_split_10793;

  corral_source_split_10786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i30, 1);
    goto corral_source_split_10786;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i32 == 1;
    goto corral_source_split_10808;

  corral_source_split_10806:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i30;
    assume true;
    goto $bb19;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i30, 2);
    goto corral_source_split_10806;

  $bb16:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb31_dummy:
    call {:si_unique_call 1} out_$i30, out_$i31, out_$i32, out_$i33, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46 := ldv_file_operations_file_operations_instance_1_loop_$bb10(in_$p7, in_$p9, in_$i13, out_$i30, out_$i31, out_$i32, out_$i33, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46);
    return;

  exit:
    return;
}



procedure ldv_file_operations_file_operations_instance_1_loop_$bb10(in_$p7: ref, in_$p9: ref, in_$i13: i64, in_$i30: i32, in_$i31: i1, in_$i32: i1, in_$i33: i32, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i1, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$p46: ref) returns (out_$i30: i32, out_$i31: i1, out_$i32: i1, out_$i33: i32, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i1, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$p46: ref);
  modifies $CurrAddr;



implementation ldv_file_operations_file_operations_instance_1_loop_$bb7(in_$p7: ref, in_$p9: ref, in_$p11: ref, in_$i13: i64, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i30: i32, in_$i31: i1, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i1, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$p46: ref) returns (out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i30: i32, out_$i31: i1, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i1, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$p46: ref)
{

  entry:
    out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46 := in_$p16, in_$p17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p35, in_$p36, in_$p37, in_$i38, in_$i39, in_$p40, in_$p41, in_$i42, in_$i43, in_$p44, in_$p45, in_$p46;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(in_$p7, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_10768;

  $bb12:
    assume {:verifier.code 0} true;
    assume out_$i27 == 1;
    goto $bb12_dummy;

  corral_source_split_10789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_10788:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_10789;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2694} out_$i26 := ldv_undef_int();
    call {:si_unique_call 2695} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_10788;

  corral_source_split_10783:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_10812:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume out_$i34 == 1;
    goto corral_source_split_10812;

  corral_source_split_10810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i33, 3);
    goto corral_source_split_10810;

  $bb20:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_10806:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i30;
    assume true;
    goto $bb19, $bb20;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i30, 2);
    goto corral_source_split_10806;

  $bb16:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_10786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i30, 1);
    goto corral_source_split_10786;

  $bb10:
    call out_$i30, out_$i31, out_$i32, out_$i33, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46 := ldv_file_operations_file_operations_instance_1_loop_$bb10(in_$p7, in_$p9, in_$i13, out_$i30, out_$i31, out_$i32, out_$i33, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2692} out_$i30 := ldv_undef_int();
    call {:si_unique_call 2693} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_10785;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb31:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_10823:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_10822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2702} ldv_free(out_$p46);
    goto corral_source_split_10823;

  corral_source_split_10821:
    assume {:verifier.code 0} true;
    out_$p46 := $bitcast.ref.ref(out_$p37);
    goto corral_source_split_10822;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2701} ldv_free(out_$p35);
    goto corral_source_split_10821;

  $bb29:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_10819:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_10818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2700} ldv_file_operations_instance_write_1_4(out_$p45, in_$p9, out_$p35, in_$i13, out_$p37);
    goto corral_source_split_10819;

  corral_source_split_10817:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.1, out_$p44);
    goto corral_source_split_10818;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p7, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_10817;

  $bb28:
    assume out_$i43 == 1;
    goto corral_source_split_10816;

  corral_source_split_10804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i64(out_$i42, 0);
    goto corral_source_split_10804;

  corral_source_split_10802:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(out_$p41);
    goto corral_source_split_10803;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.1, out_$p40);
    goto corral_source_split_10802;

  corral_source_split_10800:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p7, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_10801;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2698} ldv_assume(out_$i39);
    goto corral_source_split_10800;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i1.i32(out_$i38);
    goto corral_source_split_10799;

  corral_source_split_10797:
    assume {:verifier.code 0} true;
    out_$i38 := $ule.i64(in_$i13, 2147479552);
    goto corral_source_split_10798;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(out_$p36);
    goto corral_source_split_10797;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2697} out_$p36 := ldv_xmalloc(8);
    goto corral_source_split_10796;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2696} out_$p35 := ldv_xmalloc(1);
    goto corral_source_split_10795;

  corral_source_split_10793:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume out_$i31 == 1;
    goto corral_source_split_10793;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i32 == 1;
    goto corral_source_split_10808;

  corral_source_split_10777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2690} ldv_assume(out_$i23);
    goto corral_source_split_10778;

  corral_source_split_10776:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i1.i32(out_$i22);
    goto corral_source_split_10777;

  corral_source_split_10775:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i19, 0);
    goto corral_source_split_10776;

  $bb8:
    assume out_$i21 == 1;
    goto corral_source_split_10775;

  corral_source_split_10773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_10772:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i32(out_$i20, 0);
    goto corral_source_split_10773;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2688} out_$i20 := ldv_undef_int();
    call {:si_unique_call 2689} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_10772;

  corral_source_split_10770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2686} out_$i19 := ldv_filter_err_code(out_$i18);
    call {:si_unique_call 2687} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_10771;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2684} out_$i18 := ldv_file_operations_instance_probe_1_12(out_$p17, in_$p11, in_$p9);
    call {:si_unique_call 2685} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_10770;

  corral_source_split_10768:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.1, out_$p16);
    goto corral_source_split_10769;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2691} ldv_assume(out_$i25);
    goto corral_source_split_10783;

  corral_source_split_10781:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i1.i32(out_$i24);
    goto corral_source_split_10782;

  corral_source_split_10780:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i32(out_$i19, 0);
    goto corral_source_split_10781;

  $bb9:
    assume !(out_$i21 == 1);
    goto corral_source_split_10780;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46 := ldv_file_operations_file_operations_instance_1_loop_$bb7(in_$p7, in_$p9, in_$p11, in_$i13, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46);
    return;

  exit:
    return;
}



procedure ldv_file_operations_file_operations_instance_1_loop_$bb7(in_$p7: ref, in_$p9: ref, in_$p11: ref, in_$i13: i64, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i30: i32, in_$i31: i1, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i1, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$p46: ref) returns (out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i30: i32, out_$i31: i1, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i1, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$p46: ref);
  modifies $CurrAddr;



implementation ldv_pci_pci_instance_3_loop_$bb14(in_$i33: i32, in_$i37: i32, in_$i38: i1) returns (out_$i33: i32, out_$i37: i32, out_$i38: i1)
{

  entry:
    out_$i33, out_$i37, out_$i38 := in_$i33, in_$i37, in_$i38;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb31:
    assume {:verifier.code 0} true;
    assume out_$i38 == 1;
    goto $bb31_dummy;

  corral_source_split_10981:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i37;
    assume true;
    goto $bb31;

  corral_source_split_10980:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i37, 1);
    goto corral_source_split_10981;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2772} out_$i37 := ldv_undef_int();
    call {:si_unique_call 2773} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_10980;

  $bb31_dummy:
    call {:si_unique_call 1} out_$i33, out_$i37, out_$i38 := ldv_pci_pci_instance_3_loop_$bb14(out_$i33, out_$i37, out_$i38);
    return;

  exit:
    return;
}



procedure ldv_pci_pci_instance_3_loop_$bb14(in_$i33: i32, in_$i37: i32, in_$i38: i1) returns (out_$i33: i32, out_$i37: i32, out_$i38: i1);



implementation ldv_pci_pci_instance_3_loop_$bb10(in_$p1: ref, in_$p8: ref, in_$p10: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i33: i32, in_$i26: i32, in_$i34: i1, in_$i35: i32, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$i53: i1, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i32, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$p72: ref) returns (out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i33: i32, out_$i26: i32, out_$i34: i1, out_$i35: i32, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$i53: i1, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i32, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$p72: ref)
{

  entry:
    out_$i23, out_$i24, out_$i25, out_$i33, out_$i26, out_$i34, out_$i35, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72 := in_$i23, in_$i24, in_$i25, in_$i33, in_$i26, in_$i34, in_$i35, in_$i37, in_$i38, in_$p39, in_$p40, in_$i41, in_$i42, in_$p43, in_$p44, in_$p45, in_$i46, in_$i47, in_$i48, in_$i49, in_$p50, in_$p51, in_$i52, in_$i53, in_$p54, in_$p55, in_$p56, in_$i57, in_$i58, in_$i59, in_$i60, in_$p61, in_$p62, in_$i63, in_$i64, in_$p65, in_$p66, in_$p67, in_$p68, in_$i69, in_$i70, in_$p71, in_$p72;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_10969;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i23 := out_$i60;
    goto $bb43_dummy;

  $bb42:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_11048:
    assume {:verifier.code 0} true;
    goto $bb43;

  SeqInstr_738:
    goto corral_source_split_11048;

  SeqInstr_737:
    assume assertsPassed;
    goto SeqInstr_738;

  corral_source_split_11047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2786} ldv_pci_instance_resume_3_5(out_$p72, in_$p10);
    goto SeqInstr_737;

  corral_source_split_11046:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.1, out_$p71);
    goto corral_source_split_11047;

  corral_source_split_11045:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_11046;

  $bb41:
    assume out_$i70 == 1;
    goto corral_source_split_11045;

  corral_source_split_11043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_11042:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i64(out_$i69, 0);
    goto corral_source_split_11043;

  corral_source_split_11041:
    assume {:verifier.code 0} true;
    out_$i69 := $p2i.ref.i64(out_$p68);
    goto corral_source_split_11042;

  corral_source_split_11040:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.1, out_$p67);
    goto corral_source_split_11041;

  $bb40:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_11040;

  $bb39:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_11038:
    assume {:verifier.code 0} true;
    goto $bb40;

  SeqInstr_735:
    goto corral_source_split_11038;

  SeqInstr_734:
    assume assertsPassed;
    goto SeqInstr_735;

  corral_source_split_11037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2785} ldv_pci_instance_resume_early_3_6(out_$p66, in_$p10);
    goto SeqInstr_734;

  corral_source_split_11036:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.1, out_$p65);
    goto corral_source_split_11037;

  corral_source_split_11035:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_11036;

  $bb38:
    assume out_$i64 == 1;
    goto corral_source_split_11035;

  corral_source_split_11033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_11032:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i64(out_$i63, 0);
    goto corral_source_split_11033;

  corral_source_split_11031:
    assume {:verifier.code 0} true;
    out_$i63 := $p2i.ref.i64(out_$p62);
    goto corral_source_split_11032;

  corral_source_split_11030:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.1, out_$p61);
    goto corral_source_split_11031;

  corral_source_split_11029:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_11030;

  corral_source_split_11028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2783} out_$i60 := ldv_filter_err_code(out_$i59);
    call {:si_unique_call 2784} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_11029;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_11028;

  $bb36:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    out_$i59 := out_$i49;
    goto $bb37;

  corral_source_split_11026:
    assume {:verifier.code 0} true;
    out_$i59 := out_$i58;
    goto $bb37;

  corral_source_split_11025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2781} out_$i58 := ldv_pci_instance_suspend_late_3_7(out_$p55, in_$p10, out_$i57);
    call {:si_unique_call 2782} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_11026;

  corral_source_split_11024:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.54, out_$p56);
    goto corral_source_split_11025;

  corral_source_split_11023:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_11024;

  corral_source_split_11022:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.1, out_$p54);
    goto corral_source_split_11023;

  corral_source_split_11021:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_11022;

  $bb35:
    assume out_$i53 == 1;
    goto corral_source_split_11021;

  corral_source_split_11019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_11018:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i64(out_$i52, 0);
    goto corral_source_split_11019;

  corral_source_split_11017:
    assume {:verifier.code 0} true;
    out_$i52 := $p2i.ref.i64(out_$p51);
    goto corral_source_split_11018;

  corral_source_split_11016:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.1, out_$p50);
    goto corral_source_split_11017;

  corral_source_split_11015:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_11016;

  corral_source_split_11014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2779} out_$i49 := ldv_filter_err_code(out_$i48);
    call {:si_unique_call 2780} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_11015;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_11014;

  $bb33:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    out_$i48 := out_$i23;
    goto $bb34;

  corral_source_split_11012:
    assume {:verifier.code 0} true;
    out_$i48 := out_$i47;
    goto $bb34;

  corral_source_split_11011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2777} out_$i47 := ldv_pci_instance_suspend_3_8(out_$p44, in_$p10, out_$i46);
    call {:si_unique_call 2778} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_11012;

  corral_source_split_11010:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.54, out_$p45);
    goto corral_source_split_11011;

  corral_source_split_11009:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_11010;

  corral_source_split_11008:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.1, out_$p43);
    goto corral_source_split_11009;

  corral_source_split_11007:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_11008;

  $bb32:
    assume out_$i42 == 1;
    goto corral_source_split_11007;

  corral_source_split_10992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_10991:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i64(out_$i41, 0);
    goto corral_source_split_10992;

  corral_source_split_10990:
    assume {:verifier.code 0} true;
    out_$i41 := $p2i.ref.i64(out_$p40);
    goto corral_source_split_10991;

  corral_source_split_10989:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.1, out_$p39);
    goto corral_source_split_10990;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_10989;

  corral_source_split_10987:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i34 == 1;
    goto corral_source_split_10987;

  corral_source_split_10985:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i26;
    assume true;
    goto $bb22;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i26, 2);
    goto corral_source_split_10985;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i25 == 1);
    goto $bb13;

  corral_source_split_10983:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i33;
    goto $bb13;

  $bb20:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_10983;

  corral_source_split_10981:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i37;
    assume true;
    goto $bb31, $bb20;

  corral_source_split_10980:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i37, 1);
    goto corral_source_split_10981;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2772} out_$i37 := ldv_undef_int();
    call {:si_unique_call 2773} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_10980;

  $bb14:
    call out_$i33, out_$i37, out_$i38 := ldv_pci_pci_instance_3_loop_$bb14(out_$i33, out_$i37, out_$i38);
    goto $bb14_last;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_10973:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb31:
    assume {:verifier.code 0} true;
    assume out_$i38 == 1;
    assume false;
    return;

  $bb11:
    assume out_$i25 == 1;
    goto corral_source_split_10973;

  corral_source_split_10971:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i24;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_10970:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i24, 1);
    goto corral_source_split_10971;

  corral_source_split_10969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2768} out_$i24 := ldv_undef_int();
    call {:si_unique_call 2769} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_10970;

  $bb43_dummy:
    call {:si_unique_call 1} out_$i23, out_$i24, out_$i25, out_$i33, out_$i26, out_$i34, out_$i35, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72 := ldv_pci_pci_instance_3_loop_$bb10(in_$p1, in_$p8, in_$p10, out_$i23, out_$i24, out_$i25, out_$i33, out_$i26, out_$i34, out_$i35, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72);
    return;

  exit:
    return;
}



procedure ldv_pci_pci_instance_3_loop_$bb10(in_$p1: ref, in_$p8: ref, in_$p10: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i33: i32, in_$i26: i32, in_$i34: i1, in_$i35: i32, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$i53: i1, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i32, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$p72: ref) returns (out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i33: i32, out_$i26: i32, out_$i34: i1, out_$i35: i32, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$i53: i1, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i32, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$p72: ref);
  modifies $M.1, $M.11, $M.6, $CurrAddr, $M.19, $M.20, $M.21, $M.12, assertsPassed, $M.56, $M.55;



implementation ldv_pci_pci_instance_3_loop_$bb7(in_$p1: ref, in_$p8: ref, in_$p10: ref, in_$p12: ref, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i21: i1, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i27: i1, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i33: i32, in_$i26: i32, in_$i34: i1, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$i53: i1, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i32, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref) returns (out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i21: i1, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i27: i1, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i33: i32, out_$i26: i32, out_$i34: i1, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$i53: i1, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i32, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref)
{

  entry:
    out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i27, out_$i28, out_$i29, out_$i30, out_$i33, out_$i26, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76 := in_$p15, in_$p16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i27, in_$i28, in_$i29, in_$i30, in_$i33, in_$i26, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$p39, in_$p40, in_$i41, in_$i42, in_$p43, in_$p44, in_$p45, in_$i46, in_$i47, in_$i48, in_$i49, in_$p50, in_$p51, in_$i52, in_$i53, in_$p54, in_$p55, in_$p56, in_$i57, in_$i58, in_$i59, in_$i60, in_$p61, in_$p62, in_$i63, in_$i64, in_$p65, in_$p66, in_$p67, in_$p68, in_$i69, in_$i70, in_$p71, in_$p72, in_$p73, in_$p74, in_$p75, in_$p76;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2759} ldv_ldv_pre_probe_132();
    goto corral_source_split_10951;

  $bb16:
    assume {:verifier.code 0} true;
    assume out_$i30 == 1;
    goto $bb16_dummy;

  corral_source_split_10976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_10975:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i29, 0);
    goto corral_source_split_10976;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2770} out_$i29 := ldv_undef_int();
    call {:si_unique_call 2771} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_10975;

  corral_source_split_10967:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_11003:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_732:
    goto corral_source_split_11003;

  SeqInstr_731:
    assume assertsPassed;
    goto SeqInstr_732;

  corral_source_split_11002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2775} ldv_pci_instance_release_3_2(out_$p76, in_$p10);
    goto SeqInstr_731;

  corral_source_split_11001:
    assume {:verifier.code 0} true;
    out_$p76 := $load.ref($M.1, out_$p75);
    goto corral_source_split_11002;

  corral_source_split_11000:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_11001;

  SeqInstr_729:
    goto corral_source_split_11000;

  SeqInstr_728:
    assume assertsPassed;
    goto SeqInstr_729;

  corral_source_split_10999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2774} ldv_pci_instance_shutdown_3_3(out_$p74, in_$p10);
    goto SeqInstr_728;

  corral_source_split_10998:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.1, out_$p73);
    goto corral_source_split_10999;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_10998;

  corral_source_split_10996:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb26:
    assume out_$i36 == 1;
    goto corral_source_split_10996;

  corral_source_split_10994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i35, 3);
    goto corral_source_split_10994;

  $bb23:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_10985:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i26;
    assume true;
    goto $bb22, $bb23;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i26, 2);
    goto corral_source_split_10985;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i25 == 1);
    goto $bb13;

  corral_source_split_10983:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i33;
    goto $bb13;

  $bb20:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_10983;

  corral_source_split_10981:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i37;
    assume true;
    goto $bb31, $bb20;

  corral_source_split_10980:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i37, 1);
    goto corral_source_split_10981;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2772} out_$i37 := ldv_undef_int();
    call {:si_unique_call 2773} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_10980;

  $bb14:
    call out_$i33, out_$i37, out_$i38 := ldv_pci_pci_instance_3_loop_$bb14(out_$i33, out_$i37, out_$i38);
    goto $bb14_last;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_10973:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb31:
    assume {:verifier.code 0} true;
    assume out_$i38 == 1;
    assume false;
    return;

  $bb11:
    assume out_$i25 == 1;
    goto corral_source_split_10973;

  corral_source_split_10971:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i24;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_10970:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i24, 1);
    goto corral_source_split_10971;

  corral_source_split_10969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2768} out_$i24 := ldv_undef_int();
    call {:si_unique_call 2769} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_10970;

  $bb10:
    call out_$i23, out_$i24, out_$i25, out_$i33, out_$i26, out_$i34, out_$i35, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72 := ldv_pci_pci_instance_3_loop_$bb10(in_$p1, in_$p8, in_$p10, out_$i23, out_$i24, out_$i25, out_$i33, out_$i26, out_$i34, out_$i35, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10969;

  corral_source_split_10962:
    assume {:verifier.code 0} true;
    out_$i23 := out_$i18;
    goto $bb10;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i23 := out_$i60;
    assume false;
    return;

  $bb42:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_11048:
    assume {:verifier.code 0} true;
    goto $bb43;

  SeqInstr_738:
    goto corral_source_split_11048;

  SeqInstr_737:
    assume assertsPassed;
    goto SeqInstr_738;

  corral_source_split_11047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2786} ldv_pci_instance_resume_3_5(out_$p72, in_$p10);
    goto SeqInstr_737;

  corral_source_split_11046:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.1, out_$p71);
    goto corral_source_split_11047;

  corral_source_split_11045:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_11046;

  $bb41:
    assume out_$i70 == 1;
    goto corral_source_split_11045;

  corral_source_split_11043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_11042:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i64(out_$i69, 0);
    goto corral_source_split_11043;

  corral_source_split_11041:
    assume {:verifier.code 0} true;
    out_$i69 := $p2i.ref.i64(out_$p68);
    goto corral_source_split_11042;

  corral_source_split_11040:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.1, out_$p67);
    goto corral_source_split_11041;

  $bb40:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_11040;

  $bb39:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_11038:
    assume {:verifier.code 0} true;
    goto $bb40;

  SeqInstr_735:
    goto corral_source_split_11038;

  SeqInstr_734:
    assume assertsPassed;
    goto SeqInstr_735;

  corral_source_split_11037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2785} ldv_pci_instance_resume_early_3_6(out_$p66, in_$p10);
    goto SeqInstr_734;

  corral_source_split_11036:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.1, out_$p65);
    goto corral_source_split_11037;

  corral_source_split_11035:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_11036;

  $bb38:
    assume out_$i64 == 1;
    goto corral_source_split_11035;

  corral_source_split_11033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_11032:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i64(out_$i63, 0);
    goto corral_source_split_11033;

  corral_source_split_11031:
    assume {:verifier.code 0} true;
    out_$i63 := $p2i.ref.i64(out_$p62);
    goto corral_source_split_11032;

  corral_source_split_11030:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.1, out_$p61);
    goto corral_source_split_11031;

  corral_source_split_11029:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_11030;

  corral_source_split_11028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2783} out_$i60 := ldv_filter_err_code(out_$i59);
    call {:si_unique_call 2784} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_11029;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_11028;

  $bb36:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    out_$i59 := out_$i49;
    goto $bb37;

  corral_source_split_11026:
    assume {:verifier.code 0} true;
    out_$i59 := out_$i58;
    goto $bb37;

  corral_source_split_11025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2781} out_$i58 := ldv_pci_instance_suspend_late_3_7(out_$p55, in_$p10, out_$i57);
    call {:si_unique_call 2782} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_11026;

  corral_source_split_11024:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.54, out_$p56);
    goto corral_source_split_11025;

  corral_source_split_11023:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_11024;

  corral_source_split_11022:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.1, out_$p54);
    goto corral_source_split_11023;

  corral_source_split_11021:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_11022;

  $bb35:
    assume out_$i53 == 1;
    goto corral_source_split_11021;

  corral_source_split_11019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_11018:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i64(out_$i52, 0);
    goto corral_source_split_11019;

  corral_source_split_11017:
    assume {:verifier.code 0} true;
    out_$i52 := $p2i.ref.i64(out_$p51);
    goto corral_source_split_11018;

  corral_source_split_11016:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.1, out_$p50);
    goto corral_source_split_11017;

  corral_source_split_11015:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_11016;

  corral_source_split_11014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2779} out_$i49 := ldv_filter_err_code(out_$i48);
    call {:si_unique_call 2780} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_11015;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_11014;

  $bb33:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    out_$i48 := out_$i23;
    goto $bb34;

  corral_source_split_11012:
    assume {:verifier.code 0} true;
    out_$i48 := out_$i47;
    goto $bb34;

  corral_source_split_11011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2777} out_$i47 := ldv_pci_instance_suspend_3_8(out_$p44, in_$p10, out_$i46);
    call {:si_unique_call 2778} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_11012;

  corral_source_split_11010:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.54, out_$p45);
    goto corral_source_split_11011;

  corral_source_split_11009:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_11010;

  corral_source_split_11008:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.1, out_$p43);
    goto corral_source_split_11009;

  corral_source_split_11007:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_11008;

  $bb32:
    assume out_$i42 == 1;
    goto corral_source_split_11007;

  corral_source_split_10992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_10991:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i64(out_$i41, 0);
    goto corral_source_split_10992;

  corral_source_split_10990:
    assume {:verifier.code 0} true;
    out_$i41 := $p2i.ref.i64(out_$p40);
    goto corral_source_split_10991;

  corral_source_split_10989:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.1, out_$p39);
    goto corral_source_split_10990;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_10989;

  corral_source_split_10987:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i34 == 1;
    goto corral_source_split_10987;

  corral_source_split_10961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2766} ldv_assume(out_$i22);
    goto corral_source_split_10962;

  corral_source_split_10960:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i1.i32(out_$i21);
    goto corral_source_split_10961;

  corral_source_split_10959:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i18, 0);
    goto corral_source_split_10960;

  $bb8:
    assume out_$i20 == 1;
    goto corral_source_split_10959;

  corral_source_split_10957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_10956:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i19, 0);
    goto corral_source_split_10957;

  corral_source_split_10955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2764} out_$i19 := ldv_undef_int();
    call {:si_unique_call 2765} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_10956;

  SeqInstr_726:
    call {:si_unique_call 2763} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_10955;

  SeqInstr_725:
    assume assertsPassed;
    goto SeqInstr_726;

  corral_source_split_10954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2762} out_$i18 := ldv_ldv_post_probe_133(out_$i17);
    goto SeqInstr_725;

  SeqInstr_723:
    call {:si_unique_call 2761} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_10954;

  SeqInstr_722:
    assume assertsPassed;
    goto SeqInstr_723;

  corral_source_split_10953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2760} out_$i17 := ldv_pci_instance_probe_3_17(out_$p16, in_$p10, in_$p12);
    goto SeqInstr_722;

  corral_source_split_10952:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.1, out_$p15);
    goto corral_source_split_10953;

  corral_source_split_10951:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_10952;

  corral_source_split_10966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2767} ldv_assume(out_$i28);
    goto corral_source_split_10967;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i1.i32(out_$i27);
    goto corral_source_split_10966;

  corral_source_split_10964:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i18, 0);
    goto corral_source_split_10965;

  $bb9:
    assume !(out_$i20 == 1);
    goto corral_source_split_10964;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i27, out_$i28, out_$i29, out_$i30, out_$i33, out_$i26, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76 := ldv_pci_pci_instance_3_loop_$bb7(in_$p1, in_$p8, in_$p10, in_$p12, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i27, out_$i28, out_$i29, out_$i30, out_$i33, out_$i26, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76);
    return;

  exit:
    return;
}



procedure ldv_pci_pci_instance_3_loop_$bb7(in_$p1: ref, in_$p8: ref, in_$p10: ref, in_$p12: ref, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i21: i1, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i27: i1, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i33: i32, in_$i26: i32, in_$i34: i1, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$i53: i1, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i32, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref) returns (out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i21: i1, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i27: i1, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i33: i32, out_$i26: i32, out_$i34: i1, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$i53: i1, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i32, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref);
  modifies $M.30, $M.31, $M.11, $M.6, $M.1, $CurrAddr, $M.12, assertsPassed, $M.19, $M.20, $M.21, $M.56, $M.55, $M.7, $M.8, $M.9, $M.0, $M.23, $M.29, $M.26, $M.24;



implementation ldv_struct_mega_proc_file_dummy_resourceless_instance_6_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5 := in_$p3, in_$i4, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2835} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_11143;

  $bb5:
    assume {:verifier.code 0} true;
    assume out_$i5 == 1;
    goto $bb5_dummy;

  corral_source_split_11147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5;

  corral_source_split_11146:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_11147;

  corral_source_split_11145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2838} out_$i4 := ldv_undef_int();
    call {:si_unique_call 2839} {:cexpr "tmp"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_11146;

  corral_source_split_11144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2837} ldv_free(out_$p3);
    goto corral_source_split_11145;

  SeqInstr_792:
    goto corral_source_split_11144;

  SeqInstr_791:
    assume assertsPassed;
    goto SeqInstr_792;

  corral_source_split_11143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2836} ldv_dummy_resourceless_instance_callback_6_3($u21, $u22, out_$p3);
    goto SeqInstr_791;

  $bb5_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5 := ldv_struct_mega_proc_file_dummy_resourceless_instance_6_loop_$bb4(out_$p3, out_$i4, out_$i5);
    return;

  exit:
    return;
}



procedure ldv_struct_mega_proc_file_dummy_resourceless_instance_6_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1);
  modifies $CurrAddr, $M.26, $M.1, $M.19, $M.20, $M.21, assertsPassed;



implementation ldv_struct_mega_proc_file_dummy_resourceless_instance_7_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5 := in_$p3, in_$i4, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2842} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_11157;

  $bb5:
    assume {:verifier.code 0} true;
    assume out_$i5 == 1;
    goto $bb5_dummy;

  corral_source_split_11161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5;

  corral_source_split_11160:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_11161;

  corral_source_split_11159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2845} out_$i4 := ldv_undef_int();
    call {:si_unique_call 2846} {:cexpr "tmp"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_11160;

  corral_source_split_11158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2844} ldv_free(out_$p3);
    goto corral_source_split_11159;

  corral_source_split_11157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2843} ldv_dummy_resourceless_instance_callback_7_3($u21, $u22, out_$p3);
    goto corral_source_split_11158;

  $bb5_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5 := ldv_struct_mega_proc_file_dummy_resourceless_instance_7_loop_$bb4(out_$p3, out_$i4, out_$i5);
    return;

  exit:
    return;
}



procedure ldv_struct_mega_proc_file_dummy_resourceless_instance_7_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1);
  modifies $CurrAddr;



implementation ldv_struct_mega_proc_file_dummy_resourceless_instance_8_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5 := in_$p3, in_$i4, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2849} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_11171;

  $bb5:
    assume {:verifier.code 0} true;
    assume out_$i5 == 1;
    goto $bb5_dummy;

  corral_source_split_11175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5;

  corral_source_split_11174:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_11175;

  corral_source_split_11173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2852} out_$i4 := ldv_undef_int();
    call {:si_unique_call 2853} {:cexpr "tmp"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_11174;

  corral_source_split_11172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2851} ldv_free(out_$p3);
    goto corral_source_split_11173;

  corral_source_split_11171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2850} ldv_dummy_resourceless_instance_callback_8_3($u21, $u22, out_$p3);
    goto corral_source_split_11172;

  $bb5_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5 := ldv_struct_mega_proc_file_dummy_resourceless_instance_8_loop_$bb4(out_$p3, out_$i4, out_$i5);
    return;

  exit:
    return;
}



procedure ldv_struct_mega_proc_file_dummy_resourceless_instance_8_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1);
  modifies $CurrAddr;



implementation ldv_struct_mega_proc_file_dummy_resourceless_instance_9_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5 := in_$p3, in_$i4, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2856} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_11185;

  $bb5:
    assume {:verifier.code 0} true;
    assume out_$i5 == 1;
    goto $bb5_dummy;

  corral_source_split_11189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5;

  corral_source_split_11188:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_11189;

  corral_source_split_11187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2859} out_$i4 := ldv_undef_int();
    call {:si_unique_call 2860} {:cexpr "tmp"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_11188;

  corral_source_split_11186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2858} ldv_free(out_$p3);
    goto corral_source_split_11187;

  SeqInstr_795:
    goto corral_source_split_11186;

  SeqInstr_794:
    assume assertsPassed;
    goto SeqInstr_795;

  corral_source_split_11185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2857} ldv_dummy_resourceless_instance_callback_9_3($u21, $u22, out_$p3);
    goto SeqInstr_794;

  $bb5_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5 := ldv_struct_mega_proc_file_dummy_resourceless_instance_9_loop_$bb4(out_$p3, out_$i4, out_$i5);
    return;

  exit:
    return;
}



procedure ldv_struct_mega_proc_file_dummy_resourceless_instance_9_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1);
  modifies $CurrAddr, $M.26, $M.1, $M.47, $M.19, $M.49, $M.20, $M.21, assertsPassed;



implementation ldv_struct_mega_proc_file_dummy_resourceless_instance_10_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5 := in_$p3, in_$i4, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2863} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_11199;

  $bb5:
    assume {:verifier.code 0} true;
    assume out_$i5 == 1;
    goto $bb5_dummy;

  corral_source_split_11203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5;

  corral_source_split_11202:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_11203;

  corral_source_split_11201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2866} out_$i4 := ldv_undef_int();
    call {:si_unique_call 2867} {:cexpr "tmp"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_11202;

  corral_source_split_11200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2865} ldv_free(out_$p3);
    goto corral_source_split_11201;

  SeqInstr_798:
    goto corral_source_split_11200;

  SeqInstr_797:
    assume assertsPassed;
    goto SeqInstr_798;

  corral_source_split_11199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2864} ldv_dummy_resourceless_instance_callback_10_3($u21, $u22, out_$p3);
    goto SeqInstr_797;

  $bb5_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5 := ldv_struct_mega_proc_file_dummy_resourceless_instance_10_loop_$bb4(out_$p3, out_$i4, out_$i5);
    return;

  exit:
    return;
}



procedure ldv_struct_mega_proc_file_dummy_resourceless_instance_10_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1);
  modifies $CurrAddr, $M.26, $M.1, $M.47, $M.19, $M.49, $M.20, $M.21, assertsPassed;



implementation ldv_struct_mega_proc_file_dummy_resourceless_instance_11_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5 := in_$p3, in_$i4, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2870} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_11213;

  $bb5:
    assume {:verifier.code 0} true;
    assume out_$i5 == 1;
    goto $bb5_dummy;

  corral_source_split_11217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5;

  corral_source_split_11216:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_11217;

  corral_source_split_11215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2873} out_$i4 := ldv_undef_int();
    call {:si_unique_call 2874} {:cexpr "tmp"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_11216;

  corral_source_split_11214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2872} ldv_free(out_$p3);
    goto corral_source_split_11215;

  SeqInstr_801:
    goto corral_source_split_11214;

  SeqInstr_800:
    assume assertsPassed;
    goto SeqInstr_801;

  corral_source_split_11213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2871} ldv_dummy_resourceless_instance_callback_11_3($u21, $u22, out_$p3);
    goto SeqInstr_800;

  $bb5_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5 := ldv_struct_mega_proc_file_dummy_resourceless_instance_11_loop_$bb4(out_$p3, out_$i4, out_$i5);
    return;

  exit:
    return;
}



procedure ldv_struct_mega_proc_file_dummy_resourceless_instance_11_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1);
  modifies $CurrAddr, $M.26, $M.1, $M.47, $M.19, $M.49, $M.20, $M.21, assertsPassed;



implementation ldv_struct_mega_proc_file_dummy_resourceless_instance_12_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5 := in_$p3, in_$i4, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2877} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_11227;

  $bb5:
    assume {:verifier.code 0} true;
    assume out_$i5 == 1;
    goto $bb5_dummy;

  corral_source_split_11231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5;

  corral_source_split_11230:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_11231;

  corral_source_split_11229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2880} out_$i4 := ldv_undef_int();
    call {:si_unique_call 2881} {:cexpr "tmp"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_11230;

  corral_source_split_11228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2879} ldv_free(out_$p3);
    goto corral_source_split_11229;

  SeqInstr_804:
    goto corral_source_split_11228;

  SeqInstr_803:
    assume assertsPassed;
    goto SeqInstr_804;

  corral_source_split_11227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2878} ldv_dummy_resourceless_instance_callback_12_3($u21, $u22, out_$p3);
    goto SeqInstr_803;

  $bb5_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5 := ldv_struct_mega_proc_file_dummy_resourceless_instance_12_loop_$bb4(out_$p3, out_$i4, out_$i5);
    return;

  exit:
    return;
}



procedure ldv_struct_mega_proc_file_dummy_resourceless_instance_12_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1);
  modifies $CurrAddr, $M.26, $M.1, $M.47, $M.19, $M.49, $M.20, $M.21, assertsPassed;



implementation ldv_struct_mega_proc_file_dummy_resourceless_instance_13_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5 := in_$p3, in_$i4, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2884} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_11241;

  $bb5:
    assume {:verifier.code 0} true;
    assume out_$i5 == 1;
    goto $bb5_dummy;

  corral_source_split_11245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5;

  corral_source_split_11244:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_11245;

  corral_source_split_11243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2887} out_$i4 := ldv_undef_int();
    call {:si_unique_call 2888} {:cexpr "tmp"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_11244;

  corral_source_split_11242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2886} ldv_free(out_$p3);
    goto corral_source_split_11243;

  SeqInstr_807:
    goto corral_source_split_11242;

  SeqInstr_806:
    assume assertsPassed;
    goto SeqInstr_807;

  corral_source_split_11241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2885} ldv_dummy_resourceless_instance_callback_13_3($u21, $u22, out_$p3);
    goto SeqInstr_806;

  $bb5_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5 := ldv_struct_mega_proc_file_dummy_resourceless_instance_13_loop_$bb4(out_$p3, out_$i4, out_$i5);
    return;

  exit:
    return;
}



procedure ldv_struct_mega_proc_file_dummy_resourceless_instance_13_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1);
  modifies $CurrAddr, $M.26, $M.1, $M.19, $M.20, $M.21, assertsPassed;



implementation ldv_struct_mega_proc_file_dummy_resourceless_instance_14_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5 := in_$p3, in_$i4, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2891} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_11255;

  $bb5:
    assume {:verifier.code 0} true;
    assume out_$i5 == 1;
    goto $bb5_dummy;

  corral_source_split_11259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5;

  corral_source_split_11258:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_11259;

  corral_source_split_11257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2894} out_$i4 := ldv_undef_int();
    call {:si_unique_call 2895} {:cexpr "tmp"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_11258;

  corral_source_split_11256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2893} ldv_free(out_$p3);
    goto corral_source_split_11257;

  SeqInstr_810:
    goto corral_source_split_11256;

  SeqInstr_809:
    assume assertsPassed;
    goto SeqInstr_810;

  corral_source_split_11255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2892} ldv_dummy_resourceless_instance_callback_14_3($u21, $u22, out_$p3);
    goto SeqInstr_809;

  $bb5_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5 := ldv_struct_mega_proc_file_dummy_resourceless_instance_14_loop_$bb4(out_$p3, out_$i4, out_$i5);
    return;

  exit:
    return;
}



procedure ldv_struct_mega_proc_file_dummy_resourceless_instance_14_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1);
  modifies $CurrAddr, $M.26, $M.1, $M.19, $M.20, $M.21, assertsPassed;



implementation ldv_struct_mega_proc_file_dummy_resourceless_instance_15_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5 := in_$p3, in_$i4, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2898} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_11269;

  $bb5:
    assume {:verifier.code 0} true;
    assume out_$i5 == 1;
    goto $bb5_dummy;

  corral_source_split_11273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5;

  corral_source_split_11272:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_11273;

  corral_source_split_11271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2901} out_$i4 := ldv_undef_int();
    call {:si_unique_call 2902} {:cexpr "tmp"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_11272;

  corral_source_split_11270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2900} ldv_free(out_$p3);
    goto corral_source_split_11271;

  SeqInstr_813:
    goto corral_source_split_11270;

  SeqInstr_812:
    assume assertsPassed;
    goto SeqInstr_813;

  corral_source_split_11269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2899} ldv_dummy_resourceless_instance_callback_15_3($u21, $u22, out_$p3);
    goto SeqInstr_812;

  $bb5_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5 := ldv_struct_mega_proc_file_dummy_resourceless_instance_15_loop_$bb4(out_$p3, out_$i4, out_$i5);
    return;

  exit:
    return;
}



procedure ldv_struct_mega_proc_file_dummy_resourceless_instance_15_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1);
  modifies $CurrAddr, $M.26, $M.1, $M.19, $M.20, $M.21, assertsPassed;



implementation ldv_struct_mega_proc_file_dummy_resourceless_instance_16_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5 := in_$p3, in_$i4, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2905} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_11283;

  $bb5:
    assume {:verifier.code 0} true;
    assume out_$i5 == 1;
    goto $bb5_dummy;

  corral_source_split_11287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5;

  corral_source_split_11286:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_11287;

  corral_source_split_11285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2908} out_$i4 := ldv_undef_int();
    call {:si_unique_call 2909} {:cexpr "tmp"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_11286;

  corral_source_split_11284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2907} ldv_free(out_$p3);
    goto corral_source_split_11285;

  SeqInstr_816:
    goto corral_source_split_11284;

  SeqInstr_815:
    assume assertsPassed;
    goto SeqInstr_816;

  corral_source_split_11283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2906} ldv_dummy_resourceless_instance_callback_16_3($u21, $u22, out_$p3);
    goto SeqInstr_815;

  $bb5_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5 := ldv_struct_mega_proc_file_dummy_resourceless_instance_16_loop_$bb4(out_$p3, out_$i4, out_$i5);
    return;

  exit:
    return;
}



procedure ldv_struct_mega_proc_file_dummy_resourceless_instance_16_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1);
  modifies $CurrAddr, $M.26, $M.1, $M.19, $M.20, $M.21, assertsPassed;



implementation ldv_struct_mega_proc_file_dummy_resourceless_instance_17_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5 := in_$p3, in_$i4, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2912} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_11297;

  $bb5:
    assume {:verifier.code 0} true;
    assume out_$i5 == 1;
    goto $bb5_dummy;

  corral_source_split_11301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5;

  corral_source_split_11300:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_11301;

  corral_source_split_11299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2915} out_$i4 := ldv_undef_int();
    call {:si_unique_call 2916} {:cexpr "tmp"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_11300;

  corral_source_split_11298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2914} ldv_free(out_$p3);
    goto corral_source_split_11299;

  SeqInstr_819:
    goto corral_source_split_11298;

  SeqInstr_818:
    assume assertsPassed;
    goto SeqInstr_819;

  corral_source_split_11297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2913} ldv_dummy_resourceless_instance_callback_17_3($u21, $u22, out_$p3);
    goto SeqInstr_818;

  $bb5_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5 := ldv_struct_mega_proc_file_dummy_resourceless_instance_17_loop_$bb4(out_$p3, out_$i4, out_$i5);
    return;

  exit:
    return;
}



procedure ldv_struct_mega_proc_file_dummy_resourceless_instance_17_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1);
  modifies $CurrAddr, $M.26, $M.1, $M.19, $M.20, $M.21, assertsPassed;



implementation ldv_struct_mega_proc_file_dummy_resourceless_instance_18_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5 := in_$p3, in_$i4, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2919} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_11311;

  $bb5:
    assume {:verifier.code 0} true;
    assume out_$i5 == 1;
    goto $bb5_dummy;

  corral_source_split_11315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5;

  corral_source_split_11314:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_11315;

  corral_source_split_11313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2922} out_$i4 := ldv_undef_int();
    call {:si_unique_call 2923} {:cexpr "tmp"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_11314;

  corral_source_split_11312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2921} ldv_free(out_$p3);
    goto corral_source_split_11313;

  corral_source_split_11311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2920} ldv_dummy_resourceless_instance_callback_18_3($u21, $u22, out_$p3);
    goto corral_source_split_11312;

  $bb5_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5 := ldv_struct_mega_proc_file_dummy_resourceless_instance_18_loop_$bb4(out_$p3, out_$i4, out_$i5);
    return;

  exit:
    return;
}



procedure ldv_struct_mega_proc_file_dummy_resourceless_instance_18_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1);
  modifies $CurrAddr;


