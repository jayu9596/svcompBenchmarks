var $M.0: [ref]i8;

var $M.1: ref;

var $M.2: [ref]i32;

var $M.3: [ref]i8;

var $M.4: i32;

var $M.5: i32;

var $M.6: [ref]ref;

var $M.7: [ref]ref;

var $M.8: [ref]ref;

var $M.9: [ref]ref;

var $M.10: [ref]i24;

var $M.11: [ref]i8;

var $M.12: i32;

var $M.13: [ref]i32;

var $M.15: [ref]i64;

var $M.17: [ref]i64;

var $M.18: [ref]i64;

var $M.19: [ref]i64;

var $M.20: [ref]i64;

var $M.21: [ref]i64;

var $M.22: [ref]i64;

var $M.23: [ref]i64;

var $M.24: [ref]i64;

var $M.26: [ref]i32;

var $M.27: i32;

var $M.28: i32;

var $M.29: ref;

var $M.30: [ref]i8;

var $M.31: [ref]i64;

var $M.32: [ref]i64;

var $M.33: [ref]i64;

var $M.34: [ref]i64;

var $M.35: [ref]i64;

var $M.36: i32;

var $M.37: i32;

var $M.38: i32;

var $M.39: i32;

var $M.40: i32;

var $M.41: i32;

var $M.42: i32;

var $M.43: i32;

var $M.44: [ref]i32;

var $M.45: ref;

var $M.46: ref;

var $M.47: ref;

var $M.48: ref;

var $M.52: [ref]i8;

var $M.54: ref;

var $M.55: ref;

var $M.56: ref;

var $M.57: i32;

var $M.58: i32;

var $M.59: i32;

var $M.60: i32;

var $M.61: i32;

var $M.62: i32;

var $M.63: i32;

var $M.64: i32;

var $M.65: i32;

var $M.66: i32;

var $M.67: i32;

var $M.68: i32;

var $M.69: i32;

var $M.70: i32;

var $M.71: i32;

var $M.72: [ref]i32;

var $M.73: [ref]i32;

var $M.74: [ref]i32;

var $M.75: [ref]i32;

var $M.76: [ref]i32;

var $M.77: [ref]i32;

var $M.78: [ref]i64;

var $M.107: [ref]i8;

var $M.108: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 544378);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const ldv_irq_1_3: ref;

axiom ldv_irq_1_3 == $sub.ref(0, 1028);

const ldv_irq_1_0: ref;

axiom ldv_irq_1_0 == $sub.ref(0, 2056);

const ldv_irq_1_2: ref;

axiom ldv_irq_1_2 == $sub.ref(0, 3084);

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 4112);

const ldv_irq_1_1: ref;

axiom ldv_irq_1_1 == $sub.ref(0, 5140);

const ldv_irq_line_1_0: ref;

axiom ldv_irq_line_1_0 == $sub.ref(0, 6168);

const ldv_irq_line_1_1: ref;

axiom ldv_irq_line_1_1 == $sub.ref(0, 7196);

const ldv_irq_line_1_2: ref;

axiom ldv_irq_line_1_2 == $sub.ref(0, 8224);

const ldv_irq_line_1_3: ref;

axiom ldv_irq_line_1_3 == $sub.ref(0, 9252);

const ldv_irq_data_1_0: ref;

axiom ldv_irq_data_1_0 == $sub.ref(0, 10284);

const ldv_irq_data_1_1: ref;

axiom ldv_irq_data_1_1 == $sub.ref(0, 11316);

const ldv_irq_data_1_2: ref;

axiom ldv_irq_data_1_2 == $sub.ref(0, 12348);

const ldv_irq_data_1_3: ref;

axiom ldv_irq_data_1_3 == $sub.ref(0, 13380);

const vlsi_netdev_ops_group1: ref;

axiom vlsi_netdev_ops_group1 == $sub.ref(0, 14412);

const vlsi_irda_driver_group1: ref;

axiom vlsi_irda_driver_group1 == $sub.ref(0, 15444);

const vlsi_proc_fops_group1: ref;

axiom vlsi_proc_fops_group1 == $sub.ref(0, 16476);

const vlsi_proc_fops_group2: ref;

axiom vlsi_proc_fops_group2 == $sub.ref(0, 17508);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 18536);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 19564);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 20592);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 21620);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 22648);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 23676);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 24704);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 25732);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 26760);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 27788);

const ldv_retval_8: ref;

axiom ldv_retval_8 == $sub.ref(0, 28816);

const pci_counter: ref;

axiom pci_counter == $sub.ref(0, 29844);

const ldv_retval_7: ref;

axiom ldv_retval_7 == $sub.ref(0, 30872);

const ldv_retval_6: ref;

axiom ldv_retval_6 == $sub.ref(0, 31900);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 32928);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 33956);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 34984);

const {:count 2} __mod_pci__vlsi_irda_table_device_table: ref;

axiom __mod_pci__vlsi_irda_table_device_table == $sub.ref(0, 36072);

const vlsi_proc_fops: ref;

axiom vlsi_proc_fops == $sub.ref(0, 37320);

const vlsi_netdev_ops: ref;

axiom vlsi_netdev_ops == $sub.ref(0, 38872);

const vlsi_proc_root: ref;

axiom vlsi_proc_root == $sub.ref(0, 39904);

const {:count 2} vlsi_irda_table: ref;

axiom vlsi_irda_table == $sub.ref(0, 40992);

const {:count 8} drivername: ref;

axiom drivername == $sub.ref(0, 42024);

const vlsi_irda_driver: ref;

axiom vlsi_irda_driver == $sub.ref(0, 43360);

const qos_mtt_bits: ref;

axiom qos_mtt_bits == $sub.ref(0, 44388);

const {:count 2} ringsize: ref;

axiom ringsize == $sub.ref(0, 45420);

const sirpulse: ref;

axiom sirpulse == $sub.ref(0, 46448);

const clksrc: ref;

axiom clksrc == $sub.ref(0, 47476);

const {:count 24} .str.189: ref;

axiom .str.189 == $sub.ref(0, 48524);

const {:count 17} .str.194: ref;

axiom .str.194 == $sub.ref(0, 49565);

const {:count 27} .str.195: ref;

axiom .str.195 == $sub.ref(0, 50616);

const {:count 30} .str.196: ref;

axiom .str.196 == $sub.ref(0, 51670);

const {:count 40} .str.11: ref;

axiom .str.11 == $sub.ref(0, 52734);

const {:count 13} .str.12: ref;

axiom .str.12 == $sub.ref(0, 53771);

const {:count 41} .str.10: ref;

axiom .str.10 == $sub.ref(0, 54836);

const dma_ops: ref;

axiom dma_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 65} .str.13: ref;

axiom .str.13 == $sub.ref(0, 55925);

const {:count 16} .str.14: ref;

axiom .str.14 == $sub.ref(0, 56965);

const {:count 29} .str.15: ref;

axiom .str.15 == $sub.ref(0, 58018);

const {:count 22} .str.16: ref;

axiom .str.16 == $sub.ref(0, 59064);

const {:count 22} .str.17: ref;

axiom .str.17 == $sub.ref(0, 60110);

const {:count 44} .str.18: ref;

axiom .str.18 == $sub.ref(0, 61178);

const {:count 28} .str.161: ref;

axiom .str.161 == $sub.ref(0, 62230);

const {:count 15} .str.162: ref;

axiom .str.162 == $sub.ref(0, 63269);

const {:count 8} .str.4: ref;

axiom .str.4 == $sub.ref(0, 64301);

const {:count 14} .str.22: ref;

axiom .str.22 == $sub.ref(0, 65339);

const {:count 206} .str.6: ref;

axiom .str.6 == $sub.ref(0, 66569);

const {:count 14} .str.23: ref;

axiom .str.23 == $sub.ref(0, 67607);

const {:count 48} .str.24: ref;

axiom .str.24 == $sub.ref(0, 68679);

const {:count 27} .str.20: ref;

axiom .str.20 == $sub.ref(0, 69730);

const {:count 4} .str.26: ref;

axiom .str.26 == $sub.ref(0, 70758);

const {:count 4} .str.27: ref;

axiom .str.27 == $sub.ref(0, 71786);

const {:count 4} .str.28: ref;

axiom .str.28 == $sub.ref(0, 72814);

const {:count 29} .str.25: ref;

axiom .str.25 == $sub.ref(0, 73867);

const {:count 34} .str.29: ref;

axiom .str.29 == $sub.ref(0, 74925);

const {:count 6} .str.30: ref;

axiom .str.30 == $sub.ref(0, 75955);

const {:count 5} .str.31: ref;

axiom .str.31 == $sub.ref(0, 76984);

const {:count 2} .str.32: ref;

axiom .str.32 == $sub.ref(0, 78010);

const {:count 32} .str.163: ref;

axiom .str.163 == $sub.ref(0, 79066);

const {:count 17} .str.164: ref;

axiom .str.164 == $sub.ref(0, 80107);

const {:count 43} .str.165: ref;

axiom .str.165 == $sub.ref(0, 81174);

const {:count 18} .str.190: ref;

axiom .str.190 == $sub.ref(0, 82216);

const {:count 44} .str.191: ref;

axiom .str.191 == $sub.ref(0, 83284);

const {:count 14} .str.148: ref;

axiom .str.148 == $sub.ref(0, 84322);

const {:count 25} .str.149: ref;

axiom .str.149 == $sub.ref(0, 85371);

const {:count 16} .str.5: ref;

axiom .str.5 == $sub.ref(0, 86411);

const {:count 28} .str.7: ref;

axiom .str.7 == $sub.ref(0, 87463);

const {:count 15} .str.8: ref;

axiom .str.8 == $sub.ref(0, 88502);

const {:count 21} .str.9: ref;

axiom .str.9 == $sub.ref(0, 89547);

const __preempt_count: ref;

axiom __preempt_count == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 14} .str.146: ref;

axiom .str.146 == $sub.ref(0, 90585);

const {:count 25} .str.147: ref;

axiom .str.147 == $sub.ref(0, 91634);

const {:count 22} .str.192: ref;

axiom .str.192 == $sub.ref(0, 92680);

const {:count 17} .str.193: ref;

axiom .str.193 == $sub.ref(0, 93721);

const {:count 38} .str.178: ref;

axiom .str.178 == $sub.ref(0, 94783);

const {:count 19} .str.179: ref;

axiom .str.179 == $sub.ref(0, 95826);

const {:count 16} .str.180: ref;

axiom .str.180 == $sub.ref(0, 96866);

const {:count 40} .str.181: ref;

axiom .str.181 == $sub.ref(0, 97930);

const {:count 22} .str.182: ref;

axiom .str.182 == $sub.ref(0, 98976);

const {:count 11} .str.183: ref;

axiom .str.183 == $sub.ref(0, 100011);

const {:count 29} .str.184: ref;

axiom .str.184 == $sub.ref(0, 101064);

const {:count 34} .str.185: ref;

axiom .str.185 == $sub.ref(0, 102122);

const {:count 27} .str.186: ref;

axiom .str.186 == $sub.ref(0, 103173);

const {:count 53} .str.187: ref;

axiom .str.187 == $sub.ref(0, 104250);

const {:count 15} .str.188: ref;

axiom .str.188 == $sub.ref(0, 105289);

const {:count 16} .str.176: ref;

axiom .str.176 == $sub.ref(0, 106329);

const {:count 46} .str.177: ref;

axiom .str.177 == $sub.ref(0, 107399);

const {:count 25} .str.152: ref;

axiom .str.152 == $sub.ref(0, 108448);

const {:count 11} .str.153: ref;

axiom .str.153 == $sub.ref(0, 109483);

const {:count 25} .str.166: ref;

axiom .str.166 == $sub.ref(0, 110532);

const {:count 36} .str.167: ref;

axiom .str.167 == $sub.ref(0, 111592);

const {:count 24} .str.168: ref;

axiom .str.168 == $sub.ref(0, 112640);

const {:count 33} .str.169: ref;

axiom .str.169 == $sub.ref(0, 113697);

const {:count 39} .str.170: ref;

axiom .str.170 == $sub.ref(0, 114760);

const {:count 50} .str.171: ref;

axiom .str.171 == $sub.ref(0, 115834);

const {:count 21} .str.172: ref;

axiom .str.172 == $sub.ref(0, 116879);

const {:count 31} .str.173: ref;

axiom .str.173 == $sub.ref(0, 117934);

const {:count 34} .str.174: ref;

axiom .str.174 == $sub.ref(0, 118992);

const {:count 27} .str.175: ref;

axiom .str.175 == $sub.ref(0, 120043);

const {:count 22} .str.129: ref;

axiom .str.129 == $sub.ref(0, 121089);

const {:count 24} .str.144: ref;

axiom .str.144 == $sub.ref(0, 122137);

const {:count 11} .str.145: ref;

axiom .str.145 == $sub.ref(0, 123172);

const {:count 33} .str.150: ref;

axiom .str.150 == $sub.ref(0, 124229);

const {:count 19} .str.151: ref;

axiom .str.151 == $sub.ref(0, 125272);

const {:count 23} .str.154: ref;

axiom .str.154 == $sub.ref(0, 126319);

const {:count 10} .str.155: ref;

axiom .str.155 == $sub.ref(0, 127353);

const {:count 27} .str.156: ref;

axiom .str.156 == $sub.ref(0, 128404);

const {:count 18} .str.157: ref;

axiom .str.157 == $sub.ref(0, 129446);

const {:count 28} .str.158: ref;

axiom .str.158 == $sub.ref(0, 130498);

const {:count 38} .str.159: ref;

axiom .str.159 == $sub.ref(0, 131560);

const {:count 16} .str.160: ref;

axiom .str.160 == $sub.ref(0, 132600);

const .str: ref;

axiom .str == $sub.ref(0, 133658);

const {:count 15} .str.1: ref;

axiom .str.1 == $sub.ref(0, 134697);

const {:count 18} .str.19: ref;

axiom .str.19 == $sub.ref(0, 135739);

const {:count 18} .str.21: ref;

axiom .str.21 == $sub.ref(0, 136781);

const {:count 25} .str.2: ref;

axiom .str.2 == $sub.ref(0, 137830);

const {:count 18} .str.3: ref;

axiom .str.3 == $sub.ref(0, 138872);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 9} .str.33: ref;

axiom .str.33 == $sub.ref(0, 139905);

const {:count 5} .str.34: ref;

axiom .str.34 == $sub.ref(0, 140934);

const {:count 11} .str.36: ref;

axiom .str.36 == $sub.ref(0, 141969);

const {:count 11} .str.37: ref;

axiom .str.37 == $sub.ref(0, 143004);

const {:count 10} .str.38: ref;

axiom .str.38 == $sub.ref(0, 144038);

const {:count 11} .str.39: ref;

axiom .str.39 == $sub.ref(0, 145073);

const {:count 12} .str.35: ref;

axiom .str.35 == $sub.ref(0, 146109);

const {:count 25} .str.40: ref;

axiom .str.40 == $sub.ref(0, 147158);

const {:count 13} .str.42: ref;

axiom .str.42 == $sub.ref(0, 148195);

const {:count 6} .str.43: ref;

axiom .str.43 == $sub.ref(0, 149225);

const {:count 14} .str.41: ref;

axiom .str.41 == $sub.ref(0, 150263);

const {:count 22} .str.44: ref;

axiom .str.44 == $sub.ref(0, 151309);

const {:count 39} .str.45: ref;

axiom .str.45 == $sub.ref(0, 152372);

const {:count 33} .str.46: ref;

axiom .str.46 == $sub.ref(0, 153429);

const {:count 33} .str.47: ref;

axiom .str.47 == $sub.ref(0, 154486);

const {:count 49} .str.130: ref;

axiom .str.130 == $sub.ref(0, 155559);

const {:count 23} .str.131: ref;

axiom .str.131 == $sub.ref(0, 156606);

const {:count 9} .str.132: ref;

axiom .str.132 == $sub.ref(0, 157639);

const {:count 8} .str.133: ref;

axiom .str.133 == $sub.ref(0, 158671);

const {:count 14} .str.134: ref;

axiom .str.134 == $sub.ref(0, 159709);

const {:count 45} .str.135: ref;

axiom .str.135 == $sub.ref(0, 160778);

const {:count 15} .str.136: ref;

axiom .str.136 == $sub.ref(0, 161817);

const {:count 18} .str.137: ref;

axiom .str.137 == $sub.ref(0, 162859);

const {:count 43} .str.138: ref;

axiom .str.138 == $sub.ref(0, 163926);

const {:count 9} .str.53: ref;

axiom .str.53 == $sub.ref(0, 164959);

const {:count 9} .str.54: ref;

axiom .str.54 == $sub.ref(0, 165992);

const {:count 8} .str.55: ref;

axiom .str.55 == $sub.ref(0, 167024);

const {:count 12} .str.56: ref;

axiom .str.56 == $sub.ref(0, 168060);

const {:count 11} .str.57: ref;

axiom .str.57 == $sub.ref(0, 169095);

const {:count 11} .str.58: ref;

axiom .str.58 == $sub.ref(0, 170130);

const {:count 14} .str.59: ref;

axiom .str.59 == $sub.ref(0, 171168);

const {:count 14} .str.60: ref;

axiom .str.60 == $sub.ref(0, 172206);

const {:count 35} .str.52: ref;

axiom .str.52 == $sub.ref(0, 173265);

const {:count 12} .str.61: ref;

axiom .str.61 == $sub.ref(0, 174301);

const {:count 8} .str.63: ref;

axiom .str.63 == $sub.ref(0, 175333);

const .str.64: ref;

axiom .str.64 == $sub.ref(0, 176358);

const {:count 6} .str.65: ref;

axiom .str.65 == $sub.ref(0, 177388);

const {:count 10} .str.66: ref;

axiom .str.66 == $sub.ref(0, 178422);

const {:count 2} .str.67: ref;

axiom .str.67 == $sub.ref(0, 179448);

const {:count 11} .str.68: ref;

axiom .str.68 == $sub.ref(0, 180483);

const {:count 21} .str.62: ref;

axiom .str.62 == $sub.ref(0, 181528);

const {:count 4} .str.70: ref;

axiom .str.70 == $sub.ref(0, 182556);

const {:count 4} .str.71: ref;

axiom .str.71 == $sub.ref(0, 183584);

const {:count 4} .str.72: ref;

axiom .str.72 == $sub.ref(0, 184612);

const {:count 4} .str.73: ref;

axiom .str.73 == $sub.ref(0, 185640);

const {:count 6} .str.69: ref;

axiom .str.69 == $sub.ref(0, 186670);

const {:count 8} .str.75: ref;

axiom .str.75 == $sub.ref(0, 187702);

const {:count 5} .str.76: ref;

axiom .str.76 == $sub.ref(0, 188731);

const {:count 8} .str.77: ref;

axiom .str.77 == $sub.ref(0, 189763);

const {:count 15} .str.78: ref;

axiom .str.78 == $sub.ref(0, 190802);

const {:count 15} .str.79: ref;

axiom .str.79 == $sub.ref(0, 191841);

const {:count 8} .str.80: ref;

axiom .str.80 == $sub.ref(0, 192873);

const {:count 8} .str.81: ref;

axiom .str.81 == $sub.ref(0, 193905);

const {:count 9} .str.82: ref;

axiom .str.82 == $sub.ref(0, 194938);

const {:count 43} .str.74: ref;

axiom .str.74 == $sub.ref(0, 196005);

const {:count 18} .str.83: ref;

axiom .str.83 == $sub.ref(0, 197047);

const {:count 7} .str.85: ref;

axiom .str.85 == $sub.ref(0, 198078);

const {:count 8} .str.86: ref;

axiom .str.86 == $sub.ref(0, 199110);

const {:count 8} .str.87: ref;

axiom .str.87 == $sub.ref(0, 200142);

const {:count 7} .str.88: ref;

axiom .str.88 == $sub.ref(0, 201173);

const {:count 10} .str.89: ref;

axiom .str.89 == $sub.ref(0, 202207);

const {:count 9} .str.90: ref;

axiom .str.90 == $sub.ref(0, 203240);

const {:count 9} .str.91: ref;

axiom .str.91 == $sub.ref(0, 204273);

const {:count 8} .str.92: ref;

axiom .str.92 == $sub.ref(0, 205305);

const {:count 25} .str.84: ref;

axiom .str.84 == $sub.ref(0, 206354);

const {:count 24} .str.93: ref;

axiom .str.93 == $sub.ref(0, 207402);

const {:count 25} .str.94: ref;

axiom .str.94 == $sub.ref(0, 208451);

const {:count 25} .str.95: ref;

axiom .str.95 == $sub.ref(0, 209500);

const {:count 6} .str.97: ref;

axiom .str.97 == $sub.ref(0, 210530);

const {:count 6} .str.98: ref;

axiom .str.98 == $sub.ref(0, 211560);

const {:count 6} .str.99: ref;

axiom .str.99 == $sub.ref(0, 212590);

const {:count 6} .str.100: ref;

axiom .str.100 == $sub.ref(0, 213620);

const {:count 7} .str.101: ref;

axiom .str.101 == $sub.ref(0, 214651);

const {:count 7} .str.102: ref;

axiom .str.102 == $sub.ref(0, 215682);

const {:count 5} .str.103: ref;

axiom .str.103 == $sub.ref(0, 216711);

const {:count 5} .str.104: ref;

axiom .str.104 == $sub.ref(0, 217740);

const {:count 5} .str.105: ref;

axiom .str.105 == $sub.ref(0, 218769);

const {:count 9} .str.106: ref;

axiom .str.106 == $sub.ref(0, 219802);

const {:count 9} .str.107: ref;

axiom .str.107 == $sub.ref(0, 220835);

const {:count 7} .str.108: ref;

axiom .str.108 == $sub.ref(0, 221866);

const {:count 7} .str.109: ref;

axiom .str.109 == $sub.ref(0, 222897);

const {:count 34} .str.96: ref;

axiom .str.96 == $sub.ref(0, 223955);

const {:count 13} .str.111: ref;

axiom .str.111 == $sub.ref(0, 224992);

const {:count 8} .str.112: ref;

axiom .str.112 == $sub.ref(0, 226024);

const {:count 8} .str.113: ref;

axiom .str.113 == $sub.ref(0, 227056);

const {:count 8} .str.114: ref;

axiom .str.114 == $sub.ref(0, 228088);

const {:count 8} .str.115: ref;

axiom .str.115 == $sub.ref(0, 229120);

const {:count 8} .str.116: ref;

axiom .str.116 == $sub.ref(0, 230152);

const {:count 8} .str.117: ref;

axiom .str.117 == $sub.ref(0, 231184);

const {:count 10} .str.118: ref;

axiom .str.118 == $sub.ref(0, 232218);

const {:count 27} .str.110: ref;

axiom .str.110 == $sub.ref(0, 233269);

const {:count 55} .str.119: ref;

axiom .str.119 == $sub.ref(0, 234348);

const {:count 56} .str.120: ref;

axiom .str.120 == $sub.ref(0, 235428);

const {:count 34} .str.121: ref;

axiom .str.121 == $sub.ref(0, 236486);

const {:count 37} .str.122: ref;

axiom .str.122 == $sub.ref(0, 237547);

const {:count 12} .str.123: ref;

axiom .str.123 == $sub.ref(0, 238583);

const {:count 36} .str.124: ref;

axiom .str.124 == $sub.ref(0, 239643);

const {:count 23} .str.125: ref;

axiom .str.125 == $sub.ref(0, 240690);

const {:count 55} .str.126: ref;

axiom .str.126 == $sub.ref(0, 241769);

const {:count 51} .str.127: ref;

axiom .str.127 == $sub.ref(0, 242844);

const {:count 67} .str.128: ref;

axiom .str.128 == $sub.ref(0, 243935);

const {:count 28} .str.48: ref;

axiom .str.48 == $sub.ref(0, 244987);

const {:count 21} .str.49: ref;

axiom .str.49 == $sub.ref(0, 246032);

const {:count 51} .str.50: ref;

axiom .str.50 == $sub.ref(0, 247107);

const {:count 15} .str.51: ref;

axiom .str.51 == $sub.ref(0, 248146);

const {:count 24} .str.140: ref;

axiom .str.140 == $sub.ref(0, 249194);

const {:count 3} .str.142: ref;

axiom .str.142 == $sub.ref(0, 250221);

const {:count 3} .str.143: ref;

axiom .str.143 == $sub.ref(0, 251248);

const {:count 46} .str.141: ref;

axiom .str.141 == $sub.ref(0, 252318);

const {:count 15} .str.139: ref;

axiom .str.139 == $sub.ref(0, 253357);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 254389);

const {:count 3} .str.1.408: ref;

axiom .str.1.408 == $sub.ref(0, 255416);

const {:count 14} .str.409: ref;

axiom .str.409 == $sub.ref(0, 256454);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 257482);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 258514);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 259546);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 0} $r := $malloc($i0);
    return;
}



const vlsi_irda_probe: ref;

axiom vlsi_irda_probe == $sub.ref(0, 260578);

procedure vlsi_irda_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.27, $CurrAddr, $M.29;



implementation vlsi_irda_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p67: ref;
  var $p68: ref;
  var $p70: ref;
  var $i69: i32;
  var vslice_dummy_var_29: i32;
  var vslice_dummy_var_30: i32;
  var vslice_dummy_var_31: i32;
  var vslice_dummy_var_32: ref;
  var vslice_dummy_var_33: i32;
  var vslice_dummy_var_34: i32;
  var vslice_dummy_var_35: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $i4 := pci_enable_device($p0);
    call {:si_unique_call 4} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(120, 1));
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} $i7 := net_ratelimit();
    call {:si_unique_call 6} {:cexpr "tmp___1"} boogie_si_record_i32($i7);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i15 == 1);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p18);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 256);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $p25 := alloc_irdadev(384);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $p31 := netdev_priv($p25);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 384)), $mul.ref(136, 1));
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} vslice_dummy_var_32 := spinlock_check($p33);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p32, $mul.ref(0, 384)), $mul.ref(136, 1)), $mul.ref(0, 1));
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} __raw_spin_lock_init($p37, .str.182, $p2);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p32, $mul.ref(0, 384)), $mul.ref(208, 1));
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} __mutex_init($p38, .str.183, $p3);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p32, $mul.ref(0, 384)), $mul.ref(208, 1));
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} mutex_lock_nested($p39, 0);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p32, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $p0);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} $i41 := vlsi_irda_init($p25);
    call {:si_unique_call 23} {:cexpr "tmp___5"} boogie_si_record_i32($i41);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i41, 0);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} $i43 := ldv_register_netdev_40($p25);
    call {:si_unique_call 27} {:cexpr "tmp___7"} boogie_si_record_i32($i43);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i43, 0);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p48 := $M.1;
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} $i62 := net_ratelimit();
    call {:si_unique_call 37} {:cexpr "tmp___9"} boogie_si_record_i32($i62);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p25);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} pci_set_drvdata($p0, $p67);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p32, $mul.ref(0, 384)), $mul.ref(208, 1));
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} mutex_unlock($p68);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $i69 := 0;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $r := $i69;
    return;

  $bb43:
    assume $i63 == 1;
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p25, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} vslice_dummy_var_35 := printk.ref.ref.ref(.str.186, drivername, $p65);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb34:
    assume $i50 == 1;
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p25, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p53 := $M.1;
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p25);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $p55 := proc_create_data($p52, $sub.i16(0, 32476), $p53, vlsi_proc_fops, $p54);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p55);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i57 := $eq.i64($i56, 0);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i57 == 1);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} proc_set_size($p55, 0);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p32, $mul.ref(0, 384)), $mul.ref(376, 1));
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p61, $p55);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb36:
    assume $i57 == 1;
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} $i58 := net_ratelimit();
    call {:si_unique_call 33} {:cexpr "tmp___8"} boogie_si_record_i32($i58);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb38:
    assume $i59 == 1;
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} vslice_dummy_var_34 := printk.ref.ref(.str.185, .str.180);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb28:
    assume $i44 == 1;
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} $i45 := net_ratelimit();
    call {:si_unique_call 29} {:cexpr "tmp___6"} boogie_si_record_i32($i45);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p32, $mul.ref(0, 384)), $mul.ref(208, 1));
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} mutex_unlock($p70);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} ldv_free_netdev_41($p25);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} pci_disable_device($p0);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i69 := $sub.i32(0, 19);
    goto $bb46;

  $bb30:
    assume $i46 == 1;
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} vslice_dummy_var_33 := printk.ref.ref(.str.184, .str.180);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb24:
    assume $i42 == 1;
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb18:
    assume $i27 == 1;
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $i28 := net_ratelimit();
    call {:si_unique_call 15} {:cexpr "tmp___3"} boogie_si_record_i32($i28);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20:
    assume $i29 == 1;
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} vslice_dummy_var_31 := printk.ref.ref(.str.181, .str.180);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $i22 := net_ratelimit();
    call {:si_unique_call 10} {:cexpr "tmp___2"} boogie_si_record_i32($i22);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i23 == 1;
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} vslice_dummy_var_30 := printk.ref.ref(.str.179, .str.180);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb9;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p9 := pci_name($p0);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} vslice_dummy_var_29 := printk.ref.ref.ref(.str.178, drivername, $p9);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vlsi_irda_remove: ref;

axiom vlsi_irda_remove == $sub.ref(0, 261610);

procedure vlsi_irda_remove($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.27;



implementation vlsi_irda_remove($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var vslice_dummy_var_36: i32;
  var vslice_dummy_var_37: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} ldv_unregister_netdev_42($p2);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $p8 := netdev_priv($p2);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 384)), $mul.ref(208, 1));
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} mutex_lock_nested($p10, 0);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p9, $mul.ref(0, 384)), $mul.ref(376, 1));
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p9, $mul.ref(0, 384)), $mul.ref(208, 1));
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} mutex_unlock($p19);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} ldv_free_netdev_43($p2);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} $i20 := net_ratelimit();
    call {:si_unique_call 52} {:cexpr "tmp___3"} boogie_si_record_i32($i20);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $p22 := pci_name($p0);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} vslice_dummy_var_37 := printk.ref.ref.ref(.str.193, drivername, $p22);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $p17 := $M.1;
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} remove_proc_entry($p16, $p17);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p9, $mul.ref(0, 384)), $mul.ref(376, 1));
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $0.ref);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} $i5 := net_ratelimit();
    call {:si_unique_call 43} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} vslice_dummy_var_36 := printk.ref.ref(.str.192, drivername);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const vlsi_irda_suspend: ref;

axiom vlsi_irda_suspend == $sub.ref(0, 262642);

procedure vlsi_irda_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.13, $CurrAddr, $M.4, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.3, $M.36, $M.38, $M.40, $M.42, $M.37, $M.45, $M.39, $M.46, $M.41, $M.47, $M.43, $M.48, $M.5, assertsPassed;



implementation vlsi_irda_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $p38: ref;
  var $i39: i1;
  var $i40: i8;
  var $i41: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var vslice_dummy_var_38: i32;
  var vslice_dummy_var_39: i32;
  var vslice_dummy_var_40: i32;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: i32;
  var vslice_dummy_var_43: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p3, $i1);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $p4 := pci_get_drvdata($p0);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} $p12 := netdev_priv($p5);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 384)), $mul.ref(208, 1));
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} mutex_lock_nested($p14, 0);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(120, 1));
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} $i39 := netif_running($p5);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i8($i39);
    call {:si_unique_call 72} {:cexpr "tmp___6"} boogie_si_record_i8($i40);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i8.i1($i40);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.2, $p50);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $i52 := pci_choose_state($p0, $i51);
    call {:si_unique_call 77} {:cexpr "tmp___7"} boogie_si_record_i32($i52);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} vslice_dummy_var_43 := pci_set_power_state($p0, $i52);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.2, $p54);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(120, 1));
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, $i55);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p13, $mul.ref(0, 384)), $mul.ref(368, 1));
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p57, 1);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p13, $mul.ref(0, 384)), $mul.ref(208, 1));
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} mutex_unlock($p58);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb17:
    assume $i41 == 1;
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} netif_device_detach($p5);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} vslice_dummy_var_41 := vlsi_stop_hw($p13);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} vslice_dummy_var_42 := pci_save_state($p0);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p13, $mul.ref(0, 384)), $mul.ref(92, 1));
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 0);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i46 == 1;
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p13, $mul.ref(0, 384)), $mul.ref(88, 1));
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p13, $mul.ref(0, 384)), $mul.ref(92, 1));
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, $i48);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.2, $p18);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(120, 1));
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $i22 := $sgt.i32($i19, $i21);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} $i30 := net_ratelimit();
    call {:si_unique_call 67} {:cexpr "tmp___5"} boogie_si_record_i32($i30);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p13, $mul.ref(0, 384)), $mul.ref(208, 1));
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} mutex_unlock($p38);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb13:
    assume $i31 == 1;
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} $p32 := pci_name($p0);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(120, 1));
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.2, $p35);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} vslice_dummy_var_40 := printk.ref.ref.ref.i32.i32(.str.191, .str.190, $p32, $i34, $i36);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.2, $p23);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} $i25 := pci_choose_state($p0, $i24);
    call {:si_unique_call 64} {:cexpr "tmp___3"} boogie_si_record_i32($i25);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} vslice_dummy_var_39 := pci_set_power_state($p0, $i25);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.2, $p27);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(120, 1));
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} $i8 := net_ratelimit();
    call {:si_unique_call 58} {:cexpr "tmp___1"} boogie_si_record_i32($i8);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} $p10 := pci_name($p0);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} vslice_dummy_var_38 := printk.ref.ref.ref(.str.189, .str.190, $p10);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const vlsi_irda_resume: ref;

axiom vlsi_irda_resume == $sub.ref(0, 263674);

procedure vlsi_irda_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, assertsPassed;



implementation vlsi_irda_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $p29: ref;
  var $i30: i1;
  var $i31: i8;
  var $i32: i1;
  var $p34: ref;
  var $p35: ref;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} $p9 := netdev_priv($p2);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 384)), $mul.ref(208, 1));
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} mutex_lock_nested($p11, 0);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(120, 1));
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} vslice_dummy_var_46 := pci_set_power_state($p0, 0);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(120, 1));
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 0);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p10, $mul.ref(0, 384)), $mul.ref(368, 1));
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} $i30 := netif_running($p2);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i8($i30);
    call {:si_unique_call 98} {:cexpr "tmp___6"} boogie_si_record_i8($i31);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i8.i1($i31);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p10, $mul.ref(0, 384)), $mul.ref(368, 1));
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, 0);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p10, $mul.ref(0, 384)), $mul.ref(208, 1));
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} mutex_unlock($p35);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb20:
    assume $i32 == 1;
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} pci_restore_state($p0);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} vslice_dummy_var_48 := vlsi_start_hw($p10);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} netif_device_attach($p2);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i25 == 1;
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} $i26 := net_ratelimit();
    call {:si_unique_call 94} {:cexpr "tmp___5"} boogie_si_record_i32($i26);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p10, $mul.ref(0, 384)), $mul.ref(208, 1));
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} mutex_unlock($p29);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb16:
    assume $i27 == 1;
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} vslice_dummy_var_47 := printk.ref.ref(.str.196, .str.194);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p10, $mul.ref(0, 384)), $mul.ref(208, 1));
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} mutex_unlock($p15);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} $i16 := net_ratelimit();
    call {:si_unique_call 89} {:cexpr "tmp___4"} boogie_si_record_i32($i16);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb10:
    assume $i17 == 1;
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} $p18 := pci_name($p0);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} vslice_dummy_var_45 := printk.ref.ref.ref(.str.195, .str.194, $p18);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} $i5 := net_ratelimit();
    call {:si_unique_call 82} {:cexpr "tmp___1"} boogie_si_record_i32($i5);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $p7 := pci_name($p0);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} vslice_dummy_var_44 := printk.ref.ref.ref(.str.189, .str.194, $p7);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const pci_get_drvdata: ref;

axiom pci_get_drvdata == $sub.ref(0, 264706);

procedure pci_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const net_ratelimit: ref;

axiom net_ratelimit == $sub.ref(0, 265738);

procedure net_ratelimit() returns ($r: i32);
  free requires assertsPassed;



implementation net_ratelimit() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 1} true;
    call {:si_unique_call 104} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 105} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const pci_name: ref;

axiom pci_name == $sub.ref(0, 266770);

procedure pci_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} $p2 := dev_name($p1);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 267802);

procedure printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 1} true;
    call {:si_unique_call 107} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 108} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 1} true;
    call {:si_unique_call 109} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 110} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 1} true;
    call {:si_unique_call 111} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 112} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 1} true;
    call {:si_unique_call 113} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 114} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 1} true;
    call {:si_unique_call 115} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 116} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.ref($p0: ref, p.1: ref, p.2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.ref($p0: ref, p.1: ref, p.2: ref, p.3: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 1} true;
    call {:si_unique_call 117} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 118} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 1} true;
    call {:si_unique_call 119} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 120} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 1} true;
    call {:si_unique_call 121} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 122} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 1} true;
    call {:si_unique_call 123} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 124} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb9:
    assume {:verifier.code 1} true;
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 1} true;
    call {:si_unique_call 125} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 126} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.i32.i32.i32.ref($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.i32.i32.i32.ref($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb10:
    assume {:verifier.code 1} true;
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 1} true;
    call {:si_unique_call 127} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 128} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const netdev_priv: ref;

axiom netdev_priv == $sub.ref(0, 268834);

procedure netdev_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_priv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(3008, 1));
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 269866);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 270898);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    return;
}



const pci_set_power_state: ref;

axiom pci_set_power_state == $sub.ref(0, 271930);

procedure pci_set_power_state($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_set_power_state($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 130} {:cexpr "pci_set_power_state:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 1} true;
    call {:si_unique_call 131} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 132} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const netif_running: ref;

axiom netif_running == $sub.ref(0, 272962);

procedure netif_running($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_running($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(72, 1));
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 134} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_restore_state: ref;

axiom pci_restore_state == $sub.ref(0, 273994);

procedure pci_restore_state($p0: ref);
  free requires assertsPassed;



implementation pci_restore_state($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    return;
}



const vlsi_start_hw: ref;

axiom vlsi_start_hw == $sub.ref(0, 275026);

procedure vlsi_start_hw($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.0, $CurrAddr, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, assertsPassed;



implementation vlsi_start_hw($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i32;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;
  var $i15: i8;
  var $i16: i32;
  var $i17: i8;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i22: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} $p5 := pci_get_drvdata($p4);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 2968)), $mul.ref(56, 1));
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    call {:si_unique_call 138} {:cexpr "iobase"} boogie_si_record_i32($i9);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} vslice_dummy_var_49 := pci_read_config_byte($p4, 66, $p1);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.3, $p1);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 123);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p1, $i14);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.3, $p1);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} vslice_dummy_var_50 := pci_write_config_byte($p4, 66, $i17);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} vslice_dummy_var_51 := pci_write_config_byte($p4, 65, 0);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} pci_set_master($p4);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} $i20 := vlsi_init_chip($p4);
    call {:si_unique_call 144} {:cexpr "tmp___0"} boogie_si_record_i32($i20);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 0);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(120, 1));
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} vlsi_fill_rx($p24);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(128, 1));
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} $i26 := ktime_get();
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p27, $i26);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p25);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p2);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 148} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p28, $p29, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i9, 8);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} outw(0, $i30);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} pci_disable_device($p4);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 1);
    goto $bb3;
}



const netif_device_attach: ref;

axiom netif_device_attach == $sub.ref(0, 276058);

procedure netif_device_attach($p0: ref);
  free requires assertsPassed;



implementation netif_device_attach($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    return;
}



const pci_read_config_byte: ref;

axiom pci_read_config_byte == $sub.ref(0, 277090);

procedure pci_read_config_byte($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_read_config_byte($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} {:cexpr "pci_read_config_byte:arg:where"} boogie_si_record_i32($i1);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(56, 1));
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} $i7 := pci_bus_read_config_byte($p4, $i6, $i1, $p2);
    call {:si_unique_call 152} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pci_write_config_byte: ref;

axiom pci_write_config_byte == $sub.ref(0, 278122);

procedure pci_write_config_byte($p0: ref, $i1: i32, $i2: i8) returns ($r: i32);
  free requires assertsPassed;



implementation pci_write_config_byte($p0: ref, $i1: i32, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i8;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} {:cexpr "pci_write_config_byte:arg:where"} boogie_si_record_i32($i1);
    call {:si_unique_call 154} {:cexpr "pci_write_config_byte:arg:val"} boogie_si_record_i8($i2);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(56, 1));
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i2);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} $i9 := pci_bus_write_config_byte($p4, $i6, $i1, $i8);
    call {:si_unique_call 156} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const pci_set_master: ref;

axiom pci_set_master == $sub.ref(0, 279154);

procedure pci_set_master($p0: ref);
  free requires assertsPassed;



implementation pci_set_master($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    return;
}



const vlsi_init_chip: ref;

axiom vlsi_init_chip == $sub.ref(0, 280186);

procedure vlsi_init_chip($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.0, $CurrAddr;



implementation vlsi_init_chip($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $i20: i16;
  var $i21: i32;
  var $i22: i32;
  var $i23: i16;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i16;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i16;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i16;
  var $i46: i32;
  var $i47: i32;
  var $i48: i16;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $i10: i32;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} $p3 := netdev_priv($p2);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} $i5 := vlsi_start_clock($p0);
    call {:si_unique_call 160} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 2968)), $mul.ref(56, 1));
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i32($i12);
    call {:si_unique_call 164} {:cexpr "iobase"} boogie_si_record_i32($i13);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} vlsi_clear_regs($i13);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} outb(84, $i13);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, 20);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} outw(0, $i14);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i13, 16);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} outw(0, $i15);
    call {:si_unique_call 169} devirtbounce(0);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i13, 26);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} outw(4095, $i16);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(96, 1));
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $i19 := $lshr.i64($i18, 10);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i16($i19);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 16383);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i16($i22);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i13, 4);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} outw($i23, $i24);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32($i28, 1);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i30 := $lshr.i32($i29, 2);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i16($i30);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i33 := $shl.i32($i32, 12);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(120, 1));
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32($i37, 1);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $i39 := $lshr.i32($i38, 2);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i16($i39);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 15);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i43 := $shl.i32($i42, 8);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $i44 := $or.i32($i33, $i43);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i16($i44);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i13, 6);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} outw($i45, $i46);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i13, 2);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} $i48 := inw($i47);
    call {:si_unique_call 174} {:cexpr "ptr"} boogie_si_record_i16($i48);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(120, 1));
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i48);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i52, 63);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} atomic_set($p51, $i53);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(120, 1));
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $i57 := $zext.i16.i32($i48);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i57, 63);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} atomic_set($p56, $i58);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i48);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $i63 := $and.i32($i62, 16128);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $i64 := $ashr.i32($i63, 8);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} atomic_set($p61, $i64);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $i68 := $zext.i16.i32($i48);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $i69 := $and.i32($i68, 16128);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $i70 := $ashr.i32($i69, 8);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} atomic_set($p67, $i70);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} vslice_dummy_var_53 := vlsi_set_baud($p4, $i13);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} outb(84, $i13);
    call {:si_unique_call 181} devirtbounce(0);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} outb(40, $i13);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $i7 := net_ratelimit();
    call {:si_unique_call 162} {:cexpr "tmp___1"} boogie_si_record_i32($i7);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 1);
    goto $bb6;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} vslice_dummy_var_52 := printk.ref.ref(.str.161, .str.162);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const pci_disable_device: ref;

axiom pci_disable_device == $sub.ref(0, 281218);

procedure pci_disable_device($p0: ref);
  free requires assertsPassed;



implementation pci_disable_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    return;
}



const vlsi_fill_rx: ref;

axiom vlsi_fill_rx == $sub.ref(0, 282250);

procedure vlsi_fill_rx($p0: ref);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation vlsi_fill_rx($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i64;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p4: ref;
  var vslice_dummy_var_54: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} $p1 := ring_last($p0);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $p4 := $p1;
    goto $bb4;

  $bb4:
    call $i5, $i6, $p10, $p11, $i12, $i13, $p14, $p15, $p16, $p17, $i18, $i19, $p20, $p21, $p22, $p23, $p24, $i25, $p26, $p27, $p28, $i29, $i30, $p31, $i32, $p33, $i34, $i35, $p4 := vlsi_fill_rx_loop_$bb4($p0, $i5, $i6, $p10, $p11, $i12, $i13, $p14, $p15, $p16, $p17, $i18, $i19, $p20, $p21, $p22, $p23, $p24, $i25, $p26, $p27, $p28, $i29, $i30, $p31, $i32, $p33, $i34, $i35, $p4);
    goto $bb4_last;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} $i5 := rd_is_active($p4);
    call {:si_unique_call 185} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} $i25 := rd_get_addr($p4);
    call {:si_unique_call 193} {:cexpr "tmp___1"} boogie_si_record_i64($i25);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i30 := $zext.i32.i64($i29);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} pci_dma_sync_single_for_device($p27, $i25, $i30, $i32);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} rd_activate($p4);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} $p33 := ring_put($p0);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i35 == 1);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb19:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $p4 := $p33;
    goto $bb19_dummy;

  $bb13:
    assume $i13 == 1;
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $p14 := dev_alloc_skb(2050);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $p14);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i19 == 1);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb15:
    assume $i19 == 1;
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} skb_reserve($p21, 1);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 232)), $mul.ref(192, 1));
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p24, 5888);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i6 == 1;
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} $i7 := net_ratelimit();
    call {:si_unique_call 187} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} vlsi_ring_debug($p0);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} vslice_dummy_var_54 := printk.ref.ref(.str.11, .str.12);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb19_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_532;
}



const ktime_get: ref;

axiom ktime_get == $sub.ref(0, 283282);

procedure ktime_get() returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ktime_get() returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} $p1 := external_alloc();
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 1} true;
    $i3 := $ne.ref($p2, $0.ref);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 1} true;
    call {:si_unique_call 199} __VERIFIER_assume($i4);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 200} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p5, $p6, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 284314);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const outw: ref;

axiom outw == $sub.ref(0, 285346);

procedure outw($i0: i16, $i1: i32);
  free requires assertsPassed;



implementation outw($i0: i16, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} {:cexpr "outw:arg:value"} boogie_si_record_i16($i0);
    call {:si_unique_call 202} {:cexpr "outw:arg:port"} boogie_si_record_i32($i1);
    call {:si_unique_call 203} devirtbounce.1(0, $i0, $i1);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 286378);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 1} true;
    call {:si_unique_call 204} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 205} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ring_last: ref;

axiom ring_last == $sub.ref(0, 287410);

procedure ring_last($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ring_last($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $i2 := atomic_read($p1);
    call {:si_unique_call 207} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i2, $i4);
    call {:si_unique_call 208} {:cexpr "t"} boogie_si_record_i32($i5);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} $i7 := atomic_read($p6);
    call {:si_unique_call 210} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i5, 1);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $i9 := $xor.i32($i8, $i7);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i9, $i11);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $p18 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $r := $p18;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i5);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p15, $mul.ref($i16, 24));
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $p18 := $p17;
    goto $bb3;
}



const rd_is_active: ref;

axiom rd_is_active == $sub.ref(0, 288442);

procedure rd_is_active($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation rd_is_active($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i7 := $sext.i8.i32($i6);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const vlsi_ring_debug: ref;

axiom vlsi_ring_debug == $sub.ref(0, 289474);

procedure vlsi_ring_debug($p0: ref);
  free requires assertsPassed;



implementation vlsi_ring_debug($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i41: i64;
  var $i42: i16;
  var $i43: i8;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $i28: i32;
  var vslice_dummy_var_55: i32;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} vslice_dummy_var_55 := printk.ref.ref.ref.i32.i32.i32.i32.ref(.str.13, .str.14, $p0, $i2, $i4, $i6, $i8, $p12);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} $i15 := atomic_read($p14);
    call {:si_unique_call 213} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} $i17 := atomic_read($p16);
    call {:si_unique_call 215} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i17, $i19);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i15, $i22);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} vslice_dummy_var_56 := printk.ref.ref.i32.i32(.str.15, .str.14, $i20, $i23);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $i27 := $ugt.i32($i26, 0);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i27 == 1;
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb4;

  $bb4:
    call $p29, $p30, $i31, $p32, $p34, $p35, $p36, $p37, $p38, $p39, $i41, $i42, $i43, $i44, $i45, $i46, $i48, $i49, $i50, $i28, vslice_dummy_var_57, vslice_dummy_var_58, vslice_dummy_var_59 := vlsi_ring_debug_loop_$bb4($p0, $p25, $p29, $p30, $i31, $p32, $p34, $p35, $p36, $p37, $p38, $p39, $i41, $i42, $i43, $i44, $i45, $i46, $i48, $i49, $i50, $i28, vslice_dummy_var_57, vslice_dummy_var_58, vslice_dummy_var_59);
    goto $bb4_last;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i31 := $zext.i32.i64($i28);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p30, $mul.ref($i31, 24));
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} vslice_dummy_var_57 := printk.ref.ref.i32(.str.16, .str.14, $i28);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p30, $mul.ref($i31, 24)), $mul.ref(8, 1));
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p30, $mul.ref($i31, 24)), $mul.ref(16, 1));
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p30, $mul.ref($i31, 24)), $mul.ref(0, 1));
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} vslice_dummy_var_58 := printk.ref.ref.ref.ref(.str.17, $p35, $p37, $p39);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} $i41 := rd_get_addr($p32);
    call {:si_unique_call 220} {:cexpr "tmp___1"} boogie_si_record_i64($i41);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} $i42 := rd_get_count($p32);
    call {:si_unique_call 222} {:cexpr "tmp___2"} boogie_si_record_i16($i42);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} $i43 := rd_get_status($p32);
    call {:si_unique_call 224} {:cexpr "tmp___3"} boogie_si_record_i8($i43);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i42);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i64.i32($i41);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} vslice_dummy_var_59 := printk.ref.ref.i32.i32.i32(.str.18, .str.14, $i44, $i45, $i46);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i28, 1);
    call {:si_unique_call 226} {:cexpr "i"} boogie_si_record_i32($i48);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p25);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $i50 := $ugt.i32($i49, $i48);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i50 == 1);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $i28 := $i48;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_671;
}



const dev_alloc_skb: ref;

axiom dev_alloc_skb == $sub.ref(0, 290506);

procedure dev_alloc_skb($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation dev_alloc_skb($i0: i32) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} {:cexpr "dev_alloc_skb:arg:length"} boogie_si_record_i32($i0);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} $p1 := netdev_alloc_skb($0.ref, $i0);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const skb_reserve: ref;

axiom skb_reserve == $sub.ref(0, 291538);

procedure skb_reserve($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation skb_reserve($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} {:cexpr "skb_reserve:arg:len"} boogie_si_record_i32($i1);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 1));
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p5);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, $i1);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    return;
}



const rd_get_addr: ref;

axiom rd_get_addr == $sub.ref(0, 292570);

procedure rd_get_addr($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation rd_get_addr($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i5);
    call {:si_unique_call 230} {:cexpr "a"} boogie_si_record_i64($i6);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $i7 := $and.i64($i6, 16777215);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pci_dma_sync_single_for_device: ref;

axiom pci_dma_sync_single_for_device == $sub.ref(0, 293602);

procedure pci_dma_sync_single_for_device($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation pci_dma_sync_single_for_device($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} {:cexpr "pci_dma_sync_single_for_device:arg:dma_handle"} boogie_si_record_i64($i1);
    call {:si_unique_call 232} {:cexpr "pci_dma_sync_single_for_device:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 233} {:cexpr "pci_dma_sync_single_for_device:arg:direction"} boogie_si_record_i32($i3);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} dma_sync_single_for_device($p7, $i1, $i2, $i3);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const rd_activate: ref;

axiom rd_activate == $sub.ref(0, 294634);

procedure rd_activate($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation rd_activate($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i8;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i7, 128);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, $i9);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    return;
}



const ring_put: ref;

axiom ring_put == $sub.ref(0, 295666);

procedure ring_put($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ring_put($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} atomic_inc($p1);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} $p2 := ring_last($p0);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 296698);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;



implementation atomic_inc($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 237} devirtbounce.2(0, $p1, $p1);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    return;
}



const dma_sync_single_for_device: ref;

axiom dma_sync_single_for_device == $sub.ref(0, 297730);

procedure dma_sync_single_for_device($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation dma_sync_single_for_device($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} {:cexpr "dma_sync_single_for_device:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 239} {:cexpr "dma_sync_single_for_device:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 240} {:cexpr "dma_sync_single_for_device:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} $p4 := get_dma_ops($p0);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} $i5 := valid_dma_direction($i3);
    call {:si_unique_call 243} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 245} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} debug_dma_sync_single_for_device($p0, $i1, $i2, $i3);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    call {:si_unique_call 247} devirtbounce.4($p16, $p0, $i1, $i2, $i3);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    call {:si_unique_call 246} devirtbounce.3(0, .str.10, 120, 12);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_sync_single_for_device_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const get_dma_ops: ref;

axiom get_dma_ops == $sub.ref(0, 298762);

procedure get_dma_ops($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_dma_ops($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 250} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1224, 1)), $mul.ref(0, 1));
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1224, 1)), $mul.ref(0, 1));
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $p13 := $p16;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, dma_ops);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const valid_dma_direction: ref;

axiom valid_dma_direction == $sub.ref(0, 299794);

procedure valid_dma_direction($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation valid_dma_direction($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i3: i1;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} {:cexpr "valid_dma_direction:arg:dma_direction"} boogie_si_record_i32($i0);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 1);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 2);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 300826);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 253} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const debug_dma_sync_single_for_device: ref;

axiom debug_dma_sync_single_for_device == $sub.ref(0, 301858);

procedure debug_dma_sync_single_for_device($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation debug_dma_sync_single_for_device($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} {:cexpr "debug_dma_sync_single_for_device:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 255} {:cexpr "debug_dma_sync_single_for_device:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 256} {:cexpr "debug_dma_sync_single_for_device:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    return;
}



const netdev_alloc_skb: ref;

axiom netdev_alloc_skb == $sub.ref(0, 302890);

procedure netdev_alloc_skb($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation netdev_alloc_skb($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} {:cexpr "netdev_alloc_skb:arg:length"} boogie_si_record_i32($i1);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} $p2 := ldv___netdev_alloc_skb_31($p0, $i1, 32);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;
}



const ldv___netdev_alloc_skb_31: ref;

axiom ldv___netdev_alloc_skb_31 == $sub.ref(0, 303922);

procedure ldv___netdev_alloc_skb_31($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv___netdev_alloc_skb_31($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} {:cexpr "ldv___netdev_alloc_skb_31:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    call {:si_unique_call 260} {:cexpr "ldv___netdev_alloc_skb_31:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} ldv_check_alloc_flags($i2);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} $p3 := ldv_undef_ptr();
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 304954);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i1 := $M.4;
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} ldv_error();
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 305986);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 1} true;
    call {:si_unique_call 265} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 266} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 307018);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 267} __VERIFIER_error();
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 308050);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const rd_get_count: ref;

axiom rd_get_count == $sub.ref(0, 309082);

procedure rd_get_count($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation rd_get_count($p0: ref) returns ($r: i16)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const rd_get_status: ref;

axiom rd_get_status == $sub.ref(0, 310114);

procedure rd_get_status($p0: ref) returns ($r: i8);
  free requires assertsPassed;



implementation rd_get_status($p0: ref) returns ($r: i8)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const vlsi_start_clock: ref;

axiom vlsi_start_clock == $sub.ref(0, 311146);

procedure vlsi_start_clock($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr;



implementation vlsi_start_clock($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i8;
  var $i7: i32;
  var $i8: i8;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i17: i32;
  var $i16: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i25: i8;
  var $i26: i32;
  var $i27: i8;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i24;
  var $i37: i24;
  var $i38: i24;
  var $p39: ref;
  var $p40: ref;
  var $i41: i8;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $i45: i1;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var $i51: i8;
  var $i52: i32;
  var $i53: i32;
  var $i54: i8;
  var $i55: i8;
  var $i56: i32;
  var $i57: i8;
  var $i60: i8;
  var $i61: i32;
  var $i62: i32;
  var $i63: i8;
  var $i64: i8;
  var $i65: i32;
  var $i66: i8;
  var $i29: i32;
  var $i69: i8;
  var $i70: i32;
  var $i71: i32;
  var $i72: i1;
  var $i74: i32;
  var $i75: i1;
  var $i73: i32;
  var $i77: i8;
  var $i78: i32;
  var $i79: i32;
  var $i80: i1;
  var $i82: i32;
  var $i83: i1;
  var $i81: i32;
  var $i85: i8;
  var $i86: i32;
  var $i87: i32;
  var $i88: i1;
  var $i90: i32;
  var $i91: i1;
  var $i89: i32;
  var $i93: i8;
  var $i94: i32;
  var $i95: i32;
  var $i96: i1;
  var $i98: i32;
  var $i99: i1;
  var $i97: i32;
  var $i101: i8;
  var $i102: i32;
  var $i103: i32;
  var $i104: i1;
  var $i106: i32;
  var $i107: i1;
  var $i105: i32;
  var $i109: i8;
  var $i110: i32;
  var $i111: i32;
  var $i112: i1;
  var $i114: i32;
  var $i115: i1;
  var $i113: i32;
  var $i117: i8;
  var $i118: i32;
  var $i119: i32;
  var $i120: i1;
  var $i122: i32;
  var $i123: i1;
  var $i121: i32;
  var $i125: i8;
  var $i126: i32;
  var $i127: i32;
  var $i128: i1;
  var $i130: i32;
  var $i131: i1;
  var $i129: i32;
  var $i133: i8;
  var $i134: i32;
  var $i135: i32;
  var $i136: i1;
  var $i138: i32;
  var $i139: i1;
  var $i137: i32;
  var $i141: i8;
  var $i142: i32;
  var $i143: i32;
  var $i144: i1;
  var $i146: i32;
  var $i147: i1;
  var $i145: i32;
  var $i149: i8;
  var $i150: i32;
  var $i151: i32;
  var $i152: i1;
  var $i154: i32;
  var $i155: i1;
  var $i153: i32;
  var $i157: i8;
  var $i158: i32;
  var $i159: i32;
  var $i160: i1;
  var $i162: i32;
  var $i163: i1;
  var $i161: i32;
  var $i165: i8;
  var $i166: i32;
  var $i167: i32;
  var $i168: i1;
  var $i170: i32;
  var $i171: i1;
  var $i169: i32;
  var $i173: i8;
  var $i174: i32;
  var $i175: i32;
  var $i176: i1;
  var $i178: i32;
  var $i179: i1;
  var $i177: i32;
  var $i181: i8;
  var $i182: i32;
  var $i183: i32;
  var $i184: i1;
  var $i186: i32;
  var $i187: i1;
  var $i185: i32;
  var $i189: i8;
  var $i190: i32;
  var $i191: i32;
  var $i192: i1;
  var $i194: i32;
  var $i195: i1;
  var $i193: i32;
  var $i197: i8;
  var $i198: i32;
  var $i199: i32;
  var $i200: i1;
  var $i202: i32;
  var $i203: i1;
  var $i201: i32;
  var $i205: i8;
  var $i206: i32;
  var $i207: i32;
  var $i208: i1;
  var $i210: i32;
  var $i211: i1;
  var $i209: i32;
  var $i213: i8;
  var $i214: i32;
  var $i215: i32;
  var $i216: i1;
  var $i218: i32;
  var $i219: i1;
  var $i217: i32;
  var $i221: i8;
  var $i222: i32;
  var $i223: i32;
  var $i224: i1;
  var $i226: i32;
  var $i227: i1;
  var $i225: i32;
  var $i229: i8;
  var $i230: i32;
  var $i231: i32;
  var $i232: i1;
  var $i234: i32;
  var $i235: i1;
  var $i233: i32;
  var $i237: i8;
  var $i238: i32;
  var $i239: i32;
  var $i240: i1;
  var $i242: i32;
  var $i243: i1;
  var $i241: i32;
  var $i245: i8;
  var $i246: i32;
  var $i247: i32;
  var $i248: i1;
  var $i250: i32;
  var $i251: i1;
  var $i249: i32;
  var $i253: i8;
  var $i254: i32;
  var $i255: i32;
  var $i256: i1;
  var $i258: i32;
  var $i259: i1;
  var $i257: i32;
  var $i261: i8;
  var $i262: i32;
  var $i263: i32;
  var $i264: i1;
  var $i266: i32;
  var $i267: i1;
  var $i265: i32;
  var $i269: i8;
  var $i270: i32;
  var $i271: i32;
  var $i272: i1;
  var $i274: i32;
  var $i275: i1;
  var $i273: i32;
  var $i277: i8;
  var $i278: i32;
  var $i279: i32;
  var $i280: i1;
  var $i282: i32;
  var $i283: i1;
  var $i281: i32;
  var $i285: i8;
  var $i286: i32;
  var $i287: i32;
  var $i288: i1;
  var $i290: i32;
  var $i291: i1;
  var $i289: i32;
  var $i293: i8;
  var $i294: i32;
  var $i295: i32;
  var $i296: i1;
  var $i298: i32;
  var $i299: i1;
  var $i297: i32;
  var $i301: i8;
  var $i302: i32;
  var $i303: i32;
  var $i304: i1;
  var $i306: i32;
  var $i307: i1;
  var $i305: i32;
  var $i309: i8;
  var $i310: i32;
  var $i311: i32;
  var $i312: i1;
  var $i314: i32;
  var $i315: i1;
  var $i313: i32;
  var $i317: i8;
  var $i318: i32;
  var $i319: i32;
  var $i320: i1;
  var $i322: i32;
  var $i323: i1;
  var $i321: i32;
  var $i325: i8;
  var $i326: i32;
  var $i327: i32;
  var $i328: i1;
  var $i330: i32;
  var $i331: i1;
  var $i329: i32;
  var $i333: i8;
  var $i334: i32;
  var $i335: i32;
  var $i336: i1;
  var $i338: i32;
  var $i339: i1;
  var $i337: i32;
  var $i341: i8;
  var $i342: i32;
  var $i343: i32;
  var $i344: i1;
  var $i346: i32;
  var $i347: i1;
  var $i345: i32;
  var $i349: i8;
  var $i350: i32;
  var $i351: i32;
  var $i352: i1;
  var $i354: i32;
  var $i355: i1;
  var $i353: i32;
  var $i357: i8;
  var $i358: i32;
  var $i359: i32;
  var $i360: i1;
  var $i362: i32;
  var $i363: i1;
  var $i361: i32;
  var $i365: i8;
  var $i366: i32;
  var $i367: i32;
  var $i368: i1;
  var $i370: i32;
  var $i371: i1;
  var $i369: i32;
  var $i373: i8;
  var $i374: i32;
  var $i375: i32;
  var $i376: i1;
  var $i378: i32;
  var $i379: i1;
  var $i377: i32;
  var $i381: i8;
  var $i382: i32;
  var $i383: i32;
  var $i384: i1;
  var $i386: i32;
  var $i387: i1;
  var $i385: i32;
  var $i389: i8;
  var $i390: i32;
  var $i391: i32;
  var $i392: i1;
  var $i394: i32;
  var $i395: i1;
  var $i393: i32;
  var $i397: i8;
  var $i398: i32;
  var $i399: i32;
  var $i400: i1;
  var $i402: i32;
  var $i403: i1;
  var $i401: i32;
  var $i405: i8;
  var $i406: i32;
  var $i407: i32;
  var $i408: i1;
  var $i410: i32;
  var $i411: i1;
  var $i409: i32;
  var $i413: i8;
  var $i414: i32;
  var $i415: i32;
  var $i416: i1;
  var $i418: i32;
  var $i419: i1;
  var $i417: i32;
  var $i421: i8;
  var $i422: i32;
  var $i423: i32;
  var $i424: i1;
  var $i426: i32;
  var $i427: i1;
  var $i425: i32;
  var $i429: i8;
  var $i430: i32;
  var $i431: i32;
  var $i432: i1;
  var $i434: i32;
  var $i435: i1;
  var $i433: i32;
  var $i437: i8;
  var $i438: i32;
  var $i439: i32;
  var $i440: i1;
  var $i442: i32;
  var $i443: i1;
  var $i441: i32;
  var $i445: i8;
  var $i446: i32;
  var $i447: i32;
  var $i448: i1;
  var $i450: i32;
  var $i451: i1;
  var $i449: i32;
  var $i453: i8;
  var $i454: i32;
  var $i455: i32;
  var $i456: i1;
  var $i458: i32;
  var $i459: i1;
  var $i457: i32;
  var $i461: i8;
  var $i462: i32;
  var $i463: i32;
  var $i464: i1;
  var $i466: i32;
  var $i467: i1;
  var $i465: i32;
  var $i469: i8;
  var $i470: i32;
  var $i471: i32;
  var $i472: i1;
  var $i474: i32;
  var $i475: i1;
  var $i473: i32;
  var $i477: i8;
  var $i478: i32;
  var $i479: i32;
  var $i480: i1;
  var $i482: i32;
  var $i483: i1;
  var $i481: i32;
  var $i485: i8;
  var $i486: i32;
  var $i487: i32;
  var $i488: i1;
  var $i490: i32;
  var $i491: i1;
  var $i489: i32;
  var $i493: i8;
  var $i494: i32;
  var $i495: i32;
  var $i496: i1;
  var $i498: i32;
  var $i499: i1;
  var $i497: i32;
  var $i501: i8;
  var $i502: i32;
  var $i503: i32;
  var $i504: i1;
  var $i506: i32;
  var $i507: i1;
  var $i505: i32;
  var $i509: i8;
  var $i510: i32;
  var $i511: i32;
  var $i512: i1;
  var $i514: i32;
  var $i515: i1;
  var $i513: i32;
  var $i517: i8;
  var $i518: i32;
  var $i519: i32;
  var $i520: i1;
  var $i522: i32;
  var $i523: i1;
  var $i521: i32;
  var $i525: i8;
  var $i526: i32;
  var $i527: i32;
  var $i528: i1;
  var $i530: i32;
  var $i531: i1;
  var $i529: i32;
  var $i533: i8;
  var $i534: i32;
  var $i535: i32;
  var $i536: i1;
  var $i538: i32;
  var $i539: i1;
  var $i537: i32;
  var $i541: i8;
  var $i542: i32;
  var $i543: i32;
  var $i544: i1;
  var $i546: i32;
  var $i547: i1;
  var $i545: i32;
  var $i549: i8;
  var $i550: i32;
  var $i551: i32;
  var $i552: i1;
  var $i554: i32;
  var $i555: i1;
  var $i553: i32;
  var $i557: i8;
  var $i558: i32;
  var $i559: i32;
  var $i560: i1;
  var $i562: i32;
  var $i563: i1;
  var $i561: i32;
  var $i565: i8;
  var $i566: i32;
  var $i567: i32;
  var $i568: i1;
  var $i570: i32;
  var $i571: i1;
  var $i569: i32;
  var $i573: i8;
  var $i574: i32;
  var $i575: i32;
  var $i576: i1;
  var $i578: i32;
  var $i579: i1;
  var $i577: i32;
  var $i581: i8;
  var $i582: i32;
  var $i583: i32;
  var $i584: i1;
  var $i586: i32;
  var $i587: i1;
  var $i585: i32;
  var $i589: i8;
  var $i590: i32;
  var $i591: i32;
  var $i592: i1;
  var $i594: i32;
  var $i595: i1;
  var $i593: i32;
  var $i597: i8;
  var $i598: i32;
  var $i599: i32;
  var $i600: i1;
  var $i602: i32;
  var $i603: i1;
  var $i601: i32;
  var $i605: i8;
  var $i606: i32;
  var $i607: i32;
  var $i608: i1;
  var $i610: i32;
  var $i611: i1;
  var $i609: i32;
  var $i613: i8;
  var $i614: i32;
  var $i615: i32;
  var $i616: i1;
  var $i618: i32;
  var $i619: i1;
  var $i617: i32;
  var $i621: i8;
  var $i622: i32;
  var $i623: i32;
  var $i624: i1;
  var $i626: i32;
  var $i627: i1;
  var $i625: i32;
  var $i629: i8;
  var $i630: i32;
  var $i631: i32;
  var $i632: i1;
  var $i634: i32;
  var $i635: i1;
  var $i633: i32;
  var $i637: i8;
  var $i638: i32;
  var $i639: i32;
  var $i640: i1;
  var $i642: i32;
  var $i643: i1;
  var $i641: i32;
  var $i645: i8;
  var $i646: i32;
  var $i647: i32;
  var $i648: i1;
  var $i650: i32;
  var $i651: i1;
  var $i649: i32;
  var $i653: i8;
  var $i654: i32;
  var $i655: i32;
  var $i656: i1;
  var $i658: i32;
  var $i659: i1;
  var $i657: i32;
  var $i661: i8;
  var $i662: i32;
  var $i663: i32;
  var $i664: i1;
  var $i666: i32;
  var $i667: i1;
  var $i665: i32;
  var $i669: i8;
  var $i670: i32;
  var $i671: i32;
  var $i672: i1;
  var $i674: i32;
  var $i675: i1;
  var $i673: i32;
  var $i677: i8;
  var $i678: i32;
  var $i679: i32;
  var $i680: i1;
  var $i682: i32;
  var $i683: i1;
  var $i681: i32;
  var $i685: i8;
  var $i686: i32;
  var $i687: i32;
  var $i688: i1;
  var $i690: i32;
  var $i691: i1;
  var $i689: i32;
  var $i693: i8;
  var $i694: i32;
  var $i695: i32;
  var $i696: i1;
  var $i698: i32;
  var $i699: i1;
  var $i697: i32;
  var $i701: i8;
  var $i702: i32;
  var $i703: i32;
  var $i704: i1;
  var $i706: i32;
  var $i707: i1;
  var $i705: i32;
  var $i709: i8;
  var $i710: i32;
  var $i711: i32;
  var $i712: i1;
  var $i714: i32;
  var $i715: i1;
  var $i713: i32;
  var $i717: i8;
  var $i718: i32;
  var $i719: i32;
  var $i720: i1;
  var $i722: i32;
  var $i723: i1;
  var $i721: i32;
  var $i725: i8;
  var $i726: i32;
  var $i727: i32;
  var $i728: i1;
  var $i730: i32;
  var $i731: i1;
  var $i729: i32;
  var $i733: i8;
  var $i734: i32;
  var $i735: i32;
  var $i736: i1;
  var $i738: i32;
  var $i739: i1;
  var $i737: i32;
  var $i741: i8;
  var $i742: i32;
  var $i743: i32;
  var $i744: i1;
  var $i746: i32;
  var $i747: i1;
  var $i745: i32;
  var $i749: i8;
  var $i750: i32;
  var $i751: i32;
  var $i752: i1;
  var $i754: i32;
  var $i755: i1;
  var $i753: i32;
  var $i757: i8;
  var $i758: i32;
  var $i759: i32;
  var $i760: i1;
  var $i762: i32;
  var $i763: i1;
  var $i761: i32;
  var $i765: i8;
  var $i766: i32;
  var $i767: i32;
  var $i768: i1;
  var $i770: i32;
  var $i771: i1;
  var $i769: i32;
  var $i773: i8;
  var $i774: i32;
  var $i775: i32;
  var $i776: i1;
  var $i778: i32;
  var $i779: i1;
  var $i777: i32;
  var $i781: i8;
  var $i782: i32;
  var $i783: i32;
  var $i784: i1;
  var $i786: i32;
  var $i787: i1;
  var $i785: i32;
  var $i789: i8;
  var $i790: i32;
  var $i791: i32;
  var $i792: i1;
  var $i794: i32;
  var $i795: i1;
  var $i793: i32;
  var $i797: i8;
  var $i798: i32;
  var $i799: i32;
  var $i800: i1;
  var $i802: i32;
  var $i803: i1;
  var $i801: i32;
  var $i805: i8;
  var $i806: i32;
  var $i807: i32;
  var $i808: i1;
  var $i810: i32;
  var $i811: i1;
  var $i809: i32;
  var $i813: i8;
  var $i814: i32;
  var $i815: i32;
  var $i816: i1;
  var $i818: i32;
  var $i819: i1;
  var $i817: i32;
  var $i821: i8;
  var $i822: i32;
  var $i823: i32;
  var $i824: i1;
  var $i826: i32;
  var $i827: i1;
  var $i825: i32;
  var $i829: i8;
  var $i830: i32;
  var $i831: i32;
  var $i832: i1;
  var $i834: i32;
  var $i835: i1;
  var $i833: i32;
  var $i837: i8;
  var $i838: i32;
  var $i839: i32;
  var $i840: i1;
  var $i842: i32;
  var $i843: i1;
  var $i841: i32;
  var $i845: i8;
  var $i846: i32;
  var $i847: i32;
  var $i848: i1;
  var $i850: i32;
  var $i851: i1;
  var $i849: i32;
  var $i853: i8;
  var $i854: i32;
  var $i855: i32;
  var $i856: i1;
  var $i858: i32;
  var $i859: i1;
  var $i857: i32;
  var $i861: i8;
  var $i862: i32;
  var $i863: i32;
  var $i864: i1;
  var $i866: i32;
  var $i867: i1;
  var $i865: i32;
  var $i869: i8;
  var $i870: i32;
  var $i871: i32;
  var $i872: i1;
  var $i874: i32;
  var $i875: i1;
  var $i873: i32;
  var $i877: i8;
  var $i878: i32;
  var $i879: i32;
  var $i880: i1;
  var $i882: i32;
  var $i883: i1;
  var $i881: i32;
  var $i885: i8;
  var $i886: i32;
  var $i887: i32;
  var $i888: i1;
  var $i890: i32;
  var $i891: i1;
  var $i889: i32;
  var $i893: i8;
  var $i894: i32;
  var $i895: i32;
  var $i896: i1;
  var $i898: i32;
  var $i899: i1;
  var $i897: i32;
  var $i901: i8;
  var $i902: i32;
  var $i903: i32;
  var $i904: i1;
  var $i906: i32;
  var $i907: i1;
  var $i905: i32;
  var $i909: i8;
  var $i910: i32;
  var $i911: i32;
  var $i912: i1;
  var $i914: i32;
  var $i915: i1;
  var $i913: i32;
  var $i917: i8;
  var $i918: i32;
  var $i919: i32;
  var $i920: i1;
  var $i922: i32;
  var $i923: i1;
  var $i921: i32;
  var $i925: i8;
  var $i926: i32;
  var $i927: i32;
  var $i928: i1;
  var $i930: i32;
  var $i931: i1;
  var $i929: i32;
  var $i933: i8;
  var $i934: i32;
  var $i935: i32;
  var $i936: i1;
  var $i938: i32;
  var $i939: i1;
  var $i937: i32;
  var $i941: i8;
  var $i942: i32;
  var $i943: i32;
  var $i944: i1;
  var $i946: i32;
  var $i947: i1;
  var $i945: i32;
  var $i949: i8;
  var $i950: i32;
  var $i951: i32;
  var $i952: i1;
  var $i954: i32;
  var $i955: i1;
  var $i953: i32;
  var $i957: i8;
  var $i958: i32;
  var $i959: i32;
  var $i960: i1;
  var $i962: i32;
  var $i963: i1;
  var $i961: i32;
  var $i965: i8;
  var $i966: i32;
  var $i967: i32;
  var $i968: i1;
  var $i970: i32;
  var $i971: i1;
  var $i969: i32;
  var $i973: i8;
  var $i974: i32;
  var $i975: i32;
  var $i976: i1;
  var $i978: i32;
  var $i979: i1;
  var $i977: i32;
  var $i981: i8;
  var $i982: i32;
  var $i983: i32;
  var $i984: i1;
  var $i986: i32;
  var $i987: i1;
  var $i985: i32;
  var $i989: i8;
  var $i990: i32;
  var $i991: i32;
  var $i992: i1;
  var $i994: i32;
  var $i995: i1;
  var $i993: i32;
  var $i997: i8;
  var $i998: i32;
  var $i999: i32;
  var $i1000: i1;
  var $i1002: i32;
  var $i1003: i1;
  var $i1001: i32;
  var $i1005: i8;
  var $i1006: i32;
  var $i1007: i32;
  var $i1008: i1;
  var $i1010: i32;
  var $i1011: i1;
  var $i1009: i32;
  var $i1013: i8;
  var $i1014: i32;
  var $i1015: i32;
  var $i1016: i1;
  var $i1018: i32;
  var $i1019: i1;
  var $i1017: i32;
  var $i1021: i8;
  var $i1022: i32;
  var $i1023: i32;
  var $i1024: i1;
  var $i1026: i32;
  var $i1027: i1;
  var $i1025: i32;
  var $i1029: i8;
  var $i1030: i32;
  var $i1031: i32;
  var $i1032: i1;
  var $i1034: i32;
  var $i1035: i1;
  var $i1033: i32;
  var $i1037: i8;
  var $i1038: i32;
  var $i1039: i32;
  var $i1040: i1;
  var $i1042: i32;
  var $i1043: i1;
  var $i1041: i32;
  var $i1045: i8;
  var $i1046: i32;
  var $i1047: i32;
  var $i1048: i1;
  var $i1050: i32;
  var $i1051: i1;
  var $i1049: i32;
  var $i1053: i8;
  var $i1054: i32;
  var $i1055: i32;
  var $i1056: i1;
  var $i1058: i32;
  var $i1059: i1;
  var $i1057: i32;
  var $i1061: i8;
  var $i1062: i32;
  var $i1063: i32;
  var $i1064: i1;
  var $i1066: i32;
  var $i1067: i1;
  var $i1065: i32;
  var $i1069: i8;
  var $i1070: i32;
  var $i1071: i32;
  var $i1072: i1;
  var $i1074: i32;
  var $i1075: i1;
  var $i1073: i32;
  var $i1077: i8;
  var $i1078: i32;
  var $i1079: i32;
  var $i1080: i1;
  var $i1082: i32;
  var $i1083: i1;
  var $i1081: i32;
  var $i1085: i8;
  var $i1086: i32;
  var $i1087: i32;
  var $i1088: i1;
  var $i1090: i32;
  var $i1091: i1;
  var $i1089: i32;
  var $i1093: i8;
  var $i1094: i32;
  var $i1095: i32;
  var $i1096: i1;
  var $i1098: i32;
  var $i1099: i1;
  var $i1097: i32;
  var $i1101: i8;
  var $i1102: i32;
  var $i1103: i32;
  var $i1104: i1;
  var $i1106: i32;
  var $i1107: i1;
  var $i1105: i32;
  var $i1109: i8;
  var $i1110: i32;
  var $i1111: i32;
  var $i1112: i1;
  var $i1114: i32;
  var $i1115: i1;
  var $i1113: i32;
  var $i1117: i8;
  var $i1118: i32;
  var $i1119: i32;
  var $i1120: i1;
  var $i1122: i32;
  var $i1123: i1;
  var $i1121: i32;
  var $i1125: i8;
  var $i1126: i32;
  var $i1127: i32;
  var $i1128: i1;
  var $i1130: i32;
  var $i1131: i1;
  var $i1129: i32;
  var $i1133: i8;
  var $i1134: i32;
  var $i1135: i32;
  var $i1136: i1;
  var $i1138: i32;
  var $i1139: i1;
  var $i1137: i32;
  var $i1141: i8;
  var $i1142: i32;
  var $i1143: i32;
  var $i1144: i1;
  var $i1146: i32;
  var $i1147: i1;
  var $i1145: i32;
  var $i1149: i8;
  var $i1150: i32;
  var $i1151: i32;
  var $i1152: i1;
  var $i1154: i32;
  var $i1155: i1;
  var $i1153: i32;
  var $i1157: i8;
  var $i1158: i32;
  var $i1159: i32;
  var $i1160: i1;
  var $i1162: i32;
  var $i1163: i1;
  var $i1161: i32;
  var $i1165: i8;
  var $i1166: i32;
  var $i1167: i32;
  var $i1168: i1;
  var $i1170: i32;
  var $i1171: i1;
  var $i1169: i32;
  var $i1173: i8;
  var $i1174: i32;
  var $i1175: i32;
  var $i1176: i1;
  var $i1178: i32;
  var $i1179: i1;
  var $i1177: i32;
  var $i1181: i8;
  var $i1182: i32;
  var $i1183: i32;
  var $i1184: i1;
  var $i1186: i32;
  var $i1187: i1;
  var $i1185: i32;
  var $i1189: i8;
  var $i1190: i32;
  var $i1191: i32;
  var $i1192: i1;
  var $i1194: i32;
  var $i1195: i1;
  var $i1193: i32;
  var $i1197: i8;
  var $i1198: i32;
  var $i1199: i32;
  var $i1200: i1;
  var $i1202: i32;
  var $i1203: i1;
  var $i1201: i32;
  var $i1205: i8;
  var $i1206: i32;
  var $i1207: i32;
  var $i1208: i1;
  var $i1210: i32;
  var $i1211: i1;
  var $i1209: i32;
  var $i1213: i8;
  var $i1214: i32;
  var $i1215: i32;
  var $i1216: i1;
  var $i1218: i32;
  var $i1219: i1;
  var $i1217: i32;
  var $i1221: i8;
  var $i1222: i32;
  var $i1223: i32;
  var $i1224: i1;
  var $i1226: i32;
  var $i1227: i1;
  var $i1225: i32;
  var $i1229: i8;
  var $i1230: i32;
  var $i1231: i32;
  var $i1232: i1;
  var $i1234: i32;
  var $i1235: i1;
  var $i1233: i32;
  var $i1237: i8;
  var $i1238: i32;
  var $i1239: i32;
  var $i1240: i1;
  var $i1242: i32;
  var $i1243: i1;
  var $i1241: i32;
  var $i1245: i8;
  var $i1246: i32;
  var $i1247: i32;
  var $i1248: i1;
  var $i1250: i32;
  var $i1251: i1;
  var $i1249: i32;
  var $i1253: i8;
  var $i1254: i32;
  var $i1255: i32;
  var $i1256: i1;
  var $i1258: i32;
  var $i1259: i1;
  var $i1257: i32;
  var $i1261: i8;
  var $i1262: i32;
  var $i1263: i32;
  var $i1264: i1;
  var $i1266: i32;
  var $i1267: i1;
  var $i1265: i32;
  var $i1269: i8;
  var $i1270: i32;
  var $i1271: i32;
  var $i1272: i1;
  var $i1274: i32;
  var $i1275: i1;
  var $i1273: i32;
  var $i1277: i8;
  var $i1278: i32;
  var $i1279: i32;
  var $i1280: i1;
  var $i1282: i32;
  var $i1283: i1;
  var $i1281: i32;
  var $i1285: i8;
  var $i1286: i32;
  var $i1287: i32;
  var $i1288: i1;
  var $i1290: i32;
  var $i1291: i1;
  var $i1289: i32;
  var $i1293: i8;
  var $i1294: i32;
  var $i1295: i32;
  var $i1296: i1;
  var $i1298: i32;
  var $i1299: i1;
  var $i1297: i32;
  var $i1301: i8;
  var $i1302: i32;
  var $i1303: i32;
  var $i1304: i1;
  var $i1306: i32;
  var $i1307: i1;
  var $i1305: i32;
  var $i1309: i8;
  var $i1310: i32;
  var $i1311: i32;
  var $i1312: i1;
  var $i1314: i32;
  var $i1315: i1;
  var $i1313: i32;
  var $i1317: i8;
  var $i1318: i32;
  var $i1319: i32;
  var $i1320: i1;
  var $i1322: i32;
  var $i1323: i1;
  var $i1321: i32;
  var $i1325: i8;
  var $i1326: i32;
  var $i1327: i32;
  var $i1328: i1;
  var $i1330: i32;
  var $i1331: i1;
  var $i1329: i32;
  var $i1333: i8;
  var $i1334: i32;
  var $i1335: i32;
  var $i1336: i1;
  var $i1338: i32;
  var $i1339: i1;
  var $i1337: i32;
  var $i1341: i8;
  var $i1342: i32;
  var $i1343: i32;
  var $i1344: i1;
  var $i1346: i32;
  var $i1347: i1;
  var $i1345: i32;
  var $i1349: i8;
  var $i1350: i32;
  var $i1351: i32;
  var $i1352: i1;
  var $i1354: i32;
  var $i1355: i1;
  var $i1353: i32;
  var $i1357: i8;
  var $i1358: i32;
  var $i1359: i32;
  var $i1360: i1;
  var $i1362: i32;
  var $i1363: i1;
  var $i1361: i32;
  var $i1365: i8;
  var $i1366: i32;
  var $i1367: i32;
  var $i1368: i1;
  var $i1370: i32;
  var $i1371: i1;
  var $i1369: i32;
  var $i1373: i8;
  var $i1374: i32;
  var $i1375: i32;
  var $i1376: i1;
  var $i1378: i32;
  var $i1379: i1;
  var $i1377: i32;
  var $i1381: i8;
  var $i1382: i32;
  var $i1383: i32;
  var $i1384: i1;
  var $i1386: i32;
  var $i1387: i1;
  var $i1385: i32;
  var $i1389: i8;
  var $i1390: i32;
  var $i1391: i32;
  var $i1392: i1;
  var $i1394: i32;
  var $i1395: i1;
  var $i1393: i32;
  var $i1397: i8;
  var $i1398: i32;
  var $i1399: i32;
  var $i1400: i1;
  var $i1402: i32;
  var $i1403: i1;
  var $i1401: i32;
  var $i1405: i8;
  var $i1406: i32;
  var $i1407: i32;
  var $i1408: i1;
  var $i1410: i32;
  var $i1411: i1;
  var $i1409: i32;
  var $i1413: i8;
  var $i1414: i32;
  var $i1415: i32;
  var $i1416: i1;
  var $i1418: i32;
  var $i1419: i1;
  var $i1417: i32;
  var $i1421: i8;
  var $i1422: i32;
  var $i1423: i32;
  var $i1424: i1;
  var $i1426: i32;
  var $i1427: i1;
  var $i1425: i32;
  var $i1429: i8;
  var $i1430: i32;
  var $i1431: i32;
  var $i1432: i1;
  var $i1434: i32;
  var $i1435: i1;
  var $i1433: i32;
  var $i1437: i8;
  var $i1438: i32;
  var $i1439: i32;
  var $i1440: i1;
  var $i1442: i32;
  var $i1443: i1;
  var $i1441: i32;
  var $i1445: i8;
  var $i1446: i32;
  var $i1447: i32;
  var $i1448: i1;
  var $i1450: i32;
  var $i1451: i1;
  var $i1449: i32;
  var $i1453: i8;
  var $i1454: i32;
  var $i1455: i32;
  var $i1456: i1;
  var $i1458: i32;
  var $i1459: i1;
  var $i1457: i32;
  var $i1461: i8;
  var $i1462: i32;
  var $i1463: i32;
  var $i1464: i1;
  var $i1466: i32;
  var $i1467: i1;
  var $i1465: i32;
  var $i1469: i8;
  var $i1470: i32;
  var $i1471: i32;
  var $i1472: i1;
  var $i1474: i32;
  var $i1475: i1;
  var $i1473: i32;
  var $i1477: i8;
  var $i1478: i32;
  var $i1479: i32;
  var $i1480: i1;
  var $i1482: i32;
  var $i1483: i1;
  var $i1481: i32;
  var $i1485: i8;
  var $i1486: i32;
  var $i1487: i32;
  var $i1488: i1;
  var $i1490: i32;
  var $i1491: i1;
  var $i1489: i32;
  var $i1493: i8;
  var $i1494: i32;
  var $i1495: i32;
  var $i1496: i1;
  var $i1498: i32;
  var $i1499: i1;
  var $i1497: i32;
  var $i1501: i8;
  var $i1502: i32;
  var $i1503: i32;
  var $i1504: i1;
  var $i1506: i32;
  var $i1507: i1;
  var $i1505: i32;
  var $i1509: i8;
  var $i1510: i32;
  var $i1511: i32;
  var $i1512: i1;
  var $i1514: i32;
  var $i1515: i1;
  var $i1513: i32;
  var $i1517: i8;
  var $i1518: i32;
  var $i1519: i32;
  var $i1520: i1;
  var $i1522: i32;
  var $i1523: i1;
  var $i1521: i32;
  var $i1525: i8;
  var $i1526: i32;
  var $i1527: i32;
  var $i1528: i1;
  var $i1530: i32;
  var $i1531: i1;
  var $i1529: i32;
  var $i1533: i8;
  var $i1534: i32;
  var $i1535: i32;
  var $i1536: i1;
  var $i1538: i32;
  var $i1539: i1;
  var $i1537: i32;
  var $i1541: i8;
  var $i1542: i32;
  var $i1543: i32;
  var $i1544: i1;
  var $i1546: i32;
  var $i1547: i1;
  var $i1545: i32;
  var $i1549: i8;
  var $i1550: i32;
  var $i1551: i32;
  var $i1552: i1;
  var $i1554: i32;
  var $i1555: i1;
  var $i1553: i32;
  var $i1557: i8;
  var $i1558: i32;
  var $i1559: i32;
  var $i1560: i1;
  var $i1562: i32;
  var $i1563: i1;
  var $i1561: i32;
  var $i1565: i8;
  var $i1566: i32;
  var $i1567: i32;
  var $i1568: i1;
  var $i1570: i32;
  var $i1571: i1;
  var $i1569: i32;
  var $i1573: i8;
  var $i1574: i32;
  var $i1575: i32;
  var $i1576: i1;
  var $i1578: i32;
  var $i1579: i1;
  var $i1577: i32;
  var $i1581: i8;
  var $i1582: i32;
  var $i1583: i32;
  var $i1584: i1;
  var $i1585: i32;
  var $i1586: i1;
  var $i18: i32;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: i32;
  var vslice_dummy_var_122: i32;
  var vslice_dummy_var_123: i32;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;
  var vslice_dummy_var_133: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i32;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i32;
  var vslice_dummy_var_146: i32;
  var vslice_dummy_var_147: i32;
  var vslice_dummy_var_148: i32;
  var vslice_dummy_var_149: i32;
  var vslice_dummy_var_150: i32;
  var vslice_dummy_var_151: i32;
  var vslice_dummy_var_152: i32;
  var vslice_dummy_var_153: i32;
  var vslice_dummy_var_154: i32;
  var vslice_dummy_var_155: i32;
  var vslice_dummy_var_156: i32;
  var vslice_dummy_var_157: i32;
  var vslice_dummy_var_158: i32;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i32;
  var vslice_dummy_var_161: i32;
  var vslice_dummy_var_162: i32;
  var vslice_dummy_var_163: i32;
  var vslice_dummy_var_164: i32;
  var vslice_dummy_var_165: i32;
  var vslice_dummy_var_166: i32;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i32;
  var vslice_dummy_var_169: i32;
  var vslice_dummy_var_170: i32;
  var vslice_dummy_var_171: i32;
  var vslice_dummy_var_172: i32;
  var vslice_dummy_var_173: i32;
  var vslice_dummy_var_174: i32;
  var vslice_dummy_var_175: i32;
  var vslice_dummy_var_176: i32;
  var vslice_dummy_var_177: i32;
  var vslice_dummy_var_178: i32;
  var vslice_dummy_var_179: i32;
  var vslice_dummy_var_180: i32;
  var vslice_dummy_var_181: i32;
  var vslice_dummy_var_182: i32;
  var vslice_dummy_var_183: i32;
  var vslice_dummy_var_184: i32;
  var vslice_dummy_var_185: i32;
  var vslice_dummy_var_186: i32;
  var vslice_dummy_var_187: i32;
  var vslice_dummy_var_188: i32;
  var vslice_dummy_var_189: i32;
  var vslice_dummy_var_190: i32;
  var vslice_dummy_var_191: i32;
  var vslice_dummy_var_192: i32;
  var vslice_dummy_var_193: i32;
  var vslice_dummy_var_194: i32;
  var vslice_dummy_var_195: i32;
  var vslice_dummy_var_196: i32;
  var vslice_dummy_var_197: i32;
  var vslice_dummy_var_198: i32;
  var vslice_dummy_var_199: i32;
  var vslice_dummy_var_200: i32;
  var vslice_dummy_var_201: i32;
  var vslice_dummy_var_202: i32;
  var vslice_dummy_var_203: i32;
  var vslice_dummy_var_204: i32;
  var vslice_dummy_var_205: i32;
  var vslice_dummy_var_206: i32;
  var vslice_dummy_var_207: i32;
  var vslice_dummy_var_208: i32;
  var vslice_dummy_var_209: i32;
  var vslice_dummy_var_210: i32;
  var vslice_dummy_var_211: i32;
  var vslice_dummy_var_212: i32;
  var vslice_dummy_var_213: i32;
  var vslice_dummy_var_214: i32;
  var vslice_dummy_var_215: i32;
  var vslice_dummy_var_216: i32;
  var vslice_dummy_var_217: i32;
  var vslice_dummy_var_218: i32;
  var vslice_dummy_var_219: i32;
  var vslice_dummy_var_220: i32;
  var vslice_dummy_var_221: i32;
  var vslice_dummy_var_222: i32;
  var vslice_dummy_var_223: i32;
  var vslice_dummy_var_224: i32;
  var vslice_dummy_var_225: i32;
  var vslice_dummy_var_226: i32;
  var vslice_dummy_var_227: i32;
  var vslice_dummy_var_228: i32;
  var vslice_dummy_var_229: i32;
  var vslice_dummy_var_230: i32;
  var vslice_dummy_var_231: i32;
  var vslice_dummy_var_232: i32;
  var vslice_dummy_var_233: i32;
  var vslice_dummy_var_234: i32;
  var vslice_dummy_var_235: i32;
  var vslice_dummy_var_236: i32;
  var vslice_dummy_var_237: i32;
  var vslice_dummy_var_238: i32;
  var vslice_dummy_var_239: i32;
  var vslice_dummy_var_240: i32;
  var vslice_dummy_var_241: i32;
  var vslice_dummy_var_242: i32;
  var vslice_dummy_var_243: i32;
  var vslice_dummy_var_244: i32;
  var vslice_dummy_var_245: i32;
  var vslice_dummy_var_246: i32;
  var vslice_dummy_var_247: i32;
  var vslice_dummy_var_248: i32;
  var vslice_dummy_var_249: i32;
  var vslice_dummy_var_250: i32;
  var vslice_dummy_var_251: i32;
  var vslice_dummy_var_252: i32;
  var vslice_dummy_var_253: i32;
  var vslice_dummy_var_254: i32;
  var vslice_dummy_var_255: i32;
  var vslice_dummy_var_256: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i4 := $M.5;
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i5 := $sle.i32($i4, 1);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i47 := $M.5;
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 1);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i48 == 1);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} vslice_dummy_var_65 := pci_read_config_byte($p0, 64, $p1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.3, $p1);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i62 := $and.i32($i61, 127);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i32.i8($i62);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p1, $i63);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.3, $p1);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i8($i65);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} vslice_dummy_var_67 := pci_write_config_byte($p0, 64, $i66);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb29:
    assume $i48 == 1;
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p1, $sub.i8(0, 96));
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i49 := $M.5;
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 3);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.3, $p1);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i8($i56);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} vslice_dummy_var_66 := pci_write_config_byte($p0, 64, $i57);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb31:
    assume $i50 == 1;
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.3, $p1);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i53 := $or.i32($i52, 16);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i8($i53);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p1, $i54);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p1, $sub.i8(0, 124));
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.3, $p1);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} vslice_dummy_var_60 := pci_write_config_byte($p0, 64, $i8);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} __const_udelay(2147500);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} vslice_dummy_var_61 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.3, $p2);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 64);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} __const_udelay(214750);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} vslice_dummy_var_62 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.3, $p2);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i71 := $and.i32($i70, 64);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    $i73 := $i17;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} __const_udelay(214750);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} vslice_dummy_var_68 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.3, $p2);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i77);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i79 := $and.i32($i78, 64);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    $i81 := $i73;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} __const_udelay(214750);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} vslice_dummy_var_69 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.3, $p2);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i85);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $i87 := $and.i32($i86, 64);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    $i89 := $i81;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} __const_udelay(214750);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} vslice_dummy_var_70 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.3, $p2);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i32($i93);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i95 := $and.i32($i94, 64);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i95, 0);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    $i97 := $i89;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} __const_udelay(214750);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} vslice_dummy_var_71 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.3, $p2);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i32($i101);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i103 := $and.i32($i102, 64);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i104 := $ne.i32($i103, 0);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    $i105 := $i97;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} __const_udelay(214750);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} vslice_dummy_var_72 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.3, $p2);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i32($i109);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i111 := $and.i32($i110, 64);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i111, 0);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    $i113 := $i105;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} __const_udelay(214750);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} vslice_dummy_var_73 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i117 := $load.i8($M.3, $p2);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i118 := $zext.i8.i32($i117);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i119 := $and.i32($i118, 64);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i119, 0);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    $i121 := $i113;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} __const_udelay(214750);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} vslice_dummy_var_74 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $i125 := $load.i8($M.3, $p2);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i126 := $zext.i8.i32($i125);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i127 := $and.i32($i126, 64);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $i128 := $ne.i32($i127, 0);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    $i129 := $i121;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} __const_udelay(214750);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} vslice_dummy_var_75 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $i133 := $load.i8($M.3, $p2);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $i134 := $zext.i8.i32($i133);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i135 := $and.i32($i134, 64);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i136 := $ne.i32($i135, 0);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    assume {:branchcond $i136} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    $i137 := $i129;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} __const_udelay(214750);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} vslice_dummy_var_76 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i141 := $load.i8($M.3, $p2);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i142 := $zext.i8.i32($i141);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i143 := $and.i32($i142, 64);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i144 := $ne.i32($i143, 0);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    assume {:branchcond $i144} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    $i145 := $i137;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} __const_udelay(214750);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} vslice_dummy_var_77 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $i149 := $load.i8($M.3, $p2);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i150 := $zext.i8.i32($i149);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i151 := $and.i32($i150, 64);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $i152 := $ne.i32($i151, 0);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    $i153 := $i145;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} __const_udelay(214750);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} vslice_dummy_var_78 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $i157 := $load.i8($M.3, $p2);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i158 := $zext.i8.i32($i157);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i159 := $and.i32($i158, 64);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i160 := $ne.i32($i159, 0);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i160} true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    $i161 := $i153;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} __const_udelay(214750);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} vslice_dummy_var_79 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i165 := $load.i8($M.3, $p2);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i166 := $zext.i8.i32($i165);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i167 := $and.i32($i166, 64);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i168 := $ne.i32($i167, 0);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    $i169 := $i161;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} __const_udelay(214750);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} vslice_dummy_var_80 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $i173 := $load.i8($M.3, $p2);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $i174 := $zext.i8.i32($i173);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i175 := $and.i32($i174, 64);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i176 := $ne.i32($i175, 0);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    $i177 := $i169;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} __const_udelay(214750);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} vslice_dummy_var_81 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i181 := $load.i8($M.3, $p2);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i182 := $zext.i8.i32($i181);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i183 := $and.i32($i182, 64);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i184 := $ne.i32($i183, 0);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    assume {:branchcond $i184} true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    $i185 := $i177;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} __const_udelay(214750);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} vslice_dummy_var_82 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i189 := $load.i8($M.3, $p2);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i190 := $zext.i8.i32($i189);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i191 := $and.i32($i190, 64);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $i192 := $ne.i32($i191, 0);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    $i193 := $i185;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} __const_udelay(214750);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} vslice_dummy_var_83 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i197 := $load.i8($M.3, $p2);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $i198 := $zext.i8.i32($i197);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i199 := $and.i32($i198, 64);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i200 := $ne.i32($i199, 0);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    $i201 := $i193;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} __const_udelay(214750);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} vslice_dummy_var_84 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i205 := $load.i8($M.3, $p2);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i206 := $zext.i8.i32($i205);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i207 := $and.i32($i206, 64);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i208 := $ne.i32($i207, 0);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    assume {:branchcond $i208} true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    $i209 := $i201;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} __const_udelay(214750);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} vslice_dummy_var_85 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i213 := $load.i8($M.3, $p2);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i214 := $zext.i8.i32($i213);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i215 := $and.i32($i214, 64);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i216 := $ne.i32($i215, 0);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    $i217 := $i209;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} __const_udelay(214750);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} vslice_dummy_var_86 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i221 := $load.i8($M.3, $p2);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $i222 := $zext.i8.i32($i221);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $i223 := $and.i32($i222, 64);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $i224 := $ne.i32($i223, 0);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    $i225 := $i217;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} __const_udelay(214750);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} vslice_dummy_var_87 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i229 := $load.i8($M.3, $p2);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i230 := $zext.i8.i32($i229);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i231 := $and.i32($i230, 64);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i232 := $ne.i32($i231, 0);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i232} true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i232 == 1);
    assume {:verifier.code 0} true;
    $i233 := $i225;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} __const_udelay(214750);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} vslice_dummy_var_88 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i237 := $load.i8($M.3, $p2);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i238 := $zext.i8.i32($i237);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $i239 := $and.i32($i238, 64);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $i240 := $ne.i32($i239, 0);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    assume {:branchcond $i240} true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    $i241 := $i233;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} __const_udelay(214750);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} vslice_dummy_var_89 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $i245 := $load.i8($M.3, $p2);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i246 := $zext.i8.i32($i245);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i247 := $and.i32($i246, 64);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i248 := $ne.i32($i247, 0);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    assume {:branchcond $i248} true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i248 == 1);
    assume {:verifier.code 0} true;
    $i249 := $i241;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} __const_udelay(214750);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} vslice_dummy_var_90 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i253 := $load.i8($M.3, $p2);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i254 := $zext.i8.i32($i253);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i255 := $and.i32($i254, 64);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i256 := $ne.i32($i255, 0);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    assume {:branchcond $i256} true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i256 == 1);
    assume {:verifier.code 0} true;
    $i257 := $i249;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} __const_udelay(214750);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} vslice_dummy_var_91 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $i261 := $load.i8($M.3, $p2);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $i262 := $zext.i8.i32($i261);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i263 := $and.i32($i262, 64);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i264 := $ne.i32($i263, 0);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    assume {:branchcond $i264} true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i264 == 1);
    assume {:verifier.code 0} true;
    $i265 := $i257;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} __const_udelay(214750);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} vslice_dummy_var_92 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i269 := $load.i8($M.3, $p2);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i270 := $zext.i8.i32($i269);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $i271 := $and.i32($i270, 64);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i272 := $ne.i32($i271, 0);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    assume {:branchcond $i272} true;
    goto $bb210, $bb211;

  $bb211:
    assume !($i272 == 1);
    assume {:verifier.code 0} true;
    $i273 := $i265;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} __const_udelay(214750);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} vslice_dummy_var_93 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $i277 := $load.i8($M.3, $p2);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $i278 := $zext.i8.i32($i277);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i279 := $and.i32($i278, 64);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i280 := $ne.i32($i279, 0);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    assume {:branchcond $i280} true;
    goto $bb217, $bb218;

  $bb218:
    assume !($i280 == 1);
    assume {:verifier.code 0} true;
    $i281 := $i273;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} __const_udelay(214750);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} vslice_dummy_var_94 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $i285 := $load.i8($M.3, $p2);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $i286 := $zext.i8.i32($i285);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i287 := $and.i32($i286, 64);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $i288 := $ne.i32($i287, 0);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    assume {:branchcond $i288} true;
    goto $bb224, $bb225;

  $bb225:
    assume !($i288 == 1);
    assume {:verifier.code 0} true;
    $i289 := $i281;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} __const_udelay(214750);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} vslice_dummy_var_95 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $i293 := $load.i8($M.3, $p2);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i294 := $zext.i8.i32($i293);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i295 := $and.i32($i294, 64);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i296 := $ne.i32($i295, 0);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    assume {:branchcond $i296} true;
    goto $bb231, $bb232;

  $bb232:
    assume !($i296 == 1);
    assume {:verifier.code 0} true;
    $i297 := $i289;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} __const_udelay(214750);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} vslice_dummy_var_96 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $i301 := $load.i8($M.3, $p2);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $i302 := $zext.i8.i32($i301);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $i303 := $and.i32($i302, 64);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $i304 := $ne.i32($i303, 0);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    assume {:branchcond $i304} true;
    goto $bb238, $bb239;

  $bb239:
    assume !($i304 == 1);
    assume {:verifier.code 0} true;
    $i305 := $i297;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} __const_udelay(214750);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} vslice_dummy_var_97 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i309 := $load.i8($M.3, $p2);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i310 := $zext.i8.i32($i309);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $i311 := $and.i32($i310, 64);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i312 := $ne.i32($i311, 0);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    assume {:branchcond $i312} true;
    goto $bb245, $bb246;

  $bb246:
    assume !($i312 == 1);
    assume {:verifier.code 0} true;
    $i313 := $i305;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} __const_udelay(214750);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} vslice_dummy_var_98 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $i317 := $load.i8($M.3, $p2);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $i318 := $zext.i8.i32($i317);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $i319 := $and.i32($i318, 64);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $i320 := $ne.i32($i319, 0);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    assume {:branchcond $i320} true;
    goto $bb252, $bb253;

  $bb253:
    assume !($i320 == 1);
    assume {:verifier.code 0} true;
    $i321 := $i313;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} __const_udelay(214750);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} vslice_dummy_var_99 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $i325 := $load.i8($M.3, $p2);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $i326 := $zext.i8.i32($i325);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i327 := $and.i32($i326, 64);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i328 := $ne.i32($i327, 0);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    assume {:branchcond $i328} true;
    goto $bb259, $bb260;

  $bb260:
    assume !($i328 == 1);
    assume {:verifier.code 0} true;
    $i329 := $i321;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} __const_udelay(214750);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} vslice_dummy_var_100 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $i333 := $load.i8($M.3, $p2);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i334 := $zext.i8.i32($i333);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $i335 := $and.i32($i334, 64);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i336 := $ne.i32($i335, 0);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    assume {:branchcond $i336} true;
    goto $bb266, $bb267;

  $bb267:
    assume !($i336 == 1);
    assume {:verifier.code 0} true;
    $i337 := $i329;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} __const_udelay(214750);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} vslice_dummy_var_101 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i341 := $load.i8($M.3, $p2);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i342 := $zext.i8.i32($i341);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $i343 := $and.i32($i342, 64);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $i344 := $ne.i32($i343, 0);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    assume {:branchcond $i344} true;
    goto $bb273, $bb274;

  $bb274:
    assume !($i344 == 1);
    assume {:verifier.code 0} true;
    $i345 := $i337;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} __const_udelay(214750);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} vslice_dummy_var_102 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $i349 := $load.i8($M.3, $p2);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i350 := $zext.i8.i32($i349);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i351 := $and.i32($i350, 64);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i352 := $ne.i32($i351, 0);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    assume {:branchcond $i352} true;
    goto $bb280, $bb281;

  $bb281:
    assume !($i352 == 1);
    assume {:verifier.code 0} true;
    $i353 := $i345;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} __const_udelay(214750);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} vslice_dummy_var_103 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i357 := $load.i8($M.3, $p2);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $i358 := $zext.i8.i32($i357);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i359 := $and.i32($i358, 64);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i360 := $ne.i32($i359, 0);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i360} true;
    goto $bb287, $bb288;

  $bb288:
    assume !($i360 == 1);
    assume {:verifier.code 0} true;
    $i361 := $i353;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} __const_udelay(214750);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} vslice_dummy_var_104 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $i365 := $load.i8($M.3, $p2);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $i366 := $zext.i8.i32($i365);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i367 := $and.i32($i366, 64);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i368 := $ne.i32($i367, 0);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    assume {:branchcond $i368} true;
    goto $bb294, $bb295;

  $bb295:
    assume !($i368 == 1);
    assume {:verifier.code 0} true;
    $i369 := $i361;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} __const_udelay(214750);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} vslice_dummy_var_105 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i373 := $load.i8($M.3, $p2);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i374 := $zext.i8.i32($i373);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i375 := $and.i32($i374, 64);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i376 := $ne.i32($i375, 0);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    assume {:branchcond $i376} true;
    goto $bb301, $bb302;

  $bb302:
    assume !($i376 == 1);
    assume {:verifier.code 0} true;
    $i377 := $i369;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} __const_udelay(214750);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} vslice_dummy_var_106 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $i381 := $load.i8($M.3, $p2);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $i382 := $zext.i8.i32($i381);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i383 := $and.i32($i382, 64);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i384 := $ne.i32($i383, 0);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    assume {:branchcond $i384} true;
    goto $bb308, $bb309;

  $bb309:
    assume !($i384 == 1);
    assume {:verifier.code 0} true;
    $i385 := $i377;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} __const_udelay(214750);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} vslice_dummy_var_107 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i389 := $load.i8($M.3, $p2);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i390 := $zext.i8.i32($i389);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i391 := $and.i32($i390, 64);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i392 := $ne.i32($i391, 0);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    assume {:branchcond $i392} true;
    goto $bb315, $bb316;

  $bb316:
    assume !($i392 == 1);
    assume {:verifier.code 0} true;
    $i393 := $i385;
    goto $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} __const_udelay(214750);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} vslice_dummy_var_108 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i397 := $load.i8($M.3, $p2);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i398 := $zext.i8.i32($i397);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i399 := $and.i32($i398, 64);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i400 := $ne.i32($i399, 0);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    assume {:branchcond $i400} true;
    goto $bb322, $bb323;

  $bb323:
    assume !($i400 == 1);
    assume {:verifier.code 0} true;
    $i401 := $i393;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} __const_udelay(214750);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} vslice_dummy_var_109 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $i405 := $load.i8($M.3, $p2);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i406 := $zext.i8.i32($i405);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i407 := $and.i32($i406, 64);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i408 := $ne.i32($i407, 0);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    assume {:branchcond $i408} true;
    goto $bb329, $bb330;

  $bb330:
    assume !($i408 == 1);
    assume {:verifier.code 0} true;
    $i409 := $i401;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} __const_udelay(214750);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} vslice_dummy_var_110 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i413 := $load.i8($M.3, $p2);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $i414 := $zext.i8.i32($i413);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i415 := $and.i32($i414, 64);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i416 := $ne.i32($i415, 0);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    assume {:branchcond $i416} true;
    goto $bb336, $bb337;

  $bb337:
    assume !($i416 == 1);
    assume {:verifier.code 0} true;
    $i417 := $i409;
    goto $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} __const_udelay(214750);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} vslice_dummy_var_111 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i421 := $load.i8($M.3, $p2);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i422 := $zext.i8.i32($i421);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i423 := $and.i32($i422, 64);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i424 := $ne.i32($i423, 0);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    assume {:branchcond $i424} true;
    goto $bb343, $bb344;

  $bb344:
    assume !($i424 == 1);
    assume {:verifier.code 0} true;
    $i425 := $i417;
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} __const_udelay(214750);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} vslice_dummy_var_112 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i429 := $load.i8($M.3, $p2);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i430 := $zext.i8.i32($i429);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i431 := $and.i32($i430, 64);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $i432 := $ne.i32($i431, 0);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    assume {:branchcond $i432} true;
    goto $bb350, $bb351;

  $bb351:
    assume !($i432 == 1);
    assume {:verifier.code 0} true;
    $i433 := $i425;
    goto $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} __const_udelay(214750);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} vslice_dummy_var_113 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i437 := $load.i8($M.3, $p2);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i438 := $zext.i8.i32($i437);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i439 := $and.i32($i438, 64);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i440 := $ne.i32($i439, 0);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    assume {:branchcond $i440} true;
    goto $bb357, $bb358;

  $bb358:
    assume !($i440 == 1);
    assume {:verifier.code 0} true;
    $i441 := $i433;
    goto $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} __const_udelay(214750);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} vslice_dummy_var_114 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i445 := $load.i8($M.3, $p2);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $i446 := $zext.i8.i32($i445);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i447 := $and.i32($i446, 64);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $i448 := $ne.i32($i447, 0);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    assume {:branchcond $i448} true;
    goto $bb364, $bb365;

  $bb365:
    assume !($i448 == 1);
    assume {:verifier.code 0} true;
    $i449 := $i441;
    goto $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} __const_udelay(214750);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} vslice_dummy_var_115 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i453 := $load.i8($M.3, $p2);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $i454 := $zext.i8.i32($i453);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $i455 := $and.i32($i454, 64);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i456 := $ne.i32($i455, 0);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    assume {:branchcond $i456} true;
    goto $bb371, $bb372;

  $bb372:
    assume !($i456 == 1);
    assume {:verifier.code 0} true;
    $i457 := $i449;
    goto $bb373;

  $bb373:
    assume {:verifier.code 0} true;
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} __const_udelay(214750);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} vslice_dummy_var_116 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $i461 := $load.i8($M.3, $p2);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $i462 := $zext.i8.i32($i461);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i463 := $and.i32($i462, 64);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i464 := $ne.i32($i463, 0);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    assume {:branchcond $i464} true;
    goto $bb378, $bb379;

  $bb379:
    assume !($i464 == 1);
    assume {:verifier.code 0} true;
    $i465 := $i457;
    goto $bb380;

  $bb380:
    assume {:verifier.code 0} true;
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} __const_udelay(214750);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} vslice_dummy_var_117 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i469 := $load.i8($M.3, $p2);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i470 := $zext.i8.i32($i469);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i471 := $and.i32($i470, 64);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $i472 := $ne.i32($i471, 0);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    assume {:branchcond $i472} true;
    goto $bb385, $bb386;

  $bb386:
    assume !($i472 == 1);
    assume {:verifier.code 0} true;
    $i473 := $i465;
    goto $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} __const_udelay(214750);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} vslice_dummy_var_118 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i477 := $load.i8($M.3, $p2);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i478 := $zext.i8.i32($i477);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i479 := $and.i32($i478, 64);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i480 := $ne.i32($i479, 0);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    assume {:branchcond $i480} true;
    goto $bb392, $bb393;

  $bb393:
    assume !($i480 == 1);
    assume {:verifier.code 0} true;
    $i481 := $i473;
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} __const_udelay(214750);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} vslice_dummy_var_119 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i485 := $load.i8($M.3, $p2);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i486 := $zext.i8.i32($i485);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $i487 := $and.i32($i486, 64);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $i488 := $ne.i32($i487, 0);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    assume {:branchcond $i488} true;
    goto $bb399, $bb400;

  $bb400:
    assume !($i488 == 1);
    assume {:verifier.code 0} true;
    $i489 := $i481;
    goto $bb401;

  $bb401:
    assume {:verifier.code 0} true;
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} __const_udelay(214750);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} vslice_dummy_var_120 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $i493 := $load.i8($M.3, $p2);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $i494 := $zext.i8.i32($i493);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i495 := $and.i32($i494, 64);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $i496 := $ne.i32($i495, 0);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    assume {:branchcond $i496} true;
    goto $bb406, $bb407;

  $bb407:
    assume !($i496 == 1);
    assume {:verifier.code 0} true;
    $i497 := $i489;
    goto $bb408;

  $bb408:
    assume {:verifier.code 0} true;
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} __const_udelay(214750);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} vslice_dummy_var_121 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $i501 := $load.i8($M.3, $p2);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i502 := $zext.i8.i32($i501);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $i503 := $and.i32($i502, 64);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i504 := $ne.i32($i503, 0);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    assume {:branchcond $i504} true;
    goto $bb413, $bb414;

  $bb414:
    assume !($i504 == 1);
    assume {:verifier.code 0} true;
    $i505 := $i497;
    goto $bb415;

  $bb415:
    assume {:verifier.code 0} true;
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} __const_udelay(214750);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} vslice_dummy_var_122 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $i509 := $load.i8($M.3, $p2);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $i510 := $zext.i8.i32($i509);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $i511 := $and.i32($i510, 64);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $i512 := $ne.i32($i511, 0);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    assume {:branchcond $i512} true;
    goto $bb420, $bb421;

  $bb421:
    assume !($i512 == 1);
    assume {:verifier.code 0} true;
    $i513 := $i505;
    goto $bb422;

  $bb422:
    assume {:verifier.code 0} true;
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} __const_udelay(214750);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    goto $bb426;

  $bb426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} vslice_dummy_var_123 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i517 := $load.i8($M.3, $p2);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i518 := $zext.i8.i32($i517);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i519 := $and.i32($i518, 64);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $i520 := $ne.i32($i519, 0);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    assume {:branchcond $i520} true;
    goto $bb427, $bb428;

  $bb428:
    assume !($i520 == 1);
    assume {:verifier.code 0} true;
    $i521 := $i513;
    goto $bb429;

  $bb429:
    assume {:verifier.code 0} true;
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} __const_udelay(214750);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    goto $bb433;

  $bb433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} vslice_dummy_var_124 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i525 := $load.i8($M.3, $p2);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i526 := $zext.i8.i32($i525);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i527 := $and.i32($i526, 64);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $i528 := $ne.i32($i527, 0);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    assume {:branchcond $i528} true;
    goto $bb434, $bb435;

  $bb435:
    assume !($i528 == 1);
    assume {:verifier.code 0} true;
    $i529 := $i521;
    goto $bb436;

  $bb436:
    assume {:verifier.code 0} true;
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} __const_udelay(214750);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    goto $bb440;

  $bb440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} vslice_dummy_var_125 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $i533 := $load.i8($M.3, $p2);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i534 := $zext.i8.i32($i533);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i535 := $and.i32($i534, 64);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $i536 := $ne.i32($i535, 0);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    assume {:branchcond $i536} true;
    goto $bb441, $bb442;

  $bb442:
    assume !($i536 == 1);
    assume {:verifier.code 0} true;
    $i537 := $i529;
    goto $bb443;

  $bb443:
    assume {:verifier.code 0} true;
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} __const_udelay(214750);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} vslice_dummy_var_126 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i541 := $load.i8($M.3, $p2);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $i542 := $zext.i8.i32($i541);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $i543 := $and.i32($i542, 64);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i544 := $ne.i32($i543, 0);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    assume {:branchcond $i544} true;
    goto $bb448, $bb449;

  $bb449:
    assume !($i544 == 1);
    assume {:verifier.code 0} true;
    $i545 := $i537;
    goto $bb450;

  $bb450:
    assume {:verifier.code 0} true;
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} __const_udelay(214750);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} vslice_dummy_var_127 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i549 := $load.i8($M.3, $p2);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i550 := $zext.i8.i32($i549);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $i551 := $and.i32($i550, 64);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $i552 := $ne.i32($i551, 0);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    assume {:branchcond $i552} true;
    goto $bb455, $bb456;

  $bb456:
    assume !($i552 == 1);
    assume {:verifier.code 0} true;
    $i553 := $i545;
    goto $bb457;

  $bb457:
    assume {:verifier.code 0} true;
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} __const_udelay(214750);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    goto $bb461;

  $bb461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} vslice_dummy_var_128 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i557 := $load.i8($M.3, $p2);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $i558 := $zext.i8.i32($i557);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i559 := $and.i32($i558, 64);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i560 := $ne.i32($i559, 0);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    assume {:branchcond $i560} true;
    goto $bb462, $bb463;

  $bb463:
    assume !($i560 == 1);
    assume {:verifier.code 0} true;
    $i561 := $i553;
    goto $bb464;

  $bb464:
    assume {:verifier.code 0} true;
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} __const_udelay(214750);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    goto $bb468;

  $bb468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} vslice_dummy_var_129 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i565 := $load.i8($M.3, $p2);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i566 := $zext.i8.i32($i565);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i567 := $and.i32($i566, 64);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i568 := $ne.i32($i567, 0);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    assume {:branchcond $i568} true;
    goto $bb469, $bb470;

  $bb470:
    assume !($i568 == 1);
    assume {:verifier.code 0} true;
    $i569 := $i561;
    goto $bb471;

  $bb471:
    assume {:verifier.code 0} true;
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} __const_udelay(214750);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} vslice_dummy_var_130 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $i573 := $load.i8($M.3, $p2);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $i574 := $zext.i8.i32($i573);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i575 := $and.i32($i574, 64);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i576 := $ne.i32($i575, 0);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    assume {:branchcond $i576} true;
    goto $bb476, $bb477;

  $bb477:
    assume !($i576 == 1);
    assume {:verifier.code 0} true;
    $i577 := $i569;
    goto $bb478;

  $bb478:
    assume {:verifier.code 0} true;
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} __const_udelay(214750);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    goto $bb482;

  $bb482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} vslice_dummy_var_131 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i581 := $load.i8($M.3, $p2);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $i582 := $zext.i8.i32($i581);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $i583 := $and.i32($i582, 64);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $i584 := $ne.i32($i583, 0);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    assume {:branchcond $i584} true;
    goto $bb483, $bb484;

  $bb484:
    assume !($i584 == 1);
    assume {:verifier.code 0} true;
    $i585 := $i577;
    goto $bb485;

  $bb485:
    assume {:verifier.code 0} true;
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} __const_udelay(214750);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    goto $bb489;

  $bb489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} vslice_dummy_var_132 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i589 := $load.i8($M.3, $p2);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $i590 := $zext.i8.i32($i589);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i591 := $and.i32($i590, 64);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i592 := $ne.i32($i591, 0);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    assume {:branchcond $i592} true;
    goto $bb490, $bb491;

  $bb491:
    assume !($i592 == 1);
    assume {:verifier.code 0} true;
    $i593 := $i585;
    goto $bb492;

  $bb492:
    assume {:verifier.code 0} true;
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} __const_udelay(214750);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    goto $bb496;

  $bb496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} vslice_dummy_var_133 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i597 := $load.i8($M.3, $p2);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $i598 := $zext.i8.i32($i597);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $i599 := $and.i32($i598, 64);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i600 := $ne.i32($i599, 0);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    assume {:branchcond $i600} true;
    goto $bb497, $bb498;

  $bb498:
    assume !($i600 == 1);
    assume {:verifier.code 0} true;
    $i601 := $i593;
    goto $bb499;

  $bb499:
    assume {:verifier.code 0} true;
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} __const_udelay(214750);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} vslice_dummy_var_134 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i605 := $load.i8($M.3, $p2);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $i606 := $zext.i8.i32($i605);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i607 := $and.i32($i606, 64);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i608 := $ne.i32($i607, 0);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    assume {:branchcond $i608} true;
    goto $bb504, $bb505;

  $bb505:
    assume !($i608 == 1);
    assume {:verifier.code 0} true;
    $i609 := $i601;
    goto $bb506;

  $bb506:
    assume {:verifier.code 0} true;
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} __const_udelay(214750);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    goto $bb510;

  $bb510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} vslice_dummy_var_135 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $i613 := $load.i8($M.3, $p2);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $i614 := $zext.i8.i32($i613);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i615 := $and.i32($i614, 64);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i616 := $ne.i32($i615, 0);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    assume {:branchcond $i616} true;
    goto $bb511, $bb512;

  $bb512:
    assume !($i616 == 1);
    assume {:verifier.code 0} true;
    $i617 := $i609;
    goto $bb513;

  $bb513:
    assume {:verifier.code 0} true;
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} __const_udelay(214750);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    goto $bb517;

  $bb517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} vslice_dummy_var_136 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i621 := $load.i8($M.3, $p2);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i622 := $zext.i8.i32($i621);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i623 := $and.i32($i622, 64);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i624 := $ne.i32($i623, 0);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    assume {:branchcond $i624} true;
    goto $bb518, $bb519;

  $bb519:
    assume !($i624 == 1);
    assume {:verifier.code 0} true;
    $i625 := $i617;
    goto $bb520;

  $bb520:
    assume {:verifier.code 0} true;
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} __const_udelay(214750);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    goto $bb524;

  $bb524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} vslice_dummy_var_137 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i629 := $load.i8($M.3, $p2);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i630 := $zext.i8.i32($i629);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $i631 := $and.i32($i630, 64);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i632 := $ne.i32($i631, 0);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    assume {:branchcond $i632} true;
    goto $bb525, $bb526;

  $bb526:
    assume !($i632 == 1);
    assume {:verifier.code 0} true;
    $i633 := $i625;
    goto $bb527;

  $bb527:
    assume {:verifier.code 0} true;
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} __const_udelay(214750);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    goto $bb531;

  $bb531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} vslice_dummy_var_138 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i637 := $load.i8($M.3, $p2);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i638 := $zext.i8.i32($i637);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i639 := $and.i32($i638, 64);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i640 := $ne.i32($i639, 0);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    assume {:branchcond $i640} true;
    goto $bb532, $bb533;

  $bb533:
    assume !($i640 == 1);
    assume {:verifier.code 0} true;
    $i641 := $i633;
    goto $bb534;

  $bb534:
    assume {:verifier.code 0} true;
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} __const_udelay(214750);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    goto $bb538;

  $bb538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} vslice_dummy_var_139 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i645 := $load.i8($M.3, $p2);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i646 := $zext.i8.i32($i645);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i647 := $and.i32($i646, 64);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i648 := $ne.i32($i647, 0);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    assume {:branchcond $i648} true;
    goto $bb539, $bb540;

  $bb540:
    assume !($i648 == 1);
    assume {:verifier.code 0} true;
    $i649 := $i641;
    goto $bb541;

  $bb541:
    assume {:verifier.code 0} true;
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} __const_udelay(214750);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    goto $bb545;

  $bb545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} vslice_dummy_var_140 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i653 := $load.i8($M.3, $p2);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i654 := $zext.i8.i32($i653);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i655 := $and.i32($i654, 64);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i656 := $ne.i32($i655, 0);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    assume {:branchcond $i656} true;
    goto $bb546, $bb547;

  $bb547:
    assume !($i656 == 1);
    assume {:verifier.code 0} true;
    $i657 := $i649;
    goto $bb548;

  $bb548:
    assume {:verifier.code 0} true;
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} __const_udelay(214750);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    goto $bb552;

  $bb552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} vslice_dummy_var_141 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i661 := $load.i8($M.3, $p2);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i662 := $zext.i8.i32($i661);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i663 := $and.i32($i662, 64);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $i664 := $ne.i32($i663, 0);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    assume {:branchcond $i664} true;
    goto $bb553, $bb554;

  $bb554:
    assume !($i664 == 1);
    assume {:verifier.code 0} true;
    $i665 := $i657;
    goto $bb555;

  $bb555:
    assume {:verifier.code 0} true;
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} __const_udelay(214750);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    goto $bb559;

  $bb559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} vslice_dummy_var_142 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i669 := $load.i8($M.3, $p2);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $i670 := $zext.i8.i32($i669);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $i671 := $and.i32($i670, 64);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i672 := $ne.i32($i671, 0);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    assume {:branchcond $i672} true;
    goto $bb560, $bb561;

  $bb561:
    assume !($i672 == 1);
    assume {:verifier.code 0} true;
    $i673 := $i665;
    goto $bb562;

  $bb562:
    assume {:verifier.code 0} true;
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} __const_udelay(214750);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    goto $bb566;

  $bb566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} vslice_dummy_var_143 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i677 := $load.i8($M.3, $p2);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i678 := $zext.i8.i32($i677);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i679 := $and.i32($i678, 64);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $i680 := $ne.i32($i679, 0);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i680} true;
    goto $bb567, $bb568;

  $bb568:
    assume !($i680 == 1);
    assume {:verifier.code 0} true;
    $i681 := $i673;
    goto $bb569;

  $bb569:
    assume {:verifier.code 0} true;
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} __const_udelay(214750);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    goto $bb573;

  $bb573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} vslice_dummy_var_144 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $i685 := $load.i8($M.3, $p2);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i686 := $zext.i8.i32($i685);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i687 := $and.i32($i686, 64);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i688 := $ne.i32($i687, 0);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    assume {:branchcond $i688} true;
    goto $bb574, $bb575;

  $bb575:
    assume !($i688 == 1);
    assume {:verifier.code 0} true;
    $i689 := $i681;
    goto $bb576;

  $bb576:
    assume {:verifier.code 0} true;
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} __const_udelay(214750);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    goto $bb580;

  $bb580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} vslice_dummy_var_145 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i693 := $load.i8($M.3, $p2);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i694 := $zext.i8.i32($i693);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i695 := $and.i32($i694, 64);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i696 := $ne.i32($i695, 0);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    assume {:branchcond $i696} true;
    goto $bb581, $bb582;

  $bb582:
    assume !($i696 == 1);
    assume {:verifier.code 0} true;
    $i697 := $i689;
    goto $bb583;

  $bb583:
    assume {:verifier.code 0} true;
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} __const_udelay(214750);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    goto $bb587;

  $bb587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} vslice_dummy_var_146 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i701 := $load.i8($M.3, $p2);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $i702 := $zext.i8.i32($i701);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $i703 := $and.i32($i702, 64);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i704 := $ne.i32($i703, 0);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    assume {:branchcond $i704} true;
    goto $bb588, $bb589;

  $bb589:
    assume !($i704 == 1);
    assume {:verifier.code 0} true;
    $i705 := $i697;
    goto $bb590;

  $bb590:
    assume {:verifier.code 0} true;
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} __const_udelay(214750);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    goto $bb594;

  $bb594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} vslice_dummy_var_147 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i709 := $load.i8($M.3, $p2);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i710 := $zext.i8.i32($i709);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $i711 := $and.i32($i710, 64);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i712 := $ne.i32($i711, 0);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    assume {:branchcond $i712} true;
    goto $bb595, $bb596;

  $bb596:
    assume !($i712 == 1);
    assume {:verifier.code 0} true;
    $i713 := $i705;
    goto $bb597;

  $bb597:
    assume {:verifier.code 0} true;
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} __const_udelay(214750);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    goto $bb601;

  $bb601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} vslice_dummy_var_148 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i717 := $load.i8($M.3, $p2);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i718 := $zext.i8.i32($i717);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i719 := $and.i32($i718, 64);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i720 := $ne.i32($i719, 0);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    assume {:branchcond $i720} true;
    goto $bb602, $bb603;

  $bb603:
    assume !($i720 == 1);
    assume {:verifier.code 0} true;
    $i721 := $i713;
    goto $bb604;

  $bb604:
    assume {:verifier.code 0} true;
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} __const_udelay(214750);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    goto $bb608;

  $bb608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} vslice_dummy_var_149 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $i725 := $load.i8($M.3, $p2);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $i726 := $zext.i8.i32($i725);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i727 := $and.i32($i726, 64);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $i728 := $ne.i32($i727, 0);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    assume {:branchcond $i728} true;
    goto $bb609, $bb610;

  $bb610:
    assume !($i728 == 1);
    assume {:verifier.code 0} true;
    $i729 := $i721;
    goto $bb611;

  $bb611:
    assume {:verifier.code 0} true;
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} __const_udelay(214750);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    goto $bb615;

  $bb615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} vslice_dummy_var_150 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i733 := $load.i8($M.3, $p2);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i734 := $zext.i8.i32($i733);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $i735 := $and.i32($i734, 64);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i736 := $ne.i32($i735, 0);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    assume {:branchcond $i736} true;
    goto $bb616, $bb617;

  $bb617:
    assume !($i736 == 1);
    assume {:verifier.code 0} true;
    $i737 := $i729;
    goto $bb618;

  $bb618:
    assume {:verifier.code 0} true;
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} __const_udelay(214750);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    goto $bb622;

  $bb622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} vslice_dummy_var_151 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i741 := $load.i8($M.3, $p2);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $i742 := $zext.i8.i32($i741);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $i743 := $and.i32($i742, 64);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $i744 := $ne.i32($i743, 0);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    assume {:branchcond $i744} true;
    goto $bb623, $bb624;

  $bb624:
    assume !($i744 == 1);
    assume {:verifier.code 0} true;
    $i745 := $i737;
    goto $bb625;

  $bb625:
    assume {:verifier.code 0} true;
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} __const_udelay(214750);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    goto $bb629;

  $bb629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} vslice_dummy_var_152 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i749 := $load.i8($M.3, $p2);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i750 := $zext.i8.i32($i749);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i751 := $and.i32($i750, 64);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i752 := $ne.i32($i751, 0);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    assume {:branchcond $i752} true;
    goto $bb630, $bb631;

  $bb631:
    assume !($i752 == 1);
    assume {:verifier.code 0} true;
    $i753 := $i745;
    goto $bb632;

  $bb632:
    assume {:verifier.code 0} true;
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} __const_udelay(214750);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    goto $bb636;

  $bb636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} vslice_dummy_var_153 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i757 := $load.i8($M.3, $p2);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i758 := $zext.i8.i32($i757);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $i759 := $and.i32($i758, 64);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $i760 := $ne.i32($i759, 0);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    assume {:branchcond $i760} true;
    goto $bb637, $bb638;

  $bb638:
    assume !($i760 == 1);
    assume {:verifier.code 0} true;
    $i761 := $i753;
    goto $bb639;

  $bb639:
    assume {:verifier.code 0} true;
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} __const_udelay(214750);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    goto $bb643;

  $bb643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} vslice_dummy_var_154 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i765 := $load.i8($M.3, $p2);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i766 := $zext.i8.i32($i765);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i767 := $and.i32($i766, 64);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $i768 := $ne.i32($i767, 0);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    assume {:branchcond $i768} true;
    goto $bb644, $bb645;

  $bb645:
    assume !($i768 == 1);
    assume {:verifier.code 0} true;
    $i769 := $i761;
    goto $bb646;

  $bb646:
    assume {:verifier.code 0} true;
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} __const_udelay(214750);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    goto $bb650;

  $bb650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} vslice_dummy_var_155 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i773 := $load.i8($M.3, $p2);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $i774 := $zext.i8.i32($i773);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $i775 := $and.i32($i774, 64);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i776 := $ne.i32($i775, 0);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    assume {:branchcond $i776} true;
    goto $bb651, $bb652;

  $bb652:
    assume !($i776 == 1);
    assume {:verifier.code 0} true;
    $i777 := $i769;
    goto $bb653;

  $bb653:
    assume {:verifier.code 0} true;
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} __const_udelay(214750);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    goto $bb657;

  $bb657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} vslice_dummy_var_156 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i781 := $load.i8($M.3, $p2);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $i782 := $zext.i8.i32($i781);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $i783 := $and.i32($i782, 64);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i784 := $ne.i32($i783, 0);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    assume {:branchcond $i784} true;
    goto $bb658, $bb659;

  $bb659:
    assume !($i784 == 1);
    assume {:verifier.code 0} true;
    $i785 := $i777;
    goto $bb660;

  $bb660:
    assume {:verifier.code 0} true;
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} __const_udelay(214750);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    goto $bb664;

  $bb664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} vslice_dummy_var_157 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $i789 := $load.i8($M.3, $p2);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i790 := $zext.i8.i32($i789);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i791 := $and.i32($i790, 64);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $i792 := $ne.i32($i791, 0);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    assume {:branchcond $i792} true;
    goto $bb665, $bb666;

  $bb666:
    assume !($i792 == 1);
    assume {:verifier.code 0} true;
    $i793 := $i785;
    goto $bb667;

  $bb667:
    assume {:verifier.code 0} true;
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} __const_udelay(214750);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    goto $bb671;

  $bb671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} vslice_dummy_var_158 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $i797 := $load.i8($M.3, $p2);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i798 := $zext.i8.i32($i797);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $i799 := $and.i32($i798, 64);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i800 := $ne.i32($i799, 0);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    assume {:branchcond $i800} true;
    goto $bb672, $bb673;

  $bb673:
    assume !($i800 == 1);
    assume {:verifier.code 0} true;
    $i801 := $i793;
    goto $bb674;

  $bb674:
    assume {:verifier.code 0} true;
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} __const_udelay(214750);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    goto $bb678;

  $bb678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} vslice_dummy_var_159 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i805 := $load.i8($M.3, $p2);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i806 := $zext.i8.i32($i805);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i807 := $and.i32($i806, 64);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $i808 := $ne.i32($i807, 0);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    assume {:branchcond $i808} true;
    goto $bb679, $bb680;

  $bb680:
    assume !($i808 == 1);
    assume {:verifier.code 0} true;
    $i809 := $i801;
    goto $bb681;

  $bb681:
    assume {:verifier.code 0} true;
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} __const_udelay(214750);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    goto $bb685;

  $bb685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} vslice_dummy_var_160 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $i813 := $load.i8($M.3, $p2);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $i814 := $zext.i8.i32($i813);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i815 := $and.i32($i814, 64);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i816 := $ne.i32($i815, 0);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    assume {:branchcond $i816} true;
    goto $bb686, $bb687;

  $bb687:
    assume !($i816 == 1);
    assume {:verifier.code 0} true;
    $i817 := $i809;
    goto $bb688;

  $bb688:
    assume {:verifier.code 0} true;
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} __const_udelay(214750);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    goto $bb692;

  $bb692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} vslice_dummy_var_161 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i821 := $load.i8($M.3, $p2);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $i822 := $zext.i8.i32($i821);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i823 := $and.i32($i822, 64);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $i824 := $ne.i32($i823, 0);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    assume {:branchcond $i824} true;
    goto $bb693, $bb694;

  $bb694:
    assume !($i824 == 1);
    assume {:verifier.code 0} true;
    $i825 := $i817;
    goto $bb695;

  $bb695:
    assume {:verifier.code 0} true;
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} __const_udelay(214750);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    goto $bb699;

  $bb699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} vslice_dummy_var_162 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $i829 := $load.i8($M.3, $p2);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $i830 := $zext.i8.i32($i829);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $i831 := $and.i32($i830, 64);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $i832 := $ne.i32($i831, 0);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    assume {:branchcond $i832} true;
    goto $bb700, $bb701;

  $bb701:
    assume !($i832 == 1);
    assume {:verifier.code 0} true;
    $i833 := $i825;
    goto $bb702;

  $bb702:
    assume {:verifier.code 0} true;
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} __const_udelay(214750);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    goto $bb706;

  $bb706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} vslice_dummy_var_163 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i837 := $load.i8($M.3, $p2);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $i838 := $zext.i8.i32($i837);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $i839 := $and.i32($i838, 64);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $i840 := $ne.i32($i839, 0);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    assume {:branchcond $i840} true;
    goto $bb707, $bb708;

  $bb708:
    assume !($i840 == 1);
    assume {:verifier.code 0} true;
    $i841 := $i833;
    goto $bb709;

  $bb709:
    assume {:verifier.code 0} true;
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} __const_udelay(214750);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    goto $bb713;

  $bb713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} vslice_dummy_var_164 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $i845 := $load.i8($M.3, $p2);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $i846 := $zext.i8.i32($i845);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i847 := $and.i32($i846, 64);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i848 := $ne.i32($i847, 0);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    assume {:branchcond $i848} true;
    goto $bb714, $bb715;

  $bb715:
    assume !($i848 == 1);
    assume {:verifier.code 0} true;
    $i849 := $i841;
    goto $bb716;

  $bb716:
    assume {:verifier.code 0} true;
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} __const_udelay(214750);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    goto $bb720;

  $bb720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} vslice_dummy_var_165 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $i853 := $load.i8($M.3, $p2);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i854 := $zext.i8.i32($i853);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $i855 := $and.i32($i854, 64);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i856 := $ne.i32($i855, 0);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    assume {:branchcond $i856} true;
    goto $bb721, $bb722;

  $bb722:
    assume !($i856 == 1);
    assume {:verifier.code 0} true;
    $i857 := $i849;
    goto $bb723;

  $bb723:
    assume {:verifier.code 0} true;
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} __const_udelay(214750);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    goto $bb727;

  $bb727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} vslice_dummy_var_166 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $i861 := $load.i8($M.3, $p2);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $i862 := $zext.i8.i32($i861);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $i863 := $and.i32($i862, 64);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $i864 := $ne.i32($i863, 0);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    assume {:branchcond $i864} true;
    goto $bb728, $bb729;

  $bb729:
    assume !($i864 == 1);
    assume {:verifier.code 0} true;
    $i865 := $i857;
    goto $bb730;

  $bb730:
    assume {:verifier.code 0} true;
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} __const_udelay(214750);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    goto $bb734;

  $bb734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} vslice_dummy_var_167 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $i869 := $load.i8($M.3, $p2);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $i870 := $zext.i8.i32($i869);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $i871 := $and.i32($i870, 64);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $i872 := $ne.i32($i871, 0);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    assume {:branchcond $i872} true;
    goto $bb735, $bb736;

  $bb736:
    assume !($i872 == 1);
    assume {:verifier.code 0} true;
    $i873 := $i865;
    goto $bb737;

  $bb737:
    assume {:verifier.code 0} true;
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} __const_udelay(214750);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    goto $bb741;

  $bb741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} vslice_dummy_var_168 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i877 := $load.i8($M.3, $p2);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i878 := $zext.i8.i32($i877);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $i879 := $and.i32($i878, 64);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i880 := $ne.i32($i879, 0);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    assume {:branchcond $i880} true;
    goto $bb742, $bb743;

  $bb743:
    assume !($i880 == 1);
    assume {:verifier.code 0} true;
    $i881 := $i873;
    goto $bb744;

  $bb744:
    assume {:verifier.code 0} true;
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} __const_udelay(214750);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    goto $bb748;

  $bb748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} vslice_dummy_var_169 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $i885 := $load.i8($M.3, $p2);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $i886 := $zext.i8.i32($i885);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i887 := $and.i32($i886, 64);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i888 := $ne.i32($i887, 0);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    assume {:branchcond $i888} true;
    goto $bb749, $bb750;

  $bb750:
    assume !($i888 == 1);
    assume {:verifier.code 0} true;
    $i889 := $i881;
    goto $bb751;

  $bb751:
    assume {:verifier.code 0} true;
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} __const_udelay(214750);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    goto $bb755;

  $bb755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} vslice_dummy_var_170 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $i893 := $load.i8($M.3, $p2);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $i894 := $zext.i8.i32($i893);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $i895 := $and.i32($i894, 64);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i896 := $ne.i32($i895, 0);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    assume {:branchcond $i896} true;
    goto $bb756, $bb757;

  $bb757:
    assume !($i896 == 1);
    assume {:verifier.code 0} true;
    $i897 := $i889;
    goto $bb758;

  $bb758:
    assume {:verifier.code 0} true;
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} __const_udelay(214750);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    goto $bb762;

  $bb762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} vslice_dummy_var_171 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i901 := $load.i8($M.3, $p2);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $i902 := $zext.i8.i32($i901);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $i903 := $and.i32($i902, 64);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $i904 := $ne.i32($i903, 0);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    assume {:branchcond $i904} true;
    goto $bb763, $bb764;

  $bb764:
    assume !($i904 == 1);
    assume {:verifier.code 0} true;
    $i905 := $i897;
    goto $bb765;

  $bb765:
    assume {:verifier.code 0} true;
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} __const_udelay(214750);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    goto $bb769;

  $bb769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} vslice_dummy_var_172 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $i909 := $load.i8($M.3, $p2);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i910 := $zext.i8.i32($i909);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i911 := $and.i32($i910, 64);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $i912 := $ne.i32($i911, 0);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    assume {:branchcond $i912} true;
    goto $bb770, $bb771;

  $bb771:
    assume !($i912 == 1);
    assume {:verifier.code 0} true;
    $i913 := $i905;
    goto $bb772;

  $bb772:
    assume {:verifier.code 0} true;
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} __const_udelay(214750);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    goto $bb776;

  $bb776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} vslice_dummy_var_173 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i917 := $load.i8($M.3, $p2);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $i918 := $zext.i8.i32($i917);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i919 := $and.i32($i918, 64);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i920 := $ne.i32($i919, 0);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    assume {:branchcond $i920} true;
    goto $bb777, $bb778;

  $bb778:
    assume !($i920 == 1);
    assume {:verifier.code 0} true;
    $i921 := $i913;
    goto $bb779;

  $bb779:
    assume {:verifier.code 0} true;
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} __const_udelay(214750);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    goto $bb783;

  $bb783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} vslice_dummy_var_174 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i925 := $load.i8($M.3, $p2);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i926 := $zext.i8.i32($i925);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i927 := $and.i32($i926, 64);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $i928 := $ne.i32($i927, 0);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    assume {:branchcond $i928} true;
    goto $bb784, $bb785;

  $bb785:
    assume !($i928 == 1);
    assume {:verifier.code 0} true;
    $i929 := $i921;
    goto $bb786;

  $bb786:
    assume {:verifier.code 0} true;
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} __const_udelay(214750);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    goto $bb790;

  $bb790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} vslice_dummy_var_175 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i933 := $load.i8($M.3, $p2);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i934 := $zext.i8.i32($i933);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i935 := $and.i32($i934, 64);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i936 := $ne.i32($i935, 0);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    assume {:branchcond $i936} true;
    goto $bb791, $bb792;

  $bb792:
    assume !($i936 == 1);
    assume {:verifier.code 0} true;
    $i937 := $i929;
    goto $bb793;

  $bb793:
    assume {:verifier.code 0} true;
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} __const_udelay(214750);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    goto $bb797;

  $bb797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} vslice_dummy_var_176 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $i941 := $load.i8($M.3, $p2);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $i942 := $zext.i8.i32($i941);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i943 := $and.i32($i942, 64);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $i944 := $ne.i32($i943, 0);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    assume {:branchcond $i944} true;
    goto $bb798, $bb799;

  $bb799:
    assume !($i944 == 1);
    assume {:verifier.code 0} true;
    $i945 := $i937;
    goto $bb800;

  $bb800:
    assume {:verifier.code 0} true;
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} __const_udelay(214750);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    goto $bb804;

  $bb804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} vslice_dummy_var_177 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i949 := $load.i8($M.3, $p2);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $i950 := $zext.i8.i32($i949);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $i951 := $and.i32($i950, 64);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i952 := $ne.i32($i951, 0);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    assume {:branchcond $i952} true;
    goto $bb805, $bb806;

  $bb806:
    assume !($i952 == 1);
    assume {:verifier.code 0} true;
    $i953 := $i945;
    goto $bb807;

  $bb807:
    assume {:verifier.code 0} true;
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} __const_udelay(214750);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    goto $bb811;

  $bb811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} vslice_dummy_var_178 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $i957 := $load.i8($M.3, $p2);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $i958 := $zext.i8.i32($i957);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i959 := $and.i32($i958, 64);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $i960 := $ne.i32($i959, 0);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    assume {:branchcond $i960} true;
    goto $bb812, $bb813;

  $bb813:
    assume !($i960 == 1);
    assume {:verifier.code 0} true;
    $i961 := $i953;
    goto $bb814;

  $bb814:
    assume {:verifier.code 0} true;
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} __const_udelay(214750);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    goto $bb818;

  $bb818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} vslice_dummy_var_179 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $i965 := $load.i8($M.3, $p2);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $i966 := $zext.i8.i32($i965);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i967 := $and.i32($i966, 64);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i968 := $ne.i32($i967, 0);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    assume {:branchcond $i968} true;
    goto $bb819, $bb820;

  $bb820:
    assume !($i968 == 1);
    assume {:verifier.code 0} true;
    $i969 := $i961;
    goto $bb821;

  $bb821:
    assume {:verifier.code 0} true;
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} __const_udelay(214750);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    goto $bb825;

  $bb825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} vslice_dummy_var_180 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i973 := $load.i8($M.3, $p2);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $i974 := $zext.i8.i32($i973);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i975 := $and.i32($i974, 64);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i976 := $ne.i32($i975, 0);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    assume {:branchcond $i976} true;
    goto $bb826, $bb827;

  $bb827:
    assume !($i976 == 1);
    assume {:verifier.code 0} true;
    $i977 := $i969;
    goto $bb828;

  $bb828:
    assume {:verifier.code 0} true;
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} __const_udelay(214750);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    goto $bb832;

  $bb832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} vslice_dummy_var_181 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $i981 := $load.i8($M.3, $p2);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $i982 := $zext.i8.i32($i981);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i983 := $and.i32($i982, 64);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i984 := $ne.i32($i983, 0);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    assume {:branchcond $i984} true;
    goto $bb833, $bb834;

  $bb834:
    assume !($i984 == 1);
    assume {:verifier.code 0} true;
    $i985 := $i977;
    goto $bb835;

  $bb835:
    assume {:verifier.code 0} true;
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} __const_udelay(214750);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    goto $bb839;

  $bb839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} vslice_dummy_var_182 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $i989 := $load.i8($M.3, $p2);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i990 := $zext.i8.i32($i989);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i991 := $and.i32($i990, 64);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i992 := $ne.i32($i991, 0);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    assume {:branchcond $i992} true;
    goto $bb840, $bb841;

  $bb841:
    assume !($i992 == 1);
    assume {:verifier.code 0} true;
    $i993 := $i985;
    goto $bb842;

  $bb842:
    assume {:verifier.code 0} true;
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} __const_udelay(214750);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    goto $bb846;

  $bb846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} vslice_dummy_var_183 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $i997 := $load.i8($M.3, $p2);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $i998 := $zext.i8.i32($i997);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $i999 := $and.i32($i998, 64);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i1000 := $ne.i32($i999, 0);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1000} true;
    goto $bb847, $bb848;

  $bb848:
    assume !($i1000 == 1);
    assume {:verifier.code 0} true;
    $i1001 := $i993;
    goto $bb849;

  $bb849:
    assume {:verifier.code 0} true;
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} __const_udelay(214750);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    goto $bb853;

  $bb853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} vslice_dummy_var_184 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i1005 := $load.i8($M.3, $p2);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $i1006 := $zext.i8.i32($i1005);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $i1007 := $and.i32($i1006, 64);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $i1008 := $ne.i32($i1007, 0);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1008} true;
    goto $bb854, $bb855;

  $bb855:
    assume !($i1008 == 1);
    assume {:verifier.code 0} true;
    $i1009 := $i1001;
    goto $bb856;

  $bb856:
    assume {:verifier.code 0} true;
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} __const_udelay(214750);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    goto $bb860;

  $bb860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} vslice_dummy_var_185 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i1013 := $load.i8($M.3, $p2);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i1014 := $zext.i8.i32($i1013);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i1015 := $and.i32($i1014, 64);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i1016 := $ne.i32($i1015, 0);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1016} true;
    goto $bb861, $bb862;

  $bb862:
    assume !($i1016 == 1);
    assume {:verifier.code 0} true;
    $i1017 := $i1009;
    goto $bb863;

  $bb863:
    assume {:verifier.code 0} true;
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} __const_udelay(214750);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    goto $bb867;

  $bb867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} vslice_dummy_var_186 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $i1021 := $load.i8($M.3, $p2);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i1022 := $zext.i8.i32($i1021);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $i1023 := $and.i32($i1022, 64);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $i1024 := $ne.i32($i1023, 0);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1024} true;
    goto $bb868, $bb869;

  $bb869:
    assume !($i1024 == 1);
    assume {:verifier.code 0} true;
    $i1025 := $i1017;
    goto $bb870;

  $bb870:
    assume {:verifier.code 0} true;
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} __const_udelay(214750);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    goto $bb874;

  $bb874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} vslice_dummy_var_187 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $i1029 := $load.i8($M.3, $p2);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $i1030 := $zext.i8.i32($i1029);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i1031 := $and.i32($i1030, 64);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $i1032 := $ne.i32($i1031, 0);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1032} true;
    goto $bb875, $bb876;

  $bb876:
    assume !($i1032 == 1);
    assume {:verifier.code 0} true;
    $i1033 := $i1025;
    goto $bb877;

  $bb877:
    assume {:verifier.code 0} true;
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} __const_udelay(214750);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} vslice_dummy_var_188 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i1037 := $load.i8($M.3, $p2);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $i1038 := $zext.i8.i32($i1037);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $i1039 := $and.i32($i1038, 64);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $i1040 := $ne.i32($i1039, 0);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1040} true;
    goto $bb882, $bb883;

  $bb883:
    assume !($i1040 == 1);
    assume {:verifier.code 0} true;
    $i1041 := $i1033;
    goto $bb884;

  $bb884:
    assume {:verifier.code 0} true;
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} __const_udelay(214750);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    goto $bb888;

  $bb888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} vslice_dummy_var_189 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $i1045 := $load.i8($M.3, $p2);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i1046 := $zext.i8.i32($i1045);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i1047 := $and.i32($i1046, 64);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $i1048 := $ne.i32($i1047, 0);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1048} true;
    goto $bb889, $bb890;

  $bb890:
    assume !($i1048 == 1);
    assume {:verifier.code 0} true;
    $i1049 := $i1041;
    goto $bb891;

  $bb891:
    assume {:verifier.code 0} true;
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} __const_udelay(214750);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    goto $bb895;

  $bb895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} vslice_dummy_var_190 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i1053 := $load.i8($M.3, $p2);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i1054 := $zext.i8.i32($i1053);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i1055 := $and.i32($i1054, 64);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $i1056 := $ne.i32($i1055, 0);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1056} true;
    goto $bb896, $bb897;

  $bb897:
    assume !($i1056 == 1);
    assume {:verifier.code 0} true;
    $i1057 := $i1049;
    goto $bb898;

  $bb898:
    assume {:verifier.code 0} true;
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} __const_udelay(214750);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    goto $bb902;

  $bb902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} vslice_dummy_var_191 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i1061 := $load.i8($M.3, $p2);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i1062 := $zext.i8.i32($i1061);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i1063 := $and.i32($i1062, 64);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $i1064 := $ne.i32($i1063, 0);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1064} true;
    goto $bb903, $bb904;

  $bb904:
    assume !($i1064 == 1);
    assume {:verifier.code 0} true;
    $i1065 := $i1057;
    goto $bb905;

  $bb905:
    assume {:verifier.code 0} true;
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} __const_udelay(214750);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    goto $bb909;

  $bb909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} vslice_dummy_var_192 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $i1069 := $load.i8($M.3, $p2);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i1070 := $zext.i8.i32($i1069);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $i1071 := $and.i32($i1070, 64);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $i1072 := $ne.i32($i1071, 0);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1072} true;
    goto $bb910, $bb911;

  $bb911:
    assume !($i1072 == 1);
    assume {:verifier.code 0} true;
    $i1073 := $i1065;
    goto $bb912;

  $bb912:
    assume {:verifier.code 0} true;
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} __const_udelay(214750);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    goto $bb916;

  $bb916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} vslice_dummy_var_193 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i1077 := $load.i8($M.3, $p2);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i1078 := $zext.i8.i32($i1077);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i1079 := $and.i32($i1078, 64);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i1080 := $ne.i32($i1079, 0);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1080} true;
    goto $bb917, $bb918;

  $bb918:
    assume !($i1080 == 1);
    assume {:verifier.code 0} true;
    $i1081 := $i1073;
    goto $bb919;

  $bb919:
    assume {:verifier.code 0} true;
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} __const_udelay(214750);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    goto $bb923;

  $bb923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} vslice_dummy_var_194 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i1085 := $load.i8($M.3, $p2);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i1086 := $zext.i8.i32($i1085);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i1087 := $and.i32($i1086, 64);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i1088 := $ne.i32($i1087, 0);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1088} true;
    goto $bb924, $bb925;

  $bb925:
    assume !($i1088 == 1);
    assume {:verifier.code 0} true;
    $i1089 := $i1081;
    goto $bb926;

  $bb926:
    assume {:verifier.code 0} true;
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} __const_udelay(214750);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    goto $bb930;

  $bb930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} vslice_dummy_var_195 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $i1093 := $load.i8($M.3, $p2);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $i1094 := $zext.i8.i32($i1093);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i1095 := $and.i32($i1094, 64);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i1096 := $ne.i32($i1095, 0);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1096} true;
    goto $bb931, $bb932;

  $bb932:
    assume !($i1096 == 1);
    assume {:verifier.code 0} true;
    $i1097 := $i1089;
    goto $bb933;

  $bb933:
    assume {:verifier.code 0} true;
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} __const_udelay(214750);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    goto $bb937;

  $bb937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} vslice_dummy_var_196 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $i1101 := $load.i8($M.3, $p2);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i1102 := $zext.i8.i32($i1101);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $i1103 := $and.i32($i1102, 64);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $i1104 := $ne.i32($i1103, 0);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1104} true;
    goto $bb938, $bb939;

  $bb939:
    assume !($i1104 == 1);
    assume {:verifier.code 0} true;
    $i1105 := $i1097;
    goto $bb940;

  $bb940:
    assume {:verifier.code 0} true;
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} __const_udelay(214750);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    goto $bb944;

  $bb944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} vslice_dummy_var_197 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i1109 := $load.i8($M.3, $p2);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i1110 := $zext.i8.i32($i1109);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i1111 := $and.i32($i1110, 64);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i1112 := $ne.i32($i1111, 0);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1112} true;
    goto $bb945, $bb946;

  $bb946:
    assume !($i1112 == 1);
    assume {:verifier.code 0} true;
    $i1113 := $i1105;
    goto $bb947;

  $bb947:
    assume {:verifier.code 0} true;
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} __const_udelay(214750);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    goto $bb951;

  $bb951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} vslice_dummy_var_198 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $i1117 := $load.i8($M.3, $p2);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $i1118 := $zext.i8.i32($i1117);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i1119 := $and.i32($i1118, 64);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $i1120 := $ne.i32($i1119, 0);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1120} true;
    goto $bb952, $bb953;

  $bb953:
    assume !($i1120 == 1);
    assume {:verifier.code 0} true;
    $i1121 := $i1113;
    goto $bb954;

  $bb954:
    assume {:verifier.code 0} true;
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} __const_udelay(214750);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    goto $bb958;

  $bb958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} vslice_dummy_var_199 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i1125 := $load.i8($M.3, $p2);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i1126 := $zext.i8.i32($i1125);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $i1127 := $and.i32($i1126, 64);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i1128 := $ne.i32($i1127, 0);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1128} true;
    goto $bb959, $bb960;

  $bb960:
    assume !($i1128 == 1);
    assume {:verifier.code 0} true;
    $i1129 := $i1121;
    goto $bb961;

  $bb961:
    assume {:verifier.code 0} true;
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} __const_udelay(214750);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    goto $bb965;

  $bb965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} vslice_dummy_var_200 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i1133 := $load.i8($M.3, $p2);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $i1134 := $zext.i8.i32($i1133);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $i1135 := $and.i32($i1134, 64);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i1136 := $ne.i32($i1135, 0);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1136} true;
    goto $bb966, $bb967;

  $bb967:
    assume !($i1136 == 1);
    assume {:verifier.code 0} true;
    $i1137 := $i1129;
    goto $bb968;

  $bb968:
    assume {:verifier.code 0} true;
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} __const_udelay(214750);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    goto $bb972;

  $bb972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} vslice_dummy_var_201 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $i1141 := $load.i8($M.3, $p2);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $i1142 := $zext.i8.i32($i1141);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i1143 := $and.i32($i1142, 64);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i1144 := $ne.i32($i1143, 0);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1144} true;
    goto $bb973, $bb974;

  $bb974:
    assume !($i1144 == 1);
    assume {:verifier.code 0} true;
    $i1145 := $i1137;
    goto $bb975;

  $bb975:
    assume {:verifier.code 0} true;
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} __const_udelay(214750);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    goto $bb979;

  $bb979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} vslice_dummy_var_202 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $i1149 := $load.i8($M.3, $p2);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i1150 := $zext.i8.i32($i1149);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $i1151 := $and.i32($i1150, 64);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $i1152 := $ne.i32($i1151, 0);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1152} true;
    goto $bb980, $bb981;

  $bb981:
    assume !($i1152 == 1);
    assume {:verifier.code 0} true;
    $i1153 := $i1145;
    goto $bb982;

  $bb982:
    assume {:verifier.code 0} true;
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} __const_udelay(214750);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    goto $bb986;

  $bb986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} vslice_dummy_var_203 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i1157 := $load.i8($M.3, $p2);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i1158 := $zext.i8.i32($i1157);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i1159 := $and.i32($i1158, 64);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i1160 := $ne.i32($i1159, 0);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1160} true;
    goto $bb987, $bb988;

  $bb988:
    assume !($i1160 == 1);
    assume {:verifier.code 0} true;
    $i1161 := $i1153;
    goto $bb989;

  $bb989:
    assume {:verifier.code 0} true;
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} __const_udelay(214750);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    goto $bb993;

  $bb993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} vslice_dummy_var_204 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i1165 := $load.i8($M.3, $p2);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $i1166 := $zext.i8.i32($i1165);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $i1167 := $and.i32($i1166, 64);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i1168 := $ne.i32($i1167, 0);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1168} true;
    goto $bb994, $bb995;

  $bb995:
    assume !($i1168 == 1);
    assume {:verifier.code 0} true;
    $i1169 := $i1161;
    goto $bb996;

  $bb996:
    assume {:verifier.code 0} true;
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} __const_udelay(214750);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    goto $bb1000;

  $bb1000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} vslice_dummy_var_205 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $i1173 := $load.i8($M.3, $p2);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i1174 := $zext.i8.i32($i1173);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i1175 := $and.i32($i1174, 64);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i1176 := $ne.i32($i1175, 0);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1176} true;
    goto $bb1001, $bb1002;

  $bb1002:
    assume !($i1176 == 1);
    assume {:verifier.code 0} true;
    $i1177 := $i1169;
    goto $bb1003;

  $bb1003:
    assume {:verifier.code 0} true;
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} __const_udelay(214750);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    goto $bb1007;

  $bb1007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} vslice_dummy_var_206 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i1181 := $load.i8($M.3, $p2);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i1182 := $zext.i8.i32($i1181);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i1183 := $and.i32($i1182, 64);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i1184 := $ne.i32($i1183, 0);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1184} true;
    goto $bb1008, $bb1009;

  $bb1009:
    assume !($i1184 == 1);
    assume {:verifier.code 0} true;
    $i1185 := $i1177;
    goto $bb1010;

  $bb1010:
    assume {:verifier.code 0} true;
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} __const_udelay(214750);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    goto $bb1014;

  $bb1014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} vslice_dummy_var_207 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i1189 := $load.i8($M.3, $p2);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i1190 := $zext.i8.i32($i1189);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i1191 := $and.i32($i1190, 64);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i1192 := $ne.i32($i1191, 0);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1192} true;
    goto $bb1015, $bb1016;

  $bb1016:
    assume !($i1192 == 1);
    assume {:verifier.code 0} true;
    $i1193 := $i1185;
    goto $bb1017;

  $bb1017:
    assume {:verifier.code 0} true;
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} __const_udelay(214750);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    goto $bb1021;

  $bb1021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} vslice_dummy_var_208 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i1197 := $load.i8($M.3, $p2);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i1198 := $zext.i8.i32($i1197);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i1199 := $and.i32($i1198, 64);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i1200 := $ne.i32($i1199, 0);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1200} true;
    goto $bb1022, $bb1023;

  $bb1023:
    assume !($i1200 == 1);
    assume {:verifier.code 0} true;
    $i1201 := $i1193;
    goto $bb1024;

  $bb1024:
    assume {:verifier.code 0} true;
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} __const_udelay(214750);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    goto $bb1028;

  $bb1028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} vslice_dummy_var_209 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $i1205 := $load.i8($M.3, $p2);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $i1206 := $zext.i8.i32($i1205);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i1207 := $and.i32($i1206, 64);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i1208 := $ne.i32($i1207, 0);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1208} true;
    goto $bb1029, $bb1030;

  $bb1030:
    assume !($i1208 == 1);
    assume {:verifier.code 0} true;
    $i1209 := $i1201;
    goto $bb1031;

  $bb1031:
    assume {:verifier.code 0} true;
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} __const_udelay(214750);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    goto $bb1035;

  $bb1035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} vslice_dummy_var_210 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i1213 := $load.i8($M.3, $p2);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i1214 := $zext.i8.i32($i1213);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $i1215 := $and.i32($i1214, 64);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $i1216 := $ne.i32($i1215, 0);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1216} true;
    goto $bb1036, $bb1037;

  $bb1037:
    assume !($i1216 == 1);
    assume {:verifier.code 0} true;
    $i1217 := $i1209;
    goto $bb1038;

  $bb1038:
    assume {:verifier.code 0} true;
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} __const_udelay(214750);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    goto $bb1042;

  $bb1042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} vslice_dummy_var_211 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i1221 := $load.i8($M.3, $p2);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i1222 := $zext.i8.i32($i1221);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $i1223 := $and.i32($i1222, 64);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $i1224 := $ne.i32($i1223, 0);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1224} true;
    goto $bb1043, $bb1044;

  $bb1044:
    assume !($i1224 == 1);
    assume {:verifier.code 0} true;
    $i1225 := $i1217;
    goto $bb1045;

  $bb1045:
    assume {:verifier.code 0} true;
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} __const_udelay(214750);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    goto $bb1049;

  $bb1049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} vslice_dummy_var_212 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i1229 := $load.i8($M.3, $p2);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i1230 := $zext.i8.i32($i1229);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i1231 := $and.i32($i1230, 64);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $i1232 := $ne.i32($i1231, 0);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1232} true;
    goto $bb1050, $bb1051;

  $bb1051:
    assume !($i1232 == 1);
    assume {:verifier.code 0} true;
    $i1233 := $i1225;
    goto $bb1052;

  $bb1052:
    assume {:verifier.code 0} true;
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} __const_udelay(214750);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    goto $bb1056;

  $bb1056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} vslice_dummy_var_213 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i1237 := $load.i8($M.3, $p2);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i1238 := $zext.i8.i32($i1237);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i1239 := $and.i32($i1238, 64);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i1240 := $ne.i32($i1239, 0);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1240} true;
    goto $bb1057, $bb1058;

  $bb1058:
    assume !($i1240 == 1);
    assume {:verifier.code 0} true;
    $i1241 := $i1233;
    goto $bb1059;

  $bb1059:
    assume {:verifier.code 0} true;
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} __const_udelay(214750);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    goto $bb1063;

  $bb1063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} vslice_dummy_var_214 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i1245 := $load.i8($M.3, $p2);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i1246 := $zext.i8.i32($i1245);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i1247 := $and.i32($i1246, 64);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i1248 := $ne.i32($i1247, 0);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1248} true;
    goto $bb1064, $bb1065;

  $bb1065:
    assume !($i1248 == 1);
    assume {:verifier.code 0} true;
    $i1249 := $i1241;
    goto $bb1066;

  $bb1066:
    assume {:verifier.code 0} true;
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} __const_udelay(214750);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    goto $bb1070;

  $bb1070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} vslice_dummy_var_215 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $i1253 := $load.i8($M.3, $p2);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i1254 := $zext.i8.i32($i1253);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i1255 := $and.i32($i1254, 64);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $i1256 := $ne.i32($i1255, 0);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1256} true;
    goto $bb1071, $bb1072;

  $bb1072:
    assume !($i1256 == 1);
    assume {:verifier.code 0} true;
    $i1257 := $i1249;
    goto $bb1073;

  $bb1073:
    assume {:verifier.code 0} true;
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} __const_udelay(214750);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    goto $bb1077;

  $bb1077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} vslice_dummy_var_216 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $i1261 := $load.i8($M.3, $p2);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i1262 := $zext.i8.i32($i1261);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i1263 := $and.i32($i1262, 64);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i1264 := $ne.i32($i1263, 0);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1264} true;
    goto $bb1078, $bb1079;

  $bb1079:
    assume !($i1264 == 1);
    assume {:verifier.code 0} true;
    $i1265 := $i1257;
    goto $bb1080;

  $bb1080:
    assume {:verifier.code 0} true;
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} __const_udelay(214750);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    goto $bb1084;

  $bb1084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} vslice_dummy_var_217 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i1269 := $load.i8($M.3, $p2);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i1270 := $zext.i8.i32($i1269);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $i1271 := $and.i32($i1270, 64);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i1272 := $ne.i32($i1271, 0);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1272} true;
    goto $bb1085, $bb1086;

  $bb1086:
    assume !($i1272 == 1);
    assume {:verifier.code 0} true;
    $i1273 := $i1265;
    goto $bb1087;

  $bb1087:
    assume {:verifier.code 0} true;
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} __const_udelay(214750);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    goto $bb1091;

  $bb1091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} vslice_dummy_var_218 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i1277 := $load.i8($M.3, $p2);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i1278 := $zext.i8.i32($i1277);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i1279 := $and.i32($i1278, 64);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i1280 := $ne.i32($i1279, 0);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1280} true;
    goto $bb1092, $bb1093;

  $bb1093:
    assume !($i1280 == 1);
    assume {:verifier.code 0} true;
    $i1281 := $i1273;
    goto $bb1094;

  $bb1094:
    assume {:verifier.code 0} true;
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} __const_udelay(214750);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    goto $bb1098;

  $bb1098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} vslice_dummy_var_219 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $i1285 := $load.i8($M.3, $p2);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $i1286 := $zext.i8.i32($i1285);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i1287 := $and.i32($i1286, 64);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i1288 := $ne.i32($i1287, 0);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1288} true;
    goto $bb1099, $bb1100;

  $bb1100:
    assume !($i1288 == 1);
    assume {:verifier.code 0} true;
    $i1289 := $i1281;
    goto $bb1101;

  $bb1101:
    assume {:verifier.code 0} true;
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} __const_udelay(214750);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    goto $bb1105;

  $bb1105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} vslice_dummy_var_220 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i1293 := $load.i8($M.3, $p2);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i1294 := $zext.i8.i32($i1293);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $i1295 := $and.i32($i1294, 64);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $i1296 := $ne.i32($i1295, 0);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1296} true;
    goto $bb1106, $bb1107;

  $bb1107:
    assume !($i1296 == 1);
    assume {:verifier.code 0} true;
    $i1297 := $i1289;
    goto $bb1108;

  $bb1108:
    assume {:verifier.code 0} true;
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} __const_udelay(214750);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    goto $bb1112;

  $bb1112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} vslice_dummy_var_221 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i1301 := $load.i8($M.3, $p2);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i1302 := $zext.i8.i32($i1301);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $i1303 := $and.i32($i1302, 64);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $i1304 := $ne.i32($i1303, 0);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1304} true;
    goto $bb1113, $bb1114;

  $bb1114:
    assume !($i1304 == 1);
    assume {:verifier.code 0} true;
    $i1305 := $i1297;
    goto $bb1115;

  $bb1115:
    assume {:verifier.code 0} true;
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} __const_udelay(214750);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    goto $bb1119;

  $bb1119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} vslice_dummy_var_222 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i1309 := $load.i8($M.3, $p2);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i1310 := $zext.i8.i32($i1309);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i1311 := $and.i32($i1310, 64);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $i1312 := $ne.i32($i1311, 0);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1312} true;
    goto $bb1120, $bb1121;

  $bb1121:
    assume !($i1312 == 1);
    assume {:verifier.code 0} true;
    $i1313 := $i1305;
    goto $bb1122;

  $bb1122:
    assume {:verifier.code 0} true;
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} __const_udelay(214750);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    goto $bb1126;

  $bb1126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} vslice_dummy_var_223 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i1317 := $load.i8($M.3, $p2);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i1318 := $zext.i8.i32($i1317);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i1319 := $and.i32($i1318, 64);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $i1320 := $ne.i32($i1319, 0);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1320} true;
    goto $bb1127, $bb1128;

  $bb1128:
    assume !($i1320 == 1);
    assume {:verifier.code 0} true;
    $i1321 := $i1313;
    goto $bb1129;

  $bb1129:
    assume {:verifier.code 0} true;
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} __const_udelay(214750);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    goto $bb1133;

  $bb1133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} vslice_dummy_var_224 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $i1325 := $load.i8($M.3, $p2);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $i1326 := $zext.i8.i32($i1325);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $i1327 := $and.i32($i1326, 64);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $i1328 := $ne.i32($i1327, 0);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1328} true;
    goto $bb1134, $bb1135;

  $bb1135:
    assume !($i1328 == 1);
    assume {:verifier.code 0} true;
    $i1329 := $i1321;
    goto $bb1136;

  $bb1136:
    assume {:verifier.code 0} true;
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} __const_udelay(214750);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    goto $bb1140;

  $bb1140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} vslice_dummy_var_225 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $i1333 := $load.i8($M.3, $p2);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $i1334 := $zext.i8.i32($i1333);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i1335 := $and.i32($i1334, 64);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i1336 := $ne.i32($i1335, 0);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1336} true;
    goto $bb1141, $bb1142;

  $bb1142:
    assume !($i1336 == 1);
    assume {:verifier.code 0} true;
    $i1337 := $i1329;
    goto $bb1143;

  $bb1143:
    assume {:verifier.code 0} true;
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} __const_udelay(214750);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    goto $bb1147;

  $bb1147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} vslice_dummy_var_226 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i1341 := $load.i8($M.3, $p2);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i1342 := $zext.i8.i32($i1341);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i1343 := $and.i32($i1342, 64);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $i1344 := $ne.i32($i1343, 0);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1344} true;
    goto $bb1148, $bb1149;

  $bb1149:
    assume !($i1344 == 1);
    assume {:verifier.code 0} true;
    $i1345 := $i1337;
    goto $bb1150;

  $bb1150:
    assume {:verifier.code 0} true;
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} __const_udelay(214750);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    goto $bb1154;

  $bb1154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} vslice_dummy_var_227 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i1349 := $load.i8($M.3, $p2);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $i1350 := $zext.i8.i32($i1349);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $i1351 := $and.i32($i1350, 64);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i1352 := $ne.i32($i1351, 0);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1352} true;
    goto $bb1155, $bb1156;

  $bb1156:
    assume !($i1352 == 1);
    assume {:verifier.code 0} true;
    $i1353 := $i1345;
    goto $bb1157;

  $bb1157:
    assume {:verifier.code 0} true;
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} __const_udelay(214750);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    goto $bb1161;

  $bb1161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} vslice_dummy_var_228 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $i1357 := $load.i8($M.3, $p2);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i1358 := $zext.i8.i32($i1357);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $i1359 := $and.i32($i1358, 64);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $i1360 := $ne.i32($i1359, 0);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1360} true;
    goto $bb1162, $bb1163;

  $bb1163:
    assume !($i1360 == 1);
    assume {:verifier.code 0} true;
    $i1361 := $i1353;
    goto $bb1164;

  $bb1164:
    assume {:verifier.code 0} true;
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} __const_udelay(214750);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    goto $bb1168;

  $bb1168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} vslice_dummy_var_229 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $i1365 := $load.i8($M.3, $p2);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $i1366 := $zext.i8.i32($i1365);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $i1367 := $and.i32($i1366, 64);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i1368 := $ne.i32($i1367, 0);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1368} true;
    goto $bb1169, $bb1170;

  $bb1170:
    assume !($i1368 == 1);
    assume {:verifier.code 0} true;
    $i1369 := $i1361;
    goto $bb1171;

  $bb1171:
    assume {:verifier.code 0} true;
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} __const_udelay(214750);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    goto $bb1175;

  $bb1175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} vslice_dummy_var_230 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i1373 := $load.i8($M.3, $p2);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i1374 := $zext.i8.i32($i1373);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $i1375 := $and.i32($i1374, 64);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $i1376 := $ne.i32($i1375, 0);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1376} true;
    goto $bb1176, $bb1177;

  $bb1177:
    assume !($i1376 == 1);
    assume {:verifier.code 0} true;
    $i1377 := $i1369;
    goto $bb1178;

  $bb1178:
    assume {:verifier.code 0} true;
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} __const_udelay(214750);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    goto $bb1182;

  $bb1182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} vslice_dummy_var_231 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $i1381 := $load.i8($M.3, $p2);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $i1382 := $zext.i8.i32($i1381);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i1383 := $and.i32($i1382, 64);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i1384 := $ne.i32($i1383, 0);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1384} true;
    goto $bb1183, $bb1184;

  $bb1184:
    assume !($i1384 == 1);
    assume {:verifier.code 0} true;
    $i1385 := $i1377;
    goto $bb1185;

  $bb1185:
    assume {:verifier.code 0} true;
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} __const_udelay(214750);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    goto $bb1189;

  $bb1189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} vslice_dummy_var_232 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i1389 := $load.i8($M.3, $p2);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i1390 := $zext.i8.i32($i1389);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $i1391 := $and.i32($i1390, 64);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $i1392 := $ne.i32($i1391, 0);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1392} true;
    goto $bb1190, $bb1191;

  $bb1191:
    assume !($i1392 == 1);
    assume {:verifier.code 0} true;
    $i1393 := $i1385;
    goto $bb1192;

  $bb1192:
    assume {:verifier.code 0} true;
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} __const_udelay(214750);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    goto $bb1196;

  $bb1196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} vslice_dummy_var_233 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $i1397 := $load.i8($M.3, $p2);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i1398 := $zext.i8.i32($i1397);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i1399 := $and.i32($i1398, 64);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i1400 := $ne.i32($i1399, 0);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1400} true;
    goto $bb1197, $bb1198;

  $bb1198:
    assume !($i1400 == 1);
    assume {:verifier.code 0} true;
    $i1401 := $i1393;
    goto $bb1199;

  $bb1199:
    assume {:verifier.code 0} true;
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} __const_udelay(214750);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    goto $bb1203;

  $bb1203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} vslice_dummy_var_234 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $i1405 := $load.i8($M.3, $p2);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i1406 := $zext.i8.i32($i1405);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i1407 := $and.i32($i1406, 64);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i1408 := $ne.i32($i1407, 0);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1408} true;
    goto $bb1204, $bb1205;

  $bb1205:
    assume !($i1408 == 1);
    assume {:verifier.code 0} true;
    $i1409 := $i1401;
    goto $bb1206;

  $bb1206:
    assume {:verifier.code 0} true;
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} __const_udelay(214750);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    goto $bb1210;

  $bb1210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} vslice_dummy_var_235 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $i1413 := $load.i8($M.3, $p2);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i1414 := $zext.i8.i32($i1413);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $i1415 := $and.i32($i1414, 64);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i1416 := $ne.i32($i1415, 0);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1416} true;
    goto $bb1211, $bb1212;

  $bb1212:
    assume !($i1416 == 1);
    assume {:verifier.code 0} true;
    $i1417 := $i1409;
    goto $bb1213;

  $bb1213:
    assume {:verifier.code 0} true;
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} __const_udelay(214750);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    goto $bb1217;

  $bb1217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} vslice_dummy_var_236 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $i1421 := $load.i8($M.3, $p2);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i1422 := $zext.i8.i32($i1421);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i1423 := $and.i32($i1422, 64);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i1424 := $ne.i32($i1423, 0);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1424} true;
    goto $bb1218, $bb1219;

  $bb1219:
    assume !($i1424 == 1);
    assume {:verifier.code 0} true;
    $i1425 := $i1417;
    goto $bb1220;

  $bb1220:
    assume {:verifier.code 0} true;
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} __const_udelay(214750);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    goto $bb1224;

  $bb1224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} vslice_dummy_var_237 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $i1429 := $load.i8($M.3, $p2);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $i1430 := $zext.i8.i32($i1429);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i1431 := $and.i32($i1430, 64);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i1432 := $ne.i32($i1431, 0);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1432} true;
    goto $bb1225, $bb1226;

  $bb1226:
    assume !($i1432 == 1);
    assume {:verifier.code 0} true;
    $i1433 := $i1425;
    goto $bb1227;

  $bb1227:
    assume {:verifier.code 0} true;
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} __const_udelay(214750);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    goto $bb1231;

  $bb1231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} vslice_dummy_var_238 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i1437 := $load.i8($M.3, $p2);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i1438 := $zext.i8.i32($i1437);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i1439 := $and.i32($i1438, 64);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $i1440 := $ne.i32($i1439, 0);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1440} true;
    goto $bb1232, $bb1233;

  $bb1233:
    assume !($i1440 == 1);
    assume {:verifier.code 0} true;
    $i1441 := $i1433;
    goto $bb1234;

  $bb1234:
    assume {:verifier.code 0} true;
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} __const_udelay(214750);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    goto $bb1238;

  $bb1238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} vslice_dummy_var_239 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i1445 := $load.i8($M.3, $p2);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i1446 := $zext.i8.i32($i1445);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i1447 := $and.i32($i1446, 64);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i1448 := $ne.i32($i1447, 0);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1448} true;
    goto $bb1239, $bb1240;

  $bb1240:
    assume !($i1448 == 1);
    assume {:verifier.code 0} true;
    $i1449 := $i1441;
    goto $bb1241;

  $bb1241:
    assume {:verifier.code 0} true;
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} __const_udelay(214750);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    goto $bb1245;

  $bb1245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} vslice_dummy_var_240 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i1453 := $load.i8($M.3, $p2);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i1454 := $zext.i8.i32($i1453);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i1455 := $and.i32($i1454, 64);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $i1456 := $ne.i32($i1455, 0);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1456} true;
    goto $bb1246, $bb1247;

  $bb1247:
    assume !($i1456 == 1);
    assume {:verifier.code 0} true;
    $i1457 := $i1449;
    goto $bb1248;

  $bb1248:
    assume {:verifier.code 0} true;
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} __const_udelay(214750);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    goto $bb1252;

  $bb1252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} vslice_dummy_var_241 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i1461 := $load.i8($M.3, $p2);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i1462 := $zext.i8.i32($i1461);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $i1463 := $and.i32($i1462, 64);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $i1464 := $ne.i32($i1463, 0);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1464} true;
    goto $bb1253, $bb1254;

  $bb1254:
    assume !($i1464 == 1);
    assume {:verifier.code 0} true;
    $i1465 := $i1457;
    goto $bb1255;

  $bb1255:
    assume {:verifier.code 0} true;
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} __const_udelay(214750);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    goto $bb1259;

  $bb1259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} vslice_dummy_var_242 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i1469 := $load.i8($M.3, $p2);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i1470 := $zext.i8.i32($i1469);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i1471 := $and.i32($i1470, 64);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i1472 := $ne.i32($i1471, 0);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1472} true;
    goto $bb1260, $bb1261;

  $bb1261:
    assume !($i1472 == 1);
    assume {:verifier.code 0} true;
    $i1473 := $i1465;
    goto $bb1262;

  $bb1262:
    assume {:verifier.code 0} true;
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} __const_udelay(214750);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    goto $bb1266;

  $bb1266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} vslice_dummy_var_243 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i1477 := $load.i8($M.3, $p2);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i1478 := $zext.i8.i32($i1477);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $i1479 := $and.i32($i1478, 64);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i1480 := $ne.i32($i1479, 0);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1480} true;
    goto $bb1267, $bb1268;

  $bb1268:
    assume !($i1480 == 1);
    assume {:verifier.code 0} true;
    $i1481 := $i1473;
    goto $bb1269;

  $bb1269:
    assume {:verifier.code 0} true;
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} __const_udelay(214750);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    goto $bb1273;

  $bb1273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} vslice_dummy_var_244 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $i1485 := $load.i8($M.3, $p2);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $i1486 := $zext.i8.i32($i1485);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $i1487 := $and.i32($i1486, 64);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $i1488 := $ne.i32($i1487, 0);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1488} true;
    goto $bb1274, $bb1275;

  $bb1275:
    assume !($i1488 == 1);
    assume {:verifier.code 0} true;
    $i1489 := $i1481;
    goto $bb1276;

  $bb1276:
    assume {:verifier.code 0} true;
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} __const_udelay(214750);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    goto $bb1280;

  $bb1280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} vslice_dummy_var_245 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $i1493 := $load.i8($M.3, $p2);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i1494 := $zext.i8.i32($i1493);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i1495 := $and.i32($i1494, 64);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $i1496 := $ne.i32($i1495, 0);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1496} true;
    goto $bb1281, $bb1282;

  $bb1282:
    assume !($i1496 == 1);
    assume {:verifier.code 0} true;
    $i1497 := $i1489;
    goto $bb1283;

  $bb1283:
    assume {:verifier.code 0} true;
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} __const_udelay(214750);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    goto $bb1287;

  $bb1287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} vslice_dummy_var_246 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $i1501 := $load.i8($M.3, $p2);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i1502 := $zext.i8.i32($i1501);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i1503 := $and.i32($i1502, 64);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $i1504 := $ne.i32($i1503, 0);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1504} true;
    goto $bb1288, $bb1289;

  $bb1289:
    assume !($i1504 == 1);
    assume {:verifier.code 0} true;
    $i1505 := $i1497;
    goto $bb1290;

  $bb1290:
    assume {:verifier.code 0} true;
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} __const_udelay(214750);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    goto $bb1294;

  $bb1294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} vslice_dummy_var_247 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $i1509 := $load.i8($M.3, $p2);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $i1510 := $zext.i8.i32($i1509);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $i1511 := $and.i32($i1510, 64);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i1512 := $ne.i32($i1511, 0);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1512} true;
    goto $bb1295, $bb1296;

  $bb1296:
    assume !($i1512 == 1);
    assume {:verifier.code 0} true;
    $i1513 := $i1505;
    goto $bb1297;

  $bb1297:
    assume {:verifier.code 0} true;
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} __const_udelay(214750);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    goto $bb1301;

  $bb1301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} vslice_dummy_var_248 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $i1517 := $load.i8($M.3, $p2);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $i1518 := $zext.i8.i32($i1517);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i1519 := $and.i32($i1518, 64);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i1520 := $ne.i32($i1519, 0);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1520} true;
    goto $bb1302, $bb1303;

  $bb1303:
    assume !($i1520 == 1);
    assume {:verifier.code 0} true;
    $i1521 := $i1513;
    goto $bb1304;

  $bb1304:
    assume {:verifier.code 0} true;
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} __const_udelay(214750);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    goto $bb1308;

  $bb1308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} vslice_dummy_var_249 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $i1525 := $load.i8($M.3, $p2);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i1526 := $zext.i8.i32($i1525);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i1527 := $and.i32($i1526, 64);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i1528 := $ne.i32($i1527, 0);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1528} true;
    goto $bb1309, $bb1310;

  $bb1310:
    assume !($i1528 == 1);
    assume {:verifier.code 0} true;
    $i1529 := $i1521;
    goto $bb1311;

  $bb1311:
    assume {:verifier.code 0} true;
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} __const_udelay(214750);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    goto $bb1315;

  $bb1315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} vslice_dummy_var_250 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i1533 := $load.i8($M.3, $p2);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $i1534 := $zext.i8.i32($i1533);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i1535 := $and.i32($i1534, 64);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i1536 := $ne.i32($i1535, 0);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1536} true;
    goto $bb1316, $bb1317;

  $bb1317:
    assume !($i1536 == 1);
    assume {:verifier.code 0} true;
    $i1537 := $i1529;
    goto $bb1318;

  $bb1318:
    assume {:verifier.code 0} true;
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} __const_udelay(214750);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    goto $bb1322;

  $bb1322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} vslice_dummy_var_251 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i1541 := $load.i8($M.3, $p2);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i1542 := $zext.i8.i32($i1541);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i1543 := $and.i32($i1542, 64);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $i1544 := $ne.i32($i1543, 0);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1544} true;
    goto $bb1323, $bb1324;

  $bb1324:
    assume !($i1544 == 1);
    assume {:verifier.code 0} true;
    $i1545 := $i1537;
    goto $bb1325;

  $bb1325:
    assume {:verifier.code 0} true;
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} __const_udelay(214750);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    goto $bb1329;

  $bb1329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} vslice_dummy_var_252 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $i1549 := $load.i8($M.3, $p2);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i1550 := $zext.i8.i32($i1549);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $i1551 := $and.i32($i1550, 64);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i1552 := $ne.i32($i1551, 0);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1552} true;
    goto $bb1330, $bb1331;

  $bb1331:
    assume !($i1552 == 1);
    assume {:verifier.code 0} true;
    $i1553 := $i1545;
    goto $bb1332;

  $bb1332:
    assume {:verifier.code 0} true;
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} __const_udelay(214750);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    goto $bb1336;

  $bb1336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} vslice_dummy_var_253 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i1557 := $load.i8($M.3, $p2);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i1558 := $zext.i8.i32($i1557);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i1559 := $and.i32($i1558, 64);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i1560 := $ne.i32($i1559, 0);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1560} true;
    goto $bb1337, $bb1338;

  $bb1338:
    assume !($i1560 == 1);
    assume {:verifier.code 0} true;
    $i1561 := $i1553;
    goto $bb1339;

  $bb1339:
    assume {:verifier.code 0} true;
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} __const_udelay(214750);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    goto $bb1343;

  $bb1343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} vslice_dummy_var_254 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $i1565 := $load.i8($M.3, $p2);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i1566 := $zext.i8.i32($i1565);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i1567 := $and.i32($i1566, 64);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $i1568 := $ne.i32($i1567, 0);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1568} true;
    goto $bb1344, $bb1345;

  $bb1345:
    assume !($i1568 == 1);
    assume {:verifier.code 0} true;
    $i1569 := $i1561;
    goto $bb1346;

  $bb1346:
    assume {:verifier.code 0} true;
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} __const_udelay(214750);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    goto $bb1350;

  $bb1350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} vslice_dummy_var_255 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $i1573 := $load.i8($M.3, $p2);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $i1574 := $zext.i8.i32($i1573);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $i1575 := $and.i32($i1574, 64);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $i1576 := $ne.i32($i1575, 0);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1576} true;
    goto $bb1351, $bb1352;

  $bb1352:
    assume !($i1576 == 1);
    assume {:verifier.code 0} true;
    $i1577 := $i1569;
    goto $bb1353;

  $bb1353:
    assume {:verifier.code 0} true;
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} __const_udelay(214750);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    goto $bb1357;

  $bb1357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} vslice_dummy_var_256 := pci_read_config_byte($p0, 64, $p2);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $i1581 := $load.i8($M.3, $p2);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $i1582 := $zext.i8.i32($i1581);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $i1583 := $and.i32($i1582, 64);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $i1584 := $ne.i32($i1583, 0);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1584} true;
    goto $bb1358, $bb1359;

  $bb1359:
    assume !($i1584 == 1);
    assume {:verifier.code 0} true;
    $i18 := $i1577;
    goto $bb1360;

  $bb1360:
    assume {:verifier.code 0} true;
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} __const_udelay(214750);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i16 := $i18;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i19 := $sle.i32($i16, 2);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i19 == 1);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $M.5 := 1;
    call {:si_unique_call 276} {:cexpr "clksrc"} boogie_si_record_i32(1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb15:
    assume $i19 == 1;
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $i20 := $M.5;
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 1);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i21 == 1);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $M.5 := 3;
    call {:si_unique_call 279} {:cexpr "clksrc"} boogie_si_record_i32(3);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p30, .str.4);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p31, .str.164);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p32, .str.6);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p33, .str.165);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $i36 := $load.i24($M.10, $p35);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $i37 := $and.i24($i36, $sub.i24(0, 262144));
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i38 := $or.i24($i37, 1176);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p35, $i38);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p39, 0);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.11, $p40);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i64($i41);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i43 := $and.i64($i42, 1);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} $i44 := ldv__builtin_expect($i43, 0);
    call {:si_unique_call 283} {:cexpr "tmp___0"} boogie_si_record_i64($i44);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume $i45 == 1;
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $i46 := $M.5;
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} __dynamic_pr_debug.ref.ref.ref.i32($p3, .str.165, .str.164, $i46);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb17:
    assume $i21 == 1;
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} $i22 := net_ratelimit();
    call {:si_unique_call 278} {:cexpr "tmp"} boogie_si_record_i32($i22);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p1, $sub.i8(0, 128));
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.3, $p1);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} vslice_dummy_var_64 := pci_write_config_byte($p0, 64, $i27);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 1);
    goto $bb22;

  $bb19:
    assume $i23 == 1;
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} vslice_dummy_var_63 := printk.ref.ref(.str.163, .str.164);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb1358:
    assume $i1584 == 1;
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i1585 := $add.i32($i1577, 1);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $i1586 := $sgt.i32($i1585, 2);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i15 := $i1585;
    assume {:branchcond $i1586} true;
    goto $bb1361, $bb1362;

  $bb1362:
    assume !($i1586 == 1);
    assume {:verifier.code 0} true;
    goto $bb1363;

  $bb1363:
    assume {:verifier.code 0} true;
    $i18 := $i1585;
    goto $bb1360;

  $bb1361:
    assume {:verifier.code 0} true;
    assume $i1586 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb10;

  $bb1351:
    assume $i1576 == 1;
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $i1578 := $add.i32($i1569, 1);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i1579 := $sgt.i32($i1578, 2);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $i15 := $i1578;
    assume {:branchcond $i1579} true;
    goto $bb1354, $bb1355;

  $bb1355:
    assume !($i1579 == 1);
    assume {:verifier.code 0} true;
    goto $bb1356;

  $bb1356:
    assume {:verifier.code 0} true;
    $i1577 := $i1578;
    goto $bb1353;

  $bb1354:
    assume {:verifier.code 0} true;
    assume $i1579 == 1;
    goto $bb8;

  $bb1344:
    assume $i1568 == 1;
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $i1570 := $add.i32($i1561, 1);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $i1571 := $sgt.i32($i1570, 2);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $i15 := $i1570;
    assume {:branchcond $i1571} true;
    goto $bb1347, $bb1348;

  $bb1348:
    assume !($i1571 == 1);
    assume {:verifier.code 0} true;
    goto $bb1349;

  $bb1349:
    assume {:verifier.code 0} true;
    $i1569 := $i1570;
    goto $bb1346;

  $bb1347:
    assume {:verifier.code 0} true;
    assume $i1571 == 1;
    goto $bb8;

  $bb1337:
    assume $i1560 == 1;
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i1562 := $add.i32($i1553, 1);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i1563 := $sgt.i32($i1562, 2);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i15 := $i1562;
    assume {:branchcond $i1563} true;
    goto $bb1340, $bb1341;

  $bb1341:
    assume !($i1563 == 1);
    assume {:verifier.code 0} true;
    goto $bb1342;

  $bb1342:
    assume {:verifier.code 0} true;
    $i1561 := $i1562;
    goto $bb1339;

  $bb1340:
    assume {:verifier.code 0} true;
    assume $i1563 == 1;
    goto $bb8;

  $bb1330:
    assume $i1552 == 1;
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $i1554 := $add.i32($i1545, 1);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i1555 := $sgt.i32($i1554, 2);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i15 := $i1554;
    assume {:branchcond $i1555} true;
    goto $bb1333, $bb1334;

  $bb1334:
    assume !($i1555 == 1);
    assume {:verifier.code 0} true;
    goto $bb1335;

  $bb1335:
    assume {:verifier.code 0} true;
    $i1553 := $i1554;
    goto $bb1332;

  $bb1333:
    assume {:verifier.code 0} true;
    assume $i1555 == 1;
    goto $bb8;

  $bb1323:
    assume $i1544 == 1;
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i1546 := $add.i32($i1537, 1);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $i1547 := $sgt.i32($i1546, 2);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $i15 := $i1546;
    assume {:branchcond $i1547} true;
    goto $bb1326, $bb1327;

  $bb1327:
    assume !($i1547 == 1);
    assume {:verifier.code 0} true;
    goto $bb1328;

  $bb1328:
    assume {:verifier.code 0} true;
    $i1545 := $i1546;
    goto $bb1325;

  $bb1326:
    assume {:verifier.code 0} true;
    assume $i1547 == 1;
    goto $bb8;

  $bb1316:
    assume $i1536 == 1;
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i1538 := $add.i32($i1529, 1);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $i1539 := $sgt.i32($i1538, 2);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i15 := $i1538;
    assume {:branchcond $i1539} true;
    goto $bb1319, $bb1320;

  $bb1320:
    assume !($i1539 == 1);
    assume {:verifier.code 0} true;
    goto $bb1321;

  $bb1321:
    assume {:verifier.code 0} true;
    $i1537 := $i1538;
    goto $bb1318;

  $bb1319:
    assume {:verifier.code 0} true;
    assume $i1539 == 1;
    goto $bb8;

  $bb1309:
    assume $i1528 == 1;
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $i1530 := $add.i32($i1521, 1);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $i1531 := $sgt.i32($i1530, 2);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i15 := $i1530;
    assume {:branchcond $i1531} true;
    goto $bb1312, $bb1313;

  $bb1313:
    assume !($i1531 == 1);
    assume {:verifier.code 0} true;
    goto $bb1314;

  $bb1314:
    assume {:verifier.code 0} true;
    $i1529 := $i1530;
    goto $bb1311;

  $bb1312:
    assume {:verifier.code 0} true;
    assume $i1531 == 1;
    goto $bb8;

  $bb1302:
    assume $i1520 == 1;
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $i1522 := $add.i32($i1513, 1);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $i1523 := $sgt.i32($i1522, 2);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i15 := $i1522;
    assume {:branchcond $i1523} true;
    goto $bb1305, $bb1306;

  $bb1306:
    assume !($i1523 == 1);
    assume {:verifier.code 0} true;
    goto $bb1307;

  $bb1307:
    assume {:verifier.code 0} true;
    $i1521 := $i1522;
    goto $bb1304;

  $bb1305:
    assume {:verifier.code 0} true;
    assume $i1523 == 1;
    goto $bb8;

  $bb1295:
    assume $i1512 == 1;
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $i1514 := $add.i32($i1505, 1);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i1515 := $sgt.i32($i1514, 2);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i15 := $i1514;
    assume {:branchcond $i1515} true;
    goto $bb1298, $bb1299;

  $bb1299:
    assume !($i1515 == 1);
    assume {:verifier.code 0} true;
    goto $bb1300;

  $bb1300:
    assume {:verifier.code 0} true;
    $i1513 := $i1514;
    goto $bb1297;

  $bb1298:
    assume {:verifier.code 0} true;
    assume $i1515 == 1;
    goto $bb8;

  $bb1288:
    assume $i1504 == 1;
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $i1506 := $add.i32($i1497, 1);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $i1507 := $sgt.i32($i1506, 2);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $i15 := $i1506;
    assume {:branchcond $i1507} true;
    goto $bb1291, $bb1292;

  $bb1292:
    assume !($i1507 == 1);
    assume {:verifier.code 0} true;
    goto $bb1293;

  $bb1293:
    assume {:verifier.code 0} true;
    $i1505 := $i1506;
    goto $bb1290;

  $bb1291:
    assume {:verifier.code 0} true;
    assume $i1507 == 1;
    goto $bb8;

  $bb1281:
    assume $i1496 == 1;
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i1498 := $add.i32($i1489, 1);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $i1499 := $sgt.i32($i1498, 2);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i15 := $i1498;
    assume {:branchcond $i1499} true;
    goto $bb1284, $bb1285;

  $bb1285:
    assume !($i1499 == 1);
    assume {:verifier.code 0} true;
    goto $bb1286;

  $bb1286:
    assume {:verifier.code 0} true;
    $i1497 := $i1498;
    goto $bb1283;

  $bb1284:
    assume {:verifier.code 0} true;
    assume $i1499 == 1;
    goto $bb8;

  $bb1274:
    assume $i1488 == 1;
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i1490 := $add.i32($i1481, 1);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i1491 := $sgt.i32($i1490, 2);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $i15 := $i1490;
    assume {:branchcond $i1491} true;
    goto $bb1277, $bb1278;

  $bb1278:
    assume !($i1491 == 1);
    assume {:verifier.code 0} true;
    goto $bb1279;

  $bb1279:
    assume {:verifier.code 0} true;
    $i1489 := $i1490;
    goto $bb1276;

  $bb1277:
    assume {:verifier.code 0} true;
    assume $i1491 == 1;
    goto $bb8;

  $bb1267:
    assume $i1480 == 1;
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i1482 := $add.i32($i1473, 1);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $i1483 := $sgt.i32($i1482, 2);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i15 := $i1482;
    assume {:branchcond $i1483} true;
    goto $bb1270, $bb1271;

  $bb1271:
    assume !($i1483 == 1);
    assume {:verifier.code 0} true;
    goto $bb1272;

  $bb1272:
    assume {:verifier.code 0} true;
    $i1481 := $i1482;
    goto $bb1269;

  $bb1270:
    assume {:verifier.code 0} true;
    assume $i1483 == 1;
    goto $bb8;

  $bb1260:
    assume $i1472 == 1;
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i1474 := $add.i32($i1465, 1);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $i1475 := $sgt.i32($i1474, 2);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $i15 := $i1474;
    assume {:branchcond $i1475} true;
    goto $bb1263, $bb1264;

  $bb1264:
    assume !($i1475 == 1);
    assume {:verifier.code 0} true;
    goto $bb1265;

  $bb1265:
    assume {:verifier.code 0} true;
    $i1473 := $i1474;
    goto $bb1262;

  $bb1263:
    assume {:verifier.code 0} true;
    assume $i1475 == 1;
    goto $bb8;

  $bb1253:
    assume $i1464 == 1;
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i1466 := $add.i32($i1457, 1);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $i1467 := $sgt.i32($i1466, 2);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i15 := $i1466;
    assume {:branchcond $i1467} true;
    goto $bb1256, $bb1257;

  $bb1257:
    assume !($i1467 == 1);
    assume {:verifier.code 0} true;
    goto $bb1258;

  $bb1258:
    assume {:verifier.code 0} true;
    $i1465 := $i1466;
    goto $bb1255;

  $bb1256:
    assume {:verifier.code 0} true;
    assume $i1467 == 1;
    goto $bb8;

  $bb1246:
    assume $i1456 == 1;
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i1458 := $add.i32($i1449, 1);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $i1459 := $sgt.i32($i1458, 2);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $i15 := $i1458;
    assume {:branchcond $i1459} true;
    goto $bb1249, $bb1250;

  $bb1250:
    assume !($i1459 == 1);
    assume {:verifier.code 0} true;
    goto $bb1251;

  $bb1251:
    assume {:verifier.code 0} true;
    $i1457 := $i1458;
    goto $bb1248;

  $bb1249:
    assume {:verifier.code 0} true;
    assume $i1459 == 1;
    goto $bb8;

  $bb1239:
    assume $i1448 == 1;
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $i1450 := $add.i32($i1441, 1);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $i1451 := $sgt.i32($i1450, 2);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i15 := $i1450;
    assume {:branchcond $i1451} true;
    goto $bb1242, $bb1243;

  $bb1243:
    assume !($i1451 == 1);
    assume {:verifier.code 0} true;
    goto $bb1244;

  $bb1244:
    assume {:verifier.code 0} true;
    $i1449 := $i1450;
    goto $bb1241;

  $bb1242:
    assume {:verifier.code 0} true;
    assume $i1451 == 1;
    goto $bb8;

  $bb1232:
    assume $i1440 == 1;
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i1442 := $add.i32($i1433, 1);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $i1443 := $sgt.i32($i1442, 2);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $i15 := $i1442;
    assume {:branchcond $i1443} true;
    goto $bb1235, $bb1236;

  $bb1236:
    assume !($i1443 == 1);
    assume {:verifier.code 0} true;
    goto $bb1237;

  $bb1237:
    assume {:verifier.code 0} true;
    $i1441 := $i1442;
    goto $bb1234;

  $bb1235:
    assume {:verifier.code 0} true;
    assume $i1443 == 1;
    goto $bb8;

  $bb1225:
    assume $i1432 == 1;
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i1434 := $add.i32($i1425, 1);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $i1435 := $sgt.i32($i1434, 2);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $i15 := $i1434;
    assume {:branchcond $i1435} true;
    goto $bb1228, $bb1229;

  $bb1229:
    assume !($i1435 == 1);
    assume {:verifier.code 0} true;
    goto $bb1230;

  $bb1230:
    assume {:verifier.code 0} true;
    $i1433 := $i1434;
    goto $bb1227;

  $bb1228:
    assume {:verifier.code 0} true;
    assume $i1435 == 1;
    goto $bb8;

  $bb1218:
    assume $i1424 == 1;
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $i1426 := $add.i32($i1417, 1);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $i1427 := $sgt.i32($i1426, 2);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i15 := $i1426;
    assume {:branchcond $i1427} true;
    goto $bb1221, $bb1222;

  $bb1222:
    assume !($i1427 == 1);
    assume {:verifier.code 0} true;
    goto $bb1223;

  $bb1223:
    assume {:verifier.code 0} true;
    $i1425 := $i1426;
    goto $bb1220;

  $bb1221:
    assume {:verifier.code 0} true;
    assume $i1427 == 1;
    goto $bb8;

  $bb1211:
    assume $i1416 == 1;
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i1418 := $add.i32($i1409, 1);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $i1419 := $sgt.i32($i1418, 2);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $i15 := $i1418;
    assume {:branchcond $i1419} true;
    goto $bb1214, $bb1215;

  $bb1215:
    assume !($i1419 == 1);
    assume {:verifier.code 0} true;
    goto $bb1216;

  $bb1216:
    assume {:verifier.code 0} true;
    $i1417 := $i1418;
    goto $bb1213;

  $bb1214:
    assume {:verifier.code 0} true;
    assume $i1419 == 1;
    goto $bb8;

  $bb1204:
    assume $i1408 == 1;
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $i1410 := $add.i32($i1401, 1);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $i1411 := $sgt.i32($i1410, 2);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $i15 := $i1410;
    assume {:branchcond $i1411} true;
    goto $bb1207, $bb1208;

  $bb1208:
    assume !($i1411 == 1);
    assume {:verifier.code 0} true;
    goto $bb1209;

  $bb1209:
    assume {:verifier.code 0} true;
    $i1409 := $i1410;
    goto $bb1206;

  $bb1207:
    assume {:verifier.code 0} true;
    assume $i1411 == 1;
    goto $bb8;

  $bb1197:
    assume $i1400 == 1;
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $i1402 := $add.i32($i1393, 1);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $i1403 := $sgt.i32($i1402, 2);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $i15 := $i1402;
    assume {:branchcond $i1403} true;
    goto $bb1200, $bb1201;

  $bb1201:
    assume !($i1403 == 1);
    assume {:verifier.code 0} true;
    goto $bb1202;

  $bb1202:
    assume {:verifier.code 0} true;
    $i1401 := $i1402;
    goto $bb1199;

  $bb1200:
    assume {:verifier.code 0} true;
    assume $i1403 == 1;
    goto $bb8;

  $bb1190:
    assume $i1392 == 1;
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $i1394 := $add.i32($i1385, 1);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $i1395 := $sgt.i32($i1394, 2);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i15 := $i1394;
    assume {:branchcond $i1395} true;
    goto $bb1193, $bb1194;

  $bb1194:
    assume !($i1395 == 1);
    assume {:verifier.code 0} true;
    goto $bb1195;

  $bb1195:
    assume {:verifier.code 0} true;
    $i1393 := $i1394;
    goto $bb1192;

  $bb1193:
    assume {:verifier.code 0} true;
    assume $i1395 == 1;
    goto $bb8;

  $bb1183:
    assume $i1384 == 1;
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $i1386 := $add.i32($i1377, 1);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $i1387 := $sgt.i32($i1386, 2);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i15 := $i1386;
    assume {:branchcond $i1387} true;
    goto $bb1186, $bb1187;

  $bb1187:
    assume !($i1387 == 1);
    assume {:verifier.code 0} true;
    goto $bb1188;

  $bb1188:
    assume {:verifier.code 0} true;
    $i1385 := $i1386;
    goto $bb1185;

  $bb1186:
    assume {:verifier.code 0} true;
    assume $i1387 == 1;
    goto $bb8;

  $bb1176:
    assume $i1376 == 1;
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i1378 := $add.i32($i1369, 1);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i1379 := $sgt.i32($i1378, 2);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $i15 := $i1378;
    assume {:branchcond $i1379} true;
    goto $bb1179, $bb1180;

  $bb1180:
    assume !($i1379 == 1);
    assume {:verifier.code 0} true;
    goto $bb1181;

  $bb1181:
    assume {:verifier.code 0} true;
    $i1377 := $i1378;
    goto $bb1178;

  $bb1179:
    assume {:verifier.code 0} true;
    assume $i1379 == 1;
    goto $bb8;

  $bb1169:
    assume $i1368 == 1;
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i1370 := $add.i32($i1361, 1);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $i1371 := $sgt.i32($i1370, 2);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $i15 := $i1370;
    assume {:branchcond $i1371} true;
    goto $bb1172, $bb1173;

  $bb1173:
    assume !($i1371 == 1);
    assume {:verifier.code 0} true;
    goto $bb1174;

  $bb1174:
    assume {:verifier.code 0} true;
    $i1369 := $i1370;
    goto $bb1171;

  $bb1172:
    assume {:verifier.code 0} true;
    assume $i1371 == 1;
    goto $bb8;

  $bb1162:
    assume $i1360 == 1;
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i1362 := $add.i32($i1353, 1);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i1363 := $sgt.i32($i1362, 2);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $i15 := $i1362;
    assume {:branchcond $i1363} true;
    goto $bb1165, $bb1166;

  $bb1166:
    assume !($i1363 == 1);
    assume {:verifier.code 0} true;
    goto $bb1167;

  $bb1167:
    assume {:verifier.code 0} true;
    $i1361 := $i1362;
    goto $bb1164;

  $bb1165:
    assume {:verifier.code 0} true;
    assume $i1363 == 1;
    goto $bb8;

  $bb1155:
    assume $i1352 == 1;
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i1354 := $add.i32($i1345, 1);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i1355 := $sgt.i32($i1354, 2);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $i15 := $i1354;
    assume {:branchcond $i1355} true;
    goto $bb1158, $bb1159;

  $bb1159:
    assume !($i1355 == 1);
    assume {:verifier.code 0} true;
    goto $bb1160;

  $bb1160:
    assume {:verifier.code 0} true;
    $i1353 := $i1354;
    goto $bb1157;

  $bb1158:
    assume {:verifier.code 0} true;
    assume $i1355 == 1;
    goto $bb8;

  $bb1148:
    assume $i1344 == 1;
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $i1346 := $add.i32($i1337, 1);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $i1347 := $sgt.i32($i1346, 2);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $i15 := $i1346;
    assume {:branchcond $i1347} true;
    goto $bb1151, $bb1152;

  $bb1152:
    assume !($i1347 == 1);
    assume {:verifier.code 0} true;
    goto $bb1153;

  $bb1153:
    assume {:verifier.code 0} true;
    $i1345 := $i1346;
    goto $bb1150;

  $bb1151:
    assume {:verifier.code 0} true;
    assume $i1347 == 1;
    goto $bb8;

  $bb1141:
    assume $i1336 == 1;
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $i1338 := $add.i32($i1329, 1);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $i1339 := $sgt.i32($i1338, 2);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $i15 := $i1338;
    assume {:branchcond $i1339} true;
    goto $bb1144, $bb1145;

  $bb1145:
    assume !($i1339 == 1);
    assume {:verifier.code 0} true;
    goto $bb1146;

  $bb1146:
    assume {:verifier.code 0} true;
    $i1337 := $i1338;
    goto $bb1143;

  $bb1144:
    assume {:verifier.code 0} true;
    assume $i1339 == 1;
    goto $bb8;

  $bb1134:
    assume $i1328 == 1;
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i1330 := $add.i32($i1321, 1);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i1331 := $sgt.i32($i1330, 2);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i15 := $i1330;
    assume {:branchcond $i1331} true;
    goto $bb1137, $bb1138;

  $bb1138:
    assume !($i1331 == 1);
    assume {:verifier.code 0} true;
    goto $bb1139;

  $bb1139:
    assume {:verifier.code 0} true;
    $i1329 := $i1330;
    goto $bb1136;

  $bb1137:
    assume {:verifier.code 0} true;
    assume $i1331 == 1;
    goto $bb8;

  $bb1127:
    assume $i1320 == 1;
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $i1322 := $add.i32($i1313, 1);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $i1323 := $sgt.i32($i1322, 2);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $i15 := $i1322;
    assume {:branchcond $i1323} true;
    goto $bb1130, $bb1131;

  $bb1131:
    assume !($i1323 == 1);
    assume {:verifier.code 0} true;
    goto $bb1132;

  $bb1132:
    assume {:verifier.code 0} true;
    $i1321 := $i1322;
    goto $bb1129;

  $bb1130:
    assume {:verifier.code 0} true;
    assume $i1323 == 1;
    goto $bb8;

  $bb1120:
    assume $i1312 == 1;
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $i1314 := $add.i32($i1305, 1);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i1315 := $sgt.i32($i1314, 2);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $i15 := $i1314;
    assume {:branchcond $i1315} true;
    goto $bb1123, $bb1124;

  $bb1124:
    assume !($i1315 == 1);
    assume {:verifier.code 0} true;
    goto $bb1125;

  $bb1125:
    assume {:verifier.code 0} true;
    $i1313 := $i1314;
    goto $bb1122;

  $bb1123:
    assume {:verifier.code 0} true;
    assume $i1315 == 1;
    goto $bb8;

  $bb1113:
    assume $i1304 == 1;
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i1306 := $add.i32($i1297, 1);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i1307 := $sgt.i32($i1306, 2);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i15 := $i1306;
    assume {:branchcond $i1307} true;
    goto $bb1116, $bb1117;

  $bb1117:
    assume !($i1307 == 1);
    assume {:verifier.code 0} true;
    goto $bb1118;

  $bb1118:
    assume {:verifier.code 0} true;
    $i1305 := $i1306;
    goto $bb1115;

  $bb1116:
    assume {:verifier.code 0} true;
    assume $i1307 == 1;
    goto $bb8;

  $bb1106:
    assume $i1296 == 1;
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $i1298 := $add.i32($i1289, 1);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $i1299 := $sgt.i32($i1298, 2);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i15 := $i1298;
    assume {:branchcond $i1299} true;
    goto $bb1109, $bb1110;

  $bb1110:
    assume !($i1299 == 1);
    assume {:verifier.code 0} true;
    goto $bb1111;

  $bb1111:
    assume {:verifier.code 0} true;
    $i1297 := $i1298;
    goto $bb1108;

  $bb1109:
    assume {:verifier.code 0} true;
    assume $i1299 == 1;
    goto $bb8;

  $bb1099:
    assume $i1288 == 1;
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $i1290 := $add.i32($i1281, 1);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $i1291 := $sgt.i32($i1290, 2);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $i15 := $i1290;
    assume {:branchcond $i1291} true;
    goto $bb1102, $bb1103;

  $bb1103:
    assume !($i1291 == 1);
    assume {:verifier.code 0} true;
    goto $bb1104;

  $bb1104:
    assume {:verifier.code 0} true;
    $i1289 := $i1290;
    goto $bb1101;

  $bb1102:
    assume {:verifier.code 0} true;
    assume $i1291 == 1;
    goto $bb8;

  $bb1092:
    assume $i1280 == 1;
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $i1282 := $add.i32($i1273, 1);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $i1283 := $sgt.i32($i1282, 2);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i15 := $i1282;
    assume {:branchcond $i1283} true;
    goto $bb1095, $bb1096;

  $bb1096:
    assume !($i1283 == 1);
    assume {:verifier.code 0} true;
    goto $bb1097;

  $bb1097:
    assume {:verifier.code 0} true;
    $i1281 := $i1282;
    goto $bb1094;

  $bb1095:
    assume {:verifier.code 0} true;
    assume $i1283 == 1;
    goto $bb8;

  $bb1085:
    assume $i1272 == 1;
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i1274 := $add.i32($i1265, 1);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $i1275 := $sgt.i32($i1274, 2);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $i15 := $i1274;
    assume {:branchcond $i1275} true;
    goto $bb1088, $bb1089;

  $bb1089:
    assume !($i1275 == 1);
    assume {:verifier.code 0} true;
    goto $bb1090;

  $bb1090:
    assume {:verifier.code 0} true;
    $i1273 := $i1274;
    goto $bb1087;

  $bb1088:
    assume {:verifier.code 0} true;
    assume $i1275 == 1;
    goto $bb8;

  $bb1078:
    assume $i1264 == 1;
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i1266 := $add.i32($i1257, 1);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i1267 := $sgt.i32($i1266, 2);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i15 := $i1266;
    assume {:branchcond $i1267} true;
    goto $bb1081, $bb1082;

  $bb1082:
    assume !($i1267 == 1);
    assume {:verifier.code 0} true;
    goto $bb1083;

  $bb1083:
    assume {:verifier.code 0} true;
    $i1265 := $i1266;
    goto $bb1080;

  $bb1081:
    assume {:verifier.code 0} true;
    assume $i1267 == 1;
    goto $bb8;

  $bb1071:
    assume $i1256 == 1;
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $i1258 := $add.i32($i1249, 1);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i1259 := $sgt.i32($i1258, 2);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $i15 := $i1258;
    assume {:branchcond $i1259} true;
    goto $bb1074, $bb1075;

  $bb1075:
    assume !($i1259 == 1);
    assume {:verifier.code 0} true;
    goto $bb1076;

  $bb1076:
    assume {:verifier.code 0} true;
    $i1257 := $i1258;
    goto $bb1073;

  $bb1074:
    assume {:verifier.code 0} true;
    assume $i1259 == 1;
    goto $bb8;

  $bb1064:
    assume $i1248 == 1;
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i1250 := $add.i32($i1241, 1);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i1251 := $sgt.i32($i1250, 2);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $i15 := $i1250;
    assume {:branchcond $i1251} true;
    goto $bb1067, $bb1068;

  $bb1068:
    assume !($i1251 == 1);
    assume {:verifier.code 0} true;
    goto $bb1069;

  $bb1069:
    assume {:verifier.code 0} true;
    $i1249 := $i1250;
    goto $bb1066;

  $bb1067:
    assume {:verifier.code 0} true;
    assume $i1251 == 1;
    goto $bb8;

  $bb1057:
    assume $i1240 == 1;
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i1242 := $add.i32($i1233, 1);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i1243 := $sgt.i32($i1242, 2);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i15 := $i1242;
    assume {:branchcond $i1243} true;
    goto $bb1060, $bb1061;

  $bb1061:
    assume !($i1243 == 1);
    assume {:verifier.code 0} true;
    goto $bb1062;

  $bb1062:
    assume {:verifier.code 0} true;
    $i1241 := $i1242;
    goto $bb1059;

  $bb1060:
    assume {:verifier.code 0} true;
    assume $i1243 == 1;
    goto $bb8;

  $bb1050:
    assume $i1232 == 1;
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $i1234 := $add.i32($i1225, 1);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $i1235 := $sgt.i32($i1234, 2);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $i15 := $i1234;
    assume {:branchcond $i1235} true;
    goto $bb1053, $bb1054;

  $bb1054:
    assume !($i1235 == 1);
    assume {:verifier.code 0} true;
    goto $bb1055;

  $bb1055:
    assume {:verifier.code 0} true;
    $i1233 := $i1234;
    goto $bb1052;

  $bb1053:
    assume {:verifier.code 0} true;
    assume $i1235 == 1;
    goto $bb8;

  $bb1043:
    assume $i1224 == 1;
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $i1226 := $add.i32($i1217, 1);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i1227 := $sgt.i32($i1226, 2);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i15 := $i1226;
    assume {:branchcond $i1227} true;
    goto $bb1046, $bb1047;

  $bb1047:
    assume !($i1227 == 1);
    assume {:verifier.code 0} true;
    goto $bb1048;

  $bb1048:
    assume {:verifier.code 0} true;
    $i1225 := $i1226;
    goto $bb1045;

  $bb1046:
    assume {:verifier.code 0} true;
    assume $i1227 == 1;
    goto $bb8;

  $bb1036:
    assume $i1216 == 1;
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $i1218 := $add.i32($i1209, 1);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i1219 := $sgt.i32($i1218, 2);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i15 := $i1218;
    assume {:branchcond $i1219} true;
    goto $bb1039, $bb1040;

  $bb1040:
    assume !($i1219 == 1);
    assume {:verifier.code 0} true;
    goto $bb1041;

  $bb1041:
    assume {:verifier.code 0} true;
    $i1217 := $i1218;
    goto $bb1038;

  $bb1039:
    assume {:verifier.code 0} true;
    assume $i1219 == 1;
    goto $bb8;

  $bb1029:
    assume $i1208 == 1;
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i1210 := $add.i32($i1201, 1);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i1211 := $sgt.i32($i1210, 2);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i15 := $i1210;
    assume {:branchcond $i1211} true;
    goto $bb1032, $bb1033;

  $bb1033:
    assume !($i1211 == 1);
    assume {:verifier.code 0} true;
    goto $bb1034;

  $bb1034:
    assume {:verifier.code 0} true;
    $i1209 := $i1210;
    goto $bb1031;

  $bb1032:
    assume {:verifier.code 0} true;
    assume $i1211 == 1;
    goto $bb8;

  $bb1022:
    assume $i1200 == 1;
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $i1202 := $add.i32($i1193, 1);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $i1203 := $sgt.i32($i1202, 2);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i15 := $i1202;
    assume {:branchcond $i1203} true;
    goto $bb1025, $bb1026;

  $bb1026:
    assume !($i1203 == 1);
    assume {:verifier.code 0} true;
    goto $bb1027;

  $bb1027:
    assume {:verifier.code 0} true;
    $i1201 := $i1202;
    goto $bb1024;

  $bb1025:
    assume {:verifier.code 0} true;
    assume $i1203 == 1;
    goto $bb8;

  $bb1015:
    assume $i1192 == 1;
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i1194 := $add.i32($i1185, 1);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i1195 := $sgt.i32($i1194, 2);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i15 := $i1194;
    assume {:branchcond $i1195} true;
    goto $bb1018, $bb1019;

  $bb1019:
    assume !($i1195 == 1);
    assume {:verifier.code 0} true;
    goto $bb1020;

  $bb1020:
    assume {:verifier.code 0} true;
    $i1193 := $i1194;
    goto $bb1017;

  $bb1018:
    assume {:verifier.code 0} true;
    assume $i1195 == 1;
    goto $bb8;

  $bb1008:
    assume $i1184 == 1;
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i1186 := $add.i32($i1177, 1);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $i1187 := $sgt.i32($i1186, 2);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i15 := $i1186;
    assume {:branchcond $i1187} true;
    goto $bb1011, $bb1012;

  $bb1012:
    assume !($i1187 == 1);
    assume {:verifier.code 0} true;
    goto $bb1013;

  $bb1013:
    assume {:verifier.code 0} true;
    $i1185 := $i1186;
    goto $bb1010;

  $bb1011:
    assume {:verifier.code 0} true;
    assume $i1187 == 1;
    goto $bb8;

  $bb1001:
    assume $i1176 == 1;
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i1178 := $add.i32($i1169, 1);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i1179 := $sgt.i32($i1178, 2);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i15 := $i1178;
    assume {:branchcond $i1179} true;
    goto $bb1004, $bb1005;

  $bb1005:
    assume !($i1179 == 1);
    assume {:verifier.code 0} true;
    goto $bb1006;

  $bb1006:
    assume {:verifier.code 0} true;
    $i1177 := $i1178;
    goto $bb1003;

  $bb1004:
    assume {:verifier.code 0} true;
    assume $i1179 == 1;
    goto $bb8;

  $bb994:
    assume $i1168 == 1;
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $i1170 := $add.i32($i1161, 1);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i1171 := $sgt.i32($i1170, 2);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i15 := $i1170;
    assume {:branchcond $i1171} true;
    goto $bb997, $bb998;

  $bb998:
    assume !($i1171 == 1);
    assume {:verifier.code 0} true;
    goto $bb999;

  $bb999:
    assume {:verifier.code 0} true;
    $i1169 := $i1170;
    goto $bb996;

  $bb997:
    assume {:verifier.code 0} true;
    assume $i1171 == 1;
    goto $bb8;

  $bb987:
    assume $i1160 == 1;
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i1162 := $add.i32($i1153, 1);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $i1163 := $sgt.i32($i1162, 2);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i15 := $i1162;
    assume {:branchcond $i1163} true;
    goto $bb990, $bb991;

  $bb991:
    assume !($i1163 == 1);
    assume {:verifier.code 0} true;
    goto $bb992;

  $bb992:
    assume {:verifier.code 0} true;
    $i1161 := $i1162;
    goto $bb989;

  $bb990:
    assume {:verifier.code 0} true;
    assume $i1163 == 1;
    goto $bb8;

  $bb980:
    assume $i1152 == 1;
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i1154 := $add.i32($i1145, 1);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $i1155 := $sgt.i32($i1154, 2);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $i15 := $i1154;
    assume {:branchcond $i1155} true;
    goto $bb983, $bb984;

  $bb984:
    assume !($i1155 == 1);
    assume {:verifier.code 0} true;
    goto $bb985;

  $bb985:
    assume {:verifier.code 0} true;
    $i1153 := $i1154;
    goto $bb982;

  $bb983:
    assume {:verifier.code 0} true;
    assume $i1155 == 1;
    goto $bb8;

  $bb973:
    assume $i1144 == 1;
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i1146 := $add.i32($i1137, 1);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $i1147 := $sgt.i32($i1146, 2);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $i15 := $i1146;
    assume {:branchcond $i1147} true;
    goto $bb976, $bb977;

  $bb977:
    assume !($i1147 == 1);
    assume {:verifier.code 0} true;
    goto $bb978;

  $bb978:
    assume {:verifier.code 0} true;
    $i1145 := $i1146;
    goto $bb975;

  $bb976:
    assume {:verifier.code 0} true;
    assume $i1147 == 1;
    goto $bb8;

  $bb966:
    assume $i1136 == 1;
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $i1138 := $add.i32($i1129, 1);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $i1139 := $sgt.i32($i1138, 2);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i15 := $i1138;
    assume {:branchcond $i1139} true;
    goto $bb969, $bb970;

  $bb970:
    assume !($i1139 == 1);
    assume {:verifier.code 0} true;
    goto $bb971;

  $bb971:
    assume {:verifier.code 0} true;
    $i1137 := $i1138;
    goto $bb968;

  $bb969:
    assume {:verifier.code 0} true;
    assume $i1139 == 1;
    goto $bb8;

  $bb959:
    assume $i1128 == 1;
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $i1130 := $add.i32($i1121, 1);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $i1131 := $sgt.i32($i1130, 2);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $i15 := $i1130;
    assume {:branchcond $i1131} true;
    goto $bb962, $bb963;

  $bb963:
    assume !($i1131 == 1);
    assume {:verifier.code 0} true;
    goto $bb964;

  $bb964:
    assume {:verifier.code 0} true;
    $i1129 := $i1130;
    goto $bb961;

  $bb962:
    assume {:verifier.code 0} true;
    assume $i1131 == 1;
    goto $bb8;

  $bb952:
    assume $i1120 == 1;
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i1122 := $add.i32($i1113, 1);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i1123 := $sgt.i32($i1122, 2);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $i15 := $i1122;
    assume {:branchcond $i1123} true;
    goto $bb955, $bb956;

  $bb956:
    assume !($i1123 == 1);
    assume {:verifier.code 0} true;
    goto $bb957;

  $bb957:
    assume {:verifier.code 0} true;
    $i1121 := $i1122;
    goto $bb954;

  $bb955:
    assume {:verifier.code 0} true;
    assume $i1123 == 1;
    goto $bb8;

  $bb945:
    assume $i1112 == 1;
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i1114 := $add.i32($i1105, 1);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i1115 := $sgt.i32($i1114, 2);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i15 := $i1114;
    assume {:branchcond $i1115} true;
    goto $bb948, $bb949;

  $bb949:
    assume !($i1115 == 1);
    assume {:verifier.code 0} true;
    goto $bb950;

  $bb950:
    assume {:verifier.code 0} true;
    $i1113 := $i1114;
    goto $bb947;

  $bb948:
    assume {:verifier.code 0} true;
    assume $i1115 == 1;
    goto $bb8;

  $bb938:
    assume $i1104 == 1;
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $i1106 := $add.i32($i1097, 1);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i1107 := $sgt.i32($i1106, 2);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i15 := $i1106;
    assume {:branchcond $i1107} true;
    goto $bb941, $bb942;

  $bb942:
    assume !($i1107 == 1);
    assume {:verifier.code 0} true;
    goto $bb943;

  $bb943:
    assume {:verifier.code 0} true;
    $i1105 := $i1106;
    goto $bb940;

  $bb941:
    assume {:verifier.code 0} true;
    assume $i1107 == 1;
    goto $bb8;

  $bb931:
    assume $i1096 == 1;
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $i1098 := $add.i32($i1089, 1);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $i1099 := $sgt.i32($i1098, 2);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i15 := $i1098;
    assume {:branchcond $i1099} true;
    goto $bb934, $bb935;

  $bb935:
    assume !($i1099 == 1);
    assume {:verifier.code 0} true;
    goto $bb936;

  $bb936:
    assume {:verifier.code 0} true;
    $i1097 := $i1098;
    goto $bb933;

  $bb934:
    assume {:verifier.code 0} true;
    assume $i1099 == 1;
    goto $bb8;

  $bb924:
    assume $i1088 == 1;
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i1090 := $add.i32($i1081, 1);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $i1091 := $sgt.i32($i1090, 2);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i15 := $i1090;
    assume {:branchcond $i1091} true;
    goto $bb927, $bb928;

  $bb928:
    assume !($i1091 == 1);
    assume {:verifier.code 0} true;
    goto $bb929;

  $bb929:
    assume {:verifier.code 0} true;
    $i1089 := $i1090;
    goto $bb926;

  $bb927:
    assume {:verifier.code 0} true;
    assume $i1091 == 1;
    goto $bb8;

  $bb917:
    assume $i1080 == 1;
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i1082 := $add.i32($i1073, 1);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i1083 := $sgt.i32($i1082, 2);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $i15 := $i1082;
    assume {:branchcond $i1083} true;
    goto $bb920, $bb921;

  $bb921:
    assume !($i1083 == 1);
    assume {:verifier.code 0} true;
    goto $bb922;

  $bb922:
    assume {:verifier.code 0} true;
    $i1081 := $i1082;
    goto $bb919;

  $bb920:
    assume {:verifier.code 0} true;
    assume $i1083 == 1;
    goto $bb8;

  $bb910:
    assume $i1072 == 1;
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $i1074 := $add.i32($i1065, 1);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $i1075 := $sgt.i32($i1074, 2);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $i15 := $i1074;
    assume {:branchcond $i1075} true;
    goto $bb913, $bb914;

  $bb914:
    assume !($i1075 == 1);
    assume {:verifier.code 0} true;
    goto $bb915;

  $bb915:
    assume {:verifier.code 0} true;
    $i1073 := $i1074;
    goto $bb912;

  $bb913:
    assume {:verifier.code 0} true;
    assume $i1075 == 1;
    goto $bb8;

  $bb903:
    assume $i1064 == 1;
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $i1066 := $add.i32($i1057, 1);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i1067 := $sgt.i32($i1066, 2);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i15 := $i1066;
    assume {:branchcond $i1067} true;
    goto $bb906, $bb907;

  $bb907:
    assume !($i1067 == 1);
    assume {:verifier.code 0} true;
    goto $bb908;

  $bb908:
    assume {:verifier.code 0} true;
    $i1065 := $i1066;
    goto $bb905;

  $bb906:
    assume {:verifier.code 0} true;
    assume $i1067 == 1;
    goto $bb8;

  $bb896:
    assume $i1056 == 1;
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i1058 := $add.i32($i1049, 1);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $i1059 := $sgt.i32($i1058, 2);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $i15 := $i1058;
    assume {:branchcond $i1059} true;
    goto $bb899, $bb900;

  $bb900:
    assume !($i1059 == 1);
    assume {:verifier.code 0} true;
    goto $bb901;

  $bb901:
    assume {:verifier.code 0} true;
    $i1057 := $i1058;
    goto $bb898;

  $bb899:
    assume {:verifier.code 0} true;
    assume $i1059 == 1;
    goto $bb8;

  $bb889:
    assume $i1048 == 1;
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $i1050 := $add.i32($i1041, 1);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $i1051 := $sgt.i32($i1050, 2);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i15 := $i1050;
    assume {:branchcond $i1051} true;
    goto $bb892, $bb893;

  $bb893:
    assume !($i1051 == 1);
    assume {:verifier.code 0} true;
    goto $bb894;

  $bb894:
    assume {:verifier.code 0} true;
    $i1049 := $i1050;
    goto $bb891;

  $bb892:
    assume {:verifier.code 0} true;
    assume $i1051 == 1;
    goto $bb8;

  $bb882:
    assume $i1040 == 1;
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i1042 := $add.i32($i1033, 1);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $i1043 := $sgt.i32($i1042, 2);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $i15 := $i1042;
    assume {:branchcond $i1043} true;
    goto $bb885, $bb886;

  $bb886:
    assume !($i1043 == 1);
    assume {:verifier.code 0} true;
    goto $bb887;

  $bb887:
    assume {:verifier.code 0} true;
    $i1041 := $i1042;
    goto $bb884;

  $bb885:
    assume {:verifier.code 0} true;
    assume $i1043 == 1;
    goto $bb8;

  $bb875:
    assume $i1032 == 1;
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i1034 := $add.i32($i1025, 1);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $i1035 := $sgt.i32($i1034, 2);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i15 := $i1034;
    assume {:branchcond $i1035} true;
    goto $bb878, $bb879;

  $bb879:
    assume !($i1035 == 1);
    assume {:verifier.code 0} true;
    goto $bb880;

  $bb880:
    assume {:verifier.code 0} true;
    $i1033 := $i1034;
    goto $bb877;

  $bb878:
    assume {:verifier.code 0} true;
    assume $i1035 == 1;
    goto $bb8;

  $bb868:
    assume $i1024 == 1;
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $i1026 := $add.i32($i1017, 1);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $i1027 := $sgt.i32($i1026, 2);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i15 := $i1026;
    assume {:branchcond $i1027} true;
    goto $bb871, $bb872;

  $bb872:
    assume !($i1027 == 1);
    assume {:verifier.code 0} true;
    goto $bb873;

  $bb873:
    assume {:verifier.code 0} true;
    $i1025 := $i1026;
    goto $bb870;

  $bb871:
    assume {:verifier.code 0} true;
    assume $i1027 == 1;
    goto $bb8;

  $bb861:
    assume $i1016 == 1;
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $i1018 := $add.i32($i1009, 1);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i1019 := $sgt.i32($i1018, 2);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $i15 := $i1018;
    assume {:branchcond $i1019} true;
    goto $bb864, $bb865;

  $bb865:
    assume !($i1019 == 1);
    assume {:verifier.code 0} true;
    goto $bb866;

  $bb866:
    assume {:verifier.code 0} true;
    $i1017 := $i1018;
    goto $bb863;

  $bb864:
    assume {:verifier.code 0} true;
    assume $i1019 == 1;
    goto $bb8;

  $bb854:
    assume $i1008 == 1;
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $i1010 := $add.i32($i1001, 1);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $i1011 := $sgt.i32($i1010, 2);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $i15 := $i1010;
    assume {:branchcond $i1011} true;
    goto $bb857, $bb858;

  $bb858:
    assume !($i1011 == 1);
    assume {:verifier.code 0} true;
    goto $bb859;

  $bb859:
    assume {:verifier.code 0} true;
    $i1009 := $i1010;
    goto $bb856;

  $bb857:
    assume {:verifier.code 0} true;
    assume $i1011 == 1;
    goto $bb8;

  $bb847:
    assume $i1000 == 1;
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $i1002 := $add.i32($i993, 1);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $i1003 := $sgt.i32($i1002, 2);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $i15 := $i1002;
    assume {:branchcond $i1003} true;
    goto $bb850, $bb851;

  $bb851:
    assume !($i1003 == 1);
    assume {:verifier.code 0} true;
    goto $bb852;

  $bb852:
    assume {:verifier.code 0} true;
    $i1001 := $i1002;
    goto $bb849;

  $bb850:
    assume {:verifier.code 0} true;
    assume $i1003 == 1;
    goto $bb8;

  $bb840:
    assume $i992 == 1;
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i994 := $add.i32($i985, 1);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i995 := $sgt.i32($i994, 2);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $i15 := $i994;
    assume {:branchcond $i995} true;
    goto $bb843, $bb844;

  $bb844:
    assume !($i995 == 1);
    assume {:verifier.code 0} true;
    goto $bb845;

  $bb845:
    assume {:verifier.code 0} true;
    $i993 := $i994;
    goto $bb842;

  $bb843:
    assume {:verifier.code 0} true;
    assume $i995 == 1;
    goto $bb8;

  $bb833:
    assume $i984 == 1;
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $i986 := $add.i32($i977, 1);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i987 := $sgt.i32($i986, 2);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i15 := $i986;
    assume {:branchcond $i987} true;
    goto $bb836, $bb837;

  $bb837:
    assume !($i987 == 1);
    assume {:verifier.code 0} true;
    goto $bb838;

  $bb838:
    assume {:verifier.code 0} true;
    $i985 := $i986;
    goto $bb835;

  $bb836:
    assume {:verifier.code 0} true;
    assume $i987 == 1;
    goto $bb8;

  $bb826:
    assume $i976 == 1;
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i978 := $add.i32($i969, 1);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i979 := $sgt.i32($i978, 2);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $i15 := $i978;
    assume {:branchcond $i979} true;
    goto $bb829, $bb830;

  $bb830:
    assume !($i979 == 1);
    assume {:verifier.code 0} true;
    goto $bb831;

  $bb831:
    assume {:verifier.code 0} true;
    $i977 := $i978;
    goto $bb828;

  $bb829:
    assume {:verifier.code 0} true;
    assume $i979 == 1;
    goto $bb8;

  $bb819:
    assume $i968 == 1;
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $i970 := $add.i32($i961, 1);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i971 := $sgt.i32($i970, 2);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i15 := $i970;
    assume {:branchcond $i971} true;
    goto $bb822, $bb823;

  $bb823:
    assume !($i971 == 1);
    assume {:verifier.code 0} true;
    goto $bb824;

  $bb824:
    assume {:verifier.code 0} true;
    $i969 := $i970;
    goto $bb821;

  $bb822:
    assume {:verifier.code 0} true;
    assume $i971 == 1;
    goto $bb8;

  $bb812:
    assume $i960 == 1;
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $i962 := $add.i32($i953, 1);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $i963 := $sgt.i32($i962, 2);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i15 := $i962;
    assume {:branchcond $i963} true;
    goto $bb815, $bb816;

  $bb816:
    assume !($i963 == 1);
    assume {:verifier.code 0} true;
    goto $bb817;

  $bb817:
    assume {:verifier.code 0} true;
    $i961 := $i962;
    goto $bb814;

  $bb815:
    assume {:verifier.code 0} true;
    assume $i963 == 1;
    goto $bb8;

  $bb805:
    assume $i952 == 1;
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $i954 := $add.i32($i945, 1);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $i955 := $sgt.i32($i954, 2);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i15 := $i954;
    assume {:branchcond $i955} true;
    goto $bb808, $bb809;

  $bb809:
    assume !($i955 == 1);
    assume {:verifier.code 0} true;
    goto $bb810;

  $bb810:
    assume {:verifier.code 0} true;
    $i953 := $i954;
    goto $bb807;

  $bb808:
    assume {:verifier.code 0} true;
    assume $i955 == 1;
    goto $bb8;

  $bb798:
    assume $i944 == 1;
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $i946 := $add.i32($i937, 1);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $i947 := $sgt.i32($i946, 2);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i15 := $i946;
    assume {:branchcond $i947} true;
    goto $bb801, $bb802;

  $bb802:
    assume !($i947 == 1);
    assume {:verifier.code 0} true;
    goto $bb803;

  $bb803:
    assume {:verifier.code 0} true;
    $i945 := $i946;
    goto $bb800;

  $bb801:
    assume {:verifier.code 0} true;
    assume $i947 == 1;
    goto $bb8;

  $bb791:
    assume $i936 == 1;
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $i938 := $add.i32($i929, 1);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i939 := $sgt.i32($i938, 2);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $i15 := $i938;
    assume {:branchcond $i939} true;
    goto $bb794, $bb795;

  $bb795:
    assume !($i939 == 1);
    assume {:verifier.code 0} true;
    goto $bb796;

  $bb796:
    assume {:verifier.code 0} true;
    $i937 := $i938;
    goto $bb793;

  $bb794:
    assume {:verifier.code 0} true;
    assume $i939 == 1;
    goto $bb8;

  $bb784:
    assume $i928 == 1;
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i930 := $add.i32($i921, 1);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $i931 := $sgt.i32($i930, 2);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $i15 := $i930;
    assume {:branchcond $i931} true;
    goto $bb787, $bb788;

  $bb788:
    assume !($i931 == 1);
    assume {:verifier.code 0} true;
    goto $bb789;

  $bb789:
    assume {:verifier.code 0} true;
    $i929 := $i930;
    goto $bb786;

  $bb787:
    assume {:verifier.code 0} true;
    assume $i931 == 1;
    goto $bb8;

  $bb777:
    assume $i920 == 1;
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i922 := $add.i32($i913, 1);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i923 := $sgt.i32($i922, 2);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i15 := $i922;
    assume {:branchcond $i923} true;
    goto $bb780, $bb781;

  $bb781:
    assume !($i923 == 1);
    assume {:verifier.code 0} true;
    goto $bb782;

  $bb782:
    assume {:verifier.code 0} true;
    $i921 := $i922;
    goto $bb779;

  $bb780:
    assume {:verifier.code 0} true;
    assume $i923 == 1;
    goto $bb8;

  $bb770:
    assume $i912 == 1;
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $i914 := $add.i32($i905, 1);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i915 := $sgt.i32($i914, 2);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i15 := $i914;
    assume {:branchcond $i915} true;
    goto $bb773, $bb774;

  $bb774:
    assume !($i915 == 1);
    assume {:verifier.code 0} true;
    goto $bb775;

  $bb775:
    assume {:verifier.code 0} true;
    $i913 := $i914;
    goto $bb772;

  $bb773:
    assume {:verifier.code 0} true;
    assume $i915 == 1;
    goto $bb8;

  $bb763:
    assume $i904 == 1;
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i906 := $add.i32($i897, 1);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $i907 := $sgt.i32($i906, 2);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i15 := $i906;
    assume {:branchcond $i907} true;
    goto $bb766, $bb767;

  $bb767:
    assume !($i907 == 1);
    assume {:verifier.code 0} true;
    goto $bb768;

  $bb768:
    assume {:verifier.code 0} true;
    $i905 := $i906;
    goto $bb765;

  $bb766:
    assume {:verifier.code 0} true;
    assume $i907 == 1;
    goto $bb8;

  $bb756:
    assume $i896 == 1;
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $i898 := $add.i32($i889, 1);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $i899 := $sgt.i32($i898, 2);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $i15 := $i898;
    assume {:branchcond $i899} true;
    goto $bb759, $bb760;

  $bb760:
    assume !($i899 == 1);
    assume {:verifier.code 0} true;
    goto $bb761;

  $bb761:
    assume {:verifier.code 0} true;
    $i897 := $i898;
    goto $bb758;

  $bb759:
    assume {:verifier.code 0} true;
    assume $i899 == 1;
    goto $bb8;

  $bb749:
    assume $i888 == 1;
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $i890 := $add.i32($i881, 1);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $i891 := $sgt.i32($i890, 2);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $i15 := $i890;
    assume {:branchcond $i891} true;
    goto $bb752, $bb753;

  $bb753:
    assume !($i891 == 1);
    assume {:verifier.code 0} true;
    goto $bb754;

  $bb754:
    assume {:verifier.code 0} true;
    $i889 := $i890;
    goto $bb751;

  $bb752:
    assume {:verifier.code 0} true;
    assume $i891 == 1;
    goto $bb8;

  $bb742:
    assume $i880 == 1;
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $i882 := $add.i32($i873, 1);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $i883 := $sgt.i32($i882, 2);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $i15 := $i882;
    assume {:branchcond $i883} true;
    goto $bb745, $bb746;

  $bb746:
    assume !($i883 == 1);
    assume {:verifier.code 0} true;
    goto $bb747;

  $bb747:
    assume {:verifier.code 0} true;
    $i881 := $i882;
    goto $bb744;

  $bb745:
    assume {:verifier.code 0} true;
    assume $i883 == 1;
    goto $bb8;

  $bb735:
    assume $i872 == 1;
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i874 := $add.i32($i865, 1);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i875 := $sgt.i32($i874, 2);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $i15 := $i874;
    assume {:branchcond $i875} true;
    goto $bb738, $bb739;

  $bb739:
    assume !($i875 == 1);
    assume {:verifier.code 0} true;
    goto $bb740;

  $bb740:
    assume {:verifier.code 0} true;
    $i873 := $i874;
    goto $bb737;

  $bb738:
    assume {:verifier.code 0} true;
    assume $i875 == 1;
    goto $bb8;

  $bb728:
    assume $i864 == 1;
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $i866 := $add.i32($i857, 1);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $i867 := $sgt.i32($i866, 2);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $i15 := $i866;
    assume {:branchcond $i867} true;
    goto $bb731, $bb732;

  $bb732:
    assume !($i867 == 1);
    assume {:verifier.code 0} true;
    goto $bb733;

  $bb733:
    assume {:verifier.code 0} true;
    $i865 := $i866;
    goto $bb730;

  $bb731:
    assume {:verifier.code 0} true;
    assume $i867 == 1;
    goto $bb8;

  $bb721:
    assume $i856 == 1;
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $i858 := $add.i32($i849, 1);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $i859 := $sgt.i32($i858, 2);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i15 := $i858;
    assume {:branchcond $i859} true;
    goto $bb724, $bb725;

  $bb725:
    assume !($i859 == 1);
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb726:
    assume {:verifier.code 0} true;
    $i857 := $i858;
    goto $bb723;

  $bb724:
    assume {:verifier.code 0} true;
    assume $i859 == 1;
    goto $bb8;

  $bb714:
    assume $i848 == 1;
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i850 := $add.i32($i841, 1);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i851 := $sgt.i32($i850, 2);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $i15 := $i850;
    assume {:branchcond $i851} true;
    goto $bb717, $bb718;

  $bb718:
    assume !($i851 == 1);
    assume {:verifier.code 0} true;
    goto $bb719;

  $bb719:
    assume {:verifier.code 0} true;
    $i849 := $i850;
    goto $bb716;

  $bb717:
    assume {:verifier.code 0} true;
    assume $i851 == 1;
    goto $bb8;

  $bb707:
    assume $i840 == 1;
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i842 := $add.i32($i833, 1);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i843 := $sgt.i32($i842, 2);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i15 := $i842;
    assume {:branchcond $i843} true;
    goto $bb710, $bb711;

  $bb711:
    assume !($i843 == 1);
    assume {:verifier.code 0} true;
    goto $bb712;

  $bb712:
    assume {:verifier.code 0} true;
    $i841 := $i842;
    goto $bb709;

  $bb710:
    assume {:verifier.code 0} true;
    assume $i843 == 1;
    goto $bb8;

  $bb700:
    assume $i832 == 1;
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i834 := $add.i32($i825, 1);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $i835 := $sgt.i32($i834, 2);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i15 := $i834;
    assume {:branchcond $i835} true;
    goto $bb703, $bb704;

  $bb704:
    assume !($i835 == 1);
    assume {:verifier.code 0} true;
    goto $bb705;

  $bb705:
    assume {:verifier.code 0} true;
    $i833 := $i834;
    goto $bb702;

  $bb703:
    assume {:verifier.code 0} true;
    assume $i835 == 1;
    goto $bb8;

  $bb693:
    assume $i824 == 1;
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $i826 := $add.i32($i817, 1);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i827 := $sgt.i32($i826, 2);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i15 := $i826;
    assume {:branchcond $i827} true;
    goto $bb696, $bb697;

  $bb697:
    assume !($i827 == 1);
    assume {:verifier.code 0} true;
    goto $bb698;

  $bb698:
    assume {:verifier.code 0} true;
    $i825 := $i826;
    goto $bb695;

  $bb696:
    assume {:verifier.code 0} true;
    assume $i827 == 1;
    goto $bb8;

  $bb686:
    assume $i816 == 1;
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i818 := $add.i32($i809, 1);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i819 := $sgt.i32($i818, 2);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $i15 := $i818;
    assume {:branchcond $i819} true;
    goto $bb689, $bb690;

  $bb690:
    assume !($i819 == 1);
    assume {:verifier.code 0} true;
    goto $bb691;

  $bb691:
    assume {:verifier.code 0} true;
    $i817 := $i818;
    goto $bb688;

  $bb689:
    assume {:verifier.code 0} true;
    assume $i819 == 1;
    goto $bb8;

  $bb679:
    assume $i808 == 1;
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i810 := $add.i32($i801, 1);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i811 := $sgt.i32($i810, 2);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i15 := $i810;
    assume {:branchcond $i811} true;
    goto $bb682, $bb683;

  $bb683:
    assume !($i811 == 1);
    assume {:verifier.code 0} true;
    goto $bb684;

  $bb684:
    assume {:verifier.code 0} true;
    $i809 := $i810;
    goto $bb681;

  $bb682:
    assume {:verifier.code 0} true;
    assume $i811 == 1;
    goto $bb8;

  $bb672:
    assume $i800 == 1;
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $i802 := $add.i32($i793, 1);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $i803 := $sgt.i32($i802, 2);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i15 := $i802;
    assume {:branchcond $i803} true;
    goto $bb675, $bb676;

  $bb676:
    assume !($i803 == 1);
    assume {:verifier.code 0} true;
    goto $bb677;

  $bb677:
    assume {:verifier.code 0} true;
    $i801 := $i802;
    goto $bb674;

  $bb675:
    assume {:verifier.code 0} true;
    assume $i803 == 1;
    goto $bb8;

  $bb665:
    assume $i792 == 1;
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $i794 := $add.i32($i785, 1);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i795 := $sgt.i32($i794, 2);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $i15 := $i794;
    assume {:branchcond $i795} true;
    goto $bb668, $bb669;

  $bb669:
    assume !($i795 == 1);
    assume {:verifier.code 0} true;
    goto $bb670;

  $bb670:
    assume {:verifier.code 0} true;
    $i793 := $i794;
    goto $bb667;

  $bb668:
    assume {:verifier.code 0} true;
    assume $i795 == 1;
    goto $bb8;

  $bb658:
    assume $i784 == 1;
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i786 := $add.i32($i777, 1);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $i787 := $sgt.i32($i786, 2);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $i15 := $i786;
    assume {:branchcond $i787} true;
    goto $bb661, $bb662;

  $bb662:
    assume !($i787 == 1);
    assume {:verifier.code 0} true;
    goto $bb663;

  $bb663:
    assume {:verifier.code 0} true;
    $i785 := $i786;
    goto $bb660;

  $bb661:
    assume {:verifier.code 0} true;
    assume $i787 == 1;
    goto $bb8;

  $bb651:
    assume $i776 == 1;
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i778 := $add.i32($i769, 1);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i779 := $sgt.i32($i778, 2);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i15 := $i778;
    assume {:branchcond $i779} true;
    goto $bb654, $bb655;

  $bb655:
    assume !($i779 == 1);
    assume {:verifier.code 0} true;
    goto $bb656;

  $bb656:
    assume {:verifier.code 0} true;
    $i777 := $i778;
    goto $bb653;

  $bb654:
    assume {:verifier.code 0} true;
    assume $i779 == 1;
    goto $bb8;

  $bb644:
    assume $i768 == 1;
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $i770 := $add.i32($i761, 1);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i771 := $sgt.i32($i770, 2);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i15 := $i770;
    assume {:branchcond $i771} true;
    goto $bb647, $bb648;

  $bb648:
    assume !($i771 == 1);
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb649:
    assume {:verifier.code 0} true;
    $i769 := $i770;
    goto $bb646;

  $bb647:
    assume {:verifier.code 0} true;
    assume $i771 == 1;
    goto $bb8;

  $bb637:
    assume $i760 == 1;
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i762 := $add.i32($i753, 1);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $i763 := $sgt.i32($i762, 2);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i15 := $i762;
    assume {:branchcond $i763} true;
    goto $bb640, $bb641;

  $bb641:
    assume !($i763 == 1);
    assume {:verifier.code 0} true;
    goto $bb642;

  $bb642:
    assume {:verifier.code 0} true;
    $i761 := $i762;
    goto $bb639;

  $bb640:
    assume {:verifier.code 0} true;
    assume $i763 == 1;
    goto $bb8;

  $bb630:
    assume $i752 == 1;
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i754 := $add.i32($i745, 1);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $i755 := $sgt.i32($i754, 2);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $i15 := $i754;
    assume {:branchcond $i755} true;
    goto $bb633, $bb634;

  $bb634:
    assume !($i755 == 1);
    assume {:verifier.code 0} true;
    goto $bb635;

  $bb635:
    assume {:verifier.code 0} true;
    $i753 := $i754;
    goto $bb632;

  $bb633:
    assume {:verifier.code 0} true;
    assume $i755 == 1;
    goto $bb8;

  $bb623:
    assume $i744 == 1;
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $i746 := $add.i32($i737, 1);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i747 := $sgt.i32($i746, 2);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i15 := $i746;
    assume {:branchcond $i747} true;
    goto $bb626, $bb627;

  $bb627:
    assume !($i747 == 1);
    assume {:verifier.code 0} true;
    goto $bb628;

  $bb628:
    assume {:verifier.code 0} true;
    $i745 := $i746;
    goto $bb625;

  $bb626:
    assume {:verifier.code 0} true;
    assume $i747 == 1;
    goto $bb8;

  $bb616:
    assume $i736 == 1;
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i738 := $add.i32($i729, 1);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i739 := $sgt.i32($i738, 2);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i15 := $i738;
    assume {:branchcond $i739} true;
    goto $bb619, $bb620;

  $bb620:
    assume !($i739 == 1);
    assume {:verifier.code 0} true;
    goto $bb621;

  $bb621:
    assume {:verifier.code 0} true;
    $i737 := $i738;
    goto $bb618;

  $bb619:
    assume {:verifier.code 0} true;
    assume $i739 == 1;
    goto $bb8;

  $bb609:
    assume $i728 == 1;
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i730 := $add.i32($i721, 1);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i731 := $sgt.i32($i730, 2);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i15 := $i730;
    assume {:branchcond $i731} true;
    goto $bb612, $bb613;

  $bb613:
    assume !($i731 == 1);
    assume {:verifier.code 0} true;
    goto $bb614;

  $bb614:
    assume {:verifier.code 0} true;
    $i729 := $i730;
    goto $bb611;

  $bb612:
    assume {:verifier.code 0} true;
    assume $i731 == 1;
    goto $bb8;

  $bb602:
    assume $i720 == 1;
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i722 := $add.i32($i713, 1);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i723 := $sgt.i32($i722, 2);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i15 := $i722;
    assume {:branchcond $i723} true;
    goto $bb605, $bb606;

  $bb606:
    assume !($i723 == 1);
    assume {:verifier.code 0} true;
    goto $bb607;

  $bb607:
    assume {:verifier.code 0} true;
    $i721 := $i722;
    goto $bb604;

  $bb605:
    assume {:verifier.code 0} true;
    assume $i723 == 1;
    goto $bb8;

  $bb595:
    assume $i712 == 1;
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i714 := $add.i32($i705, 1);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i715 := $sgt.i32($i714, 2);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i15 := $i714;
    assume {:branchcond $i715} true;
    goto $bb598, $bb599;

  $bb599:
    assume !($i715 == 1);
    assume {:verifier.code 0} true;
    goto $bb600;

  $bb600:
    assume {:verifier.code 0} true;
    $i713 := $i714;
    goto $bb597;

  $bb598:
    assume {:verifier.code 0} true;
    assume $i715 == 1;
    goto $bb8;

  $bb588:
    assume $i704 == 1;
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i706 := $add.i32($i697, 1);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i707 := $sgt.i32($i706, 2);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i15 := $i706;
    assume {:branchcond $i707} true;
    goto $bb591, $bb592;

  $bb592:
    assume !($i707 == 1);
    assume {:verifier.code 0} true;
    goto $bb593;

  $bb593:
    assume {:verifier.code 0} true;
    $i705 := $i706;
    goto $bb590;

  $bb591:
    assume {:verifier.code 0} true;
    assume $i707 == 1;
    goto $bb8;

  $bb581:
    assume $i696 == 1;
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i698 := $add.i32($i689, 1);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i699 := $sgt.i32($i698, 2);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i15 := $i698;
    assume {:branchcond $i699} true;
    goto $bb584, $bb585;

  $bb585:
    assume !($i699 == 1);
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb586:
    assume {:verifier.code 0} true;
    $i697 := $i698;
    goto $bb583;

  $bb584:
    assume {:verifier.code 0} true;
    assume $i699 == 1;
    goto $bb8;

  $bb574:
    assume $i688 == 1;
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i690 := $add.i32($i681, 1);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i691 := $sgt.i32($i690, 2);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i15 := $i690;
    assume {:branchcond $i691} true;
    goto $bb577, $bb578;

  $bb578:
    assume !($i691 == 1);
    assume {:verifier.code 0} true;
    goto $bb579;

  $bb579:
    assume {:verifier.code 0} true;
    $i689 := $i690;
    goto $bb576;

  $bb577:
    assume {:verifier.code 0} true;
    assume $i691 == 1;
    goto $bb8;

  $bb567:
    assume $i680 == 1;
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $i682 := $add.i32($i673, 1);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $i683 := $sgt.i32($i682, 2);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i15 := $i682;
    assume {:branchcond $i683} true;
    goto $bb570, $bb571;

  $bb571:
    assume !($i683 == 1);
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb572:
    assume {:verifier.code 0} true;
    $i681 := $i682;
    goto $bb569;

  $bb570:
    assume {:verifier.code 0} true;
    assume $i683 == 1;
    goto $bb8;

  $bb560:
    assume $i672 == 1;
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i674 := $add.i32($i665, 1);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i675 := $sgt.i32($i674, 2);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i15 := $i674;
    assume {:branchcond $i675} true;
    goto $bb563, $bb564;

  $bb564:
    assume !($i675 == 1);
    assume {:verifier.code 0} true;
    goto $bb565;

  $bb565:
    assume {:verifier.code 0} true;
    $i673 := $i674;
    goto $bb562;

  $bb563:
    assume {:verifier.code 0} true;
    assume $i675 == 1;
    goto $bb8;

  $bb553:
    assume $i664 == 1;
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i666 := $add.i32($i657, 1);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $i667 := $sgt.i32($i666, 2);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i15 := $i666;
    assume {:branchcond $i667} true;
    goto $bb556, $bb557;

  $bb557:
    assume !($i667 == 1);
    assume {:verifier.code 0} true;
    goto $bb558;

  $bb558:
    assume {:verifier.code 0} true;
    $i665 := $i666;
    goto $bb555;

  $bb556:
    assume {:verifier.code 0} true;
    assume $i667 == 1;
    goto $bb8;

  $bb546:
    assume $i656 == 1;
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $i658 := $add.i32($i649, 1);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i659 := $sgt.i32($i658, 2);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i15 := $i658;
    assume {:branchcond $i659} true;
    goto $bb549, $bb550;

  $bb550:
    assume !($i659 == 1);
    assume {:verifier.code 0} true;
    goto $bb551;

  $bb551:
    assume {:verifier.code 0} true;
    $i657 := $i658;
    goto $bb548;

  $bb549:
    assume {:verifier.code 0} true;
    assume $i659 == 1;
    goto $bb8;

  $bb539:
    assume $i648 == 1;
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i650 := $add.i32($i641, 1);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i651 := $sgt.i32($i650, 2);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i15 := $i650;
    assume {:branchcond $i651} true;
    goto $bb542, $bb543;

  $bb543:
    assume !($i651 == 1);
    assume {:verifier.code 0} true;
    goto $bb544;

  $bb544:
    assume {:verifier.code 0} true;
    $i649 := $i650;
    goto $bb541;

  $bb542:
    assume {:verifier.code 0} true;
    assume $i651 == 1;
    goto $bb8;

  $bb532:
    assume $i640 == 1;
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i642 := $add.i32($i633, 1);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i643 := $sgt.i32($i642, 2);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i15 := $i642;
    assume {:branchcond $i643} true;
    goto $bb535, $bb536;

  $bb536:
    assume !($i643 == 1);
    assume {:verifier.code 0} true;
    goto $bb537;

  $bb537:
    assume {:verifier.code 0} true;
    $i641 := $i642;
    goto $bb534;

  $bb535:
    assume {:verifier.code 0} true;
    assume $i643 == 1;
    goto $bb8;

  $bb525:
    assume $i632 == 1;
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i634 := $add.i32($i625, 1);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i635 := $sgt.i32($i634, 2);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $i15 := $i634;
    assume {:branchcond $i635} true;
    goto $bb528, $bb529;

  $bb529:
    assume !($i635 == 1);
    assume {:verifier.code 0} true;
    goto $bb530;

  $bb530:
    assume {:verifier.code 0} true;
    $i633 := $i634;
    goto $bb527;

  $bb528:
    assume {:verifier.code 0} true;
    assume $i635 == 1;
    goto $bb8;

  $bb518:
    assume $i624 == 1;
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $i626 := $add.i32($i617, 1);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $i627 := $sgt.i32($i626, 2);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i15 := $i626;
    assume {:branchcond $i627} true;
    goto $bb521, $bb522;

  $bb522:
    assume !($i627 == 1);
    assume {:verifier.code 0} true;
    goto $bb523;

  $bb523:
    assume {:verifier.code 0} true;
    $i625 := $i626;
    goto $bb520;

  $bb521:
    assume {:verifier.code 0} true;
    assume $i627 == 1;
    goto $bb8;

  $bb511:
    assume $i616 == 1;
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i618 := $add.i32($i609, 1);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i619 := $sgt.i32($i618, 2);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i15 := $i618;
    assume {:branchcond $i619} true;
    goto $bb514, $bb515;

  $bb515:
    assume !($i619 == 1);
    assume {:verifier.code 0} true;
    goto $bb516;

  $bb516:
    assume {:verifier.code 0} true;
    $i617 := $i618;
    goto $bb513;

  $bb514:
    assume {:verifier.code 0} true;
    assume $i619 == 1;
    goto $bb8;

  $bb504:
    assume $i608 == 1;
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i610 := $add.i32($i601, 1);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i611 := $sgt.i32($i610, 2);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i15 := $i610;
    assume {:branchcond $i611} true;
    goto $bb507, $bb508;

  $bb508:
    assume !($i611 == 1);
    assume {:verifier.code 0} true;
    goto $bb509;

  $bb509:
    assume {:verifier.code 0} true;
    $i609 := $i610;
    goto $bb506;

  $bb507:
    assume {:verifier.code 0} true;
    assume $i611 == 1;
    goto $bb8;

  $bb497:
    assume $i600 == 1;
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $i602 := $add.i32($i593, 1);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i603 := $sgt.i32($i602, 2);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $i15 := $i602;
    assume {:branchcond $i603} true;
    goto $bb500, $bb501;

  $bb501:
    assume !($i603 == 1);
    assume {:verifier.code 0} true;
    goto $bb502;

  $bb502:
    assume {:verifier.code 0} true;
    $i601 := $i602;
    goto $bb499;

  $bb500:
    assume {:verifier.code 0} true;
    assume $i603 == 1;
    goto $bb8;

  $bb490:
    assume $i592 == 1;
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i594 := $add.i32($i585, 1);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $i595 := $sgt.i32($i594, 2);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i15 := $i594;
    assume {:branchcond $i595} true;
    goto $bb493, $bb494;

  $bb494:
    assume !($i595 == 1);
    assume {:verifier.code 0} true;
    goto $bb495;

  $bb495:
    assume {:verifier.code 0} true;
    $i593 := $i594;
    goto $bb492;

  $bb493:
    assume {:verifier.code 0} true;
    assume $i595 == 1;
    goto $bb8;

  $bb483:
    assume $i584 == 1;
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i586 := $add.i32($i577, 1);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i587 := $sgt.i32($i586, 2);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $i15 := $i586;
    assume {:branchcond $i587} true;
    goto $bb486, $bb487;

  $bb487:
    assume !($i587 == 1);
    assume {:verifier.code 0} true;
    goto $bb488;

  $bb488:
    assume {:verifier.code 0} true;
    $i585 := $i586;
    goto $bb485;

  $bb486:
    assume {:verifier.code 0} true;
    assume $i587 == 1;
    goto $bb8;

  $bb476:
    assume $i576 == 1;
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i578 := $add.i32($i569, 1);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i579 := $sgt.i32($i578, 2);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i15 := $i578;
    assume {:branchcond $i579} true;
    goto $bb479, $bb480;

  $bb480:
    assume !($i579 == 1);
    assume {:verifier.code 0} true;
    goto $bb481;

  $bb481:
    assume {:verifier.code 0} true;
    $i577 := $i578;
    goto $bb478;

  $bb479:
    assume {:verifier.code 0} true;
    assume $i579 == 1;
    goto $bb8;

  $bb469:
    assume $i568 == 1;
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $i570 := $add.i32($i561, 1);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $i571 := $sgt.i32($i570, 2);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i15 := $i570;
    assume {:branchcond $i571} true;
    goto $bb472, $bb473;

  $bb473:
    assume !($i571 == 1);
    assume {:verifier.code 0} true;
    goto $bb474;

  $bb474:
    assume {:verifier.code 0} true;
    $i569 := $i570;
    goto $bb471;

  $bb472:
    assume {:verifier.code 0} true;
    assume $i571 == 1;
    goto $bb8;

  $bb462:
    assume $i560 == 1;
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i562 := $add.i32($i553, 1);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $i563 := $sgt.i32($i562, 2);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i15 := $i562;
    assume {:branchcond $i563} true;
    goto $bb465, $bb466;

  $bb466:
    assume !($i563 == 1);
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb467:
    assume {:verifier.code 0} true;
    $i561 := $i562;
    goto $bb464;

  $bb465:
    assume {:verifier.code 0} true;
    assume $i563 == 1;
    goto $bb8;

  $bb455:
    assume $i552 == 1;
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i554 := $add.i32($i545, 1);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i555 := $sgt.i32($i554, 2);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $i15 := $i554;
    assume {:branchcond $i555} true;
    goto $bb458, $bb459;

  $bb459:
    assume !($i555 == 1);
    assume {:verifier.code 0} true;
    goto $bb460;

  $bb460:
    assume {:verifier.code 0} true;
    $i553 := $i554;
    goto $bb457;

  $bb458:
    assume {:verifier.code 0} true;
    assume $i555 == 1;
    goto $bb8;

  $bb448:
    assume $i544 == 1;
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $i546 := $add.i32($i537, 1);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $i547 := $sgt.i32($i546, 2);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $i15 := $i546;
    assume {:branchcond $i547} true;
    goto $bb451, $bb452;

  $bb452:
    assume !($i547 == 1);
    assume {:verifier.code 0} true;
    goto $bb453;

  $bb453:
    assume {:verifier.code 0} true;
    $i545 := $i546;
    goto $bb450;

  $bb451:
    assume {:verifier.code 0} true;
    assume $i547 == 1;
    goto $bb8;

  $bb441:
    assume $i536 == 1;
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i538 := $add.i32($i529, 1);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i539 := $sgt.i32($i538, 2);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i15 := $i538;
    assume {:branchcond $i539} true;
    goto $bb444, $bb445;

  $bb445:
    assume !($i539 == 1);
    assume {:verifier.code 0} true;
    goto $bb446;

  $bb446:
    assume {:verifier.code 0} true;
    $i537 := $i538;
    goto $bb443;

  $bb444:
    assume {:verifier.code 0} true;
    assume $i539 == 1;
    goto $bb8;

  $bb434:
    assume $i528 == 1;
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i530 := $add.i32($i521, 1);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $i531 := $sgt.i32($i530, 2);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i15 := $i530;
    assume {:branchcond $i531} true;
    goto $bb437, $bb438;

  $bb438:
    assume !($i531 == 1);
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb439:
    assume {:verifier.code 0} true;
    $i529 := $i530;
    goto $bb436;

  $bb437:
    assume {:verifier.code 0} true;
    assume $i531 == 1;
    goto $bb8;

  $bb427:
    assume $i520 == 1;
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i522 := $add.i32($i513, 1);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i523 := $sgt.i32($i522, 2);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i15 := $i522;
    assume {:branchcond $i523} true;
    goto $bb430, $bb431;

  $bb431:
    assume !($i523 == 1);
    assume {:verifier.code 0} true;
    goto $bb432;

  $bb432:
    assume {:verifier.code 0} true;
    $i521 := $i522;
    goto $bb429;

  $bb430:
    assume {:verifier.code 0} true;
    assume $i523 == 1;
    goto $bb8;

  $bb420:
    assume $i512 == 1;
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i514 := $add.i32($i505, 1);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $i515 := $sgt.i32($i514, 2);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $i15 := $i514;
    assume {:branchcond $i515} true;
    goto $bb423, $bb424;

  $bb424:
    assume !($i515 == 1);
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb425:
    assume {:verifier.code 0} true;
    $i513 := $i514;
    goto $bb422;

  $bb423:
    assume {:verifier.code 0} true;
    assume $i515 == 1;
    goto $bb8;

  $bb413:
    assume $i504 == 1;
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $i506 := $add.i32($i497, 1);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $i507 := $sgt.i32($i506, 2);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $i15 := $i506;
    assume {:branchcond $i507} true;
    goto $bb416, $bb417;

  $bb417:
    assume !($i507 == 1);
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    $i505 := $i506;
    goto $bb415;

  $bb416:
    assume {:verifier.code 0} true;
    assume $i507 == 1;
    goto $bb8;

  $bb406:
    assume $i496 == 1;
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i498 := $add.i32($i489, 1);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i499 := $sgt.i32($i498, 2);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i15 := $i498;
    assume {:branchcond $i499} true;
    goto $bb409, $bb410;

  $bb410:
    assume !($i499 == 1);
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb411:
    assume {:verifier.code 0} true;
    $i497 := $i498;
    goto $bb408;

  $bb409:
    assume {:verifier.code 0} true;
    assume $i499 == 1;
    goto $bb8;

  $bb399:
    assume $i488 == 1;
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i490 := $add.i32($i481, 1);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i491 := $sgt.i32($i490, 2);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $i15 := $i490;
    assume {:branchcond $i491} true;
    goto $bb402, $bb403;

  $bb403:
    assume !($i491 == 1);
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    $i489 := $i490;
    goto $bb401;

  $bb402:
    assume {:verifier.code 0} true;
    assume $i491 == 1;
    goto $bb8;

  $bb392:
    assume $i480 == 1;
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $i482 := $add.i32($i473, 1);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i483 := $sgt.i32($i482, 2);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i15 := $i482;
    assume {:branchcond $i483} true;
    goto $bb395, $bb396;

  $bb396:
    assume !($i483 == 1);
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb397:
    assume {:verifier.code 0} true;
    $i481 := $i482;
    goto $bb394;

  $bb395:
    assume {:verifier.code 0} true;
    assume $i483 == 1;
    goto $bb8;

  $bb385:
    assume $i472 == 1;
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i474 := $add.i32($i465, 1);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i475 := $sgt.i32($i474, 2);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $i15 := $i474;
    assume {:branchcond $i475} true;
    goto $bb388, $bb389;

  $bb389:
    assume !($i475 == 1);
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    $i473 := $i474;
    goto $bb387;

  $bb388:
    assume {:verifier.code 0} true;
    assume $i475 == 1;
    goto $bb8;

  $bb378:
    assume $i464 == 1;
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i466 := $add.i32($i457, 1);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i467 := $sgt.i32($i466, 2);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i15 := $i466;
    assume {:branchcond $i467} true;
    goto $bb381, $bb382;

  $bb382:
    assume !($i467 == 1);
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb383:
    assume {:verifier.code 0} true;
    $i465 := $i466;
    goto $bb380;

  $bb381:
    assume {:verifier.code 0} true;
    assume $i467 == 1;
    goto $bb8;

  $bb371:
    assume $i456 == 1;
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i458 := $add.i32($i449, 1);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $i459 := $sgt.i32($i458, 2);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i15 := $i458;
    assume {:branchcond $i459} true;
    goto $bb374, $bb375;

  $bb375:
    assume !($i459 == 1);
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    $i457 := $i458;
    goto $bb373;

  $bb374:
    assume {:verifier.code 0} true;
    assume $i459 == 1;
    goto $bb8;

  $bb364:
    assume $i448 == 1;
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $i450 := $add.i32($i441, 1);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i451 := $sgt.i32($i450, 2);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i15 := $i450;
    assume {:branchcond $i451} true;
    goto $bb367, $bb368;

  $bb368:
    assume !($i451 == 1);
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    $i449 := $i450;
    goto $bb366;

  $bb367:
    assume {:verifier.code 0} true;
    assume $i451 == 1;
    goto $bb8;

  $bb357:
    assume $i440 == 1;
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i442 := $add.i32($i433, 1);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i443 := $sgt.i32($i442, 2);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i15 := $i442;
    assume {:branchcond $i443} true;
    goto $bb360, $bb361;

  $bb361:
    assume !($i443 == 1);
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    $i441 := $i442;
    goto $bb359;

  $bb360:
    assume {:verifier.code 0} true;
    assume $i443 == 1;
    goto $bb8;

  $bb350:
    assume $i432 == 1;
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $i434 := $add.i32($i425, 1);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i435 := $sgt.i32($i434, 2);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $i15 := $i434;
    assume {:branchcond $i435} true;
    goto $bb353, $bb354;

  $bb354:
    assume !($i435 == 1);
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    $i433 := $i434;
    goto $bb352;

  $bb353:
    assume {:verifier.code 0} true;
    assume $i435 == 1;
    goto $bb8;

  $bb343:
    assume $i424 == 1;
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i426 := $add.i32($i417, 1);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $i427 := $sgt.i32($i426, 2);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i15 := $i426;
    assume {:branchcond $i427} true;
    goto $bb346, $bb347;

  $bb347:
    assume !($i427 == 1);
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    $i425 := $i426;
    goto $bb345;

  $bb346:
    assume {:verifier.code 0} true;
    assume $i427 == 1;
    goto $bb8;

  $bb336:
    assume $i416 == 1;
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $i418 := $add.i32($i409, 1);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i419 := $sgt.i32($i418, 2);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i15 := $i418;
    assume {:branchcond $i419} true;
    goto $bb339, $bb340;

  $bb340:
    assume !($i419 == 1);
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb341:
    assume {:verifier.code 0} true;
    $i417 := $i418;
    goto $bb338;

  $bb339:
    assume {:verifier.code 0} true;
    assume $i419 == 1;
    goto $bb8;

  $bb329:
    assume $i408 == 1;
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i410 := $add.i32($i401, 1);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $i411 := $sgt.i32($i410, 2);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i15 := $i410;
    assume {:branchcond $i411} true;
    goto $bb332, $bb333;

  $bb333:
    assume !($i411 == 1);
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    $i409 := $i410;
    goto $bb331;

  $bb332:
    assume {:verifier.code 0} true;
    assume $i411 == 1;
    goto $bb8;

  $bb322:
    assume $i400 == 1;
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i402 := $add.i32($i393, 1);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i403 := $sgt.i32($i402, 2);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i15 := $i402;
    assume {:branchcond $i403} true;
    goto $bb325, $bb326;

  $bb326:
    assume !($i403 == 1);
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    $i401 := $i402;
    goto $bb324;

  $bb325:
    assume {:verifier.code 0} true;
    assume $i403 == 1;
    goto $bb8;

  $bb315:
    assume $i392 == 1;
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i394 := $add.i32($i385, 1);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $i395 := $sgt.i32($i394, 2);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i15 := $i394;
    assume {:branchcond $i395} true;
    goto $bb318, $bb319;

  $bb319:
    assume !($i395 == 1);
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    $i393 := $i394;
    goto $bb317;

  $bb318:
    assume {:verifier.code 0} true;
    assume $i395 == 1;
    goto $bb8;

  $bb308:
    assume $i384 == 1;
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i386 := $add.i32($i377, 1);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i387 := $sgt.i32($i386, 2);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $i15 := $i386;
    assume {:branchcond $i387} true;
    goto $bb311, $bb312;

  $bb312:
    assume !($i387 == 1);
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    $i385 := $i386;
    goto $bb310;

  $bb311:
    assume {:verifier.code 0} true;
    assume $i387 == 1;
    goto $bb8;

  $bb301:
    assume $i376 == 1;
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i378 := $add.i32($i369, 1);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i379 := $sgt.i32($i378, 2);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i15 := $i378;
    assume {:branchcond $i379} true;
    goto $bb304, $bb305;

  $bb305:
    assume !($i379 == 1);
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    $i377 := $i378;
    goto $bb303;

  $bb304:
    assume {:verifier.code 0} true;
    assume $i379 == 1;
    goto $bb8;

  $bb294:
    assume $i368 == 1;
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i370 := $add.i32($i361, 1);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $i371 := $sgt.i32($i370, 2);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i15 := $i370;
    assume {:branchcond $i371} true;
    goto $bb297, $bb298;

  $bb298:
    assume !($i371 == 1);
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    $i369 := $i370;
    goto $bb296;

  $bb297:
    assume {:verifier.code 0} true;
    assume $i371 == 1;
    goto $bb8;

  $bb287:
    assume $i360 == 1;
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $i362 := $add.i32($i353, 1);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $i363 := $sgt.i32($i362, 2);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $i15 := $i362;
    assume {:branchcond $i363} true;
    goto $bb290, $bb291;

  $bb291:
    assume !($i363 == 1);
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    $i361 := $i362;
    goto $bb289;

  $bb290:
    assume {:verifier.code 0} true;
    assume $i363 == 1;
    goto $bb8;

  $bb280:
    assume $i352 == 1;
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i354 := $add.i32($i345, 1);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i355 := $sgt.i32($i354, 2);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $i15 := $i354;
    assume {:branchcond $i355} true;
    goto $bb283, $bb284;

  $bb284:
    assume !($i355 == 1);
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    $i353 := $i354;
    goto $bb282;

  $bb283:
    assume {:verifier.code 0} true;
    assume $i355 == 1;
    goto $bb8;

  $bb273:
    assume $i344 == 1;
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $i346 := $add.i32($i337, 1);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i347 := $sgt.i32($i346, 2);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i15 := $i346;
    assume {:branchcond $i347} true;
    goto $bb276, $bb277;

  $bb277:
    assume !($i347 == 1);
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    $i345 := $i346;
    goto $bb275;

  $bb276:
    assume {:verifier.code 0} true;
    assume $i347 == 1;
    goto $bb8;

  $bb266:
    assume $i336 == 1;
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $i338 := $add.i32($i329, 1);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i339 := $sgt.i32($i338, 2);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i15 := $i338;
    assume {:branchcond $i339} true;
    goto $bb269, $bb270;

  $bb270:
    assume !($i339 == 1);
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    $i337 := $i338;
    goto $bb268;

  $bb269:
    assume {:verifier.code 0} true;
    assume $i339 == 1;
    goto $bb8;

  $bb259:
    assume $i328 == 1;
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $i330 := $add.i32($i321, 1);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $i331 := $sgt.i32($i330, 2);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i15 := $i330;
    assume {:branchcond $i331} true;
    goto $bb262, $bb263;

  $bb263:
    assume !($i331 == 1);
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    $i329 := $i330;
    goto $bb261;

  $bb262:
    assume {:verifier.code 0} true;
    assume $i331 == 1;
    goto $bb8;

  $bb252:
    assume $i320 == 1;
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $i322 := $add.i32($i313, 1);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i323 := $sgt.i32($i322, 2);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $i15 := $i322;
    assume {:branchcond $i323} true;
    goto $bb255, $bb256;

  $bb256:
    assume !($i323 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    $i321 := $i322;
    goto $bb254;

  $bb255:
    assume {:verifier.code 0} true;
    assume $i323 == 1;
    goto $bb8;

  $bb245:
    assume $i312 == 1;
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i314 := $add.i32($i305, 1);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i315 := $sgt.i32($i314, 2);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $i15 := $i314;
    assume {:branchcond $i315} true;
    goto $bb248, $bb249;

  $bb249:
    assume !($i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    $i313 := $i314;
    goto $bb247;

  $bb248:
    assume {:verifier.code 0} true;
    assume $i315 == 1;
    goto $bb8;

  $bb238:
    assume $i304 == 1;
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i306 := $add.i32($i297, 1);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i307 := $sgt.i32($i306, 2);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i15 := $i306;
    assume {:branchcond $i307} true;
    goto $bb241, $bb242;

  $bb242:
    assume !($i307 == 1);
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    $i305 := $i306;
    goto $bb240;

  $bb241:
    assume {:verifier.code 0} true;
    assume $i307 == 1;
    goto $bb8;

  $bb231:
    assume $i296 == 1;
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $i298 := $add.i32($i289, 1);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i299 := $sgt.i32($i298, 2);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i15 := $i298;
    assume {:branchcond $i299} true;
    goto $bb234, $bb235;

  $bb235:
    assume !($i299 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    $i297 := $i298;
    goto $bb233;

  $bb234:
    assume {:verifier.code 0} true;
    assume $i299 == 1;
    goto $bb8;

  $bb224:
    assume $i288 == 1;
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i290 := $add.i32($i281, 1);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $i291 := $sgt.i32($i290, 2);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $i15 := $i290;
    assume {:branchcond $i291} true;
    goto $bb227, $bb228;

  $bb228:
    assume !($i291 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    $i289 := $i290;
    goto $bb226;

  $bb227:
    assume {:verifier.code 0} true;
    assume $i291 == 1;
    goto $bb8;

  $bb217:
    assume $i280 == 1;
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i282 := $add.i32($i273, 1);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $i283 := $sgt.i32($i282, 2);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $i15 := $i282;
    assume {:branchcond $i283} true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i283 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    $i281 := $i282;
    goto $bb219;

  $bb220:
    assume {:verifier.code 0} true;
    assume $i283 == 1;
    goto $bb8;

  $bb210:
    assume $i272 == 1;
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $i274 := $add.i32($i265, 1);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $i275 := $sgt.i32($i274, 2);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $i15 := $i274;
    assume {:branchcond $i275} true;
    goto $bb213, $bb214;

  $bb214:
    assume !($i275 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    $i273 := $i274;
    goto $bb212;

  $bb213:
    assume {:verifier.code 0} true;
    assume $i275 == 1;
    goto $bb8;

  $bb203:
    assume $i264 == 1;
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i266 := $add.i32($i257, 1);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i267 := $sgt.i32($i266, 2);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i15 := $i266;
    assume {:branchcond $i267} true;
    goto $bb206, $bb207;

  $bb207:
    assume !($i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    $i265 := $i266;
    goto $bb205;

  $bb206:
    assume {:verifier.code 0} true;
    assume $i267 == 1;
    goto $bb8;

  $bb196:
    assume $i256 == 1;
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i258 := $add.i32($i249, 1);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i259 := $sgt.i32($i258, 2);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $i15 := $i258;
    assume {:branchcond $i259} true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    $i257 := $i258;
    goto $bb198;

  $bb199:
    assume {:verifier.code 0} true;
    assume $i259 == 1;
    goto $bb8;

  $bb189:
    assume $i248 == 1;
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i250 := $add.i32($i241, 1);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i251 := $sgt.i32($i250, 2);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i15 := $i250;
    assume {:branchcond $i251} true;
    goto $bb192, $bb193;

  $bb193:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    $i249 := $i250;
    goto $bb191;

  $bb192:
    assume {:verifier.code 0} true;
    assume $i251 == 1;
    goto $bb8;

  $bb182:
    assume $i240 == 1;
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $i242 := $add.i32($i233, 1);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i243 := $sgt.i32($i242, 2);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i15 := $i242;
    assume {:branchcond $i243} true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    $i241 := $i242;
    goto $bb184;

  $bb185:
    assume {:verifier.code 0} true;
    assume $i243 == 1;
    goto $bb8;

  $bb175:
    assume $i232 == 1;
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i234 := $add.i32($i225, 1);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $i235 := $sgt.i32($i234, 2);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i15 := $i234;
    assume {:branchcond $i235} true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    $i233 := $i234;
    goto $bb177;

  $bb178:
    assume {:verifier.code 0} true;
    assume $i235 == 1;
    goto $bb8;

  $bb168:
    assume $i224 == 1;
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $i226 := $add.i32($i217, 1);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $i227 := $sgt.i32($i226, 2);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i15 := $i226;
    assume true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    $i225 := $i226;
    goto $bb170;

  $bb171:
    assume {:verifier.code 0} true;
    assume $i227 == 1;
    goto $bb8;

  $bb161:
    assume $i216 == 1;
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i218 := $add.i32($i209, 1);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i219 := $sgt.i32($i218, 2);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i15 := $i218;
    assume true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    $i217 := $i218;
    goto $bb163;

  $bb164:
    assume {:verifier.code 0} true;
    assume $i219 == 1;
    goto $bb8;

  $bb154:
    assume $i208 == 1;
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i210 := $add.i32($i201, 1);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $i211 := $sgt.i32($i210, 2);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i15 := $i210;
    assume true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    $i209 := $i210;
    goto $bb156;

  $bb157:
    assume {:verifier.code 0} true;
    assume $i211 == 1;
    goto $bb8;

  $bb147:
    assume $i200 == 1;
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $i202 := $add.i32($i193, 1);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i203 := $sgt.i32($i202, 2);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i15 := $i202;
    assume {:branchcond $i203} true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $i201 := $i202;
    goto $bb149;

  $bb150:
    assume {:verifier.code 0} true;
    assume $i203 == 1;
    goto $bb8;

  $bb140:
    assume $i192 == 1;
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i194 := $add.i32($i185, 1);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i195 := $sgt.i32($i194, 2);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i15 := $i194;
    assume {:branchcond $i195} true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    $i193 := $i194;
    goto $bb142;

  $bb143:
    assume {:verifier.code 0} true;
    assume $i195 == 1;
    goto $bb8;

  $bb133:
    assume $i184 == 1;
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i186 := $add.i32($i177, 1);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i187 := $sgt.i32($i186, 2);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i15 := $i186;
    assume {:branchcond $i187} true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $i185 := $i186;
    goto $bb135;

  $bb136:
    assume {:verifier.code 0} true;
    assume $i187 == 1;
    goto $bb8;

  $bb126:
    assume $i176 == 1;
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $i178 := $add.i32($i169, 1);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i179 := $sgt.i32($i178, 2);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i15 := $i178;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    $i177 := $i178;
    goto $bb128;

  $bb129:
    assume {:verifier.code 0} true;
    assume $i179 == 1;
    goto $bb8;

  $bb119:
    assume $i168 == 1;
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i170 := $add.i32($i161, 1);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $i171 := $sgt.i32($i170, 2);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i15 := $i170;
    assume {:branchcond $i171} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $i169 := $i170;
    goto $bb121;

  $bb122:
    assume {:verifier.code 0} true;
    assume $i171 == 1;
    goto $bb8;

  $bb112:
    assume $i160 == 1;
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i162 := $add.i32($i153, 1);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $i163 := $sgt.i32($i162, 2);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $i15 := $i162;
    assume {:branchcond $i163} true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $i161 := $i162;
    goto $bb114;

  $bb115:
    assume {:verifier.code 0} true;
    assume $i163 == 1;
    goto $bb8;

  $bb105:
    assume $i152 == 1;
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i154 := $add.i32($i145, 1);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $i155 := $sgt.i32($i154, 2);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $i15 := $i154;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $i153 := $i154;
    goto $bb107;

  $bb108:
    assume {:verifier.code 0} true;
    assume $i155 == 1;
    goto $bb8;

  $bb98:
    assume $i144 == 1;
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i146 := $add.i32($i137, 1);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i147 := $sgt.i32($i146, 2);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i15 := $i146;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $i145 := $i146;
    goto $bb100;

  $bb101:
    assume {:verifier.code 0} true;
    assume $i147 == 1;
    goto $bb8;

  $bb91:
    assume $i136 == 1;
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i138 := $add.i32($i129, 1);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i139 := $sgt.i32($i138, 2);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $i15 := $i138;
    assume {:branchcond $i139} true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $i137 := $i138;
    goto $bb93;

  $bb94:
    assume {:verifier.code 0} true;
    assume $i139 == 1;
    goto $bb8;

  $bb84:
    assume $i128 == 1;
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $i130 := $add.i32($i121, 1);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i131 := $sgt.i32($i130, 2);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i15 := $i130;
    assume {:branchcond $i131} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $i129 := $i130;
    goto $bb86;

  $bb87:
    assume {:verifier.code 0} true;
    assume $i131 == 1;
    goto $bb8;

  $bb77:
    assume $i120 == 1;
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $i122 := $add.i32($i113, 1);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i123 := $sgt.i32($i122, 2);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $i15 := $i122;
    assume {:branchcond $i123} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i121 := $i122;
    goto $bb79;

  $bb80:
    assume {:verifier.code 0} true;
    assume $i123 == 1;
    goto $bb8;

  $bb70:
    assume $i112 == 1;
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i114 := $add.i32($i105, 1);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $i115 := $sgt.i32($i114, 2);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $i15 := $i114;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i113 := $i114;
    goto $bb72;

  $bb73:
    assume {:verifier.code 0} true;
    assume $i115 == 1;
    goto $bb8;

  $bb63:
    assume $i104 == 1;
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $i106 := $add.i32($i97, 1);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i107 := $sgt.i32($i106, 2);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $i15 := $i106;
    assume {:branchcond $i107} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i105 := $i106;
    goto $bb65;

  $bb66:
    assume {:verifier.code 0} true;
    assume $i107 == 1;
    goto $bb8;

  $bb56:
    assume $i96 == 1;
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $i98 := $add.i32($i89, 1);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $i99 := $sgt.i32($i98, 2);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $i15 := $i98;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i97 := $i98;
    goto $bb58;

  $bb59:
    assume {:verifier.code 0} true;
    assume $i99 == 1;
    goto $bb8;

  $bb49:
    assume $i88 == 1;
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i90 := $add.i32($i81, 1);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i91 := $sgt.i32($i90, 2);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $i15 := $i90;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i89 := $i90;
    goto $bb51;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i91 == 1;
    goto $bb8;

  $bb42:
    assume $i80 == 1;
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i82 := $add.i32($i73, 1);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i83 := $sgt.i32($i82, 2);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $i15 := $i82;
    assume {:branchcond $i83} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i81 := $i82;
    goto $bb44;

  $bb45:
    assume {:verifier.code 0} true;
    assume $i83 == 1;
    goto $bb8;

  $bb35:
    assume $i72 == 1;
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i17, 1);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i75 := $sgt.i32($i74, 2);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $i15 := $i74;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i73 := $i74;
    goto $bb37;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i75 == 1;
    goto $bb8;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $i15 := 1;
    assume {:branchcond 0} true;
    goto $bb7, $bb9;

  $bb9:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb8;
}



const vlsi_clear_regs: ref;

axiom vlsi_clear_regs == $sub.ref(0, 312178);

procedure vlsi_clear_regs($i0: i32);
  free requires assertsPassed;



implementation vlsi_clear_regs($i0: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} {:cexpr "vlsi_clear_regs:arg:iobase"} boogie_si_record_i32($i0);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} outw(0, $i0);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i1 := $add.i32($i0, 2);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} outw(0, $i1);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i0, 4);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} outw(0, $i2);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i0, 6);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} outw(0, $i3);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i0, 8);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} outw(0, $i4);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i0, 10);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} outw(0, $i5);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i0, 12);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} outw(0, $i6);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i0, 14);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} outw(0, $i7);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i0, 16);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} outw(0, $i8);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i0, 18);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} outw(0, $i9);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i0, 20);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} outw(0, $i10);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i0, 22);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} outw(0, $i11);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i0, 24);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} outw(0, $i12);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i0, 26);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} outw(0, $i13);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i0, 28);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} outw(0, $i14);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i0, 30);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} outw(0, $i15);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;
}



const outb: ref;

axiom outb == $sub.ref(0, 313210);

procedure outb($i0: i8, $i1: i32);
  free requires assertsPassed;



implementation outb($i0: i8, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} {:cexpr "outb:arg:value"} boogie_si_record_i8($i0);
    call {:si_unique_call 685} {:cexpr "outb:arg:port"} boogie_si_record_i32($i1);
    call {:si_unique_call 686} devirtbounce.5(0, $i0, $i1);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    return;
}



const inw: ref;

axiom inw == $sub.ref(0, 314242);

procedure inw($i0: i32) returns ($r: i16);
  free requires assertsPassed;



implementation inw($i0: i32) returns ($r: i16)
{
  var $i1: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} {:cexpr "inw:arg:port"} boogie_si_record_i32($i0);
    call {:si_unique_call 688} $i1 := devirtbounce.6(0, $i0);
    call {:si_unique_call 689} {:cexpr "value"} boogie_si_record_i16($i1);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 315274);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    return;
}



const vlsi_set_baud: ref;

axiom vlsi_set_baud == $sub.ref(0, 316306);

procedure vlsi_set_baud($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.0, $CurrAddr;



implementation vlsi_set_baud($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i16;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i45: i1;
  var $i47: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i53: i1;
  var $i55: i1;
  var $i57: i32;
  var $i58: i1;
  var $i56: i32;
  var $i54: i32;
  var $i52: i32;
  var $i48: i32;
  var $i46: i32;
  var $i44: i32;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i16;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $i70: i16;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $i75: i16;
  var $i36: i32;
  var $i37: i16;
  var $i38: i16;
  var $i39: i32;
  var $i27: i32;
  var $i28: i16;
  var $i29: i16;
  var $i30: i32;
  var $i76: i32;
  var $i77: i32;
  var $i78: i16;
  var $i79: i32;
  var $i80: i16;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i24;
  var $i91: i24;
  var $i92: i24;
  var $p93: ref;
  var $p94: ref;
  var $i95: i8;
  var $i96: i64;
  var $i97: i64;
  var $i98: i64;
  var $i99: i1;
  var $i100: i32;
  var $i101: i32;
  var $i102: i16;
  var $i103: i32;
  var $i104: i32;
  var $i105: i16;
  var $i106: i32;
  var $i107: i32;
  var $i108: i32;
  var $i109: i16;
  var $i110: i32;
  var $i111: i32;
  var $i112: i16;
  var $i113: i1;
  var $i114: i32;
  var $i115: i32;
  var $i116: i16;
  var $i118: i1;
  var $i119: i32;
  var $i120: i32;
  var $i121: i16;
  var $i123: i32;
  var $i124: i32;
  var $i125: i16;
  var $i122: i16;
  var $i117: i16;
  var $i126: i32;
  var $i127: i1;
  var $i128: i32;
  var $i129: i1;
  var $i130: i1;
  var $i131: i1;
  var $p132: ref;
  var $p133: ref;
  var $i136: i32;
  var $i137: i16;
  var $i138: i32;
  var $i139: i32;
  var $i140: i1;
  var $i141: i32;
  var $i142: i1;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $i144: i32;
  var $i135: i32;
  var $i148: i1;
  var vslice_dummy_var_257: i32;
  var vslice_dummy_var_258: i32;
  var vslice_dummy_var_259: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 693} {:cexpr "vlsi_set_baud:arg:iobase"} boogie_si_record_i32($i1);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(92, 1));
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 694} {:cexpr "baudrate"} boogie_si_record_i32($i5);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p6, .str.4);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p7, .str.22);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p8, .str.6);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p9, .str.23);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.10, $p11);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 759);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p11, $i14);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p15, 0);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.11, $p16);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 696} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i5, 4000000);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i26 == 1);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i5, 1152000);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i5, 38400);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i5, 57600);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i5, 115200);
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i5, 115200);
    assume {:verifier.code 0} true;
    $i44 := $i5;
    assume {:branchcond $i43} true;
    goto $bb17, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} $i57 := net_ratelimit();
    call {:si_unique_call 707} {:cexpr "tmp___0"} boogie_si_record_i32($i57);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i56 := 9600;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i54 := $i56;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $i52 := $i54;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i48 := $i52;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $i46 := $i48;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $i44 := $i46;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $i60 := $M.12;
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $i61 := $M.5;
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 3);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $i63 := $zext.i1.i32($i62);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} $i64 := calc_width_bits($i44, $i60, $i63);
    call {:si_unique_call 704} {:cexpr "tmp___1"} boogie_si_record_i32($i64);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $i65 := $sdiv.i32(115200, $i44);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i16($i65);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i67 := $zext.i16.i32($i66);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $i68 := $add.i32($i67, 65535);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $i69 := $shl.i32($i68, 10);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i32.i16($i64);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i70);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i72 := $shl.i32($i71, 5);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $i73 := $and.i32($i72, 992);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $i74 := $or.i32($i69, $i73);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i32.i16($i74);
    call {:si_unique_call 705} {:cexpr "nphyctl"} boogie_si_record_i16($i75);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i36, $i37, $i38, $i39 := 1, 536, $i75, $i44;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i27, $i28, $i29, $i30 := $i36, $i37, $i38, $i39;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $i76 := $zext.i16.i32($i28);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $i77 := $or.i32($i76, 3072);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i32.i16($i77);
    call {:si_unique_call 698} {:cexpr "config"} boogie_si_record_i16($i78);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i1, 28);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} $i80 := inw($i79);
    call {:si_unique_call 700} {:cexpr "tmp___2"} boogie_si_record_i16($i80);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $i81 := $zext.i16.i32($i80);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $i82 := $and.i32($i81, 4095);
    call {:si_unique_call 701} {:cexpr "fifocnt"} boogie_si_record_i32($i82);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i100 := $add.i32($i1, 20);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} outw(0, $i100);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $i101 := $zext.i16.i32($i78);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $i102 := $trunc.i32.i16($i101);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i103 := $add.i32($i1, 16);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} outw($i102, $i103);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i104 := $zext.i16.i32($i29);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i32.i16($i104);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $i106 := $add.i32($i1, 24);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} outw($i105, $i106);
    call {:si_unique_call 715} devirtbounce(0);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $i107 := $add.i32($i1, 20);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} outw($sub.i16(0, 32768), $i107);
    call {:si_unique_call 717} devirtbounce(0);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} __const_udelay(4295);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i108 := $add.i32($i1, 20);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} $i109 := inw($i108);
    call {:si_unique_call 720} {:cexpr "tmp___4"} boogie_si_record_i16($i109);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i110 := $zext.i16.i32($i109);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $i111 := $and.i32($i110, 65280);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i112 := $trunc.i32.i16($i111);
    call {:si_unique_call 721} {:cexpr "config"} boogie_si_record_i16($i112);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i27, 4);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i113 == 1);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i27, 2);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    assume {:branchcond $i118} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i118 == 1);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $i123 := $zext.i16.i32($i112);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $i124 := $xor.i32($i123, 2048);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $i125 := $trunc.i32.i16($i124);
    call {:si_unique_call 724} {:cexpr "config"} boogie_si_record_i16($i125);
    assume {:verifier.code 0} true;
    $i122 := $i125;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i117 := $i122;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $i126 := $zext.i16.i32($i117);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 33280);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i127 == 1);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $i136 := $add.i32($i1, 22);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} $i137 := inw($i136);
    call {:si_unique_call 728} {:cexpr "tmp___7"} boogie_si_record_i16($i137);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $i138 := $zext.i16.i32($i137);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i139 := $zext.i16.i32($i29);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i140 := $ne.i32($i138, $i139);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    assume {:branchcond $i140} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i140 == 1);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(84, 1));
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p145, $i27);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(88, 1));
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p146, $i30);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(92, 1));
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p147, 0);
    assume {:verifier.code 0} true;
    $i144 := 0;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i135 := $i144;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $i148 := $ne.i32($i135, 0);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $r := $i135;
    return;

  $bb72:
    assume $i148 == 1;
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} vlsi_reg_debug($i1, .str.22);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb66:
    assume $i140 == 1;
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} $i141 := net_ratelimit();
    call {:si_unique_call 731} {:cexpr "tmp___6"} boogie_si_record_i32($i141);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i142 := $ne.i32($i141, 0);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i144 := $sub.i32(0, 1);
    goto $bb71;

  $bb68:
    assume $i142 == 1;
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} vslice_dummy_var_259 := printk.ref.ref.i32(.str.29, .str.22, $i30);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb57:
    assume $i127 == 1;
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} $i128 := net_ratelimit();
    call {:si_unique_call 726} {:cexpr "tmp___5"} boogie_si_record_i32($i128);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i129 := $ne.i32($i128, 0);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i135 := $sub.i32(0, 1);
    goto $bb65;

  $bb59:
    assume $i129 == 1;
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i130 := $ne.i32($i27, 1);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i130 == 1);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $p133 := .str.28;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} vslice_dummy_var_258 := printk.ref.ref.ref(.str.25, .str.22, $p133);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb61:
    assume $i130 == 1;
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $i131 := $eq.i32($i27, 2);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $p132 := (if $i131 == 1 then .str.26 else .str.27);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $p133 := $p132;
    goto $bb63;

  $bb54:
    assume $i118 == 1;
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $i119 := $zext.i16.i32($i112);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i120 := $xor.i32($i119, 4352);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $i121 := $trunc.i32.i16($i120);
    call {:si_unique_call 723} {:cexpr "config"} boogie_si_record_i16($i121);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $i122 := $i121;
    goto $bb56;

  $bb51:
    assume $i113 == 1;
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i114 := $zext.i16.i32($i112);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i115 := $xor.i32($i114, 8192);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i116 := $trunc.i32.i16($i115);
    call {:si_unique_call 722} {:cexpr "config"} boogie_si_record_i16($i116);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $i117 := $i116;
    goto $bb53;

  $bb45:
    assume $i83 == 1;
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p84, .str.4);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p85, .str.22);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p86, .str.6);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p87, .str.20);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $i90 := $load.i24($M.10, $p89);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i91 := $and.i24($i90, $sub.i24(0, 262144));
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $i92 := $or.i24($i91, 793);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p89, $i92);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p93, 0);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.11, $p94);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i64($i95);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $i97 := $and.i64($i96, 1);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} $i98 := ldv__builtin_expect($i97, 0);
    call {:si_unique_call 710} {:cexpr "tmp___3"} boogie_si_record_i64($i98);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $i99 := $ne.i64($i98, 0);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb47:
    assume $i99 == 1;
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} __dynamic_pr_debug.ref.ref.ref.i32($p3, .str.20, .str.22, $i82);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb41:
    assume $i58 == 1;
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} vslice_dummy_var_257 := printk.ref.ref.i32(.str.24, .str.22, $i5);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb18;

  $bb15:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i5, 57600);
    assume {:verifier.code 0} true;
    $i46 := $i5;
    assume true;
    goto $bb21, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb20;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i45 == 1;
    goto $bb22;

  $bb13:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i5, 38400);
    assume {:verifier.code 0} true;
    $i48 := $i5;
    assume true;
    goto $bb24, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb20;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i47 == 1;
    goto $bb25;

  $bb11:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i5, 9600);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i5, 19200);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i5, 19200);
    assume {:verifier.code 0} true;
    $i52 := $i5;
    assume true;
    goto $bb31, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb20;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i51 == 1;
    goto $bb32;

  $bb29:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i5, 9600);
    assume {:verifier.code 0} true;
    $i54 := $i5;
    assume {:branchcond $i53} true;
    goto $bb34, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb20;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb35;

  $bb27:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i5, 2400);
    assume {:verifier.code 0} true;
    $i56 := $i5;
    assume {:branchcond $i55} true;
    goto $bb37, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb20;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i55 == 1;
    goto $bb38;

  $bb7:
    assume $i31 == 1;
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $i32 := $M.5;
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 3);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i34 := (if $i33 == 1 then 289 else 321);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i16($i34);
    call {:si_unique_call 702} {:cexpr "nphyctl"} boogie_si_record_i16($i35);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $i36, $i37, $i38, $i39 := 2, 160, $i35, $i5;
    goto $bb9;

  $bb4:
    assume $i26 == 1;
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $i27, $i28, $i29, $i30 := 4, 64, 15, $i5;
    goto $bb6;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(88, 1));
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(92, 1));
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} __dynamic_pr_debug.ref.ref.ref.i32.i32($p2, .str.23, .str.22, $i23, $i25);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __dynamic_pr_debug: ref;

axiom __dynamic_pr_debug == $sub.ref(0, 317338);

procedure __dynamic_pr_debug.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    return;
}



const calc_width_bits: ref;

axiom calc_width_bits == $sub.ref(0, 318370);

procedure calc_width_bits($i0: i32, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation calc_width_bits($i0: i32, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i1;
  var $i5: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} {:cexpr "calc_width_bits:arg:baudrate"} boogie_si_record_i32($i0);
    call {:si_unique_call 735} {:cexpr "calc_width_bits:arg:widthselect"} boogie_si_record_i32($i1);
    call {:si_unique_call 736} {:cexpr "calc_width_bits:arg:clockselect"} boogie_si_record_i32($i2);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i1, 0);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i2, 0);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $i8 := (if $i7 == 1 then 12 else 24);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $i9 := $udiv.i32(115200, $i0);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i10 := $udiv.i32($i8, $i9);
    call {:si_unique_call 737} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $i6 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32($i10, 1);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i2, 0);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $i5 := (if $i4 == 1 then 12 else 24);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb3;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 319402);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    return;
}



const vlsi_reg_debug: ref;

axiom vlsi_reg_debug == $sub.ref(0, 320434);

procedure vlsi_reg_debug($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation vlsi_reg_debug($i0: i32, $p1: ref)
{
  var $i3: i8;
  var $i4: i32;
  var $i7: i32;
  var $i8: i8;
  var $i9: i32;
  var $i11: i32;
  var $i12: i8;
  var $i13: i32;
  var $i15: i32;
  var $i16: i8;
  var $i17: i32;
  var $i19: i32;
  var $i20: i8;
  var $i21: i32;
  var $i23: i32;
  var $i24: i8;
  var $i25: i32;
  var $i27: i32;
  var $i28: i8;
  var $i29: i32;
  var $i31: i32;
  var $i32: i8;
  var $i33: i32;
  var $i35: i32;
  var $i36: i8;
  var $i37: i32;
  var $i39: i32;
  var $i40: i8;
  var $i41: i32;
  var $i43: i32;
  var $i44: i8;
  var $i45: i32;
  var $i47: i32;
  var $i48: i8;
  var $i49: i32;
  var $i51: i32;
  var $i52: i8;
  var $i53: i32;
  var $i55: i32;
  var $i56: i8;
  var $i57: i32;
  var $i59: i32;
  var $i60: i8;
  var $i61: i32;
  var $i63: i32;
  var $i64: i8;
  var $i65: i32;
  var $i67: i32;
  var $i68: i8;
  var $i69: i32;
  var $i71: i32;
  var $i72: i8;
  var $i73: i32;
  var $i75: i32;
  var $i76: i8;
  var $i77: i32;
  var $i79: i32;
  var $i80: i8;
  var $i81: i32;
  var $i83: i32;
  var $i84: i8;
  var $i85: i32;
  var $i87: i32;
  var $i88: i8;
  var $i89: i32;
  var $i91: i32;
  var $i92: i8;
  var $i93: i32;
  var $i95: i32;
  var $i96: i8;
  var $i97: i32;
  var $i99: i32;
  var $i100: i8;
  var $i101: i32;
  var $i103: i32;
  var $i104: i8;
  var $i105: i32;
  var $i107: i32;
  var $i108: i8;
  var $i109: i32;
  var $i111: i32;
  var $i112: i8;
  var $i113: i32;
  var $i115: i32;
  var $i116: i8;
  var $i117: i32;
  var $i119: i32;
  var $i120: i8;
  var $i121: i32;
  var $i123: i32;
  var $i124: i8;
  var $i125: i32;
  var $i127: i32;
  var $i128: i8;
  var $i129: i32;
  var vslice_dummy_var_260: i32;
  var vslice_dummy_var_261: i32;
  var vslice_dummy_var_262: i32;
  var vslice_dummy_var_263: i32;
  var vslice_dummy_var_264: i32;
  var vslice_dummy_var_265: i32;
  var vslice_dummy_var_266: i32;
  var vslice_dummy_var_267: i32;
  var vslice_dummy_var_268: i32;
  var vslice_dummy_var_269: i32;
  var vslice_dummy_var_270: i32;
  var vslice_dummy_var_271: i32;
  var vslice_dummy_var_272: i32;
  var vslice_dummy_var_273: i32;
  var vslice_dummy_var_274: i32;
  var vslice_dummy_var_275: i32;
  var vslice_dummy_var_276: i32;
  var vslice_dummy_var_277: i32;
  var vslice_dummy_var_278: i32;
  var vslice_dummy_var_279: i32;
  var vslice_dummy_var_280: i32;
  var vslice_dummy_var_281: i32;
  var vslice_dummy_var_282: i32;
  var vslice_dummy_var_283: i32;
  var vslice_dummy_var_284: i32;
  var vslice_dummy_var_285: i32;
  var vslice_dummy_var_286: i32;
  var vslice_dummy_var_287: i32;
  var vslice_dummy_var_288: i32;
  var vslice_dummy_var_289: i32;
  var vslice_dummy_var_290: i32;
  var vslice_dummy_var_291: i32;
  var vslice_dummy_var_292: i32;
  var vslice_dummy_var_293: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} {:cexpr "vlsi_reg_debug:arg:iobase"} boogie_si_record_i32($i0);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} vslice_dummy_var_260 := printk.ref.ref(.str.30, $p1);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} $i3 := inb($i0);
    call {:si_unique_call 742} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} vslice_dummy_var_261 := printk.ref.i32(.str.31, $i4);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i0, 1);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} $i8 := inb($i7);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} vslice_dummy_var_262 := printk.ref.i32(.str.31, $i9);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i0, 2);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} $i12 := inb($i11);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} vslice_dummy_var_264 := printk.ref.i32(.str.31, $i13);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i0, 3);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} $i16 := inb($i15);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} vslice_dummy_var_265 := printk.ref.i32(.str.31, $i17);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i0, 4);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} $i20 := inb($i19);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} vslice_dummy_var_266 := printk.ref.i32(.str.31, $i21);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i0, 5);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} $i24 := inb($i23);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} vslice_dummy_var_267 := printk.ref.i32(.str.31, $i25);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i0, 6);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} $i28 := inb($i27);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} vslice_dummy_var_268 := printk.ref.i32(.str.31, $i29);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i0, 7);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} $i32 := inb($i31);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} vslice_dummy_var_269 := printk.ref.i32(.str.31, $i33);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i0, 8);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} $i36 := inb($i35);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} vslice_dummy_var_270 := printk.ref.i32(.str.31, $i37);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i0, 9);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} $i40 := inb($i39);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} vslice_dummy_var_271 := printk.ref.i32(.str.31, $i41);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i0, 10);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} $i44 := inb($i43);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} vslice_dummy_var_272 := printk.ref.i32(.str.31, $i45);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i0, 11);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} $i48 := inb($i47);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} vslice_dummy_var_273 := printk.ref.i32(.str.31, $i49);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i0, 12);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} $i52 := inb($i51);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} vslice_dummy_var_274 := printk.ref.i32(.str.31, $i53);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i0, 13);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} $i56 := inb($i55);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} vslice_dummy_var_275 := printk.ref.i32(.str.31, $i57);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i0, 14);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} $i60 := inb($i59);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} vslice_dummy_var_276 := printk.ref.i32(.str.31, $i61);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i0, 15);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} $i64 := inb($i63);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} vslice_dummy_var_277 := printk.ref.i32(.str.31, $i65);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i0, 16);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} $i68 := inb($i67);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} vslice_dummy_var_278 := printk.ref.i32(.str.31, $i69);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i0, 17);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $i72 := inb($i71);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i32($i72);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} vslice_dummy_var_279 := printk.ref.i32(.str.31, $i73);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i0, 18);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} $i76 := inb($i75);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i76);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} vslice_dummy_var_280 := printk.ref.i32(.str.31, $i77);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i0, 19);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} $i80 := inb($i79);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} vslice_dummy_var_281 := printk.ref.i32(.str.31, $i81);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i83 := $add.i32($i0, 20);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} $i84 := inb($i83);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i32($i84);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} vslice_dummy_var_282 := printk.ref.i32(.str.31, $i85);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i87 := $add.i32($i0, 21);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} $i88 := inb($i87);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32($i88);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} vslice_dummy_var_283 := printk.ref.i32(.str.31, $i89);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i91 := $add.i32($i0, 22);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} $i92 := inb($i91);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $i93 := $zext.i8.i32($i92);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} vslice_dummy_var_284 := printk.ref.i32(.str.31, $i93);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i95 := $add.i32($i0, 23);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} $i96 := inb($i95);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i32($i96);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} vslice_dummy_var_285 := printk.ref.i32(.str.31, $i97);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i99 := $add.i32($i0, 24);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} $i100 := inb($i99);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i32($i100);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} vslice_dummy_var_286 := printk.ref.i32(.str.31, $i101);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i103 := $add.i32($i0, 25);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} $i104 := inb($i103);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $i105 := $zext.i8.i32($i104);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} vslice_dummy_var_287 := printk.ref.i32(.str.31, $i105);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i107 := $add.i32($i0, 26);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} $i108 := inb($i107);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i32($i108);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} vslice_dummy_var_288 := printk.ref.i32(.str.31, $i109);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i111 := $add.i32($i0, 27);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} $i112 := inb($i111);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i32($i112);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} vslice_dummy_var_289 := printk.ref.i32(.str.31, $i113);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i115 := $add.i32($i0, 28);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} $i116 := inb($i115);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i116);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} vslice_dummy_var_290 := printk.ref.i32(.str.31, $i117);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i119 := $add.i32($i0, 29);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} $i120 := inb($i119);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $i121 := $zext.i8.i32($i120);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} vslice_dummy_var_291 := printk.ref.i32(.str.31, $i121);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i123 := $add.i32($i0, 30);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} $i124 := inb($i123);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $i125 := $zext.i8.i32($i124);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} vslice_dummy_var_292 := printk.ref.i32(.str.31, $i125);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i127 := $add.i32($i0, 31);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} $i128 := inb($i127);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i129 := $zext.i8.i32($i128);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} vslice_dummy_var_293 := printk.ref.i32(.str.31, $i129);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} vslice_dummy_var_263 := printk.ref(.str.32);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    return;
}



const inb: ref;

axiom inb == $sub.ref(0, 321466);

procedure inb($i0: i32) returns ($r: i8);
  free requires assertsPassed;



implementation inb($i0: i32) returns ($r: i8)
{
  var $i1: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} {:cexpr "inb:arg:port"} boogie_si_record_i32($i0);
    call {:si_unique_call 808} $i1 := devirtbounce.7(0, $i0);
    call {:si_unique_call 809} {:cexpr "value"} boogie_si_record_i8($i1);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_bus_write_config_byte: ref;

axiom pci_bus_write_config_byte == $sub.ref(0, 322498);

procedure pci_bus_write_config_byte($p0: ref, $i1: i32, $i2: i32, $i3: i8) returns ($r: i32);
  free requires assertsPassed;



implementation pci_bus_write_config_byte($p0: ref, $i1: i32, $i2: i32, $i3: i8) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 810} {:cexpr "pci_bus_write_config_byte:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 811} {:cexpr "pci_bus_write_config_byte:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 812} {:cexpr "pci_bus_write_config_byte:arg:arg3"} boogie_si_record_i8($i3);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 1} true;
    call {:si_unique_call 813} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 814} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const pci_bus_read_config_byte: ref;

axiom pci_bus_read_config_byte == $sub.ref(0, 323530);

procedure pci_bus_read_config_byte($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_bus_read_config_byte($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 815} {:cexpr "pci_bus_read_config_byte:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 816} {:cexpr "pci_bus_read_config_byte:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 1} true;
    call {:si_unique_call 817} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 818} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 324562);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 325594);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(16, 1));
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} $p9 := kobject_name($p8);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 326626);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 327658);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pci_choose_state: ref;

axiom pci_choose_state == $sub.ref(0, 328690);

procedure pci_choose_state($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $CurrAddr;



implementation pci_choose_state($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.13 := $store.i32($M.13, $p3, $i1);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 1} true;
    call {:si_unique_call 822} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 823} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const netif_device_detach: ref;

axiom netif_device_detach == $sub.ref(0, 329722);

procedure netif_device_detach($p0: ref);
  free requires assertsPassed;



implementation netif_device_detach($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    return;
}



const vlsi_stop_hw: ref;

axiom vlsi_stop_hw == $sub.ref(0, 330754);

procedure vlsi_stop_hw($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.3, $CurrAddr, $M.36, $M.38, $M.40, $M.42, $M.37, $M.45, $M.39, $M.46, $M.41, $M.47, $M.43, $M.48, $M.5, assertsPassed;



implementation vlsi_stop_hw($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} $p3 := pci_get_drvdata($p2);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2968)), $mul.ref(56, 1));
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.15, $p5);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i6);
    call {:si_unique_call 825} {:cexpr "iobase"} boogie_si_record_i32($i7);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} ldv_spin_lock();
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i7, 20);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} outw(0, $i8);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i7, 16);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} outw(0, $i9);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} outb(0, $i7);
    call {:si_unique_call 830} devirtbounce(0);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} outb(84, $i7);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(136, 1));
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} spin_unlock_irqrestore($p10, $u0);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} vlsi_unarm_tx($p0);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} vlsi_unarm_rx($p0);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} vlsi_clear_regs($i7);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} vlsi_stop_clock($p2);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} pci_disable_device($p2);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;
}



const pci_save_state: ref;

axiom pci_save_state == $sub.ref(0, 331786);

procedure pci_save_state($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_save_state($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 1} true;
    call {:si_unique_call 838} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 839} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 332818);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.4;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $M.4 := 1;
    call {:si_unique_call 840} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 333850);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.4;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} ldv_spin_unlock();
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} ldv_spin_unlock_irqrestore_12($p0, $i1);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    return;
}



const vlsi_unarm_tx: ref;

axiom vlsi_unarm_tx == $sub.ref(0, 334882);

procedure vlsi_unarm_tx($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr;



implementation vlsi_unarm_tx($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i64;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i24;
  var $i36: i24;
  var $i37: i24;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $i46: i32;
  var $i45: i32;
  var $i47: i1;
  var $i48: i32;
  var $p50: ref;
  var $i51: i64;
  var $i52: i64;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p58: ref;
  var $i59: i64;
  var $i60: i64;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $p66: ref;
  var $i67: i64;
  var $i68: i64;
  var $p70: ref;
  var $i71: i1;
  var $p73: ref;
  var $i74: i64;
  var $i75: i64;
  var $p77: ref;
  var $p79: ref;
  var $i80: i64;
  var $i81: i64;
  var $i82: i64;
  var $p84: ref;
  var $p85: ref;
  var $i86: i64;
  var $i87: i1;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} $p4 := pci_get_drvdata($p3);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} $p8 := ring_first($p7);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $p11 := $p8;
    goto $bb4;

  $bb4:
    call $i12, $i13, $i14, $p15, $p16, $p17, $i18, $i19, $p20, $i21, $p22, $p23, $i24, $i25, $p26, $p27, $p28, $p29, $p30, $p31, $p32, $p33, $p34, $i35, $i36, $i37, $p38, $p39, $i40, $i41, $i42, $i43, $i44, $i46, $i45, $i47, $i48, $p50, $i51, $i52, $p54, $i55, $i56, $p58, $i59, $i60, $p62, $i63, $i64, $p66, $i67, $i68, $p70, $i71, $p73, $i74, $i75, $p77, $p79, $i80, $i81, $i82, $p84, $p85, $i86, $i87, $p11 := vlsi_unarm_tx_loop_$bb4($p1, $p5, $p7, $i12, $i13, $i14, $p15, $p16, $p17, $i18, $i19, $p20, $i21, $p22, $p23, $i24, $i25, $p26, $p27, $p28, $p29, $p30, $p31, $p32, $p33, $p34, $i35, $i36, $i37, $p38, $p39, $i40, $i41, $i42, $i43, $i44, $i46, $i45, $i47, $i48, $p50, $i51, $i52, $p54, $i55, $i56, $p58, $i59, $i60, $p62, $i63, $i64, $p66, $i67, $i68, $p70, $i71, $p73, $i74, $i75, $p77, $p79, $i80, $i81, $i82, $p84, $p85, $i86, $i87, $p11);
    goto $bb4_last;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} $i12 := rd_is_active($p11);
    call {:si_unique_call 848} {:cexpr "tmp___2"} boogie_si_record_i32($i12);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} $i46 := vlsi_process_tx($p7, $p11);
    call {:si_unique_call 855} {:cexpr "ret"} boogie_si_record_i32($i46);
    assume {:verifier.code 0} true;
    $i45 := $i46;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i45, 0);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i47 == 1);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $i71 := $sgt.i32($i45, 0);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} $p85 := ring_get($p7);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $i86 := $p2i.ref.i64($p85);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i87 := $ne.i64($i86, 0);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i87 == 1);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb27:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    $p11 := $p85;
    goto $bb27_dummy;

  $bb24:
    assume $i71 == 1;
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(8, 1));
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i74 := $load.i64($M.0, $p73);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $i75 := $add.i64($i74, 1);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(8, 1));
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p77, $i75);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(24, 1));
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i80 := $load.i64($M.0, $p79);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $i81 := $sext.i32.i64($i45);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i82 := $add.i64($i80, $i81);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(24, 1));
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p84, $i82);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb15:
    assume $i47 == 1;
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $i48 := $sub.i32(0, $i45);
    call {:si_unique_call 860} {:cexpr "ret"} boogie_si_record_i32($i48);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(40, 1));
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.0, $p50);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i51, 1);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(40, 1));
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p54, $i52);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i48, 1);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i63 := $and.i32($i48, 2);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i64 == 1;
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(144, 1));
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i67 := $load.i64($M.0, $p66);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $i68 := $add.i64($i67, 1);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(144, 1));
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p70, $i68);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i56 == 1;
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $i59 := $load.i64($M.0, $p58);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i60 := $add.i64($i59, 1);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p62, $i60);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} rd_set_status($p11, 0);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} rd_set_count($p11, 0);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} $i14 := rd_get_addr($p11);
    call {:si_unique_call 852} {:cexpr "tmp___0"} boogie_si_record_i64($i14);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i18);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} pci_dma_sync_single_for_cpu($p16, $i14, $i19, $i21);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p11, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p29, .str.4);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p30, .str.146);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p31, .str.6);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p32, .str.147);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $i35 := $load.i24($M.10, $p34);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $i36 := $and.i24($i35, $sub.i24(0, 262144));
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $i37 := $or.i24($i36, 1117);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p34, $i37);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p38, 0);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.11, $p39);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i64($i40);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $i42 := $and.i64($i41, 1);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} $i43 := ldv__builtin_expect($i42, 0);
    call {:si_unique_call 858} {:cexpr "tmp___1"} boogie_si_record_i64($i43);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i45 := $sub.i32(0, 1);
    goto $bb14;

  $bb11:
    assume $i44 == 1;
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} __dynamic_pr_debug.ref.ref.ref($p1, .str.147, .str.146);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p11, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} dev_kfree_skb_any($p27);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p11, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $0.ref);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb27_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3986;
}



const vlsi_unarm_rx: ref;

axiom vlsi_unarm_rx == $sub.ref(0, 335914);

procedure vlsi_unarm_rx($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.0, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $CurrAddr, $M.3, $M.36, $M.38, $M.40, $M.42, $M.4, $M.37, $M.45, $M.39, $M.46, $M.41, $M.47, $M.43, $M.48, $M.5, assertsPassed;



implementation vlsi_unarm_rx($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i16;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i24;
  var $i24: i24;
  var $i25: i24;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $i33: i32;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i64;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i50: i32;
  var $i49: i32;
  var $i51: i1;
  var $i52: i32;
  var $p54: ref;
  var $i55: i64;
  var $i56: i64;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $p62: ref;
  var $i63: i64;
  var $i64: i64;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $p70: ref;
  var $i71: i64;
  var $i72: i64;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $p78: ref;
  var $i79: i64;
  var $i80: i64;
  var $p82: ref;
  var $i83: i32;
  var $i84: i1;
  var $p86: ref;
  var $i87: i64;
  var $i88: i64;
  var $p90: ref;
  var $i91: i32;
  var $i92: i1;
  var $p94: ref;
  var $i95: i64;
  var $i96: i64;
  var $p98: ref;
  var $i99: i1;
  var $p101: ref;
  var $i102: i64;
  var $i103: i64;
  var $p105: ref;
  var $p107: ref;
  var $i108: i64;
  var $i109: i64;
  var $i110: i64;
  var $p112: ref;
  var $p113: ref;
  var $i114: i64;
  var $i115: i1;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} $p4 := pci_get_drvdata($p3);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(120, 1));
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} $p8 := ring_first($p7);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $p11 := $p8;
    goto $bb4;

  $bb4:
    call $i12, $i13, $i14, $i15, $i16, $p17, $p18, $p19, $p20, $p21, $p22, $i23, $i24, $i25, $p26, $p27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $p35, $p36, $p37, $i38, $i39, $p40, $i41, $p42, $p43, $i44, $i45, $p46, $p47, $p48, $i50, $i49, $i51, $i52, $p54, $i55, $i56, $p58, $i59, $i60, $p62, $i63, $i64, $p66, $i67, $i68, $p70, $i71, $i72, $p74, $i75, $i76, $p78, $i79, $i80, $p82, $i83, $i84, $p86, $i87, $i88, $p90, $i91, $i92, $p94, $i95, $i96, $p98, $i99, $p101, $i102, $i103, $p105, $p107, $i108, $i109, $i110, $p112, $p113, $i114, $i115, $p11 := vlsi_unarm_rx_loop_$bb4($p1, $p5, $p7, $i12, $i13, $i14, $i15, $i16, $p17, $p18, $p19, $p20, $p21, $p22, $i23, $i24, $i25, $p26, $p27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $p35, $p36, $p37, $i38, $i39, $p40, $i41, $p42, $p43, $i44, $i45, $p46, $p47, $p48, $i50, $i49, $i51, $i52, $p54, $i55, $i56, $p58, $i59, $i60, $p62, $i63, $i64, $p66, $i67, $i68, $p70, $i71, $i72, $p74, $i75, $i76, $p78, $i79, $i80, $p82, $i83, $i84, $p86, $i87, $i88, $p90, $i91, $i92, $p94, $i95, $i96, $p98, $i99, $p101, $i102, $i103, $p105, $p107, $i108, $i109, $i110, $p112, $p113, $i114, $i115, $p11);
    goto $bb4_last;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} $i12 := rd_is_active($p11);
    call {:si_unique_call 866} {:cexpr "tmp___3"} boogie_si_record_i32($i12);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} $i50 := vlsi_process_rx($p7, $p11);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    call {:si_unique_call 871} {:cexpr "ret"} boogie_si_record_i32($i50);
    assume {:verifier.code 0} true;
    $i49 := $i50;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i49, 0);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i51 == 1);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i99 := $sgt.i32($i49, 0);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} $p113 := ring_get($p7);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $i114 := $p2i.ref.i64($p113);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i115 := $ne.i64($i114, 0);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i115 == 1);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb39:
    assume $i115 == 1;
    assume {:verifier.code 0} true;
    $p11 := $p113;
    goto $bb39_dummy;

  $bb36:
    assume $i99 == 1;
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $i102 := $load.i64($M.23, $p101);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $i103 := $add.i64($i102, 1);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $M.23 := $store.i64($M.23, $p105, $i103);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(16, 1));
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i108 := $load.i64($M.24, $p107);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i109 := $sext.i32.i64($i49);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $i110 := $add.i64($i108, $i109);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(16, 1));
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $M.24 := $store.i64($M.24, $p112, $i110);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb18:
    assume $i51 == 1;
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32(0, $i49);
    call {:si_unique_call 880} {:cexpr "ret"} boogie_si_record_i32($i52);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(32, 1));
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i55 := $load.i64($M.17, $p54);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i56 := $add.i64($i55, 1);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(32, 1));
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $M.17 := $store.i64($M.17, $p58, $i56);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $i59 := $and.i32($i52, 256);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i52, 512);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i75 := $and.i32($i52, 1024);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i83 := $and.i32($i52, 2048);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, 0);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i91 := $and.i32($i52, 4096);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i91, 0);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb32:
    assume $i92 == 1;
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(96, 1));
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $i95 := $load.i64($M.22, $p94);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $i96 := $add.i64($i95, 1);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(96, 1));
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $M.22 := $store.i64($M.22, $p98, $i96);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume $i84 == 1;
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(104, 1));
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $i87 := $load.i64($M.21, $p86);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $i88 := $add.i64($i87, 1);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(104, 1));
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $M.21 := $store.i64($M.21, $p90, $i88);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i76 == 1;
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(80, 1));
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i79 := $load.i64($M.20, $p78);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i80 := $add.i64($i79, 1);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(80, 1));
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $M.20 := $store.i64($M.20, $p82, $i80);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i68 == 1;
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(88, 1));
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i71 := $load.i64($M.19, $p70);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $i72 := $add.i64($i71, 1);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(88, 1));
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $M.19 := $store.i64($M.19, $p74, $i72);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i60 == 1;
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(48, 1));
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $i63 := $load.i64($M.18, $p62);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $i64 := $add.i64($i63, 1);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(48, 1));
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $M.18 := $store.i64($M.18, $p66, $i64);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} rd_set_status($p11, 0);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} $i14 := rd_get_count($p11);
    call {:si_unique_call 869} {:cexpr "tmp___1"} boogie_si_record_i16($i14);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} rd_set_count($p11, 0);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} $i34 := rd_get_addr($p11);
    call {:si_unique_call 877} {:cexpr "tmp___2"} boogie_si_record_i64($i34);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i39 := $zext.i32.i64($i38);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} pci_dma_sync_single_for_cpu($p36, $i34, $i39, $i41);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p11, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i49 := $i33;
    goto $bb17;

  $bb14:
    assume $i45 == 1;
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p11, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} dev_kfree_skb_any($p47);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p11, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, $0.ref);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p17, .str.4);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p18, .str.148);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p19, .str.6);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p20, .str.149);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $i23 := $load.i24($M.10, $p22);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $i24 := $and.i24($i23, $sub.i24(0, 262144));
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $i25 := $or.i24($i24, 684);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p22, $i25);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p26, 0);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.11, $p27);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i64($i28);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i30 := $and.i64($i29, 1);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} $i31 := ldv__builtin_expect($i30, 0);
    call {:si_unique_call 873} {:cexpr "tmp___0"} boogie_si_record_i64($i31);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(0, 256);
    goto $bb13;

  $bb10:
    assume $i32 == 1;
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} __dynamic_pr_debug.ref.ref.ref($p1, .str.149, .str.148);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb39_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4108;
}



const vlsi_stop_clock: ref;

axiom vlsi_stop_clock == $sub.ref(0, 336946);

procedure vlsi_stop_clock($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $CurrAddr;



implementation vlsi_stop_clock($p0: ref)
{
  var $p1: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $i6: i8;
  var $i7: i8;
  var $i8: i32;
  var $i9: i8;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;
  var $i15: i8;
  var $i16: i32;
  var $i17: i8;
  var vslice_dummy_var_294: i32;
  var vslice_dummy_var_295: i32;
  var vslice_dummy_var_296: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} vslice_dummy_var_294 := pci_read_config_byte($p0, 64, $p1);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.3, $p1);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i4, 128);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p1, $i6);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.3, $p1);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} vslice_dummy_var_295 := pci_write_config_byte($p0, 64, $i9);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.3, $p1);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 219);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p1, $i14);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.3, $p1);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} vslice_dummy_var_296 := pci_write_config_byte($p0, 64, $i17);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    return;
}



const ring_first: ref;

axiom ring_first == $sub.ref(0, 337978);

procedure ring_first($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ring_first($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} $i2 := atomic_read($p1);
    call {:si_unique_call 887} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i2, $i4);
    call {:si_unique_call 888} {:cexpr "h"} boogie_si_record_i32($i5);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} $i7 := atomic_read($p6);
    call {:si_unique_call 890} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i7, $i9);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i5, $i10);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $p16 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $r := $p16;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i5);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p13, $mul.ref($i14, 24));
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $p16 := $p15;
    goto $bb3;
}



const rd_set_status: ref;

axiom rd_set_status == $sub.ref(0, 339010);

procedure rd_set_status($p0: ref, $i1: i8);
  free requires assertsPassed;
  modifies $M.0;



implementation rd_set_status($p0: ref, $i1: i8)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} {:cexpr "rd_set_status:arg:s"} boogie_si_record_i8($i1);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, $i1);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    return;
}



const rd_set_count: ref;

axiom rd_set_count == $sub.ref(0, 340042);

procedure rd_set_count($p0: ref, $i1: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation rd_set_count($p0: ref, $i1: i16)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} {:cexpr "rd_set_count:arg:c"} boogie_si_record_i16($i1);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, $i1);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    return;
}



const pci_dma_sync_single_for_cpu: ref;

axiom pci_dma_sync_single_for_cpu == $sub.ref(0, 341074);

procedure pci_dma_sync_single_for_cpu($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation pci_dma_sync_single_for_cpu($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} {:cexpr "pci_dma_sync_single_for_cpu:arg:dma_handle"} boogie_si_record_i64($i1);
    call {:si_unique_call 894} {:cexpr "pci_dma_sync_single_for_cpu:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 895} {:cexpr "pci_dma_sync_single_for_cpu:arg:direction"} boogie_si_record_i32($i3);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} dma_sync_single_for_cpu($p7, $i1, $i2, $i3);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const dev_kfree_skb_any: ref;

axiom dev_kfree_skb_any == $sub.ref(0, 342106);

procedure dev_kfree_skb_any($p0: ref);
  free requires assertsPassed;



implementation dev_kfree_skb_any($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} __dev_kfree_skb_any($p0, 1);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    return;
}



const vlsi_process_rx: ref;

axiom vlsi_process_rx == $sub.ref(0, 343138);

procedure vlsi_process_rx($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr, $M.3, $M.36, $M.38, $M.40, $M.42, $M.4, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.37, $M.45, $M.39, $M.46, $M.41, $M.47, $M.43, $M.48, $M.5, assertsPassed;



implementation vlsi_process_rx($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i8;
  var $i19: i16;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i32;
  var $i45: i16;
  var $i46: i32;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i24;
  var $i60: i24;
  var $i61: i24;
  var $p62: ref;
  var $p63: ref;
  var $i64: i8;
  var $i65: i64;
  var $i66: i64;
  var $i67: i64;
  var $i68: i1;
  var $i69: i32;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i64;
  var $i77: i16;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i24;
  var $i87: i24;
  var $i88: i24;
  var $p89: ref;
  var $p90: ref;
  var $i91: i8;
  var $i92: i64;
  var $i93: i64;
  var $i94: i64;
  var $i95: i1;
  var $i96: i32;
  var $p97: ref;
  var $p98: ref;
  var $i99: i64;
  var $i100: i1;
  var $i101: i32;
  var $i102: i1;
  var $i104: i32;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i64;
  var $i113: i32;
  var $i114: i64;
  var $i115: i64;
  var $i116: i1;
  var $i43: i32;
  var $i44: i32;
  var $i119: i1;
  var $i120: i32;
  var $i121: i32;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var vslice_dummy_var_297: i32;
  var vslice_dummy_var_298: i32;
  var vslice_dummy_var_299: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} $p6 := pci_get_drvdata($p5);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} $p8 := netdev_priv($p7);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} $i10 := rd_get_addr($p1);
    call {:si_unique_call 903} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i14);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} pci_dma_sync_single_for_cpu($p12, $i10, $i15, $i17);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} $i18 := rd_get_status($p1);
    call {:si_unique_call 906} {:cexpr "tmp___2"} boogie_si_record_i8($i18);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i16($i18);
    call {:si_unique_call 907} {:cexpr "status"} boogie_si_record_i16($i19);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 124);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} $i45 := rd_get_count($p1);
    call {:si_unique_call 915} {:cexpr "tmp___3"} boogie_si_record_i16($i45);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i45);
    call {:si_unique_call 916} {:cexpr "len"} boogie_si_record_i32($i46);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p9, $mul.ref(0, 384)), $mul.ref(84, 1));
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.26, $p47);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 4);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $i50 := (if $i49 == 1 then 4 else 2);
    call {:si_unique_call 917} {:cexpr "crclen"} boogie_si_record_i32($i50);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $i51 := $sub.i32($i46, $i50);
    call {:si_unique_call 918} {:cexpr "len"} boogie_si_record_i32($i51);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $i52 := $sle.i32($i51, 0);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p9, $mul.ref(0, 384)), $mul.ref(84, 1));
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.26, $p70);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 1);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p98);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $i100 := $eq.i64($i99, 0);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p107, $0.ref);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p106, $mul.ref(0, 232)), $mul.ref(32, 1));
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p108, $p6);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} $p109 := skb_put($p106, $i51);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $i112 := $sext.i32.i64($i51);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 934} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p109, $p111, $i112, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} skb_reset_mac_header($p106);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} $i113 := preempt_count();
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    call {:si_unique_call 937} {:cexpr "tmp___9"} boogie_si_record_i32($i113);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $i114 := $sext.i32.i64($i113);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i115 := $and.i64($i114, 2096896);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $i116 := $ne.i64($i115, 0);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i116 == 1);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} vslice_dummy_var_299 := netif_rx_ni($p106);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i43, $i44 := $i51, 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} rd_set_status($p1, 0);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} rd_set_count($p1, 0);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i44, 0);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i119 == 1);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $i121 := $i43;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $r := $i121;
    return;

  $bb41:
    assume $i119 == 1;
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $i120 := $sub.i32(0, $i44);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $i121 := $i120;
    goto $bb43;

  $bb38:
    assume $i116 == 1;
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} vslice_dummy_var_298 := netif_rx($p106);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    goto $bb40;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i100 == 1;
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} $i101 := net_ratelimit();
    call {:si_unique_call 930} {:cexpr "tmp___7"} boogie_si_record_i32($i101);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i101, 0);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i104 := $or.i32(0, 256);
    call {:si_unique_call 932} {:cexpr "ret"} boogie_si_record_i32($i104);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $i43, $i44 := $i51, $i104;
    goto $bb15;

  $bb34:
    assume $i102 == 1;
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} vslice_dummy_var_297 := printk.ref.ref(.str.9, .str.5);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb23:
    assume $i72 == 1;
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i51, $i50);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i75);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} $i77 := crc_ccitt($sub.i16(0, 1), $p74, $i76);
    call {:si_unique_call 924} {:cexpr "tmp___6"} boogie_si_record_i16($i77);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $i78 := $zext.i16.i32($i77);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 61624);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb25:
    assume $i79 == 1;
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p80, .str.4);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p81, .str.5);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p82, .str.6);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p83, .str.8);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i86 := $load.i24($M.10, $p85);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $i87 := $and.i24($i86, $sub.i24(0, 262144));
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $i88 := $or.i24($i87, 566);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p85, $i88);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p89, 0);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.11, $p90);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i64($i91);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $i93 := $and.i64($i92, 1);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} $i94 := ldv__builtin_expect($i93, 0);
    call {:si_unique_call 926} {:cexpr "tmp___5"} boogie_si_record_i64($i94);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i95 := $ne.i64($i94, 0);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i96 := $or.i32(0, 4096);
    call {:si_unique_call 928} {:cexpr "ret"} boogie_si_record_i32($i96);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $i43, $i44 := $i51, $i96;
    goto $bb15;

  $bb27:
    assume $i95 == 1;
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} __dynamic_pr_debug.ref.ref.ref($p3, .str.8, .str.5);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb17:
    assume $i52 == 1;
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p53, .str.4);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p54, .str.5);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p55, .str.6);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p56, .str.7);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $i59 := $load.i24($M.10, $p58);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $i60 := $and.i24($i59, $sub.i24(0, 262144));
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i61 := $or.i24($i60, 551);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p58, $i61);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p62, 0);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.11, $p63);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i64($i64);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i66 := $and.i64($i65, 1);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} $i67 := ldv__builtin_expect($i66, 0);
    call {:si_unique_call 920} {:cexpr "tmp___4"} boogie_si_record_i64($i67);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i67, 0);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i69 := $or.i32(0, 256);
    call {:si_unique_call 922} {:cexpr "ret"} boogie_si_record_i32($i69);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i43, $i44 := $i51, $i69;
    goto $bb15;

  $bb19:
    assume $i68 == 1;
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} __dynamic_pr_debug.ref.ref.ref.i32($p2, .str.7, .str.5, $i51);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i19);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 8);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i19);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 16);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i32 := $i27;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i19);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 64);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i37 := $i32;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i19);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 32);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i42 := $i37;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i43, $i44 := 0, $i42;
    goto $bb15;

  $bb12:
    assume $i40 == 1;
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $i41 := $or.i32($i37, 4096);
    call {:si_unique_call 911} {:cexpr "ret"} boogie_si_record_i32($i41);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $i42 := $i41;
    goto $bb14;

  $bb9:
    assume $i35 == 1;
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i32, 2048);
    call {:si_unique_call 910} {:cexpr "ret"} boogie_si_record_i32($i36);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb11;

  $bb6:
    assume $i30 == 1;
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i27, 1024);
    call {:si_unique_call 909} {:cexpr "ret"} boogie_si_record_i32($i31);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $i32 := $i31;
    goto $bb8;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i26 := $or.i32(0, 512);
    call {:si_unique_call 908} {:cexpr "ret"} boogie_si_record_i32($i26);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb5;
}



const ring_get: ref;

axiom ring_get == $sub.ref(0, 344170);

procedure ring_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ring_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} atomic_inc($p1);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} $p2 := ring_first($p0);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const crc_ccitt: ref;

axiom crc_ccitt == $sub.ref(0, 345202);

procedure crc_ccitt($i0: i16, $p1: ref, $i2: i64) returns ($r: i16);
  free requires assertsPassed;



implementation crc_ccitt($i0: i16, $p1: ref, $i2: i64) returns ($r: i16)
{
  var $i3: i16;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 942} {:cexpr "crc_ccitt:arg:arg0"} boogie_si_record_i16($i0);
    call {:si_unique_call 943} {:cexpr "crc_ccitt:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 1} true;
    call {:si_unique_call 944} $i3 := __VERIFIER_nondet_ushort();
    call {:si_unique_call 945} {:cexpr "smack:ext:__VERIFIER_nondet_ushort"} boogie_si_record_i16($i3);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const skb_put: ref;

axiom skb_put == $sub.ref(0, 346234);

procedure skb_put($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_put($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} {:cexpr "skb_put:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} $p2 := external_alloc();
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const skb_reset_mac_header: ref;

axiom skb_reset_mac_header == $sub.ref(0, 347266);

procedure skb_reset_mac_header($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation skb_reset_mac_header($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i16;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $i12: i16;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i16($i3);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i16($i8);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32($i5, $i10);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(198, 1));
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p13, $i12);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    return;
}



const preempt_count: ref;

axiom preempt_count == $sub.ref(0, 348298);

procedure preempt_count() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.36, $M.38, $M.40, $M.42, $M.4, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $CurrAddr, $M.37, $M.45, $M.39, $M.46, $M.41, $M.47, $M.43, $M.48, $M.5, assertsPassed;



implementation preempt_count() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} $i0 := devirtbounce.8(0, __preempt_count);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    call {:si_unique_call 949} {:cexpr "pfo_ret__"} boogie_si_record_i32($i0);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $and.i32($i0, 2147483647);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const netif_rx: ref;

axiom netif_rx == $sub.ref(0, 349330);

procedure netif_rx($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation netif_rx($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 1} true;
    call {:si_unique_call 950} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 951} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const netif_rx_ni: ref;

axiom netif_rx_ni == $sub.ref(0, 350362);

procedure netif_rx_ni($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation netif_rx_ni($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 1} true;
    call {:si_unique_call 952} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 953} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __dev_kfree_skb_any: ref;

axiom __dev_kfree_skb_any == $sub.ref(0, 351394);

procedure __dev_kfree_skb_any($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __dev_kfree_skb_any($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} {:cexpr "__dev_kfree_skb_any:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    return;
}



const dma_sync_single_for_cpu: ref;

axiom dma_sync_single_for_cpu == $sub.ref(0, 352426);

procedure dma_sync_single_for_cpu($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation dma_sync_single_for_cpu($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} {:cexpr "dma_sync_single_for_cpu:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 956} {:cexpr "dma_sync_single_for_cpu:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 957} {:cexpr "dma_sync_single_for_cpu:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} $p4 := get_dma_ops($p0);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} $i5 := valid_dma_direction($i3);
    call {:si_unique_call 960} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 962} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(64, 1));
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} debug_dma_sync_single_for_cpu($p0, $i1, $i2, $i3);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(64, 1));
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    call {:si_unique_call 964} devirtbounce.4($p16, $p0, $i1, $i2, $i3);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    call {:si_unique_call 963} devirtbounce.3(0, .str.10, 108, 12);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_sync_single_for_cpu_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const debug_dma_sync_single_for_cpu: ref;

axiom debug_dma_sync_single_for_cpu == $sub.ref(0, 353458);

procedure debug_dma_sync_single_for_cpu($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation debug_dma_sync_single_for_cpu($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} {:cexpr "debug_dma_sync_single_for_cpu:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 967} {:cexpr "debug_dma_sync_single_for_cpu:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 968} {:cexpr "debug_dma_sync_single_for_cpu:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    return;
}



const vlsi_process_tx: ref;

axiom vlsi_process_tx == $sub.ref(0, 354490);

procedure vlsi_process_tx($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vlsi_process_tx($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $i9: i32;
  var $i10: i8;
  var $i11: i16;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i28: i16;
  var $i29: i32;
  var $i27: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} $i2 := rd_get_addr($p1);
    call {:si_unique_call 970} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} pci_dma_sync_single_for_cpu($p4, $i2, $i7, $i9);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} $i10 := rd_get_status($p1);
    call {:si_unique_call 973} {:cexpr "tmp___0"} boogie_si_record_i8($i10);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i16($i10);
    call {:si_unique_call 974} {:cexpr "status"} boogie_si_record_i16($i11);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 1);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} rd_set_status($p1, 0);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} $i28 := rd_get_count($p1);
    call {:si_unique_call 979} {:cexpr "tmp___1"} boogie_si_record_i16($i28);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    call {:si_unique_call 980} {:cexpr "len"} boogie_si_record_i32($i29);
    assume {:verifier.code 0} true;
    $i27 := $i29;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} rd_set_count($p1, 0);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i15, 0);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $i32 := $i27;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, $i15);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $i32 := $i31;
    goto $bb9;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    call {:si_unique_call 976} {:cexpr "len"} boogie_si_record_i32($i23);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} dev_kfree_skb_any($p25);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $0.ref);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i27 := $i23;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $i15 := 2;
    goto $bb3;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 355522);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.4;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $M.4 := 0;
    call {:si_unique_call 982} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irqrestore_12: ref;

axiom ldv_spin_unlock_irqrestore_12 == $sub.ref(0, 356554);

procedure ldv_spin_unlock_irqrestore_12($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_12($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} {:cexpr "ldv_spin_unlock_irqrestore_12:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 357586);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    return;
}



const ldv_unregister_netdev_42: ref;

axiom ldv_unregister_netdev_42 == $sub.ref(0, 358618);

procedure ldv_unregister_netdev_42($p0: ref);
  free requires assertsPassed;
  modifies $M.27;



implementation ldv_unregister_netdev_42($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} unregister_netdev($p0);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $M.27 := 0;
    call {:si_unique_call 987} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    return;
}



const remove_proc_entry: ref;

axiom remove_proc_entry == $sub.ref(0, 359650);

procedure remove_proc_entry($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation remove_proc_entry($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_netdev_43: ref;

axiom ldv_free_netdev_43 == $sub.ref(0, 360682);

procedure ldv_free_netdev_43($p0: ref);
  free requires assertsPassed;
  modifies $M.27;



implementation ldv_free_netdev_43($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} free_netdev($p0);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $M.27 := 0;
    call {:si_unique_call 989} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    return;
}



const free_netdev: ref;

axiom free_netdev == $sub.ref(0, 361714);

procedure free_netdev($p0: ref);
  free requires assertsPassed;



implementation free_netdev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    return;
}



const unregister_netdev: ref;

axiom unregister_netdev == $sub.ref(0, 362746);

procedure unregister_netdev($p0: ref);
  free requires assertsPassed;



implementation unregister_netdev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    return;
}



const pci_enable_device: ref;

axiom pci_enable_device == $sub.ref(0, 363778);

procedure pci_enable_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 1} true;
    call {:si_unique_call 990} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 991} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const alloc_irdadev: ref;

axiom alloc_irdadev == $sub.ref(0, 364810);

procedure alloc_irdadev($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_irdadev($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} {:cexpr "alloc_irdadev:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} $p1 := external_alloc();
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 365842);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 366874);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 367906);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    return;
}



const vlsi_irda_init: ref;

axiom vlsi_irda_init == $sub.ref(0, 368938);

procedure vlsi_irda_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vlsi_irda_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $p21: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i16;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $i20: i32;
  var vslice_dummy_var_300: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} $p1 := netdev_priv($p0);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(64, 1));
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i6);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(56, 1));
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p12, $i11);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} $i13 := pci_set_dma_mask($p4, 4294967295);
    call {:si_unique_call 996} {:cexpr "tmp___1"} boogie_si_record_i32($i13);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} $i15 := pci_set_dma_mask($p4, 16777215);
    call {:si_unique_call 998} {:cexpr "tmp___2"} boogie_si_record_i32($i15);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 384)), $mul.ref(16, 1));
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} irda_init_max_qos_capabilies($p21);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 384)), $mul.ref(16, 1)), $mul.ref(4, 1)), $mul.ref(4, 1));
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p24, 447);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $i25 := $M.28;
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i16($i25);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 384)), $mul.ref(16, 1)), $mul.ref(44, 1)), $mul.ref(4, 1));
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p29, $i26);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 384)), $mul.ref(16, 1));
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} irda_qos_bits_to_value($p30);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $i33 := $or.i32($i32, 24576);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i33);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(558, 1));
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, 0);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(512, 1));
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, vlsi_netdev_ops);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1120, 1));
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 125);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1368, 1)), $mul.ref(0, 1));
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $p38);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} $i17 := net_ratelimit();
    call {:si_unique_call 1000} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 1);
    goto $bb9;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} vslice_dummy_var_300 := printk.ref.ref(.str.187, .str.188);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_register_netdev_40: ref;

axiom ldv_register_netdev_40 == $sub.ref(0, 369970);

procedure ldv_register_netdev_40($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.27, $M.29, $M.0, $CurrAddr;



implementation ldv_register_netdev_40($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} $i1 := register_netdev($p0);
    call {:si_unique_call 1005} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 1006} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} ldv_net_device_ops_3();
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const proc_create_data: ref;

axiom proc_create_data == $sub.ref(0, 371002);

procedure proc_create_data($p0: ref, $i1: i16, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation proc_create_data($p0: ref, $i1: i16, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} {:cexpr "proc_create_data:arg:arg1"} boogie_si_record_i16($i1);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} $p5 := external_alloc();
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const proc_set_size: ref;

axiom proc_set_size == $sub.ref(0, 372034);

procedure proc_set_size($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation proc_set_size($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} {:cexpr "proc_set_size:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    return;
}



const pci_set_drvdata: ref;

axiom pci_set_drvdata == $sub.ref(0, 373066);

procedure pci_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pci_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} dev_set_drvdata($p2, $p1);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_netdev_41: ref;

axiom ldv_free_netdev_41 == $sub.ref(0, 374098);

procedure ldv_free_netdev_41($p0: ref);
  free requires assertsPassed;
  modifies $M.27;



implementation ldv_free_netdev_41($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} free_netdev($p0);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $M.27 := 0;
    call {:si_unique_call 1013} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 375130);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    return;
}



const register_netdev: ref;

axiom register_netdev == $sub.ref(0, 376162);

procedure register_netdev($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_netdev($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1014} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1015} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_net_device_ops_3: ref;

axiom ldv_net_device_ops_3 == $sub.ref(0, 377194);

procedure ldv_net_device_ops_3();
  free requires assertsPassed;
  modifies $M.29, $M.0, $CurrAddr;



implementation ldv_net_device_ops_3()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} $p0 := ldv_init_zalloc(3008);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $M.29 := $p0;
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 378226);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} $p1 := calloc(1, $i0);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1019} __VERIFIER_assume($i4);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const pci_set_dma_mask: ref;

axiom pci_set_dma_mask == $sub.ref(0, 379258);

procedure pci_set_dma_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation pci_set_dma_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} {:cexpr "pci_set_dma_mask:arg:mask"} boogie_si_record_i64($i1);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} $i3 := dma_set_mask($p2, $i1);
    call {:si_unique_call 1022} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const irda_init_max_qos_capabilies: ref;

axiom irda_init_max_qos_capabilies == $sub.ref(0, 380290);

procedure irda_init_max_qos_capabilies($p0: ref);
  free requires assertsPassed;



implementation irda_init_max_qos_capabilies($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    return;
}



const irda_qos_bits_to_value: ref;

axiom irda_qos_bits_to_value == $sub.ref(0, 381322);

procedure irda_qos_bits_to_value($p0: ref);
  free requires assertsPassed;



implementation irda_qos_bits_to_value($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    return;
}



const dma_set_mask: ref;

axiom dma_set_mask == $sub.ref(0, 382354);

procedure dma_set_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dma_set_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1023} {:cexpr "dma_set_mask:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1024} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1025} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const vlsi_open: ref;

axiom vlsi_open == $sub.ref(0, 383386);

procedure vlsi_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.36, $M.38, $M.40, $M.42, $CurrAddr, $M.37, $M.45, $M.39, $M.46, $M.41, $M.47, $M.43, $M.48, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, assertsPassed;



implementation vlsi_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p13: ref;
  var $p14: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i39: i32;
  var $i40: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p56: ref;
  var $i57: i64;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p70: ref;
  var $p71: ref;
  var $i55: i32;
  var $i41: i32;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $i38: i32;
  var $p76: ref;
  var $p77: ref;
  var $i12: i32;
  var $i69: i32;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var vslice_dummy_var_301: i32;
  var vslice_dummy_var_302: i32;
  var vslice_dummy_var_303: i32;
  var vslice_dummy_var_304: i32;
  var vslice_dummy_var_305: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} $p1 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} $p3 := netdev_priv($p0);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} $i7 := pci_request_regions($p6, drivername);
    call {:si_unique_call 1030} {:cexpr "tmp___1"} boogie_si_record_i32($i7);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p14, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(56, 1));
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i18);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(64, 1));
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(56, 1));
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i64.i32($i26);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} outb(84, $i27);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(64, 1));
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p0);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} $i31 := ldv_request_irq_37($i29, vlsi_interrupt, 128, drivername, $p30);
    call {:si_unique_call 1036} {:cexpr "tmp___3"} boogie_si_record_i32($i31);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} $i39 := vlsi_create_hwif($p4);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    call {:si_unique_call 1042} {:cexpr "err"} boogie_si_record_i32($i39);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p1);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(56, 1));
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.0, $p43);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i64.i32($i44);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} vslice_dummy_var_303 := sprintf.ref.ref.i32($p42, .str.157, $i45);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(16, 1));
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p1);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} $p49 := irlap_open($p0, $p47, $p48);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(8, 1));
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, $p49);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(8, 1));
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $i54 := $eq.i64($i53, 0);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(128, 1));
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} $i57 := ktime_get();
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p58, $i57);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p56);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p2);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 1048} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p59, $p60, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(92, 1));
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, 9600);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} $i62 := vlsi_start_hw($p4);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    call {:si_unique_call 1050} {:cexpr "err"} boogie_si_record_i32($i62);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} netif_start_queue($p0);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} $i64 := net_ratelimit();
    call {:si_unique_call 1054} {:cexpr "tmp___4"} boogie_si_record_i32($i64);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i69 := 0;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $r := $i69;
    return;

  $bb27:
    assume $i65 == 1;
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} vslice_dummy_var_305 := printk.ref.ref.ref(.str.158, .str.155, $p67);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb23:
    assume $i63 == 1;
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(8, 1));
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} irlap_close($p71);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i55 := $i62;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} vslice_dummy_var_304 := vlsi_destroy_hwif($p4);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $i41 := $i55;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(64, 1));
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p0);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} ldv_free_irq_38($i74, $p75);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $i38 := $i41;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} pci_release_regions($p77);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $i12 := $i38;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $i69 := $i12;
    goto $bb30;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i54 == 1;
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $i55 := $i39;
    goto $bb21;

  $bb15:
    assume $i40 == 1;
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $i41 := $i39;
    goto $bb17;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i32 == 1;
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} $i33 := net_ratelimit();
    call {:si_unique_call 1038} {:cexpr "tmp___2"} boogie_si_record_i32($i33);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32(0, 11);
    goto $bb13;

  $bb10:
    assume $i34 == 1;
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(64, 1));
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} vslice_dummy_var_302 := printk.ref.ref.i32(.str.156, .str.155, $i36);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} $i9 := net_ratelimit();
    call {:si_unique_call 1032} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 11);
    goto $bb6;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} vslice_dummy_var_301 := printk.ref.ref(.str.154, .str.155);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const vlsi_close: ref;

axiom vlsi_close == $sub.ref(0, 384418);

procedure vlsi_close($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.3, $M.36, $M.38, $M.40, $M.42, $CurrAddr, $M.37, $M.45, $M.39, $M.46, $M.41, $M.47, $M.43, $M.48, $M.5, assertsPassed;



implementation vlsi_close($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var vslice_dummy_var_306: i32;
  var vslice_dummy_var_307: i32;
  var vslice_dummy_var_308: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} $p1 := netdev_priv($p0);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} netif_stop_queue($p0);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 384)), $mul.ref(8, 1));
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 384)), $mul.ref(8, 1));
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $0.ref);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} vslice_dummy_var_306 := vlsi_stop_hw($p2);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} vslice_dummy_var_307 := vlsi_destroy_hwif($p2);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(64, 1));
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p0);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} ldv_free_irq_39($i13, $p14);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} pci_release_regions($p16);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} $i17 := net_ratelimit();
    call {:si_unique_call 1064} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} vslice_dummy_var_308 := printk.ref.ref.ref(.str.144, .str.145, $p20);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 384)), $mul.ref(8, 1));
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} irlap_close($p8);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vlsi_hard_start_xmit: ref;

axiom vlsi_hard_start_xmit == $sub.ref(0, 385450);

procedure vlsi_hard_start_xmit($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.30, $M.31, $M.32, $M.33, $CurrAddr, $M.34, $M.35;



implementation vlsi_hard_start_xmit($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i8;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $i47: i16;
  var $i48: i32;
  var $i49: i1;
  var $i50: i64;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p55: ref;
  var $i56: i64;
  var $p57: ref;
  var $i58: i64;
  var $i59: i64;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i64;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i32;
  var $i69: i8;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $i80: i1;
  var $i84: i32;
  var $i85: i32;
  var $i86: i8;
  var $p87: ref;
  var $i88: i32;
  var $p89: ref;
  var $i90: i32;
  var $i91: i1;
  var $p93: ref;
  var $p94: ref;
  var $i82: i8;
  var $i83: i32;
  var $p95: ref;
  var $i96: i16;
  var $i97: i32;
  var $i98: i16;
  var $i99: i32;
  var $i100: i8;
  var $i101: i64;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $i106: i64;
  var $p107: ref;
  var $i108: i32;
  var $i109: i32;
  var $i110: i16;
  var $i111: i32;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;
  var $i115: i64;
  var $i116: i32;
  var $i117: i32;
  var $i118: i16;
  var $i119: i32;
  var $i120: i32;
  var $i121: i1;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $i128: i24;
  var $i129: i24;
  var $i130: i24;
  var $p131: ref;
  var $p132: ref;
  var $i133: i8;
  var $i134: i64;
  var $i135: i64;
  var $i136: i64;
  var $i137: i1;
  var $i138: i32;
  var $i139: i16;
  var $i140: i32;
  var $i141: i32;
  var $i142: i16;
  var $i143: i32;
  var $i144: i32;
  var $p145: ref;
  var $i146: i64;
  var $i147: i1;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $i154: i24;
  var $i155: i24;
  var $i156: i24;
  var $p157: ref;
  var $p158: ref;
  var $i159: i8;
  var $i160: i64;
  var $i161: i64;
  var $i162: i64;
  var $i163: i1;
  var $p164: ref;
  var $p25: ref;
  var $p165: ref;
  var $p92: ref;
  var $i166: i32;
  var $i167: i1;
  var $p170: ref;
  var $i171: i64;
  var $i172: i64;
  var $p174: ref;
  var $p176: ref;
  var $i177: i64;
  var $i178: i64;
  var $p180: ref;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var vslice_dummy_var_309: i32;
  var vslice_dummy_var_310: i32;
  var vslice_dummy_var_311: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} $p6 := netdev_priv($p1);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(56, 1));
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i64.i32($i11);
    call {:si_unique_call 1071} {:cexpr "iobase"} boogie_si_record_i32($i12);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} $i13 := irda_get_next_speed($p0);
    call {:si_unique_call 1073} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} ldv_spin_lock();
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, $sub.i32(0, 1));
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} $p33 := ring_last($p9);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $i35 := $eq.i64($i34, 0);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} $i36 := rd_is_active($p33);
    call {:si_unique_call 1084} {:cexpr "tmp___2"} boogie_si_record_i32($i36);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p33, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 0);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p33, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p7, $mul.ref(0, 384)), $mul.ref(136, 1));
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} spin_unlock_irqrestore($p46, $u0);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} $i47 := irda_get_mtt($p0);
    call {:si_unique_call 1087} {:cexpr "tmp___5"} boogie_si_record_i16($i47);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i32($i47);
    call {:si_unique_call 1088} {:cexpr "mtt"} boogie_si_record_i32($i48);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $i49 := $sgt.i32($i48, 0);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p7, $mul.ref(0, 384)), $mul.ref(84, 1));
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 1);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i66 == 1);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i19);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $i85 := $or.i32($i84, 16);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i32.i8($i85);
    call {:si_unique_call 1098} {:cexpr "status"} boogie_si_record_i8($i86);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    call {:si_unique_call 1099} {:cexpr "len"} boogie_si_record_i32($i88);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p89);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $i91 := $ugt.i32($i88, $i90);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i91 == 1);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p33, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} skb_copy_from_linear_data($p0, $p94, $i88);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i82, $i83 := $i86, $i88;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p33, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p95, $p0);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i32.i16($i83);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $i97 := $zext.i16.i32($i96);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i32.i16($i97);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} rd_set_count($p33, $i98);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i82);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i32.i8($i99);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} rd_set_status($p33, $i100);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} $i101 := rd_get_addr($p33);
    call {:si_unique_call 1106} {:cexpr "tmp___7"} boogie_si_record_i64($i101);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $i106 := $zext.i32.i64($i105);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.0, $p107);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} pci_dma_sync_single_for_device($p103, $i101, $i106, $i108);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} ldv_spin_lock();
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} rd_activate($p33);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $i109 := $add.i32($i12, 20);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} $i110 := inw($i109);
    call {:si_unique_call 1111} {:cexpr "tmp___10"} boogie_si_record_i16($i110);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $i111 := $zext.i16.i32($i110);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $i112 := $and.i32($i111, 1024);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i112, 0);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} $p145 := ring_put($p9);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $i146 := $p2i.ref.i64($p145);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $i147 := $eq.i64($i146, 0);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p7, $mul.ref(0, 384)), $mul.ref(136, 1));
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} spin_unlock_irqrestore($p164, $u0);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb58:
    assume $i147 == 1;
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} netif_stop_queue($p1);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p148, .str.4);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p149, .str.172);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p150, .str.6);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p151, .str.174);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $p153 := $bitcast.ref.ref($p152);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $i154 := $load.i24($M.10, $p153);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $i155 := $and.i24($i154, $sub.i24(0, 262144));
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $i156 := $or.i24($i155, 1018);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p153, $i156);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p157, 0);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $i159 := $load.i8($M.11, $p158);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $i160 := $zext.i8.i64($i159);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $i161 := $and.i64($i160, 1);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} $i162 := ldv__builtin_expect($i161, 0);
    call {:si_unique_call 1130} {:cexpr "tmp___11"} boogie_si_record_i64($i162);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $i163 := $ne.i64($i162, 0);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    assume {:branchcond $i163} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb60:
    assume $i163 == 1;
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} __dynamic_pr_debug.ref.ref.ref($p4, .str.174, .str.172);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb49:
    assume $i113 == 1;
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(56, 1));
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $i115 := $load.i64($M.0, $p114);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $i116 := $trunc.i64.i32($i115);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $i117 := $add.i32($i116, 28);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} $i118 := inw($i117);
    call {:si_unique_call 1116} {:cexpr "tmp___8"} boogie_si_record_i16($i118);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $i119 := $zext.i16.i32($i118);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $i120 := $and.i32($i119, 4095);
    call {:si_unique_call 1117} {:cexpr "fifocnt"} boogie_si_record_i32($i120);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i120, 0);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    assume {:branchcond $i121} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i138 := $add.i32($i12, 16);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} $i139 := inw($i138);
    call {:si_unique_call 1122} {:cexpr "config"} boogie_si_record_i16($i139);
    call {:si_unique_call 1123} devirtbounce(0);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $i140 := $zext.i16.i32($i139);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $i141 := $or.i32($i140, 4096);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $i142 := $trunc.i32.i16($i141);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $i143 := $add.i32($i12, 16);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} outw($i142, $i143);
    call {:si_unique_call 1125} devirtbounce(0);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $i144 := $add.i32($i12, 8);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} outw(0, $i144);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb51:
    assume $i121 == 1;
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p122, .str.4);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p123, .str.172);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p124, .str.6);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p125, .str.20);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $p127 := $bitcast.ref.ref($p126);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $i128 := $load.i24($M.10, $p127);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $i129 := $and.i24($i128, $sub.i24(0, 262144));
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $i130 := $or.i24($i129, 1006);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p127, $i130);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p131, 0);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $i133 := $load.i8($M.11, $p132);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $i134 := $zext.i8.i64($i133);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $i135 := $and.i64($i134, 1);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} $i136 := ldv__builtin_expect($i135, 0);
    call {:si_unique_call 1119} {:cexpr "tmp___9"} boogie_si_record_i64($i136);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $i137 := $ne.i64($i136, 0);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    assume {:branchcond $i137} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb53:
    assume $i137 == 1;
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} __dynamic_pr_debug.ref.ref.ref.i32($p3, .str.20, .str.172, $i120);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb45:
    assume $i91 == 1;
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $p92 := .str.173;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} $i166 := net_ratelimit();
    call {:si_unique_call 1114} {:cexpr "tmp___13"} boogie_si_record_i32($i166);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i167 := $ne.i32($i166, 0);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    assume {:branchcond $i167} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} dev_kfree_skb_any($p0);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(40, 1));
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $i171 := $load.i64($M.0, $p170);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $i172 := $add.i64($i171, 1);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(40, 1));
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p174, $i172);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $i177 := $load.i64($M.0, $p176);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $i178 := $add.i64($i177, 1);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p180, $i178);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb64:
    assume $i167 == 1;
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} vslice_dummy_var_311 := printk.ref.ref.ref(.str.175, .str.172, $p92);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb36:
    assume $i66 == 1;
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i19);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $i68 := $or.i32($i67, 64);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i8($i68);
    call {:si_unique_call 1095} {:cexpr "status"} boogie_si_record_i8($i69);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p33, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} $i74 := async_wrap_skb($p0, $p71, $i73);
    call {:si_unique_call 1097} {:cexpr "len"} boogie_si_record_i32($i74);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $i77 := $sub.i32($i76, 5);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $i78 := $uge.i32($i74, $i77);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i82, $i83 := $i69, $i74;
    goto $bb44;

  $bb38:
    assume $i78 == 1;
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} $i79 := net_ratelimit();
    call {:si_unique_call 1101} {:cexpr "tmp___6"} boogie_si_record_i32($i79);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb40:
    assume $i80 == 1;
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} vslice_dummy_var_310 := printk.ref.ref(.str.171, .str.172);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb30:
    assume $i49 == 1;
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} $i50 := ktime_get();
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $M.30 := $store.i64($M.30, $p51, $i50);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p2);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p5);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.30;
    cmdloc_dummy_var_13 := $M.30;
    call {:si_unique_call 1090} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p52, $p53, 8, $zext.i32.i64(8), 0 == 1);
    $M.30 := cmdloc_dummy_var_14;
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.30, $p55);
    $p57 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 384)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i58 := $load.i64($M.0, $p57);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} $i59 := ktime_us_delta($i56, $i58);
    call {:si_unique_call 1092} {:cexpr "tmp___4"} boogie_si_record_i64($i59);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i64.i32($i59);
    call {:si_unique_call 1093} {:cexpr "diff"} boogie_si_record_i32($i60);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $i61 := $sgt.i32($i48, $i60);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb32:
    assume $i61 == 1;
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $i62 := $sub.i32($i48, $i60);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i62);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} __udelay($i63);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb27:
    assume $i45 == 1;
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $p25 := .str.170;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p7, $mul.ref(0, 384)), $mul.ref(136, 1));
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} spin_unlock_irqrestore($p165, $u0);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $p92 := $p25;
    goto $bb47;

  $bb24:
    assume $i41 == 1;
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $p25 := .str.169;
    goto $bb11;

  $bb21:
    assume $i37 == 1;
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $p25 := .str.168;
    goto $bb11;

  $bb18:
    assume $i35 == 1;
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $p25 := .str.167;
    goto $bb11;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i19);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p7, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} $p28 := ring_first($p27);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i29, 0);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p7, $mul.ref(0, 384)), $mul.ref(136, 1));
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} spin_unlock_irqrestore($p32, $u0);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} dev_kfree_skb_any($p0);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i30 == 1;
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} vslice_dummy_var_309 := vlsi_set_baud($p7, $i12);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} netif_wake_queue($p1);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb9:
    assume $i24 == 1;
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $p25 := .str.166;
    goto $bb11;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p7, $mul.ref(0, 384)), $mul.ref(88, 1));
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, $i13);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb3;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} netif_stop_queue($p1);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p7, $mul.ref(0, 384)), $mul.ref(92, 1));
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i13);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $i19 := 4;
    goto $bb6;
}



const vlsi_ioctl: ref;

axiom vlsi_ioctl == $sub.ref(0, 386482);

procedure vlsi_ioctl($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr;



implementation vlsi_ioctl($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i8;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i32;
  var $p27: ref;
  var $i28: i1;
  var $i29: i8;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i64;
  var $i35: i32;
  var $i36: i32;
  var $i37: i16;
  var $i38: i32;
  var $i39: i32;
  var $i40: i16;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $i16: i32;
  var vslice_dummy_var_312: i32;
  var vslice_dummy_var_313: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} {:cexpr "vlsi_ioctl:arg:cmd"} boogie_si_record_i32($i2);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} $p3 := netdev_priv($p0);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i2, 35315);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i2, 35317);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i2, 35317);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} $i46 := net_ratelimit();
    call {:si_unique_call 1149} {:cexpr "tmp___5"} boogie_si_record_i32($i46);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 95);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb27:
    assume $i47 == 1;
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} vslice_dummy_var_313 := printk.ref.ref.i32(.str.152, .str.153, $i2);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(56, 1));
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.0, $p33);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i64.i32($i34);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i35, 28);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} $i37 := inw($i36);
    call {:si_unique_call 1138} {:cexpr "tmp___4"} boogie_si_record_i16($i37);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 4095);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i16($i39);
    call {:si_unique_call 1139} {:cexpr "fifocnt"} boogie_si_record_i16($i40);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $i43 := $zext.i1.i32($i42);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i43);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb18;

  $bb4:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i2, 35315);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb9:
    assume $i9 == 1;
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} $i28 := capable(12);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i8($i28);
    call {:si_unique_call 1141} {:cexpr "tmp___2"} boogie_si_record_i8($i29);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i8.i1($i29);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} irda_device_set_media_busy($p0, 1);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb18;

  $bb23:
    assume $i32 == 1;
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 1);
    goto $bb18;

  $bb20:
    assume $i30 == 1;
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb22;

  $bb2:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i2, 35314);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb8;

  $bb11:
    assume $i10 == 1;
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} $i11 := capable(12);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    call {:si_unique_call 1143} {:cexpr "tmp___0"} boogie_si_record_i8($i12);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} ldv_spin_lock();
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i64.i32($i20);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(92, 1));
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i21);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(56, 1));
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i64.i32($i24);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} vslice_dummy_var_312 := vlsi_set_baud($p4, $i25);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(136, 1));
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} spin_unlock_irqrestore($p27, $u0);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb18;

  $bb16:
    assume $i15 == 1;
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 1);
    goto $bb18;

  $bb13:
    assume $i13 == 1;
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb15;
}



const vlsi_tx_timeout: ref;

axiom vlsi_tx_timeout == $sub.ref(0, 387514);

procedure vlsi_tx_timeout($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $CurrAddr, $M.5, $M.36, $M.38, $M.40, $M.42, $M.37, $M.45, $M.39, $M.46, $M.41, $M.47, $M.43, $M.48, assertsPassed;



implementation vlsi_tx_timeout($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var vslice_dummy_var_314: i32;
  var vslice_dummy_var_315: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} $p1 := netdev_priv($p0);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(56, 1));
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} vlsi_reg_debug($i5, .str.176);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} vlsi_ring_debug($p7);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} $i8 := netif_running($p0);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 1155} {:cexpr "tmp___0"} boogie_si_record_i8($i9);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} vslice_dummy_var_314 := vlsi_stop_hw($p2);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 384)), $mul.ref(92, 1));
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} $i18 := vlsi_start_hw($p2);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    call {:si_unique_call 1159} {:cexpr "tmp___3"} boogie_si_record_i32($i18);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} netif_start_queue($p0);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} $i20 := net_ratelimit();
    call {:si_unique_call 1161} {:cexpr "tmp___2"} boogie_si_record_i32($i20);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i21 == 1;
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} $p24 := pci_name($p23);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} vslice_dummy_var_315 := printk.ref.ref.ref.ref(.str.177, .str.176, $p24, $p26);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 384)), $mul.ref(88, 1));
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 384)), $mul.ref(92, 1));
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i16);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} netif_stop_queue($p0);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const netif_stop_queue: ref;

axiom netif_stop_queue == $sub.ref(0, 388546);

procedure netif_stop_queue($p0: ref);
  free requires assertsPassed;



implementation netif_stop_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} netif_tx_stop_queue($p1);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    return;
}



const netif_start_queue: ref;

axiom netif_start_queue == $sub.ref(0, 389578);

procedure netif_start_queue($p0: ref);
  free requires assertsPassed;



implementation netif_start_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} netif_tx_start_queue($p1);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    return;
}



const netdev_get_tx_queue: ref;

axiom netdev_get_tx_queue == $sub.ref(0, 390610);

procedure netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} {:cexpr "netdev_get_tx_queue:arg:index"} boogie_si_record_i32($i1);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1016, 1));
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i1);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 504));
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const netif_tx_start_queue: ref;

axiom netif_tx_start_queue == $sub.ref(0, 391642);

procedure netif_tx_start_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_start_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(424, 1));
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} clear_bit(0, $p1);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    return;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 392674);

procedure clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 1172} devirtbounce.9(0, $p1, $i0, $p1);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    return;
}



const netif_tx_stop_queue: ref;

axiom netif_tx_stop_queue == $sub.ref(0, 393706);

procedure netif_tx_stop_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_stop_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(424, 1));
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} set_bit(0, $p1);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 394738);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 1175} devirtbounce.9(0, $p1, $i0, $p1);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    return;
}



const capable: ref;

axiom capable == $sub.ref(0, 395770);

procedure capable($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation capable($i0: i32) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1176} {:cexpr "capable:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1177} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1178} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const irda_device_set_media_busy: ref;

axiom irda_device_set_media_busy == $sub.ref(0, 396802);

procedure irda_device_set_media_busy($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation irda_device_set_media_busy($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} {:cexpr "irda_device_set_media_busy:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    return;
}



const irda_get_next_speed: ref;

axiom irda_get_next_speed == $sub.ref(0, 397834);

procedure irda_get_next_speed($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation irda_get_next_speed($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 4951);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const netif_wake_queue: ref;

axiom netif_wake_queue == $sub.ref(0, 398866);

procedure netif_wake_queue($p0: ref);
  free requires assertsPassed;



implementation netif_wake_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} netif_tx_wake_queue($p1);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    return;
}



const irda_get_mtt: ref;

axiom irda_get_mtt == $sub.ref(0, 399898);

procedure irda_get_mtt($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation irda_get_mtt($p0: ref) returns ($r: i16)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 4951);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $i9 := 10000;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(12, 1));
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;
}



const ktime_us_delta: ref;

axiom ktime_us_delta == $sub.ref(0, 400930);

procedure ktime_us_delta($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.31, $M.32, $M.33, $M.34, $CurrAddr, $M.35;



implementation ktime_us_delta($i0: i64, $i1: i64) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.31 := $store.i64($M.31, $p5, $i0);
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.32 := $store.i64($M.32, $p6, $i1);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.31, $p7);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p3);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.32, $p9);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64($i8, $i10);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p4);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $M.33 := $store.i64($M.33, $p12, $i11);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.33, $p13);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} $i15 := ktime_to_us($i14);
    call {:si_unique_call 1186} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const __udelay: ref;

axiom __udelay == $sub.ref(0, 401962);

procedure __udelay($i0: i64);
  free requires assertsPassed;



implementation __udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} {:cexpr "__udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    return;
}



const async_wrap_skb: ref;

axiom async_wrap_skb == $sub.ref(0, 402994);

procedure async_wrap_skb($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation async_wrap_skb($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1188} {:cexpr "async_wrap_skb:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1189} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1190} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const skb_copy_from_linear_data: ref;

axiom skb_copy_from_linear_data == $sub.ref(0, 404026);

procedure skb_copy_from_linear_data($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation skb_copy_from_linear_data($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} {:cexpr "skb_copy_from_linear_data:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i2);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.0;
    cmdloc_dummy_var_16 := $M.0;
    call {:si_unique_call 1192} cmdloc_dummy_var_17 := $memcpy.i8(cmdloc_dummy_var_15, cmdloc_dummy_var_16, $p1, $p4, $i5, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_17;
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    return;
}



const ktime_to_us: ref;

axiom ktime_to_us == $sub.ref(0, 405058);

procedure ktime_to_us($i0: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.34, $M.35, $CurrAddr;



implementation ktime_to_us($i0: i64) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.34 := $store.i64($M.34, $p2, $i0);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.34, $p3);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} $i5 := ktime_divns($i4, 1000);
    call {:si_unique_call 1195} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ktime_divns: ref;

axiom ktime_divns == $sub.ref(0, 406090);

procedure ktime_divns($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.35, $CurrAddr;



implementation ktime_divns($i0: i64, $i1: i64) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var vslice_dummy_var_316: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.35 := $store.i64($M.35, $p3, $i0);
    call {:si_unique_call 1197} {:cexpr "ktime_divns:arg:div"} boogie_si_record_i64($i1);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $i4 := $slt.i64($i1, 0);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 1198} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i5);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 1200} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i5, 0);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} vslice_dummy_var_316 := ldv__builtin_expect($i13, 0);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p2);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.35, $p15);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $i17 := $sdiv.i64($i16, $i1);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} warn_slowpath_null(.str.129, 194);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 407122);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    return;
}



const netif_tx_wake_queue: ref;

axiom netif_tx_wake_queue == $sub.ref(0, 408154);

procedure netif_tx_wake_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_wake_queue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    return;
}



const irlap_close: ref;

axiom irlap_close == $sub.ref(0, 409186);

procedure irlap_close($p0: ref);
  free requires assertsPassed;



implementation irlap_close($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    return;
}



const vlsi_destroy_hwif: ref;

axiom vlsi_destroy_hwif == $sub.ref(0, 410218);

procedure vlsi_destroy_hwif($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vlsi_destroy_hwif($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var vslice_dummy_var_317: i32;
  var vslice_dummy_var_318: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(120, 1));
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} vslice_dummy_var_317 := vlsi_free_ring($p2);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} vslice_dummy_var_318 := vlsi_free_ring($p5);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $0.ref);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(120, 1));
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $0.ref);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(96, 1));
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(104, 1));
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $0.ref);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(96, 1));
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, 0);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(104, 1));
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(96, 1));
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} pci_free_consistent($p13, 1024, $p15, $i17);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_free_irq_39: ref;

axiom ldv_free_irq_39 == $sub.ref(0, 411250);

procedure ldv_free_irq_39($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.36, $M.38, $M.40, $M.42;



implementation ldv_free_irq_39($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} {:cexpr "ldv_free_irq_39:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} free_irq($i0, $p1);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} disable_suitable_irq_1($i0, $p1);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    return;
}



const pci_release_regions: ref;

axiom pci_release_regions == $sub.ref(0, 412282);

procedure pci_release_regions($p0: ref);
  free requires assertsPassed;



implementation pci_release_regions($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    return;
}



const free_irq: ref;

axiom free_irq == $sub.ref(0, 413314);

procedure free_irq($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation free_irq($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} {:cexpr "free_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    return;
}



const disable_suitable_irq_1: ref;

axiom disable_suitable_irq_1 == $sub.ref(0, 414346);

procedure disable_suitable_irq_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.36, $M.38, $M.40, $M.42;



implementation disable_suitable_irq_1($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} {:cexpr "disable_suitable_irq_1:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $i2 := $M.36;
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.38;
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i10 := $M.40;
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i14 := $M.42;
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $i16 := $M.43;
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i0, $i16);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb22;

  $bb23:
    assume $i17 == 1;
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $M.42 := 0;
    call {:si_unique_call 1215} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i11 == 1;
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $i12 := $M.41;
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i0, $i12);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb16;

  $bb17:
    assume $i13 == 1;
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $M.40 := 0;
    call {:si_unique_call 1214} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $i8 := $M.39;
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i0, $i8);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $M.38 := 0;
    call {:si_unique_call 1213} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $i4 := $M.37;
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, $i4);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $M.36 := 0;
    call {:si_unique_call 1212} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const vlsi_free_ring: ref;

axiom vlsi_free_ring == $sub.ref(0, 415378);

procedure vlsi_free_ring($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vlsi_free_ring($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i64;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i4: i32;
  var $p29: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $i3 := $ugt.i32($i2, 0);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p0);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} kfree($p29);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $p5, $p6, $i7, $p8, $p9, $p10, $i11, $i12, $p13, $p14, $i15, $i16, $p17, $p18, $p19, $i20, $i21, $p22, $i23, $p24, $p25, $i26, $i27, $i28, $i4 := vlsi_free_ring_loop_$bb4($p0, $p1, $p5, $p6, $i7, $p8, $p9, $p10, $i11, $i12, $p13, $p14, $i15, $i16, $p17, $p18, $p19, $i20, $i21, $p22, $i23, $p24, $p25, $i26, $i27, $i28, $i4);
    goto $bb4_last;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i4);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p6, $mul.ref($i7, 24));
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref($i7, 24)), $mul.ref(8, 1));
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} $i15 := rd_get_addr($p8);
    call {:si_unique_call 1218} {:cexpr "busaddr"} boogie_si_record_i64($i15);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} rd_set_addr_status($p8, 0, 0);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p6, $mul.ref($i7, 24)), $mul.ref(16, 1));
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} kfree($p25);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i4, 1);
    call {:si_unique_call 1222} {:cexpr "i"} boogie_si_record_i32($i26);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p1);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $i28 := $ugt.i32($i27, $i26);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i28 == 1);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i26;
    goto $bb12_dummy;

  $bb9:
    assume $i16 == 1;
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $i21 := $zext.i32.i64($i20);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} pci_unmap_single($p18, $i15, $i21, $i23);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref($i7, 24)), $mul.ref(8, 1));
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} dev_kfree_skb_any($p14);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5505;
}



const pci_free_consistent: ref;

axiom pci_free_consistent == $sub.ref(0, 416410);

procedure pci_free_consistent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation pci_free_consistent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} {:cexpr "pci_free_consistent:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1225} {:cexpr "pci_free_consistent:arg:dma_handle"} boogie_si_record_i64($i3);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} dma_free_attrs($p7, $i1, $p2, $i3, $0.ref);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const dma_free_attrs: ref;

axiom dma_free_attrs == $sub.ref(0, 417442);

procedure dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;



implementation dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} {:cexpr "dma_free_attrs:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1228} {:cexpr "dma_free_attrs:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    return;
}



const rd_set_addr_status: ref;

axiom rd_set_addr_status == $sub.ref(0, 418474);

procedure rd_set_addr_status($p0: ref, $i1: i64, $i2: i8);
  free requires assertsPassed;
  modifies $M.0;



implementation rd_set_addr_status($p0: ref, $i1: i64, $i2: i8)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i8;
  var vslice_dummy_var_319: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} {:cexpr "rd_set_addr_status:arg:a"} boogie_si_record_i64($i1);
    call {:si_unique_call 1230} {:cexpr "rd_set_addr_status:arg:s"} boogie_si_record_i8($i2);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $i3 := $lshr.i64($i1, 24);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $and.i64($i1, 16777215);
    call {:si_unique_call 1235} {:cexpr "a"} boogie_si_record_i64($i8);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i9);
    call {:si_unique_call 1236} devirtbounce(0);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i2);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} rd_set_status($p0, $i15);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} $i5 := net_ratelimit();
    call {:si_unique_call 1232} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} dump_stack();
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} vslice_dummy_var_319 := printk.ref.ref(.str.150, .str.151);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const pci_unmap_single: ref;

axiom pci_unmap_single == $sub.ref(0, 419506);

procedure pci_unmap_single($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation pci_unmap_single($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} {:cexpr "pci_unmap_single:arg:dma_addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 1239} {:cexpr "pci_unmap_single:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 1240} {:cexpr "pci_unmap_single:arg:direction"} boogie_si_record_i32($i3);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} dma_unmap_single_attrs($p7, $i1, $i2, $i3, $0.ref);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 420538);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} free_($p0);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 421570);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 1243} $free($p0);
    return;
}



const dma_unmap_single_attrs: ref;

axiom dma_unmap_single_attrs == $sub.ref(0, 422602);

procedure dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref);
  free requires assertsPassed;



implementation dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} {:cexpr "dma_unmap_single_attrs:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 1245} {:cexpr "dma_unmap_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 1246} {:cexpr "dma_unmap_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} $p5 := get_dma_ops($p0);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} $i6 := valid_dma_direction($i3);
    call {:si_unique_call 1249} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 1251} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} debug_dma_unmap_page($p0, $i1, $i2, $i3, 1);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    call {:si_unique_call 1253} devirtbounce.10($p17, $p0, $i1, $i2, $i3, $p4);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    call {:si_unique_call 1252} devirtbounce.3(0, .str.10, 36, 12);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_unmap_single_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const debug_dma_unmap_page: ref;

axiom debug_dma_unmap_page == $sub.ref(0, 423634);

procedure debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1);
  free requires assertsPassed;



implementation debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} {:cexpr "debug_dma_unmap_page:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1256} {:cexpr "debug_dma_unmap_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 1257} {:cexpr "debug_dma_unmap_page:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 1258} {:cexpr "debug_dma_unmap_page:arg:arg4"} boogie_si_record_i1($i4);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    return;
}



const dump_stack: ref;

axiom dump_stack == $sub.ref(0, 424666);

procedure dump_stack();
  free requires assertsPassed;



implementation dump_stack()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    return;
}



const pci_request_regions: ref;

axiom pci_request_regions == $sub.ref(0, 425698);

procedure pci_request_regions($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_request_regions($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1259} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1260} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const vlsi_interrupt: ref;

axiom vlsi_interrupt == $sub.ref(0, 426730);

procedure vlsi_interrupt($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr, $M.3, $M.36, $M.38, $M.40, $M.42, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.37, $M.45, $M.39, $M.46, $M.41, $M.47, $M.43, $M.48, $M.5, assertsPassed;



implementation vlsi_interrupt($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i8;
  var $i9: i32;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i8;
  var $i23: i32;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $i19: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i32: i32;
  var $i33: i32;
  var $p51: ref;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $i56: i1;
  var $i57: i32;
  var vslice_dummy_var_320: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} {:cexpr "vlsi_interrupt:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} $p3 := netdev_priv($p2);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 2968)), $mul.ref(56, 1));
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i6);
    call {:si_unique_call 1263} {:cexpr "iobase"} boogie_si_record_i32($i7);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} ldv_spin_lock();
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} $i8 := inb($i7);
    call {:si_unique_call 1266} {:cexpr "irintr"} boogie_si_record_i8($i8);
    call {:si_unique_call 1267} devirtbounce(0);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} outb($i10, $i7);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i8);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 84);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    call {:si_unique_call 1269} {:cexpr "irintr"} boogie_si_record_i8($i13);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $i16, $i17 := 5, 0;
    assume {:branchcond $i15} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i15 == 1);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $i18, $i19 := $i13, 5;
    goto $bb4;

  $bb4:
    call $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i18, $i19, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50 := vlsi_interrupt_loop_$bb4($p2, $i7, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i18, $i19, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50);
    goto $bb4_last;

  $bb9:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i18);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, $sub.i32(0, 65));
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i32($i36);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i37);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} $i39 := ldv__builtin_expect($i38, 0);
    call {:si_unique_call 1277} {:cexpr "tmp___0"} boogie_si_record_i64($i39);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $i41 := $i19;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i18);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 16);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i18);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i45, 4);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i48 := $sub.i32($i19, 1);
    call {:si_unique_call 1280} {:cexpr "boguscount"} boogie_si_record_i32($i48);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $i49 := $sgt.i32($i48, 0);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $i20, $i21, $i50 := $i48, 1, $i48;
    assume true;
    goto $bb5, $bb19;

  $bb19:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i32, $i33 := $i50, 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(136, 1));
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} spin_unlock_irqrestore($p51, $u0);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $i52 := $sle.i32($i32, 0);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i33, 0);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $i57 := $zext.i1.i32($i56);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $r := $i57;
    return;

  $bb21:
    assume $i52 == 1;
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} $i53 := net_ratelimit();
    call {:si_unique_call 1282} {:cexpr "tmp___1"} boogie_si_record_i32($i53);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb23:
    assume $i54 == 1;
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} vslice_dummy_var_320 := printk.ref.ref(.str, .str.1);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb5:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} $i22 := inb($i7);
    call {:si_unique_call 1271} {:cexpr "irintr"} boogie_si_record_i8($i22);
    call {:si_unique_call 1272} devirtbounce(0);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} outb($i24, $i7);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i22);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 84);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    call {:si_unique_call 1274} {:cexpr "irintr"} boogie_si_record_i8($i27);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $i30, $i31 := $i20, $i21;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i18, $i19 := $i27, $i20;
    goto $bb7_dummy;

  $bb6:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $i16, $i17 := $i30, $i31;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $i32, $i33 := $i16, $i17;
    goto $bb8;

  $bb16:
    assume $i47 == 1;
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} vlsi_tx_interrupt($p2);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i44 == 1;
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} vlsi_rx_interrupt($p2);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $i32, $i33 := $i41, 1;
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb2;

  $bb7_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;
}



const ldv_request_irq_37: ref;

axiom ldv_request_irq_37 == $sub.ref(0, 427762);

procedure ldv_request_irq_37($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.37, $M.45, $M.36, $M.39, $M.46, $M.38, $M.41, $M.47, $M.40, $M.43, $M.48, $M.42;



implementation ldv_request_irq_37($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} {:cexpr "ldv_request_irq_37:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 1285} {:cexpr "ldv_request_irq_37:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} $i5 := request_irq($i0, $p1, $i2, $p3, $p4);
    call {:si_unique_call 1287} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} $i6 := reg_check_1($p1);
    call {:si_unique_call 1289} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 0);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} activate_suitable_irq_1($i0, $p4);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const vlsi_create_hwif: ref;

axiom vlsi_create_hwif == $sub.ref(0, 428794);

procedure vlsi_create_hwif($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation vlsi_create_hwif($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $i30: i32;
  var vslice_dummy_var_321: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(104, 1));
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $0.ref);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(96, 1));
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, 0);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(96, 1));
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} $p6 := pci_zalloc_consistent($p4, 1024, $p5);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p6);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.44, $add.ref($add.ref(ringsize, $mul.ref(0, 8)), $mul.ref(1, 4)));
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} $p13 := vlsi_alloc_ring($p11, $p9, $i12, 4095, 2);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(120, 1));
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p13);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(120, 1));
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p9, $mul.ref(64, 8));
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.44, ringsize);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} $p23 := vlsi_alloc_ring($p21, $p19, $i22, 4095, 1);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $p23);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(104, 1));
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $p6);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb9:
    assume $i28 == 1;
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(120, 1));
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} vslice_dummy_var_321 := vlsi_free_ring($p32);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $0.ref);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(120, 1));
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, $0.ref);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(96, 1));
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.0, $p38);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} pci_free_consistent($p37, 1024, $p6, $i39);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(96, 1));
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p40, 0);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 12);
    goto $bb13;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_58:
    assume !assertsPassed;
    return;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 429826);

procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



const irlap_open: ref;

axiom irlap_open == $sub.ref(0, 430858);

procedure irlap_open($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation irlap_open($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} $p3 := external_alloc();
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const ldv_free_irq_38: ref;

axiom ldv_free_irq_38 == $sub.ref(0, 431890);

procedure ldv_free_irq_38($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.36, $M.38, $M.40, $M.42;



implementation ldv_free_irq_38($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} {:cexpr "ldv_free_irq_38:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} free_irq($i0, $p1);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} disable_suitable_irq_1($i0, $p1);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    return;
}



const pci_zalloc_consistent: ref;

axiom pci_zalloc_consistent == $sub.ref(0, 432922);

procedure pci_zalloc_consistent($p0: ref, $i1: i64, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation pci_zalloc_consistent($p0: ref, $i1: i64, $p2: ref) returns ($r: ref)
{
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} {:cexpr "pci_zalloc_consistent:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} $p7 := dma_zalloc_coherent($p6, $i1, $p2, 32);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $p6 := $p5;
    goto $bb3;
}



const vlsi_alloc_ring: ref;

axiom vlsi_alloc_ring == $sub.ref(0, 433954);

procedure vlsi_alloc_ring($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation vlsi_alloc_ring($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: ref)
{
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $i46: i32;
  var $p47: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i64;
  var $i54: i1;
  var $i55: i32;
  var $p56: ref;
  var $i48: i32;
  var $p49: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i1;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $p74: ref;
  var $i75: i64;
  var $i76: i1;
  var $i77: i64;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $i70: i32;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var $i86: i1;
  var $i30: i32;
  var $p9: ref;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var vslice_dummy_var_322: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} {:cexpr "vlsi_alloc_ring:arg:size"} boogie_si_record_i32($i2);
    call {:si_unique_call 1303} {:cexpr "vlsi_alloc_ring:arg:len"} boogie_si_record_i32($i3);
    call {:si_unique_call 1304} {:cexpr "vlsi_alloc_ring:arg:dir"} boogie_si_record_i32($i4);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 0);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i2, 1);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, $i2);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i2);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $i11 := $mul.i64($i10, 24);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 40);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} $p13 := kmalloc($i12, 208);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p14);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.0;
    call {:si_unique_call 1306} cmdloc_dummy_var_19 := $memset.i8(cmdloc_dummy_var_18, $p17, 0, 40, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_19;
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p0);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i4);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i3);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p14);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref(1, 24));
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p22);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i2, 1);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i24);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i2);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} atomic_set($p27, 0);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} atomic_set($p28, 0);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $i29 := $ult.i32(0, $i2);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p9 := $p13;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb14;

  $bb14:
    call $p31, $p32, $i33, $p34, $p35, $i36, $p37, $p38, $i39, $p40, $p41, $p42, $p43, $i44, $i45, $i46, $p47, $p50, $p51, $i52, $i53, $i54, $i55, $p56, $p84, $i85, $i86, $i30, cmdloc_dummy_var_20, cmdloc_dummy_var_21 := vlsi_alloc_ring_loop_$bb14($p0, $p1, $i2, $i3, $i4, $p14, $p31, $p32, $i33, $p34, $p35, $i36, $p37, $p38, $i39, $p40, $p41, $p42, $p43, $i44, $i45, $i46, $p47, $p50, $p51, $i52, $i53, $i54, $i55, $p56, $p84, $i85, $i86, $i30, cmdloc_dummy_var_20, cmdloc_dummy_var_21);
    goto $bb14_last;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $i33 := $zext.i32.i64($i30);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p32, $mul.ref($i33, 24));
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_20 := $M.0;
    call {:si_unique_call 1309} cmdloc_dummy_var_21 := $memset.i8(cmdloc_dummy_var_20, $p35, 0, 24, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_21;
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $i36 := $zext.i32.i64($i30);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p1, $mul.ref($i36, 8));
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p32, $mul.ref($i33, 24)), $mul.ref(0, 1));
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, $p37);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $i39 := $zext.i32.i64($i3);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} $p40 := kmalloc($i39, 209);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p32, $mul.ref($i33, 24)), $mul.ref(16, 1));
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p41, $p40);
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p32, $mul.ref($i33, 24)), $mul.ref(16, 1));
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $i45 := $eq.i64($i44, 0);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i46, $p47 := $i30, $p34;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i45 == 1);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p32, $mul.ref($i33, 24)), $mul.ref(16, 1));
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $i52 := $zext.i32.i64($i3);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} $i53 := pci_map_single($p0, $p51, $i52, $i4);
    call {:si_unique_call 1312} {:cexpr "busaddr"} boogie_si_record_i64($i53);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $i54 := $eq.i64($i53, 0);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $i55, $p56 := $i30, $p34;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} rd_set_addr_status($p34, $i53, 0);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p32, $mul.ref($i33, 24)), $mul.ref(8, 1));
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p84, $0.ref);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $i85 := $add.i32($i30, 1);
    call {:si_unique_call 1325} {:cexpr "i"} boogie_si_record_i32($i85);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $i86 := $ult.i32($i85, $i2);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i86 == 1);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb40:
    assume $i86 == 1;
    assume {:verifier.code 0} true;
    $i30 := $i85;
    goto $bb40_dummy;

  $bb19:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $i48, $p49 := $i55, $p56;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p49, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i69 := $ult.i32(0, $i48);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p14);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} kfree($p83);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb6;

  $bb27:
    assume $i69 == 1;
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $i70 := 0;
    goto $bb30;

  $bb30:
    call $p71, $p72, $i73, $p74, $i75, $i76, $i77, $p78, $p79, $p80, $i81, $i82, $i70 := vlsi_alloc_ring_loop_$bb30($p0, $i3, $i4, $p14, $i48, $p71, $p72, $i73, $p74, $i75, $i76, $i77, $p78, $p79, $p80, $i81, $i82, $i70);
    goto $bb30_last;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $i73 := $zext.i32.i64($i70);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p72, $mul.ref($i73, 24));
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} $i75 := rd_get_addr($p74);
    call {:si_unique_call 1318} {:cexpr "busaddr"} boogie_si_record_i64($i75);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} rd_set_addr_status($p74, 0, 0);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $i76 := $ne.i64($i75, 0);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p72, $mul.ref($i73, 24)), $mul.ref(16, 1));
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} kfree($p79);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p72, $mul.ref($i73, 24)), $mul.ref(16, 1));
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p80, $0.ref);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $i81 := $add.i32($i70, 1);
    call {:si_unique_call 1322} {:cexpr "j"} boogie_si_record_i32($i81);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $i82 := $ult.i32($i81, $i48);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i82 == 1);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb35:
    assume $i82 == 1;
    assume {:verifier.code 0} true;
    $i70 := $i81;
    goto $bb35_dummy;

  $bb32:
    assume $i76 == 1;
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $i77 := $zext.i32.i64($i3);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} pci_unmap_single($p0, $i75, $i77, $i4);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb21:
    assume $i60 == 1;
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} $i61 := net_ratelimit();
    call {:si_unique_call 1314} {:cexpr "tmp___0"} boogie_si_record_i32($i61);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p49, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} kfree($p67);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p49, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p68, $0.ref);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb23:
    assume $i62 == 1;
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p49, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} vslice_dummy_var_322 := printk.ref.ref.ref(.str.159, .str.160, $p64);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb16:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $i48, $p49 := $i46, $p47;
    goto $bb18;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb6;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb35_dummy:
    assume false;
    return;

  $bb30_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5902;

  $bb40_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5845;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 434986);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1327} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} ldv_check_alloc_flags($i1);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} $p2 := ldv_undef_ptr();
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 436018);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const pci_map_single: ref;

axiom pci_map_single == $sub.ref(0, 437050);

procedure pci_map_single($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i64);
  free requires assertsPassed;



implementation pci_map_single($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i64)
{
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} {:cexpr "pci_map_single:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 1331} {:cexpr "pci_map_single:arg:direction"} boogie_si_record_i32($i3);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} $i8 := dma_map_single_attrs($p7, $p1, $i2, $i3, $0.ref);
    call {:si_unique_call 1333} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const dma_map_single_attrs: ref;

axiom dma_map_single_attrs == $sub.ref(0, 438082);

procedure dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64);
  free requires assertsPassed;



implementation dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} {:cexpr "dma_map_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 1335} {:cexpr "dma_map_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} $p5 := get_dma_ops($p0);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i2);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} kmemcheck_mark_initialized($p1, $i6);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} $i7 := valid_dma_direction($i3);
    call {:si_unique_call 1339} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 1341} {:cexpr "tmp___1"} boogie_si_record_i64($i11);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p1);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} $i14 := __phys_addr($i13);
    call {:si_unique_call 1344} {:cexpr "tmp___2"} boogie_si_record_i64($i14);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $i17 := $lshr.i64($i14, 12);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i17, 64));
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p1);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 4095);
    call {:si_unique_call 1345} $i21 := devirtbounce.11($p16, $p0, $p18, $i20, $i2, $i3, $p4);
    call {:si_unique_call 1346} {:cexpr "addr"} boogie_si_record_i64($i21);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p1);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} $i23 := __phys_addr($i22);
    call {:si_unique_call 1348} {:cexpr "tmp___3"} boogie_si_record_i64($i23);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $i24 := $lshr.i64($i23, 12);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i24, 64));
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p1);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 4095);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} debug_dma_map_page($p0, $p25, $i27, $i2, $i3, $i21, 1);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb1:
    assume $i12 == 1;
    call {:si_unique_call 1342} devirtbounce.3(0, .str.10, 19, 12);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_map_single_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const kmemcheck_mark_initialized: ref;

axiom kmemcheck_mark_initialized == $sub.ref(0, 439114);

procedure kmemcheck_mark_initialized($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation kmemcheck_mark_initialized($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} {:cexpr "kmemcheck_mark_initialized:arg:n"} boogie_si_record_i32($i1);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    return;
}



const __phys_addr: ref;

axiom __phys_addr == $sub.ref(0, 440146);

procedure __phys_addr($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __phys_addr($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1351} {:cexpr "__phys_addr:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1352} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1353} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const debug_dma_map_page: ref;

axiom debug_dma_map_page == $sub.ref(0, 441178);

procedure debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1);
  free requires assertsPassed;



implementation debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} {:cexpr "debug_dma_map_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 1355} {:cexpr "debug_dma_map_page:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 1356} {:cexpr "debug_dma_map_page:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 1357} {:cexpr "debug_dma_map_page:arg:arg5"} boogie_si_record_i64($i5);
    call {:si_unique_call 1358} {:cexpr "debug_dma_map_page:arg:arg6"} boogie_si_record_i1($i6);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    return;
}



const dma_zalloc_coherent: ref;

axiom dma_zalloc_coherent == $sub.ref(0, 442210);

procedure dma_zalloc_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation dma_zalloc_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i32) returns ($r: ref)
{
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} {:cexpr "dma_zalloc_coherent:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1360} {:cexpr "dma_zalloc_coherent:arg:flags"} boogie_si_record_i32($i3);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} ldv_check_alloc_flags($i3);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} $p4 := ldv_undef_ptr();
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;
}



const request_irq: ref;

axiom request_irq == $sub.ref(0, 443242);

procedure request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} {:cexpr "request_irq:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 1364} {:cexpr "request_irq:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} $i5 := request_threaded_irq($i0, $p1, $0.ref, $i2, $p3, $p4);
    call {:si_unique_call 1366} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const reg_check_1: ref;

axiom reg_check_1 == $sub.ref(0, 444274);

procedure reg_check_1($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation reg_check_1($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, $p2i.ref.i64(vlsi_interrupt));
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb3;
}



const activate_suitable_irq_1: ref;

axiom activate_suitable_irq_1 == $sub.ref(0, 445306);

procedure activate_suitable_irq_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.37, $M.45, $M.36, $M.39, $M.46, $M.38, $M.41, $M.47, $M.40, $M.43, $M.48, $M.42;



implementation activate_suitable_irq_1($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} {:cexpr "activate_suitable_irq_1:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $i2 := $M.36;
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.38;
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.40;
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.42;
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $M.43 := $i0;
    call {:si_unique_call 1374} {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32($i0);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $M.48 := $p1;
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1375} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $M.41 := $i0;
    call {:si_unique_call 1372} {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32($i0);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $M.47 := $p1;
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 1373} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $M.39 := $i0;
    call {:si_unique_call 1370} {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32($i0);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $M.46 := $p1;
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1371} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $M.37 := $i0;
    call {:si_unique_call 1368} {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32($i0);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $M.45 := $p1;
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1369} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const request_threaded_irq: ref;

axiom request_threaded_irq == $sub.ref(0, 446338);

procedure request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1376} {:cexpr "request_threaded_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1377} {:cexpr "request_threaded_irq:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1378} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 1379} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const vlsi_rx_interrupt: ref;

axiom vlsi_rx_interrupt == $sub.ref(0, 447370);

procedure vlsi_rx_interrupt($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr, $M.3, $M.36, $M.38, $M.40, $M.42, $M.4, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.37, $M.45, $M.39, $M.46, $M.41, $M.47, $M.43, $M.48, $M.5, assertsPassed;



implementation vlsi_rx_interrupt($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p40: ref;
  var $i41: i64;
  var $i42: i64;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p48: ref;
  var $i49: i64;
  var $i50: i64;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p56: ref;
  var $i57: i64;
  var $i58: i64;
  var $p60: ref;
  var $i61: i1;
  var $p63: ref;
  var $i64: i64;
  var $i65: i64;
  var $p67: ref;
  var $p69: ref;
  var $i70: i64;
  var $i71: i64;
  var $i72: i64;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $i77: i1;
  var $p9: ref;
  var $p78: ref;
  var $i79: i64;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i64;
  var $i85: i1;
  var $i86: i32;
  var $i87: i1;
  var $p89: ref;
  var $i90: i64;
  var $i91: i32;
  var $i92: i32;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var vslice_dummy_var_323: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} $p2 := netdev_priv($p0);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 384)), $mul.ref(120, 1));
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} $p6 := ring_first($p5);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p3, $mul.ref(0, 384)), $mul.ref(128, 1));
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} $i79 := ktime_get();
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p80, $i79);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p78);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p1);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_22 := $M.0;
    cmdloc_dummy_var_23 := $M.0;
    call {:si_unique_call 1386} cmdloc_dummy_var_24 := $memcpy.i8(cmdloc_dummy_var_22, cmdloc_dummy_var_23, $p81, $p82, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_24;
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} vlsi_fill_rx($p5);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} $p83 := ring_first($p5);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p83);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $i85 := $eq.i64($i84, 0);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i85 == 1);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(56, 1));
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $i90 := $load.i64($M.0, $p89);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i64.i32($i90);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $i92 := $add.i32($i91, 8);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} outw(0, $i92);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    return;

  $bb34:
    assume $i85 == 1;
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} $i86 := net_ratelimit();
    call {:si_unique_call 1394} {:cexpr "tmp___1"} boogie_si_record_i32($i86);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} vlsi_ring_debug($p5);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb36:
    assume $i87 == 1;
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} vslice_dummy_var_323 := printk.ref.ref(.str.2, .str.3);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $p9 := $p6;
    goto $bb4;

  $bb4:
    call $i10, $i11, $i12, $i13, $i14, $p16, $i17, $i18, $p20, $i21, $i22, $p24, $i25, $i26, $p28, $i29, $i30, $p32, $i33, $i34, $p36, $i37, $i38, $p40, $i41, $i42, $p44, $i45, $i46, $p48, $i49, $i50, $p52, $i53, $i54, $p56, $i57, $i58, $p60, $i61, $p63, $i64, $i65, $p67, $p69, $i70, $i71, $i72, $p74, $p75, $i76, $i77, $p9 := vlsi_rx_interrupt_loop_$bb4($p0, $p5, $i10, $i11, $i12, $i13, $i14, $p16, $i17, $i18, $p20, $i21, $i22, $p24, $i25, $i26, $p28, $i29, $i30, $p32, $i33, $i34, $p36, $i37, $i38, $p40, $i41, $i42, $p44, $i45, $i46, $p48, $i49, $i50, $p52, $i53, $i54, $p56, $i57, $i58, $p60, $i61, $p63, $i64, $i65, $p67, $p69, $i70, $i71, $i72, $p74, $p75, $i76, $i77, $p9);
    goto $bb4_last;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} $i10 := rd_is_active($p9);
    call {:si_unique_call 1384} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} $i12 := vlsi_process_rx($p5, $p9);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    call {:si_unique_call 1390} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i13 == 1);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $i61 := $sgt.i32($i12, 0);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} $p75 := ring_get($p5);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p75);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $i77 := $ne.i64($i76, 0);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i77 == 1);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb31:
    assume $i77 == 1;
    assume {:verifier.code 0} true;
    $p9 := $p75;
    goto $bb31_dummy;

  $bb28:
    assume $i61 == 1;
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $i64 := $load.i64($M.0, $p63);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $i65 := $add.i64($i64, 1);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p67, $i65);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(16, 1));
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $i70 := $load.i64($M.0, $p69);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i12);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $i72 := $add.i64($i70, $i71);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(16, 1));
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p74, $i72);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb10:
    assume $i13 == 1;
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, $i12);
    call {:si_unique_call 1391} {:cexpr "ret"} boogie_si_record_i32($i14);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(32, 1));
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 1);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(32, 1));
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, $i18);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i14, 256);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i14, 512);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i14, 1024);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i14, 2048);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i14, 4096);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume $i54 == 1;
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(96, 1));
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.0, $p56);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $i58 := $add.i64($i57, 1);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(96, 1));
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p60, $i58);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i46 == 1;
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(104, 1));
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.0, $p48);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $i50 := $add.i64($i49, 1);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(104, 1));
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p52, $i50);
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i38 == 1;
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(80, 1));
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.0, $p40);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $i42 := $add.i64($i41, 1);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(80, 1));
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p44, $i42);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i30 == 1;
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(88, 1));
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.0, $p32);
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $i34 := $add.i64($i33, 1);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(88, 1));
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p36, $i34);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i22 == 1;
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(48, 1));
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($i25, 1);
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(48, 1));
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p28, $i26);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb31_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6051;
}



const vlsi_tx_interrupt: ref;

axiom vlsi_tx_interrupt == $sub.ref(0, 448402);

procedure vlsi_tx_interrupt($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr;



implementation vlsi_tx_interrupt($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $p40: ref;
  var $i41: i1;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $p47: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $i52: i64;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $p11: ref;
  var $p58: ref;
  var $p10: ref;
  var $p15: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i32;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $i65: i64;
  var $i66: i1;
  var $i68: i32;
  var $i69: i16;
  var $i70: i64;
  var $i71: i1;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $i75: i16;
  var $i76: i32;
  var $i77: i16;
  var $i78: i32;
  var $i79: i32;
  var $i80: i16;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $i85: i16;
  var $i86: i32;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i24;
  var $i96: i24;
  var $i97: i24;
  var $p98: ref;
  var $p99: ref;
  var $i100: i8;
  var $i101: i64;
  var $i102: i64;
  var $i103: i64;
  var $i104: i1;
  var $i105: i32;
  var $i106: i32;
  var $i107: i16;
  var $i108: i32;
  var $i109: i32;
  var $i110: i1;
  var $i111: i8;
  var $i112: i1;
  var $p113: ref;
  var $i114: i32;
  var $i115: i1;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $i122: i24;
  var $i123: i24;
  var $i124: i24;
  var $p125: ref;
  var $p126: ref;
  var $i127: i8;
  var $i128: i64;
  var $i129: i64;
  var $i130: i64;
  var $i131: i1;
  var vslice_dummy_var_324: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} $p3 := netdev_priv($p0);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} $p7 := ring_first($p6);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $p10 := $p7;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p15 := $p10;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(56, 1));
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $i60 := $load.i64($M.0, $p59);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i64.i32($i60);
    call {:si_unique_call 1404} {:cexpr "iobase"} boogie_si_record_i32($i61);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(92, 1));
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i68 := $add.i32($i61, 16);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} $i69 := inw($i68);
    call {:si_unique_call 1411} {:cexpr "config"} boogie_si_record_i16($i69);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p15);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $i71 := $eq.i64($i70, 0);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i71 == 1);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i61, 20);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} $i80 := inw($i79);
    call {:si_unique_call 1414} {:cexpr "tmp___3"} boogie_si_record_i16($i80);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $i81 := $zext.i16.i32($i80);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $i82 := $and.i32($i81, 1024);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 0);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i109 := $add.i32($i61, 8);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} outw(0, $i109);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} $i110 := netif_queue_stopped($p0);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $i111 := $zext.i1.i8($i110);
    call {:si_unique_call 1417} {:cexpr "tmp___5"} boogie_si_record_i8($i111);
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $i112 := $trunc.i8.i1($i111);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i112 == 1);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    return;

  $bb43:
    assume $i112 == 1;
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(92, 1));
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i114, 0);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i115 == 1);
    goto $bb45;

  $bb46:
    assume $i115 == 1;
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} netif_wake_queue($p0);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p116, .str.4);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p117, .str.19);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p118, .str.6);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p119, .str.21);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p120);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $i122 := $load.i24($M.10, $p121);
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $i123 := $and.i24($i122, $sub.i24(0, 262144));
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $i124 := $or.i24($i123, 1093);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p121, $i124);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p125, 0);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $i127 := $load.i8($M.11, $p126);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $i128 := $zext.i8.i64($i127);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $i129 := $and.i64($i128, 1);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} $i130 := ldv__builtin_expect($i129, 0);
    call {:si_unique_call 1427} {:cexpr "tmp___4"} boogie_si_record_i64($i130);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $i131 := $ne.i64($i130, 0);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    assume {:branchcond $i131} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb48:
    assume $i131 == 1;
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} __dynamic_pr_debug.ref.ref.ref($p2, .str.21, .str.19);
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb34:
    assume $i83 == 1;
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $i84 := $add.i32($i61, 28);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} $i85 := inw($i84);
    call {:si_unique_call 1419} {:cexpr "tmp___1"} boogie_si_record_i16($i85);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $i86 := $zext.i16.i32($i85);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $i87 := $and.i32($i86, 4095);
    call {:si_unique_call 1420} {:cexpr "fifocnt"} boogie_si_record_i32($i87);
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i105 := $zext.i16.i32($i69);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $i106 := $or.i32($i105, 4096);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i32.i16($i106);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $i108 := $add.i32($i61, 16);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} outw($i107, $i108);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb36:
    assume $i88 == 1;
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p89, .str.4);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p90, .str.19);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p91, .str.6);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p92, .str.20);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p93);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $i95 := $load.i24($M.10, $p94);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $i96 := $and.i24($i95, $sub.i24(0, 262144));
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $i97 := $or.i24($i96, 1084);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p94, $i97);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p98, 0);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $i100 := $load.i8($M.11, $p99);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i64($i100);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $i102 := $and.i64($i101, 1);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} $i103 := ldv__builtin_expect($i102, 0);
    call {:si_unique_call 1422} {:cexpr "tmp___2"} boogie_si_record_i64($i103);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $i104 := $ne.i64($i103, 0);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb38:
    assume $i104 == 1;
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} __dynamic_pr_debug.ref.ref.ref.i32($p1, .str.20, .str.19, $i87);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb31:
    assume $i71 == 1;
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $i72 := $sext.i16.i32($i69);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $i73 := $and.i32($i72, $sub.i32(0, 6145));
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $i74 := $or.i32($i73, 2048);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i32.i16($i74);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $i76 := $zext.i16.i32($i75);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i16($i76);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $i78 := $add.i32($i61, 16);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} outw($i77, $i78);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb25:
    assume $i64 == 1;
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p15);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $i66 := $eq.i64($i65, 0);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb27;

  $bb28:
    assume $i66 == 1;
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} vslice_dummy_var_324 := vlsi_set_baud($p4, $i61);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $p11 := $p7;
    goto $bb4;

  $bb4:
    call $i12, $i13, $p14, $i16, $i17, $i18, $p20, $i21, $i22, $p24, $i25, $i26, $p28, $i29, $i30, $p32, $i33, $i34, $p36, $i37, $i38, $p40, $i41, $p43, $i44, $i45, $p47, $p49, $i50, $i51, $i52, $p54, $p55, $i56, $i57, $p11, $p58 := vlsi_tx_interrupt_loop_$bb4($p0, $p6, $i12, $i13, $p14, $i16, $i17, $i18, $p20, $i21, $i22, $p24, $i25, $i26, $p28, $i29, $i30, $p32, $i33, $i34, $p36, $i37, $i38, $p40, $i41, $p43, $i44, $i45, $p47, $p49, $i50, $i51, $i52, $p54, $p55, $i56, $i57, $p11, $p58);
    goto $bb4_last;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} $i12 := rd_is_active($p11);
    call {:si_unique_call 1403} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $p14 := $p11;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} $i16 := vlsi_process_tx($p6, $p11);
    call {:si_unique_call 1406} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 0);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $i41 := $sgt.i32($i16, 0);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} $p55 := ring_get($p6);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p55);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $p58 := $p55;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $p10 := $p58;
    goto $bb3;

  $bb22:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    $p11 := $p55;
    goto $bb22_dummy;

  $bb19:
    assume $i41 == 1;
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(8, 1));
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.0, $p43);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $i45 := $add.i64($i44, 1);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(8, 1));
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p47, $i45);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(24, 1));
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.0, $p49);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i16);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i50, $i51);
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(24, 1));
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p54, $i52);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb10:
    assume $i17 == 1;
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, $i16);
    call {:si_unique_call 1407} {:cexpr "ret"} boogie_si_record_i32($i18);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(40, 1));
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p20);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, 1);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(40, 1));
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p24, $i22);
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i18, 1);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i18, 2);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i34 == 1;
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(144, 1));
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.0, $p36);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i37, 1);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(144, 1));
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p40, $i38);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i26 == 1;
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.0, $p28);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, 1);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p32, $i30);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb6:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $p15 := $p14;
    goto $bb8;

  $bb22_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6178;
}



const netif_queue_stopped: ref;

axiom netif_queue_stopped == $sub.ref(0, 449434);

procedure netif_queue_stopped($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_queue_stopped($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} $i2 := netif_tx_queue_stopped($p1);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 1431} {:cexpr "tmp___0"} boogie_si_record_i8($i3);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const netif_tx_queue_stopped: ref;

axiom netif_tx_queue_stopped == $sub.ref(0, 450466);

procedure netif_tx_queue_stopped($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_tx_queue_stopped($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(424, 1));
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 1433} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const seq_lseek: ref;

axiom seq_lseek == $sub.ref(0, 451498);

procedure seq_lseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation seq_lseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1434} {:cexpr "seq_lseek:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1435} {:cexpr "seq_lseek:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1436} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 1437} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const seq_read: ref;

axiom seq_read == $sub.ref(0, 452530);

procedure seq_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation seq_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $i4: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1438} {:cexpr "seq_read:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1439} $i4 := __VERIFIER_nondet_long();
    call {:si_unique_call 1440} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i4);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const vlsi_seq_open: ref;

axiom vlsi_seq_open == $sub.ref(0, 453562);

procedure vlsi_seq_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vlsi_seq_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} $p2 := PDE_DATA($p0);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} $i3 := single_open($p1, vlsi_seq_show, $p2);
    call {:si_unique_call 1443} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const single_release: ref;

axiom single_release == $sub.ref(0, 454594);

procedure single_release($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation single_release($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1444} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1445} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const PDE_DATA: ref;

axiom PDE_DATA == $sub.ref(0, 455626);

procedure PDE_DATA($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation PDE_DATA($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} $p1 := external_alloc();
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const vlsi_seq_show: ref;

axiom vlsi_seq_show == $sub.ref(0, 456658);

procedure vlsi_seq_show($p0: ref, $p1: ref) returns ($r: i32);



const single_open: ref;

axiom single_open == $sub.ref(0, 457690);

procedure single_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation single_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1447} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1448} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const seq_printf: ref;

axiom seq_printf == $sub.ref(0, 458722);

procedure seq_printf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



procedure seq_printf.ref.ref($p0: ref, $p1: ref) returns ($r: i32);



procedure seq_printf.ref.ref.i32.i32.i64($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i64) returns ($r: i32);



procedure seq_printf.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32);



procedure seq_printf.ref.ref.i64.i64.i64.i64.i64($p0: ref, $p1: ref, p.2: i64, p.3: i64, p.4: i64, p.5: i64, p.6: i64) returns ($r: i32);



procedure seq_printf.ref.ref.i64.i64.i64.i64($p0: ref, $p1: ref, p.2: i64, p.3: i64, p.4: i64, p.5: i64) returns ($r: i32);



procedure seq_printf.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);



procedure seq_printf.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref) returns ($r: i32);



procedure seq_printf.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);



procedure seq_printf.ref.ref.ref.ref.ref.ref.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref, p.5: ref, p.6: ref, p.7: ref, p.8: ref, p.9: ref) returns ($r: i32);



procedure seq_printf.ref.ref.ref.ref.ref.ref.ref.ref.ref.ref.ref.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref, p.5: ref, p.6: ref, p.7: ref, p.8: ref, p.9: ref, p.10: ref, p.11: ref, p.12: ref, p.13: ref, p.14: ref) returns ($r: i32);



procedure seq_printf.ref.ref.ref.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref, p.5: ref, p.6: ref) returns ($r: i32);



procedure seq_printf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);



procedure seq_printf.ref.ref.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref, p.5: ref) returns ($r: i32);



procedure seq_printf.ref.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref) returns ($r: i32);



procedure seq_printf.ref.ref.i32.i32.i32.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: ref) returns ($r: i32);



procedure seq_printf.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref) returns ($r: i32);



const vlsi_proc_pdev: ref;

axiom vlsi_proc_pdev == $sub.ref(0, 459754);

procedure vlsi_proc_pdev($p0: ref, $p1: ref);



const vlsi_proc_ndev: ref;

axiom vlsi_proc_ndev == $sub.ref(0, 460786);

procedure vlsi_proc_ndev($p0: ref, $p1: ref);



const vlsi_proc_ring: ref;

axiom vlsi_proc_ring == $sub.ref(0, 461818);

procedure vlsi_proc_ring($p0: ref, $p1: ref);



const netif_carrier_ok: ref;

axiom netif_carrier_ok == $sub.ref(0, 462850);

procedure netif_carrier_ok($p0: ref) returns ($r: i1);



const netif_device_present: ref;

axiom netif_device_present == $sub.ref(0, 463882);

procedure netif_device_present($p0: ref) returns ($r: i1);



const div_s64_rem: ref;

axiom div_s64_rem == $sub.ref(0, 464914);

procedure div_s64_rem($i0: i64, $i1: i32, $p2: ref) returns ($r: i64);



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 465946);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.52;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 1450} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_25 := $M.52;
    call {:si_unique_call 1451} cmdloc_dummy_var_26 := $memset.i8(cmdloc_dummy_var_25, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.52 := cmdloc_dummy_var_26;
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_irq_1: ref;

axiom ldv_irq_1 == $sub.ref(0, 466978);

procedure ldv_irq_1($i0: i32, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr, $M.3, $M.36, $M.38, $M.40, $M.42, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.37, $M.45, $M.39, $M.46, $M.41, $M.47, $M.43, $M.48, $M.5, assertsPassed;



implementation ldv_irq_1($i0: i32, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1452} {:cexpr "ldv_irq_1:arg:state"} boogie_si_record_i32($i0);
    call {:si_unique_call 1453} {:cexpr "ldv_irq_1:arg:line"} boogie_si_record_i32($i1);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1454} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1455} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 1456} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i0, 0);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1457} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1458} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 1459} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} ldv_stop();
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, 1);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} $i8 := vlsi_interrupt($i1, $p2);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    call {:si_unique_call 1462} {:cexpr "irq_retval"} boogie_si_record_i32($i8);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_88:
    assume !assertsPassed;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 468010);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_pci_driver_2: ref;

axiom ldv_pci_driver_2 == $sub.ref(0, 469042);

procedure ldv_pci_driver_2();
  free requires assertsPassed;
  modifies $M.54, $M.0, $CurrAddr;



implementation ldv_pci_driver_2()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} $p0 := ldv_init_zalloc(2976);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $M.54 := $p0;
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    return;
}



const choose_interrupt_1: ref;

axiom choose_interrupt_1 == $sub.ref(0, 470074);

procedure choose_interrupt_1();
  free requires assertsPassed;
  modifies $M.4, $M.36, $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr, $M.3, $M.38, $M.40, $M.42, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.37, $M.45, $M.39, $M.46, $M.41, $M.47, $M.43, $M.48, $M.5, assertsPassed;



implementation choose_interrupt_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1466} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1467} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1468} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} ldv_stop();
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $i18 := $M.42;
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $i19 := $M.43;
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $p20 := $M.48;
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} $i21 := ldv_irq_1($i18, $i19, $p20);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $M.36 := $i21;
    call {:si_unique_call 1472} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i21);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $i14 := $M.40;
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $i15 := $M.41;
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $p16 := $M.47;
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} $i17 := ldv_irq_1($i14, $i15, $p16);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $M.36 := $i17;
    call {:si_unique_call 1470} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i17);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $i10 := $M.38;
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $i11 := $M.39;
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $p12 := $M.46;
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} $i13 := ldv_irq_1($i10, $i11, $p12);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $M.36 := $i13;
    call {:si_unique_call 1474} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i13);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $i6 := $M.36;
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $i7 := $M.37;
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $p8 := $M.45;
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} $i9 := ldv_irq_1($i6, $i7, $p8);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $M.36 := $i9;
    call {:si_unique_call 1476} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i9);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_100:
    assume !assertsPassed;
    return;
}



const ldv_file_operations_4: ref;

axiom ldv_file_operations_4 == $sub.ref(0, 471106);

procedure ldv_file_operations_4();
  free requires assertsPassed;
  modifies $M.55, $M.56, $M.0, $CurrAddr;



implementation ldv_file_operations_4()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $M.55 := $p0;
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $M.56 := $p2;
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 472138);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.52, $M.57, $M.58, $M.59, $M.60, $M.27, $M.61, $M.62, $M.4, $M.36, $M.63, $M.55, $M.56, $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.3, $M.64, $M.30, $M.65, $M.66, $M.2, $M.68, $M.69, $M.70, $M.71, $M.42, $M.40, $M.38, $M.37, $M.39, $M.41, $M.43, $M.45, $M.46, $M.47, $M.48, $M.29, $M.54, $M.67, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.1, $M.107, $M.28, $M.44, $M.12, $M.5, $M.108, $CurrAddr, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.31, $M.32, $M.33, $M.13, $M.34, $M.35, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i64;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i64;
  var $i55: i32;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $i77: i1;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $i83: i32;
  var $i84: i1;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $i88: i1;
  var $i89: i1;
  var $i90: i1;
  var $i91: i1;
  var $i92: i1;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $i103: i32;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $i108: i32;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $i113: i32;
  var $i115: i32;
  var $i116: i1;
  var $p117: ref;
  var $i118: i32;
  var $i119: i32;
  var $i120: i1;
  var $i121: i32;
  var $i122: i1;
  var $p123: ref;
  var $i125: i32;
  var $i126: i1;
  var $p127: ref;
  var $i128: i32;
  var $i129: i1;
  var $p130: ref;
  var $i131: i32;
  var $i132: i1;
  var $p133: ref;
  var $i134: i32;
  var $i135: i1;
  var $i136: i32;
  var $i137: i32;
  var $i138: i1;
  var $i139: i32;
  var $i140: i32;
  var $i141: i32;
  var $i142: i1;
  var $i144: i32;
  var $i145: i32;
  var $i146: i32;
  var $i147: i1;
  var $i148: i32;
  var $i149: i1;
  var $i150: i1;
  var $i151: i1;
  var $i152: i1;
  var $i153: i1;
  var $i154: i1;
  var $i155: i1;
  var $i156: i1;
  var $i157: i32;
  var $i158: i1;
  var $p159: ref;
  var $i160: i32;
  var $i161: i32;
  var $i162: i1;
  var $i163: i32;
  var $i164: i32;
  var $i165: i32;
  var $i166: i1;
  var $i167: i32;
  var $i168: i1;
  var $p169: ref;
  var $p170: ref;
  var $i171: i32;
  var $i172: i32;
  var $i173: i32;
  var $i174: i1;
  var $i175: i32;
  var $i176: i1;
  var $p177: ref;
  var $i178: i32;
  var $i179: i1;
  var $p180: ref;
  var $i181: i32;
  var $i182: i1;
  var $p183: ref;
  var $i184: i32;
  var $i185: i1;
  var $p186: ref;
  var $i187: i32;
  var $i188: i1;
  var $p189: ref;
  var $i190: i32;
  var $i191: i32;
  var $i192: i1;
  var $i193: i32;
  var $i194: i1;
  var $p195: ref;
  var $i196: i32;
  var $i197: i32;
  var $i198: i1;
  var $i199: i32;
  var $i200: i1;
  var $p201: ref;
  var $i202: i32;
  var $i203: i32;
  var $i204: i1;
  var $i205: i32;
  var $i206: i1;
  var $i207: i32;
  var $i208: i32;
  var $i209: i1;
  var $i210: i32;
  var $i211: i1;
  var $i212: i32;
  var $i213: i32;
  var $i214: i1;
  var $i215: i32;
  var $i216: i1;
  var $i217: i32;
  var $i218: i32;
  var $i219: i1;
  var $i220: i32;
  var $i221: i1;
  var $i223: i32;
  var $i224: i1;
  var $i226: i32;
  var $i227: i1;
  var $i229: i32;
  var $i230: i1;
  var vslice_dummy_var_325: ref;
  var vslice_dummy_var_326: ref;
  var vslice_dummy_var_327: ref;
  var vslice_dummy_var_328: ref;
  var vslice_dummy_var_329: ref;
  var vslice_dummy_var_330: i32;
  var vslice_dummy_var_331: i64;
  var vslice_dummy_var_332: i64;
  var vslice_dummy_var_333: i32;
  var vslice_dummy_var_334: i32;
  var vslice_dummy_var_335: i32;
  var vslice_dummy_var_336: i32;
  var vslice_dummy_var_337: i32;
  var vslice_dummy_var_338: i32;
  var vslice_dummy_var_339: i32;
  var vslice_dummy_var_340: i32;
  var vslice_dummy_var_341: i32;
  var vslice_dummy_var_342: i32;

  $bb0:
    call {:si_unique_call 1480} $initialize();
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} $p6 := ldv_init_zalloc(8);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} $p8 := ldv_init_zalloc(40);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} $p10 := ldv_init_zalloc(232);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} $p12 := ldv_init_zalloc(32);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} ldv_initialize();
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p0);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} vslice_dummy_var_325 := ldv_memset($p14, 0, 8);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p1);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} vslice_dummy_var_326 := ldv_memset($p16, 0, 8);
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p2);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} vslice_dummy_var_327 := ldv_memset($p18, 0, 4);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p3);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} vslice_dummy_var_328 := ldv_memset($p20, 0, 4);
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p4);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} vslice_dummy_var_329 := ldv_memset($p22, 0, 4);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $M.57 := 0;
    call {:si_unique_call 1498} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 1499} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $M.59 := 0;
    call {:si_unique_call 1500} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1501} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $M.27 := 0;
    call {:si_unique_call 1502} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $M.61 := 0;
    call {:si_unique_call 1503} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $p41, $p42, $i44, $i45, $i46, $i47, $p48, $i49, $i51, $i52, $p53, $i54, $i55, $i57, $i58, $p59, $p60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $p98, $i100, $i101, $p102, $i103, $i105, $i106, $p107, $i108, $i110, $i111, $p112, $i113, $i115, $i116, $p117, $i118, $i119, $i120, $i121, $i122, $p123, $i125, $i126, $p127, $i128, $i129, $p130, $i131, $i132, $p133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $i155, $i156, $i157, $i158, $p159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $p169, $p170, $i171, $i172, $i173, $i174, $i175, $i176, $p177, $i178, $i179, $p180, $i181, $i182, $p183, $i184, $i185, $p186, $i187, $i188, $p189, $i190, $i191, $i192, $i193, $i194, $p195, $i196, $i197, $i198, $i199, $i200, $p201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $i220, $i221, $i223, $i224, $i226, $i227, $i229, $i230, vslice_dummy_var_330, vslice_dummy_var_331, vslice_dummy_var_332, vslice_dummy_var_333, vslice_dummy_var_334, vslice_dummy_var_335, vslice_dummy_var_336, vslice_dummy_var_337, vslice_dummy_var_338, vslice_dummy_var_339, vslice_dummy_var_340, vslice_dummy_var_341, vslice_dummy_var_342 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p7, $p9, $p11, $p13, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $p41, $p42, $i44, $i45, $i46, $i47, $p48, $i49, $i51, $i52, $p53, $i54, $i55, $i57, $i58, $p59, $p60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $p98, $i100, $i101, $p102, $i103, $i105, $i106, $p107, $i108, $i110, $i111, $p112, $i113, $i115, $i116, $p117, $i118, $i119, $i120, $i121, $i122, $p123, $i125, $i126, $p127, $i128, $i129, $p130, $i131, $i132, $p133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $i155, $i156, $i157, $i158, $p159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $p169, $p170, $i171, $i172, $i173, $i174, $i175, $i176, $p177, $i178, $i179, $p180, $i181, $i182, $p183, $i184, $i185, $p186, $i187, $i188, $p189, $i190, $i191, $i192, $i193, $i194, $p195, $i196, $i197, $i198, $i199, $i200, $p201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $i220, $i221, $i223, $i224, $i226, $i227, $i229, $i230, vslice_dummy_var_330, vslice_dummy_var_331, vslice_dummy_var_332, vslice_dummy_var_333, vslice_dummy_var_334, vslice_dummy_var_335, vslice_dummy_var_336, vslice_dummy_var_337, vslice_dummy_var_338, vslice_dummy_var_339, vslice_dummy_var_340, vslice_dummy_var_341, vslice_dummy_var_342);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i24, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i24, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i24, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} ldv_stop();
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb49_dummy;

  $bb9:
    assume $i28 == 1;
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $i146 := $M.61;
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $i147 := $ne.i32($i146, 0);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb146:
    assume $i147 == 1;
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1566} $i148 := __VERIFIER_nondet_int();
    call {:si_unique_call 1567} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i148);
    call {:si_unique_call 1568} {:cexpr "tmp___8"} boogie_si_record_i32($i148);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    $i149 := $slt.i32($i148, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    $i150 := $slt.i32($i148, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    $i151 := $slt.i32($i148, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    $i152 := $eq.i32($i148, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    assume !($i152 == 1);
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} ldv_stop();
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb155:
    assume $i152 == 1;
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $i220 := $M.61;
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $i221 := $eq.i32($i220, 4);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    $i223 := $M.61;
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $i224 := $eq.i32($i223, 3);
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  $bb234:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    $i226 := $M.61;
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $i227 := $eq.i32($i226, 2);
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  $bb237:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    $i229 := $M.61;
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $i230 := $eq.i32($i229, 5);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  $bb240:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb239:
    assume $i230 == 1;
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} vslice_dummy_var_342 := ldv_shutdown_2();
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $M.61 := 5;
    call {:si_unique_call 1609} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb236:
    assume $i227 == 1;
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} vslice_dummy_var_341 := ldv_shutdown_2();
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $M.61 := 2;
    call {:si_unique_call 1607} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb233:
    assume $i224 == 1;
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} vslice_dummy_var_340 := ldv_shutdown_2();
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $M.61 := 3;
    call {:si_unique_call 1605} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb230:
    assume $i221 == 1;
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} vslice_dummy_var_339 := ldv_shutdown_2();
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $M.61 := 4;
    call {:si_unique_call 1603} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb153:
    assume $i151 == 1;
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $i210 := $M.61;
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $i211 := $eq.i32($i210, 4);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  $bb219:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    $i215 := $M.61;
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $i216 := $eq.i32($i215, 3);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  $bb225:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb224:
    assume $i216 == 1;
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} $i217 := ldv_resume_early_2();
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $M.71 := $i217;
    call {:si_unique_call 1600} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i217);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $i218 := $M.71;
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $i219 := $eq.i32($i218, 0);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226, $bb227;

  $bb227:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb226:
    assume $i219 == 1;
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $M.61 := 5;
    call {:si_unique_call 1601} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb218:
    assume $i211 == 1;
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1596} $i212 := ldv_resume_early_2();
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $M.71 := $i212;
    call {:si_unique_call 1597} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i212);
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $i213 := $M.71;
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $i214 := $eq.i32($i213, 0);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i214 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb220:
    assume $i214 == 1;
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    $M.61 := 5;
    call {:si_unique_call 1598} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb151:
    assume $i150 == 1;
    assume {:verifier.code 0} true;
    $i153 := $slt.i32($i148, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i153 == 1);
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $i205 := $M.61;
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $i206 := $eq.i32($i205, 3);
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb212:
    assume $i206 == 1;
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} $i207 := ldv_suspend_late_2();
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $M.70 := $i207;
    call {:si_unique_call 1594} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i207);
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $i208 := $M.70;
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $i209 := $eq.i32($i208, 0);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb214:
    assume $i209 == 1;
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $M.61 := 4;
    call {:si_unique_call 1595} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb158:
    assume $i153 == 1;
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $i187 := $M.61;
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i187, 4);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    $i193 := $M.61;
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $i194 := $eq.i32($i193, 3);
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  $bb201:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    $i199 := $M.61;
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $i200 := $eq.i32($i199, 5);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  $bb207:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb206:
    assume $i200 == 1;
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $p201 := $M.54;
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} $i202 := vlsi_irda_resume($p201);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $M.69 := $i202;
    call {:si_unique_call 1591} {:cexpr "ldv_retval_6"} boogie_si_record_i32($i202);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $i203 := $M.69;
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $i204 := $eq.i32($i203, 0);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  $bb209:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb208:
    assume $i204 == 1;
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $M.61 := 2;
    call {:si_unique_call 1592} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    goto $bb210;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb200:
    assume $i194 == 1;
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $p195 := $M.54;
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} $i196 := vlsi_irda_resume($p195);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $M.69 := $i196;
    call {:si_unique_call 1588} {:cexpr "ldv_retval_6"} boogie_si_record_i32($i196);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $i197 := $M.69;
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $i198 := $eq.i32($i197, 0);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  $bb203:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb202:
    assume $i198 == 1;
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $M.61 := 2;
    call {:si_unique_call 1589} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    goto $bb204;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb194:
    assume $i188 == 1;
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $p189 := $M.54;
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} $i190 := vlsi_irda_resume($p189);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $M.69 := $i190;
    call {:si_unique_call 1585} {:cexpr "ldv_retval_6"} boogie_si_record_i32($i190);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $i191 := $M.69;
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $i192 := $eq.i32($i191, 0);
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb196:
    assume $i192 == 1;
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $M.61 := 2;
    call {:si_unique_call 1586} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    goto $bb198;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb149:
    assume $i149 == 1;
    assume {:verifier.code 0} true;
    $i154 := $slt.i32($i148, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    $i155 := $slt.i32($i148, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i155 == 1);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $i175 := $M.61;
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $i176 := $eq.i32($i175, 4);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    $i178 := $M.61;
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $i179 := $eq.i32($i178, 3);
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    $i181 := $M.61;
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $i182 := $eq.i32($i181, 2);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  $bb189:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    $i184 := $M.61;
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $i185 := $eq.i32($i184, 5);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb191:
    assume $i185 == 1;
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $p186 := $M.54;
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} vlsi_irda_remove($p186);
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1583} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb188:
    assume $i182 == 1;
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $p183 := $M.54;
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} vlsi_irda_remove($p183);
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1581} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb185:
    assume $i179 == 1;
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $p180 := $M.54;
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} vlsi_irda_remove($p180);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1579} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb182:
    assume $i176 == 1;
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $p177 := $M.54;
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} vlsi_irda_remove($p177);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1577} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb162:
    assume $i155 == 1;
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $i165 := $M.61;
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $i166 := $eq.i32($i165, 2);
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    assume !($i166 == 1);
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb173:
    assume $i166 == 1;
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $i167 := $M.67;
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i167, 0);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    assume !($i168 == 1);
    goto $bb175;

  $bb176:
    assume $i168 == 1;
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $p169 := $M.54;
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $i171 := $load.i32($M.52, $p170);
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} $i172 := vlsi_irda_suspend($p169, $i171);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $M.68 := $i172;
    call {:si_unique_call 1574} {:cexpr "ldv_retval_7"} boogie_si_record_i32($i172);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $i173 := $M.68;
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i173, 0);
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb178:
    assume $i174 == 1;
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $M.61 := 3;
    call {:si_unique_call 1575} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    goto $bb180;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb160:
    assume $i154 == 1;
    assume {:verifier.code 0} true;
    $i156 := $eq.i32($i148, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    assume !($i156 == 1);
    goto $bb157;

  $bb164:
    assume $i156 == 1;
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $i157 := $M.61;
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $i158 := $eq.i32($i157, 1);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb166:
    assume $i158 == 1;
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $p159 := $M.54;
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} $i160 := vlsi_irda_probe($p159, $p13);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $M.66 := $i160;
    call {:si_unique_call 1570} {:cexpr "ldv_retval_8"} boogie_si_record_i32($i160);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $i161 := $M.66;
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i161, 0);
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb168:
    assume $i162 == 1;
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $M.61 := 2;
    call {:si_unique_call 1571} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $i163 := $M.59;
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $i164 := $add.i32($i163, 1);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $M.59 := $i164;
    call {:si_unique_call 1572} {:cexpr "ref_cnt"} boogie_si_record_i32($i164);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $i85 := $M.27;
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i85, 0);
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb83:
    assume $i86 == 1;
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1536} $i87 := __VERIFIER_nondet_int();
    call {:si_unique_call 1537} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i87);
    call {:si_unique_call 1538} {:cexpr "tmp___7"} boogie_si_record_i32($i87);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $i88 := $slt.i32($i87, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    $i89 := $slt.i32($i87, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    $i90 := $slt.i32($i87, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i87, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} ldv_stop();
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb92:
    assume $i91 == 1;
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $i141 := $M.27;
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i141, 2);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb140:
    assume $i142 == 1;
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} vslice_dummy_var_338 := ldv_ndo_uninit_3();
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 1563} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $i144 := $M.59;
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $i145 := $sub.i32($i144, 1);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $M.59 := $i145;
    call {:si_unique_call 1564} {:cexpr "ref_cnt"} boogie_si_record_i32($i145);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb90:
    assume $i90 == 1;
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $i134 := $M.27;
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i134, 1);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb134:
    assume $i135 == 1;
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} $i136 := ldv_ndo_init_3();
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $M.65 := $i136;
    call {:si_unique_call 1559} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i136);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $i137 := $M.65;
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $i138 := $eq.i32($i137, 0);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb136:
    assume $i138 == 1;
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 1560} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $i139 := $M.59;
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $i140 := $add.i32($i139, 1);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $M.59 := $i140;
    call {:si_unique_call 1561} {:cexpr "ref_cnt"} boogie_si_record_i32($i140);
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb88:
    assume $i89 == 1;
    assume {:verifier.code 0} true;
    $i92 := $slt.i32($i87, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i92 == 1);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $i125 := $M.27;
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i125, 1);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $i128 := $M.27;
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $i129 := $eq.i32($i128, 3);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $i131 := $M.27;
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $i132 := $eq.i32($i131, 2);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb131:
    assume $i132 == 1;
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $p133 := $M.29;
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} vlsi_tx_timeout($p133);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 1557} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    goto $bb133;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb128:
    assume $i129 == 1;
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $p130 := $M.29;
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} vlsi_tx_timeout($p130);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 1555} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    goto $bb130;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb125:
    assume $i126 == 1;
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $p127 := $M.29;
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} vlsi_tx_timeout($p127);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 1553} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    goto $bb127;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb95:
    assume $i92 == 1;
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $i121 := $M.27;
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, 3);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb122:
    assume $i122 == 1;
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $p123 := $M.29;
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} vslice_dummy_var_337 := vlsi_hard_start_xmit($p11, $p123);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 1551} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb86:
    assume $i88 == 1;
    assume {:verifier.code 0} true;
    $i93 := $slt.i32($i87, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    $i94 := $slt.i32($i87, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i94 == 1);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $i115 := $M.27;
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $i116 := $eq.i32($i115, 2);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb116:
    assume $i116 == 1;
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $p117 := $M.29;
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} $i118 := vlsi_open($p117);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $M.64 := $i118;
    call {:si_unique_call 1548} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i118);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $i119 := $M.64;
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i119, 0);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb118:
    assume $i120 == 1;
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 1549} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    goto $bb120;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb99:
    assume $i94 == 1;
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $i100 := $M.27;
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i100, 1);
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $i105 := $M.27;
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i105, 3);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $i110 := $M.27;
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 2);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb113:
    assume $i111 == 1;
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $p112 := $M.29;
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.52, $p3);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} vslice_dummy_var_336 := vlsi_ioctl($p112, $p9, $i113);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 1546} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb110:
    assume $i106 == 1;
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $p107 := $M.29;
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.52, $p3);
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} vslice_dummy_var_335 := vlsi_ioctl($p107, $p9, $i108);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 1544} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb107:
    assume $i101 == 1;
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $p102 := $M.29;
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.52, $p3);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} vslice_dummy_var_334 := vlsi_ioctl($p102, $p9, $i103);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 1542} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb97:
    assume $i93 == 1;
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i87, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    assume !($i95 == 1);
    goto $bb94;

  $bb101:
    assume $i95 == 1;
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $i96 := $M.27;
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i96, 3);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb103:
    assume $i97 == 1;
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $p98 := $M.29;
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} vslice_dummy_var_333 := vlsi_close($p98);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 1540} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    goto $bb105;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $i68 := $M.60;
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb53:
    assume $i69 == 1;
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1523} $i70 := __VERIFIER_nondet_int();
    call {:si_unique_call 1524} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i70);
    call {:si_unique_call 1525} {:cexpr "tmp___6"} boogie_si_record_i32($i70);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i70, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i70, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} ldv_stop();
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb58:
    assume $i72 == 1;
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $i78 := $M.60;
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 1);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb71:
    assume $i79 == 1;
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} $i80 := vlsi_mod_init();
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $M.63 := $i80;
    call {:si_unique_call 1530} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i80);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $i81 := $M.63;
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 0);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i83 := $M.63;
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, 0);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb76:
    assume $i84 == 1;
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $M.60 := 2;
    call {:si_unique_call 1534} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} ldv_check_final_state();
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb73:
    assume $i82 == 1;
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $M.60 := 3;
    call {:si_unique_call 1531} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1532} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} ldv_file_operations_4();
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb56:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i70, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb60;

  $bb61:
    assume $i73 == 1;
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $i74 := $M.60;
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 3);
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb63:
    assume $i75 == 1;
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $i76 := $M.59;
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 0);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb65;

  $bb66:
    assume $i77 == 1;
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} vlsi_mod_exit();
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $M.60 := 2;
    call {:si_unique_call 1527} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb3:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i24, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i29 == 1);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $i66 := $M.58;
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb50:
    assume $i67 == 1;
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} choose_interrupt_1();
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i24, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb11;

  $bb14:
    assume $i30 == 1;
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $i31 := $M.57;
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb16:
    assume $i32 == 1;
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1507} $i33 := __VERIFIER_nondet_int();
    call {:si_unique_call 1508} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i33);
    call {:si_unique_call 1509} {:cexpr "tmp___5"} boogie_si_record_i32($i33);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i33, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i33, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} ldv_stop();
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb23:
    assume $i36 == 1;
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $i57 := $M.57;
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 1);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb40:
    assume $i58 == 1;
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $p59 := $M.55;
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $p60 := $M.56;
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} $i61 := vlsi_seq_open($p59, $p60);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $M.62 := $i61;
    call {:si_unique_call 1518} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i61);
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $i62 := $M.62;
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 0);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb42:
    assume $i63 == 1;
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $M.57 := 2;
    call {:si_unique_call 1519} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $i64 := $M.59;
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i64, 1);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $M.59 := $i65;
    call {:si_unique_call 1520} {:cexpr "ref_cnt"} boogie_si_record_i32($i65);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb21:
    assume $i35 == 1;
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $i51 := $M.57;
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 2);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb37:
    assume $i52 == 1;
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $p53 := $M.56;
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.52, $p0);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.52, $p2);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} vslice_dummy_var_332 := seq_lseek($p53, $i54, $i55);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $M.57 := 2;
    call {:si_unique_call 1516} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb19:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i33, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i37 == 1);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $i46 := $M.57;
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 2);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb34:
    assume $i47 == 1;
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $p48 := $M.56;
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.52, $p1);
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} vslice_dummy_var_331 := seq_read($p48, $p5, $i49, $p7);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $M.57 := 2;
    call {:si_unique_call 1514} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb26:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i33, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb25;

  $bb28:
    assume $i38 == 1;
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $i39 := $M.57;
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 2);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i40 == 1;
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $p41 := $M.55;
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $p42 := $M.56;
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} vslice_dummy_var_330 := single_release($p41, $p42);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1511} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $i44 := $M.59;
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $i45 := $sub.i32($i44, 1);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $M.59 := $i45;
    call {:si_unique_call 1512} {:cexpr "ref_cnt"} boogie_si_record_i32($i45);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb49_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1504} $i24 := __VERIFIER_nondet_int();
    call {:si_unique_call 1505} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i24);
    call {:si_unique_call 1506} {:cexpr "tmp___4"} boogie_si_record_i32($i24);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 473170);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    return;
}



const vlsi_mod_exit: ref;

axiom vlsi_mod_exit == $sub.ref(0, 474202);

procedure vlsi_mod_exit();
  free requires assertsPassed;
  modifies $M.61;



implementation vlsi_mod_exit()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} ldv_pci_unregister_driver_45(vlsi_irda_driver);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $p0 := $M.1;
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} remove_proc_entry(.str.139, $0.ref);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vlsi_mod_init: ref;

axiom vlsi_mod_init == $sub.ref(0, 475234);

procedure vlsi_mod_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.44, $M.12, $M.1, $M.61, $M.54, $M.0, $CurrAddr;



implementation vlsi_mod_init() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $i8: i32;
  var $i32: i32;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var vslice_dummy_var_343: i32;
  var vslice_dummy_var_344: i32;
  var vslice_dummy_var_345: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    $i0 := $M.5;
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 0);
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $i2 := $M.5;
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 3);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.44, ringsize);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 16);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i9, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i9, 64);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i9, 64);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} $i19 := net_ratelimit();
    call {:si_unique_call 1618} {:cexpr "tmp___0"} boogie_si_record_i32($i19);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $M.44 := $store.i32($M.44, ringsize, 8);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.44, $add.ref($add.ref(ringsize, $mul.ref(0, 8)), $mul.ref(1, 4)));
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i32, 16);
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i32, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i32, 64);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i32, 64);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} $i42 := net_ratelimit();
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $M.44 := $store.i32($M.44, $add.ref($add.ref(ringsize, $mul.ref(0, 8)), $mul.ref(1, 4)), 8);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i23 := $M.12;
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $M.12 := $i25;
    call {:si_unique_call 1620} {:cexpr "sirpulse"} boogie_si_record_i32($i25);
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} $p26 := proc_mkdir(.str.139, $0.ref);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $M.1 := $p26;
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} $i27 := ldv___pci_register_driver_44(vlsi_irda_driver, __this_module, .str.4);
    call {:si_unique_call 1623} {:cexpr "ret"} boogie_si_record_i32($i27);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i8 := $i27;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb44:
    assume $i28 == 1;
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $p29 := $M.1;
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb46;

  $bb47:
    assume $i31 == 1;
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} remove_proc_entry(.str.139, $0.ref);
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb75:
    assume $i43 == 1;
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.44, $add.ref($add.ref(ringsize, $mul.ref(0, 8)), $mul.ref(1, 4)));
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} vslice_dummy_var_345 := printk.ref.ref.ref.i32(.str.141, drivername, .str.142, $i44);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb57:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb55:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i32, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb60;

  $bb61:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb53:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i32, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb60;

  $bb64:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb51:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i32, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i32, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb60;

  $bb69:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb67:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i32, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb60;

  $bb72:
    assume $i41 == 1;
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb39:
    assume $i20 == 1;
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.44, ringsize);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} vslice_dummy_var_344 := printk.ref.ref.ref.i32(.str.141, drivername, .str.143, $i21);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb18:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i9, 32);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb24, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb23;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i9, 16);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb27, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb23;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb14:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i9, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i9, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb23;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb30:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i9, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb23;

  $bb35:
    assume $i18 == 1;
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} $i4 := net_ratelimit();
    call {:si_unique_call 1615} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 1);
    goto $bb9;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $i6 := $M.5;
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} vslice_dummy_var_343 := printk.ref.ref.i32(.str.140, drivername, $i6);
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const ldv_ndo_init_3: ref;

axiom ldv_ndo_init_3 == $sub.ref(0, 476266);

procedure ldv_ndo_init_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ndo_init_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1627} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1628} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_ndo_uninit_3: ref;

axiom ldv_ndo_uninit_3 == $sub.ref(0, 477298);

procedure ldv_ndo_uninit_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ndo_uninit_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1629} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1630} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_suspend_late_2: ref;

axiom ldv_suspend_late_2 == $sub.ref(0, 478330);

procedure ldv_suspend_late_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_suspend_late_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1631} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1632} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_resume_early_2: ref;

axiom ldv_resume_early_2 == $sub.ref(0, 479362);

procedure ldv_resume_early_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_resume_early_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1633} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1634} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_shutdown_2: ref;

axiom ldv_shutdown_2 == $sub.ref(0, 480394);

procedure ldv_shutdown_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_shutdown_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1635} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1636} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 481426);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    return;
}



const proc_mkdir: ref;

axiom proc_mkdir == $sub.ref(0, 482458);

procedure proc_mkdir($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation proc_mkdir($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1637} $p2 := external_alloc();
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const ldv___pci_register_driver_44: ref;

axiom ldv___pci_register_driver_44 == $sub.ref(0, 483490);

procedure ldv___pci_register_driver_44($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.61, $M.54, $M.0, $CurrAddr;



implementation ldv___pci_register_driver_44($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} $i3 := __pci_register_driver($p0, $p1, $p2);
    call {:si_unique_call 1639} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1640} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1641} ldv_pci_driver_2();
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __pci_register_driver: ref;

axiom __pci_register_driver == $sub.ref(0, 484522);

procedure __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1642} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1643} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_pci_unregister_driver_45: ref;

axiom ldv_pci_unregister_driver_45 == $sub.ref(0, 485554);

procedure ldv_pci_unregister_driver_45($p0: ref);
  free requires assertsPassed;
  modifies $M.61;



implementation ldv_pci_unregister_driver_45($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} pci_unregister_driver($p0);
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    $M.61 := 0;
    call {:si_unique_call 1645} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    return;
}



const pci_unregister_driver: ref;

axiom pci_unregister_driver == $sub.ref(0, 486586);

procedure pci_unregister_driver($p0: ref);
  free requires assertsPassed;



implementation pci_unregister_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 487618);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1646} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 1} true;
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 488650);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 489682);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 490714);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_133:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 491746);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 492778);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 493810);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 494842);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 495874);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 496906);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 497938);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __VERIFIER_nondet_unsigned_short: ref;

axiom __VERIFIER_nondet_unsigned_short == $sub.ref(0, 498970);

procedure __VERIFIER_nondet_unsigned_short() returns ($r: i16);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_short() returns ($r: i16)
{
  var $i0: i16;
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1647} $i0 := __SMACK_nondet_unsigned_short();
    call {:si_unique_call 1648} {:cexpr "smack:ext:__SMACK_nondet_unsigned_short"} boogie_si_record_i16($i0);
    call {:si_unique_call 1649} {:cexpr "x"} boogie_si_record_i16($i0);
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $i2 := $sge.i32($i1, 0);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 1} true;
    $i6 := $zext.i1.i32($i3);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1650} __VERIFIER_assume($i6);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 1} true;
    $i4 := $zext.i16.i32($i0);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 1} true;
    $i5 := $sle.i32($i4, 65535);
    assume {:verifier.code 0} true;
    $i3 := $i5;
    goto $bb3;
}



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 500002);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 501034);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 502066);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1651} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1652} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1653} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1654} __VERIFIER_assume($i4);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 503098);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 504130);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 505162);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 506194);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 507226);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1655} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 1656} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1657} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1658} __VERIFIER_assume($i4);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 508258);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 509290);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 510322);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 511354);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 512386);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1659} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1660} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1661} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1662} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1663} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1664} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1665} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1666} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1667} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1668} __VERIFIER_assume($i7);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1669} __VERIFIER_assume($i11);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 513418);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 514450);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 515482);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 516514);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 517546);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 518578);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 519610);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 520642);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 521674);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1670} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1671} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1672} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1673} __VERIFIER_assume($i10);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_ushort: ref;

axiom __VERIFIER_nondet_ushort == $sub.ref(0, 522706);

procedure __VERIFIER_nondet_ushort() returns ($r: i16);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ushort() returns ($r: i16)
{
  var $i0: i16;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1674} $i0 := __VERIFIER_nondet_unsigned_short();
    call {:si_unique_call 1675} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_short"} boogie_si_record_i16($i0);
    call {:si_unique_call 1676} {:cexpr "x"} boogie_si_record_i16($i0);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 523738);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1677} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1678} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1679} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 524770);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1680} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1681} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 525802);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 526834);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1682} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1683} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 527866);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 528898);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 529930);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1684} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1685} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1686} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1687} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} $p6 := malloc($i5);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_27 := $M.0;
    call {:si_unique_call 1689} cmdloc_dummy_var_28 := $memset.i8(cmdloc_dummy_var_27, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_28;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 530962);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 531994);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.42, $M.36, $M.40, $M.38, $M.37, $M.39, $M.41, $M.43, $M.45, $M.46, $M.47, $M.48, $M.29, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.27, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.4, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.0, $M.1, $M.107, $M.28, $M.44, $M.12, $M.5, $M.108;



implementation __SMACK_static_init()
{

  $bb0:
    $M.42 := 0;
    call {:si_unique_call 1690} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
    $M.36 := 0;
    call {:si_unique_call 1691} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
    $M.40 := 0;
    call {:si_unique_call 1692} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
    call {:si_unique_call 1693} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.38 := 0;
    call {:si_unique_call 1694} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
    $M.37 := 0;
    call {:si_unique_call 1695} {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32(0);
    $M.39 := 0;
    call {:si_unique_call 1696} {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32(0);
    $M.41 := 0;
    call {:si_unique_call 1697} {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32(0);
    $M.43 := 0;
    call {:si_unique_call 1698} {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32(0);
    $M.45 := $0.ref;
    $M.46 := $0.ref;
    $M.47 := $0.ref;
    $M.48 := $0.ref;
    $M.29 := $0.ref;
    $M.54 := $0.ref;
    $M.55 := $0.ref;
    $M.56 := $0.ref;
    $M.57 := 0;
    call {:si_unique_call 1699} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.58 := 0;
    call {:si_unique_call 1700} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.59 := 0;
    call {:si_unique_call 1701} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.60 := 0;
    call {:si_unique_call 1702} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.27 := 0;
    call {:si_unique_call 1703} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.61 := 0;
    call {:si_unique_call 1704} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.62 := 0;
    call {:si_unique_call 1705} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.63 := 0;
    call {:si_unique_call 1706} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.64 := 0;
    call {:si_unique_call 1707} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.65 := 0;
    call {:si_unique_call 1708} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.66 := 0;
    call {:si_unique_call 1709} {:cexpr "ldv_retval_8"} boogie_si_record_i32(0);
    $M.67 := 0;
    call {:si_unique_call 1710} {:cexpr "pci_counter"} boogie_si_record_i32(0);
    $M.68 := 0;
    call {:si_unique_call 1711} {:cexpr "ldv_retval_7"} boogie_si_record_i32(0);
    $M.69 := 0;
    call {:si_unique_call 1712} {:cexpr "ldv_retval_6"} boogie_si_record_i32(0);
    $M.70 := 0;
    call {:si_unique_call 1713} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.71 := 0;
    call {:si_unique_call 1714} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.4 := 0;
    call {:si_unique_call 1715} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    $M.72 := $store.i32($M.72, __mod_pci__vlsi_irda_table_device_table, 0);
    $M.73 := $store.i32($M.73, $add.ref($add.ref($add.ref(__mod_pci__vlsi_irda_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.74 := $store.i32($M.74, $add.ref($add.ref($add.ref(__mod_pci__vlsi_irda_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i32($M.75, $add.ref($add.ref($add.ref(__mod_pci__vlsi_irda_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.76 := $store.i32($M.76, $add.ref($add.ref($add.ref(__mod_pci__vlsi_irda_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i32($M.77, $add.ref($add.ref($add.ref(__mod_pci__vlsi_irda_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.78 := $store.i64($M.78, $add.ref($add.ref($add.ref(__mod_pci__vlsi_irda_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.72 := $store.i32($M.72, $add.ref($add.ref($add.ref(__mod_pci__vlsi_irda_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.73 := $store.i32($M.73, $add.ref($add.ref($add.ref(__mod_pci__vlsi_irda_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.74 := $store.i32($M.74, $add.ref($add.ref($add.ref(__mod_pci__vlsi_irda_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.75 := $store.i32($M.75, $add.ref($add.ref($add.ref(__mod_pci__vlsi_irda_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.76 := $store.i32($M.76, $add.ref($add.ref($add.ref(__mod_pci__vlsi_irda_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.77 := $store.i32($M.77, $add.ref($add.ref($add.ref(__mod_pci__vlsi_irda_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.78 := $store.i64($M.78, $add.ref($add.ref($add.ref(__mod_pci__vlsi_irda_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.ref($M.0, vlsi_netdev_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(16, 1)), vlsi_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(24, 1)), vlsi_close);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(32, 1)), vlsi_hard_start_xmit);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(80, 1)), vlsi_ioctl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(112, 1)), vlsi_tx_timeout);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(384, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(392, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(400, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(408, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(416, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(424, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(432, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(440, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(448, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(456, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(464, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(472, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(480, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(488, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(496, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(504, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(512, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vlsi_netdev_ops, $mul.ref(0, 528)), $mul.ref(520, 1)), $0.ref);
    $M.1 := $0.ref;
    $M.0 := $store.i32($M.0, vlsi_irda_table, 4100);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vlsi_irda_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(4, 1)), 261);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vlsi_irda_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vlsi_irda_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vlsi_irda_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(16, 1)), 851968);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vlsi_irda_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(20, 1)), 16776960);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vlsi_irda_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vlsi_irda_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vlsi_irda_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vlsi_irda_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vlsi_irda_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vlsi_irda_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vlsi_irda_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vlsi_irda_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, drivername, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(drivername, $mul.ref(0, 8)), $mul.ref(1, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(drivername, $mul.ref(0, 8)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(drivername, $mul.ref(0, 8)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(drivername, $mul.ref(0, 8)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(drivername, $mul.ref(0, 8)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(drivername, $mul.ref(0, 8)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(drivername, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.107 := $store.ref($M.107, vlsi_irda_driver, $0.ref);
    $M.107 := $store.ref($M.107, $add.ref($add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.107 := $store.ref($M.107, $add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(16, 1)), drivername);
    $M.107 := $store.ref($M.107, $add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(24, 1)), vlsi_irda_table);
    $M.107 := $store.ref($M.107, $add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(32, 1)), vlsi_irda_probe);
    $M.107 := $store.ref($M.107, $add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(40, 1)), vlsi_irda_remove);
    $M.107 := $store.ref($M.107, $add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(48, 1)), vlsi_irda_suspend);
    $M.107 := $store.ref($M.107, $add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(56, 1)), $0.ref);
    $M.107 := $store.ref($M.107, $add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(64, 1)), $0.ref);
    $M.107 := $store.ref($M.107, $add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(72, 1)), vlsi_irda_resume);
    $M.107 := $store.ref($M.107, $add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(80, 1)), $0.ref);
    $M.107 := $store.ref($M.107, $add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(88, 1)), $0.ref);
    $M.107 := $store.ref($M.107, $add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(96, 1)), $0.ref);
    $M.107 := $store.ref($M.107, $add.ref($add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(0, 1)), $0.ref);
    $M.107 := $store.ref($M.107, $add.ref($add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(8, 1)), $0.ref);
    $M.107 := $store.ref($M.107, $add.ref($add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(16, 1)), $0.ref);
    $M.107 := $store.ref($M.107, $add.ref($add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(24, 1)), $0.ref);
    $M.107 := $store.i8($M.107, $add.ref($add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(32, 1)), 0);
    $M.107 := $store.i32($M.107, $add.ref($add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(36, 1)), 0);
    $M.107 := $store.ref($M.107, $add.ref($add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(40, 1)), $0.ref);
    $M.107 := $store.ref($M.107, $add.ref($add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(48, 1)), $0.ref);
    $M.107 := $store.ref($M.107, $add.ref($add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(56, 1)), $0.ref);
    $M.107 := $store.ref($M.107, $add.ref($add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(64, 1)), $0.ref);
    $M.107 := $store.ref($M.107, $add.ref($add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(72, 1)), $0.ref);
    $M.107 := $store.ref($M.107, $add.ref($add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(80, 1)), $0.ref);
    $M.107 := $store.ref($M.107, $add.ref($add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(88, 1)), $0.ref);
    $M.107 := $store.ref($M.107, $add.ref($add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(96, 1)), $0.ref);
    $M.107 := $store.ref($M.107, $add.ref($add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(104, 1)), $0.ref);
    $M.107 := $store.ref($M.107, $add.ref($add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(112, 1)), $0.ref);
    $M.107 := $store.i32($M.107, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.107 := $store.i32($M.107, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.107 := $store.i32($M.107, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.107 := $store.ref($M.107, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.107 := $store.ref($M.107, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.107 := $store.ref($M.107, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.107 := $store.ref($M.107, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.107 := $store.ref($M.107, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.107 := $store.i32($M.107, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.107 := $store.i64($M.107, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.107 := $store.ref($M.107, $add.ref($add.ref($add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.107 := $store.ref($M.107, $add.ref($add.ref($add.ref($add.ref(vlsi_irda_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.28 := 7;
    call {:si_unique_call 1716} {:cexpr "qos_mtt_bits"} boogie_si_record_i32(7);
    $M.44 := $store.i32($M.44, ringsize, 8);
    $M.44 := $store.i32($M.44, $add.ref($add.ref(ringsize, $mul.ref(0, 8)), $mul.ref(1, 4)), 8);
    $M.12 := 1;
    call {:si_unique_call 1717} {:cexpr "sirpulse"} boogie_si_record_i32(1);
    $M.5 := 0;
    call {:si_unique_call 1718} {:cexpr "clksrc"} boogie_si_record_i32(0);
    $M.0 := $store.i8($M.0, .str.194, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 17)), $mul.ref(1, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 17)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 17)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 17)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 17)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 17)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 17)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 17)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 17)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 17)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 17)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 17)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 17)), $mul.ref(13, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 17)), $mul.ref(14, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 17)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.14, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 16)), $mul.ref(1, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 16)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 16)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 16)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 16)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 16)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 16)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 16)), $mul.ref(8, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 16)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 16)), $mul.ref(10, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 16)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 16)), $mul.ref(12, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 16)), $mul.ref(13, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 16)), $mul.ref(14, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.22, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 14)), $mul.ref(1, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 14)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 14)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 14)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 14)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 14)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 14)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 14)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 14)), $mul.ref(9, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 14)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 14)), $mul.ref(11, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 14)), $mul.ref(12, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.26, 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 4)), $mul.ref(1, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 4)), $mul.ref(2, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.27, 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 4)), $mul.ref(1, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 4)), $mul.ref(2, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.27, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.28, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 4)), $mul.ref(1, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 4)), $mul.ref(2, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.164, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 17)), $mul.ref(1, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 17)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 17)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 17)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 17)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 17)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 17)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 17)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 17)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 17)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 17)), $mul.ref(11, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 17)), $mul.ref(12, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 17)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 17)), $mul.ref(14, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 17)), $mul.ref(15, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.164, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.190, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.190, $mul.ref(0, 18)), $mul.ref(1, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.190, $mul.ref(0, 18)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.190, $mul.ref(0, 18)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.190, $mul.ref(0, 18)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.190, $mul.ref(0, 18)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.190, $mul.ref(0, 18)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.190, $mul.ref(0, 18)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.190, $mul.ref(0, 18)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.190, $mul.ref(0, 18)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.190, $mul.ref(0, 18)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.190, $mul.ref(0, 18)), $mul.ref(11, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.190, $mul.ref(0, 18)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.190, $mul.ref(0, 18)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.190, $mul.ref(0, 18)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.190, $mul.ref(0, 18)), $mul.ref(15, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.190, $mul.ref(0, 18)), $mul.ref(16, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.190, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.148, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 14)), $mul.ref(1, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 14)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 14)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 14)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 14)), $mul.ref(5, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 14)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 14)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 14)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 14)), $mul.ref(9, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 14)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 14)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 14)), $mul.ref(12, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.148, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.5, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 16)), $mul.ref(1, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 16)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 16)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 16)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 16)), $mul.ref(5, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 16)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 16)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 16)), $mul.ref(8, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 16)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 16)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 16)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 16)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 16)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 16)), $mul.ref(14, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.146, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 14)), $mul.ref(1, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 14)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 14)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 14)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 14)), $mul.ref(5, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 14)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 14)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 14)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 14)), $mul.ref(9, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 14)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 14)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 14)), $mul.ref(12, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.176, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.176, $mul.ref(0, 16)), $mul.ref(1, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.176, $mul.ref(0, 16)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.176, $mul.ref(0, 16)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.176, $mul.ref(0, 16)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.176, $mul.ref(0, 16)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.176, $mul.ref(0, 16)), $mul.ref(6, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.176, $mul.ref(0, 16)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.176, $mul.ref(0, 16)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.176, $mul.ref(0, 16)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.176, $mul.ref(0, 16)), $mul.ref(10, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.176, $mul.ref(0, 16)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.176, $mul.ref(0, 16)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.176, $mul.ref(0, 16)), $mul.ref(13, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.176, $mul.ref(0, 16)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.176, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.166, 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 25)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 25)), $mul.ref(2, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 25)), $mul.ref(3, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 25)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 25)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 25)), $mul.ref(6, 1)), 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 25)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 25)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 25)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 25)), $mul.ref(10, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 25)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 25)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 25)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 25)), $mul.ref(14, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 25)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 25)), $mul.ref(16, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 25)), $mul.ref(17, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 25)), $mul.ref(18, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 25)), $mul.ref(19, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 25)), $mul.ref(20, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 25)), $mul.ref(21, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 25)), $mul.ref(22, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 25)), $mul.ref(23, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, .str.167, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 36)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 36)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 36)), $mul.ref(3, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 36)), $mul.ref(4, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 36)), $mul.ref(5, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 36)), $mul.ref(6, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 36)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 36)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 36)), $mul.ref(9, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 36)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 36)), $mul.ref(11, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 36)), $mul.ref(12, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 36)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 36)), $mul.ref(14, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 36)), $mul.ref(15, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 36)), $mul.ref(16, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 36)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 36)), $mul.ref(18, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 36)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 36)), $mul.ref(20, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 36)), $mul.ref(21, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 36)), $mul.ref(22, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 36)), $mul.ref(23, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 36)), $mul.ref(24, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 36)), $mul.ref(25, 1)), 39);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 36)), $mul.ref(26, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 36)), $mul.ref(27, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 36)), $mul.ref(28, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 36)), $mul.ref(29, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 36)), $mul.ref(30, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 36)), $mul.ref(31, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 36)), $mul.ref(32, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 36)), $mul.ref(33, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 36)), $mul.ref(34, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 36)), $mul.ref(35, 1)), 0);
    $M.0 := $store.i8($M.0, .str.168, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 24)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 24)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 24)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 24)), $mul.ref(4, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 24)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 24)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 24)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 24)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 24)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 24)), $mul.ref(10, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 24)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 24)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 24)), $mul.ref(13, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 24)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 24)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 24)), $mul.ref(16, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 24)), $mul.ref(17, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 24)), $mul.ref(18, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 24)), $mul.ref(19, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 24)), $mul.ref(20, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 24)), $mul.ref(21, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 24)), $mul.ref(22, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, .str.169, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 33)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 33)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 33)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 33)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 33)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 33)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 33)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 33)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 33)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 33)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 33)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 33)), $mul.ref(12, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 33)), $mul.ref(13, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 33)), $mul.ref(14, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 33)), $mul.ref(15, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 33)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 33)), $mul.ref(17, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 33)), $mul.ref(18, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 33)), $mul.ref(19, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 33)), $mul.ref(20, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 33)), $mul.ref(21, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 33)), $mul.ref(22, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 33)), $mul.ref(23, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 33)), $mul.ref(24, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 33)), $mul.ref(25, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 33)), $mul.ref(26, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 33)), $mul.ref(27, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 33)), $mul.ref(28, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 33)), $mul.ref(29, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 33)), $mul.ref(30, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 33)), $mul.ref(31, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i8($M.0, .str.170, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 39)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 39)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 39)), $mul.ref(3, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 39)), $mul.ref(4, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 39)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 39)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 39)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 39)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 39)), $mul.ref(9, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 39)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 39)), $mul.ref(11, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 39)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 39)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 39)), $mul.ref(14, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 39)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 39)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 39)), $mul.ref(17, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 39)), $mul.ref(18, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 39)), $mul.ref(19, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 39)), $mul.ref(20, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 39)), $mul.ref(21, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 39)), $mul.ref(22, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 39)), $mul.ref(23, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 39)), $mul.ref(24, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 39)), $mul.ref(25, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 39)), $mul.ref(26, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 39)), $mul.ref(27, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 39)), $mul.ref(28, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 39)), $mul.ref(29, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 39)), $mul.ref(30, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 39)), $mul.ref(31, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 39)), $mul.ref(32, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 39)), $mul.ref(33, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 39)), $mul.ref(34, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 39)), $mul.ref(35, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 39)), $mul.ref(36, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 39)), $mul.ref(37, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 39)), $mul.ref(38, 1)), 0);
    $M.0 := $store.i8($M.0, .str.172, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 21)), $mul.ref(1, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 21)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 21)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 21)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 21)), $mul.ref(5, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 21)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 21)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 21)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 21)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 21)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 21)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 21)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 21)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 21)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 21)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 21)), $mul.ref(16, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 21)), $mul.ref(17, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 21)), $mul.ref(18, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 21)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.172, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.173, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 31)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 31)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 31)), $mul.ref(3, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 31)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 31)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 31)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 31)), $mul.ref(7, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 31)), $mul.ref(8, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 31)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 31)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 31)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 31)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 31)), $mul.ref(13, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 31)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 31)), $mul.ref(15, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 31)), $mul.ref(16, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 31)), $mul.ref(17, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 31)), $mul.ref(18, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 31)), $mul.ref(19, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 31)), $mul.ref(20, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 31)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 31)), $mul.ref(22, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 31)), $mul.ref(23, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 31)), $mul.ref(24, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 31)), $mul.ref(25, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 31)), $mul.ref(26, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 31)), $mul.ref(27, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 31)), $mul.ref(28, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 31)), $mul.ref(29, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, .str.145, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 11)), $mul.ref(1, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 11)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 11)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 11)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 11)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 11)), $mul.ref(6, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 11)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 11)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 11)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.145, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.155, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 10)), $mul.ref(1, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 10)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 10)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 10)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 10)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 10)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 10)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 10)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.108 := $store.i8($M.108, .str.157, 86);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(.str.157, $mul.ref(0, 18)), $mul.ref(1, 1)), 76);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(.str.157, $mul.ref(0, 18)), $mul.ref(2, 1)), 83);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(.str.157, $mul.ref(0, 18)), $mul.ref(3, 1)), 73);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(.str.157, $mul.ref(0, 18)), $mul.ref(4, 1)), 45);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(.str.157, $mul.ref(0, 18)), $mul.ref(5, 1)), 70);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(.str.157, $mul.ref(0, 18)), $mul.ref(6, 1)), 73);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(.str.157, $mul.ref(0, 18)), $mul.ref(7, 1)), 82);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(.str.157, $mul.ref(0, 18)), $mul.ref(8, 1)), 32);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(.str.157, $mul.ref(0, 18)), $mul.ref(9, 1)), 64);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(.str.157, $mul.ref(0, 18)), $mul.ref(10, 1)), 32);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(.str.157, $mul.ref(0, 18)), $mul.ref(11, 1)), 48);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(.str.157, $mul.ref(0, 18)), $mul.ref(12, 1)), 120);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(.str.157, $mul.ref(0, 18)), $mul.ref(13, 1)), 37);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(.str.157, $mul.ref(0, 18)), $mul.ref(14, 1)), 48);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(.str.157, $mul.ref(0, 18)), $mul.ref(15, 1)), 52);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(.str.157, $mul.ref(0, 18)), $mul.ref(16, 1)), 120);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(.str.157, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.160, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 16)), $mul.ref(1, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 16)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 16)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 16)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 16)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 16)), $mul.ref(6, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 16)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 16)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 16)), $mul.ref(9, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 16)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 16)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 16)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 16)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 16)), $mul.ref(14, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.19, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 18)), $mul.ref(1, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 18)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 18)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 18)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 18)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 18)), $mul.ref(6, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 18)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 18)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 18)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 18)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 18)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 18)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 18)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 18)), $mul.ref(14, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 18)), $mul.ref(15, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 18)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.19, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.53, 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 9)), $mul.ref(1, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 9)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 9)), $mul.ref(3, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 9)), $mul.ref(4, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 9)), $mul.ref(5, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 9)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 9)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.54, 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 9)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 9)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 9)), $mul.ref(3, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 9)), $mul.ref(4, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 9)), $mul.ref(5, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 9)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 9)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.55, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 8)), $mul.ref(1, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 8)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 8)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 8)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 8)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 8)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.56, 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 12)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 12)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 12)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 12)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 12)), $mul.ref(5, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 12)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 12)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 12)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 12)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 12)), $mul.ref(10, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.57, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(9, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.58, 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 11)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 11)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 11)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 11)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 11)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 11)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 11)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 11)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 11)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.59, 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 14)), $mul.ref(1, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 14)), $mul.ref(2, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 14)), $mul.ref(3, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 14)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 14)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 14)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 14)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 14)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 14)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 14)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 14)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 14)), $mul.ref(12, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.60, 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 14)), $mul.ref(1, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 14)), $mul.ref(2, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 14)), $mul.ref(3, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 14)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 14)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 14)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 14)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 14)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 14)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 14)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 14)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 14)), $mul.ref(12, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.63, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 8)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 8)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 8)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 8)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 8)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 8)), $mul.ref(6, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.64, 0);
    $M.0 := $store.i8($M.0, .str.65, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 6)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 6)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 6)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 6)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.66, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 10)), $mul.ref(1, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 10)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 10)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 10)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 10)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 10)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 10)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 10)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.67, 64);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, .str.68, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 11)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 11)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 11)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 11)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 11)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 11)), $mul.ref(6, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 11)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 11)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 11)), $mul.ref(9, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.75, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 8)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 8)), $mul.ref(2, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 8)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 8)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 8)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 8)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.76, 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 5)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 5)), $mul.ref(2, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 5)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.77, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 8)), $mul.ref(1, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 8)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 8)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 8)), $mul.ref(4, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 8)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 8)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.78, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 15)), $mul.ref(1, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 15)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 15)), $mul.ref(3, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 15)), $mul.ref(4, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 15)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 15)), $mul.ref(6, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 15)), $mul.ref(7, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 15)), $mul.ref(8, 1)), 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 15)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 15)), $mul.ref(10, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 15)), $mul.ref(11, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 15)), $mul.ref(12, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 15)), $mul.ref(13, 1)), 75);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, .str.79, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 15)), $mul.ref(1, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 15)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 15)), $mul.ref(3, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 15)), $mul.ref(4, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 15)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 15)), $mul.ref(6, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 15)), $mul.ref(7, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 15)), $mul.ref(8, 1)), 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 15)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 15)), $mul.ref(10, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 15)), $mul.ref(11, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 15)), $mul.ref(12, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 15)), $mul.ref(13, 1)), 75);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, .str.80, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 8)), $mul.ref(1, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 8)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 8)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 8)), $mul.ref(4, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 8)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 8)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.81, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 8)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 8)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 8)), $mul.ref(3, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 8)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 8)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 8)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.81, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.82, 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 9)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 9)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 9)), $mul.ref(3, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 9)), $mul.ref(4, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 9)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 9)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 9)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.82, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.85, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 7)), $mul.ref(1, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 7)), $mul.ref(2, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 7)), $mul.ref(3, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 7)), $mul.ref(4, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 7)), $mul.ref(5, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.86, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 8)), $mul.ref(1, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 8)), $mul.ref(2, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 8)), $mul.ref(3, 1)), 75);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 8)), $mul.ref(4, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 8)), $mul.ref(5, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 8)), $mul.ref(6, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.87, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 8)), $mul.ref(1, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 8)), $mul.ref(2, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 8)), $mul.ref(3, 1)), 75);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 8)), $mul.ref(4, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 8)), $mul.ref(5, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 8)), $mul.ref(6, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.88, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 7)), $mul.ref(1, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 7)), $mul.ref(2, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 7)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 7)), $mul.ref(4, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 7)), $mul.ref(5, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.89, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 10)), $mul.ref(1, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 10)), $mul.ref(2, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 10)), $mul.ref(3, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 10)), $mul.ref(4, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 10)), $mul.ref(5, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 10)), $mul.ref(6, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 10)), $mul.ref(7, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 10)), $mul.ref(8, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.90, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 9)), $mul.ref(1, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 9)), $mul.ref(2, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 9)), $mul.ref(3, 1)), 75);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 9)), $mul.ref(4, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 9)), $mul.ref(5, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 9)), $mul.ref(6, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 9)), $mul.ref(7, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.91, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 9)), $mul.ref(1, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 9)), $mul.ref(2, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 9)), $mul.ref(3, 1)), 75);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 9)), $mul.ref(4, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 9)), $mul.ref(5, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 9)), $mul.ref(6, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 9)), $mul.ref(7, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.92, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 8)), $mul.ref(1, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 8)), $mul.ref(2, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 8)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 8)), $mul.ref(4, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 8)), $mul.ref(5, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 8)), $mul.ref(6, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.97, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 6)), $mul.ref(1, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 6)), $mul.ref(2, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 6)), $mul.ref(3, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 6)), $mul.ref(4, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.98, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 6)), $mul.ref(1, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 6)), $mul.ref(2, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 6)), $mul.ref(3, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 6)), $mul.ref(4, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.99, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 6)), $mul.ref(1, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 6)), $mul.ref(2, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 6)), $mul.ref(3, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 6)), $mul.ref(4, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.99, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.100, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 6)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 6)), $mul.ref(2, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 6)), $mul.ref(3, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 6)), $mul.ref(4, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.101, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 7)), $mul.ref(1, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 7)), $mul.ref(2, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 7)), $mul.ref(3, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 7)), $mul.ref(4, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 7)), $mul.ref(5, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.102, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 7)), $mul.ref(1, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 7)), $mul.ref(2, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 7)), $mul.ref(3, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 7)), $mul.ref(4, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 7)), $mul.ref(5, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.103, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 5)), $mul.ref(1, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 5)), $mul.ref(2, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 5)), $mul.ref(3, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.104, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 5)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 5)), $mul.ref(2, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 5)), $mul.ref(3, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.105, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 5)), $mul.ref(1, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 5)), $mul.ref(2, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 5)), $mul.ref(3, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.106, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 9)), $mul.ref(1, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 9)), $mul.ref(2, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 9)), $mul.ref(3, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 9)), $mul.ref(4, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 9)), $mul.ref(5, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 9)), $mul.ref(6, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 9)), $mul.ref(7, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.107, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 9)), $mul.ref(1, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 9)), $mul.ref(2, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 9)), $mul.ref(3, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 9)), $mul.ref(4, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 9)), $mul.ref(5, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 9)), $mul.ref(6, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 9)), $mul.ref(7, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.108, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 7)), $mul.ref(1, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 7)), $mul.ref(2, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 7)), $mul.ref(3, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 7)), $mul.ref(4, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 7)), $mul.ref(5, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.109, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 7)), $mul.ref(1, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 7)), $mul.ref(2, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 7)), $mul.ref(3, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 7)), $mul.ref(4, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 7)), $mul.ref(5, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.111, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 13)), $mul.ref(1, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 13)), $mul.ref(2, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 13)), $mul.ref(3, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 13)), $mul.ref(4, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 13)), $mul.ref(5, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 13)), $mul.ref(6, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 13)), $mul.ref(7, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 13)), $mul.ref(8, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 13)), $mul.ref(9, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 13)), $mul.ref(10, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 13)), $mul.ref(11, 1)), 75);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.112, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 8)), $mul.ref(1, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 8)), $mul.ref(2, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 8)), $mul.ref(3, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 8)), $mul.ref(4, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 8)), $mul.ref(5, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 8)), $mul.ref(6, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.113, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 8)), $mul.ref(1, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 8)), $mul.ref(2, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 8)), $mul.ref(3, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 8)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 8)), $mul.ref(5, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 8)), $mul.ref(6, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.114, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 8)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 8)), $mul.ref(2, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 8)), $mul.ref(3, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 8)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 8)), $mul.ref(5, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 8)), $mul.ref(6, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.115, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 8)), $mul.ref(1, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 8)), $mul.ref(2, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 8)), $mul.ref(3, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 8)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 8)), $mul.ref(5, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 8)), $mul.ref(6, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.115, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.116, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 8)), $mul.ref(1, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 8)), $mul.ref(2, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 8)), $mul.ref(3, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 8)), $mul.ref(4, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 8)), $mul.ref(5, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 8)), $mul.ref(6, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.117, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 8)), $mul.ref(1, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 8)), $mul.ref(2, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 8)), $mul.ref(3, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 8)), $mul.ref(4, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 8)), $mul.ref(5, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 8)), $mul.ref(6, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.117, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.118, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 10)), $mul.ref(1, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 10)), $mul.ref(2, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 10)), $mul.ref(3, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 10)), $mul.ref(4, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 10)), $mul.ref(5, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 10)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 10)), $mul.ref(7, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 10)), $mul.ref(8, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.118, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.142, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 3)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, .str.143, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 3)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.143, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, .str.139, 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 15)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 15)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 15)), $mul.ref(3, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 15)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 15)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 15)), $mul.ref(6, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 15)), $mul.ref(7, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 15)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 15)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 15)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 15)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 15)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 15)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    call {:si_unique_call 1719} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 533026);

procedure devirtbounce(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 534058);

procedure devirtbounce.1(funcPtr: ref, arg: i16, arg1: i32);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: i16, arg1: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 535090);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 536122);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 537154);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 538186);

procedure devirtbounce.5(funcPtr: ref, arg: i8, arg1: i32);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: i8, arg1: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 539218);

procedure devirtbounce.6(funcPtr: ref, arg: i32) returns ($r: i16);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: i32) returns ($r: i16)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 540250);

procedure devirtbounce.7(funcPtr: ref, arg: i32) returns ($r: i8);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: i32) returns ($r: i8)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 541282);

procedure devirtbounce.8(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.36, $M.38, $M.40, $M.42, $M.4, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $CurrAddr, $M.37, $M.45, $M.39, $M.46, $M.41, $M.47, $M.43, $M.48, $M.5, assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i9 := $eq.ref(vlsi_close, $p0);
    assume {:branchcond $i9} true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i9 == 1);
    $i8 := $eq.ref(vlsi_open, $p0);
    assume {:branchcond $i8} true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i8 == 1);
    $i7 := $eq.ref(vlsi_irda_resume, $p0);
    assume {:branchcond $i7} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1720} $i2 := vlsi_irda_resume($p1);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    $r := $i2;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i8 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1721} $i4 := vlsi_open($p3);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    $r := $i4;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i9 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1722} $i6 := vlsi_close($p5);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    $r := $i6;
    return;

  SeqInstr_142:
    assume !assertsPassed;
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 542314);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 543346);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 544378);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.42, $M.36, $M.40, $M.38, $M.37, $M.39, $M.41, $M.43, $M.45, $M.46, $M.47, $M.48, $M.29, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.27, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.4, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.0, $M.1, $M.107, $M.28, $M.44, $M.12, $M.5, $M.108, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1723} __SMACK_static_init();
    call {:si_unique_call 1724} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.52, $M.57, $M.58, $M.59, $M.60, $M.27, $M.61, $M.62, $M.4, $M.36, $M.63, $M.55, $M.56, $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.3, $M.64, $M.30, $M.65, $M.66, $M.2, $M.68, $M.69, $M.70, $M.71, $M.42, $M.40, $M.38, $M.37, $M.39, $M.41, $M.43, $M.45, $M.46, $M.47, $M.48, $M.29, $M.54, $M.67, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.1, $M.107, $M.28, $M.44, $M.12, $M.5, $M.108, $CurrAddr, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.31, $M.32, $M.33, $M.13, $M.34, $M.35;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation vlsi_fill_rx_loop_$bb4(in_$p0: ref, in_$i5: i32, in_$i6: i1, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i64, in_$p31: ref, in_$i32: i32, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p4: ref) returns (out_$i5: i32, out_$i6: i1, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i64, out_$p31: ref, out_$i32: i32, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p4: ref)
{

  entry:
    out_$i5, out_$i6, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p4 := in_$i5, in_$i6, in_$p10, in_$p11, in_$i12, in_$i13, in_$p14, in_$p15, in_$p16, in_$p17, in_$i18, in_$i19, in_$p20, in_$p21, in_$p22, in_$p23, in_$p24, in_$i25, in_$p26, in_$p27, in_$p28, in_$i29, in_$i30, in_$p31, in_$i32, in_$p33, in_$i34, in_$i35, in_$p4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_532;

  $bb19:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$p4 := out_$p33;
    goto $bb19_dummy;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i64(out_$i34, 0);
    goto corral_source_split_583;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p33);
    goto corral_source_split_582;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} out_$p33 := ring_put(in_$p0);
    goto corral_source_split_581;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} rd_activate(out_$p4);
    goto corral_source_split_580;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} pci_dma_sync_single_for_device(out_$p27, out_$i25, out_$i30, out_$i32);
    goto corral_source_split_579;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i32($M.0, out_$p31);
    goto corral_source_split_578;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_577;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    out_$i30 := $zext.i32.i64(out_$i29);
    goto corral_source_split_576;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.0, out_$p28);
    goto corral_source_split_575;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p0, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_574;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_573;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_572;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} out_$i25 := rd_get_addr(out_$p4);
    call {:si_unique_call 193} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i25);
    goto corral_source_split_571;

  $bb14:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p24, 5888);
    goto corral_source_split_567;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p23, $mul.ref(0, 232)), $mul.ref(192, 1));
    goto corral_source_split_566;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_565;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p4, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_564;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} skb_reserve(out_$p21, 1);
    goto corral_source_split_563;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_562;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p4, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_561;

  $bb15:
    assume out_$i19 == 1;
    goto corral_source_split_560;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i64(out_$i18, 0);
    goto corral_source_split_558;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    out_$i18 := $p2i.ref.i64(out_$p17);
    goto corral_source_split_557;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_556;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p4, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_555;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p15, out_$p14);
    goto corral_source_split_554;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p4, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_553;

  SeqInstr_12:
    goto corral_source_split_552;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} out_$p14 := dev_alloc_skb(2050);
    goto SeqInstr_11;

  $bb13:
    assume out_$i13 == 1;
    goto corral_source_split_551;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i64(out_$i12, 0);
    goto corral_source_split_549;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    out_$i12 := $p2i.ref.i64(out_$p11);
    goto corral_source_split_548;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_547;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p4, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_546;

  $bb7:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    out_$i6 := $ne.i32(out_$i5, 0);
    goto corral_source_split_535;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} out_$i5 := rd_is_active(out_$p4);
    call {:si_unique_call 185} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i5);
    goto corral_source_split_534;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb19_dummy:
    call {:si_unique_call 1} out_$i5, out_$i6, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p4 := vlsi_fill_rx_loop_$bb4(in_$p0, out_$i5, out_$i6, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p4);
    return;

  exit:
    return;
}



procedure vlsi_fill_rx_loop_$bb4(in_$p0: ref, in_$i5: i32, in_$i6: i1, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i64, in_$p31: ref, in_$i32: i32, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p4: ref) returns (out_$i5: i32, out_$i6: i1, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i64, out_$p31: ref, out_$i32: i32, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p4: ref);
  modifies $M.0, assertsPassed;



implementation vlsi_ring_debug_loop_$bb4(in_$p0: ref, in_$p25: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$p32: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i41: i64, in_$i42: i16, in_$i43: i8, in_$i44: i32, in_$i45: i32, in_$i46: i32, in_$i48: i32, in_$i49: i32, in_$i50: i1, in_$i28: i32, in_vslice_dummy_var_57: i32, in_vslice_dummy_var_58: i32, in_vslice_dummy_var_59: i32) returns (out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$p32: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i41: i64, out_$i42: i16, out_$i43: i8, out_$i44: i32, out_$i45: i32, out_$i46: i32, out_$i48: i32, out_$i49: i32, out_$i50: i1, out_$i28: i32, out_vslice_dummy_var_57: i32, out_vslice_dummy_var_58: i32, out_vslice_dummy_var_59: i32)
{

  entry:
    out_$p29, out_$p30, out_$i31, out_$p32, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i49, out_$i50, out_$i28, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59 := in_$p29, in_$p30, in_$i31, in_$p32, in_$p34, in_$p35, in_$p36, in_$p37, in_$p38, in_$p39, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i48, in_$i49, in_$i50, in_$i28, in_vslice_dummy_var_57, in_vslice_dummy_var_58, in_vslice_dummy_var_59;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_671;

  $bb6:
    assume out_$i50 == 1;
    assume {:verifier.code 0} true;
    out_$i28 := out_$i48;
    goto $bb6_dummy;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    out_$i50 := $ugt.i32(out_$i49, out_$i48);
    goto corral_source_split_694;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i32($M.0, in_$p25);
    goto corral_source_split_693;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    out_$i48 := $add.i32(out_$i28, 1);
    call {:si_unique_call 226} {:cexpr "i"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_692;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} out_vslice_dummy_var_59 := printk.ref.ref.i32.i32.i32(.str.18, .str.14, out_$i44, out_$i45, out_$i46);
    goto corral_source_split_691;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    out_$i46 := $trunc.i64.i32(out_$i41);
    goto corral_source_split_690;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i16.i32(out_$i42);
    goto corral_source_split_689;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i8.i32(out_$i43);
    goto corral_source_split_688;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} out_$i43 := rd_get_status(out_$p32);
    call {:si_unique_call 224} {:cexpr "tmp___3"} boogie_si_record_i8(out_$i43);
    goto corral_source_split_687;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} out_$i42 := rd_get_count(out_$p32);
    call {:si_unique_call 222} {:cexpr "tmp___2"} boogie_si_record_i16(out_$i42);
    goto corral_source_split_686;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} out_$i41 := rd_get_addr(out_$p32);
    call {:si_unique_call 220} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i41);
    goto corral_source_split_685;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} out_vslice_dummy_var_58 := printk.ref.ref.ref.ref(.str.17, out_$p35, out_$p37, out_$p39);
    goto corral_source_split_684;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    goto corral_source_split_683;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p30, $mul.ref(out_$i31, 24)), $mul.ref(0, 1));
    goto corral_source_split_682;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_681;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p30, $mul.ref(out_$i31, 24)), $mul.ref(16, 1));
    goto corral_source_split_680;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_679;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p30, $mul.ref(out_$i31, 24)), $mul.ref(8, 1));
    goto corral_source_split_678;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} out_vslice_dummy_var_57 := printk.ref.ref.i32(.str.16, .str.14, out_$i28);
    goto corral_source_split_677;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref(out_$p30, $mul.ref(out_$i31, 24));
    goto corral_source_split_676;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i32.i64(out_$i28);
    goto corral_source_split_675;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_674;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_673;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p29, out_$p30, out_$i31, out_$p32, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i49, out_$i50, out_$i28, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59 := vlsi_ring_debug_loop_$bb4(in_$p0, in_$p25, out_$p29, out_$p30, out_$i31, out_$p32, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i49, out_$i50, out_$i28, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59);
    return;

  exit:
    return;
}



procedure vlsi_ring_debug_loop_$bb4(in_$p0: ref, in_$p25: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$p32: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i41: i64, in_$i42: i16, in_$i43: i8, in_$i44: i32, in_$i45: i32, in_$i46: i32, in_$i48: i32, in_$i49: i32, in_$i50: i1, in_$i28: i32, in_vslice_dummy_var_57: i32, in_vslice_dummy_var_58: i32, in_vslice_dummy_var_59: i32) returns (out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$p32: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i41: i64, out_$i42: i16, out_$i43: i8, out_$i44: i32, out_$i45: i32, out_$i46: i32, out_$i48: i32, out_$i49: i32, out_$i50: i1, out_$i28: i32, out_vslice_dummy_var_57: i32, out_vslice_dummy_var_58: i32, out_vslice_dummy_var_59: i32);



implementation dma_sync_single_for_device_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_sync_single_for_device_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_sync_single_for_device_loop_$bb3();



implementation vlsi_unarm_tx_loop_$bb4(in_$p1: ref, in_$p5: ref, in_$p7: ref, in_$i12: i32, in_$i13: i1, in_$i14: i64, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i64, in_$p20: ref, in_$i21: i32, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i24, in_$i36: i24, in_$i37: i24, in_$p38: ref, in_$p39: ref, in_$i40: i8, in_$i41: i64, in_$i42: i64, in_$i43: i64, in_$i44: i1, in_$i46: i32, in_$i45: i32, in_$i47: i1, in_$i48: i32, in_$p50: ref, in_$i51: i64, in_$i52: i64, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$p58: ref, in_$i59: i64, in_$i60: i64, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$p66: ref, in_$i67: i64, in_$i68: i64, in_$p70: ref, in_$i71: i1, in_$p73: ref, in_$i74: i64, in_$i75: i64, in_$p77: ref, in_$p79: ref, in_$i80: i64, in_$i81: i64, in_$i82: i64, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$i87: i1, in_$p11: ref) returns (out_$i12: i32, out_$i13: i1, out_$i14: i64, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i64, out_$p20: ref, out_$i21: i32, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i24, out_$i36: i24, out_$i37: i24, out_$p38: ref, out_$p39: ref, out_$i40: i8, out_$i41: i64, out_$i42: i64, out_$i43: i64, out_$i44: i1, out_$i46: i32, out_$i45: i32, out_$i47: i1, out_$i48: i32, out_$p50: ref, out_$i51: i64, out_$i52: i64, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$p58: ref, out_$i59: i64, out_$i60: i64, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$p66: ref, out_$i67: i64, out_$i68: i64, out_$p70: ref, out_$i71: i1, out_$p73: ref, out_$i74: i64, out_$i75: i64, out_$p77: ref, out_$p79: ref, out_$i80: i64, out_$i81: i64, out_$i82: i64, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$i87: i1, out_$p11: ref)
{

  entry:
    out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i46, out_$i45, out_$i47, out_$i48, out_$p50, out_$i51, out_$i52, out_$p54, out_$i55, out_$i56, out_$p58, out_$i59, out_$i60, out_$p62, out_$i63, out_$i64, out_$p66, out_$i67, out_$i68, out_$p70, out_$i71, out_$p73, out_$i74, out_$i75, out_$p77, out_$p79, out_$i80, out_$i81, out_$i82, out_$p84, out_$p85, out_$i86, out_$i87, out_$p11 := in_$i12, in_$i13, in_$i14, in_$p15, in_$p16, in_$p17, in_$i18, in_$i19, in_$p20, in_$i21, in_$p22, in_$p23, in_$i24, in_$i25, in_$p26, in_$p27, in_$p28, in_$p29, in_$p30, in_$p31, in_$p32, in_$p33, in_$p34, in_$i35, in_$i36, in_$i37, in_$p38, in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i46, in_$i45, in_$i47, in_$i48, in_$p50, in_$i51, in_$i52, in_$p54, in_$i55, in_$i56, in_$p58, in_$i59, in_$i60, in_$p62, in_$i63, in_$i64, in_$p66, in_$i67, in_$i68, in_$p70, in_$i71, in_$p73, in_$i74, in_$i75, in_$p77, in_$p79, in_$i80, in_$i81, in_$i82, in_$p84, in_$p85, in_$i86, in_$i87, in_$p11;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3986;

  $bb27:
    assume out_$i87 == 1;
    assume {:verifier.code 0} true;
    out_$p11 := out_$p85;
    goto $bb27_dummy;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    out_$i87 := $ne.i64(out_$i86, 0);
    goto corral_source_split_4078;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    out_$i86 := $p2i.ref.i64(out_$p85);
    goto corral_source_split_4077;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} out_$p85 := ring_get(in_$p7);
    goto corral_source_split_4076;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb21:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p70, out_$i68);
    goto corral_source_split_4074;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(144, 1));
    goto corral_source_split_4073;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    out_$i68 := $add.i64(out_$i67, 1);
    goto corral_source_split_4072;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i64($M.0, out_$p66);
    goto corral_source_split_4071;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(144, 1));
    goto corral_source_split_4070;

  $bb20:
    assume out_$i64 == 1;
    goto corral_source_split_4069;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i32(out_$i63, 0);
    goto corral_source_split_4067;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i63 := $and.i32(out_$i48, 2);
    goto corral_source_split_4066;

  $bb18:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p62, out_$i60);
    goto corral_source_split_4064;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_4063;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    out_$i60 := $add.i64(out_$i59, 1);
    goto corral_source_split_4062;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i64($M.0, out_$p58);
    goto corral_source_split_4061;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_4060;

  $bb17:
    assume out_$i56 == 1;
    goto corral_source_split_4059;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i32(out_$i55, 0);
    goto corral_source_split_4054;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    out_$i55 := $and.i32(out_$i48, 1);
    goto corral_source_split_4053;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p54, out_$i52);
    goto corral_source_split_4052;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(40, 1));
    goto corral_source_split_4051;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i64(out_$i51, 1);
    goto corral_source_split_4050;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i64($M.0, out_$p50);
    goto corral_source_split_4049;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(40, 1));
    goto corral_source_split_4048;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    out_$i48 := $sub.i32(0, out_$i45);
    call {:si_unique_call 860} {:cexpr "ret"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_4047;

  $bb15:
    assume out_$i47 == 1;
    goto corral_source_split_4046;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    out_$i47 := $slt.i32(out_$i45, 0);
    goto corral_source_split_4044;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_4043;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} out_$i46 := vlsi_process_tx(in_$p7, out_$p11);
    call {:si_unique_call 855} {:cexpr "ret"} boogie_si_record_i32(out_$i46);
    assume {:verifier.code 0} true;
    out_$i45 := out_$i46;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i45 := $sub.i32(0, 1);
    goto $bb14;

  $bb12:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} __dynamic_pr_debug.ref.ref.ref(in_$p1, .str.147, .str.146);
    goto corral_source_split_4041;

  $bb11:
    assume out_$i44 == 1;
    goto corral_source_split_4040;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i64(out_$i43, 0);
    goto corral_source_split_4038;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} out_$i43 := ldv__builtin_expect(out_$i42, 0);
    call {:si_unique_call 858} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i43);
    goto corral_source_split_4037;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    out_$i42 := $and.i64(out_$i41, 1);
    goto corral_source_split_4036;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i8.i64(out_$i40);
    goto corral_source_split_4035;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i8($M.11, out_$p39);
    goto corral_source_split_4034;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4033;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, out_$p38, 0);
    goto corral_source_split_4032;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4031;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, out_$p34, out_$i37);
    goto corral_source_split_4030;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    out_$i37 := $or.i24(out_$i36, 1117);
    goto corral_source_split_4029;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    out_$i36 := $and.i24(out_$i35, $sub.i24(0, 262144));
    goto corral_source_split_4028;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i24($M.10, out_$p34);
    goto corral_source_split_4027;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    out_$p34 := $bitcast.ref.ref(out_$p33);
    goto corral_source_split_4026;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4025;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, out_$p32, .str.147);
    goto corral_source_split_4024;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4023;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, out_$p31, .str.6);
    goto corral_source_split_4022;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4021;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, out_$p30, .str.146);
    goto corral_source_split_4020;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4019;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p29, .str.4);
    goto corral_source_split_4018;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4017;

  $bb9:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p28, $0.ref);
    goto corral_source_split_4015;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p11, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4014;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} dev_kfree_skb_any(out_$p27);
    goto corral_source_split_4013;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_4012;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p11, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4011;

  $bb8:
    assume out_$i25 == 1;
    goto corral_source_split_4010;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, 0);
    goto corral_source_split_4006;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_4005;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_4004;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p11, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4003;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} pci_dma_sync_single_for_cpu(out_$p16, out_$i14, out_$i19, out_$i21);
    goto corral_source_split_4002;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.0, out_$p20);
    goto corral_source_split_4001;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4000;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i32.i64(out_$i18);
    goto corral_source_split_3999;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.0, out_$p17);
    goto corral_source_split_3998;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_3997;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_3996;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3995;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} out_$i14 := rd_get_addr(out_$p11);
    call {:si_unique_call 852} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i14);
    goto corral_source_split_3994;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} rd_set_count(out_$p11, 0);
    goto corral_source_split_3993;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} rd_set_status(out_$p11, 0);
    goto corral_source_split_3992;

  $bb6:
    assume out_$i13 == 1;
    goto corral_source_split_3991;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    out_$i13 := $ne.i32(out_$i12, 0);
    goto corral_source_split_3989;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} out_$i12 := rd_is_active(out_$p11);
    call {:si_unique_call 848} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_3988;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb7:
    assume !(out_$i13 == 1);
    goto corral_source_split_4008;

  $bb25:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p84, out_$i82);
    goto corral_source_split_4091;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(24, 1));
    goto corral_source_split_4090;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    out_$i82 := $add.i64(out_$i80, out_$i81);
    goto corral_source_split_4089;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    out_$i81 := $sext.i32.i64(out_$i45);
    goto corral_source_split_4088;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i64($M.0, out_$p79);
    goto corral_source_split_4087;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(24, 1));
    goto corral_source_split_4086;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p77, out_$i75);
    goto corral_source_split_4085;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(8, 1));
    goto corral_source_split_4084;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    out_$i75 := $add.i64(out_$i74, 1);
    goto corral_source_split_4083;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i64($M.0, out_$p73);
    goto corral_source_split_4082;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(8, 1));
    goto corral_source_split_4081;

  $bb24:
    assume out_$i71 == 1;
    goto corral_source_split_4080;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    out_$i71 := $sgt.i32(out_$i45, 0);
    goto corral_source_split_4057;

  $bb16:
    assume !(out_$i47 == 1);
    goto corral_source_split_4056;

  $bb27_dummy:
    call {:si_unique_call 1} out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i46, out_$i45, out_$i47, out_$i48, out_$p50, out_$i51, out_$i52, out_$p54, out_$i55, out_$i56, out_$p58, out_$i59, out_$i60, out_$p62, out_$i63, out_$i64, out_$p66, out_$i67, out_$i68, out_$p70, out_$i71, out_$p73, out_$i74, out_$i75, out_$p77, out_$p79, out_$i80, out_$i81, out_$i82, out_$p84, out_$p85, out_$i86, out_$i87, out_$p11 := vlsi_unarm_tx_loop_$bb4(in_$p1, in_$p5, in_$p7, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i46, out_$i45, out_$i47, out_$i48, out_$p50, out_$i51, out_$i52, out_$p54, out_$i55, out_$i56, out_$p58, out_$i59, out_$i60, out_$p62, out_$i63, out_$i64, out_$p66, out_$i67, out_$i68, out_$p70, out_$i71, out_$p73, out_$i74, out_$i75, out_$p77, out_$p79, out_$i80, out_$i81, out_$i82, out_$p84, out_$p85, out_$i86, out_$i87, out_$p11);
    return;

  exit:
    return;
}



procedure vlsi_unarm_tx_loop_$bb4(in_$p1: ref, in_$p5: ref, in_$p7: ref, in_$i12: i32, in_$i13: i1, in_$i14: i64, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i64, in_$p20: ref, in_$i21: i32, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i24, in_$i36: i24, in_$i37: i24, in_$p38: ref, in_$p39: ref, in_$i40: i8, in_$i41: i64, in_$i42: i64, in_$i43: i64, in_$i44: i1, in_$i46: i32, in_$i45: i32, in_$i47: i1, in_$i48: i32, in_$p50: ref, in_$i51: i64, in_$i52: i64, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$p58: ref, in_$i59: i64, in_$i60: i64, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$p66: ref, in_$i67: i64, in_$i68: i64, in_$p70: ref, in_$i71: i1, in_$p73: ref, in_$i74: i64, in_$i75: i64, in_$p77: ref, in_$p79: ref, in_$i80: i64, in_$i81: i64, in_$i82: i64, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$i87: i1, in_$p11: ref) returns (out_$i12: i32, out_$i13: i1, out_$i14: i64, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i64, out_$p20: ref, out_$i21: i32, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i24, out_$i36: i24, out_$i37: i24, out_$p38: ref, out_$p39: ref, out_$i40: i8, out_$i41: i64, out_$i42: i64, out_$i43: i64, out_$i44: i1, out_$i46: i32, out_$i45: i32, out_$i47: i1, out_$i48: i32, out_$p50: ref, out_$i51: i64, out_$i52: i64, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$p58: ref, out_$i59: i64, out_$i60: i64, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$p66: ref, out_$i67: i64, out_$i68: i64, out_$p70: ref, out_$i71: i1, out_$p73: ref, out_$i74: i64, out_$i75: i64, out_$p77: ref, out_$p79: ref, out_$i80: i64, out_$i81: i64, out_$i82: i64, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$i87: i1, out_$p11: ref);
  modifies $M.0, $M.11, $M.10, $M.9, $M.8, $M.7, $M.6;



implementation vlsi_unarm_rx_loop_$bb4(in_$p1: ref, in_$p5: ref, in_$p7: ref, in_$i12: i32, in_$i13: i1, in_$i14: i16, in_$i15: i32, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i24, in_$i24: i24, in_$i25: i24, in_$p26: ref, in_$p27: ref, in_$i28: i8, in_$i29: i64, in_$i30: i64, in_$i31: i64, in_$i32: i1, in_$i33: i32, in_$i34: i64, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i32, in_$i39: i64, in_$p40: ref, in_$i41: i32, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i50: i32, in_$i49: i32, in_$i51: i1, in_$i52: i32, in_$p54: ref, in_$i55: i64, in_$i56: i64, in_$p58: ref, in_$i59: i32, in_$i60: i1, in_$p62: ref, in_$i63: i64, in_$i64: i64, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$p70: ref, in_$i71: i64, in_$i72: i64, in_$p74: ref, in_$i75: i32, in_$i76: i1, in_$p78: ref, in_$i79: i64, in_$i80: i64, in_$p82: ref, in_$i83: i32, in_$i84: i1, in_$p86: ref, in_$i87: i64, in_$i88: i64, in_$p90: ref, in_$i91: i32, in_$i92: i1, in_$p94: ref, in_$i95: i64, in_$i96: i64, in_$p98: ref, in_$i99: i1, in_$p101: ref, in_$i102: i64, in_$i103: i64, in_$p105: ref, in_$p107: ref, in_$i108: i64, in_$i109: i64, in_$i110: i64, in_$p112: ref, in_$p113: ref, in_$i114: i64, in_$i115: i1, in_$p11: ref) returns (out_$i12: i32, out_$i13: i1, out_$i14: i16, out_$i15: i32, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i24, out_$i24: i24, out_$i25: i24, out_$p26: ref, out_$p27: ref, out_$i28: i8, out_$i29: i64, out_$i30: i64, out_$i31: i64, out_$i32: i1, out_$i33: i32, out_$i34: i64, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i32, out_$i39: i64, out_$p40: ref, out_$i41: i32, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i50: i32, out_$i49: i32, out_$i51: i1, out_$i52: i32, out_$p54: ref, out_$i55: i64, out_$i56: i64, out_$p58: ref, out_$i59: i32, out_$i60: i1, out_$p62: ref, out_$i63: i64, out_$i64: i64, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$p70: ref, out_$i71: i64, out_$i72: i64, out_$p74: ref, out_$i75: i32, out_$i76: i1, out_$p78: ref, out_$i79: i64, out_$i80: i64, out_$p82: ref, out_$i83: i32, out_$i84: i1, out_$p86: ref, out_$i87: i64, out_$i88: i64, out_$p90: ref, out_$i91: i32, out_$i92: i1, out_$p94: ref, out_$i95: i64, out_$i96: i64, out_$p98: ref, out_$i99: i1, out_$p101: ref, out_$i102: i64, out_$i103: i64, out_$p105: ref, out_$p107: ref, out_$i108: i64, out_$i109: i64, out_$i110: i64, out_$p112: ref, out_$p113: ref, out_$i114: i64, out_$i115: i1, out_$p11: ref)
{

  entry:
    out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p48, out_$i50, out_$i49, out_$i51, out_$i52, out_$p54, out_$i55, out_$i56, out_$p58, out_$i59, out_$i60, out_$p62, out_$i63, out_$i64, out_$p66, out_$i67, out_$i68, out_$p70, out_$i71, out_$i72, out_$p74, out_$i75, out_$i76, out_$p78, out_$i79, out_$i80, out_$p82, out_$i83, out_$i84, out_$p86, out_$i87, out_$i88, out_$p90, out_$i91, out_$i92, out_$p94, out_$i95, out_$i96, out_$p98, out_$i99, out_$p101, out_$i102, out_$i103, out_$p105, out_$p107, out_$i108, out_$i109, out_$i110, out_$p112, out_$p113, out_$i114, out_$i115, out_$p11 := in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$p17, in_$p18, in_$p19, in_$p20, in_$p21, in_$p22, in_$i23, in_$i24, in_$i25, in_$p26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p35, in_$p36, in_$p37, in_$i38, in_$i39, in_$p40, in_$i41, in_$p42, in_$p43, in_$i44, in_$i45, in_$p46, in_$p47, in_$p48, in_$i50, in_$i49, in_$i51, in_$i52, in_$p54, in_$i55, in_$i56, in_$p58, in_$i59, in_$i60, in_$p62, in_$i63, in_$i64, in_$p66, in_$i67, in_$i68, in_$p70, in_$i71, in_$i72, in_$p74, in_$i75, in_$i76, in_$p78, in_$i79, in_$i80, in_$p82, in_$i83, in_$i84, in_$p86, in_$i87, in_$i88, in_$p90, in_$i91, in_$i92, in_$p94, in_$i95, in_$i96, in_$p98, in_$i99, in_$p101, in_$i102, in_$i103, in_$p105, in_$p107, in_$i108, in_$i109, in_$i110, in_$p112, in_$p113, in_$i114, in_$i115, in_$p11;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4108;

  $bb39:
    assume out_$i115 == 1;
    assume {:verifier.code 0} true;
    out_$p11 := out_$p113;
    goto $bb39_dummy;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    out_$i115 := $ne.i64(out_$i114, 0);
    goto corral_source_split_4236;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    out_$i114 := $p2i.ref.i64(out_$p113);
    goto corral_source_split_4235;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} out_$p113 := ring_get(in_$p7);
    goto corral_source_split_4234;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb33:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $M.22 := $store.i64($M.22, out_$p98, out_$i96);
    goto corral_source_split_4232;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(96, 1));
    goto corral_source_split_4231;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    out_$i96 := $add.i64(out_$i95, 1);
    goto corral_source_split_4230;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    out_$i95 := $load.i64($M.22, out_$p94);
    goto corral_source_split_4229;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(96, 1));
    goto corral_source_split_4228;

  $bb32:
    assume out_$i92 == 1;
    goto corral_source_split_4227;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    out_$i92 := $ne.i32(out_$i91, 0);
    goto corral_source_split_4225;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i91 := $and.i32(out_$i52, 4096);
    goto corral_source_split_4224;

  $bb30:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $M.21 := $store.i64($M.21, out_$p90, out_$i88);
    goto corral_source_split_4222;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(104, 1));
    goto corral_source_split_4221;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    out_$i88 := $add.i64(out_$i87, 1);
    goto corral_source_split_4220;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i64($M.21, out_$p86);
    goto corral_source_split_4219;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(104, 1));
    goto corral_source_split_4218;

  $bb29:
    assume out_$i84 == 1;
    goto corral_source_split_4217;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    out_$i84 := $ne.i32(out_$i83, 0);
    goto corral_source_split_4215;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i83 := $and.i32(out_$i52, 2048);
    goto corral_source_split_4214;

  $bb27:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $M.20 := $store.i64($M.20, out_$p82, out_$i80);
    goto corral_source_split_4212;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(80, 1));
    goto corral_source_split_4211;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    out_$i80 := $add.i64(out_$i79, 1);
    goto corral_source_split_4210;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    out_$i79 := $load.i64($M.20, out_$p78);
    goto corral_source_split_4209;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(80, 1));
    goto corral_source_split_4208;

  $bb26:
    assume out_$i76 == 1;
    goto corral_source_split_4207;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    out_$i76 := $ne.i32(out_$i75, 0);
    goto corral_source_split_4205;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i75 := $and.i32(out_$i52, 1024);
    goto corral_source_split_4204;

  $bb24:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $M.19 := $store.i64($M.19, out_$p74, out_$i72);
    goto corral_source_split_4202;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(88, 1));
    goto corral_source_split_4201;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    out_$i72 := $add.i64(out_$i71, 1);
    goto corral_source_split_4200;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i64($M.19, out_$p70);
    goto corral_source_split_4199;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(88, 1));
    goto corral_source_split_4198;

  $bb23:
    assume out_$i68 == 1;
    goto corral_source_split_4197;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    out_$i68 := $ne.i32(out_$i67, 0);
    goto corral_source_split_4195;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i67 := $and.i32(out_$i52, 512);
    goto corral_source_split_4194;

  $bb21:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $M.18 := $store.i64($M.18, out_$p66, out_$i64);
    goto corral_source_split_4192;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(48, 1));
    goto corral_source_split_4191;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    out_$i64 := $add.i64(out_$i63, 1);
    goto corral_source_split_4190;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i64($M.18, out_$p62);
    goto corral_source_split_4189;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(48, 1));
    goto corral_source_split_4188;

  $bb20:
    assume out_$i60 == 1;
    goto corral_source_split_4187;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i32(out_$i59, 0);
    goto corral_source_split_4182;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    out_$i59 := $and.i32(out_$i52, 256);
    goto corral_source_split_4181;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $M.17 := $store.i64($M.17, out_$p58, out_$i56);
    goto corral_source_split_4180;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(32, 1));
    goto corral_source_split_4179;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    out_$i56 := $add.i64(out_$i55, 1);
    goto corral_source_split_4178;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i64($M.17, out_$p54);
    goto corral_source_split_4177;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(32, 1));
    goto corral_source_split_4176;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    out_$i52 := $sub.i32(0, out_$i49);
    call {:si_unique_call 880} {:cexpr "ret"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_4175;

  $bb18:
    assume out_$i51 == 1;
    goto corral_source_split_4174;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    out_$i51 := $slt.i32(out_$i49, 0);
    goto corral_source_split_4172;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4171;

  SeqInstr_33:
    call {:si_unique_call 871} {:cexpr "ret"} boogie_si_record_i32(out_$i50);
    assume {:verifier.code 0} true;
    out_$i49 := out_$i50;
    goto $bb17;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i49 := out_$i33;
    goto $bb17;

  $bb15:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p48, $0.ref);
    goto corral_source_split_4169;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p11, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4168;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} dev_kfree_skb_any(out_$p47);
    goto corral_source_split_4167;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.0, out_$p46);
    goto corral_source_split_4166;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p11, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4165;

  $bb14:
    assume out_$i45 == 1;
    goto corral_source_split_4164;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i64(out_$i44, 0);
    goto corral_source_split_4162;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    out_$i44 := $p2i.ref.i64(out_$p43);
    goto corral_source_split_4161;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    goto corral_source_split_4160;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p11, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4159;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} pci_dma_sync_single_for_cpu(out_$p36, out_$i34, out_$i39, out_$i41);
    goto corral_source_split_4158;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i32($M.0, out_$p40);
    goto corral_source_split_4157;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4156;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i32.i64(out_$i38);
    goto corral_source_split_4155;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.0, out_$p37);
    goto corral_source_split_4154;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_4153;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.0, out_$p35);
    goto corral_source_split_4152;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4151;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} out_$i34 := rd_get_addr(out_$p11);
    call {:si_unique_call 877} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i34);
    goto corral_source_split_4150;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} rd_set_count(out_$p11, 0);
    goto corral_source_split_4149;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4148;

  $bb9:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    out_$i33 := 0;
    goto $bb13;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i33 := $sub.i32(0, 256);
    goto $bb13;

  $bb11:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} __dynamic_pr_debug.ref.ref.ref(in_$p1, .str.149, .str.148);
    goto corral_source_split_4146;

  $bb10:
    assume out_$i32 == 1;
    goto corral_source_split_4145;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i64(out_$i31, 0);
    goto corral_source_split_4143;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} out_$i31 := ldv__builtin_expect(out_$i30, 0);
    call {:si_unique_call 873} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i31);
    goto corral_source_split_4142;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    out_$i30 := $and.i64(out_$i29, 1);
    goto corral_source_split_4141;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i8.i64(out_$i28);
    goto corral_source_split_4140;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i8($M.11, out_$p27);
    goto corral_source_split_4139;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4138;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, out_$p26, 0);
    goto corral_source_split_4137;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4136;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, out_$p22, out_$i25);
    goto corral_source_split_4135;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    out_$i25 := $or.i24(out_$i24, 684);
    goto corral_source_split_4134;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    out_$i24 := $and.i24(out_$i23, $sub.i24(0, 262144));
    goto corral_source_split_4133;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i24($M.10, out_$p22);
    goto corral_source_split_4132;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(out_$p21);
    goto corral_source_split_4131;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4130;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, out_$p20, .str.149);
    goto corral_source_split_4129;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4128;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, out_$p19, .str.6);
    goto corral_source_split_4127;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4126;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, out_$p18, .str.148);
    goto corral_source_split_4125;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4124;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p17, .str.4);
    goto corral_source_split_4123;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4122;

  $bb8:
    assume out_$i16 == 1;
    goto corral_source_split_4121;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i32(out_$i15, 0);
    goto corral_source_split_4117;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i16.i32(out_$i14);
    goto corral_source_split_4116;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} out_$i14 := rd_get_count(out_$p11);
    call {:si_unique_call 869} {:cexpr "tmp___1"} boogie_si_record_i16(out_$i14);
    goto corral_source_split_4115;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} rd_set_status(out_$p11, 0);
    goto corral_source_split_4114;

  $bb6:
    assume out_$i13 == 1;
    goto corral_source_split_4113;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    out_$i13 := $ne.i32(out_$i12, 0);
    goto corral_source_split_4111;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} out_$i12 := rd_is_active(out_$p11);
    call {:si_unique_call 866} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_4110;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} out_$i50 := vlsi_process_rx(in_$p7, out_$p11);
    goto SeqInstr_32;

  $bb7:
    assume !(out_$i13 == 1);
    goto corral_source_split_4119;

  $bb37:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $M.24 := $store.i64($M.24, out_$p112, out_$i110);
    goto corral_source_split_4249;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(16, 1));
    goto corral_source_split_4248;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    out_$i110 := $add.i64(out_$i108, out_$i109);
    goto corral_source_split_4247;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    out_$i109 := $sext.i32.i64(out_$i49);
    goto corral_source_split_4246;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    out_$i108 := $load.i64($M.24, out_$p107);
    goto corral_source_split_4245;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(16, 1));
    goto corral_source_split_4244;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $M.23 := $store.i64($M.23, out_$p105, out_$i103);
    goto corral_source_split_4243;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_4242;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    out_$i103 := $add.i64(out_$i102, 1);
    goto corral_source_split_4241;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i64($M.23, out_$p101);
    goto corral_source_split_4240;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_4239;

  $bb36:
    assume out_$i99 == 1;
    goto corral_source_split_4238;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    out_$i99 := $sgt.i32(out_$i49, 0);
    goto corral_source_split_4185;

  $bb19:
    assume !(out_$i51 == 1);
    goto corral_source_split_4184;

  $bb39_dummy:
    call {:si_unique_call 1} out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p48, out_$i50, out_$i49, out_$i51, out_$i52, out_$p54, out_$i55, out_$i56, out_$p58, out_$i59, out_$i60, out_$p62, out_$i63, out_$i64, out_$p66, out_$i67, out_$i68, out_$p70, out_$i71, out_$i72, out_$p74, out_$i75, out_$i76, out_$p78, out_$i79, out_$i80, out_$p82, out_$i83, out_$i84, out_$p86, out_$i87, out_$i88, out_$p90, out_$i91, out_$i92, out_$p94, out_$i95, out_$i96, out_$p98, out_$i99, out_$p101, out_$i102, out_$i103, out_$p105, out_$p107, out_$i108, out_$i109, out_$i110, out_$p112, out_$p113, out_$i114, out_$i115, out_$p11 := vlsi_unarm_rx_loop_$bb4(in_$p1, in_$p5, in_$p7, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p48, out_$i50, out_$i49, out_$i51, out_$i52, out_$p54, out_$i55, out_$i56, out_$p58, out_$i59, out_$i60, out_$p62, out_$i63, out_$i64, out_$p66, out_$i67, out_$i68, out_$p70, out_$i71, out_$i72, out_$p74, out_$i75, out_$i76, out_$p78, out_$i79, out_$i80, out_$p82, out_$i83, out_$i84, out_$p86, out_$i87, out_$i88, out_$p90, out_$i91, out_$i92, out_$p94, out_$i95, out_$i96, out_$p98, out_$i99, out_$p101, out_$i102, out_$i103, out_$p105, out_$p107, out_$i108, out_$i109, out_$i110, out_$p112, out_$p113, out_$i114, out_$i115, out_$p11);
    return;

  exit:
    return;
}



procedure vlsi_unarm_rx_loop_$bb4(in_$p1: ref, in_$p5: ref, in_$p7: ref, in_$i12: i32, in_$i13: i1, in_$i14: i16, in_$i15: i32, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i24, in_$i24: i24, in_$i25: i24, in_$p26: ref, in_$p27: ref, in_$i28: i8, in_$i29: i64, in_$i30: i64, in_$i31: i64, in_$i32: i1, in_$i33: i32, in_$i34: i64, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i32, in_$i39: i64, in_$p40: ref, in_$i41: i32, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i50: i32, in_$i49: i32, in_$i51: i1, in_$i52: i32, in_$p54: ref, in_$i55: i64, in_$i56: i64, in_$p58: ref, in_$i59: i32, in_$i60: i1, in_$p62: ref, in_$i63: i64, in_$i64: i64, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$p70: ref, in_$i71: i64, in_$i72: i64, in_$p74: ref, in_$i75: i32, in_$i76: i1, in_$p78: ref, in_$i79: i64, in_$i80: i64, in_$p82: ref, in_$i83: i32, in_$i84: i1, in_$p86: ref, in_$i87: i64, in_$i88: i64, in_$p90: ref, in_$i91: i32, in_$i92: i1, in_$p94: ref, in_$i95: i64, in_$i96: i64, in_$p98: ref, in_$i99: i1, in_$p101: ref, in_$i102: i64, in_$i103: i64, in_$p105: ref, in_$p107: ref, in_$i108: i64, in_$i109: i64, in_$i110: i64, in_$p112: ref, in_$p113: ref, in_$i114: i64, in_$i115: i1, in_$p11: ref) returns (out_$i12: i32, out_$i13: i1, out_$i14: i16, out_$i15: i32, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i24, out_$i24: i24, out_$i25: i24, out_$p26: ref, out_$p27: ref, out_$i28: i8, out_$i29: i64, out_$i30: i64, out_$i31: i64, out_$i32: i1, out_$i33: i32, out_$i34: i64, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i32, out_$i39: i64, out_$p40: ref, out_$i41: i32, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i50: i32, out_$i49: i32, out_$i51: i1, out_$i52: i32, out_$p54: ref, out_$i55: i64, out_$i56: i64, out_$p58: ref, out_$i59: i32, out_$i60: i1, out_$p62: ref, out_$i63: i64, out_$i64: i64, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$p70: ref, out_$i71: i64, out_$i72: i64, out_$p74: ref, out_$i75: i32, out_$i76: i1, out_$p78: ref, out_$i79: i64, out_$i80: i64, out_$p82: ref, out_$i83: i32, out_$i84: i1, out_$p86: ref, out_$i87: i64, out_$i88: i64, out_$p90: ref, out_$i91: i32, out_$i92: i1, out_$p94: ref, out_$i95: i64, out_$i96: i64, out_$p98: ref, out_$i99: i1, out_$p101: ref, out_$i102: i64, out_$i103: i64, out_$p105: ref, out_$p107: ref, out_$i108: i64, out_$i109: i64, out_$i110: i64, out_$p112: ref, out_$p113: ref, out_$i114: i64, out_$i115: i1, out_$p11: ref);
  modifies $M.22, $M.21, $M.20, $M.19, $M.18, $M.17, $M.0, $M.11, $M.10, $M.9, $M.8, $M.7, $M.6, $CurrAddr, $M.3, $M.36, $M.38, $M.40, $M.42, $M.4, $M.23, $M.24, $M.37, $M.45, $M.39, $M.46, $M.41, $M.47, $M.43, $M.48, $M.5, assertsPassed;



implementation dma_sync_single_for_cpu_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_sync_single_for_cpu_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_sync_single_for_cpu_loop_$bb3();



implementation vlsi_free_ring_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$i21: i64, in_$p22: ref, in_$i23: i32, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i4: i32) returns (out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$i21: i64, out_$p22: ref, out_$i23: i32, out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i4: i32)
{

  entry:
    out_$p5, out_$p6, out_$i7, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p22, out_$i23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i4 := in_$p5, in_$p6, in_$i7, in_$p8, in_$p9, in_$p10, in_$i11, in_$i12, in_$p13, in_$p14, in_$i15, in_$i16, in_$p17, in_$p18, in_$p19, in_$i20, in_$i21, in_$p22, in_$i23, in_$p24, in_$p25, in_$i26, in_$i27, in_$i28, in_$i4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5505;

  $bb12:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i26;
    goto $bb12_dummy;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    out_$i28 := $ugt.i32(out_$i27, out_$i26);
    goto corral_source_split_5540;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.0, in_$p1);
    goto corral_source_split_5539;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    out_$i26 := $add.i32(out_$i4, 1);
    call {:si_unique_call 1222} {:cexpr "i"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_5538;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} kfree(out_$p25);
    goto corral_source_split_5537;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_5536;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 24)), $mul.ref(16, 1));
    goto corral_source_split_5535;

  $bb10:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} pci_unmap_single(out_$p18, out_$i15, out_$i21, out_$i23);
    goto corral_source_split_5533;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.0, out_$p22);
    goto corral_source_split_5532;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5531;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i32.i64(out_$i20);
    goto corral_source_split_5530;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.0, out_$p19);
    goto corral_source_split_5529;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_5528;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_5527;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5526;

  $bb9:
    assume out_$i16 == 1;
    goto corral_source_split_5525;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_5523;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} rd_set_addr_status(out_$p8, 0, 0);
    goto corral_source_split_5522;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} out_$i15 := rd_get_addr(out_$p8);
    call {:si_unique_call 1218} {:cexpr "busaddr"} boogie_si_record_i64(out_$i15);
    goto corral_source_split_5521;

  $bb7:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} dev_kfree_skb_any(out_$p14);
    goto corral_source_split_5519;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_5518;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 24)), $mul.ref(8, 1));
    goto corral_source_split_5517;

  $bb6:
    assume out_$i12 == 1;
    goto corral_source_split_5516;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    out_$i12 := $ne.i64(out_$i11, 0);
    goto corral_source_split_5514;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    out_$i11 := $p2i.ref.i64(out_$p10);
    goto corral_source_split_5513;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_5512;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 24)), $mul.ref(8, 1));
    goto corral_source_split_5511;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref(out_$p6, $mul.ref(out_$i7, 24));
    goto corral_source_split_5510;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    out_$i7 := $zext.i32.i64(out_$i4);
    goto corral_source_split_5509;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    out_$p6 := $load.ref($M.0, out_$p5);
    goto corral_source_split_5508;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref(in_$p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5507;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p5, out_$p6, out_$i7, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p22, out_$i23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i4 := vlsi_free_ring_loop_$bb4(in_$p0, in_$p1, out_$p5, out_$p6, out_$i7, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p22, out_$i23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i4);
    return;

  exit:
    return;
}



procedure vlsi_free_ring_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$i21: i64, in_$p22: ref, in_$i23: i32, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i4: i32) returns (out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$i21: i64, out_$p22: ref, out_$i23: i32, out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i4: i32);
  modifies $M.0;



implementation dma_unmap_single_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_unmap_single_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_unmap_single_attrs_loop_$bb3();



implementation vlsi_interrupt_loop_$bb4(in_$p2: ref, in_$i7: i32, in_$i20: i32, in_$i21: i32, in_$i22: i8, in_$i23: i32, in_$i24: i8, in_$i25: i32, in_$i26: i32, in_$i27: i8, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i32, in_$i18: i8, in_$i19: i32, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i64, in_$i39: i64, in_$i40: i1, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$i48: i32, in_$i49: i1, in_$i50: i32) returns (out_$i20: i32, out_$i21: i32, out_$i22: i8, out_$i23: i32, out_$i24: i8, out_$i25: i32, out_$i26: i32, out_$i27: i8, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i32, out_$i18: i8, out_$i19: i32, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i64, out_$i39: i64, out_$i40: i1, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$i48: i32, out_$i49: i1, out_$i50: i32)
{

  entry:
    out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i18, out_$i19, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50 := in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i18, in_$i19, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb7:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    out_$i18, out_$i19 := out_$i27, out_$i20;
    goto $bb7_dummy;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    out_$i30, out_$i31 := out_$i20, out_$i21;
    assume true;
    goto $bb7;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i28, 0);
    goto corral_source_split_5660;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i8.i32(out_$i27);
    goto corral_source_split_5659;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    out_$i27 := $trunc.i32.i8(out_$i26);
    call {:si_unique_call 1274} {:cexpr "irintr"} boogie_si_record_i8(out_$i27);
    goto corral_source_split_5658;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    out_$i26 := $and.i32(out_$i25, 84);
    goto corral_source_split_5657;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i8.i32(out_$i22);
    goto corral_source_split_5656;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} outb(out_$i24, in_$i7);
    goto corral_source_split_5655;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    out_$i24 := $trunc.i32.i8(out_$i23);
    goto corral_source_split_5654;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i8.i32(out_$i22);
    goto corral_source_split_5653;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} out_$i22 := inb(in_$i7);
    call {:si_unique_call 1271} {:cexpr "irintr"} boogie_si_record_i8(out_$i22);
    call {:si_unique_call 1272} devirtbounce(0);
    goto corral_source_split_5652;

  $bb5:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5651;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    out_$i20, out_$i21, out_$i50 := out_$i48, 1, out_$i48;
    assume true;
    goto $bb5;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    out_$i49 := $sgt.i32(out_$i48, 0);
    goto corral_source_split_5694;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i48 := $sub.i32(out_$i19, 1);
    call {:si_unique_call 1280} {:cexpr "boguscount"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_5693;

  $bb17:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} vlsi_tx_interrupt(in_$p2);
    goto corral_source_split_5691;

  $bb16:
    assume out_$i47 == 1;
    goto corral_source_split_5690;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i32(out_$i46, 0);
    goto corral_source_split_5688;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    out_$i46 := $and.i32(out_$i45, 4);
    goto corral_source_split_5687;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i8.i32(out_$i18);
    goto corral_source_split_5686;

  $bb14:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_57:
    goto corral_source_split_5684;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} vlsi_rx_interrupt(in_$p2);
    goto SeqInstr_56;

  $bb13:
    assume out_$i44 == 1;
    goto corral_source_split_5683;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i32(out_$i43, 0);
    goto corral_source_split_5681;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    out_$i43 := $and.i32(out_$i42, 16);
    goto corral_source_split_5680;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i8.i32(out_$i18);
    goto corral_source_split_5679;

  $bb11:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    out_$i41 := out_$i19;
    assume true;
    goto $bb11;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i64(out_$i39, 0);
    goto corral_source_split_5675;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} out_$i39 := ldv__builtin_expect(out_$i38, 0);
    call {:si_unique_call 1277} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i39);
    goto corral_source_split_5674;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i32.i64(out_$i37);
    goto corral_source_split_5673;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i1.i32(out_$i36);
    goto corral_source_split_5672;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i35, 0);
    goto corral_source_split_5671;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    out_$i35 := $and.i32(out_$i34, $sub.i32(0, 65));
    goto corral_source_split_5670;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i8.i32(out_$i18);
    goto corral_source_split_5669;

  $bb7_dummy:
    call {:si_unique_call 1} out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i18, out_$i19, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50 := vlsi_interrupt_loop_$bb4(in_$p2, in_$i7, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i18, out_$i19, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50);
    return;

  exit:
    return;
}



procedure vlsi_interrupt_loop_$bb4(in_$p2: ref, in_$i7: i32, in_$i20: i32, in_$i21: i32, in_$i22: i8, in_$i23: i32, in_$i24: i8, in_$i25: i32, in_$i26: i32, in_$i27: i8, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i32, in_$i18: i8, in_$i19: i32, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i64, in_$i39: i64, in_$i40: i1, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$i48: i32, in_$i49: i1, in_$i50: i32) returns (out_$i20: i32, out_$i21: i32, out_$i22: i8, out_$i23: i32, out_$i24: i8, out_$i25: i32, out_$i26: i32, out_$i27: i8, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i32, out_$i18: i8, out_$i19: i32, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i64, out_$i39: i64, out_$i40: i1, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$i48: i32, out_$i49: i1, out_$i50: i32);
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr, $M.3, $M.36, $M.38, $M.40, $M.42, $M.4, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.37, $M.45, $M.39, $M.46, $M.41, $M.47, $M.43, $M.48, $M.5, assertsPassed;



implementation vlsi_alloc_ring_loop_$bb30(in_$p0: ref, in_$i3: i32, in_$i4: i32, in_$p14: ref, in_$i48: i32, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$p74: ref, in_$i75: i64, in_$i76: i1, in_$i77: i64, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$i81: i32, in_$i82: i1, in_$i70: i32) returns (out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$p74: ref, out_$i75: i64, out_$i76: i1, out_$i77: i64, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$i81: i32, out_$i82: i1, out_$i70: i32)
{

  entry:
    out_$p71, out_$p72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i77, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i70 := in_$p71, in_$p72, in_$i73, in_$p74, in_$i75, in_$i76, in_$i77, in_$p78, in_$p79, in_$p80, in_$i81, in_$i82, in_$i70;
    goto $bb30, exit;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_5902;

  $bb35:
    assume out_$i82 == 1;
    assume {:verifier.code 0} true;
    out_$i70 := out_$i81;
    goto $bb35_dummy;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    out_$i82 := $ult.i32(out_$i81, in_$i48);
    goto corral_source_split_5922;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    out_$i81 := $add.i32(out_$i70, 1);
    call {:si_unique_call 1322} {:cexpr "j"} boogie_si_record_i32(out_$i81);
    goto corral_source_split_5921;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p80, $0.ref);
    goto corral_source_split_5920;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p72, $mul.ref(out_$i73, 24)), $mul.ref(16, 1));
    goto corral_source_split_5919;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} kfree(out_$p79);
    goto corral_source_split_5918;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    out_$p79 := $load.ref($M.0, out_$p78);
    goto corral_source_split_5917;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(out_$p72, $mul.ref(out_$i73, 24)), $mul.ref(16, 1));
    goto corral_source_split_5916;

  $bb33:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} pci_unmap_single(in_$p0, out_$i75, out_$i77, in_$i4);
    goto corral_source_split_5914;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    out_$i77 := $zext.i32.i64(in_$i3);
    goto corral_source_split_5913;

  $bb32:
    assume out_$i76 == 1;
    goto corral_source_split_5912;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    out_$i76 := $ne.i64(out_$i75, 0);
    goto corral_source_split_5910;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} rd_set_addr_status(out_$p74, 0, 0);
    goto corral_source_split_5909;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} out_$i75 := rd_get_addr(out_$p74);
    call {:si_unique_call 1318} {:cexpr "busaddr"} boogie_si_record_i64(out_$i75);
    goto corral_source_split_5908;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref(out_$p72, $mul.ref(out_$i73, 24));
    goto corral_source_split_5907;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    out_$i73 := $zext.i32.i64(out_$i70);
    goto corral_source_split_5906;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.0, out_$p71);
    goto corral_source_split_5905;

  $bb31:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(in_$p14, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5904;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb35_dummy:
    call {:si_unique_call 1} out_$p71, out_$p72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i77, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i70 := vlsi_alloc_ring_loop_$bb30(in_$p0, in_$i3, in_$i4, in_$p14, in_$i48, out_$p71, out_$p72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i77, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i70);
    return;

  exit:
    return;
}



procedure vlsi_alloc_ring_loop_$bb30(in_$p0: ref, in_$i3: i32, in_$i4: i32, in_$p14: ref, in_$i48: i32, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$p74: ref, in_$i75: i64, in_$i76: i1, in_$i77: i64, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$i81: i32, in_$i82: i1, in_$i70: i32) returns (out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$p74: ref, out_$i75: i64, out_$i76: i1, out_$i77: i64, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$i81: i32, out_$i82: i1, out_$i70: i32);
  modifies $M.0;



implementation vlsi_alloc_ring_loop_$bb14(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i3: i32, in_$i4: i32, in_$p14: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$i46: i32, in_$p47: ref, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$i53: i64, in_$i54: i1, in_$i55: i32, in_$p56: ref, in_$p84: ref, in_$i85: i32, in_$i86: i1, in_$i30: i32, in_cmdloc_dummy_var_20: [ref]i8, in_cmdloc_dummy_var_21: [ref]i8) returns (out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$i46: i32, out_$p47: ref, out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$i53: i64, out_$i54: i1, out_$i55: i32, out_$p56: ref, out_$p84: ref, out_$i85: i32, out_$i86: i1, out_$i30: i32, out_cmdloc_dummy_var_20: [ref]i8, out_cmdloc_dummy_var_21: [ref]i8)
{

  entry:
    out_$p31, out_$p32, out_$i33, out_$p34, out_$p35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$p84, out_$i85, out_$i86, out_$i30, out_cmdloc_dummy_var_20, out_cmdloc_dummy_var_21 := in_$p31, in_$p32, in_$i33, in_$p34, in_$p35, in_$i36, in_$p37, in_$p38, in_$i39, in_$p40, in_$p41, in_$p42, in_$p43, in_$i44, in_$i45, in_$i46, in_$p47, in_$p50, in_$p51, in_$i52, in_$i53, in_$i54, in_$i55, in_$p56, in_$p84, in_$i85, in_$i86, in_$i30, in_cmdloc_dummy_var_20, in_cmdloc_dummy_var_21;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_5845;

  $bb40:
    assume out_$i86 == 1;
    assume {:verifier.code 0} true;
    out_$i30 := out_$i85;
    goto $bb40_dummy;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    out_$i86 := $ult.i32(out_$i85, in_$i2);
    goto corral_source_split_5933;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    out_$i85 := $add.i32(out_$i30, 1);
    call {:si_unique_call 1325} {:cexpr "i"} boogie_si_record_i32(out_$i85);
    goto corral_source_split_5932;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p84, $0.ref);
    goto corral_source_split_5931;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(out_$p32, $mul.ref(out_$i33, 24)), $mul.ref(8, 1));
    goto corral_source_split_5930;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} rd_set_addr_status(out_$p34, out_$i53, 0);
    goto corral_source_split_5929;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb20:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    out_$i55, out_$p56 := out_$i30, out_$p34;
    assume true;
    goto $bb20;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i64(out_$i53, 0);
    goto corral_source_split_5873;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} out_$i53 := pci_map_single(in_$p0, out_$p51, out_$i52, in_$i4);
    call {:si_unique_call 1312} {:cexpr "busaddr"} boogie_si_record_i64(out_$i53);
    goto corral_source_split_5872;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    out_$i52 := $zext.i32.i64(in_$i3);
    goto corral_source_split_5871;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.0, out_$p50);
    goto corral_source_split_5870;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p32, $mul.ref(out_$i33, 24)), $mul.ref(16, 1));
    goto corral_source_split_5869;

  $bb17:
    assume !(out_$i45 == 1);
    goto corral_source_split_5868;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    out_$i46, out_$p47 := out_$i30, out_$p34;
    assume true;
    goto $bb17;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i64(out_$i44, 0);
    goto corral_source_split_5864;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    out_$i44 := $p2i.ref.i64(out_$p43);
    goto corral_source_split_5863;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    goto corral_source_split_5862;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p32, $mul.ref(out_$i33, 24)), $mul.ref(16, 1));
    goto corral_source_split_5861;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p41, out_$p40);
    goto corral_source_split_5860;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p32, $mul.ref(out_$i33, 24)), $mul.ref(16, 1));
    goto corral_source_split_5859;

  SeqInstr_75:
    goto corral_source_split_5858;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} out_$p40 := kmalloc(out_$i39, 209);
    goto SeqInstr_74;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i32.i64(in_$i3);
    goto corral_source_split_5857;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p38, out_$p37);
    goto corral_source_split_5856;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p32, $mul.ref(out_$i33, 24)), $mul.ref(0, 1));
    goto corral_source_split_5855;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref(in_$p1, $mul.ref(out_$i36, 8));
    goto corral_source_split_5854;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i32.i64(out_$i30);
    goto corral_source_split_5853;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_20 := $M.0;
    call {:si_unique_call 1309} out_cmdloc_dummy_var_21 := $memset.i8(out_cmdloc_dummy_var_20, out_$p35, 0, 24, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_21;
    goto corral_source_split_5852;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(out_$p34);
    goto corral_source_split_5851;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref(out_$p32, $mul.ref(out_$i33, 24));
    goto corral_source_split_5850;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    out_$i33 := $zext.i32.i64(out_$i30);
    goto corral_source_split_5849;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_5848;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p14, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5847;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb40_dummy:
    call {:si_unique_call 1} out_$p31, out_$p32, out_$i33, out_$p34, out_$p35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$p84, out_$i85, out_$i86, out_$i30, out_cmdloc_dummy_var_20, out_cmdloc_dummy_var_21 := vlsi_alloc_ring_loop_$bb14(in_$p0, in_$p1, in_$i2, in_$i3, in_$i4, in_$p14, out_$p31, out_$p32, out_$i33, out_$p34, out_$p35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$p84, out_$i85, out_$i86, out_$i30, out_cmdloc_dummy_var_20, out_cmdloc_dummy_var_21);
    return;

  exit:
    return;
}



procedure vlsi_alloc_ring_loop_$bb14(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i3: i32, in_$i4: i32, in_$p14: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$i46: i32, in_$p47: ref, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$i53: i64, in_$i54: i1, in_$i55: i32, in_$p56: ref, in_$p84: ref, in_$i85: i32, in_$i86: i1, in_$i30: i32, in_cmdloc_dummy_var_20: [ref]i8, in_cmdloc_dummy_var_21: [ref]i8) returns (out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$i46: i32, out_$p47: ref, out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$i53: i64, out_$i54: i1, out_$i55: i32, out_$p56: ref, out_$p84: ref, out_$i85: i32, out_$i86: i1, out_$i30: i32, out_cmdloc_dummy_var_20: [ref]i8, out_cmdloc_dummy_var_21: [ref]i8);
  modifies $M.0, assertsPassed;



implementation dma_map_single_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_map_single_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_map_single_attrs_loop_$bb3();



implementation vlsi_rx_interrupt_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i13: i1, in_$i14: i32, in_$p16: ref, in_$i17: i64, in_$i18: i64, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$p24: ref, in_$i25: i64, in_$i26: i64, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$p32: ref, in_$i33: i64, in_$i34: i64, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$p40: ref, in_$i41: i64, in_$i42: i64, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$p48: ref, in_$i49: i64, in_$i50: i64, in_$p52: ref, in_$i53: i32, in_$i54: i1, in_$p56: ref, in_$i57: i64, in_$i58: i64, in_$p60: ref, in_$i61: i1, in_$p63: ref, in_$i64: i64, in_$i65: i64, in_$p67: ref, in_$p69: ref, in_$i70: i64, in_$i71: i64, in_$i72: i64, in_$p74: ref, in_$p75: ref, in_$i76: i64, in_$i77: i1, in_$p9: ref) returns (out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i13: i1, out_$i14: i32, out_$p16: ref, out_$i17: i64, out_$i18: i64, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$p24: ref, out_$i25: i64, out_$i26: i64, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$p32: ref, out_$i33: i64, out_$i34: i64, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$p40: ref, out_$i41: i64, out_$i42: i64, out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$p48: ref, out_$i49: i64, out_$i50: i64, out_$p52: ref, out_$i53: i32, out_$i54: i1, out_$p56: ref, out_$i57: i64, out_$i58: i64, out_$p60: ref, out_$i61: i1, out_$p63: ref, out_$i64: i64, out_$i65: i64, out_$p67: ref, out_$p69: ref, out_$i70: i64, out_$i71: i64, out_$i72: i64, out_$p74: ref, out_$p75: ref, out_$i76: i64, out_$i77: i1, out_$p9: ref)
{

  entry:
    out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p16, out_$i17, out_$i18, out_$p20, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$p28, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$p36, out_$i37, out_$i38, out_$p40, out_$i41, out_$i42, out_$p44, out_$i45, out_$i46, out_$p48, out_$i49, out_$i50, out_$p52, out_$i53, out_$i54, out_$p56, out_$i57, out_$i58, out_$p60, out_$i61, out_$p63, out_$i64, out_$i65, out_$p67, out_$p69, out_$i70, out_$i71, out_$i72, out_$p74, out_$p75, out_$i76, out_$i77, out_$p9 := in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$p16, in_$i17, in_$i18, in_$p20, in_$i21, in_$i22, in_$p24, in_$i25, in_$i26, in_$p28, in_$i29, in_$i30, in_$p32, in_$i33, in_$i34, in_$p36, in_$i37, in_$i38, in_$p40, in_$i41, in_$i42, in_$p44, in_$i45, in_$i46, in_$p48, in_$i49, in_$i50, in_$p52, in_$i53, in_$i54, in_$p56, in_$i57, in_$i58, in_$p60, in_$i61, in_$p63, in_$i64, in_$i65, in_$p67, in_$p69, in_$i70, in_$i71, in_$i72, in_$p74, in_$p75, in_$i76, in_$i77, in_$p9;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_6051;

  $bb31:
    assume out_$i77 == 1;
    assume {:verifier.code 0} true;
    out_$p9 := out_$p75;
    goto $bb31_dummy;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    out_$i77 := $ne.i64(out_$i76, 0);
    goto corral_source_split_6135;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    out_$i76 := $p2i.ref.i64(out_$p75);
    goto corral_source_split_6134;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} out_$p75 := ring_get(in_$p5);
    goto corral_source_split_6133;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb25:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p60, out_$i58);
    goto corral_source_split_6131;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(96, 1));
    goto corral_source_split_6130;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    out_$i58 := $add.i64(out_$i57, 1);
    goto corral_source_split_6129;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i64($M.0, out_$p56);
    goto corral_source_split_6128;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(96, 1));
    goto corral_source_split_6127;

  $bb24:
    assume out_$i54 == 1;
    goto corral_source_split_6126;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i32(out_$i53, 0);
    goto corral_source_split_6124;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i53 := $and.i32(out_$i14, 4096);
    goto corral_source_split_6123;

  $bb22:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p52, out_$i50);
    goto corral_source_split_6121;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(104, 1));
    goto corral_source_split_6120;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    out_$i50 := $add.i64(out_$i49, 1);
    goto corral_source_split_6119;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i64($M.0, out_$p48);
    goto corral_source_split_6118;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(104, 1));
    goto corral_source_split_6117;

  $bb21:
    assume out_$i46 == 1;
    goto corral_source_split_6116;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i32(out_$i45, 0);
    goto corral_source_split_6114;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i45 := $and.i32(out_$i14, 2048);
    goto corral_source_split_6113;

  $bb19:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p44, out_$i42);
    goto corral_source_split_6111;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(80, 1));
    goto corral_source_split_6110;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    out_$i42 := $add.i64(out_$i41, 1);
    goto corral_source_split_6109;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i64($M.0, out_$p40);
    goto corral_source_split_6108;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(80, 1));
    goto corral_source_split_6107;

  $bb18:
    assume out_$i38 == 1;
    goto corral_source_split_6106;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i32(out_$i37, 0);
    goto corral_source_split_6104;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i37 := $and.i32(out_$i14, 1024);
    goto corral_source_split_6103;

  $bb16:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p36, out_$i34);
    goto corral_source_split_6101;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(88, 1));
    goto corral_source_split_6100;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i64(out_$i33, 1);
    goto corral_source_split_6099;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i64($M.0, out_$p32);
    goto corral_source_split_6098;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(88, 1));
    goto corral_source_split_6097;

  $bb15:
    assume out_$i30 == 1;
    goto corral_source_split_6096;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i29, 0);
    goto corral_source_split_6094;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i29 := $and.i32(out_$i14, 512);
    goto corral_source_split_6093;

  $bb13:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p28, out_$i26);
    goto corral_source_split_6091;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(48, 1));
    goto corral_source_split_6090;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    out_$i26 := $add.i64(out_$i25, 1);
    goto corral_source_split_6089;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i64($M.0, out_$p24);
    goto corral_source_split_6088;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(48, 1));
    goto corral_source_split_6087;

  $bb12:
    assume out_$i22 == 1;
    goto corral_source_split_6086;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i21, 0);
    goto corral_source_split_6081;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    out_$i21 := $and.i32(out_$i14, 256);
    goto corral_source_split_6080;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p20, out_$i18);
    goto corral_source_split_6079;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(32, 1));
    goto corral_source_split_6078;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i64(out_$i17, 1);
    goto corral_source_split_6077;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i64($M.0, out_$p16);
    goto corral_source_split_6076;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(32, 1));
    goto corral_source_split_6075;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    out_$i14 := $sub.i32(0, out_$i12);
    call {:si_unique_call 1391} {:cexpr "ret"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_6074;

  $bb10:
    assume out_$i13 == 1;
    goto corral_source_split_6073;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    out_$i13 := $slt.i32(out_$i12, 0);
    goto corral_source_split_6071;

  SeqInstr_87:
    call {:si_unique_call 1390} {:cexpr "ret"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_6070;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} out_$i12 := vlsi_process_rx(in_$p5, out_$p9);
    goto SeqInstr_86;

  $bb7:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i32(out_$i10, 0);
    goto corral_source_split_6054;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} out_$i10 := rd_is_active(out_$p9);
    call {:si_unique_call 1384} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_6053;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb29:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p74, out_$i72);
    goto corral_source_split_6148;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(16, 1));
    goto corral_source_split_6147;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    out_$i72 := $add.i64(out_$i70, out_$i71);
    goto corral_source_split_6146;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    out_$i71 := $sext.i32.i64(out_$i12);
    goto corral_source_split_6145;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i64($M.0, out_$p69);
    goto corral_source_split_6144;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(16, 1));
    goto corral_source_split_6143;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p67, out_$i65);
    goto corral_source_split_6142;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_6141;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    out_$i65 := $add.i64(out_$i64, 1);
    goto corral_source_split_6140;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i64($M.0, out_$p63);
    goto corral_source_split_6139;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_6138;

  $bb28:
    assume out_$i61 == 1;
    goto corral_source_split_6137;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    out_$i61 := $sgt.i32(out_$i12, 0);
    goto corral_source_split_6084;

  $bb11:
    assume !(out_$i13 == 1);
    goto corral_source_split_6083;

  $bb31_dummy:
    call {:si_unique_call 1} out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p16, out_$i17, out_$i18, out_$p20, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$p28, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$p36, out_$i37, out_$i38, out_$p40, out_$i41, out_$i42, out_$p44, out_$i45, out_$i46, out_$p48, out_$i49, out_$i50, out_$p52, out_$i53, out_$i54, out_$p56, out_$i57, out_$i58, out_$p60, out_$i61, out_$p63, out_$i64, out_$i65, out_$p67, out_$p69, out_$i70, out_$i71, out_$i72, out_$p74, out_$p75, out_$i76, out_$i77, out_$p9 := vlsi_rx_interrupt_loop_$bb4(in_$p0, in_$p5, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p16, out_$i17, out_$i18, out_$p20, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$p28, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$p36, out_$i37, out_$i38, out_$p40, out_$i41, out_$i42, out_$p44, out_$i45, out_$i46, out_$p48, out_$i49, out_$i50, out_$p52, out_$i53, out_$i54, out_$p56, out_$i57, out_$i58, out_$p60, out_$i61, out_$p63, out_$i64, out_$i65, out_$p67, out_$p69, out_$i70, out_$i71, out_$i72, out_$p74, out_$p75, out_$i76, out_$i77, out_$p9);
    return;

  exit:
    return;
}



procedure vlsi_rx_interrupt_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i13: i1, in_$i14: i32, in_$p16: ref, in_$i17: i64, in_$i18: i64, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$p24: ref, in_$i25: i64, in_$i26: i64, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$p32: ref, in_$i33: i64, in_$i34: i64, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$p40: ref, in_$i41: i64, in_$i42: i64, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$p48: ref, in_$i49: i64, in_$i50: i64, in_$p52: ref, in_$i53: i32, in_$i54: i1, in_$p56: ref, in_$i57: i64, in_$i58: i64, in_$p60: ref, in_$i61: i1, in_$p63: ref, in_$i64: i64, in_$i65: i64, in_$p67: ref, in_$p69: ref, in_$i70: i64, in_$i71: i64, in_$i72: i64, in_$p74: ref, in_$p75: ref, in_$i76: i64, in_$i77: i1, in_$p9: ref) returns (out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i13: i1, out_$i14: i32, out_$p16: ref, out_$i17: i64, out_$i18: i64, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$p24: ref, out_$i25: i64, out_$i26: i64, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$p32: ref, out_$i33: i64, out_$i34: i64, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$p40: ref, out_$i41: i64, out_$i42: i64, out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$p48: ref, out_$i49: i64, out_$i50: i64, out_$p52: ref, out_$i53: i32, out_$i54: i1, out_$p56: ref, out_$i57: i64, out_$i58: i64, out_$p60: ref, out_$i61: i1, out_$p63: ref, out_$i64: i64, out_$i65: i64, out_$p67: ref, out_$p69: ref, out_$i70: i64, out_$i71: i64, out_$i72: i64, out_$p74: ref, out_$p75: ref, out_$i76: i64, out_$i77: i1, out_$p9: ref);
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr, $M.3, $M.36, $M.38, $M.40, $M.42, $M.4, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.37, $M.45, $M.39, $M.46, $M.41, $M.47, $M.43, $M.48, $M.5, assertsPassed;



implementation vlsi_tx_interrupt_loop_$bb4(in_$p0: ref, in_$p6: ref, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$p20: ref, in_$i21: i64, in_$i22: i64, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$p28: ref, in_$i29: i64, in_$i30: i64, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$p36: ref, in_$i37: i64, in_$i38: i64, in_$p40: ref, in_$i41: i1, in_$p43: ref, in_$i44: i64, in_$i45: i64, in_$p47: ref, in_$p49: ref, in_$i50: i64, in_$i51: i64, in_$i52: i64, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$p11: ref, in_$p58: ref) returns (out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$p20: ref, out_$i21: i64, out_$i22: i64, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$p28: ref, out_$i29: i64, out_$i30: i64, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$p36: ref, out_$i37: i64, out_$i38: i64, out_$p40: ref, out_$i41: i1, out_$p43: ref, out_$i44: i64, out_$i45: i64, out_$p47: ref, out_$p49: ref, out_$i50: i64, out_$i51: i64, out_$i52: i64, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$p11: ref, out_$p58: ref)
{

  entry:
    out_$i12, out_$i13, out_$p14, out_$i16, out_$i17, out_$i18, out_$p20, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$p28, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$p36, out_$i37, out_$i38, out_$p40, out_$i41, out_$p43, out_$i44, out_$i45, out_$p47, out_$p49, out_$i50, out_$i51, out_$i52, out_$p54, out_$p55, out_$i56, out_$i57, out_$p11, out_$p58 := in_$i12, in_$i13, in_$p14, in_$i16, in_$i17, in_$i18, in_$p20, in_$i21, in_$i22, in_$p24, in_$i25, in_$i26, in_$p28, in_$i29, in_$i30, in_$p32, in_$i33, in_$i34, in_$p36, in_$i37, in_$i38, in_$p40, in_$i41, in_$p43, in_$i44, in_$i45, in_$p47, in_$p49, in_$i50, in_$i51, in_$i52, in_$p54, in_$p55, in_$i56, in_$i57, in_$p11, in_$p58;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_6178;

  $bb22:
    assume out_$i57 == 1;
    assume {:verifier.code 0} true;
    out_$p11 := out_$p55;
    goto $bb22_dummy;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    out_$p58 := out_$p55;
    assume true;
    goto $bb22;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i64(out_$i56, 0);
    goto corral_source_split_6228;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    out_$i56 := $p2i.ref.i64(out_$p55);
    goto corral_source_split_6227;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} out_$p55 := ring_get(in_$p6);
    goto corral_source_split_6226;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p40, out_$i38);
    goto corral_source_split_6224;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(144, 1));
    goto corral_source_split_6223;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i64(out_$i37, 1);
    goto corral_source_split_6222;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i64($M.0, out_$p36);
    goto corral_source_split_6221;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(144, 1));
    goto corral_source_split_6220;

  $bb15:
    assume out_$i34 == 1;
    goto corral_source_split_6219;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i32(out_$i33, 0);
    goto corral_source_split_6217;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i33 := $and.i32(out_$i18, 2);
    goto corral_source_split_6216;

  $bb13:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p32, out_$i30);
    goto corral_source_split_6214;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6213;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i64(out_$i29, 1);
    goto corral_source_split_6212;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i64($M.0, out_$p28);
    goto corral_source_split_6211;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6210;

  $bb12:
    assume out_$i26 == 1;
    goto corral_source_split_6209;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i32(out_$i25, 0);
    goto corral_source_split_6204;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    out_$i25 := $and.i32(out_$i18, 1);
    goto corral_source_split_6203;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p24, out_$i22);
    goto corral_source_split_6202;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(40, 1));
    goto corral_source_split_6201;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i64(out_$i21, 1);
    goto corral_source_split_6200;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i64($M.0, out_$p20);
    goto corral_source_split_6199;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(40, 1));
    goto corral_source_split_6198;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    out_$i18 := $sub.i32(0, out_$i16);
    call {:si_unique_call 1407} {:cexpr "ret"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_6197;

  $bb10:
    assume out_$i17 == 1;
    goto corral_source_split_6196;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    out_$i17 := $slt.i32(out_$i16, 0);
    goto corral_source_split_6194;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} out_$i16 := vlsi_process_tx(in_$p6, out_$p11);
    call {:si_unique_call 1406} {:cexpr "ret"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_6193;

  $bb7:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    out_$p14 := out_$p11;
    assume true;
    goto $bb7;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    out_$i13 := $ne.i32(out_$i12, 0);
    goto corral_source_split_6181;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} out_$i12 := rd_is_active(out_$p11);
    call {:si_unique_call 1403} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_6180;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb20:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p54, out_$i52);
    goto corral_source_split_6241;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(24, 1));
    goto corral_source_split_6240;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i64(out_$i50, out_$i51);
    goto corral_source_split_6239;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    out_$i51 := $sext.i32.i64(out_$i16);
    goto corral_source_split_6238;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i64($M.0, out_$p49);
    goto corral_source_split_6237;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(24, 1));
    goto corral_source_split_6236;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p47, out_$i45);
    goto corral_source_split_6235;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(8, 1));
    goto corral_source_split_6234;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i64(out_$i44, 1);
    goto corral_source_split_6233;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i64($M.0, out_$p43);
    goto corral_source_split_6232;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(296, 1)), $mul.ref(8, 1));
    goto corral_source_split_6231;

  $bb19:
    assume out_$i41 == 1;
    goto corral_source_split_6230;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    out_$i41 := $sgt.i32(out_$i16, 0);
    goto corral_source_split_6207;

  $bb11:
    assume !(out_$i17 == 1);
    goto corral_source_split_6206;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i12, out_$i13, out_$p14, out_$i16, out_$i17, out_$i18, out_$p20, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$p28, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$p36, out_$i37, out_$i38, out_$p40, out_$i41, out_$p43, out_$i44, out_$i45, out_$p47, out_$p49, out_$i50, out_$i51, out_$i52, out_$p54, out_$p55, out_$i56, out_$i57, out_$p11, out_$p58 := vlsi_tx_interrupt_loop_$bb4(in_$p0, in_$p6, out_$i12, out_$i13, out_$p14, out_$i16, out_$i17, out_$i18, out_$p20, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$p28, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$p36, out_$i37, out_$i38, out_$p40, out_$i41, out_$p43, out_$i44, out_$i45, out_$p47, out_$p49, out_$i50, out_$i51, out_$i52, out_$p54, out_$p55, out_$i56, out_$i57, out_$p11, out_$p58);
    return;

  exit:
    return;
}



procedure vlsi_tx_interrupt_loop_$bb4(in_$p0: ref, in_$p6: ref, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$p20: ref, in_$i21: i64, in_$i22: i64, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$p28: ref, in_$i29: i64, in_$i30: i64, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$p36: ref, in_$i37: i64, in_$i38: i64, in_$p40: ref, in_$i41: i1, in_$p43: ref, in_$i44: i64, in_$i45: i64, in_$p47: ref, in_$p49: ref, in_$i50: i64, in_$i51: i64, in_$i52: i64, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$p11: ref, in_$p58: ref) returns (out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$p20: ref, out_$i21: i64, out_$i22: i64, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$p28: ref, out_$i29: i64, out_$i30: i64, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$p36: ref, out_$i37: i64, out_$i38: i64, out_$p40: ref, out_$i41: i1, out_$p43: ref, out_$i44: i64, out_$i45: i64, out_$p47: ref, out_$p49: ref, out_$i50: i64, out_$i51: i64, out_$i52: i64, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$p11: ref, out_$p58: ref);
  modifies $M.0;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p7: ref, in_$p9: ref, in_$p11: ref, in_$p13: ref, in_$i24: i32, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i1, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$i44: i32, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$p48: ref, in_$i49: i64, in_$i51: i32, in_$i52: i1, in_$p53: ref, in_$i54: i64, in_$i55: i32, in_$i57: i32, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$i61: i32, in_$i62: i32, in_$i63: i1, in_$i64: i32, in_$i65: i32, in_$i66: i32, in_$i67: i1, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i32, in_$i75: i1, in_$i76: i32, in_$i77: i1, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i81: i32, in_$i82: i1, in_$i83: i32, in_$i84: i1, in_$i85: i32, in_$i86: i1, in_$i87: i32, in_$i88: i1, in_$i89: i1, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i32, in_$i97: i1, in_$p98: ref, in_$i100: i32, in_$i101: i1, in_$p102: ref, in_$i103: i32, in_$i105: i32, in_$i106: i1, in_$p107: ref, in_$i108: i32, in_$i110: i32, in_$i111: i1, in_$p112: ref, in_$i113: i32, in_$i115: i32, in_$i116: i1, in_$p117: ref, in_$i118: i32, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$i122: i1, in_$p123: ref, in_$i125: i32, in_$i126: i1, in_$p127: ref, in_$i128: i32, in_$i129: i1, in_$p130: ref, in_$i131: i32, in_$i132: i1, in_$p133: ref, in_$i134: i32, in_$i135: i1, in_$i136: i32, in_$i137: i32, in_$i138: i1, in_$i139: i32, in_$i140: i32, in_$i141: i32, in_$i142: i1, in_$i144: i32, in_$i145: i32, in_$i146: i32, in_$i147: i1, in_$i148: i32, in_$i149: i1, in_$i150: i1, in_$i151: i1, in_$i152: i1, in_$i153: i1, in_$i154: i1, in_$i155: i1, in_$i156: i1, in_$i157: i32, in_$i158: i1, in_$p159: ref, in_$i160: i32, in_$i161: i32, in_$i162: i1, in_$i163: i32, in_$i164: i32, in_$i165: i32, in_$i166: i1, in_$i167: i32, in_$i168: i1, in_$p169: ref, in_$p170: ref, in_$i171: i32, in_$i172: i32, in_$i173: i32, in_$i174: i1, in_$i175: i32, in_$i176: i1, in_$p177: ref, in_$i178: i32, in_$i179: i1, in_$p180: ref, in_$i181: i32, in_$i182: i1, in_$p183: ref, in_$i184: i32, in_$i185: i1, in_$p186: ref, in_$i187: i32, in_$i188: i1, in_$p189: ref, in_$i190: i32, in_$i191: i32, in_$i192: i1, in_$i193: i32, in_$i194: i1, in_$p195: ref, in_$i196: i32, in_$i197: i32, in_$i198: i1, in_$i199: i32, in_$i200: i1, in_$p201: ref, in_$i202: i32, in_$i203: i32, in_$i204: i1, in_$i205: i32, in_$i206: i1, in_$i207: i32, in_$i208: i32, in_$i209: i1, in_$i210: i32, in_$i211: i1, in_$i212: i32, in_$i213: i32, in_$i214: i1, in_$i215: i32, in_$i216: i1, in_$i217: i32, in_$i218: i32, in_$i219: i1, in_$i220: i32, in_$i221: i1, in_$i223: i32, in_$i224: i1, in_$i226: i32, in_$i227: i1, in_$i229: i32, in_$i230: i1, in_vslice_dummy_var_330: i32, in_vslice_dummy_var_331: i64, in_vslice_dummy_var_332: i64, in_vslice_dummy_var_333: i32, in_vslice_dummy_var_334: i32, in_vslice_dummy_var_335: i32, in_vslice_dummy_var_336: i32, in_vslice_dummy_var_337: i32, in_vslice_dummy_var_338: i32, in_vslice_dummy_var_339: i32, in_vslice_dummy_var_340: i32, in_vslice_dummy_var_341: i32, in_vslice_dummy_var_342: i32) returns (out_$i24: i32, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i1, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$i44: i32, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$p48: ref, out_$i49: i64, out_$i51: i32, out_$i52: i1, out_$p53: ref, out_$i54: i64, out_$i55: i32, out_$i57: i32, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$i61: i32, out_$i62: i32, out_$i63: i1, out_$i64: i32, out_$i65: i32, out_$i66: i32, out_$i67: i1, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i32, out_$i75: i1, out_$i76: i32, out_$i77: i1, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i81: i32, out_$i82: i1, out_$i83: i32, out_$i84: i1, out_$i85: i32, out_$i86: i1, out_$i87: i32, out_$i88: i1, out_$i89: i1, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i32, out_$i97: i1, out_$p98: ref, out_$i100: i32, out_$i101: i1, out_$p102: ref, out_$i103: i32, out_$i105: i32, out_$i106: i1, out_$p107: ref, out_$i108: i32, out_$i110: i32, out_$i111: i1, out_$p112: ref, out_$i113: i32, out_$i115: i32, out_$i116: i1, out_$p117: ref, out_$i118: i32, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$i122: i1, out_$p123: ref, out_$i125: i32, out_$i126: i1, out_$p127: ref, out_$i128: i32, out_$i129: i1, out_$p130: ref, out_$i131: i32, out_$i132: i1, out_$p133: ref, out_$i134: i32, out_$i135: i1, out_$i136: i32, out_$i137: i32, out_$i138: i1, out_$i139: i32, out_$i140: i32, out_$i141: i32, out_$i142: i1, out_$i144: i32, out_$i145: i32, out_$i146: i32, out_$i147: i1, out_$i148: i32, out_$i149: i1, out_$i150: i1, out_$i151: i1, out_$i152: i1, out_$i153: i1, out_$i154: i1, out_$i155: i1, out_$i156: i1, out_$i157: i32, out_$i158: i1, out_$p159: ref, out_$i160: i32, out_$i161: i32, out_$i162: i1, out_$i163: i32, out_$i164: i32, out_$i165: i32, out_$i166: i1, out_$i167: i32, out_$i168: i1, out_$p169: ref, out_$p170: ref, out_$i171: i32, out_$i172: i32, out_$i173: i32, out_$i174: i1, out_$i175: i32, out_$i176: i1, out_$p177: ref, out_$i178: i32, out_$i179: i1, out_$p180: ref, out_$i181: i32, out_$i182: i1, out_$p183: ref, out_$i184: i32, out_$i185: i1, out_$p186: ref, out_$i187: i32, out_$i188: i1, out_$p189: ref, out_$i190: i32, out_$i191: i32, out_$i192: i1, out_$i193: i32, out_$i194: i1, out_$p195: ref, out_$i196: i32, out_$i197: i32, out_$i198: i1, out_$i199: i32, out_$i200: i1, out_$p201: ref, out_$i202: i32, out_$i203: i32, out_$i204: i1, out_$i205: i32, out_$i206: i1, out_$i207: i32, out_$i208: i32, out_$i209: i1, out_$i210: i32, out_$i211: i1, out_$i212: i32, out_$i213: i32, out_$i214: i1, out_$i215: i32, out_$i216: i1, out_$i217: i32, out_$i218: i32, out_$i219: i1, out_$i220: i32, out_$i221: i1, out_$i223: i32, out_$i224: i1, out_$i226: i32, out_$i227: i1, out_$i229: i32, out_$i230: i1, out_vslice_dummy_var_330: i32, out_vslice_dummy_var_331: i64, out_vslice_dummy_var_332: i64, out_vslice_dummy_var_333: i32, out_vslice_dummy_var_334: i32, out_vslice_dummy_var_335: i32, out_vslice_dummy_var_336: i32, out_vslice_dummy_var_337: i32, out_vslice_dummy_var_338: i32, out_vslice_dummy_var_339: i32, out_vslice_dummy_var_340: i32, out_vslice_dummy_var_341: i32, out_vslice_dummy_var_342: i32)
{

  entry:
    out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i100, out_$i101, out_$p102, out_$i103, out_$i105, out_$i106, out_$p107, out_$i108, out_$i110, out_$i111, out_$p112, out_$i113, out_$i115, out_$i116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i125, out_$i126, out_$p127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$p159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$p169, out_$p170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$p177, out_$i178, out_$i179, out_$p180, out_$i181, out_$i182, out_$p183, out_$i184, out_$i185, out_$p186, out_$i187, out_$i188, out_$p189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$p195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$p201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i223, out_$i224, out_$i226, out_$i227, out_$i229, out_$i230, out_vslice_dummy_var_330, out_vslice_dummy_var_331, out_vslice_dummy_var_332, out_vslice_dummy_var_333, out_vslice_dummy_var_334, out_vslice_dummy_var_335, out_vslice_dummy_var_336, out_vslice_dummy_var_337, out_vslice_dummy_var_338, out_vslice_dummy_var_339, out_vslice_dummy_var_340, out_vslice_dummy_var_341, out_vslice_dummy_var_342 := in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$p41, in_$p42, in_$i44, in_$i45, in_$i46, in_$i47, in_$p48, in_$i49, in_$i51, in_$i52, in_$p53, in_$i54, in_$i55, in_$i57, in_$i58, in_$p59, in_$p60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$p98, in_$i100, in_$i101, in_$p102, in_$i103, in_$i105, in_$i106, in_$p107, in_$i108, in_$i110, in_$i111, in_$p112, in_$i113, in_$i115, in_$i116, in_$p117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$p123, in_$i125, in_$i126, in_$p127, in_$i128, in_$i129, in_$p130, in_$i131, in_$i132, in_$p133, in_$i134, in_$i135, in_$i136, in_$i137, in_$i138, in_$i139, in_$i140, in_$i141, in_$i142, in_$i144, in_$i145, in_$i146, in_$i147, in_$i148, in_$i149, in_$i150, in_$i151, in_$i152, in_$i153, in_$i154, in_$i155, in_$i156, in_$i157, in_$i158, in_$p159, in_$i160, in_$i161, in_$i162, in_$i163, in_$i164, in_$i165, in_$i166, in_$i167, in_$i168, in_$p169, in_$p170, in_$i171, in_$i172, in_$i173, in_$i174, in_$i175, in_$i176, in_$p177, in_$i178, in_$i179, in_$p180, in_$i181, in_$i182, in_$p183, in_$i184, in_$i185, in_$p186, in_$i187, in_$i188, in_$p189, in_$i190, in_$i191, in_$i192, in_$i193, in_$i194, in_$p195, in_$i196, in_$i197, in_$i198, in_$i199, in_$i200, in_$p201, in_$i202, in_$i203, in_$i204, in_$i205, in_$i206, in_$i207, in_$i208, in_$i209, in_$i210, in_$i211, in_$i212, in_$i213, in_$i214, in_$i215, in_$i216, in_$i217, in_$i218, in_$i219, in_$i220, in_$i221, in_$i223, in_$i224, in_$i226, in_$i227, in_$i229, in_$i230, in_vslice_dummy_var_330, in_vslice_dummy_var_331, in_vslice_dummy_var_332, in_vslice_dummy_var_333, in_vslice_dummy_var_334, in_vslice_dummy_var_335, in_vslice_dummy_var_336, in_vslice_dummy_var_337, in_vslice_dummy_var_338, in_vslice_dummy_var_339, in_vslice_dummy_var_340, in_vslice_dummy_var_341, in_vslice_dummy_var_342;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1504} out_$i24 := __VERIFIER_nondet_int();
    call {:si_unique_call 1505} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i24);
    call {:si_unique_call 1506} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i24);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb49_dummy;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb17:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $M.59 := out_$i45;
    call {:si_unique_call 1512} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_6524;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    out_$i45 := $sub.i32(out_$i44, 1);
    goto corral_source_split_6523;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    out_$i44 := $M.59;
    goto corral_source_split_6522;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1511} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6521;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} out_vslice_dummy_var_330 := single_release(out_$p41, out_$p42);
    goto corral_source_split_6520;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    out_$p42 := $M.56;
    goto corral_source_split_6519;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    out_$p41 := $M.55;
    goto corral_source_split_6518;

  $bb30:
    assume out_$i40 == 1;
    goto corral_source_split_6517;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i39, 2);
    goto corral_source_split_6515;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    out_$i39 := $M.57;
    goto corral_source_split_6514;

  $bb28:
    assume out_$i38 == 1;
    goto corral_source_split_6513;

  $bb26:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i33, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb19:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i37 := $slt.i32(out_$i33, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i34 := $slt.i32(out_$i33, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_6499:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1507} out_$i33 := __VERIFIER_nondet_int();
    call {:si_unique_call 1508} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i33);
    call {:si_unique_call 1509} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i33);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume out_$i32 == 1;
    goto corral_source_split_6499;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i32(out_$i31, 0);
    goto corral_source_split_6497;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    out_$i31 := $M.57;
    goto corral_source_split_6496;

  $bb14:
    assume out_$i30 == 1;
    goto corral_source_split_6495;

  $bb12:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i24, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb3:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i24, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i25 := $slt.i32(out_$i24, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb35:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $M.57 := 2;
    call {:si_unique_call 1514} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6530;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} out_vslice_dummy_var_331 := seq_read(out_$p48, in_$p5, out_$i49, in_$p7);
    goto corral_source_split_6529;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i64($M.52, in_$p1);
    goto corral_source_split_6528;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    out_$p48 := $M.56;
    goto corral_source_split_6527;

  $bb34:
    assume out_$i47 == 1;
    goto corral_source_split_6526;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i46, 2);
    goto corral_source_split_6511;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    out_$i46 := $M.57;
    goto corral_source_split_6510;

  $bb27:
    assume !(out_$i37 == 1);
    goto corral_source_split_6509;

  $bb38:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $M.57 := 2;
    call {:si_unique_call 1516} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6537;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} out_vslice_dummy_var_332 := seq_lseek(out_$p53, out_$i54, out_$i55);
    goto corral_source_split_6536;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i32($M.52, in_$p2);
    goto corral_source_split_6535;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i64($M.52, in_$p0);
    goto corral_source_split_6534;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    out_$p53 := $M.56;
    goto corral_source_split_6533;

  $bb37:
    assume out_$i52 == 1;
    goto corral_source_split_6532;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i51, 2);
    goto corral_source_split_6503;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    out_$i51 := $M.57;
    goto corral_source_split_6502;

  $bb21:
    assume out_$i35 == 1;
    goto corral_source_split_6501;

  $bb20:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    out_$i35 := $slt.i32(out_$i33, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb41:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb43:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $M.59 := out_$i65;
    call {:si_unique_call 1520} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_6551;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    out_$i65 := $add.i32(out_$i64, 1);
    goto corral_source_split_6550;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    out_$i64 := $M.59;
    goto corral_source_split_6549;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $M.57 := 2;
    call {:si_unique_call 1519} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6548;

  $bb42:
    assume out_$i63 == 1;
    goto corral_source_split_6547;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    out_$i63 := $eq.i32(out_$i62, 0);
    goto corral_source_split_6545;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    out_$i62 := $M.62;
    goto corral_source_split_6544;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $M.62 := out_$i61;
    call {:si_unique_call 1518} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_6543;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} out_$i61 := vlsi_seq_open(out_$p59, out_$p60);
    goto corral_source_split_6542;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    out_$p60 := $M.56;
    goto corral_source_split_6541;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    out_$p59 := $M.55;
    goto corral_source_split_6540;

  $bb40:
    assume out_$i58 == 1;
    goto corral_source_split_6539;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i57, 1);
    goto corral_source_split_6507;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    out_$i57 := $M.57;
    goto corral_source_split_6506;

  $bb23:
    assume out_$i36 == 1;
    goto corral_source_split_6505;

  $bb22:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i33, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} ldv_stop();
    goto corral_source_split_6553;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb24:
    assume {:verifier.code 0} true;
    assume !(out_$i36 == 1);
    goto $bb25;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i38 == 1);
    goto $bb25;

  $bb51:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_105:
    goto corral_source_split_6556;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} choose_interrupt_1();
    goto SeqInstr_104;

  $bb50:
    assume out_$i67 == 1;
    goto corral_source_split_6555;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    out_$i67 := $ne.i32(out_$i66, 0);
    goto corral_source_split_6493;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    out_$i66 := $M.58;
    goto corral_source_split_6492;

  $bb13:
    assume !(out_$i29 == 1);
    goto corral_source_split_6491;

  $bb54:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb64:
    assume {:verifier.code 0} true;
    assume !(out_$i75 == 1);
    goto $bb65;

  $bb67:
    assume {:verifier.code 0} true;
    assume !(out_$i77 == 1);
    goto $bb65;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    out_$i77 := $eq.i32(out_$i76, 0);
    goto corral_source_split_6570;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    out_$i76 := $M.59;
    goto corral_source_split_6569;

  $bb63:
    assume out_$i75 == 1;
    goto corral_source_split_6568;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    out_$i75 := $eq.i32(out_$i74, 3);
    goto corral_source_split_6566;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    out_$i74 := $M.60;
    goto corral_source_split_6565;

  $bb61:
    assume out_$i73 == 1;
    goto corral_source_split_6564;

  $bb56:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$i73 := $eq.i32(out_$i70, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb55:
    assume {:verifier.code 0} true;
    out_$i71 := $slt.i32(out_$i70, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_6558:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1523} out_$i70 := __VERIFIER_nondet_int();
    call {:si_unique_call 1524} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i70);
    call {:si_unique_call 1525} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i70);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb53:
    assume out_$i69 == 1;
    goto corral_source_split_6558;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i68, 0);
    goto corral_source_split_6481;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    out_$i68 := $M.60;
    goto corral_source_split_6480;

  $bb5:
    assume out_$i26 == 1;
    goto corral_source_split_6479;

  $bb4:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$i26 := $slt.i32(out_$i24, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb72:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb77:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    out_$i84 := $ne.i32(out_$i83, 0);
    goto corral_source_split_6590;

  $bb75:
    assume {:verifier.code 0} true;
    out_$i83 := $M.63;
    goto corral_source_split_6589;

  $bb74:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} ldv_file_operations_4();
    goto corral_source_split_6587;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1532} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6586;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $M.60 := 3;
    call {:si_unique_call 1531} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_6585;

  $bb73:
    assume out_$i82 == 1;
    goto corral_source_split_6584;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    out_$i82 := $eq.i32(out_$i81, 0);
    goto corral_source_split_6582;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    out_$i81 := $M.63;
    goto corral_source_split_6581;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $M.63 := out_$i80;
    call {:si_unique_call 1530} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i80);
    goto corral_source_split_6580;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} out_$i80 := vlsi_mod_init();
    goto corral_source_split_6579;

  $bb71:
    assume out_$i79 == 1;
    goto corral_source_split_6578;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    out_$i79 := $eq.i32(out_$i78, 1);
    goto corral_source_split_6562;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    out_$i78 := $M.60;
    goto corral_source_split_6561;

  $bb58:
    assume out_$i72 == 1;
    goto corral_source_split_6560;

  $bb57:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    out_$i72 := $eq.i32(out_$i70, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} ldv_stop();
    goto corral_source_split_6595;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb59:
    assume {:verifier.code 0} true;
    assume !(out_$i72 == 1);
    goto $bb60;

  $bb62:
    assume {:verifier.code 0} true;
    assume !(out_$i73 == 1);
    goto $bb60;

  $bb84:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb104:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 1540} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6630;

  SeqInstr_108:
    goto corral_source_split_6629;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} out_vslice_dummy_var_333 := vlsi_close(out_$p98);
    goto SeqInstr_107;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    out_$p98 := $M.29;
    goto corral_source_split_6628;

  $bb103:
    assume out_$i97 == 1;
    goto corral_source_split_6627;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    out_$i97 := $eq.i32(out_$i96, 3);
    goto corral_source_split_6625;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    out_$i96 := $M.27;
    goto corral_source_split_6624;

  $bb101:
    assume out_$i95 == 1;
    goto corral_source_split_6623;

  $bb97:
    assume out_$i93 == 1;
    assume {:verifier.code 0} true;
    out_$i95 := $eq.i32(out_$i87, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb86:
    assume out_$i88 == 1;
    assume {:verifier.code 0} true;
    out_$i93 := $slt.i32(out_$i87, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb85:
    assume {:verifier.code 0} true;
    out_$i88 := $slt.i32(out_$i87, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_6597:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1536} out_$i87 := __VERIFIER_nondet_int();
    call {:si_unique_call 1537} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i87);
    call {:si_unique_call 1538} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i87);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb83:
    assume out_$i86 == 1;
    goto corral_source_split_6597;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    out_$i86 := $ne.i32(out_$i85, 0);
    goto corral_source_split_6485;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    out_$i85 := $M.27;
    goto corral_source_split_6484;

  $bb7:
    assume out_$i27 == 1;
    goto corral_source_split_6483;

  $bb6:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    out_$i27 := $slt.i32(out_$i24, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb114:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 1546} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6654;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} out_vslice_dummy_var_336 := vlsi_ioctl(out_$p112, in_$p9, out_$i113);
    goto corral_source_split_6653;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    out_$i113 := $load.i32($M.52, in_$p3);
    goto corral_source_split_6652;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    out_$p112 := $M.29;
    goto corral_source_split_6651;

  $bb113:
    assume out_$i111 == 1;
    goto corral_source_split_6650;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    out_$i111 := $eq.i32(out_$i110, 2);
    goto corral_source_split_6648;

  $bb112:
    assume {:verifier.code 0} true;
    out_$i110 := $M.27;
    goto corral_source_split_6647;

  $bb111:
    assume !(out_$i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    goto $bb112;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 1544} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_6645;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} out_vslice_dummy_var_335 := vlsi_ioctl(out_$p107, in_$p9, out_$i108);
    goto corral_source_split_6644;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    out_$i108 := $load.i32($M.52, in_$p3);
    goto corral_source_split_6643;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    out_$p107 := $M.29;
    goto corral_source_split_6642;

  $bb110:
    assume out_$i106 == 1;
    goto corral_source_split_6641;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    out_$i106 := $eq.i32(out_$i105, 3);
    goto corral_source_split_6639;

  $bb109:
    assume {:verifier.code 0} true;
    out_$i105 := $M.27;
    goto corral_source_split_6638;

  $bb108:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    goto $bb109;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 1542} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6636;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} out_vslice_dummy_var_334 := vlsi_ioctl(out_$p102, in_$p9, out_$i103);
    goto corral_source_split_6635;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    out_$i103 := $load.i32($M.52, in_$p3);
    goto corral_source_split_6634;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    out_$p102 := $M.29;
    goto corral_source_split_6633;

  $bb107:
    assume out_$i101 == 1;
    goto corral_source_split_6632;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    out_$i101 := $eq.i32(out_$i100, 1);
    goto corral_source_split_6617;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    out_$i100 := $M.27;
    goto corral_source_split_6616;

  $bb99:
    assume out_$i94 == 1;
    goto corral_source_split_6615;

  $bb98:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    out_$i94 := $slt.i32(out_$i87, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb117:
    assume !(out_$i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb119:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 1549} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_6664;

  $bb118:
    assume out_$i120 == 1;
    goto corral_source_split_6663;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    out_$i120 := $eq.i32(out_$i119, 0);
    goto corral_source_split_6661;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    out_$i119 := $M.64;
    goto corral_source_split_6660;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $M.64 := out_$i118;
    call {:si_unique_call 1548} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i118);
    goto corral_source_split_6659;

  SeqInstr_111:
    goto corral_source_split_6658;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} out_$i118 := vlsi_open(out_$p117);
    goto SeqInstr_110;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    out_$p117 := $M.29;
    goto corral_source_split_6657;

  $bb116:
    assume out_$i116 == 1;
    goto corral_source_split_6656;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    out_$i116 := $eq.i32(out_$i115, 2);
    goto corral_source_split_6621;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    out_$i115 := $M.27;
    goto corral_source_split_6620;

  $bb100:
    assume !(out_$i94 == 1);
    goto corral_source_split_6619;

  $bb123:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    goto $bb124;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 1551} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_6669;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} out_vslice_dummy_var_337 := vlsi_hard_start_xmit(in_$p11, out_$p123);
    goto corral_source_split_6668;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    out_$p123 := $M.29;
    goto corral_source_split_6667;

  $bb122:
    assume out_$i122 == 1;
    goto corral_source_split_6666;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i32(out_$i121, 3);
    goto corral_source_split_6609;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    out_$i121 := $M.27;
    goto corral_source_split_6608;

  $bb95:
    assume out_$i92 == 1;
    goto corral_source_split_6607;

  $bb88:
    assume out_$i89 == 1;
    assume {:verifier.code 0} true;
    out_$i92 := $slt.i32(out_$i87, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb87:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    out_$i89 := $slt.i32(out_$i87, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb132:
    assume !(out_$i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 1557} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6690;

  SeqInstr_120:
    goto corral_source_split_6689;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} vlsi_tx_timeout(out_$p133);
    goto SeqInstr_119;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    out_$p133 := $M.29;
    goto corral_source_split_6688;

  $bb131:
    assume out_$i132 == 1;
    goto corral_source_split_6687;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    out_$i132 := $eq.i32(out_$i131, 2);
    goto corral_source_split_6685;

  $bb130:
    assume {:verifier.code 0} true;
    out_$i131 := $M.27;
    goto corral_source_split_6684;

  $bb129:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 1555} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_6682;

  SeqInstr_117:
    goto corral_source_split_6681;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} vlsi_tx_timeout(out_$p130);
    goto SeqInstr_116;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    out_$p130 := $M.29;
    goto corral_source_split_6680;

  $bb128:
    assume out_$i129 == 1;
    goto corral_source_split_6679;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    out_$i129 := $eq.i32(out_$i128, 3);
    goto corral_source_split_6677;

  $bb127:
    assume {:verifier.code 0} true;
    out_$i128 := $M.27;
    goto corral_source_split_6676;

  $bb126:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 1553} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6674;

  SeqInstr_114:
    goto corral_source_split_6673;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} vlsi_tx_timeout(out_$p127);
    goto SeqInstr_113;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    out_$p127 := $M.29;
    goto corral_source_split_6672;

  $bb125:
    assume out_$i126 == 1;
    goto corral_source_split_6671;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    out_$i126 := $eq.i32(out_$i125, 1);
    goto corral_source_split_6613;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    out_$i125 := $M.27;
    goto corral_source_split_6612;

  $bb96:
    assume !(out_$i92 == 1);
    goto corral_source_split_6611;

  $bb135:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb137:
    assume !(out_$i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $M.59 := out_$i140;
    call {:si_unique_call 1561} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i140);
    goto corral_source_split_6702;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    out_$i140 := $add.i32(out_$i139, 1);
    goto corral_source_split_6701;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    out_$i139 := $M.59;
    goto corral_source_split_6700;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 1560} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6699;

  $bb136:
    assume out_$i138 == 1;
    goto corral_source_split_6698;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    out_$i138 := $eq.i32(out_$i137, 0);
    goto corral_source_split_6696;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    out_$i137 := $M.65;
    goto corral_source_split_6695;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $M.65 := out_$i136;
    call {:si_unique_call 1559} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i136);
    goto corral_source_split_6694;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} out_$i136 := ldv_ndo_init_3();
    goto corral_source_split_6693;

  $bb134:
    assume out_$i135 == 1;
    goto corral_source_split_6692;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    out_$i135 := $eq.i32(out_$i134, 1);
    goto corral_source_split_6601;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    out_$i134 := $M.27;
    goto corral_source_split_6600;

  $bb90:
    assume out_$i90 == 1;
    goto corral_source_split_6599;

  $bb89:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    out_$i90 := $slt.i32(out_$i87, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb141:
    assume !(out_$i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    goto $bb142;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $M.59 := out_$i145;
    call {:si_unique_call 1564} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i145);
    goto corral_source_split_6709;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    out_$i145 := $sub.i32(out_$i144, 1);
    goto corral_source_split_6708;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    out_$i144 := $M.59;
    goto corral_source_split_6707;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 1563} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6706;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} out_vslice_dummy_var_338 := ldv_ndo_uninit_3();
    goto corral_source_split_6705;

  $bb140:
    assume out_$i142 == 1;
    goto corral_source_split_6704;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    out_$i142 := $eq.i32(out_$i141, 2);
    goto corral_source_split_6605;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    out_$i141 := $M.27;
    goto corral_source_split_6604;

  $bb92:
    assume out_$i91 == 1;
    goto corral_source_split_6603;

  $bb91:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    out_$i91 := $eq.i32(out_$i87, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} ldv_stop();
    goto corral_source_split_6711;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb93:
    assume {:verifier.code 0} true;
    assume !(out_$i91 == 1);
    goto $bb94;

  $bb102:
    assume {:verifier.code 0} true;
    assume !(out_$i95 == 1);
    goto $bb94;

  $bb147:
    assume !(out_$i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb172:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb243:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb167:
    assume !(out_$i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb169:
    assume !(out_$i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    goto $bb170;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $M.59 := out_$i164;
    call {:si_unique_call 1572} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i164);
    goto corral_source_split_6754;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    out_$i164 := $add.i32(out_$i163, 1);
    goto corral_source_split_6753;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    out_$i163 := $M.59;
    goto corral_source_split_6752;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $M.61 := 2;
    call {:si_unique_call 1571} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_6751;

  $bb168:
    assume out_$i162 == 1;
    goto corral_source_split_6750;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    out_$i162 := $eq.i32(out_$i161, 0);
    goto corral_source_split_6748;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    out_$i161 := $M.66;
    goto corral_source_split_6747;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $M.66 := out_$i160;
    call {:si_unique_call 1570} {:cexpr "ldv_retval_8"} boogie_si_record_i32(out_$i160);
    goto corral_source_split_6746;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} out_$i160 := vlsi_irda_probe(out_$p159, in_$p13);
    goto corral_source_split_6745;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    out_$p159 := $M.54;
    goto corral_source_split_6744;

  $bb166:
    assume out_$i158 == 1;
    goto corral_source_split_6743;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    out_$i158 := $eq.i32(out_$i157, 1);
    goto corral_source_split_6741;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    out_$i157 := $M.61;
    goto corral_source_split_6740;

  $bb164:
    assume out_$i156 == 1;
    goto corral_source_split_6739;

  $bb160:
    assume out_$i154 == 1;
    assume {:verifier.code 0} true;
    out_$i156 := $eq.i32(out_$i148, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb149:
    assume out_$i149 == 1;
    assume {:verifier.code 0} true;
    out_$i154 := $slt.i32(out_$i148, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb148:
    assume {:verifier.code 0} true;
    out_$i149 := $slt.i32(out_$i148, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  corral_source_split_6713:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1566} out_$i148 := __VERIFIER_nondet_int();
    call {:si_unique_call 1567} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i148);
    call {:si_unique_call 1568} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i148);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb146:
    assume out_$i147 == 1;
    goto corral_source_split_6713;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    out_$i147 := $ne.i32(out_$i146, 0);
    goto corral_source_split_6489;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    out_$i146 := $M.61;
    goto corral_source_split_6488;

  $bb9:
    assume out_$i28 == 1;
    goto corral_source_split_6487;

  $bb8:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i24, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb179:
    assume !(out_$i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    goto $bb180;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $M.61 := 3;
    call {:si_unique_call 1575} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_6770;

  $bb178:
    assume out_$i174 == 1;
    goto corral_source_split_6769;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    out_$i174 := $eq.i32(out_$i173, 0);
    goto corral_source_split_6767;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    out_$i173 := $M.68;
    goto corral_source_split_6766;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $M.68 := out_$i172;
    call {:si_unique_call 1574} {:cexpr "ldv_retval_7"} boogie_si_record_i32(out_$i172);
    goto corral_source_split_6765;

  SeqInstr_123:
    goto corral_source_split_6764;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} out_$i172 := vlsi_irda_suspend(out_$p169, out_$i171);
    goto SeqInstr_122;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    out_$i171 := $load.i32($M.52, out_$p170);
    goto corral_source_split_6763;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    out_$p170 := $add.ref($add.ref(in_$p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_6762;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    out_$p169 := $M.54;
    goto corral_source_split_6761;

  $bb176:
    assume out_$i168 == 1;
    goto corral_source_split_6760;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    out_$i168 := $eq.i32(out_$i167, 0);
    goto corral_source_split_6758;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    out_$i167 := $M.67;
    goto corral_source_split_6757;

  $bb173:
    assume out_$i166 == 1;
    goto corral_source_split_6756;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    out_$i166 := $eq.i32(out_$i165, 2);
    goto corral_source_split_6733;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    out_$i165 := $M.61;
    goto corral_source_split_6732;

  $bb162:
    assume out_$i155 == 1;
    goto corral_source_split_6731;

  $bb161:
    assume !(out_$i154 == 1);
    assume {:verifier.code 0} true;
    out_$i155 := $slt.i32(out_$i148, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  $bb174:
    assume {:verifier.code 0} true;
    assume !(out_$i166 == 1);
    goto $bb175;

  $bb177:
    assume {:verifier.code 0} true;
    assume !(out_$i168 == 1);
    goto $bb175;

  $bb192:
    assume !(out_$i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    goto $bb193;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1583} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6799;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} vlsi_irda_remove(out_$p186);
    goto corral_source_split_6798;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    out_$p186 := $M.54;
    goto corral_source_split_6797;

  $bb191:
    assume out_$i185 == 1;
    goto corral_source_split_6796;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    out_$i185 := $eq.i32(out_$i184, 5);
    goto corral_source_split_6794;

  $bb190:
    assume {:verifier.code 0} true;
    out_$i184 := $M.61;
    goto corral_source_split_6793;

  $bb189:
    assume !(out_$i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    goto $bb190;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1581} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6791;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} vlsi_irda_remove(out_$p183);
    goto corral_source_split_6790;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    out_$p183 := $M.54;
    goto corral_source_split_6789;

  $bb188:
    assume out_$i182 == 1;
    goto corral_source_split_6788;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    out_$i182 := $eq.i32(out_$i181, 2);
    goto corral_source_split_6786;

  $bb187:
    assume {:verifier.code 0} true;
    out_$i181 := $M.61;
    goto corral_source_split_6785;

  $bb186:
    assume !(out_$i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1579} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6783;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} vlsi_irda_remove(out_$p180);
    goto corral_source_split_6782;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    out_$p180 := $M.54;
    goto corral_source_split_6781;

  $bb185:
    assume out_$i179 == 1;
    goto corral_source_split_6780;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    out_$i179 := $eq.i32(out_$i178, 3);
    goto corral_source_split_6778;

  $bb184:
    assume {:verifier.code 0} true;
    out_$i178 := $M.61;
    goto corral_source_split_6777;

  $bb183:
    assume !(out_$i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    goto $bb184;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1577} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6775;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} vlsi_irda_remove(out_$p177);
    goto corral_source_split_6774;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    out_$p177 := $M.54;
    goto corral_source_split_6773;

  $bb182:
    assume out_$i176 == 1;
    goto corral_source_split_6772;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    out_$i176 := $eq.i32(out_$i175, 4);
    goto corral_source_split_6737;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    out_$i175 := $M.61;
    goto corral_source_split_6736;

  $bb163:
    assume !(out_$i155 == 1);
    goto corral_source_split_6735;

  $bb207:
    assume !(out_$i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb209:
    assume !(out_$i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    goto $bb210;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $M.61 := 2;
    call {:si_unique_call 1592} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_6835;

  $bb208:
    assume out_$i204 == 1;
    goto corral_source_split_6834;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    out_$i204 := $eq.i32(out_$i203, 0);
    goto corral_source_split_6832;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    out_$i203 := $M.69;
    goto corral_source_split_6831;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $M.69 := out_$i202;
    call {:si_unique_call 1591} {:cexpr "ldv_retval_6"} boogie_si_record_i32(out_$i202);
    goto corral_source_split_6830;

  SeqInstr_132:
    goto corral_source_split_6829;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} out_$i202 := vlsi_irda_resume(out_$p201);
    goto SeqInstr_131;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    out_$p201 := $M.54;
    goto corral_source_split_6828;

  $bb206:
    assume out_$i200 == 1;
    goto corral_source_split_6827;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    out_$i200 := $eq.i32(out_$i199, 5);
    goto corral_source_split_6825;

  $bb205:
    assume {:verifier.code 0} true;
    out_$i199 := $M.61;
    goto corral_source_split_6824;

  $bb201:
    assume !(out_$i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb203:
    assume !(out_$i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    goto $bb204;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $M.61 := 2;
    call {:si_unique_call 1589} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_6822;

  $bb202:
    assume out_$i198 == 1;
    goto corral_source_split_6821;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    out_$i198 := $eq.i32(out_$i197, 0);
    goto corral_source_split_6819;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    out_$i197 := $M.69;
    goto corral_source_split_6818;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $M.69 := out_$i196;
    call {:si_unique_call 1588} {:cexpr "ldv_retval_6"} boogie_si_record_i32(out_$i196);
    goto corral_source_split_6817;

  SeqInstr_129:
    goto corral_source_split_6816;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} out_$i196 := vlsi_irda_resume(out_$p195);
    goto SeqInstr_128;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    out_$p195 := $M.54;
    goto corral_source_split_6815;

  $bb200:
    assume out_$i194 == 1;
    goto corral_source_split_6814;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    out_$i194 := $eq.i32(out_$i193, 3);
    goto corral_source_split_6812;

  $bb199:
    assume {:verifier.code 0} true;
    out_$i193 := $M.61;
    goto corral_source_split_6811;

  $bb195:
    assume !(out_$i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb197:
    assume !(out_$i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    goto $bb198;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $M.61 := 2;
    call {:si_unique_call 1586} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_6809;

  $bb196:
    assume out_$i192 == 1;
    goto corral_source_split_6808;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    out_$i192 := $eq.i32(out_$i191, 0);
    goto corral_source_split_6806;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    out_$i191 := $M.69;
    goto corral_source_split_6805;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $M.69 := out_$i190;
    call {:si_unique_call 1585} {:cexpr "ldv_retval_6"} boogie_si_record_i32(out_$i190);
    goto corral_source_split_6804;

  SeqInstr_126:
    goto corral_source_split_6803;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} out_$i190 := vlsi_irda_resume(out_$p189);
    goto SeqInstr_125;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    out_$p189 := $M.54;
    goto corral_source_split_6802;

  $bb194:
    assume out_$i188 == 1;
    goto corral_source_split_6801;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    out_$i188 := $eq.i32(out_$i187, 4);
    goto corral_source_split_6725;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    out_$i187 := $M.61;
    goto corral_source_split_6724;

  $bb158:
    assume out_$i153 == 1;
    goto corral_source_split_6723;

  $bb151:
    assume out_$i150 == 1;
    assume {:verifier.code 0} true;
    out_$i153 := $slt.i32(out_$i148, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb150:
    assume !(out_$i149 == 1);
    assume {:verifier.code 0} true;
    out_$i150 := $slt.i32(out_$i148, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb213:
    assume !(out_$i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb215:
    assume !(out_$i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    goto $bb216;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $M.61 := 4;
    call {:si_unique_call 1595} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_6844;

  $bb214:
    assume out_$i209 == 1;
    goto corral_source_split_6843;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    out_$i209 := $eq.i32(out_$i208, 0);
    goto corral_source_split_6841;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    out_$i208 := $M.70;
    goto corral_source_split_6840;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $M.70 := out_$i207;
    call {:si_unique_call 1594} {:cexpr "ldv_retval_5"} boogie_si_record_i32(out_$i207);
    goto corral_source_split_6839;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} out_$i207 := ldv_suspend_late_2();
    goto corral_source_split_6838;

  $bb212:
    assume out_$i206 == 1;
    goto corral_source_split_6837;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    out_$i206 := $eq.i32(out_$i205, 3);
    goto corral_source_split_6729;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    out_$i205 := $M.61;
    goto corral_source_split_6728;

  $bb159:
    assume !(out_$i153 == 1);
    goto corral_source_split_6727;

  $bb225:
    assume !(out_$i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb227:
    assume !(out_$i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    goto $bb228;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $M.61 := 5;
    call {:si_unique_call 1601} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_6865;

  $bb226:
    assume out_$i219 == 1;
    goto corral_source_split_6864;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226, $bb227;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    out_$i219 := $eq.i32(out_$i218, 0);
    goto corral_source_split_6862;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    out_$i218 := $M.71;
    goto corral_source_split_6861;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $M.71 := out_$i217;
    call {:si_unique_call 1600} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i217);
    goto corral_source_split_6860;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} out_$i217 := ldv_resume_early_2();
    goto corral_source_split_6859;

  $bb224:
    assume out_$i216 == 1;
    goto corral_source_split_6858;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    out_$i216 := $eq.i32(out_$i215, 3);
    goto corral_source_split_6856;

  $bb223:
    assume {:verifier.code 0} true;
    out_$i215 := $M.61;
    goto corral_source_split_6855;

  $bb219:
    assume !(out_$i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb221:
    assume !(out_$i214 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    goto $bb222;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    $M.61 := 5;
    call {:si_unique_call 1598} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_6853;

  $bb220:
    assume out_$i214 == 1;
    goto corral_source_split_6852;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    out_$i214 := $eq.i32(out_$i213, 0);
    goto corral_source_split_6850;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    out_$i213 := $M.71;
    goto corral_source_split_6849;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $M.71 := out_$i212;
    call {:si_unique_call 1597} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i212);
    goto corral_source_split_6848;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1596} out_$i212 := ldv_resume_early_2();
    goto corral_source_split_6847;

  $bb218:
    assume out_$i211 == 1;
    goto corral_source_split_6846;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    out_$i211 := $eq.i32(out_$i210, 4);
    goto corral_source_split_6717;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    out_$i210 := $M.61;
    goto corral_source_split_6716;

  $bb153:
    assume out_$i151 == 1;
    goto corral_source_split_6715;

  $bb152:
    assume !(out_$i150 == 1);
    assume {:verifier.code 0} true;
    out_$i151 := $slt.i32(out_$i148, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb240:
    assume !(out_$i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    goto $bb241;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $M.61 := 5;
    call {:si_unique_call 1609} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_6890;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} out_vslice_dummy_var_342 := ldv_shutdown_2();
    goto corral_source_split_6889;

  $bb239:
    assume out_$i230 == 1;
    goto corral_source_split_6888;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    out_$i230 := $eq.i32(out_$i229, 5);
    goto corral_source_split_6886;

  $bb238:
    assume {:verifier.code 0} true;
    out_$i229 := $M.61;
    goto corral_source_split_6885;

  $bb237:
    assume !(out_$i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    goto $bb238;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $M.61 := 2;
    call {:si_unique_call 1607} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_6883;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} out_vslice_dummy_var_341 := ldv_shutdown_2();
    goto corral_source_split_6882;

  $bb236:
    assume out_$i227 == 1;
    goto corral_source_split_6881;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    out_$i227 := $eq.i32(out_$i226, 2);
    goto corral_source_split_6879;

  $bb235:
    assume {:verifier.code 0} true;
    out_$i226 := $M.61;
    goto corral_source_split_6878;

  $bb234:
    assume !(out_$i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    goto $bb235;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $M.61 := 3;
    call {:si_unique_call 1605} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_6876;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} out_vslice_dummy_var_340 := ldv_shutdown_2();
    goto corral_source_split_6875;

  $bb233:
    assume out_$i224 == 1;
    goto corral_source_split_6874;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    out_$i224 := $eq.i32(out_$i223, 3);
    goto corral_source_split_6872;

  $bb232:
    assume {:verifier.code 0} true;
    out_$i223 := $M.61;
    goto corral_source_split_6871;

  $bb231:
    assume !(out_$i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    goto $bb232;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $M.61 := 4;
    call {:si_unique_call 1603} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_6869;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} out_vslice_dummy_var_339 := ldv_shutdown_2();
    goto corral_source_split_6868;

  $bb230:
    assume out_$i221 == 1;
    goto corral_source_split_6867;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    out_$i221 := $eq.i32(out_$i220, 4);
    goto corral_source_split_6721;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    out_$i220 := $M.61;
    goto corral_source_split_6720;

  $bb155:
    assume out_$i152 == 1;
    goto corral_source_split_6719;

  $bb154:
    assume !(out_$i151 == 1);
    assume {:verifier.code 0} true;
    out_$i152 := $eq.i32(out_$i148, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} ldv_stop();
    goto corral_source_split_6892;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb156:
    assume {:verifier.code 0} true;
    assume !(out_$i152 == 1);
    goto $bb157;

  $bb165:
    assume {:verifier.code 0} true;
    assume !(out_$i156 == 1);
    goto $bb157;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} ldv_stop();
    goto corral_source_split_6894;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i28 == 1);
    goto $bb11;

  $bb15:
    assume {:verifier.code 0} true;
    assume !(out_$i30 == 1);
    goto $bb11;

  $bb49_dummy:
    call {:si_unique_call 1} out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i100, out_$i101, out_$p102, out_$i103, out_$i105, out_$i106, out_$p107, out_$i108, out_$i110, out_$i111, out_$p112, out_$i113, out_$i115, out_$i116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i125, out_$i126, out_$p127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$p159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$p169, out_$p170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$p177, out_$i178, out_$i179, out_$p180, out_$i181, out_$i182, out_$p183, out_$i184, out_$i185, out_$p186, out_$i187, out_$i188, out_$p189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$p195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$p201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i223, out_$i224, out_$i226, out_$i227, out_$i229, out_$i230, out_vslice_dummy_var_330, out_vslice_dummy_var_331, out_vslice_dummy_var_332, out_vslice_dummy_var_333, out_vslice_dummy_var_334, out_vslice_dummy_var_335, out_vslice_dummy_var_336, out_vslice_dummy_var_337, out_vslice_dummy_var_338, out_vslice_dummy_var_339, out_vslice_dummy_var_340, out_vslice_dummy_var_341, out_vslice_dummy_var_342 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p7, in_$p9, in_$p11, in_$p13, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i100, out_$i101, out_$p102, out_$i103, out_$i105, out_$i106, out_$p107, out_$i108, out_$i110, out_$i111, out_$p112, out_$i113, out_$i115, out_$i116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i125, out_$i126, out_$p127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$p159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$p169, out_$p170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$p177, out_$i178, out_$i179, out_$p180, out_$i181, out_$i182, out_$p183, out_$i184, out_$i185, out_$p186, out_$i187, out_$i188, out_$p189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$p195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$p201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i223, out_$i224, out_$i226, out_$i227, out_$i229, out_$i230, out_vslice_dummy_var_330, out_vslice_dummy_var_331, out_vslice_dummy_var_332, out_vslice_dummy_var_333, out_vslice_dummy_var_334, out_vslice_dummy_var_335, out_vslice_dummy_var_336, out_vslice_dummy_var_337, out_vslice_dummy_var_338, out_vslice_dummy_var_339, out_vslice_dummy_var_340, out_vslice_dummy_var_341, out_vslice_dummy_var_342);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p7: ref, in_$p9: ref, in_$p11: ref, in_$p13: ref, in_$i24: i32, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i1, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$i44: i32, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$p48: ref, in_$i49: i64, in_$i51: i32, in_$i52: i1, in_$p53: ref, in_$i54: i64, in_$i55: i32, in_$i57: i32, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$i61: i32, in_$i62: i32, in_$i63: i1, in_$i64: i32, in_$i65: i32, in_$i66: i32, in_$i67: i1, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i32, in_$i75: i1, in_$i76: i32, in_$i77: i1, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i81: i32, in_$i82: i1, in_$i83: i32, in_$i84: i1, in_$i85: i32, in_$i86: i1, in_$i87: i32, in_$i88: i1, in_$i89: i1, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i32, in_$i97: i1, in_$p98: ref, in_$i100: i32, in_$i101: i1, in_$p102: ref, in_$i103: i32, in_$i105: i32, in_$i106: i1, in_$p107: ref, in_$i108: i32, in_$i110: i32, in_$i111: i1, in_$p112: ref, in_$i113: i32, in_$i115: i32, in_$i116: i1, in_$p117: ref, in_$i118: i32, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$i122: i1, in_$p123: ref, in_$i125: i32, in_$i126: i1, in_$p127: ref, in_$i128: i32, in_$i129: i1, in_$p130: ref, in_$i131: i32, in_$i132: i1, in_$p133: ref, in_$i134: i32, in_$i135: i1, in_$i136: i32, in_$i137: i32, in_$i138: i1, in_$i139: i32, in_$i140: i32, in_$i141: i32, in_$i142: i1, in_$i144: i32, in_$i145: i32, in_$i146: i32, in_$i147: i1, in_$i148: i32, in_$i149: i1, in_$i150: i1, in_$i151: i1, in_$i152: i1, in_$i153: i1, in_$i154: i1, in_$i155: i1, in_$i156: i1, in_$i157: i32, in_$i158: i1, in_$p159: ref, in_$i160: i32, in_$i161: i32, in_$i162: i1, in_$i163: i32, in_$i164: i32, in_$i165: i32, in_$i166: i1, in_$i167: i32, in_$i168: i1, in_$p169: ref, in_$p170: ref, in_$i171: i32, in_$i172: i32, in_$i173: i32, in_$i174: i1, in_$i175: i32, in_$i176: i1, in_$p177: ref, in_$i178: i32, in_$i179: i1, in_$p180: ref, in_$i181: i32, in_$i182: i1, in_$p183: ref, in_$i184: i32, in_$i185: i1, in_$p186: ref, in_$i187: i32, in_$i188: i1, in_$p189: ref, in_$i190: i32, in_$i191: i32, in_$i192: i1, in_$i193: i32, in_$i194: i1, in_$p195: ref, in_$i196: i32, in_$i197: i32, in_$i198: i1, in_$i199: i32, in_$i200: i1, in_$p201: ref, in_$i202: i32, in_$i203: i32, in_$i204: i1, in_$i205: i32, in_$i206: i1, in_$i207: i32, in_$i208: i32, in_$i209: i1, in_$i210: i32, in_$i211: i1, in_$i212: i32, in_$i213: i32, in_$i214: i1, in_$i215: i32, in_$i216: i1, in_$i217: i32, in_$i218: i32, in_$i219: i1, in_$i220: i32, in_$i221: i1, in_$i223: i32, in_$i224: i1, in_$i226: i32, in_$i227: i1, in_$i229: i32, in_$i230: i1, in_vslice_dummy_var_330: i32, in_vslice_dummy_var_331: i64, in_vslice_dummy_var_332: i64, in_vslice_dummy_var_333: i32, in_vslice_dummy_var_334: i32, in_vslice_dummy_var_335: i32, in_vslice_dummy_var_336: i32, in_vslice_dummy_var_337: i32, in_vslice_dummy_var_338: i32, in_vslice_dummy_var_339: i32, in_vslice_dummy_var_340: i32, in_vslice_dummy_var_341: i32, in_vslice_dummy_var_342: i32) returns (out_$i24: i32, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i1, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$i44: i32, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$p48: ref, out_$i49: i64, out_$i51: i32, out_$i52: i1, out_$p53: ref, out_$i54: i64, out_$i55: i32, out_$i57: i32, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$i61: i32, out_$i62: i32, out_$i63: i1, out_$i64: i32, out_$i65: i32, out_$i66: i32, out_$i67: i1, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i32, out_$i75: i1, out_$i76: i32, out_$i77: i1, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i81: i32, out_$i82: i1, out_$i83: i32, out_$i84: i1, out_$i85: i32, out_$i86: i1, out_$i87: i32, out_$i88: i1, out_$i89: i1, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i32, out_$i97: i1, out_$p98: ref, out_$i100: i32, out_$i101: i1, out_$p102: ref, out_$i103: i32, out_$i105: i32, out_$i106: i1, out_$p107: ref, out_$i108: i32, out_$i110: i32, out_$i111: i1, out_$p112: ref, out_$i113: i32, out_$i115: i32, out_$i116: i1, out_$p117: ref, out_$i118: i32, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$i122: i1, out_$p123: ref, out_$i125: i32, out_$i126: i1, out_$p127: ref, out_$i128: i32, out_$i129: i1, out_$p130: ref, out_$i131: i32, out_$i132: i1, out_$p133: ref, out_$i134: i32, out_$i135: i1, out_$i136: i32, out_$i137: i32, out_$i138: i1, out_$i139: i32, out_$i140: i32, out_$i141: i32, out_$i142: i1, out_$i144: i32, out_$i145: i32, out_$i146: i32, out_$i147: i1, out_$i148: i32, out_$i149: i1, out_$i150: i1, out_$i151: i1, out_$i152: i1, out_$i153: i1, out_$i154: i1, out_$i155: i1, out_$i156: i1, out_$i157: i32, out_$i158: i1, out_$p159: ref, out_$i160: i32, out_$i161: i32, out_$i162: i1, out_$i163: i32, out_$i164: i32, out_$i165: i32, out_$i166: i1, out_$i167: i32, out_$i168: i1, out_$p169: ref, out_$p170: ref, out_$i171: i32, out_$i172: i32, out_$i173: i32, out_$i174: i1, out_$i175: i32, out_$i176: i1, out_$p177: ref, out_$i178: i32, out_$i179: i1, out_$p180: ref, out_$i181: i32, out_$i182: i1, out_$p183: ref, out_$i184: i32, out_$i185: i1, out_$p186: ref, out_$i187: i32, out_$i188: i1, out_$p189: ref, out_$i190: i32, out_$i191: i32, out_$i192: i1, out_$i193: i32, out_$i194: i1, out_$p195: ref, out_$i196: i32, out_$i197: i32, out_$i198: i1, out_$i199: i32, out_$i200: i1, out_$p201: ref, out_$i202: i32, out_$i203: i32, out_$i204: i1, out_$i205: i32, out_$i206: i1, out_$i207: i32, out_$i208: i32, out_$i209: i1, out_$i210: i32, out_$i211: i1, out_$i212: i32, out_$i213: i32, out_$i214: i1, out_$i215: i32, out_$i216: i1, out_$i217: i32, out_$i218: i32, out_$i219: i1, out_$i220: i32, out_$i221: i1, out_$i223: i32, out_$i224: i1, out_$i226: i32, out_$i227: i1, out_$i229: i32, out_$i230: i1, out_vslice_dummy_var_330: i32, out_vslice_dummy_var_331: i64, out_vslice_dummy_var_332: i64, out_vslice_dummy_var_333: i32, out_vslice_dummy_var_334: i32, out_vslice_dummy_var_335: i32, out_vslice_dummy_var_336: i32, out_vslice_dummy_var_337: i32, out_vslice_dummy_var_338: i32, out_vslice_dummy_var_339: i32, out_vslice_dummy_var_340: i32, out_vslice_dummy_var_341: i32, out_vslice_dummy_var_342: i32);
  modifies $M.59, $M.57, $M.62, $M.4, $M.36, $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr, $M.3, $M.38, $M.40, $M.42, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.37, $M.45, $M.39, $M.46, $M.41, $M.47, $M.43, $M.48, $M.5, assertsPassed, $M.55, $M.56, $M.60, $M.63, $M.44, $M.12, $M.1, $M.61, $M.54, $M.27, $M.64, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.65, $M.66, $M.29, $M.68, $M.2, $M.13, $M.69, $M.70, $M.71;


