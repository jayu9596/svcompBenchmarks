var $M.0: i8;

var $M.1: [ref]i8;

var $M.2: i8;

var $M.3: [ref]ref;

var $M.4: [ref]ref;

var $M.5: [ref]ref;

var $M.6: [ref]ref;

var $M.7: [ref]i24;

var $M.8: [ref]i8;

var $M.9: ref;

var $M.10: i32;

var $M.11: i32;

var $M.12: i32;

var $M.13: i32;

var $M.14: [ref]i8;

var $M.15: i32;

var $M.16: i32;

var $M.17: i32;

var $M.18: [ref]i8;

var $M.19: [ref]i8;

var $M.20: i32;

var $M.22: [ref]i32;

var $M.23: [ref]i64;

var $M.25: [ref]i8;

var $M.26: [ref]ref;

var $M.27: [ref]i64;

var $M.28: [ref]ref;

var $M.29: [ref]i32;

var $M.40: [ref]i64;

var $M.41: [ref]i32;

var $M.42: [ref]i32;

var $M.58: ref;

var $M.59: i32;

var $M.60: i32;

var $M.61: i8;

var $M.62: i32;

var $M.63: [ref]ref;

var $M.64: [ref]i32;

var $M.65: i8;

var $M.66: i32;

var $M.67: i8;

var $M.68: i8;

var $M.69: [ref]i8;

var $M.70: i32;

var $M.71: i32;

var $M.72: i32;

var $M.73: i32;

var $M.74: i32;

var $M.75: [ref]ref;

var $M.76: [ref]ref;

var $M.77: [ref]ref;

var $M.78: [ref]ref;

var $M.79: [ref]ref;

var $M.80: [ref]ref;

var $M.81: [ref]ref;

var $M.82: [ref]ref;

var $M.83: [ref]ref;

var $M.84: [ref]ref;

var $M.85: [ref]ref;

var $M.86: [ref]ref;

var $M.87: [ref]ref;

var $M.88: [ref]ref;

var $M.89: [ref]ref;

var $M.90: [ref]ref;

var $M.91: [ref]ref;

var $M.92: [ref]ref;

var $M.93: [ref]ref;

var $M.94: [ref]ref;

var $M.95: [ref]ref;

var $M.96: [ref]ref;

var $M.97: [ref]ref;

var $M.98: [ref]ref;

var $M.99: [ref]ref;

var $M.100: [ref]ref;

var $M.101: [ref]ref;

var $M.102: [ref]ref;

var $M.103: [ref]ref;

var $M.104: [ref]ref;

var $M.105: [ref]ref;

var $M.106: [ref]ref;

var $M.107: [ref]ref;

var $M.108: [ref]ref;

var $M.109: [ref]ref;

var $M.110: [ref]ref;

var $M.111: [ref]ref;

var $M.112: [ref]ref;

var $M.113: [ref]ref;

var $M.114: [ref]ref;

var $M.115: [ref]ref;

var $M.116: [ref]ref;

var $M.117: [ref]ref;

var $M.118: [ref]ref;

var $M.119: [ref]ref;

var $M.120: [ref]ref;

var $M.121: [ref]ref;

var $M.122: [ref]i32;

var $M.123: [ref]i32;

var $M.124: [ref]ref;

var $M.125: i32;

var $M.126: i32;

var $M.127: i32;

var $M.128: [ref]i32;

var $M.129: [ref]ref;

var $M.130: [ref]ref;

var $M.131: [ref]ref;

var $M.132: [ref]ref;

var $M.133: i32;

var $M.134: i32;

var $M.135: i32;

var $M.136: i32;

var $M.137: i32;

var $M.138: i32;

var $M.139: i32;

var $M.140: i32;

var $M.141: i32;

var $M.142: i32;

var $M.143: i32;

var $M.144: i32;

var $M.145: i32;

var $M.146: i32;

var $M.147: i16;

var $M.148: i32;

var $M.149: i32;

var $M.150: i32;

var $M.151: i32;

var $M.215: [ref]i32;

var $M.216: [ref]ref;

var $M.217: [ref]i8;

var $M.228: [ref]i8;

var $M.234: [ref]i8;

var $M.235: [ref]i8;

var $M.236: [ref]i8;

var $M.237: [ref]i8;

var $M.238: [ref]i8;

var $M.239: [ref]i8;

var $M.240: [ref]i8;

var $M.241: [ref]i8;

var $M.242: [ref]i8;

var $M.243: [ref]i8;

var $M.244: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 960726);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32832));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const ldv_linux_alloc_usb_lock_lock: ref;

axiom ldv_linux_alloc_usb_lock_lock == $sub.ref(0, 1028);

const ldv_linux_arch_io_iomem: ref;

axiom ldv_linux_arch_io_iomem == $sub.ref(0, 2056);

const ldv_linux_block_request_blk_rq: ref;

axiom ldv_linux_block_request_blk_rq == $sub.ref(0, 3084);

const ldv_linux_drivers_base_class_usb_gadget_class: ref;

axiom ldv_linux_drivers_base_class_usb_gadget_class == $sub.ref(0, 4112);

const ldv_linux_fs_char_dev_usb_gadget_chrdev: ref;

axiom ldv_linux_fs_char_dev_usb_gadget_chrdev == $sub.ref(0, 5140);

const ldv_linux_fs_sysfs_sysfs: ref;

axiom ldv_linux_fs_sysfs_sysfs == $sub.ref(0, 6168);

const ldv_linux_kernel_locking_rwlock_rlock: ref;

axiom ldv_linux_kernel_locking_rwlock_rlock == $sub.ref(0, 7196);

const ldv_linux_kernel_locking_rwlock_wlock: ref;

axiom ldv_linux_kernel_locking_rwlock_wlock == $sub.ref(0, 8224);

const ldv_linux_kernel_module_module_refcounter: ref;

axiom ldv_linux_kernel_module_module_refcounter == $sub.ref(0, 9252);

const ldv_linux_kernel_rcu_srcu_srcu_nested: ref;

axiom ldv_linux_kernel_rcu_srcu_srcu_nested == $sub.ref(0, 10280);

const ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh: ref;

axiom ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh == $sub.ref(0, 11308);

const ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched: ref;

axiom ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched == $sub.ref(0, 12336);

const ldv_linux_kernel_rcu_update_lock_rcu_nested: ref;

axiom ldv_linux_kernel_rcu_update_lock_rcu_nested == $sub.ref(0, 13364);

const ldv_linux_mmc_sdio_func_sdio_element: ref;

axiom ldv_linux_mmc_sdio_func_sdio_element == $sub.ref(0, 14390);

const ldv_linux_net_register_probe_state: ref;

axiom ldv_linux_net_register_probe_state == $sub.ref(0, 15418);

const rtnllocknumber: ref;

axiom rtnllocknumber == $sub.ref(0, 16446);

const locksocknumber: ref;

axiom locksocknumber == $sub.ref(0, 17474);

const ldv_linux_usb_coherent_coherent_state: ref;

axiom ldv_linux_usb_coherent_coherent_state == $sub.ref(0, 18502);

const LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS: ref;

axiom LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS == $sub.ref(0, 19530);

const ldv_linux_usb_gadget_usb_gadget: ref;

axiom ldv_linux_usb_gadget_usb_gadget == $sub.ref(0, 20558);

const ldv_linux_usb_register_probe_state: ref;

axiom ldv_linux_usb_register_probe_state == $sub.ref(0, 21586);

const ldv_linux_usb_urb_urb_state: ref;

axiom ldv_linux_usb_urb_urb_state == $sub.ref(0, 22614);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_add_target_mutex_of_srp_host: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_add_target_mutex_of_srp_host == $sub.ref(0, 23639);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode == $sub.ref(0, 24664);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock == $sub.ref(0, 25689);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device == $sub.ref(0, 26714);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_srp_rport: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_srp_rport == $sub.ref(0, 27739);

const ldv_thread_0: ref;

axiom ldv_thread_0 == $sub.ref(0, 28779);

const ldv_thread_1: ref;

axiom ldv_thread_1 == $sub.ref(0, 29819);

const ldv_thread_10: ref;

axiom ldv_thread_10 == $sub.ref(0, 30859);

const ldv_thread_11: ref;

axiom ldv_thread_11 == $sub.ref(0, 31899);

const ldv_thread_12: ref;

axiom ldv_thread_12 == $sub.ref(0, 32939);

const ldv_thread_13: ref;

axiom ldv_thread_13 == $sub.ref(0, 33979);

const ldv_thread_14: ref;

axiom ldv_thread_14 == $sub.ref(0, 35019);

const ldv_thread_15: ref;

axiom ldv_thread_15 == $sub.ref(0, 36059);

const ldv_thread_16: ref;

axiom ldv_thread_16 == $sub.ref(0, 37099);

const ldv_thread_17: ref;

axiom ldv_thread_17 == $sub.ref(0, 38139);

const ldv_thread_18: ref;

axiom ldv_thread_18 == $sub.ref(0, 39179);

const ldv_thread_19: ref;

axiom ldv_thread_19 == $sub.ref(0, 40219);

const ldv_thread_2: ref;

axiom ldv_thread_2 == $sub.ref(0, 41259);

const ldv_thread_20: ref;

axiom ldv_thread_20 == $sub.ref(0, 42299);

const ldv_thread_21: ref;

axiom ldv_thread_21 == $sub.ref(0, 43339);

const ldv_thread_22: ref;

axiom ldv_thread_22 == $sub.ref(0, 44379);

const ldv_thread_23: ref;

axiom ldv_thread_23 == $sub.ref(0, 45419);

const ldv_thread_24: ref;

axiom ldv_thread_24 == $sub.ref(0, 46459);

const ldv_thread_28: ref;

axiom ldv_thread_28 == $sub.ref(0, 47499);

const ldv_thread_3: ref;

axiom ldv_thread_3 == $sub.ref(0, 48539);

const ldv_thread_4: ref;

axiom ldv_thread_4 == $sub.ref(0, 49579);

const ldv_thread_5: ref;

axiom ldv_thread_5 == $sub.ref(0, 50619);

const ldv_thread_6: ref;

axiom ldv_thread_6 == $sub.ref(0, 51659);

const ldv_thread_7: ref;

axiom ldv_thread_7 == $sub.ref(0, 52699);

const ldv_thread_8: ref;

axiom ldv_thread_8 == $sub.ref(0, 53739);

const ldv_thread_9: ref;

axiom ldv_thread_9 == $sub.ref(0, 54779);

const ldv_linux_lib_idr_idr: ref;

axiom ldv_linux_lib_idr_idr == $sub.ref(0, 55807);

const ldv_linux_kernel_sched_completion_completion_tsk_mgmt_done_of_srp_rdma_ch: ref;

axiom ldv_linux_kernel_sched_completion_completion_tsk_mgmt_done_of_srp_rdma_ch == $sub.ref(0, 56835);

const ldv_linux_kernel_sched_completion_completion_released_of_srp_host: ref;

axiom ldv_linux_kernel_sched_completion_completion_released_of_srp_host == $sub.ref(0, 57863);

const ldv_linux_kernel_sched_completion_completion_done_of_srp_rdma_ch: ref;

axiom ldv_linux_kernel_sched_completion_completion_done_of_srp_rdma_ch == $sub.ref(0, 58891);

const ldv_linux_kernel_locking_spinlock_spin_target_lock_of_srp_host: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_target_lock_of_srp_host == $sub.ref(0, 59919);

const ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct == $sub.ref(0, 60947);

const ldv_linux_kernel_locking_spinlock_spin_ptl: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_ptl == $sub.ref(0, 61975);

const ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data == $sub.ref(0, 63003);

const ldv_linux_kernel_locking_spinlock_spin_lock_of_srp_target_port: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_of_srp_target_port == $sub.ref(0, 64031);

const ldv_linux_kernel_locking_spinlock_spin_lock_of_srp_rdma_ch: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_of_srp_rdma_ch == $sub.ref(0, 65059);

const ldv_linux_kernel_locking_spinlock_spin_lock_of_srp_fr_pool: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_of_srp_fr_pool == $sub.ref(0, 66087);

const ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN == $sub.ref(0, 67115);

const ldv_linux_kernel_locking_spinlock_spin_lock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock == $sub.ref(0, 68143);

const ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode == $sub.ref(0, 69171);

const ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct == $sub.ref(0, 70199);

const __ldv_in_interrupt_context: ref;

axiom __ldv_in_interrupt_context == $sub.ref(0, 71224);

const ldv_linux_block_queue_queue_state: ref;

axiom ldv_linux_block_queue_queue_state == $sub.ref(0, 72252);

const ldv_linux_block_genhd_disk_state: ref;

axiom ldv_linux_block_genhd_disk_state == $sub.ref(0, 73280);

const register_always: ref;

axiom register_always == $sub.ref(0, 74305);

const ch_count: ref;

axiom ch_count == $sub.ref(0, 75333);

const {:count 16} srp_opt_tokens: ref;

axiom srp_opt_tokens == $sub.ref(0, 76613);

const allow_ext_sg: ref;

axiom allow_ext_sg == $sub.ref(0, 77638);

const dev_attr_allow_ext_sg: ref;

axiom dev_attr_allow_ext_sg == $sub.ref(0, 78710);

const dev_attr_cmd_sg_entries: ref;

axiom dev_attr_cmd_sg_entries == $sub.ref(0, 79782);

const dev_attr_tl_retry_count: ref;

axiom dev_attr_tl_retry_count == $sub.ref(0, 80854);

const dev_attr_comp_vector: ref;

axiom dev_attr_comp_vector == $sub.ref(0, 81926);

const dev_attr_ch_count: ref;

axiom dev_attr_ch_count == $sub.ref(0, 82998);

const dev_attr_local_ib_device: ref;

axiom dev_attr_local_ib_device == $sub.ref(0, 84070);

const dev_attr_local_ib_port: ref;

axiom dev_attr_local_ib_port == $sub.ref(0, 85142);

const dev_attr_zero_req_lim: ref;

axiom dev_attr_zero_req_lim == $sub.ref(0, 86214);

const dev_attr_req_lim: ref;

axiom dev_attr_req_lim == $sub.ref(0, 87286);

const dev_attr_orig_dgid: ref;

axiom dev_attr_orig_dgid == $sub.ref(0, 88358);

const dev_attr_dgid: ref;

axiom dev_attr_dgid == $sub.ref(0, 89430);

const dev_attr_sgid: ref;

axiom dev_attr_sgid == $sub.ref(0, 90502);

const dev_attr_pkey: ref;

axiom dev_attr_pkey == $sub.ref(0, 91574);

const dev_attr_service_id: ref;

axiom dev_attr_service_id == $sub.ref(0, 92646);

const dev_attr_ioc_guid: ref;

axiom dev_attr_ioc_guid == $sub.ref(0, 93718);

const dev_attr_id_ext: ref;

axiom dev_attr_id_ext == $sub.ref(0, 94790);

const {:count 17} srp_host_attrs: ref;

axiom srp_host_attrs == $sub.ref(0, 95950);

const srp_template: ref;

axiom srp_template == $sub.ref(0, 97310);

const topspin_workarounds: ref;

axiom topspin_workarounds == $sub.ref(0, 98338);

const dev_attr_port: ref;

axiom dev_attr_port == $sub.ref(0, 99410);

const dev_attr_ibdev: ref;

axiom dev_attr_ibdev == $sub.ref(0, 100482);

const dev_attr_add_target: ref;

axiom dev_attr_add_target == $sub.ref(0, 101554);

const prefer_fr: ref;

axiom prefer_fr == $sub.ref(0, 102579);

const srp_dev_loss_tmo: ref;

axiom srp_dev_loss_tmo == $sub.ref(0, 103607);

const srp_fast_io_fail_tmo: ref;

axiom srp_fast_io_fail_tmo == $sub.ref(0, 104635);

const srp_reconnect_delay: ref;

axiom srp_reconnect_delay == $sub.ref(0, 105663);

const ib_srp_transport_functions: ref;

axiom ib_srp_transport_functions == $sub.ref(0, 106759);

const indirect_sg_entries: ref;

axiom indirect_sg_entries == $sub.ref(0, 107787);

const cmd_sg_entries: ref;

axiom cmd_sg_entries == $sub.ref(0, 108815);

const srp_sg_tablesize: ref;

axiom srp_sg_tablesize == $sub.ref(0, 109843);

const srp_remove_wq: ref;

axiom srp_remove_wq == $sub.ref(0, 110875);

const ib_srp_transport_template: ref;

axiom ib_srp_transport_template == $sub.ref(0, 111907);

const srp_class: ref;

axiom srp_class == $sub.ref(0, 113051);

const srp_sa_client: ref;

axiom srp_sa_client == $sub.ref(0, 114179);

const srp_client: ref;

axiom srp_client == $sub.ref(0, 115243);

const {:count 4} .str.1: ref;

axiom .str.1 == $sub.ref(0, 116271);

const system_long_wq: ref;

axiom system_long_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 37} .str.16: ref;

axiom .str.16 == $sub.ref(0, 117332);

const {:count 33} .str.17: ref;

axiom .str.17 == $sub.ref(0, 118389);

const {:count 7} .str.18: ref;

axiom .str.18 == $sub.ref(0, 119420);

const {:count 12} .str.19: ref;

axiom .str.19 == $sub.ref(0, 120456);

const {:count 36} .str.20: ref;

axiom .str.20 == $sub.ref(0, 121516);

const {:count 140} .str.21: ref;

axiom .str.21 == $sub.ref(0, 122680);

const {:count 148} .str.22: ref;

axiom .str.22 == $sub.ref(0, 123852);

const {:count 29} .str.23: ref;

axiom .str.23 == $sub.ref(0, 124905);

const {:count 24} .str.24: ref;

axiom .str.24 == $sub.ref(0, 125953);

const {:count 10} .str.25: ref;

axiom .str.25 == $sub.ref(0, 126987);

const {:count 15} .str.2: ref;

axiom .str.2 == $sub.ref(0, 128026);

const {:count 2} .str.39: ref;

axiom .str.39 == $sub.ref(0, 129052);

const {:count 50} .str.53: ref;

axiom .str.53 == $sub.ref(0, 130126);

const {:count 41} .str.44: ref;

axiom .str.44 == $sub.ref(0, 131191);

const dma_ops: ref;

axiom dma_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 2} .str.31: ref;

axiom .str.31 == $sub.ref(0, 132217);

const {:count 29} .str.32: ref;

axiom .str.32 == $sub.ref(0, 133270);

const {:count 39} .str.76: ref;

axiom .str.76 == $sub.ref(0, 134333);

const {:count 2} .str.33: ref;

axiom .str.33 == $sub.ref(0, 135359);

const {:count 86} .str.79: ref;

axiom .str.79 == $sub.ref(0, 136469);

const {:count 2} .str.37: ref;

axiom .str.37 == $sub.ref(0, 137495);

const {:count 34} .str.77: ref;

axiom .str.77 == $sub.ref(0, 138553);

const {:count 39} .str.78: ref;

axiom .str.78 == $sub.ref(0, 139616);

const {:count 40} .str.54: ref;

axiom .str.54 == $sub.ref(0, 140680);

const {:count 41} .str.55: ref;

axiom .str.55 == $sub.ref(0, 141745);

const {:count 34} .str.74: ref;

axiom .str.74 == $sub.ref(0, 142803);

const {:count 28} .str.75: ref;

axiom .str.75 == $sub.ref(0, 143855);

const {:count 22} .str.73: ref;

axiom .str.73 == $sub.ref(0, 144901);

const {:count 13} .str.70: ref;

axiom .str.70 == $sub.ref(0, 145938);

const {:count 13} .str.71: ref;

axiom .str.71 == $sub.ref(0, 146975);

const {:count 21} .str.72: ref;

axiom .str.72 == $sub.ref(0, 148020);

const {:count 41} .str.65: ref;

axiom .str.65 == $sub.ref(0, 149085);

const {:count 38} .str.66: ref;

axiom .str.66 == $sub.ref(0, 150147);

const {:count 5} .str.68: ref;

axiom .str.68 == $sub.ref(0, 151176);

const {:count 8} .str.69: ref;

axiom .str.69 == $sub.ref(0, 152208);

const {:count 39} .str.67: ref;

axiom .str.67 == $sub.ref(0, 153271);

const {:count 35} .str.56: ref;

axiom .str.56 == $sub.ref(0, 154330);

const {:count 37} .str.57: ref;

axiom .str.57 == $sub.ref(0, 155391);

const {:count 40} .str.58: ref;

axiom .str.58 == $sub.ref(0, 156455);

const {:count 35} .str.63: ref;

axiom .str.63 == $sub.ref(0, 157514);

const {:count 41} .str.64: ref;

axiom .str.64 == $sub.ref(0, 158579);

const {:count 42} .str.61: ref;

axiom .str.61 == $sub.ref(0, 159645);

const {:count 37} .str.62: ref;

axiom .str.62 == $sub.ref(0, 160706);

const {:count 42} .str.60: ref;

axiom .str.60 == $sub.ref(0, 161772);

const {:count 63} .str.59: ref;

axiom .str.59 == $sub.ref(0, 162859);

const {:count 31} .str.35: ref;

axiom .str.35 == $sub.ref(0, 163914);

const {:count 22} .str.36: ref;

axiom .str.36 == $sub.ref(0, 164960);

const {:count 43} .str.38: ref;

axiom .str.38 == $sub.ref(0, 166027);

const {:count 32} .str.40: ref;

axiom .str.40 == $sub.ref(0, 167083);

const {:count 27} .str.41: ref;

axiom .str.41 == $sub.ref(0, 168134);

const {:count 31} .str.42: ref;

axiom .str.42 == $sub.ref(0, 169189);

const {:count 66} .str.45: ref;

axiom .str.45 == $sub.ref(0, 170279);

const {:count 39} .str.46: ref;

axiom .str.46 == $sub.ref(0, 171342);

const {:count 49} .str.47: ref;

axiom .str.47 == $sub.ref(0, 172415);

const {:count 58} .str.48: ref;

axiom .str.48 == $sub.ref(0, 173497);

const {:count 61} .str.49: ref;

axiom .str.49 == $sub.ref(0, 174582);

const {:count 57} .str.50: ref;

axiom .str.50 == $sub.ref(0, 175663);

const {:count 32} .str.51: ref;

axiom .str.51 == $sub.ref(0, 176719);

const {:count 19} .str.52: ref;

axiom .str.52 == $sub.ref(0, 177762);

const {:count 34} .str.43: ref;

axiom .str.43 == $sub.ref(0, 178820);

const {:count 32} .str.34: ref;

axiom .str.34 == $sub.ref(0, 179876);

const {:count 11} .str.26: ref;

axiom .str.26 == $sub.ref(0, 180911);

const {:count 101} .str.80: ref;

axiom .str.80 == $sub.ref(0, 182036);

const {:count 95} .str.81: ref;

axiom .str.81 == $sub.ref(0, 183155);

const {:count 23} .str.82: ref;

axiom .str.82 == $sub.ref(0, 184202);

const {:count 23} .str.83: ref;

axiom .str.83 == $sub.ref(0, 185249);

const {:count 24} .str.84: ref;

axiom .str.84 == $sub.ref(0, 186297);

const cpu_online_mask: ref;

axiom cpu_online_mask == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const node_states: ref;

axiom node_states == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 20} .str.85: ref;

axiom .str.85 == $sub.ref(0, 187341);

const {:count 33} .str.86: ref;

axiom .str.86 == $sub.ref(0, 188398);

const nr_cpu_ids: ref;

axiom nr_cpu_ids == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 102} .str.87: ref;

axiom .str.87 == $sub.ref(0, 189524);

const {:count 16} .str.139: ref;

axiom .str.139 == $sub.ref(0, 190564);

const {:count 47} .str.140: ref;

axiom .str.140 == $sub.ref(0, 191635);

const {:count 15} .str.141: ref;

axiom .str.141 == $sub.ref(0, 192674);

const {:count 52} .str.142: ref;

axiom .str.142 == $sub.ref(0, 193750);

const {:count 60} .str.143: ref;

axiom .str.143 == $sub.ref(0, 194834);

const {:count 18} .str.147: ref;

axiom .str.147 == $sub.ref(0, 195876);

const {:count 31} .str.148: ref;

axiom .str.148 == $sub.ref(0, 196931);

const {:count 25} .str.149: ref;

axiom .str.149 == $sub.ref(0, 197980);

const {:count 31} .str.150: ref;

axiom .str.150 == $sub.ref(0, 199035);

const {:count 27} .str.151: ref;

axiom .str.151 == $sub.ref(0, 200086);

const {:count 33} .str.152: ref;

axiom .str.152 == $sub.ref(0, 201143);

const {:count 21} .str.153: ref;

axiom .str.153 == $sub.ref(0, 202188);

const {:count 37} .str.154: ref;

axiom .str.154 == $sub.ref(0, 203249);

const {:count 37} .str.155: ref;

axiom .str.155 == $sub.ref(0, 204310);

const {:count 28} .str.156: ref;

axiom .str.156 == $sub.ref(0, 205362);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const __preempt_count: ref;

axiom __preempt_count == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

const {:count 24} .str.138: ref;

axiom .str.138 == $sub.ref(0, 206410);

const {:count 38} .str.106: ref;

axiom .str.106 == $sub.ref(0, 207472);

const {:count 5} .str.107: ref;

axiom .str.107 == $sub.ref(0, 208501);

const {:count 35} .str.108: ref;

axiom .str.108 == $sub.ref(0, 209560);

const {:count 38} .str.109: ref;

axiom .str.109 == $sub.ref(0, 210622);

const {:count 40} .str.110: ref;

axiom .str.110 == $sub.ref(0, 211686);

const {:count 45} .str.111: ref;

axiom .str.111 == $sub.ref(0, 212755);

const {:count 38} .str.112: ref;

axiom .str.112 == $sub.ref(0, 213817);

const {:count 72} .str.113: ref;

axiom .str.113 == $sub.ref(0, 214913);

const {:count 48} .str.114: ref;

axiom .str.114 == $sub.ref(0, 215985);

const {:count 42} .str.115: ref;

axiom .str.115 == $sub.ref(0, 217051);

const {:count 46} .str.116: ref;

axiom .str.116 == $sub.ref(0, 218121);

const {:count 41} .str.117: ref;

axiom .str.117 == $sub.ref(0, 219186);

const {:count 79} .str.118: ref;

axiom .str.118 == $sub.ref(0, 220289);

const {:count 77} .str.119: ref;

axiom .str.119 == $sub.ref(0, 221390);

const {:count 3} .str.120: ref;

axiom .str.120 == $sub.ref(0, 222417);

const {:count 60} .str.121: ref;

axiom .str.121 == $sub.ref(0, 223501);

const {:count 45} .str.122: ref;

axiom .str.122 == $sub.ref(0, 224570);

const {:count 6} .str.27: ref;

axiom .str.27 == $sub.ref(0, 225600);

const {:count 4} .str.12: ref;

axiom .str.12 == $sub.ref(0, 226628);

const {:count 5} .str.28: ref;

axiom .str.28 == $sub.ref(0, 227657);

const {:count 4} .str.13: ref;

axiom .str.13 == $sub.ref(0, 228685);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32832));

const {:count 25} .str.88: ref;

axiom .str.88 == $sub.ref(0, 229734);

const {:count 7} .str.90: ref;

axiom .str.90 == $sub.ref(0, 230765);

const {:count 11} .str.11: ref;

axiom .str.11 == $sub.ref(0, 231800);

const {:count 9} .str.91: ref;

axiom .str.91 == $sub.ref(0, 232833);

const {:count 11} .str.92: ref;

axiom .str.92 == $sub.ref(0, 233868);

const {:count 5} .str.93: ref;

axiom .str.93 == $sub.ref(0, 234897);

const {:count 8} .str.15: ref;

axiom .str.15 == $sub.ref(0, 235929);

const {:count 5} .str.94: ref;

axiom .str.94 == $sub.ref(0, 236958);

const {:count 6} .str.14: ref;

axiom .str.14 == $sub.ref(0, 237988);

const {:count 5} .str.95: ref;

axiom .str.95 == $sub.ref(0, 239017);

const {:count 10} .str.96: ref;

axiom .str.96 == $sub.ref(0, 240051);

const {:count 8} .str.97: ref;

axiom .str.97 == $sub.ref(0, 241083);

const {:count 13} .str.98: ref;

axiom .str.98 == $sub.ref(0, 242120);

const {:count 14} .str.99: ref;

axiom .str.99 == $sub.ref(0, 243158);

const {:count 16} .str.100: ref;

axiom .str.100 == $sub.ref(0, 244198);

const {:count 9} .str.101: ref;

axiom .str.101 == $sub.ref(0, 245231);

const {:count 12} .str.102: ref;

axiom .str.102 == $sub.ref(0, 246267);

const {:count 15} .str.103: ref;

axiom .str.103 == $sub.ref(0, 247306);

const {:count 15} .str.104: ref;

axiom .str.104 == $sub.ref(0, 248345);

const {:count 4} .str.146: ref;

axiom .str.146 == $sub.ref(0, 249373);

const {:count 13} .str.105: ref;

axiom .str.105 == $sub.ref(0, 250410);

const {:count 5} .str.144: ref;

axiom .str.144 == $sub.ref(0, 251439);

const {:count 6} .str.145: ref;

axiom .str.145 == $sub.ref(0, 252469);

const {:count 10} .str.123: ref;

axiom .str.123 == $sub.ref(0, 253503);

const {:count 12} .str.124: ref;

axiom .str.124 == $sub.ref(0, 254539);

const {:count 8} .str.125: ref;

axiom .str.125 == $sub.ref(0, 255571);

const {:count 8} .str.126: ref;

axiom .str.126 == $sub.ref(0, 256603);

const {:count 14} .str.127: ref;

axiom .str.127 == $sub.ref(0, 257641);

const {:count 12} .str.128: ref;

axiom .str.128 == $sub.ref(0, 258677);

const {:count 19} .str.129: ref;

axiom .str.129 == $sub.ref(0, 259720);

const {:count 12} .str.130: ref;

axiom .str.130 == $sub.ref(0, 260756);

const {:count 17} .str.131: ref;

axiom .str.131 == $sub.ref(0, 261797);

const {:count 18} .str.132: ref;

axiom .str.132 == $sub.ref(0, 262839);

const {:count 16} .str.133: ref;

axiom .str.133 == $sub.ref(0, 263879);

const {:count 16} .str.134: ref;

axiom .str.134 == $sub.ref(0, 264919);

const {:count 15} .str.135: ref;

axiom .str.135 == $sub.ref(0, 265958);

const {:count 18} .str.136: ref;

axiom .str.136 == $sub.ref(0, 267000);

const {:count 14} .str.137: ref;

axiom .str.137 == $sub.ref(0, 268038);

const {:count 68} .str.3: ref;

axiom .str.3 == $sub.ref(0, 269130);

const {:count 41} .str.4: ref;

axiom .str.4 == $sub.ref(0, 270195);

const {:count 70} .str.5: ref;

axiom .str.5 == $sub.ref(0, 271289);

const {:count 19} .str.6: ref;

axiom .str.6 == $sub.ref(0, 272332);

const {:count 3} .str.7: ref;

axiom .str.7 == $sub.ref(0, 273359);

const {:count 11} .str.8: ref;

axiom .str.8 == $sub.ref(0, 274394);

const {:count 49} .str.9: ref;

axiom .str.9 == $sub.ref(0, 275467);

const {:count 38} .str.10: ref;

axiom .str.10 == $sub.ref(0, 276529);

const {:count 3} .str.29: ref;

axiom .str.29 == $sub.ref(0, 277556);

const {:count 4} .str.30: ref;

axiom .str.30 == $sub.ref(0, 278584);

const .str: ref;

axiom .str == $sub.ref(0, 279609);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 280641);

const {:count 3} .str.1.257: ref;

axiom .str.1.257 == $sub.ref(0, 281668);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 282706);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 283734);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 284766);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const ldv_in_interrupt_context: ref;

axiom ldv_in_interrupt_context == $sub.ref(0, 285798);

procedure ldv_in_interrupt_context() returns ($r: i1);
  free requires assertsPassed;



implementation ldv_in_interrupt_context() returns ($r: i1)
{
  var $i0: i8;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $i0 := $M.0;
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i1 := $trunc.i8.i1($i0);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const srp_add_one: ref;

axiom srp_add_one == $sub.ref(0, 286830);

procedure srp_add_one($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.12, assertsPassed;



implementation srp_add_one($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $i19: i1;
  var $p32: ref;
  var $i33: i8;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i8;
  var $p40: ref;
  var $i41: i8;
  var $i42: i1;
  var $p43: ref;
  var $i44: i8;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i1;
  var $p51: ref;
  var $i52: i8;
  var $i53: i1;
  var $i55: i8;
  var $i56: i1;
  var $i54: i1;
  var $i50: i1;
  var $p57: ref;
  var $i58: i8;
  var $p59: ref;
  var $i60: i64;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i64;
  var $i71: i64;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $p75: ref;
  var $i76: i32;
  var $i77: i64;
  var $i78: i64;
  var $i79: i1;
  var $i80: i64;
  var $i81: i32;
  var $p82: ref;
  var $p83: ref;
  var $i84: i8;
  var $i85: i1;
  var $p86: ref;
  var $i87: i32;
  var $p88: ref;
  var $i89: i32;
  var $i90: i1;
  var $i91: i32;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $p95: ref;
  var $i96: i32;
  var $i97: i32;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i24;
  var $i106: i24;
  var $i107: i24;
  var $p108: ref;
  var $p109: ref;
  var $i110: i8;
  var $i111: i64;
  var $i112: i64;
  var $i113: i64;
  var $i114: i1;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i64;
  var $p119: ref;
  var $i120: i32;
  var $p121: ref;
  var $i122: i32;
  var $p123: ref;
  var $i124: i32;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: i1;
  var $i133: i8;
  var $i134: i1;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $i142: i1;
  var $i143: i8;
  var $i144: i1;
  var $p145: ref;
  var $i146: i8;
  var $i147: i32;
  var $i148: i1;
  var $p151: ref;
  var $i152: i8;
  var $i153: i32;
  var $i149: i32;
  var $i150: i32;
  var $i154: i1;
  var $i156: i8;
  var $i157: i32;
  var $i158: i8;
  var $p159: ref;
  var $i160: i64;
  var $i161: i1;
  var $p162: ref;
  var $p163: ref;
  var $i164: i32;
  var $i165: i1;
  var $i155: i32;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p170: ref;
  var $p171: ref;
  var vslice_dummy_var_71: i32;
  var vslice_dummy_var_72: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p2 := kmalloc(208, 208);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $i6 := ib_query_device($p0, $p3);
    call {:si_unique_call 3} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $p11 := kmalloc(64, 208);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 2488)), $mul.ref(832, 1));
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $i19 := 0;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p12, $mul.ref(0, 64)), $mul.ref(60, 1));
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i8($i19);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p32, $i33);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 208)), $mul.ref(52, 1));
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.1, $p34);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 2097152);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p12, $mul.ref(0, 64)), $mul.ref(61, 1));
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i8($i37);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p38, $i39);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p12, $mul.ref(0, 64)), $mul.ref(60, 1));
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.1, $p40);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i8.i1($i41);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i42 == 1);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p12, $mul.ref(0, 64)), $mul.ref(61, 1));
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.1, $p43);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i8.i1($i44);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i45 == 1);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 2488)), $mul.ref(944, 1));
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} dev_warn.ref.ref($p46, .str.17);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p12, $mul.ref(0, 64)), $mul.ref(61, 1));
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.1, $p47);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i8.i1($i48);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i50 := 0;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p12, $mul.ref(0, 64)), $mul.ref(62, 1));
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i58 := $zext.i1.i8($i50);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p57, $i58);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 208)), $mul.ref(24, 1));
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $i60 := $load.i64($M.1, $p59);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i64.i32($i60);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} $i62 := ffs($i61);
    call {:si_unique_call 9} {:cexpr "tmp___2"} boogie_si_record_i32($i62);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i62, $sub.i32(0, 1));
    call {:si_unique_call 10} {:cexpr "_max2"} boogie_si_record_i32($i63);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i64 := $sgt.i32(12, $i63);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i64 == 1);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i65 := $i63;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i66 := $shl.i32(1, $i65);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p12, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p67, $i66);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p12, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.1, $p68);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i69);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i71 := $sub.i64(0, $i70);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p12, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p72, $i71);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 208)), $mul.ref(16, 1));
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $i74 := $load.i64($M.1, $p73);
    call {:si_unique_call 11} {:cexpr "max_pages_per_mr"} boogie_si_record_i64($i74);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p12, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.1, $p75);
    call {:si_unique_call 12} {:cexpr "__base"} boogie_si_record_i32($i76);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i77 := $zext.i32.i64($i76);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $i78 := $udiv.i64($i74, $i77);
    call {:si_unique_call 13} {:cexpr "max_pages_per_mr"} boogie_si_record_i64($i78);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $i79 := $ult.i64(512, $i78);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i79 == 1);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i80 := $i78;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i64.i32($i80);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p12, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p82, $i81);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p12, $mul.ref(0, 64)), $mul.ref(62, 1));
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $i84 := $load.i8($M.1, $p83);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i8.i1($i84);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p12, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.1, $p93);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p12, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.1, $p95);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $i97 := $mul.i32($i94, $i96);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p12, $mul.ref(0, 64)), $mul.ref(52, 1));
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p98, $i97);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p99, .str.18);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p100, .str.19);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p101, .str.20);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p102, .str.21);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p103);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $i105 := $load.i24($M.7, $p104);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i106 := $and.i24($i105, $sub.i24(0, 262144));
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i107 := $or.i24($i106, 3437);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p104, $i107);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p108, 0);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i110 := $load.i8($M.8, $p109);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $i111 := $zext.i8.i64($i110);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $i112 := $and.i64($i111, 1);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $i113 := ldv__builtin_expect($i112, 0);
    call {:si_unique_call 17} {:cexpr "tmp___3"} boogie_si_record_i64($i113);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i114 := $ne.i64($i113, 0);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p12, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} INIT_LIST_HEAD($p125);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p12, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p126, $p0);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} $p127 := ib_alloc_pd($p0);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p12, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p128, $p127);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p12, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.1, $p129);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $p131 := $bitcast.ref.ref($p130);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $i132 := IS_ERR($p131);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $i133 := $zext.i1.i8($i132);
    call {:si_unique_call 22} {:cexpr "tmp___4"} boogie_si_record_i8($i133);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $i134 := $trunc.i8.i1($i133);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p12, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.1, $p135);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $p137 := ib_get_dma_mr($p136, 7);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p12, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p138, $p137);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p12, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $p140 := $load.ref($M.1, $p139);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $p141 := $bitcast.ref.ref($p140);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $i142 := IS_ERR($p141);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i143 := $zext.i1.i8($i142);
    call {:si_unique_call 26} {:cexpr "tmp___5"} boogie_si_record_i8($i143);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $i144 := $trunc.i8.i1($i143);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i144} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p0, $mul.ref(0, 2488)), $mul.ref(2484, 1));
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i146 := $load.i8($M.1, $p145);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i147 := $zext.i8.i32($i146);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i147, 2);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i148 == 1);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p0, $mul.ref(0, 2488)), $mul.ref(2485, 1));
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $i152 := $load.i8($M.1, $p151);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $i153 := $zext.i8.i32($i152);
    call {:si_unique_call 28} {:cexpr "e"} boogie_si_record_i32($i153);
    assume {:verifier.code 0} true;
    $i149, $i150 := 1, $i153;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i154 := $sle.i32($i149, $i150);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    assume {:branchcond $i154} true;
    goto $bb57, $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume !($i154 == 1);
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p166 := $bitcast.ref.ref($p12);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} ib_set_client_data($p0, srp_client, $p166);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p171 := $bitcast.ref.ref($p3);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} kfree($p171);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb57:
    assume $i154 == 1;
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $i155 := $i149;
    goto $bb60;

  $bb60:
    call $i156, $i157, $i158, $p159, $i160, $i161, $p162, $p163, $i164, $i165, $i155 := srp_add_one_loop_$bb60($p12, $i150, $i156, $i157, $i158, $p159, $i160, $i161, $p162, $p163, $i164, $i165, $i155);
    goto $bb60_last;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i156 := $trunc.i32.i8($i155);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $i157 := $zext.i8.i32($i156);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i158 := $trunc.i32.i8($i157);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $p159 := srp_add_port($p12, $i158);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i160 := $p2i.ref.i64($p159);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i161 := $ne.i64($i160, 0);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i164 := $add.i32($i155, 1);
    call {:si_unique_call 31} {:cexpr "p"} boogie_si_record_i32($i164);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $i165 := $sle.i32($i164, $i150);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i165 == 1);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb65:
    assume $i165 == 1;
    assume {:verifier.code 0} true;
    $i155 := $i164;
    goto $bb65_dummy;

  $bb62:
    assume $i161 == 1;
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p159, $mul.ref(0, 1792)), $mul.ref(1616, 1));
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p12, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} list_add_tail($p162, $p163);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    goto $bb64;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb54:
    assume $i148 == 1;
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i149, $i150 := 0, 0;
    goto $bb56;

  $bb50:
    assume $i144 == 1;
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p12, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $p168 := $load.ref($M.1, $p167);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} vslice_dummy_var_72 := ib_dealloc_pd($p168);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p170 := $bitcast.ref.ref($p12);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} kfree($p170);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb46:
    assume $i134 == 1;
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb43:
    assume $i114 == 1;
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 2488)), $mul.ref(8, 1));
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p115);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p3, $mul.ref(0, 208)), $mul.ref(16, 1));
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $i118 := $load.i64($M.1, $p117);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p3, $mul.ref(0, 208)), $mul.ref(164, 1));
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.1, $p119);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p12, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.1, $p121);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p12, $mul.ref(0, 64)), $mul.ref(52, 1));
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.1, $p123);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} __dynamic_pr_debug.ref.ref.ref.i32.i64.i32.i32.i32($p1, .str.22, $p116, $i65, $i118, $i120, $i122, $i124);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb37:
    assume $i85 == 1;
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p12, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.1, $p86);
    call {:si_unique_call 14} {:cexpr "__min1___0"} boogie_si_record_i32($i87);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p3, $mul.ref(0, 208)), $mul.ref(164, 1));
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.1, $p88);
    call {:si_unique_call 15} {:cexpr "__min2___0"} boogie_si_record_i32($i89);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i90 := $ult.i32($i87, $i89);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i90 == 1);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $i91 := $i89;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p12, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p92, $i91);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb39:
    assume $i90 == 1;
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i91 := $i87;
    goto $bb41;

  $bb34:
    assume $i79 == 1;
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i80 := 512;
    goto $bb36;

  $bb31:
    assume $i64 == 1;
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i65 := 12;
    goto $bb33;

  $bb25:
    assume $i49 == 1;
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p12, $mul.ref(0, 64)), $mul.ref(60, 1));
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.1, $p51);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i8.i1($i52);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i54 := 1;
    assume {:branchcond $i53} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i50 := $i54;
    goto $bb27;

  $bb28:
    assume $i53 == 1;
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i55 := $M.2;
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i8.i1($i55);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $i54 := $i56;
    goto $bb30;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i45 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb20;

  $bb12:
    assume $i18 == 1;
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2488)), $mul.ref(856, 1));
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $i19 := 0;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb14;

  $bb15:
    assume $i23 == 1;
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 2488)), $mul.ref(840, 1));
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.1, $p24);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i19 := 0;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb14;

  $bb17:
    assume $i27 == 1;
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2488)), $mul.ref(848, 1));
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.1, $p28);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    assume {:verifier.code 0} true;
    $i19 := $i31;
    goto $bb14;

  $bb9:
    assume $i14 == 1;
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2488)), $mul.ref(8, 1));
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} vslice_dummy_var_71 := printk.ref.ref(.str.16, $p9);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb65_dummy:
    assume false;
    return;

  $bb60_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_246;
}



const srp_remove_one: ref;

axiom srp_remove_one == $sub.ref(0, 287862);

procedure srp_remove_one($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.12, $M.10, assertsPassed, $M.11;



implementation srp_remove_one($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p35: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $p20: ref;
  var $p21: ref;
  var $p57: ref;
  var $p58: ref;
  var $p60: ref;
  var $p61: ref;
  var $p63: ref;
  var vslice_dummy_var_73: i1;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} $p1 := ib_get_client_data($p0, srp_client);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref($sub.ref(0, 1608), 1792));
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p8, $mul.ref($sub.ref(0, 1608), 1792)), $mul.ref(1616, 1)), $mul.ref(0, 1));
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref($sub.ref(0, 1608), 1792));
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p8, $mul.ref($sub.ref(0, 1608), 1792)), $mul.ref(1616, 1));
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i16, $i18);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.1, $p57);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} vslice_dummy_var_74 := ib_dereg_mr($p58);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.1, $p60);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} vslice_dummy_var_75 := ib_dealloc_pd($p61);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p2);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} kfree($p63);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $p20, $p21 := $p14, $p9;
    goto $bb8;

  $bb8:
    call $p22, $p23, $p24, $p26, $p27, $p28, $p29, $p30, $i31, $p32, $i33, $i34, $p38, $p39, $p40, $p41, $p42, $i43, $i44, $p35, $p45, $p46, $p47, $p48, $p50, $p51, $p52, $p53, $p54, $i55, $i56, $p20, $p21, vslice_dummy_var_73 := srp_remove_one_loop_$bb8($i18, $p22, $p23, $p24, $p26, $p27, $p28, $p29, $p30, $i31, $p32, $i33, $i34, $p38, $p39, $p40, $p41, $p42, $i43, $i44, $p35, $p45, $p46, $p47, $p48, $p50, $p51, $p52, $p53, $p54, $i55, $i56, $p20, $p21, vslice_dummy_var_73);
    goto $bb8_last;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 1792)), $mul.ref(16, 1));
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} device_unregister($p22);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p21, $mul.ref(0, 1792)), $mul.ref(1520, 1));
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} ldv_wait_for_completion_149($p23);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p21, $mul.ref(0, 1792)), $mul.ref(1448, 1));
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} ldv_spin_lock_109($p24);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 1792)), $mul.ref(1432, 1)), $mul.ref(0, 1));
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p28, $mul.ref($sub.ref(0, 440), 464));
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p28, $mul.ref($sub.ref(0, 440), 464)), $mul.ref(440, 1));
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p21, $mul.ref(0, 1792)), $mul.ref(1432, 1));
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i31, $i33);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p21, $mul.ref(0, 1792)), $mul.ref(1448, 1));
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} ldv_spin_unlock_110($p45);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.1, system_long_wq);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} flush_workqueue($p46);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $p47 := $M.9;
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} flush_workqueue($p47);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p21);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} kfree($p48);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 1792)), $mul.ref(1616, 1)), $mul.ref(0, 1));
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.1, $p50);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p52, $mul.ref($sub.ref(0, 1608), 1792));
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p20, $mul.ref(0, 1792)), $mul.ref(1616, 1));
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, $i18);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i56 == 1);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb18:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $p20, $p21 := $p53, $p20;
    goto $bb18_dummy;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i34 == 1;
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p35 := $p29;
    goto $bb13;

  $bb13:
    call $p38, $p39, $p40, $p41, $p42, $i43, $i44, $p35, vslice_dummy_var_73 := srp_remove_one_loop_$bb13($i33, $p38, $p39, $p40, $p41, $p42, $i43, $i44, $p35, vslice_dummy_var_73);
    goto $bb13_last;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} vslice_dummy_var_73 := srp_queue_remove_work($p35);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 464)), $mul.ref(440, 1)), $mul.ref(0, 1));
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.1, $p38);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p40, $mul.ref($sub.ref(0, 440), 464));
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p40, $mul.ref($sub.ref(0, 440), 464)), $mul.ref(440, 1));
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, $i33);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i44 == 1);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb15:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $p35 := $p41;
    goto $bb15_dummy;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb15_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_312;

  $bb18_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_292;
}



const ib_get_client_data: ref;

axiom ib_get_client_data == $sub.ref(0, 288894);

procedure ib_get_client_data($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ib_get_client_data($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} $p2 := external_alloc();
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const device_unregister: ref;

axiom device_unregister == $sub.ref(0, 289926);

procedure device_unregister($p0: ref);
  free requires assertsPassed;



implementation device_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    return;
}



const ldv_wait_for_completion_149: ref;

axiom ldv_wait_for_completion_149 == $sub.ref(0, 290958);

procedure ldv_wait_for_completion_149($p0: ref);
  free requires assertsPassed;
  modifies $M.12, assertsPassed;



implementation ldv_wait_for_completion_149($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} ldv_linux_kernel_sched_completion_wait_for_completion_released_of_srp_host();
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} wait_for_completion($p0);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const ldv_spin_lock_109: ref;

axiom ldv_spin_lock_109 == $sub.ref(0, 291990);

procedure ldv_spin_lock_109($p0: ref);
  free requires assertsPassed;
  modifies $M.10, assertsPassed;



implementation ldv_spin_lock_109($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} ldv_linux_kernel_locking_spinlock_spin_lock_target_lock_of_srp_host();
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} spin_lock($p0);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const srp_queue_remove_work: ref;

axiom srp_queue_remove_work == $sub.ref(0, 293022);

procedure srp_queue_remove_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.1, $M.11, assertsPassed;



implementation srp_queue_remove_work($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i8;
  var $p7: ref;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i12: i1;
  var vslice_dummy_var_76: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} ldv_spin_lock_irq_104($p1);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, $p2);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 2);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} ldv_spin_unlock_irq_105($p7);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i6);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i6);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $p9 := $M.9;
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(360, 1));
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} vslice_dummy_var_76 := queue_work($p9, $p10);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p5, 2);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  SeqInstr_28:
    assume !assertsPassed;
    return;
}



const ldv_spin_unlock_110: ref;

axiom ldv_spin_unlock_110 == $sub.ref(0, 294054);

procedure ldv_spin_unlock_110($p0: ref);
  free requires assertsPassed;
  modifies $M.10, assertsPassed;



implementation ldv_spin_unlock_110($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} ldv_linux_kernel_locking_spinlock_spin_unlock_target_lock_of_srp_host();
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} spin_unlock($p0);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;
}



const flush_workqueue: ref;

axiom flush_workqueue == $sub.ref(0, 295086);

procedure flush_workqueue($p0: ref);
  free requires assertsPassed;



implementation flush_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 296118);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} free_($p0);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    return;
}



const ib_dereg_mr: ref;

axiom ib_dereg_mr == $sub.ref(0, 297150);

procedure ib_dereg_mr($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ib_dereg_mr($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 1} true;
    call {:si_unique_call 56} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 57} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ib_dealloc_pd: ref;

axiom ib_dealloc_pd == $sub.ref(0, 298182);

procedure ib_dealloc_pd($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ib_dealloc_pd($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 1} true;
    call {:si_unique_call 58} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 59} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 299214);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 60} $free($p0);
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_target_lock_of_srp_host: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_target_lock_of_srp_host == $sub.ref(0, 300246);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_target_lock_of_srp_host();
  free requires assertsPassed;
  modifies $M.10, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_target_lock_of_srp_host()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $i0 := $M.10;
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $i3 := $M.10;
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} ldv_assume($i5);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $M.10 := 1;
    call {:si_unique_call 63} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_target_lock_of_srp_host"} boogie_si_record_i32(1);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 301278);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;



implementation spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} _raw_spin_unlock($p2);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 302310);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    return;
}



const ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock: ref;

axiom ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock == $sub.ref(0, 303342);

procedure ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} {:cexpr "ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 1} true;
    call {:si_unique_call 66} __VERIFIER_error();
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assume: ref;

axiom ldv_assume == $sub.ref(0, 304374);

procedure ldv_assume($i0: i32);
  free requires assertsPassed;



implementation ldv_assume($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} {:cexpr "ldv_assume:arg:expression"} boogie_si_record_i32($i0);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call ldv_assume_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const ldv_spin_lock_irq_104: ref;

axiom ldv_spin_lock_irq_104 == $sub.ref(0, 305406);

procedure ldv_spin_lock_irq_104($p0: ref);
  free requires assertsPassed;
  modifies $M.11, assertsPassed;



implementation ldv_spin_lock_irq_104($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_srp_target_port();
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} spin_lock_irq($p0);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const ldv_spin_unlock_irq_105: ref;

axiom ldv_spin_unlock_irq_105 == $sub.ref(0, 306438);

procedure ldv_spin_unlock_irq_105($p0: ref);
  free requires assertsPassed;
  modifies $M.11, assertsPassed;



implementation ldv_spin_unlock_irq_105($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_srp_target_port();
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} spin_unlock_irq($p0);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 307470);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} $i2 := queue_work_on(8192, $p0, $p1);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 73} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 308502);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 74} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 1} true;
    call {:si_unique_call 75} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 76} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_srp_target_port: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_srp_target_port == $sub.ref(0, 309534);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_srp_target_port();
  free requires assertsPassed;
  modifies $M.11, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_srp_target_port()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $i0 := $M.11;
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $i3 := $M.11;
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} ldv_assume($i5);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $M.11 := 1;
    call {:si_unique_call 79} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_srp_target_port"} boogie_si_record_i32(1);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const spin_unlock_irq: ref;

axiom spin_unlock_irq == $sub.ref(0, 310566);

procedure spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_unlock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} _raw_spin_unlock_irq($p2);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irq: ref;

axiom _raw_spin_unlock_irq == $sub.ref(0, 311598);

procedure _raw_spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_srp_target_port: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_srp_target_port == $sub.ref(0, 312630);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_srp_target_port();
  free requires assertsPassed;
  modifies $M.11, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_srp_target_port()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i0 := $M.11;
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i3 := $M.11;
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} ldv_assume($i5);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $M.11 := 2;
    call {:si_unique_call 83} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_srp_target_port"} boogie_si_record_i32(2);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const spin_lock_irq: ref;

axiom spin_lock_irq == $sub.ref(0, 313662);

procedure spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_lock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} _raw_spin_lock_irq($p2);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_irq: ref;

axiom _raw_spin_lock_irq == $sub.ref(0, 314694);

procedure _raw_spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    return;
}



const ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock: ref;

axiom ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock == $sub.ref(0, 315726);

procedure ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} {:cexpr "ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 1} true;
    call {:si_unique_call 86} __VERIFIER_error();
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_target_lock_of_srp_host: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_target_lock_of_srp_host == $sub.ref(0, 316758);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_target_lock_of_srp_host();
  free requires assertsPassed;
  modifies $M.10, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_target_lock_of_srp_host()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i0 := $M.10;
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $i3 := $M.10;
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} ldv_assume($i5);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $M.10 := 2;
    call {:si_unique_call 89} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_target_lock_of_srp_host"} boogie_si_record_i32(2);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 317790);

procedure spin_lock($p0: ref);
  free requires assertsPassed;



implementation spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} _raw_spin_lock($p2);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 318822);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_kernel_sched_completion_wait_for_completion_released_of_srp_host: ref;

axiom ldv_linux_kernel_sched_completion_wait_for_completion_released_of_srp_host == $sub.ref(0, 319854);

procedure ldv_linux_kernel_sched_completion_wait_for_completion_released_of_srp_host();
  free requires assertsPassed;
  modifies $M.12, assertsPassed;



implementation ldv_linux_kernel_sched_completion_wait_for_completion_released_of_srp_host()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $i0 := $M.12;
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} ldv_assert_linux_kernel_sched_completion__wait_without_init($i2);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $M.12 := 2;
    call {:si_unique_call 92} {:cexpr "ldv_linux_kernel_sched_completion_completion_released_of_srp_host"} boogie_si_record_i32(2);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;
}



const wait_for_completion: ref;

axiom wait_for_completion == $sub.ref(0, 320886);

procedure wait_for_completion($p0: ref);
  free requires assertsPassed;



implementation wait_for_completion($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    return;
}



const ldv_assert_linux_kernel_sched_completion__wait_without_init: ref;

axiom ldv_assert_linux_kernel_sched_completion__wait_without_init == $sub.ref(0, 321918);

procedure ldv_assert_linux_kernel_sched_completion__wait_without_init($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_sched_completion__wait_without_init($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} {:cexpr "ldv_assert_linux_kernel_sched_completion__wait_without_init:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 1} true;
    call {:si_unique_call 94} __VERIFIER_error();
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 322950);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 1} true;
    call {:si_unique_call 95} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 96} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 323982);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 98} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} ldv_check_alloc_flags($i1);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} $p2 := ldv_malloc_unknown_size();
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} ldv_after_alloc($p2);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const ib_query_device: ref;

axiom ib_query_device == $sub.ref(0, 325014);

procedure ib_query_device($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ib_query_device($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 1} true;
    call {:si_unique_call 102} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 103} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 326046);

procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 1} true;
    call {:si_unique_call 104} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 105} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 1} true;
    call {:si_unique_call 106} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 107} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 1} true;
    call {:si_unique_call 108} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 109} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 1} true;
    call {:si_unique_call 110} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 111} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 1} true;
    call {:si_unique_call 112} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 113} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 327078);

procedure dev_warn.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_warn.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    return;
}



const ffs: ref;

axiom ffs == $sub.ref(0, 328110);

procedure ffs($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ffs($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} {:cexpr "ffs:arg:x"} boogie_si_record_i32($i0);
    call {:si_unique_call 115} $i1 := devirtbounce(0, $i0, $sub.i32(0, 1));
    call {:si_unique_call 116} {:cexpr "r"} boogie_si_record_i32($i1);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 1);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 329142);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 118} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __dynamic_pr_debug: ref;

axiom __dynamic_pr_debug == $sub.ref(0, 330174);

procedure __dynamic_pr_debug.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);



procedure __dynamic_pr_debug.ref.ref.ref.i32.i64.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i64, p.5: i32, p.6: i32, p.7: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.i32.i64.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i64, p.5: i32, p.6: i32, p.7: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 331206);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1, $p0);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, $p0);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    return;
}



const ib_alloc_pd: ref;

axiom ib_alloc_pd == $sub.ref(0, 332238);

procedure ib_alloc_pd($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ib_alloc_pd($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} $p1 := external_alloc();
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 333270);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547520);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 121} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ib_get_dma_mr: ref;

axiom ib_get_dma_mr == $sub.ref(0, 334302);

procedure ib_get_dma_mr($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation ib_get_dma_mr($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} {:cexpr "ib_get_dma_mr:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} $p2 := external_alloc();
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const srp_add_port: ref;

axiom srp_add_port == $sub.ref(0, 335334);

procedure srp_add_port($p0: ref, $i1: i8) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.12, assertsPassed;



implementation srp_add_port($p0: ref, $i1: i8) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p8: ref;
  var vslice_dummy_var_77: ref;
  var vslice_dummy_var_78: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 126} {:cexpr "srp_add_port:arg:port"} boogie_si_record_i8($i1);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} $p4 := kzalloc(1784, 208);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 1792)), $mul.ref(1432, 1));
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} INIT_LIST_HEAD($p9);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 1792)), $mul.ref(1448, 1));
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} vslice_dummy_var_77 := spinlock_check($p10);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1792)), $mul.ref(1448, 1)), $mul.ref(0, 1));
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} __raw_spin_lock_init($p14, .str.23, $p2);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 1792)), $mul.ref(1520, 1));
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} ldv_init_completion_148($p15);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 1792)), $mul.ref(1632, 1));
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} __mutex_init($p16, .str.24, $p3);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 1792)), $mul.ref(0, 1));
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p17, $p0);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 1792)), $mul.ref(8, 1));
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p18, $i1);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1792)), $mul.ref(16, 1)), $mul.ref(1376, 1));
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p20, srp_class);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 2488)), $mul.ref(0, 1));
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.1, $p23);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1792)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p26, $p24);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 1792)), $mul.ref(16, 1));
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.1, $p28);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 2488)), $mul.ref(8, 1));
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i1);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} vslice_dummy_var_78 := dev_set_name.ref.ref.ref.i32($p27, .str.25, $p31, $i32);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p5, $mul.ref(0, 1792)), $mul.ref(16, 1));
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} $i35 := device_register($p34);
    call {:si_unique_call 135} {:cexpr "tmp___0"} boogie_si_record_i32($i35);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 1792)), $mul.ref(16, 1));
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} $i38 := device_create_file($p37, dev_attr_add_target);
    call {:si_unique_call 138} {:cexpr "tmp___1"} boogie_si_record_i32($i38);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p5, $mul.ref(0, 1792)), $mul.ref(16, 1));
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} $i41 := device_create_file($p40, dev_attr_ibdev);
    call {:si_unique_call 141} {:cexpr "tmp___2"} boogie_si_record_i32($i41);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 1792)), $mul.ref(16, 1));
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} $i44 := device_create_file($p43, dev_attr_port);
    call {:si_unique_call 143} {:cexpr "tmp___3"} boogie_si_record_i32($i44);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p8 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb16:
    assume $i45 == 1;
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p5, $mul.ref(0, 1792)), $mul.ref(16, 1));
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} device_unregister($p46);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p5);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} kfree($p47);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  $bb13:
    assume $i42 == 1;
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb9:
    assume $i39 == 1;
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb5:
    assume $i36 == 1;
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  SeqInstr_70:
    assume !assertsPassed;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 336366);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} __list_add($p0, $p3, $p1);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    return;
}



const ib_set_client_data: ref;

axiom ib_set_client_data == $sub.ref(0, 337398);

procedure ib_set_client_data($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ib_set_client_data($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 338430);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 339462);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed, $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 146} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} $p2 := ldv_kzalloc($i0, $i1);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 340494);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 341526);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    return;
}



const ldv_init_completion_148: ref;

axiom ldv_init_completion_148 == $sub.ref(0, 342558);

procedure ldv_init_completion_148($p0: ref);
  free requires assertsPassed;
  modifies $M.12;



implementation ldv_init_completion_148($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} ldv_linux_kernel_sched_completion_init_completion_released_of_srp_host();
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 343590);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_name: ref;

axiom dev_set_name == $sub.ref(0, 344622);

procedure dev_set_name.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_name.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 1} true;
    call {:si_unique_call 149} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 150} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const device_register: ref;

axiom device_register == $sub.ref(0, 345654);

procedure device_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 1} true;
    call {:si_unique_call 151} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 152} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const device_create_file: ref;

axiom device_create_file == $sub.ref(0, 346686);

procedure device_create_file($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_create_file($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 1} true;
    call {:si_unique_call 153} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 154} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_linux_kernel_sched_completion_init_completion_released_of_srp_host: ref;

axiom ldv_linux_kernel_sched_completion_init_completion_released_of_srp_host == $sub.ref(0, 347718);

procedure ldv_linux_kernel_sched_completion_init_completion_released_of_srp_host();
  free requires assertsPassed;
  modifies $M.12;



implementation ldv_linux_kernel_sched_completion_init_completion_released_of_srp_host()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $M.12 := 1;
    call {:si_unique_call 155} {:cexpr "ldv_linux_kernel_sched_completion_completion_released_of_srp_host"} boogie_si_record_i32(1);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    return;
}



const ldv_kzalloc: ref;

axiom ldv_kzalloc == $sub.ref(0, 348750);

procedure ldv_kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed, $CurrAddr;



implementation ldv_kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} {:cexpr "ldv_kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 157} {:cexpr "ldv_kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} ldv_check_alloc_flags($i1);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} $p2 := ldv_zalloc($i0);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} ldv_after_alloc($p2);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 349782);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} ldv_linux_alloc_irq_check_alloc_flags($i0);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} ldv_linux_alloc_usb_lock_check_alloc_flags($i0);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 350814);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $p1 := ldv_calloc(1, $i0);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_after_alloc: ref;

axiom ldv_after_alloc == $sub.ref(0, 351846);

procedure ldv_after_alloc($p0: ref);
  free requires assertsPassed;



implementation ldv_after_alloc($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    return;
}



const ldv_calloc: ref;

axiom ldv_calloc == $sub.ref(0, 352878);

procedure ldv_calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation ldv_calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} {:cexpr "ldv_calloc:arg:nmemb"} boogie_si_record_i64($i0);
    call {:si_unique_call 167} {:cexpr "ldv_calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $i2 := ldv_undef_int();
    call {:si_unique_call 169} {:cexpr "tmp___1"} boogie_si_record_i32($i2);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $r := $p11;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} $p4 := calloc($i0, $i1);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} ldv_assume($i7);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} $i8 := ldv_is_err($p4);
    call {:si_unique_call 173} {:cexpr "tmp___0"} boogie_si_record_i64($i8);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} ldv_assume($i10);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p11 := $p4;
    goto $bb3;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 353910);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 1} true;
    call {:si_unique_call 175} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 176} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 177} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 354942);

procedure ldv_is_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 4294967295);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_linux_alloc_irq_check_alloc_flags: ref;

axiom ldv_linux_alloc_irq_check_alloc_flags == $sub.ref(0, 355974);

procedure ldv_linux_alloc_irq_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_alloc_irq_check_alloc_flags($i0: i32)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i6: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} {:cexpr "ldv_linux_alloc_irq_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} $i1 := ldv_in_interrupt_context();
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 180} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, 32);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i6);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} ldv_assert_linux_alloc_irq__wrong_flags($i8);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb5;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const ldv_linux_alloc_usb_lock_check_alloc_flags: ref;

axiom ldv_linux_alloc_usb_lock_check_alloc_flags == $sub.ref(0, 357006);

procedure ldv_linux_alloc_usb_lock_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_alloc_usb_lock_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i5: i1;
  var $i4: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} {:cexpr "ldv_linux_alloc_usb_lock_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $i1 := $M.13;
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 16);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $i4 := 1;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 32);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $i4 := $i5;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i4);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} ldv_assert_linux_alloc_usb_lock__wrong_flags($i6);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb4;
}



const ldv_assert_linux_alloc_usb_lock__wrong_flags: ref;

axiom ldv_assert_linux_alloc_usb_lock__wrong_flags == $sub.ref(0, 358038);

procedure ldv_assert_linux_alloc_usb_lock__wrong_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_alloc_usb_lock__wrong_flags($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} {:cexpr "ldv_assert_linux_alloc_usb_lock__wrong_flags:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 1} true;
    call {:si_unique_call 185} __VERIFIER_error();
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_alloc_irq__wrong_flags: ref;

axiom ldv_assert_linux_alloc_irq__wrong_flags == $sub.ref(0, 359070);

procedure ldv_assert_linux_alloc_irq__wrong_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_alloc_irq__wrong_flags($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} {:cexpr "ldv_assert_linux_alloc_irq__wrong_flags:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 1} true;
    call {:si_unique_call 187} __VERIFIER_error();
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_malloc_unknown_size: ref;

axiom ldv_malloc_unknown_size == $sub.ref(0, 360102);

procedure ldv_malloc_unknown_size() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_malloc_unknown_size() returns ($r: ref)
{
  var $i0: i32;
  var $i1: i1;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $i0 := ldv_undef_int();
    call {:si_unique_call 189} {:cexpr "tmp___1"} boogie_si_record_i32($i0);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $p2 := external_allocated_data();
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} ldv_assume($i5);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} $i6 := ldv_is_err($p2);
    call {:si_unique_call 193} {:cexpr "tmp___0"} boogie_si_record_i64($i6);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} ldv_assume($i8);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $p9 := $p2;
    goto $bb3;
}



const external_allocated_data: ref;

axiom external_allocated_data == $sub.ref(0, 361134);

procedure external_allocated_data() returns ($r: ref);
  free requires assertsPassed;



implementation external_allocated_data() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} $p0 := external_alloc();
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const srp_release_dev: ref;

axiom srp_release_dev == $sub.ref(0, 362166);

procedure srp_release_dev($p0: ref);
  free requires assertsPassed;



implementation srp_release_dev($p0: ref)
{
  var $p1: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 16), 1792)), $mul.ref(1520, 1));
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} complete_($p3);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    return;
}



const complete_: ref;

axiom complete_ == $sub.ref(0, 363198);

procedure complete_($p0: ref);
  free requires assertsPassed;



implementation complete_($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    return;
}



const srp_rport_reconnect: ref;

axiom srp_rport_reconnect == $sub.ref(0, 364230);

procedure srp_rport_reconnect($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.25, $M.26, $M.27, $M.28, $M.29, $M.11, $M.15, $M.17, $M.18, $M.19, assertsPassed, $CurrAddr, $M.12, $M.10, $M.16;



implementation srp_rport_reconnect($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $i22: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i12: i32;
  var $i13: i32;
  var $i29: i32;
  var $i11: i32;
  var $i23: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $i45: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $i33: i32;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i69: i1;
  var $i70: i32;
  var $i72: i32;
  var $i73: i32;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i1;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i32;
  var $i88: i1;
  var $i78: i32;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $i60: i32;
  var $i61: i32;
  var $i92: i32;
  var $i59: i32;
  var $i71: i32;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $p100: ref;
  var $p101: ref;
  var $i102: i64;
  var $p103: ref;
  var $i104: i1;
  var $p107: ref;
  var $p108: ref;
  var $i109: i64;
  var $i110: i1;
  var $i105: i32;
  var $i106: i32;
  var $i111: i1;
  var $i112: i32;
  var $i114: i1;
  var $i115: i32;
  var $i116: i32;
  var $i117: i32;
  var $i118: i1;
  var $i97: i8;
  var $i98: i32;
  var $i99: i32;
  var $i119: i32;
  var $i96: i32;
  var $i113: i32;
  var $i120: i1;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2304)), $mul.ref(1440, 1));
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} srp_disconnect_target($p3);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.1, $p8);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i10 := $ult.i32(0, $i9);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $i11 := 0;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i23 := $i11;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.1, $p30);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $i32 := $ult.i32(0, $i31);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.1, $p56);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i58 := $ult.i32(0, $i57);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i59 := $i23;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i71 := $i59;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.1, $p93);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $i95 := $ult.i32(0, $i94);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i96 := $i71;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume !($i95 == 1);
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i113 := $i96;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i113, 0);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    assume {:branchcond $i120} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i7 := $i113;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb75:
    assume $i120 == 1;
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.1, $p121);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p122, $mul.ref(0, 3816)), $mul.ref(952, 1));
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} dev_printk.ref.ref.ref(.str.31, $p123, .str.32);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb57:
    assume $i95 == 1;
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i97, $i98, $i99 := 0, $i71, 0;
    goto $bb60;

  $bb60:
    call $p100, $p101, $i102, $p103, $i104, $p107, $p108, $i109, $i110, $i105, $i106, $i114, $i115, $i116, $i117, $i118, $i97, $i98, $i99, $i119 := srp_rport_reconnect_loop_$bb60($p3, $p93, $p100, $p101, $i102, $p103, $i104, $p107, $p108, $i109, $i110, $i105, $i106, $i114, $i115, $i116, $i117, $i118, $i97, $i98, $i99, $i119);
    goto $bb60_last;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.1, $p100);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i102 := $sext.i32.i64($i99);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($p101, $mul.ref($i102, 488));
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $i104 := $ne.i32($i98, 0);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i105, $i106 := $i99, $i98;
    assume true;
    goto $bb62, $bb64;

  $bb64:
    assume !($i104 == 1);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p101, $mul.ref($i102, 488)), $mul.ref(96, 1));
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.1, $p107);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i109 := $p2i.ref.i64($p108);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i110 := $eq.i64($i109, 0);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i105, $i106 := $i99, $i98;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i114 := $trunc.i8.i1($i97);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} $i115 := srp_connect_ch($p103, $i114);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    call {:si_unique_call 213} {:cexpr "ret"} boogie_si_record_i32($i115);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i116 := $add.i32($i99, 1);
    call {:si_unique_call 214} {:cexpr "i"} boogie_si_record_i32($i116);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.1, $p93);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $i118 := $ult.i32($i116, $i117);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $i119 := $i115;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i96 := $i119;
    goto $bb59;

  $bb72:
    assume $i118 == 1;
    assume {:verifier.code 0} true;
    $i97, $i98, $i99 := 1, $i115, $i116;
    goto $bb72_dummy;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb65:
    assume {:verifier.code 0} true;
    assume $i110 == 1;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i111 := $sgt.i32($i105, 1);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    $i112 := $i106;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i113 := $i112;
    goto $bb70;

  $bb67:
    assume $i111 == 1;
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $i112 := 0;
    goto $bb69;

  $bb62:
    assume {:verifier.code 0} true;
    assume $i104 == 1;
    goto $bb63;

  $bb37:
    assume $i58 == 1;
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i60, $i61 := $i23, 0;
    goto $bb40;

  $bb40:
    call $p62, $p63, $i64, $p65, $p66, $p67, $i68, $i69, $i70, $i72, $i73, $p74, $p75, $i76, $i77, $p79, $p80, $i81, $p82, $p83, $p84, $p85, $i86, $i87, $i88, $i78, $i89, $i90, $i91, $i60, $i61, $i92 := srp_rport_reconnect_loop_$bb40($p3, $p56, $p62, $p63, $i64, $p65, $p66, $p67, $i68, $i69, $i70, $i72, $i73, $p74, $p75, $i76, $i77, $p79, $p80, $i81, $p82, $p83, $p84, $p85, $i86, $i87, $i88, $i78, $i89, $i90, $i91, $i60, $i61, $i92);
    goto $bb40_last;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.1, $p62);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i61);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p63, $mul.ref($i64, 488));
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p63, $mul.ref($i64, 488)), $mul.ref(96, 1));
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.1, $p66);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $i69 := $eq.i64($i68, 0);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i70 := $i60;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} $i72 := srp_create_ch_ib($p65);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    call {:si_unique_call 206} {:cexpr "tmp___0"} boogie_si_record_i32($i72);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $i73 := $add.i32($i60, $i72);
    call {:si_unique_call 207} {:cexpr "ret"} boogie_si_record_i32($i73);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p63, $mul.ref($i64, 488)), $mul.ref(0, 1));
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} INIT_LIST_HEAD($p74);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(232, 1));
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.1, $p75);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i77 := $slt.i32(0, $i76);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i89 := $add.i32($i61, 1);
    call {:si_unique_call 211} {:cexpr "i"} boogie_si_record_i32($i89);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.1, $p56);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i91 := $ult.i32($i89, $i90);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i92 := $i73;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i59 := $i92;
    goto $bb39;

  $bb54:
    assume $i91 == 1;
    assume {:verifier.code 0} true;
    $i60, $i61 := $i73, $i89;
    goto $bb54_dummy;

  $bb46:
    assume $i77 == 1;
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i78 := 0;
    goto $bb49;

  $bb49:
    call $p79, $p80, $i81, $p82, $p83, $p84, $p85, $i86, $i87, $i88, $i78 := srp_rport_reconnect_loop_$bb49($p63, $i64, $p75, $p79, $p80, $i81, $p82, $p83, $p84, $p85, $i86, $i87, $i88, $i78);
    goto $bb49_last;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p63, $mul.ref($i64, 488)), $mul.ref(352, 1));
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.1, $p79);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i81 := $sext.i32.i64($i78);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p80, $mul.ref($i81, 8));
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.1, $p82);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p63, $mul.ref($i64, 488)), $mul.ref(0, 1));
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} list_add($p84, $p85);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $i86 := $add.i32($i78, 1);
    call {:si_unique_call 210} {:cexpr "j"} boogie_si_record_i32($i86);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.1, $p75);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i88 := $slt.i32($i86, $i87);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i88 == 1);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb51:
    assume $i88 == 1;
    assume {:verifier.code 0} true;
    $i78 := $i86;
    goto $bb51_dummy;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb42:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $i71 := $i70;
    goto $bb44;

  $bb17:
    assume $i32 == 1;
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb20;

  $bb20:
    call $p34, $p35, $i36, $p37, $p38, $p39, $i40, $i41, $p42, $i43, $i44, $p46, $p47, $i48, $p49, $i50, $i51, $i52, $i45, $i53, $i54, $i55, $i33 := srp_rport_reconnect_loop_$bb20($p3, $p30, $p34, $p35, $i36, $p37, $p38, $p39, $i40, $i41, $p42, $i43, $i44, $p46, $p47, $i48, $p49, $i50, $i51, $i52, $i45, $i53, $i54, $i55, $i33);
    goto $bb20_last;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.1, $p34);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i33);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p35, $mul.ref($i36, 488));
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p35, $mul.ref($i36, 488)), $mul.ref(96, 1));
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.1, $p38);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 0);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(236, 1));
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.1, $p42);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32(0, $i43);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i33, 1);
    call {:si_unique_call 204} {:cexpr "i"} boogie_si_record_i32($i53);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.1, $p30);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i55 := $ult.i32($i53, $i54);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i55 == 1);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb34:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $i33 := $i53;
    goto $bb34_dummy;

  $bb26:
    assume $i44 == 1;
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i45 := 0;
    goto $bb29;

  $bb29:
    call $p46, $p47, $i48, $p49, $i50, $i51, $i52, $i45 := srp_rport_reconnect_loop_$bb29($p35, $i36, $p37, $p42, $p46, $p47, $i48, $p49, $i50, $i51, $i52, $i45);
    goto $bb29_last;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p35, $mul.ref($i36, 488)), $mul.ref(368, 1));
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.1, $p46);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i45);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p47, $mul.ref($i48, 56));
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} srp_finish_req($p37, $p49, $0.ref, 524288);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i45, 1);
    call {:si_unique_call 203} {:cexpr "j"} boogie_si_record_i32($i50);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.1, $p42);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i50, $i51);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i52 == 1);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb31:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $i45 := $i50;
    goto $bb31_dummy;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i41 == 1;
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $i12, $i13 := 0, 0;
    goto $bb8;

  $bb8:
    call $p14, $p15, $i16, $p17, $p18, $p19, $i20, $i21, $i22, $i24, $i25, $i26, $i27, $i28, $i12, $i13, $i29 := srp_rport_reconnect_loop_$bb8($p3, $p8, $p14, $p15, $i16, $p17, $p18, $p19, $i20, $i21, $i22, $i24, $i25, $i26, $i27, $i28, $i12, $i13, $i29);
    goto $bb8_last;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i13);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p15, $mul.ref($i16, 488));
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p15, $mul.ref($i16, 488)), $mul.ref(96, 1));
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $i22 := $i12;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} $i24 := srp_new_cm_id($p17);
    call {:si_unique_call 199} {:cexpr "tmp"} boogie_si_record_i32($i24);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i12, $i24);
    call {:si_unique_call 200} {:cexpr "ret"} boogie_si_record_i32($i25);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i13, 1);
    call {:si_unique_call 201} {:cexpr "i"} boogie_si_record_i32($i26);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.1, $p8);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i28 := $ult.i32($i26, $i27);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $i29 := $i25;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i11 := $i29;
    goto $bb7;

  $bb14:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i12, $i13 := $i25, $i26;
    goto $bb14_dummy;

  $bb10:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb12;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb3;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb72_dummy:
    assume false;
    return;

  $bb60_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_945;

  $bb51_dummy:
    assume false;
    return;

  $bb49_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_921;

  $bb54_dummy:
    assume false;
    return;

  $bb40_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_893;

  $bb31_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_872;

  $bb34_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_849;

  $bb14_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_821;
}



const srp_terminate_io: ref;

axiom srp_terminate_io == $sub.ref(0, 365262);

procedure srp_terminate_io($p0: ref);
  free requires assertsPassed;
  modifies $M.14, $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.15, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr, $M.12, $M.10, $M.11, $M.17, $M.16;



implementation srp_terminate_io($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $i29: i1;
  var $i30: i32;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $i34: i1;
  var $i35: i32;
  var $i36: i64;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p9: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $i52: i32;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $i44: i32;
  var vslice_dummy_var_79: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2304)), $mul.ref(1440, 1));
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} $p6 := __scsi_iterate_devices($p5, $0.ref);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.1, $p41);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i43 := $ult.i32(0, $i42);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    return;

  $bb18:
    assume $i43 == 1;
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $i44 := 0;
    goto $bb21;

  $bb21:
    call $p45, $p46, $i47, $p48, $p49, $i50, $i51, $p53, $p54, $i55, $p56, $i57, $i58, $i59, $i52, $i60, $i61, $i62, $i44 := srp_terminate_io_loop_$bb21($p3, $p41, $p45, $p46, $i47, $p48, $p49, $i50, $i51, $p53, $p54, $i55, $p56, $i57, $i58, $i59, $i52, $i60, $i61, $i62, $i44);
    goto $bb21_last;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.1, $p45);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i44);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p46, $mul.ref($i47, 488));
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(236, 1));
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.1, $p49);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i51 := $slt.i32(0, $i50);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i60 := $add.i32($i44, 1);
    call {:si_unique_call 230} {:cexpr "i"} boogie_si_record_i32($i60);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.1, $p41);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i62 := $ult.i32($i60, $i61);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i62 == 1);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb31:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $i44 := $i60;
    goto $bb31_dummy;

  $bb23:
    assume $i51 == 1;
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i52 := 0;
    goto $bb26;

  $bb26:
    call $p53, $p54, $i55, $p56, $i57, $i58, $i59, $i52 := srp_terminate_io_loop_$bb26($p46, $i47, $p48, $p49, $p53, $p54, $i55, $p56, $i57, $i58, $i59, $i52);
    goto $bb26_last;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p46, $mul.ref($i47, 488)), $mul.ref(368, 1));
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.1, $p53);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i52);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p54, $mul.ref($i55, 56));
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} srp_finish_req($p48, $p56, $0.ref, 983040);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i52, 1);
    call {:si_unique_call 229} {:cexpr "j"} boogie_si_record_i32($i57);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.1, $p49);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i57, $i58);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i59 == 1);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb28:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    $i52 := $i57;
    goto $bb28_dummy;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $p9 := $p6;
    goto $bb4;

  $bb4:
    call $p10, $p11, $p12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $p38, $i39, $i40, $p9, vslice_dummy_var_79 := srp_terminate_io_loop_$bb4($p5, $p10, $p11, $p12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $p38, $i39, $i40, $p9, vslice_dummy_var_79);
    goto $bb4_last;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 3480)), $mul.ref(8, 1));
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 3704)), $mul.ref(2772, 1));
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.1, $p12);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    call {:si_unique_call 217} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i15);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 219} {:cexpr "tmp___1"} boogie_si_record_i64($i19);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i15, 0);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i32($i34);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} vslice_dummy_var_79 := ldv__builtin_expect($i36, 0);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} $p38 := __scsi_iterate_devices($p5, $p9);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i40 == 1);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb15:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $p9 := $p38;
    goto $bb15_dummy;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1(1);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $i22 := $xor.i1($i21, 1);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    call {:si_unique_call 220} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i23);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 222} {:cexpr "tmp"} boogie_si_record_i64($i27);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i23, 0);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i32($i29);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} $i32 := ldv__builtin_expect($i31, 0);
    call {:si_unique_call 225} {:cexpr "tmp___0"} boogie_si_record_i64($i32);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i33 == 1;
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} warn_slowpath_null(.str.20, 1174);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb28_dummy:
    assume false;
    return;

  $bb26_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1058;

  $bb31_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1046;

  $bb15_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_995;
}



const srp_rport_delete: ref;

axiom srp_rport_delete == $sub.ref(0, 366294);

procedure srp_rport_delete($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.11, assertsPassed;



implementation srp_rport_delete($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var vslice_dummy_var_80: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2304)), $mul.ref(1440, 1));
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} vslice_dummy_var_80 := srp_queue_remove_work($p3);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;
}



const __scsi_iterate_devices: ref;

axiom __scsi_iterate_devices == $sub.ref(0, 367326);

procedure __scsi_iterate_devices($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __scsi_iterate_devices($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} $p2 := external_alloc();
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 368358);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    return;
}



const srp_finish_req: ref;

axiom srp_finish_req == $sub.ref(0, 369390);

procedure srp_finish_req($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.14, $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.15, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr, $M.12, $M.10, $M.11, $M.17, $M.16;



implementation srp_finish_req($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} {:cexpr "srp_finish_req:arg:result"} boogie_si_record_i32($i3);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} $p4 := srp_claim_req($p0, $p1, $p2, $0.ref);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} srp_free_req($p0, $p1, $p4, 0);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, $p7, $i3);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 472)), $mul.ref(376, 1));
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.14, $p8);
    call {:si_unique_call 237} devirtbounce.1($p9, $p4);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;
}



const srp_claim_req: ref;

axiom srp_claim_req == $sub.ref(0, 370422);

procedure srp_claim_req($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $M.15, assertsPassed;



implementation srp_claim_req($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(16, 1));
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_113($p4);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p28 := $0.ref;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(16, 1));
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} ldv_spin_unlock_irqrestore_114($p29, $u0);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $r := $p28;
    return;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p2);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i10 == 1);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p2);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i15, $i16);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb3;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p3);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb11;

  $bb11:
    assume !($i19 == 1);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p3);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i22, $i23);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb3;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.1, $p25);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p27, $0.ref);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $p28 := $p26;
    goto $bb14;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb5;

  SeqInstr_124:
    assume !assertsPassed;
    return;
}



const srp_free_req: ref;

axiom srp_free_req == $sub.ref(0, 371454);

procedure srp_free_req($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.1, $M.15, assertsPassed, $CurrAddr, $M.16;



implementation srp_free_req($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} {:cexpr "srp_free_req:arg:req_lim_delta"} boogie_si_record_i32($i3);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} srp_unmap_data($p2, $p0, $p1);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(16, 1));
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_115($p4);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(88, 1));
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, $i3);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(88, 1));
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p8, $i7);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(16, 1));
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} ldv_spin_unlock_irqrestore_114($p9, $u0);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  SeqInstr_130:
    assume !assertsPassed;
    return;
}



const srp_unmap_data: ref;

axiom srp_unmap_data == $sub.ref(0, 372486);

procedure srp_unmap_data($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.16, assertsPassed;



implementation srp_unmap_data($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i8;
  var $i20: i1;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $i48: i32;
  var $p49: ref;
  var $i50: i1;
  var $p28: ref;
  var $i29: i32;
  var $p51: ref;
  var $i52: i16;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i16;
  var $i63: i32;
  var $p64: ref;
  var $i65: i16;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i1;
  var $p73: ref;
  var $i75: i32;
  var $p76: ref;
  var $i77: i1;
  var $p71: ref;
  var $i72: i32;
  var $i78: i32;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var vslice_dummy_var_81: i1;
  var vslice_dummy_var_82: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(96, 1));
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 464)), $mul.ref(168, 1));
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1792)), $mul.ref(0, 1));
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} $p11 := scsi_sglist($p0);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i13 == 1);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 472)), $mul.ref(304, 1));
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.1, $p14);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32($i15, 1);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i17 := $ugt.i32($i16, 1);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p8, $mul.ref(0, 64)), $mul.ref(62, 1));
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.1, $p18);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($i19);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $i65 := $load.i16($M.1, $p64);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $i66 := $sext.i16.i32($i65);
    call {:si_unique_call 246} {:cexpr "i"} boogie_si_record_i32($i66);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.1, $p68);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i70 := $sgt.i32($i66, 0);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} $i78 := scsi_sg_count($p0);
    call {:si_unique_call 254} {:cexpr "tmp___0"} boogie_si_record_i32($i78);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} $p79 := scsi_sglist($p0);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 472)), $mul.ref(304, 1));
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.1, $p80);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} ib_dma_unmap_sg($p10, $p79, $i78, $i81);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb25:
    assume $i70 == 1;
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $p71, $i72 := $p69, $i66;
    goto $bb28;

  $bb28:
    call $p73, $i75, $p76, $i77, $p71, $i72, vslice_dummy_var_82 := srp_unmap_data_loop_$bb28($p73, $i75, $p76, $i77, $p71, $i72, vslice_dummy_var_82);
    goto $bb28_last;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.1, $p71);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} vslice_dummy_var_82 := ib_fmr_pool_unmap($p73);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i75 := $sub.i32($i72, 1);
    call {:si_unique_call 258} {:cexpr "i"} boogie_si_record_i32($i75);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p71, $mul.ref(1, 8));
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i77 := $sgt.i32($i75, 0);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i77 == 1);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb30:
    assume $i77 == 1;
    assume {:verifier.code 0} true;
    $p71, $i72 := $p76, $i75;
    goto $bb30_dummy;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.1, $p21);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i23 := $sext.i16.i32($i22);
    call {:si_unique_call 245} {:cexpr "i"} boogie_si_record_i32($i23);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.1, $p25);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i27 := $sgt.i32($i23, 0);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.1, $p51);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $i53 := $sext.i16.i32($i52);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i54 == 1;
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(128, 1));
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.1, $p56);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.1, $p59);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i62 := $load.i16($M.1, $p61);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i63 := $sext.i16.i32($i62);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} srp_fr_pool_put($p57, $p60, $i63);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i27 == 1;
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p28, $i29 := $p26, $i23;
    goto $bb13;

  $bb13:
    call $p30, $p31, $p32, $p33, $i34, $i35, $i36, $p37, $p38, $p39, $p40, $p41, $p42, $p43, $i44, $p45, $p46, $i48, $p49, $i50, $p28, $i29, vslice_dummy_var_81 := srp_unmap_data_loop_$bb13($p1, $p4, $p30, $p31, $p32, $p33, $i34, $i35, $i36, $p37, $p38, $p39, $p40, $p41, $p42, $p43, $i44, $p45, $p46, $i48, $p49, $i50, $p28, $i29, vslice_dummy_var_81);
    goto $bb13_last;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.1, $p28);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.1, $p31);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.1, $p33);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} $i35 := srp_inv_rkey($p1, $i34);
    call {:si_unique_call 248} {:cexpr "res"} boogie_si_record_i32($i35);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i35, 0);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i48 := $sub.i32($i29, 1);
    call {:si_unique_call 251} {:cexpr "i"} boogie_si_record_i32($i48);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p28, $mul.ref(1, 8));
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i50 := $sgt.i32($i48, 0);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i50 == 1);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb18:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $p28, $i29 := $p49, $i48;
    goto $bb18_dummy;

  $bb15:
    assume $i36 == 1;
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.1, $p37);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 3816)), $mul.ref(952, 1));
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.1, $p28);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.1, $p41);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.1, $p43);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} dev_printk.ref.ref.ref.i32.i32(.str.39, $p39, .str.53, $i44, $i35);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.1, system_long_wq);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 464)), $mul.ref(280, 1));
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} vslice_dummy_var_81 := queue_work($p45, $p46);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb2;

  $bb30_dummy:
    assume false;
    return;

  $bb28_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1251;

  $bb18_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1196;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_115: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_115 == $sub.ref(0, 373518);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_115($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_115($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_srp_rdma_ch();
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_142:
    assume !assertsPassed;
    return;
}



const ldv_spin_unlock_irqrestore_114: ref;

axiom ldv_spin_unlock_irqrestore_114 == $sub.ref(0, 374550);

procedure ldv_spin_unlock_irqrestore_114($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv_spin_unlock_irqrestore_114($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} {:cexpr "ldv_spin_unlock_irqrestore_114:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_srp_rdma_ch();
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} spin_unlock_irqrestore($p0, $i1);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_srp_rdma_ch: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_srp_rdma_ch == $sub.ref(0, 375582);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_srp_rdma_ch();
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_srp_rdma_ch()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $i0 := $M.15;
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i3 := $M.15;
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} ldv_assume($i5);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $M.15 := 1;
    call {:si_unique_call 266} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_srp_rdma_ch"} boogie_si_record_i32(1);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_148:
    assume !assertsPassed;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 376614);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 377646);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_srp_rdma_ch: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_srp_rdma_ch == $sub.ref(0, 378678);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_srp_rdma_ch();
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_srp_rdma_ch()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $i0 := $M.15;
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $i3 := $M.15;
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} ldv_assume($i5);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $M.15 := 2;
    call {:si_unique_call 272} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_srp_rdma_ch"} boogie_si_record_i32(2);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_151:
    assume !assertsPassed;
    return;
}



const __ldv_linux_kernel_locking_spinlock_spin_lock: ref;

axiom __ldv_linux_kernel_locking_spinlock_spin_lock == $sub.ref(0, 379710);

procedure __ldv_linux_kernel_locking_spinlock_spin_lock($p0: ref);
  free requires assertsPassed;



implementation __ldv_linux_kernel_locking_spinlock_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    return;
}



const scsi_sglist: ref;

axiom scsi_sglist == $sub.ref(0, 380742);

procedure scsi_sglist($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation scsi_sglist($p0: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 472)), $mul.ref(320, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const srp_inv_rkey: ref;

axiom srp_inv_rkey == $sub.ref(0, 381774);

procedure srp_inv_rkey($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation srp_inv_rkey($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} $p3 := $alloc($mul.ref(96, $zext.i32.i64(1)));
    call {:si_unique_call 275} {:cexpr "srp_inv_rkey:arg:rkey"} boogie_si_record_i32($i1);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, $0.ref);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p5, 1);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, $0.ref);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(24, 1));
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p7, 0);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(28, 1));
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p8, 10);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(32, 1));
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p9, 0);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(36, 1));
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p11, $i1);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(40, 1));
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p14, 0);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(40, 1));
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p17, 0);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(40, 1));
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p20, 0);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(40, 1));
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p23, 0);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(40, 1));
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p26, 0);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(40, 1));
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p29, 0);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p30, 0);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(120, 1));
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.1, $p31);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} $i33 := ib_post_send($p32, $p3, $p2);
    call {:si_unique_call 277} {:cexpr "tmp"} boogie_si_record_i32($i33);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;
}



const dev_printk: ref;

axiom dev_printk == $sub.ref(0, 382806);

procedure dev_printk.ref.ref.ref($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation dev_printk.ref.ref.ref($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_printk.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32);
  free requires assertsPassed;



implementation dev_printk.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_printk.ref.ref.ref.i64.i64.i32.i64.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: i64, p.4: i64, p.5: i32, p.6: i64, p.7: ref, p.8: ref);
  free requires assertsPassed;



implementation dev_printk.ref.ref.ref.i64.i64.i32.i64.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: i64, p.4: i64, p.5: i32, p.6: i64, p.7: ref, p.8: ref)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_printk.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32);
  free requires assertsPassed;



implementation dev_printk.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_printk.ref.ref.ref.i64.i64.i64($p0: ref, $p1: ref, $p2: ref, p.3: i64, p.4: i64, p.5: i64);
  free requires assertsPassed;



implementation dev_printk.ref.ref.ref.i64.i64.i64($p0: ref, $p1: ref, $p2: ref, p.3: i64, p.4: i64, p.5: i64)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_printk.ref.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32);



procedure dev_printk.ref.ref.ref.i64.i64($p0: ref, $p1: ref, $p2: ref, p.3: i64, p.4: i64);



procedure dev_printk.ref.ref.ref.i64.i64.i32($p0: ref, $p1: ref, $p2: ref, p.3: i64, p.4: i64, p.5: i32);



procedure dev_printk.ref.ref.ref.i64($p0: ref, $p1: ref, $p2: ref, p.3: i64);
  free requires assertsPassed;



implementation dev_printk.ref.ref.ref.i64($p0: ref, $p1: ref, $p2: ref, p.3: i64)
{

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_printk.ref.ref.ref.ref.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: ref);
  free requires assertsPassed;



implementation dev_printk.ref.ref.ref.ref.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: ref)
{

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    return;
}



const srp_fr_pool_put: ref;

axiom srp_fr_pool_put == $sub.ref(0, 383838);

procedure srp_fr_pool_put($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation srp_fr_pool_put($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $i4: i1;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i5: i32;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} {:cexpr "srp_fr_pool_put:arg:n"} boogie_si_record_i32($i2);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_98($p3);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32(0, $i2);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} ldv_spin_unlock_irqrestore_97($p13, $u0);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $i6, $p7, $p8, $p9, $p10, $i11, $i12, $i5 := srp_fr_pool_put_loop_$bb4($p0, $p1, $i2, $i6, $p7, $p8, $p9, $p10, $i11, $i12, $i5);
    goto $bb4_last;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p1, $mul.ref($i6, 8));
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} list_add($p9, $p10);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i5, 1);
    call {:si_unique_call 281} {:cexpr "i"} boogie_si_record_i32($i11);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, $i2);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i11;
    goto $bb6_dummy;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1371;
}



const ib_fmr_pool_unmap: ref;

axiom ib_fmr_pool_unmap == $sub.ref(0, 384870);

procedure ib_fmr_pool_unmap($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ib_fmr_pool_unmap($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 1} true;
    call {:si_unique_call 283} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 284} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const scsi_sg_count: ref;

axiom scsi_sg_count == $sub.ref(0, 385902);

procedure scsi_sg_count($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_sg_count($p0: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 472)), $mul.ref(320, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.1, $p3);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ib_dma_unmap_sg: ref;

axiom ib_dma_unmap_sg == $sub.ref(0, 386934);

procedure ib_dma_unmap_sg($p0: ref, $p1: ref, $i2: i32, $i3: i32);
  free requires assertsPassed;



implementation ib_dma_unmap_sg($p0: ref, $p1: ref, $i2: i32, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} {:cexpr "ib_dma_unmap_sg:arg:nents"} boogie_si_record_i32($i2);
    call {:si_unique_call 286} {:cexpr "ib_dma_unmap_sg:arg:direction"} boogie_si_record_i32($i3);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2488)), $mul.ref(928, 1));
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2488)), $mul.ref(0, 1));
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} dma_unmap_sg_attrs($p13, $p1, $i2, $i3, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2488)), $mul.ref(928, 1));
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    call {:si_unique_call 287} devirtbounce.2($p11, $p0, $p1, $i2, $i3);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dma_unmap_sg_attrs: ref;

axiom dma_unmap_sg_attrs == $sub.ref(0, 387966);

procedure dma_unmap_sg_attrs($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref);
  free requires assertsPassed;



implementation dma_unmap_sg_attrs($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} {:cexpr "dma_unmap_sg_attrs:arg:nents"} boogie_si_record_i32($i2);
    call {:si_unique_call 290} {:cexpr "dma_unmap_sg_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} $p5 := get_dma_ops($p0);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} $i6 := valid_dma_direction($i3);
    call {:si_unique_call 293} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 295} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} debug_dma_unmap_sg($p0, $p1, $i2, $i3);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(56, 1));
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(56, 1));
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    call {:si_unique_call 298} devirtbounce.4($p17, $p0, $p1, $i2, $i3, $p4);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    call {:si_unique_call 296} devirtbounce.3(0, .str.44, 65, 12);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    assume false;
    return;
}



const get_dma_ops: ref;

axiom get_dma_ops == $sub.ref(0, 388998);

procedure get_dma_ops($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_dma_ops($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 300} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(1216, 1)), $mul.ref(0, 1));
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(1216, 1)), $mul.ref(0, 1));
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $p13 := $p16;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, dma_ops);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const valid_dma_direction: ref;

axiom valid_dma_direction == $sub.ref(0, 390030);

procedure valid_dma_direction($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation valid_dma_direction($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} {:cexpr "valid_dma_direction:arg:dma_direction"} boogie_si_record_i32($i0);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i1 := $ule.i32($i0, 2);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const debug_dma_unmap_sg: ref;

axiom debug_dma_unmap_sg == $sub.ref(0, 391062);

procedure debug_dma_unmap_sg($p0: ref, $p1: ref, $i2: i32, $i3: i32);
  free requires assertsPassed;



implementation debug_dma_unmap_sg($p0: ref, $p1: ref, $i2: i32, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} {:cexpr "debug_dma_unmap_sg:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 303} {:cexpr "debug_dma_unmap_sg:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_98: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_98 == $sub.ref(0, 392094);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_98($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_98($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_srp_fr_pool();
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_160:
    assume !assertsPassed;
    return;
}



const list_add: ref;

axiom list_add == $sub.ref(0, 393126);

procedure list_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} __list_add($p0, $p1, $p3);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irqrestore_97: ref;

axiom ldv_spin_unlock_irqrestore_97 == $sub.ref(0, 394158);

procedure ldv_spin_unlock_irqrestore_97($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_spin_unlock_irqrestore_97($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} {:cexpr "ldv_spin_unlock_irqrestore_97:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_srp_fr_pool();
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} spin_unlock_irqrestore($p0, $i1);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_163:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_srp_fr_pool: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_srp_fr_pool == $sub.ref(0, 395190);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_srp_fr_pool();
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_srp_fr_pool()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i0 := $M.16;
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i3 := $M.16;
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} ldv_assume($i5);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 312} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_srp_fr_pool"} boogie_si_record_i32(1);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_166:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_srp_fr_pool: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_srp_fr_pool == $sub.ref(0, 396222);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_srp_fr_pool();
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_srp_fr_pool()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i0 := $M.16;
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i3 := $M.16;
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} ldv_assume($i5);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $M.16 := 2;
    call {:si_unique_call 315} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_srp_fr_pool"} boogie_si_record_i32(2);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_169:
    assume !assertsPassed;
    return;
}



const ib_post_send: ref;

axiom ib_post_send == $sub.ref(0, 397254);

procedure ib_post_send($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ib_post_send($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2488)), $mul.ref(632, 1));
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    call {:si_unique_call 316} $i7 := devirtbounce.5($p6, $p0, $p1, $p2);
    call {:si_unique_call 317} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_113: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_113 == $sub.ref(0, 398286);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_113($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_113($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_srp_rdma_ch();
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_172:
    assume !assertsPassed;
    return;
}



const srp_disconnect_target: ref;

axiom srp_disconnect_target == $sub.ref(0, 399318);

procedure srp_disconnect_target($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.11, assertsPassed;



implementation srp_disconnect_target($p0: ref)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} $i1 := srp_change_conn_state($p0, 0);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 321} {:cexpr "tmp___0"} boogie_si_record_i8($i2);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i6 := $ult.i32(0, $i5);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb6;

  $bb6:
    call $p8, $p9, $i10, $p12, $p13, $i14, $i15, $p16, $p17, $i18, $i19, $p20, $p21, $p22, $i23, $i24, $i25, $i7 := srp_disconnect_target_loop_$bb6($p0, $p4, $p8, $p9, $i10, $p12, $p13, $i14, $i15, $p16, $p17, $i18, $i19, $p20, $p21, $p22, $i23, $i24, $i25, $i7);
    goto $bb6_last;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i7);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p9, $mul.ref($i10, 488)), $mul.ref(344, 1));
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i7, 1);
    call {:si_unique_call 325} {:cexpr "i"} boogie_si_record_i32($i23);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.1, $p4);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i25 := $ult.i32($i23, $i24);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i25 == 1);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb14:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i23;
    goto $bb14_dummy;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p9, $mul.ref($i10, 488)), $mul.ref(344, 1));
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} $i18 := ib_send_cm_dreq($p17, $0.ref, 0);
    call {:si_unique_call 323} {:cexpr "tmp"} boogie_si_record_i32($i18);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 3816)), $mul.ref(952, 1));
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} dev_printk.ref.ref.ref(.str.33, $p22, .str.34);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb14_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1516;
}



const srp_new_cm_id: ref;

axiom srp_new_cm_id == $sub.ref(0, 400350);

procedure srp_new_cm_id($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation srp_new_cm_id($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $i13: i8;
  var $i14: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i16;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $p43: ref;
  var $i18: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(96, 1));
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(168, 1));
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1792)), $mul.ref(0, 1));
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p0);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} $p10 := ib_create_cm_id($p8, srp_cm_handler, $p9);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} $i12 := IS_ERR($p11);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i8($i12);
    call {:si_unique_call 328} {:cexpr "tmp___0"} boogie_si_record_i8($i13);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(344, 1));
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.1, $p19);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(344, 1));
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p25, $p10);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(240, 1)), $mul.ref(24, 1));
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p27);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p28);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.1;
    cmdloc_dummy_var_1 := $M.1;
    call {:si_unique_call 332} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p29, $p30, 16, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_2;
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(240, 1)), $mul.ref(8, 1));
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(248, 1));
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p32);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p33);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.1;
    cmdloc_dummy_var_4 := $M.1;
    call {:si_unique_call 333} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p34, $p35, 16, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_5;
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(264, 1));
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.1, $p36);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(240, 1)), $mul.ref(62, 1));
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p39, $i37);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(144, 1));
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.1, $p40);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(240, 1)), $mul.ref(0, 1));
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p43, $i41);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(344, 1));
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.1, $p23);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} ib_destroy_cm_id($p24);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p10);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} $i16 := PTR_ERR($p15);
    call {:si_unique_call 330} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i16);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb3;
}



const srp_create_ch_ib: ref;

axiom srp_create_ch_ib == $sub.ref(0, 401382);

procedure srp_create_ch_ib($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.25, $M.26, $M.27, $M.28, $M.29, $M.17, $CurrAddr, assertsPassed;



implementation srp_create_ch_ib($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i1;
  var $i28: i8;
  var $i29: i1;
  var $p30: ref;
  var $i31: i64;
  var $i32: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $i44: i1;
  var $i45: i8;
  var $i46: i1;
  var $p47: ref;
  var $i48: i64;
  var $i49: i32;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $p62: ref;
  var $p64: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i1;
  var $i76: i8;
  var $i77: i1;
  var $p78: ref;
  var $i79: i64;
  var $i80: i32;
  var $i82: i32;
  var $i83: i1;
  var $p85: ref;
  var $i86: i8;
  var $i87: i1;
  var $p88: ref;
  var $i89: i8;
  var $i90: i1;
  var $p91: ref;
  var $p92: ref;
  var $i93: i1;
  var $i94: i8;
  var $i95: i1;
  var $p96: ref;
  var $i97: i64;
  var $i98: i32;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i64;
  var $i106: i1;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i8;
  var $i114: i1;
  var $p115: ref;
  var $i116: i8;
  var $i117: i1;
  var $p118: ref;
  var $p119: ref;
  var $i120: i1;
  var $i121: i8;
  var $i122: i1;
  var $p123: ref;
  var $i124: i64;
  var $i125: i32;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: i64;
  var $i133: i1;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $i141: i64;
  var $i142: i1;
  var $p143: ref;
  var $p144: ref;
  var $i145: i64;
  var $i146: i1;
  var $p147: ref;
  var $p148: ref;
  var $p150: ref;
  var $p151: ref;
  var $i152: i64;
  var $i153: i1;
  var $p154: ref;
  var $p155: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $i84: i32;
  var $i81: i32;
  var $i50: i32;
  var $i33: i32;
  var $p164: ref;
  var $i16: i32;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(96, 1));
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(168, 1));
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1792)), $mul.ref(0, 1));
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(62, 1));
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.1, $p7);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, 1);
    call {:si_unique_call 334} {:cexpr "m"} boogie_si_record_i32($i11);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} $p12 := kzalloc(88, 208);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p0);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(232, 1));
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.1, $p20);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, 1);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(380, 1));
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.1, $p23);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} $p25 := ib_create_cq($p18, srp_recv_completion, $0.ref, $p19, $i22, $i24);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} $i27 := IS_ERR($p26);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i8($i27);
    call {:si_unique_call 338} {:cexpr "tmp___1"} boogie_si_record_i8($i28);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1($i28);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.1, $p34);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p0);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(232, 1));
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.1, $p37);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i39 := $mul.i32($i11, $i38);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(380, 1));
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.1, $p40);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} $p42 := ib_create_cq($p35, srp_send_completion, $0.ref, $p36, $i39, $i41);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} $i44 := IS_ERR($p43);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $i45 := $zext.i1.i8($i44);
    call {:si_unique_call 345} {:cexpr "tmp___3"} boogie_si_record_i8($i45);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i8.i1($i45);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} vslice_dummy_var_84 := ib_req_notify_cq($p25, 2);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p13, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p52, srp_qp_event);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(232, 1));
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.1, $p53);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i55 := $mul.i32($i11, $i54);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 88)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p57, $i55);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(232, 1));
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.1, $p58);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $i60 := $add.i32($i59, 1);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 88)), $mul.ref(48, 1)), $mul.ref(4, 1));
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p62, $i60);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 88)), $mul.ref(48, 1)), $mul.ref(12, 1));
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p64, 1);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 88)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p66, 1);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p13, $mul.ref(0, 88)), $mul.ref(68, 1));
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p67, 1);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p13, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p68, 2);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p13, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p69, $p42);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p13, $mul.ref(0, 88)), $mul.ref(24, 1));
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p70, $p25);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.1, $p71);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} $p73 := ib_create_qp($p72, $p13);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} $i75 := IS_ERR($p74);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i76 := $zext.i1.i8($i75);
    call {:si_unique_call 353} {:cexpr "tmp___5"} boogie_si_record_i8($i76);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i8.i1($i76);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} $i82 := srp_init_qp($p2, $p73);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    call {:si_unique_call 359} {:cexpr "ret"} boogie_si_record_i32($i82);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(62, 1));
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $i86 := $load.i8($M.1, $p85);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i8.i1($i86);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i87 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(62, 1));
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i113 := $load.i8($M.1, $p112);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i114 := $trunc.i8.i1($i113);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb35;

  $bb35:
    assume !($i114 == 1);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(60, 1));
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i116 := $load.i8($M.1, $p115);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i117 := $trunc.i8.i1($i116);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i117 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(120, 1));
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $p140 := $load.ref($M.1, $p139);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i141 := $p2i.ref.i64($p140);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i142 := $ne.i64($i141, 0);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    assume {:branchcond $i142} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(112, 1));
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.1, $p143);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i145 := $p2i.ref.i64($p144);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i146 := $ne.i64($i145, 0);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(104, 1));
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.1, $p150);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $i152 := $p2i.ref.i64($p151);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i153 := $ne.i64($i152, 0);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    assume {:branchcond $i153} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(120, 1));
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p157, $p73);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(112, 1));
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p158, $p25);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(104, 1));
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p159, $p42);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $p160 := $bitcast.ref.ref($p13);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} kfree($p160);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb51:
    assume $i153 == 1;
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(104, 1));
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.1, $p154);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} vslice_dummy_var_88 := ib_destroy_cq($p155);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb48:
    assume $i146 == 1;
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(112, 1));
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.1, $p147);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} vslice_dummy_var_87 := ib_destroy_cq($p148);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb45:
    assume $i142 == 1;
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} srp_destroy_qp($p0);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    goto $bb47;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i117 == 1;
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} $p118 := srp_alloc_fmr_pool($p2);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p118);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} $i120 := IS_ERR($p119);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i121 := $zext.i1.i8($i120);
    call {:si_unique_call 371} {:cexpr "tmp___9"} boogie_si_record_i8($i121);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i122 := $trunc.i8.i1($i121);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(128, 1));
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $p130 := $bitcast.ref.ref($p129);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.1, $p130);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $i132 := $p2i.ref.i64($p131);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i133 := $ne.i64($i132, 0);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(128, 1));
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p137);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p138, $p118);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume $i133 == 1;
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(128, 1));
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $p135 := $bitcast.ref.ref($p134);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.1, $p135);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} ib_destroy_fmr_pool($p136);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb38:
    assume $i122 == 1;
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p118);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} $i124 := PTR_ERR($p123);
    call {:si_unique_call 373} {:cexpr "tmp___8"} boogie_si_record_i64($i124);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i125 := $trunc.i64.i32($i124);
    call {:si_unique_call 374} {:cexpr "ret"} boogie_si_record_i32($i125);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.1, $p126);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p127, $mul.ref(0, 3816)), $mul.ref(952, 1));
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} dev_printk.ref.ref.ref.i32(.str.37, $p128, .str.55, $i125);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i84 := $i125;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} vslice_dummy_var_86 := ib_destroy_qp($p73);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $i81 := $i84;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} vslice_dummy_var_85 := ib_destroy_cq($p42);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i50 := $i81;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} vslice_dummy_var_83 := ib_destroy_cq($p25);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $i33 := $i50;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $p164 := $bitcast.ref.ref($p13);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} kfree($p164);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i16 := $i33;
    goto $bb3;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i114 == 1;
    goto $bb34;

  $bb21:
    assume $i87 == 1;
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(61, 1));
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.1, $p88);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i8.i1($i89);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i90 == 1);
    goto $bb23;

  $bb24:
    assume $i90 == 1;
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $p91 := srp_alloc_fr_pool($p2);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $i93 := IS_ERR($p92);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i94 := $zext.i1.i8($i93);
    call {:si_unique_call 363} {:cexpr "tmp___7"} boogie_si_record_i8($i94);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i8.i1($i94);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(128, 1));
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p102);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.1, $p103);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i105 := $p2i.ref.i64($p104);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i106 := $ne.i64($i105, 0);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(128, 1));
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p110);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p111, $p91);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb29:
    assume $i106 == 1;
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(128, 1));
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p107);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.1, $p108);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} srp_destroy_fr_pool($p109);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i95 == 1;
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p91);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} $i97 := PTR_ERR($p96);
    call {:si_unique_call 365} {:cexpr "tmp___6"} boogie_si_record_i64($i97);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i64.i32($i97);
    call {:si_unique_call 366} {:cexpr "ret"} boogie_si_record_i32($i98);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.1, $p99);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p100, $mul.ref(0, 3816)), $mul.ref(952, 1));
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} dev_printk.ref.ref.ref.i32(.str.37, $p101, .str.54, $i98);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i84 := $i98;
    goto $bb19;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i83 == 1;
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i84 := $i82;
    goto $bb19;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i77 == 1;
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p73);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} $i79 := PTR_ERR($p78);
    call {:si_unique_call 355} {:cexpr "tmp___4"} boogie_si_record_i64($i79);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i64.i32($i79);
    call {:si_unique_call 356} {:cexpr "ret"} boogie_si_record_i32($i80);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i81 := $i80;
    goto $bb15;

  $bb9:
    assume $i46 == 1;
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p42);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} $i48 := PTR_ERR($p47);
    call {:si_unique_call 347} {:cexpr "tmp___2"} boogie_si_record_i64($i48);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i64.i32($i48);
    call {:si_unique_call 348} {:cexpr "ret"} boogie_si_record_i32($i49);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $i50 := $i49;
    goto $bb11;

  $bb5:
    assume $i29 == 1;
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p25);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} $i31 := PTR_ERR($p30);
    call {:si_unique_call 340} {:cexpr "tmp___0"} boogie_si_record_i64($i31);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i64.i32($i31);
    call {:si_unique_call 341} {:cexpr "ret"} boogie_si_record_i32($i32);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb7;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_178:
    assume !assertsPassed;
    return;
}



const srp_connect_ch: ref;

axiom srp_connect_ch == $sub.ref(0, 402414);

procedure srp_connect_ch($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.17, $M.18, $M.19, $M.11, assertsPassed, $CurrAddr;



implementation srp_connect_ch($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i8;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $i24: i1;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $i29: i1;
  var $i30: i32;
  var $i31: i64;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p37: ref;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $i42: i32;
  var $i41: i32;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $i72: i1;
  var $i36: i32;
  var vslice_dummy_var_89: i64;
  var vslice_dummy_var_90: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 381} {:cexpr "srp_connect_ch:arg:multich"} boogie_si_record_i1($i1);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(96, 1));
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i2);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $i6 := 0;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 464)), $mul.ref(272, 1));
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.1, $p7);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i6);
    call {:si_unique_call 382} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i10);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 384} {:cexpr "tmp___1"} boogie_si_record_i64($i14);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i10, 0);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i32($i29);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} vslice_dummy_var_89 := ldv__builtin_expect($i31, 0);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p33, 0);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} $i34 := srp_lookup_path($p0);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    call {:si_unique_call 393} {:cexpr "ret"} boogie_si_record_i32($i34);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(136, 1));
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} ldv_init_completion_100($p37);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1($i2);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} $i39 := srp_send_req($p0, $i38);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    call {:si_unique_call 396} {:cexpr "ret"} boogie_si_record_i32($i39);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $i41 := $i39;
    assume true;
    goto $bb17, $bb19;

  $bb19:
    assume !($i40 == 1);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    call $i42, $p43, $i44, $i45, $i46, $p47, $i48, $i49, $p50, $i51, $i52, $p53, $i54, $i55, $i60, $i61, $i62, $i71, $i72 := srp_connect_ch_loop_$bb20($p0, $p37, $i38, $i42, $p43, $i44, $i45, $i46, $p47, $i48, $i49, $p50, $i51, $i52, $p53, $i54, $i55, $i60, $i61, $i62, $i71, $i72);
    goto $bb20_last;

  $bb22:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(136, 1));
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} $i44 := ldv_wait_for_completion_interruptible_112($p43);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    call {:si_unique_call 398} {:cexpr "ret"} boogie_si_record_i32($i44);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i44, 0);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i46 := $i44;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(232, 1));
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.1, $p47);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 0);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(232, 1));
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.1, $p50);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 1);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(232, 1));
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.1, $p53);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 2);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(232, 1));
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.1, $p56);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 3);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(232, 1));
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.1, $p69);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i36 := $i70;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $r := $i36;
    return;

  $bb38:
    assume $i58 == 1;
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p4, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.1, $p63);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 3816)), $mul.ref(952, 1));
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} dev_printk.ref.ref.ref(.str.39, $p65, .str.76);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(232, 1));
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p66, $sub.i32(0, 104));
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(232, 1));
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.1, $p67);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i36 := $i68;
    goto $bb15;

  $bb34:
    assume $i55 == 1;
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} ldv_init_completion_100($p37);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} $i71 := srp_send_req($p0, $i38);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    call {:si_unique_call 405} {:cexpr "ret"} boogie_si_record_i32($i71);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i42 := $i71;
    assume true;
    goto $bb21, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb48_dummy;

  $bb21:
    assume $i72 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $i41 := $i42;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i36 := $i41;
    goto $bb15;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i52 == 1;
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $i60 := srp_lookup_path($p0);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    call {:si_unique_call 401} {:cexpr "ret"} boogie_si_record_i32($i60);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i62 := $i60;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb43:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $i36 := $i62;
    goto $bb15;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i49 == 1;
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} vslice_dummy_var_90 := srp_change_conn_state($p4, 1);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb15;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i36 := $i46;
    goto $bb15;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb18;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i35 == 1;
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $i36 := $i34;
    goto $bb15;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1(1);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i17 := $xor.i1($i16, 1);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    call {:si_unique_call 385} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i18);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 387} {:cexpr "tmp"} boogie_si_record_i64($i22);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i18, 0);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 390} {:cexpr "tmp___0"} boogie_si_record_i64($i27);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i28 == 1;
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i23 == 1;
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} warn_slowpath_null(.str.20, 993);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb48_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto $bb22;
}



const srp_lookup_path: ref;

axiom srp_lookup_path == $sub.ref(0, 403446);

procedure srp_lookup_path($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.17, assertsPassed;



implementation srp_lookup_path($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i8;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(96, 1));
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(240, 1)), $mul.ref(60, 1));
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p4, 1);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(136, 1));
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} ldv_init_completion_100($p5);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(168, 1));
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1792)), $mul.ref(0, 1));
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(168, 1));
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 1792)), $mul.ref(8, 1));
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.1, $p14);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(240, 1));
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p0);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(328, 1));
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} $i21 := ib_sa_path_rec_get(srp_sa_client, $p11, $i17, $p18, 1094374709451030528, 1000, 208, srp_path_rec_completion, $p19, $p20);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(336, 1));
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p22, $i21);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(336, 1));
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.1, $p23);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 0);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(136, 1));
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} $i30 := ldv_wait_for_completion_interruptible_103($p29);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    call {:si_unique_call 409} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i30, 0);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(232, 1));
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.1, $p32);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, 0);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(232, 1));
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.1, $p38);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i28 := $i39;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb8:
    assume $i34 == 1;
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.1, $p35);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 3816)), $mul.ref(952, 1));
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} dev_printk.ref.ref.ref(.str.37, $p37, .str.77);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i31 == 1;
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i28 := $i30;
    goto $bb3;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i25 == 1;
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(336, 1));
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.1, $p26);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $i28 := $i27;
    goto $bb3;
}



const ldv_init_completion_100: ref;

axiom ldv_init_completion_100 == $sub.ref(0, 404478);

procedure ldv_init_completion_100($p0: ref);
  free requires assertsPassed;
  modifies $M.17;



implementation ldv_init_completion_100($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} ldv_linux_kernel_sched_completion_init_completion_done_of_srp_rdma_ch();
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    return;
}



const srp_send_req: ref;

axiom srp_send_req == $sub.ref(0, 405510);

procedure srp_send_req($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.18, $M.19, $CurrAddr, assertsPassed;



implementation srp_send_req($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i8;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p31: ref;
  var $p32: ref;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $p48: ref;
  var $p50: ref;
  var $p52: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i8;
  var $p59: ref;
  var $p61: ref;
  var $p63: ref;
  var $p65: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $p72: ref;
  var $p74: ref;
  var $i75: i1;
  var $i76: i8;
  var $p78: ref;
  var $p79: ref;
  var $i80: i16;
  var $i81: i32;
  var $i82: i1;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $i131: i32;
  var $i132: i1;
  var $p133: ref;
  var $i134: i64;
  var $i135: i64;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p140: ref;
  var $p141: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $i157: i32;
  var $p158: ref;
  var $i10: i32;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 412} {:cexpr "srp_send_req:arg:multich"} boogie_si_record_i1($i1);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(96, 1));
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} $p5 := kzalloc(128, 208);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(240, 1));
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p13, $p11);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p15, $0.ref);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 464)), $mul.ref(144, 1));
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.1, $p16);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p19, $i17);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(120, 1));
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 128)), $mul.ref(120, 1));
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.1, $p22);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p25, $i23);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(120, 1));
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 128)), $mul.ref(124, 1));
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.1, $p28);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(28, 1));
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p31, $i29);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p7, $mul.ref(0, 128)), $mul.ref(64, 1));
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p35, $p32);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p37, 64);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(53, 1));
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p39, 1);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} get_random_bytes($p42, 4);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.1, $p44);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i45, 16777215);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p48, $i46);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(50, 1));
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p50, 4);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(52, 1));
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p52, 20);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(54, 1));
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p54, 20);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p4, $mul.ref(0, 464)), $mul.ref(244, 1));
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.1, $p55);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i8($i56);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(55, 1));
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p59, $i57);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p61, 7);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(57, 1));
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p63, 15);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(0, 1));
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p65, 0);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(8, 1));
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p67, 0);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p4, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.1, $p68);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} $i70 := __fswab32($i69);
    call {:si_unique_call 416} {:cexpr "tmp___0"} boogie_si_record_i32($i70);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(16, 1));
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p72, $i70);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(24, 1));
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p74, 1536);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i8.i1($i2);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i76 := $zext.i1.i8($i75);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(26, 1));
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p78, $i76);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p4, $mul.ref(0, 464)), $mul.ref(160, 1));
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $i80 := $load.i16($M.1, $p79);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $i81 := $zext.i16.i32($i80);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 65280);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i82 == 1);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(32, 1));
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p108);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p4, $mul.ref(0, 464)), $mul.ref(152, 1));
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p110);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.1;
    cmdloc_dummy_var_19 := $M.1;
    call {:si_unique_call 421} cmdloc_dummy_var_20 := $memcpy.i8(cmdloc_dummy_var_18, cmdloc_dummy_var_19, $p109, $p111, 8, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_20;
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(32, 1));
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p113);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($p114, $mul.ref(8, 1));
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p4, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p116);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p117, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p118);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.1;
    cmdloc_dummy_var_22 := $M.1;
    call {:si_unique_call 422} cmdloc_dummy_var_23 := $memcpy.i8(cmdloc_dummy_var_21, cmdloc_dummy_var_22, $p115, $p119, 8, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_23;
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(48, 1));
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p121);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p4, $mul.ref(0, 464)), $mul.ref(128, 1));
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p123);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_24 := $M.1;
    cmdloc_dummy_var_25 := $M.1;
    call {:si_unique_call 423} cmdloc_dummy_var_26 := $memcpy.i8(cmdloc_dummy_var_24, cmdloc_dummy_var_25, $p122, $p124, 8, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_26;
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(48, 1));
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $p127 := $bitcast.ref.ref($p126);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($p127, $mul.ref(8, 1));
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p4, $mul.ref(0, 464)), $mul.ref(136, 1));
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $p130 := $bitcast.ref.ref($p129);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_27 := $M.1;
    cmdloc_dummy_var_28 := $M.1;
    call {:si_unique_call 424} cmdloc_dummy_var_29 := $memcpy.i8(cmdloc_dummy_var_27, cmdloc_dummy_var_28, $p128, $p130, 8, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_29;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} $i131 := srp_target_is_topspin($p4);
    call {:si_unique_call 426} {:cexpr "tmp___2"} boogie_si_record_i32($i131);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i132 := $ne.i32($i131, 0);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    assume {:branchcond $i132} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(344, 1));
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.1, $p154);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p7, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} $i157 := ib_send_cm_req($p155, $p156);
    call {:si_unique_call 433} {:cexpr "status"} boogie_si_record_i32($i157);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $p158 := $bitcast.ref.ref($p7);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} kfree($p158);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i10 := $i157;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb8:
    assume $i132 == 1;
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p4, $mul.ref(0, 464)), $mul.ref(136, 1));
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i134 := $load.i64($M.1, $p133);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} $i135 := __fswab64($i134);
    call {:si_unique_call 428} {:cexpr "tmp___1"} boogie_si_record_i64($i135);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p4, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.1, $p136);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p137, $mul.ref(0, 3816)), $mul.ref(952, 1));
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} dev_printk.ref.ref.ref.i64(.str.33, $p138, .str.79, $i135);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(32, 1));
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $p141 := $bitcast.ref.ref($p140);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_30 := $M.1;
    call {:si_unique_call 430} cmdloc_dummy_var_31 := $memset.i8(cmdloc_dummy_var_30, $p141, 0, 8, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_31;
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(32, 1));
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $p144 := $bitcast.ref.ref($p143);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($p144, $mul.ref(8, 1));
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p4, $mul.ref(0, 464)), $mul.ref(168, 1));
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.1, $p146);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p147, $mul.ref(0, 1792)), $mul.ref(0, 1));
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.1, $p148);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p149, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.1, $p150);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p151, $mul.ref(0, 2488)), $mul.ref(2472, 1));
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $p153 := $bitcast.ref.ref($p152);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_32 := $M.1;
    cmdloc_dummy_var_33 := $M.1;
    call {:si_unique_call 431} cmdloc_dummy_var_34 := $memcpy.i8(cmdloc_dummy_var_32, cmdloc_dummy_var_33, $p145, $p153, 8, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_34;
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i82 == 1;
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(32, 1));
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p4, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.1;
    cmdloc_dummy_var_7 := $M.1;
    call {:si_unique_call 417} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p85, $p89, 8, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_8;
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(32, 1));
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($p92, $mul.ref(8, 1));
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p4, $mul.ref(0, 464)), $mul.ref(152, 1));
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.1;
    cmdloc_dummy_var_10 := $M.1;
    call {:si_unique_call 418} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p93, $p95, 8, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_11;
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(48, 1));
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p97);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p4, $mul.ref(0, 464)), $mul.ref(136, 1));
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.1;
    cmdloc_dummy_var_13 := $M.1;
    call {:si_unique_call 419} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p98, $p100, 8, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_14;
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(48, 1));
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p102);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($p103, $mul.ref(8, 1));
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p4, $mul.ref(0, 464)), $mul.ref(128, 1));
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p105);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.1;
    cmdloc_dummy_var_16 := $M.1;
    call {:si_unique_call 420} cmdloc_dummy_var_17 := $memcpy.i8(cmdloc_dummy_var_15, cmdloc_dummy_var_16, $p104, $p106, 8, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_17;
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_211:
    assume !assertsPassed;
    return;
}



const ldv_wait_for_completion_interruptible_112: ref;

axiom ldv_wait_for_completion_interruptible_112 == $sub.ref(0, 406542);

procedure ldv_wait_for_completion_interruptible_112($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.17, assertsPassed;



implementation ldv_wait_for_completion_interruptible_112($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} ldv_linux_kernel_sched_completion_wait_for_completion_done_of_srp_rdma_ch();
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} $i1 := wait_for_completion_interruptible($p0);
    call {:si_unique_call 437} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_214:
    assume !assertsPassed;
    return;
}



const srp_change_conn_state: ref;

axiom srp_change_conn_state == $sub.ref(0, 407574);

procedure srp_change_conn_state($p0: ref, $i1: i1) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.1, $M.11, assertsPassed;



implementation srp_change_conn_state($p0: ref, $i1: i1) returns ($r: i1)
{
  var $i2: i8;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i8;
  var $p15: ref;
  var $i16: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 438} {:cexpr "srp_change_conn_state:arg:connected"} boogie_si_record_i1($i1);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} ldv_spin_lock_irq_104($p3);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(272, 1));
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.1, $p4);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i2);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i7, $i9);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} ldv_spin_unlock_irq_105($p15);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i14);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(272, 1));
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i8($i11);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p12, $i13);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb3;

  SeqInstr_217:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_sched_completion_wait_for_completion_done_of_srp_rdma_ch: ref;

axiom ldv_linux_kernel_sched_completion_wait_for_completion_done_of_srp_rdma_ch == $sub.ref(0, 408606);

procedure ldv_linux_kernel_sched_completion_wait_for_completion_done_of_srp_rdma_ch();
  free requires assertsPassed;
  modifies $M.17, assertsPassed;



implementation ldv_linux_kernel_sched_completion_wait_for_completion_done_of_srp_rdma_ch()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $i0 := $M.17;
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} ldv_assert_linux_kernel_sched_completion__wait_without_init($i2);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $M.17 := 2;
    call {:si_unique_call 442} {:cexpr "ldv_linux_kernel_sched_completion_completion_done_of_srp_rdma_ch"} boogie_si_record_i32(2);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_223:
    assume !assertsPassed;
    return;
}



const wait_for_completion_interruptible: ref;

axiom wait_for_completion_interruptible == $sub.ref(0, 409638);

procedure wait_for_completion_interruptible($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation wait_for_completion_interruptible($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 1} true;
    call {:si_unique_call 443} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 444} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const get_random_bytes: ref;

axiom get_random_bytes == $sub.ref(0, 410670);

procedure get_random_bytes($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation get_random_bytes($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} {:cexpr "get_random_bytes:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    return;
}



const __fswab32: ref;

axiom __fswab32 == $sub.ref(0, 411702);

procedure __fswab32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __fswab32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} {:cexpr "__fswab32:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} $i1 := llvm.bswap.i32($i0);
    call {:si_unique_call 448} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 412734);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const srp_target_is_topspin: ref;

axiom srp_target_is_topspin == $sub.ref(0, 413766);

procedure srp_target_is_topspin($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.18, $M.19, $CurrAddr;



implementation srp_target_is_topspin($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i16: i32;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} $p1 := $alloc($mul.ref(3, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} $p2 := $alloc($mul.ref(3, $zext.i32.i64(1)));
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p3, 0);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p4, 5);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(2, 1));
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p5, $sub.i8(0, 83));
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $M.19 := $store.i8($M.19, $p6, 0);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $M.19 := $store.i8($M.19, $p7, 27);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 3)), $mul.ref(2, 1));
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $M.19 := $store.i8($M.19, $p8, 13);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i9 := $M.20;
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(136, 1));
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p1);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} $i14 := memcmp($p12, $p13, 3);
    call {:si_unique_call 452} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(136, 1));
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p2);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} $i20 := memcmp($p18, $p19, 3);
    call {:si_unique_call 454} {:cexpr "tmp___0"} boogie_si_record_i32($i20);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i16 := $i22;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i23 := $i16;
    goto $bb9;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i22 := 1;
    goto $bb8;

  $bb3:
    assume $i15 == 1;
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb5;
}



const __fswab64: ref;

axiom __fswab64 == $sub.ref(0, 414798);

procedure __fswab64($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __fswab64($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} {:cexpr "__fswab64:arg:val"} boogie_si_record_i64($i0);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} $i1 := llvm.bswap.i64($i0);
    call {:si_unique_call 457} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 415830);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const ib_send_cm_req: ref;

axiom ib_send_cm_req == $sub.ref(0, 416862);

procedure ib_send_cm_req($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ib_send_cm_req($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 1} true;
    call {:si_unique_call 458} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 459} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const llvm.bswap.i64: ref;

axiom llvm.bswap.i64 == $sub.ref(0, 417894);

procedure llvm.bswap.i64($i0: i64) returns ($r: i64);



const memcmp: ref;

axiom memcmp == $sub.ref(0, 418926);

procedure memcmp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const llvm.bswap.i32: ref;

axiom llvm.bswap.i32 == $sub.ref(0, 419958);

procedure llvm.bswap.i32($i0: i32) returns ($r: i32);



const ldv_linux_kernel_sched_completion_init_completion_done_of_srp_rdma_ch: ref;

axiom ldv_linux_kernel_sched_completion_init_completion_done_of_srp_rdma_ch == $sub.ref(0, 420990);

procedure ldv_linux_kernel_sched_completion_init_completion_done_of_srp_rdma_ch();
  free requires assertsPassed;
  modifies $M.17;



implementation ldv_linux_kernel_sched_completion_init_completion_done_of_srp_rdma_ch()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $M.17 := 1;
    call {:si_unique_call 460} {:cexpr "ldv_linux_kernel_sched_completion_completion_done_of_srp_rdma_ch"} boogie_si_record_i32(1);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    return;
}



const srp_path_rec_completion: ref;

axiom srp_path_rec_completion == $sub.ref(0, 422022);

procedure srp_path_rec_completion($i0: i32, $p1: ref, $p2: ref);



const ib_sa_path_rec_get: ref;

axiom ib_sa_path_rec_get == $sub.ref(0, 423054);

procedure ib_sa_path_rec_get($p0: ref, $p1: ref, $i2: i8, $p3: ref, $i4: i64, $i5: i32, $i6: i32, $p7: ref, $p8: ref, $p9: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ib_sa_path_rec_get($p0: ref, $p1: ref, $i2: i8, $p3: ref, $i4: i64, $i5: i32, $i6: i32, $p7: ref, $p8: ref, $p9: ref) returns ($r: i32)
{
  var $i10: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 461} {:cexpr "ib_sa_path_rec_get:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 462} {:cexpr "ib_sa_path_rec_get:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 463} {:cexpr "ib_sa_path_rec_get:arg:arg5"} boogie_si_record_i32($i5);
    call {:si_unique_call 464} {:cexpr "ib_sa_path_rec_get:arg:arg6"} boogie_si_record_i32($i6);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 1} true;
    call {:si_unique_call 465} $i10 := __VERIFIER_nondet_int();
    call {:si_unique_call 466} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i10);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const ldv_wait_for_completion_interruptible_103: ref;

axiom ldv_wait_for_completion_interruptible_103 == $sub.ref(0, 424086);

procedure ldv_wait_for_completion_interruptible_103($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.17, assertsPassed;



implementation ldv_wait_for_completion_interruptible_103($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} ldv_linux_kernel_sched_completion_wait_for_completion_done_of_srp_rdma_ch();
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} $i1 := wait_for_completion_interruptible($p0);
    call {:si_unique_call 469} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_226:
    assume !assertsPassed;
    return;
}



const srp_recv_completion: ref;

axiom srp_recv_completion == $sub.ref(0, 425118);

procedure srp_recv_completion($p0: ref, $p1: ref);



const ib_create_cq: ref;

axiom ib_create_cq == $sub.ref(0, 426150);

procedure ib_create_cq($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32, $i5: i32) returns ($r: ref);
  free requires assertsPassed;



implementation ib_create_cq($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32, $i5: i32) returns ($r: ref)
{
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} {:cexpr "ib_create_cq:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 471} {:cexpr "ib_create_cq:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} $p6 := external_alloc();
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 427182);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 474} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const srp_send_completion: ref;

axiom srp_send_completion == $sub.ref(0, 428214);

procedure srp_send_completion($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation srp_send_completion($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} $p2 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} $i4 := ib_poll_cq($p0, 1, $p2);
    call {:si_unique_call 477} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 0);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p6, $i7, $i8, $i9, $i10, $i11, $i12, $p13, $i14, $p15, $p16, $p17, $p18, $i19, $p20, $i21, $i22, $i23 := srp_send_completion_loop_$bb4($p0, $p2, $p3, $p6, $i7, $i8, $i9, $i10, $i11, $i12, $p13, $i14, $p15, $p16, $p17, $p18, $i19, $p20, $i21, $i22, $i23);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.22, $p6);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} $i11 := ldv__builtin_expect($i10, 1);
    call {:si_unique_call 479} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.23, $p18);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.22, $p20);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} srp_handle_qp_err($i19, $i21, 1, $p3);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} $i22 := ib_poll_cq($p0, 1, $p2);
    call {:si_unique_call 483} {:cexpr "tmp___0"} boogie_si_record_i32($i22);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $i23 := $sgt.i32($i22, 0);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i23 == 1);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb9_dummy;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.23, $p13);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 488)), $mul.ref(0, 1));
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} list_add($p16, $p17);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ib_req_notify_cq: ref;

axiom ib_req_notify_cq == $sub.ref(0, 429246);

procedure ib_req_notify_cq($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ib_req_notify_cq($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} {:cexpr "ib_req_notify_cq:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2488)), $mul.ref(696, 1));
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    call {:si_unique_call 485} $i6 := devirtbounce.6($p5, $p0, $i1);
    call {:si_unique_call 486} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const srp_qp_event: ref;

axiom srp_qp_event == $sub.ref(0, 430278);

procedure srp_qp_event($p0: ref, $p1: ref);



const ib_create_qp: ref;

axiom ib_create_qp == $sub.ref(0, 431310);

procedure ib_create_qp($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ib_create_qp($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} $p2 := external_alloc();
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const srp_init_qp: ref;

axiom srp_init_qp == $sub.ref(0, 432342);

procedure srp_init_qp($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation srp_init_qp($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i16;
  var $i11: i16;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i8;
  var $i24: i32;
  var $i25: i16;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $p36: ref;
  var $i37: i32;
  var $i29: i32;
  var $p38: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $p2 := kmalloc(168, 208);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(264, 1));
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.1, $p7);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} $i11 := __fswab16($i10);
    call {:si_unique_call 490} {:cexpr "tmp___0"} boogie_si_record_i16($i11);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(168, 1));
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 1792)), $mul.ref(0, 1));
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(168, 1));
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 1792)), $mul.ref(8, 1));
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.1, $p20);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i11);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i16($i24);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 168)), $mul.ref(136, 1));
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} $i27 := ib_find_pkey($p17, $i23, $i25, $p26);
    call {:si_unique_call 492} {:cexpr "ret"} boogie_si_record_i32($i27);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 168)), $mul.ref(0, 1));
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p30, 1);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 168)), $mul.ref(32, 1));
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p31, 6);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(168, 1));
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.1, $p32);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 1792)), $mul.ref(8, 1));
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.1, $p34);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 168)), $mul.ref(145, 1));
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p36, $i35);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} $i37 := ib_modify_qp($p1, $p3, 57);
    call {:si_unique_call 495} {:cexpr "ret"} boogie_si_record_i32($i37);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i29 := $i37;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p3);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} kfree($p38);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i6 := $i29;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i28 == 1;
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i29 := $i27;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_229:
    assume !assertsPassed;
    return;
}



const srp_alloc_fr_pool: ref;

axiom srp_alloc_fr_pool == $sub.ref(0, 433374);

procedure srp_alloc_fr_pool($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, assertsPassed;



implementation srp_alloc_fr_pool($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(168, 1));
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1792)), $mul.ref(0, 1));
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 3816)), $mul.ref(812, 1));
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.1, $p11);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.1, $p13);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} $p15 := srp_create_fr_pool($p6, $p8, $i12, $i14);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $r := $p15;
    return;

  SeqInstr_232:
    assume !assertsPassed;
    return;
}



const srp_destroy_fr_pool: ref;

axiom srp_destroy_fr_pool == $sub.ref(0, 434406);

procedure srp_destroy_fr_pool($p0: ref);
  free requires assertsPassed;



implementation srp_destroy_fr_pool($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p8: ref;
  var $i9: i32;
  var $p27: ref;
  var vslice_dummy_var_91: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(96, 1));
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32(0, $i6);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p0);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} kfree($p27);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $p8, $i9 := $p3, 0;
    goto $bb8;

  $bb8:
    call $p10, $p11, $i12, $i13, $p14, $p15, $p16, $p17, $i18, $i19, $p20, $p21, $i23, $p24, $i25, $i26, $p8, $i9, vslice_dummy_var_91 := srp_destroy_fr_pool_loop_$bb8($p5, $p10, $p11, $i12, $i13, $p14, $p15, $p16, $p17, $i18, $i19, $p20, $p21, $i23, $p24, $i25, $i26, $p8, $i9, vslice_dummy_var_91);
    goto $bb8_last;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i9, 1);
    call {:si_unique_call 499} {:cexpr "i"} boogie_si_record_i32($i23);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p8, $mul.ref(1, 32));
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.1, $p5);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i23, $i25);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i26 == 1);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb16:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $p8, $i9 := $p24, $i23;
    goto $bb16_dummy;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} vslice_dummy_var_91 := ib_dereg_mr($p21);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i13 == 1;
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} ib_free_fast_reg_page_list($p15);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2404;
}



const srp_alloc_fmr_pool: ref;

axiom srp_alloc_fmr_pool == $sub.ref(0, 435438);

procedure srp_alloc_fmr_pool($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.25, $CurrAddr;



implementation srp_alloc_fmr_pool($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i8;
  var $i19: i8;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $p1 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(168, 1));
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1792)), $mul.ref(0, 1));
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_35 := $M.25;
    call {:si_unique_call 502} cmdloc_dummy_var_36 := $memset.i8(cmdloc_dummy_var_35, $p6, 0, 48, $zext.i32.i64(8), 0 == 1);
    $M.25 := cmdloc_dummy_var_36;
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 3816)), $mul.ref(812, 1));
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.1, $p9);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(12, 1));
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p11, $i10);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(12, 1));
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.25, $p12);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i14 := $sdiv.i32($i13, 4);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p15, $i14);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.25, $p16);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i18 := $and.i8($i17, $sub.i8(0, 2));
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $i19 := $or.i8($i18, 1);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $M.25 := $store.i8($M.25, $p16, $i19);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.1, $p20);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p22, $i21);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.1, $p23);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} $i25 := __ilog2_u32($i24);
    call {:si_unique_call 504} {:cexpr "tmp___66"} boogie_si_record_i32($i25);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p26, $i25);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p27, 7);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.1, $p28);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} $p30 := ib_create_fmr_pool($p29, $p1);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $r := $p30;
    return;
}



const ib_destroy_fmr_pool: ref;

axiom ib_destroy_fmr_pool == $sub.ref(0, 436470);

procedure ib_destroy_fmr_pool($p0: ref);
  free requires assertsPassed;



implementation ib_destroy_fmr_pool($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    return;
}



const srp_destroy_qp: ref;

axiom srp_destroy_qp == $sub.ref(0, 437502);

procedure srp_destroy_qp($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.26, $M.27, $M.28, $M.29, $M.17, $CurrAddr, assertsPassed;



implementation srp_destroy_qp($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p107: ref;
  var $p110: ref;
  var $p113: ref;
  var $p116: ref;
  var $p118: ref;
  var $p120: ref;
  var $p122: ref;
  var $p124: ref;
  var $p126: ref;
  var $p128: ref;
  var $p131: ref;
  var $p134: ref;
  var $p137: ref;
  var $p140: ref;
  var $p143: ref;
  var $p146: ref;
  var $p148: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $p231: ref;
  var $p234: ref;
  var $p237: ref;
  var $p240: ref;
  var $p242: ref;
  var $p244: ref;
  var $p246: ref;
  var $p248: ref;
  var $p250: ref;
  var $p252: ref;
  var $p255: ref;
  var $p258: ref;
  var $p261: ref;
  var $p264: ref;
  var $p267: ref;
  var $p270: ref;
  var $p272: ref;
  var $p273: ref;
  var $p274: ref;
  var $p275: ref;
  var $p276: ref;
  var $p277: ref;
  var $p278: ref;
  var $p279: ref;
  var $p280: ref;
  var $p281: ref;
  var $p282: ref;
  var $p283: ref;
  var $p284: ref;
  var $p285: ref;
  var $p287: ref;
  var $p289: ref;
  var $p291: ref;
  var $p293: ref;
  var $p295: ref;
  var $p297: ref;
  var $p299: ref;
  var $p301: ref;
  var $p303: ref;
  var $p305: ref;
  var $p307: ref;
  var $p309: ref;
  var $p310: ref;
  var $p311: ref;
  var $p312: ref;
  var $p313: ref;
  var $p314: ref;
  var $p315: ref;
  var $p316: ref;
  var $i317: i8;
  var $i318: i1;
  var $i319: i32;
  var $i320: i1;
  var $i321: i32;
  var $i322: i64;
  var $i323: i64;
  var $i324: i1;
  var $i325: i1;
  var $i326: i1;
  var $i327: i32;
  var $i328: i1;
  var $i329: i32;
  var $i330: i64;
  var $i331: i64;
  var $i332: i1;
  var $i333: i1;
  var $i334: i32;
  var $i335: i64;
  var $i336: i64;
  var $i337: i1;
  var $i338: i1;
  var $i339: i32;
  var $i340: i64;
  var $p342: ref;
  var $p343: ref;
  var $i344: i32;
  var $i345: i1;
  var $i346: i32;
  var $i347: i1;
  var $i348: i32;
  var $i349: i64;
  var $i350: i64;
  var $i351: i1;
  var $i352: i1;
  var $i353: i1;
  var $i354: i32;
  var $i355: i1;
  var $i356: i32;
  var $i357: i64;
  var $i358: i64;
  var $i359: i1;
  var $i360: i1;
  var $i361: i32;
  var $i362: i64;
  var $i363: i64;
  var $i364: i1;
  var $i365: i1;
  var $i366: i32;
  var $i367: i64;
  var $i369: i1;
  var $p370: ref;
  var $p371: ref;
  var $p372: ref;
  var $i373: i32;
  var $i374: i1;
  var $i375: i32;
  var $i376: i1;
  var $i377: i32;
  var $i378: i64;
  var $i379: i64;
  var $i380: i1;
  var $i381: i1;
  var $i382: i1;
  var $i383: i32;
  var $i384: i1;
  var $i385: i32;
  var $i386: i64;
  var $i387: i64;
  var $i388: i1;
  var $i389: i1;
  var $i390: i32;
  var $i391: i64;
  var $i392: i64;
  var $i393: i1;
  var $i394: i1;
  var $i395: i32;
  var $i396: i64;
  var $i398: i1;
  var $p399: ref;
  var $p400: ref;
  var $p401: ref;
  var vslice_dummy_var_92: i64;
  var vslice_dummy_var_93: i64;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} $p1 := $alloc($mul.ref(168, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(96, 1));
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(0, 1));
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p6, 6);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(4, 1));
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p7, 0);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(8, 1));
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p8, 0);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(12, 1));
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p9, 0);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p10, 0);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(20, 1));
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p11, 0);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(24, 1));
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p12, 0);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(28, 1));
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p13, 0);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(32, 1));
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p14, 0);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1)), $mul.ref(0, 1));
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p16, 0);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1)), $mul.ref(4, 1));
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p18, 0);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1)), $mul.ref(8, 1));
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p20, 0);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1)), $mul.ref(12, 1));
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p22, 0);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(36, 1)), $mul.ref(16, 1));
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p24, 0);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p29, 0);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p34, 0);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p39, 0);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p44, 0);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p49, 0);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 16)), $mul.ref(5, 1));
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p54, 0);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 16)), $mul.ref(6, 1));
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p59, 0);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 16)), $mul.ref(7, 1));
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p64, 0);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p69, 0);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 16)), $mul.ref(9, 1));
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p74, 0);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 16)), $mul.ref(10, 1));
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p79, 0);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 16)), $mul.ref(11, 1));
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p84, 0);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p88, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p89, 0);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p92);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p93, $mul.ref(0, 16)), $mul.ref(13, 1));
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p94, 0);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p97);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p98, $mul.ref(0, 16)), $mul.ref(14, 1));
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p99, 0);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p102);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p103, $mul.ref(0, 16)), $mul.ref(15, 1));
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p104, 0);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p107, 0);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(20, 1));
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p110, 0);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(21, 1));
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p113, 0);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(22, 1));
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p116, 0);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(56, 1)), $mul.ref(24, 1));
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p118, 0);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(56, 1)), $mul.ref(26, 1));
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p120, 0);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(56, 1)), $mul.ref(27, 1));
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p122, 0);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(56, 1)), $mul.ref(28, 1));
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p124, 0);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(56, 1)), $mul.ref(29, 1));
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p126, 0);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(56, 1)), $mul.ref(30, 1));
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p128, 0);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(56, 1)), $mul.ref(31, 1)), $mul.ref(0, 1));
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p131, 0);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(56, 1)), $mul.ref(31, 1)), $mul.ref(1, 1));
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p134, 0);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(56, 1)), $mul.ref(31, 1)), $mul.ref(2, 1));
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p137, 0);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(56, 1)), $mul.ref(31, 1)), $mul.ref(3, 1));
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p140, 0);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(56, 1)), $mul.ref(31, 1)), $mul.ref(4, 1));
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p143, 0);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(56, 1)), $mul.ref(31, 1)), $mul.ref(5, 1));
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p146, 0);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(56, 1)), $mul.ref(38, 1));
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p148, 0);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $p152 := $bitcast.ref.ref($p151);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p152, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p153, 0);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $p157 := $bitcast.ref.ref($p156);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p157, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p158, 0);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $p162 := $bitcast.ref.ref($p161);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p162, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p163, 0);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $p167 := $bitcast.ref.ref($p166);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p167, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p168, 0);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $p172 := $bitcast.ref.ref($p171);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p172, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p173, 0);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $p177 := $bitcast.ref.ref($p176);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p177, $mul.ref(0, 16)), $mul.ref(5, 1));
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p178, 0);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $p182 := $bitcast.ref.ref($p181);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p182, $mul.ref(0, 16)), $mul.ref(6, 1));
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p183, 0);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $p187 := $bitcast.ref.ref($p186);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p187, $mul.ref(0, 16)), $mul.ref(7, 1));
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p188, 0);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $p192 := $bitcast.ref.ref($p191);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p192, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p193, 0);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $p197 := $bitcast.ref.ref($p196);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p197, $mul.ref(0, 16)), $mul.ref(9, 1));
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p198, 0);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $p202 := $bitcast.ref.ref($p201);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p202, $mul.ref(0, 16)), $mul.ref(10, 1));
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p203, 0);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $p207 := $bitcast.ref.ref($p206);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p207, $mul.ref(0, 16)), $mul.ref(11, 1));
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p208, 0);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $p212 := $bitcast.ref.ref($p211);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p212, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p213, 0);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $p217 := $bitcast.ref.ref($p216);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p217, $mul.ref(0, 16)), $mul.ref(13, 1));
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p218, 0);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $p222 := $bitcast.ref.ref($p221);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p222, $mul.ref(0, 16)), $mul.ref(14, 1));
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p223, 0);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $p227 := $bitcast.ref.ref($p226);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p227, $mul.ref(0, 16)), $mul.ref(15, 1));
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p228, 0);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p231, 0);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(20, 1));
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p234, 0);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(21, 1));
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p237, 0);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(22, 1));
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p240, 0);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(96, 1)), $mul.ref(24, 1));
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p242, 0);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(96, 1)), $mul.ref(26, 1));
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p244, 0);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(96, 1)), $mul.ref(27, 1));
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p246, 0);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(96, 1)), $mul.ref(28, 1));
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p248, 0);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(96, 1)), $mul.ref(29, 1));
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p250, 0);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(96, 1)), $mul.ref(30, 1));
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p252, 0);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(96, 1)), $mul.ref(31, 1)), $mul.ref(0, 1));
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p255, 0);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(96, 1)), $mul.ref(31, 1)), $mul.ref(1, 1));
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p258, 0);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(96, 1)), $mul.ref(31, 1)), $mul.ref(2, 1));
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p261, 0);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(96, 1)), $mul.ref(31, 1)), $mul.ref(3, 1));
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p264, 0);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(96, 1)), $mul.ref(31, 1)), $mul.ref(4, 1));
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p267, 0);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(96, 1)), $mul.ref(31, 1)), $mul.ref(5, 1));
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p270, 0);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(96, 1)), $mul.ref(38, 1));
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p272, 0);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(136, 1));
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p273, 0);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(138, 1));
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p274, 0);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(140, 1));
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p275, 0);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(141, 1));
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p276, 0);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(142, 1));
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p277, 0);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(143, 1));
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p278, 0);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(144, 1));
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p279, 0);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(145, 1));
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p280, 0);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(146, 1));
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p281, 0);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(147, 1));
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p282, 0);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(148, 1));
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p283, 0);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(149, 1));
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p284, 0);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(150, 1));
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p285, 0);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(151, 1)), $mul.ref(0, 1));
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p287, 0);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(151, 1)), $mul.ref(1, 1));
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p289, 0);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(151, 1)), $mul.ref(2, 1));
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p291, 0);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(151, 1)), $mul.ref(3, 1));
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p293, 0);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(151, 1)), $mul.ref(4, 1));
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p295, 0);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(151, 1)), $mul.ref(5, 1));
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p297, 0);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(157, 1)), $mul.ref(0, 1));
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p299, 0);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(157, 1)), $mul.ref(1, 1));
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p301, 0);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(157, 1)), $mul.ref(2, 1));
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p303, 0);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(157, 1)), $mul.ref(3, 1));
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p305, 0);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(157, 1)), $mul.ref(4, 1));
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p307, 0);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(157, 1)), $mul.ref(5, 1));
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p309, 0);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(164, 1));
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p310, 0);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(166, 1));
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p311, 0);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p312, $0.ref);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $M.27 := $store.i64($M.27, $p313, 4294967292);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $M.28 := $store.ref($M.28, $p314, $0.ref);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $M.29 := $store.i32($M.29, $p315, 0);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(272, 1));
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i317 := $load.i8($M.1, $p316);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i318 := $trunc.i8.i1($i317);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $i319 := $zext.i1.i32($i318);
    call {:si_unique_call 509} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i319);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $i320 := $ne.i32($i319, 0);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i321 := $zext.i1.i32($i320);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i322 := $sext.i32.i64($i321);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} $i323 := ldv__builtin_expect($i322, 0);
    call {:si_unique_call 511} {:cexpr "tmp___1"} boogie_si_record_i64($i323);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i324 := $ne.i64($i323, 0);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    assume {:branchcond $i324} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i324 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i338 := $ne.i32($i319, 0);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i339 := $zext.i1.i32($i338);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i340 := $sext.i32.i64($i339);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} vslice_dummy_var_92 := ldv__builtin_expect($i340, 0);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(120, 1));
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $p343 := $load.ref($M.1, $p342);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} $i344 := ib_modify_qp($p343, $p1, 1);
    call {:si_unique_call 520} {:cexpr "ret"} boogie_si_record_i32($i344);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i345 := $ne.i32($i344, 0);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i346 := $zext.i1.i32($i345);
    call {:si_unique_call 521} {:cexpr "__ret_warn_once___0"} boogie_si_record_i32($i346);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i347 := $ne.i32($i346, 0);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $i348 := $zext.i1.i32($i347);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $i349 := $sext.i32.i64($i348);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $i350 := ldv__builtin_expect($i349, 0);
    call {:si_unique_call 523} {:cexpr "tmp___4"} boogie_si_record_i64($i350);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i351 := $ne.i64($i350, 0);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    assume {:branchcond $i351} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i351 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i365 := $ne.i32($i346, 0);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i366 := $zext.i1.i32($i365);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i367 := $sext.i32.i64($i366);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} vslice_dummy_var_93 := ldv__builtin_expect($i367, 0);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $i369 := $ne.i32($i344, 0);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    assume {:branchcond $i369} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i369 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p370 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(136, 1));
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} ldv_init_completion_100($p370);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(120, 1));
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $p372 := $load.ref($M.1, $p371);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} $i373 := ib_post_recv($p372, $p2, $p3);
    call {:si_unique_call 534} {:cexpr "ret"} boogie_si_record_i32($i373);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $i374 := $ne.i32($i373, 0);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $i375 := $zext.i1.i32($i374);
    call {:si_unique_call 535} {:cexpr "__ret_warn_once___1"} boogie_si_record_i32($i375);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $i376 := $ne.i32($i375, 0);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i377 := $zext.i1.i32($i376);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $i378 := $sext.i32.i64($i377);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} $i379 := ldv__builtin_expect($i378, 0);
    call {:si_unique_call 537} {:cexpr "tmp___7"} boogie_si_record_i64($i379);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i380 := $ne.i64($i379, 0);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    assume {:branchcond $i380} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i380 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i394 := $ne.i32($i375, 0);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i395 := $zext.i1.i32($i394);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i396 := $sext.i32.i64($i395);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} vslice_dummy_var_95 := ldv__builtin_expect($i396, 0);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $i398 := $eq.i32($i373, 0);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    assume {:branchcond $i398} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i398 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p400 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(120, 1));
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $p401 := $load.ref($M.1, $p400);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} vslice_dummy_var_94 := ib_destroy_qp($p401);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    return;

  $bb32:
    assume $i398 == 1;
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(136, 1));
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} ldv_wait_for_completion_101($p399);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    goto $bb34;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i380 == 1;
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i381 := $trunc.i8.i1(1);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $i382 := $xor.i1($i381, 1);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i383 := $zext.i1.i32($i382);
    call {:si_unique_call 538} {:cexpr "__ret_warn_on___1"} boogie_si_record_i32($i383);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i384 := $ne.i32($i383, 0);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i385 := $zext.i1.i32($i384);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $i386 := $sext.i32.i64($i385);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} $i387 := ldv__builtin_expect($i386, 0);
    call {:si_unique_call 540} {:cexpr "tmp___5"} boogie_si_record_i64($i387);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i388 := $ne.i64($i387, 0);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    assume {:branchcond $i388} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i388 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i389 := $ne.i32($i383, 0);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i390 := $zext.i1.i32($i389);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i391 := $sext.i32.i64($i390);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} $i392 := ldv__builtin_expect($i391, 0);
    call {:si_unique_call 543} {:cexpr "tmp___6"} boogie_si_record_i64($i392);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i393 := $ne.i64($i392, 0);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    assume {:branchcond $i393} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i393 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i393 == 1;
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i388 == 1;
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} warn_slowpath_fmt.ref.i32.ref.i32(.str.20, 483, .str.75, $i373);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb19:
    assume $i369 == 1;
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb10:
    assume $i351 == 1;
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i352 := $trunc.i8.i1(1);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $i353 := $xor.i1($i352, 1);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $i354 := $zext.i1.i32($i353);
    call {:si_unique_call 524} {:cexpr "__ret_warn_on___0"} boogie_si_record_i32($i354);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $i355 := $ne.i32($i354, 0);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i356 := $zext.i1.i32($i355);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $i357 := $sext.i32.i64($i356);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} $i358 := ldv__builtin_expect($i357, 0);
    call {:si_unique_call 526} {:cexpr "tmp___2"} boogie_si_record_i64($i358);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i359 := $ne.i64($i358, 0);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    assume {:branchcond $i359} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i359 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i360 := $ne.i32($i354, 0);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i361 := $zext.i1.i32($i360);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i362 := $sext.i32.i64($i361);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $i363 := ldv__builtin_expect($i362, 0);
    call {:si_unique_call 529} {:cexpr "tmp___3"} boogie_si_record_i64($i363);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i364 := $ne.i64($i363, 0);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    assume {:branchcond $i364} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i364 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i364 == 1;
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i359 == 1;
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} warn_slowpath_fmt.ref.i32.ref.i32(.str.20, 477, .str.74, $i344);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb1:
    assume $i324 == 1;
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i325 := $trunc.i8.i1(1);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i326 := $xor.i1($i325, 1);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i327 := $zext.i1.i32($i326);
    call {:si_unique_call 512} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i327);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $i328 := $ne.i32($i327, 0);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $i329 := $zext.i1.i32($i328);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $i330 := $sext.i32.i64($i329);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} $i331 := ldv__builtin_expect($i330, 0);
    call {:si_unique_call 514} {:cexpr "tmp"} boogie_si_record_i64($i331);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i332 := $ne.i64($i331, 0);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    assume {:branchcond $i332} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i332 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i333 := $ne.i32($i327, 0);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $i334 := $zext.i1.i32($i333);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i335 := $sext.i32.i64($i334);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} $i336 := ldv__builtin_expect($i335, 0);
    call {:si_unique_call 517} {:cexpr "tmp___0"} boogie_si_record_i64($i336);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $i337 := $ne.i64($i336, 0);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    assume {:branchcond $i337} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i337 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i337 == 1;
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i332 == 1;
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} warn_slowpath_null(.str.20, 474);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ib_destroy_cq: ref;

axiom ib_destroy_cq == $sub.ref(0, 438534);

procedure ib_destroy_cq($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ib_destroy_cq($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 1} true;
    call {:si_unique_call 546} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 547} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ib_destroy_qp: ref;

axiom ib_destroy_qp == $sub.ref(0, 439566);

procedure ib_destroy_qp($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ib_destroy_qp($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 1} true;
    call {:si_unique_call 548} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 549} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ib_modify_qp: ref;

axiom ib_modify_qp == $sub.ref(0, 440598);

procedure ib_modify_qp($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ib_modify_qp($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 550} {:cexpr "ib_modify_qp:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 1} true;
    call {:si_unique_call 551} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 552} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const warn_slowpath_fmt: ref;

axiom warn_slowpath_fmt == $sub.ref(0, 441630);

procedure warn_slowpath_fmt.ref.i32.ref.ref.i32.i32.i32($p0: ref, $i1: i32, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32);
  free requires assertsPassed;



implementation warn_slowpath_fmt.ref.i32.ref.ref.i32.i32.i32($p0: ref, $i1: i32, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} {:cexpr "warn_slowpath_fmt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    return;
}



procedure warn_slowpath_fmt.ref.i32.ref.i32($p0: ref, $i1: i32, $p2: ref, p.3: i32);
  free requires assertsPassed;



implementation warn_slowpath_fmt.ref.i32.ref.i32($p0: ref, $i1: i32, $p2: ref, p.3: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} {:cexpr "warn_slowpath_fmt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    return;
}



const ib_post_recv: ref;

axiom ib_post_recv == $sub.ref(0, 442662);

procedure ib_post_recv($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ib_post_recv($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2488)), $mul.ref(640, 1));
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    call {:si_unique_call 555} $i7 := devirtbounce.7($p6, $p0, $p1, $p2);
    call {:si_unique_call 556} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const ldv_wait_for_completion_101: ref;

axiom ldv_wait_for_completion_101 == $sub.ref(0, 443694);

procedure ldv_wait_for_completion_101($p0: ref);
  free requires assertsPassed;
  modifies $M.17, assertsPassed;



implementation ldv_wait_for_completion_101($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} ldv_linux_kernel_sched_completion_wait_for_completion_done_of_srp_rdma_ch();
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} wait_for_completion($p0);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_238:
    assume !assertsPassed;
    return;
}



const __ilog2_u32: ref;

axiom __ilog2_u32 == $sub.ref(0, 444726);

procedure __ilog2_u32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __ilog2_u32($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} {:cexpr "__ilog2_u32:arg:n"} boogie_si_record_i32($i0);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} $i1 := fls($i0);
    call {:si_unique_call 561} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ib_create_fmr_pool: ref;

axiom ib_create_fmr_pool == $sub.ref(0, 445758);

procedure ib_create_fmr_pool($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ib_create_fmr_pool($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} $p2 := external_alloc();
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const fls: ref;

axiom fls == $sub.ref(0, 446790);

procedure fls($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation fls($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} {:cexpr "fls:arg:x"} boogie_si_record_i32($i0);
    call {:si_unique_call 564} $i1 := devirtbounce(0, $i0, $sub.i32(0, 1));
    call {:si_unique_call 565} {:cexpr "r"} boogie_si_record_i32($i1);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 1);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ib_free_fast_reg_page_list: ref;

axiom ib_free_fast_reg_page_list == $sub.ref(0, 447822);

procedure ib_free_fast_reg_page_list($p0: ref);
  free requires assertsPassed;



implementation ib_free_fast_reg_page_list($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    return;
}



const srp_create_fr_pool: ref;

axiom srp_create_fr_pool == $sub.ref(0, 448854);

procedure srp_create_fr_pool($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, assertsPassed;



implementation srp_create_fr_pool($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: ref)
{
  var $p4: ref;
  var $i5: i1;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i1;
  var $i32: i8;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i1;
  var $i43: i8;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $i27: i32;
  var $p28: ref;
  var $p56: ref;
  var $i38: i32;
  var $i6: i32;
  var $i57: i64;
  var $p58: ref;
  var vslice_dummy_var_96: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 567} {:cexpr "srp_create_fr_pool:arg:pool_size"} boogie_si_record_i32($i2);
    call {:si_unique_call 568} {:cexpr "srp_create_fr_pool:arg:max_page_list_len"} boogie_si_record_i32($i3);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i5 := $sle.i32($i2, 0);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i2);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 3);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i9 := $mul.i64($i8, 32);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} $p10 := kzalloc($i9, 208);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p14, $i2);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p11, $mul.ref(0, 96)), $mul.ref(4, 1));
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p15, $i3);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p11, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} vslice_dummy_var_96 := spinlock_check($p16);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} __raw_spin_lock_init($p20, .str.73, $p4);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p11, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} INIT_LIST_HEAD($p21);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p11, $mul.ref(0, 96)), $mul.ref(96, 1));
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p11, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.1, $p24);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32(0, $i25);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p56 := $p10;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $r := $p56;
    return;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i27, $p28 := 0, $p22;
    goto $bb11;

  $bb11:
    call $p29, $p30, $i31, $i32, $i33, $p34, $p39, $p40, $p41, $i42, $i43, $i44, $p45, $p49, $p50, $p51, $i52, $p53, $i54, $i55, $i27, $p28 := srp_create_fr_pool_loop_$bb11($p0, $p1, $i3, $p11, $p24, $p29, $p30, $i31, $i32, $i33, $p34, $p39, $p40, $p41, $i42, $i43, $i44, $p45, $p49, $p50, $p51, $i52, $p53, $i54, $i55, $i27, $p28);
    goto $bb11_last;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} $p29 := ib_alloc_fast_reg_mr($p1, $i3);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} $i31 := IS_ERR($p30);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i8($i31);
    call {:si_unique_call 576} {:cexpr "tmp___1"} boogie_si_record_i8($i32);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i8.i1($i32);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $p34 := $p29;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p28, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p39, $p29);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} $p40 := ib_alloc_fast_reg_page_list($p0, $i3);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} $i42 := IS_ERR($p41);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i43 := $zext.i1.i8($i42);
    call {:si_unique_call 583} {:cexpr "tmp___3"} boogie_si_record_i8($i43);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i8.i1($i43);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $p45 := $p40;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p28, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p49, $p40);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p28, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p11, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} list_add_tail($p50, $p51);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i27, 1);
    call {:si_unique_call 588} {:cexpr "i"} boogie_si_record_i32($i52);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p28, $mul.ref(1, 32));
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.1, $p24);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i52, $i54);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i55 == 1);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb20:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $i27, $p28 := $i52, $p53;
    goto $bb20_dummy;

  $bb17:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} $i47 := PTR_ERR($p46);
    call {:si_unique_call 585} {:cexpr "tmp___2"} boogie_si_record_i64($i47);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i64.i32($i47);
    call {:si_unique_call 586} {:cexpr "ret"} boogie_si_record_i32($i48);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i38 := $i48;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} srp_destroy_fr_pool($p11);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i6 := $i38;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i6);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} $p58 := ERR_PTR($i57);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $p56 := $p58;
    goto $bb23;

  $bb13:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} $i36 := PTR_ERR($p35);
    call {:si_unique_call 578} {:cexpr "tmp___0"} boogie_si_record_i64($i36);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i64.i32($i36);
    call {:si_unique_call 579} {:cexpr "ret"} boogie_si_record_i32($i37);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb15;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb20_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2963;
}



const ib_alloc_fast_reg_mr: ref;

axiom ib_alloc_fast_reg_mr == $sub.ref(0, 449886);

procedure ib_alloc_fast_reg_mr($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation ib_alloc_fast_reg_mr($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} {:cexpr "ib_alloc_fast_reg_mr:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} $p2 := external_alloc();
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const ib_alloc_fast_reg_page_list: ref;

axiom ib_alloc_fast_reg_page_list == $sub.ref(0, 450918);

procedure ib_alloc_fast_reg_page_list($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation ib_alloc_fast_reg_page_list($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} {:cexpr "ib_alloc_fast_reg_page_list:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} $p2 := external_alloc();
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const ERR_PTR: ref;

axiom ERR_PTR == $sub.ref(0, 451950);

procedure ERR_PTR($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ERR_PTR($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} {:cexpr "ERR_PTR:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} $p1 := ldv_err_ptr($i0);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_err_ptr: ref;

axiom ldv_err_ptr == $sub.ref(0, 452982);

procedure ldv_err_ptr($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ldv_err_ptr($i0: i64) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} {:cexpr "ldv_err_ptr:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64(4294967295, $i0);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __fswab16: ref;

axiom __fswab16 == $sub.ref(0, 454014);

procedure __fswab16($i0: i16) returns ($r: i16);
  free requires assertsPassed;



implementation __fswab16($i0: i16) returns ($r: i16)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} {:cexpr "__fswab16:arg:val"} boogie_si_record_i16($i0);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i2 := $shl.i32($i1, 8);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i4 := $sext.i16.i32($i3);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i0);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i6 := $ashr.i32($i5, 8);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $i8 := $sext.i16.i32($i7);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i4, $i8);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const ib_find_pkey: ref;

axiom ib_find_pkey == $sub.ref(0, 455046);

procedure ib_find_pkey($p0: ref, $i1: i8, $i2: i16, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ib_find_pkey($p0: ref, $i1: i8, $i2: i16, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 597} {:cexpr "ib_find_pkey:arg:arg1"} boogie_si_record_i8($i1);
    call {:si_unique_call 598} {:cexpr "ib_find_pkey:arg:arg2"} boogie_si_record_i16($i2);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 1} true;
    call {:si_unique_call 599} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 600} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const srp_handle_qp_err: ref;

axiom srp_handle_qp_err == $sub.ref(0, 456078);

procedure srp_handle_qp_err($i0: i64, $i1: i32, $i2: i1, $p3: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation srp_handle_qp_err($i0: i64, $i1: i32, $i2: i1, $p3: ref)
{
  var $i4: i8;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var vslice_dummy_var_97: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} {:cexpr "srp_handle_qp_err:arg:wr_id"} boogie_si_record_i64($i0);
    call {:si_unique_call 602} {:cexpr "srp_handle_qp_err:arg:wc_status"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i2);
    call {:si_unique_call 603} {:cexpr "srp_handle_qp_err:arg:send_err"} boogie_si_record_i1($i2);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 488)), $mul.ref(96, 1));
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i0, 4294967292);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(272, 1));
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.1, $p9);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p35, 1);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.1, $p12);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i0);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 1);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i0, 2);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i22 == 1);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 3816)), $mul.ref(952, 1));
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1($i4);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $p30 := (if $i29 == 1 then .str.68 else .str.69);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $p31 := $i2p.i64.ref($i0);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} dev_printk.ref.ref.ref.ref.i32.ref(.str.39, $p28, .str.67, $p30, $i1, $p31);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.1, system_long_wq);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(280, 1));
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} vslice_dummy_var_97 := queue_work($p32, $p33);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i22 == 1;
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.1, $p23);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 3816)), $mul.ref(952, 1));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} dev_printk.ref.ref.ref.i32(.str.39, $p25, .str.66, $i1);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i17 == 1;
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 3816)), $mul.ref(952, 1));
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} dev_printk.ref.ref.ref.i32(.str.39, $p20, .str.65, $i1);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 488)), $mul.ref(136, 1));
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} complete_($p8);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ib_poll_cq: ref;

axiom ib_poll_cq == $sub.ref(0, 457110);

procedure ib_poll_cq($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ib_poll_cq($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} {:cexpr "ib_poll_cq:arg:num_entries"} boogie_si_record_i32($i1);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2488)), $mul.ref(680, 1));
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    call {:si_unique_call 610} $i7 := devirtbounce.8($p6, $p0, $i1, $p2);
    call {:si_unique_call 611} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 458142);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(4294967295, $i1);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const srp_handle_recv: ref;

axiom srp_handle_recv == $sub.ref(0, 459174);

procedure srp_handle_recv($p0: ref, $p1: ref);



const ib_dma_sync_single_for_cpu: ref;

axiom ib_dma_sync_single_for_cpu == $sub.ref(0, 460206);

procedure ib_dma_sync_single_for_cpu($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation ib_dma_sync_single_for_cpu($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} {:cexpr "ib_dma_sync_single_for_cpu:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 613} {:cexpr "ib_dma_sync_single_for_cpu:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 614} {:cexpr "ib_dma_sync_single_for_cpu:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2488)), $mul.ref(928, 1));
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2488)), $mul.ref(0, 1));
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} dma_sync_single_for_cpu($p13, $i1, $i2, $i3);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2488)), $mul.ref(928, 1));
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    call {:si_unique_call 615} devirtbounce.9($p11, $p0, $i1, $i2, $i3);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const srp_process_rsp: ref;

axiom srp_process_rsp == $sub.ref(0, 461238);

procedure srp_process_rsp($p0: ref, $p1: ref);



const srp_process_cred_req: ref;

axiom srp_process_cred_req == $sub.ref(0, 462270);

procedure srp_process_cred_req($p0: ref, $p1: ref);



const srp_process_aer_req: ref;

axiom srp_process_aer_req == $sub.ref(0, 463302);

procedure srp_process_aer_req($p0: ref, $p1: ref);



const ib_dma_sync_single_for_device: ref;

axiom ib_dma_sync_single_for_device == $sub.ref(0, 464334);

procedure ib_dma_sync_single_for_device($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation ib_dma_sync_single_for_device($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} {:cexpr "ib_dma_sync_single_for_device:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 618} {:cexpr "ib_dma_sync_single_for_device:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 619} {:cexpr "ib_dma_sync_single_for_device:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2488)), $mul.ref(928, 1));
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2488)), $mul.ref(0, 1));
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} dma_sync_single_for_device($p13, $i1, $i2, $i3);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2488)), $mul.ref(928, 1));
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    call {:si_unique_call 620} devirtbounce.9($p11, $p0, $i1, $i2, $i3);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const srp_post_recv: ref;

axiom srp_post_recv == $sub.ref(0, 465366);

procedure srp_post_recv($p0: ref, $p1: ref) returns ($r: i32);



const dma_sync_single_for_device: ref;

axiom dma_sync_single_for_device == $sub.ref(0, 466398);

procedure dma_sync_single_for_device($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation dma_sync_single_for_device($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} {:cexpr "dma_sync_single_for_device:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 623} {:cexpr "dma_sync_single_for_device:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 624} {:cexpr "dma_sync_single_for_device:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} $p4 := get_dma_ops($p0);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} $i5 := valid_dma_direction($i3);
    call {:si_unique_call 627} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 629} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} debug_dma_sync_single_for_device($p0, $i1, $i2, $i3);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    call {:si_unique_call 631} devirtbounce.10($p16, $p0, $i1, $i2, $i3);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    call {:si_unique_call 630} devirtbounce.3(0, .str.44, 115, 12);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    assume false;
    return;
}



const debug_dma_sync_single_for_device: ref;

axiom debug_dma_sync_single_for_device == $sub.ref(0, 467430);

procedure debug_dma_sync_single_for_device($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation debug_dma_sync_single_for_device($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} {:cexpr "debug_dma_sync_single_for_device:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 634} {:cexpr "debug_dma_sync_single_for_device:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 635} {:cexpr "debug_dma_sync_single_for_device:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    return;
}



const srp_response_common: ref;

axiom srp_response_common == $sub.ref(0, 468462);

procedure srp_response_common($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32);



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_123: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_123 == $sub.ref(0, 469494);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_123($p0: ref);



const __srp_get_tx_iu: ref;

axiom __srp_get_tx_iu == $sub.ref(0, 470526);

procedure __srp_get_tx_iu($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation __srp_get_tx_iu($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} {:cexpr "__srp_get_tx_iu:arg:iu_type"} boogie_si_record_i32($i1);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(96, 1));
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i1, 1);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 637} {:cexpr "rsv"} boogie_si_record_i32($i5);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(104, 1));
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} srp_send_completion($p7, $p8);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(0, 1));
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} $i10 := list_empty($p9);
    call {:si_unique_call 640} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i1, 2);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} list_del($p29);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $p12 := $p27;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(88, 1));
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.1, $p14);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $i16 := $sle.i32($i15, $i5);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(88, 1));
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.1, $p21);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32($i22, 1);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(88, 1));
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p24, $i23);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(276, 1));
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.1, $p17);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, 1);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(276, 1));
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p20, $i19);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb3;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb3;
}



const srp_post_send: ref;

axiom srp_post_send == $sub.ref(0, 471558);

procedure srp_post_send($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.40, $M.41, $M.42, $M.1, $CurrAddr;



implementation srp_post_send($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} $p4 := $alloc($mul.ref(96, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 645} {:cexpr "srp_post_send:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(96, 1));
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.1, $p8);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $M.40 := $store.i64($M.40, $p10, $i9);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $M.41 := $store.i32($M.41, $p11, $i2);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 464)), $mul.ref(84, 1));
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.1, $p12);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $M.42 := $store.i32($M.42, $p14, $i13);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p15, $0.ref);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p1);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p17, $i16);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p18, $p3);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(24, 1));
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p19, 1);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(28, 1));
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p20, 2);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 96)), $mul.ref(32, 1));
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p21, 2);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(120, 1));
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} $i24 := ib_post_send($p23, $p4, $p5);
    call {:si_unique_call 647} {:cexpr "tmp"} boogie_si_record_i32($i24);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;
}



const srp_put_tx_iu: ref;

axiom srp_put_tx_iu == $sub.ref(0, 472590);

procedure srp_put_tx_iu($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.1, $M.15, assertsPassed;



implementation srp_put_tx_iu($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} {:cexpr "srp_put_tx_iu:arg:iu_type"} boogie_si_record_i32($i2);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(16, 1));
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_117($p3);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(0, 1));
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} list_add($p4, $p5);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i2, 2);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(16, 1));
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} ldv_spin_unlock_irqrestore_114($p11, $u0);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(88, 1));
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.1, $p7);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, 1);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(88, 1));
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p10, $i9);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_244:
    assume !assertsPassed;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_117: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_117 == $sub.ref(0, 473622);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_117($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_117($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_srp_rdma_ch();
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_250:
    assume !assertsPassed;
    return;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 474654);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 475686);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_119: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_119 == $sub.ref(0, 476718);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_119($p0: ref);



const scsi_host_find_tag: ref;

axiom scsi_host_find_tag == $sub.ref(0, 477750);

procedure scsi_host_find_tag($p0: ref, $i1: i32) returns ($r: ref);



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_121: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_121 == $sub.ref(0, 478782);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_121($p0: ref);



const scsi_set_resid: ref;

axiom scsi_set_resid == $sub.ref(0, 479814);

procedure scsi_set_resid($p0: ref, $i1: i32);



const shost_use_blk_mq: ref;

axiom shost_use_blk_mq == $sub.ref(0, 480846);

procedure shost_use_blk_mq($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation shost_use_blk_mq($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i16;
  var $i4: i16;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3816)), $mul.ref(856, 1));
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.1, $p1);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i3 := $lshr.i16($i2, 10);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $i4 := $and.i16($i3, 1);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i16.i8($i4);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const scsi_mq_find_tag: ref;

axiom scsi_mq_find_tag == $sub.ref(0, 481878);

procedure scsi_mq_find_tag($p0: ref, $i1: i32) returns ($r: ref);



const blk_map_queue_find_tag: ref;

axiom blk_map_queue_find_tag == $sub.ref(0, 482910);

procedure blk_map_queue_find_tag($p0: ref, $i1: i32) returns ($r: ref);



const blk_mq_unique_tag_to_hwq: ref;

axiom blk_mq_unique_tag_to_hwq == $sub.ref(0, 483942);

procedure blk_mq_unique_tag_to_hwq($i0: i32) returns ($r: i16);
  free requires assertsPassed;



implementation blk_mq_unique_tag_to_hwq($i0: i32) returns ($r: i16)
{
  var $i1: i32;
  var $i2: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} {:cexpr "blk_mq_unique_tag_to_hwq:arg:unique_tag"} boogie_si_record_i32($i0);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i1 := $lshr.i32($i0, 16);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i32.i16($i1);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const blk_mq_unique_tag_to_tag: ref;

axiom blk_mq_unique_tag_to_tag == $sub.ref(0, 484974);

procedure blk_mq_unique_tag_to_tag($i0: i32) returns ($r: i16);
  free requires assertsPassed;



implementation blk_mq_unique_tag_to_tag($i0: i32) returns ($r: i16)
{
  var $i1: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} {:cexpr "blk_mq_unique_tag_to_tag:arg:unique_tag"} boogie_si_record_i32($i0);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i1 := $trunc.i32.i16($i0);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const blk_mq_tag_to_rq: ref;

axiom blk_mq_tag_to_rq == $sub.ref(0, 486006);

procedure blk_mq_tag_to_rq($p0: ref, $i1: i32) returns ($r: ref);



const dma_sync_single_for_cpu: ref;

axiom dma_sync_single_for_cpu == $sub.ref(0, 487038);

procedure dma_sync_single_for_cpu($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation dma_sync_single_for_cpu($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} {:cexpr "dma_sync_single_for_cpu:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 657} {:cexpr "dma_sync_single_for_cpu:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 658} {:cexpr "dma_sync_single_for_cpu:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} $p4 := get_dma_ops($p0);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} $i5 := valid_dma_direction($i3);
    call {:si_unique_call 661} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 663} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(64, 1));
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} debug_dma_sync_single_for_cpu($p0, $i1, $i2, $i3);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(64, 1));
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    call {:si_unique_call 665} devirtbounce.10($p16, $p0, $i1, $i2, $i3);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    call {:si_unique_call 664} devirtbounce.3(0, .str.44, 103, 12);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    assume false;
    return;
}



const debug_dma_sync_single_for_cpu: ref;

axiom debug_dma_sync_single_for_cpu == $sub.ref(0, 488070);

procedure debug_dma_sync_single_for_cpu($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation debug_dma_sync_single_for_cpu($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} {:cexpr "debug_dma_sync_single_for_cpu:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 668} {:cexpr "debug_dma_sync_single_for_cpu:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 669} {:cexpr "debug_dma_sync_single_for_cpu:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    return;
}



const srp_cm_handler: ref;

axiom srp_cm_handler == $sub.ref(0, 489102);

procedure srp_cm_handler($p0: ref, $p1: ref) returns ($r: i32);



const ib_create_cm_id: ref;

axiom ib_create_cm_id == $sub.ref(0, 490134);

procedure ib_create_cm_id($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ib_create_cm_id($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $p3 := external_alloc();
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const ib_destroy_cm_id: ref;

axiom ib_destroy_cm_id == $sub.ref(0, 491166);

procedure ib_destroy_cm_id($p0: ref);
  free requires assertsPassed;



implementation ib_destroy_cm_id($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    return;
}



const srp_cm_rep_handler: ref;

axiom srp_cm_rep_handler == $sub.ref(0, 492198);

procedure srp_cm_rep_handler($p0: ref, $p1: ref, $p2: ref);



const srp_cm_rej_handler: ref;

axiom srp_cm_rej_handler == $sub.ref(0, 493230);

procedure srp_cm_rej_handler($p0: ref, $p1: ref, $p2: ref);



const ib_send_cm_drep: ref;

axiom ib_send_cm_drep == $sub.ref(0, 494262);

procedure ib_send_cm_drep($p0: ref, $p1: ref, $i2: i8) returns ($r: i32);



const srp_alloc_iu_bufs: ref;

axiom srp_alloc_iu_bufs == $sub.ref(0, 495294);

procedure srp_alloc_iu_bufs($p0: ref) returns ($r: i32);



const ib_cm_init_qp_attr: ref;

axiom ib_cm_init_qp_attr == $sub.ref(0, 496326);

procedure ib_cm_init_qp_attr($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const srp_compute_rq_tmo: ref;

axiom srp_compute_rq_tmo == $sub.ref(0, 497358);

procedure srp_compute_rq_tmo($p0: ref, $i1: i32) returns ($r: i32);



const ib_send_cm_rtu: ref;

axiom ib_send_cm_rtu == $sub.ref(0, 498390);

procedure ib_send_cm_rtu($p0: ref, $p1: ref, $i2: i8) returns ($r: i32);



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 499422);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 671} {:cexpr "msecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 1} true;
    call {:si_unique_call 672} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 673} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const kcalloc: ref;

axiom kcalloc == $sub.ref(0, 500454);

procedure kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} {:cexpr "kcalloc:arg:n"} boogie_si_record_i64($i0);
    call {:si_unique_call 675} {:cexpr "kcalloc:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 676} {:cexpr "kcalloc:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} ldv_check_alloc_flags($i2);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} $p3 := ldv_malloc_unknown_size();
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} ldv_after_alloc($p3);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_253:
    assume !assertsPassed;
    return;
}



const srp_alloc_iu: ref;

axiom srp_alloc_iu == $sub.ref(0, 501486);

procedure srp_alloc_iu($p0: ref, $i1: i64, $i2: i32, $i3: i32) returns ($r: ref);



const srp_free_iu: ref;

axiom srp_free_iu == $sub.ref(0, 502518);

procedure srp_free_iu($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation srp_free_iu($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1792)), $mul.ref(0, 1));
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.1, $p8);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.1, $p10);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.1, $p12);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} ib_dma_unmap_single($p7, $i9, $i11, $i13);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} kfree($p15);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p1);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} kfree($p16);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ib_dma_unmap_single: ref;

axiom ib_dma_unmap_single == $sub.ref(0, 503550);

procedure ib_dma_unmap_single($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation ib_dma_unmap_single($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} {:cexpr "ib_dma_unmap_single:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 684} {:cexpr "ib_dma_unmap_single:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 685} {:cexpr "ib_dma_unmap_single:arg:direction"} boogie_si_record_i32($i3);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2488)), $mul.ref(928, 1));
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2488)), $mul.ref(0, 1));
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} dma_unmap_single_attrs($p13, $i1, $i2, $i3, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2488)), $mul.ref(928, 1));
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    call {:si_unique_call 686} devirtbounce.9($p11, $p0, $i1, $i2, $i3);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dma_unmap_single_attrs: ref;

axiom dma_unmap_single_attrs == $sub.ref(0, 504582);

procedure dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref);
  free requires assertsPassed;



implementation dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} {:cexpr "dma_unmap_single_attrs:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 689} {:cexpr "dma_unmap_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 690} {:cexpr "dma_unmap_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} $p5 := get_dma_ops($p0);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} $i6 := valid_dma_direction($i3);
    call {:si_unique_call 693} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 695} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} debug_dma_unmap_page($p0, $i1, $i2, $i3, 1);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    call {:si_unique_call 697} devirtbounce.11($p17, $p0, $i1, $i2, $i3, $p4);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    call {:si_unique_call 696} devirtbounce.3(0, .str.44, 36, 12);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    assume false;
    return;
}



const debug_dma_unmap_page: ref;

axiom debug_dma_unmap_page == $sub.ref(0, 505614);

procedure debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1);
  free requires assertsPassed;



implementation debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} {:cexpr "debug_dma_unmap_page:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 700} {:cexpr "debug_dma_unmap_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 701} {:cexpr "debug_dma_unmap_page:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 702} {:cexpr "debug_dma_unmap_page:arg:arg4"} boogie_si_record_i1($i4);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    return;
}



const ib_dma_map_single: ref;

axiom ib_dma_map_single == $sub.ref(0, 506646);

procedure ib_dma_map_single($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i64);
  free requires assertsPassed;



implementation ib_dma_map_single($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} {:cexpr "ib_dma_map_single:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 704} {:cexpr "ib_dma_map_single:arg:direction"} boogie_si_record_i32($i3);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2488)), $mul.ref(928, 1));
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2488)), $mul.ref(0, 1));
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} $i16 := dma_map_single_attrs($p15, $p1, $i2, $i3, $0.ref);
    call {:si_unique_call 708} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i13 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2488)), $mul.ref(928, 1));
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    call {:si_unique_call 705} $i12 := devirtbounce.12($p11, $p0, $p1, $i2, $i3);
    call {:si_unique_call 706} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const ib_dma_mapping_error: ref;

axiom ib_dma_mapping_error == $sub.ref(0, 507678);

procedure ib_dma_mapping_error($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation ib_dma_mapping_error($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} {:cexpr "ib_dma_mapping_error:arg:dma_addr"} boogie_si_record_i64($i1);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2488)), $mul.ref(928, 1));
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2488)), $mul.ref(0, 1));
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} $i14 := dma_mapping_error($p13, $i1);
    call {:si_unique_call 713} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $i11 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2488)), $mul.ref(928, 1));
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    call {:si_unique_call 710} $i10 := devirtbounce.13($p9, $p0, $i1);
    call {:si_unique_call 711} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const dma_mapping_error: ref;

axiom dma_mapping_error == $sub.ref(0, 508710);

procedure dma_mapping_error($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dma_mapping_error($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i11: i1;
  var $i12: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} {:cexpr "dma_mapping_error:arg:dma_addr"} boogie_si_record_i64($i1);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $p2 := get_dma_ops($p0);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} debug_dma_mapping_error($p0, $i1);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(96, 1));
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i1, 0);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $i10 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(96, 1));
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    call {:si_unique_call 717} $i9 := devirtbounce.14($p8, $p0, $i1);
    call {:si_unique_call 718} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const debug_dma_mapping_error: ref;

axiom debug_dma_mapping_error == $sub.ref(0, 509742);

procedure debug_dma_mapping_error($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation debug_dma_mapping_error($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} {:cexpr "debug_dma_mapping_error:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    return;
}



const dma_map_single_attrs: ref;

axiom dma_map_single_attrs == $sub.ref(0, 510774);

procedure dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64);
  free requires assertsPassed;



implementation dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} {:cexpr "dma_map_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 721} {:cexpr "dma_map_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} $p5 := get_dma_ops($p0);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i2);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} kmemcheck_mark_initialized($p1, $i6);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} $i7 := valid_dma_direction($i3);
    call {:si_unique_call 725} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 727} {:cexpr "tmp___1"} boogie_si_record_i64($i11);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p1);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} $i14 := __phys_addr($i13);
    call {:si_unique_call 730} {:cexpr "tmp___2"} boogie_si_record_i64($i14);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $i17 := $lshr.i64($i14, 12);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i17, 64));
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p1);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 4095);
    call {:si_unique_call 731} $i21 := devirtbounce.15($p16, $p0, $p18, $i20, $i2, $i3, $p4);
    call {:si_unique_call 732} {:cexpr "addr"} boogie_si_record_i64($i21);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p1);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} $i23 := __phys_addr($i22);
    call {:si_unique_call 734} {:cexpr "tmp___3"} boogie_si_record_i64($i23);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $i24 := $lshr.i64($i23, 12);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i24, 64));
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p1);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 4095);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} debug_dma_map_page($p0, $p25, $i27, $i2, $i3, $i21, 1);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb1:
    assume $i12 == 1;
    call {:si_unique_call 728} devirtbounce.3(0, .str.44, 19, 12);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    assume false;
    return;
}



const kmemcheck_mark_initialized: ref;

axiom kmemcheck_mark_initialized == $sub.ref(0, 511806);

procedure kmemcheck_mark_initialized($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation kmemcheck_mark_initialized($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} {:cexpr "kmemcheck_mark_initialized:arg:n"} boogie_si_record_i32($i1);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    return;
}



const __phys_addr: ref;

axiom __phys_addr == $sub.ref(0, 512838);

procedure __phys_addr($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __phys_addr($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 737} {:cexpr "__phys_addr:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 1} true;
    call {:si_unique_call 738} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 739} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const debug_dma_map_page: ref;

axiom debug_dma_map_page == $sub.ref(0, 513870);

procedure debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1);
  free requires assertsPassed;



implementation debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} {:cexpr "debug_dma_map_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 741} {:cexpr "debug_dma_map_page:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 742} {:cexpr "debug_dma_map_page:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 743} {:cexpr "debug_dma_map_page:arg:arg5"} boogie_si_record_i64($i5);
    call {:si_unique_call 744} {:cexpr "debug_dma_map_page:arg:arg6"} boogie_si_record_i1($i6);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    return;
}



const ib_send_cm_dreq: ref;

axiom ib_send_cm_dreq == $sub.ref(0, 514902);

procedure ib_send_cm_dreq($p0: ref, $p1: ref, $i2: i8) returns ($r: i32);
  free requires assertsPassed;



implementation ib_send_cm_dreq($p0: ref, $p1: ref, $i2: i8) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 745} {:cexpr "ib_send_cm_dreq:arg:arg2"} boogie_si_record_i8($i2);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 1} true;
    call {:si_unique_call 746} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 747} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const srp_create_target: ref;

axiom srp_create_target == $sub.ref(0, 515934);

procedure srp_create_target($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation srp_create_target($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i52: i32;
  var $i51: i32;
  var $p53: ref;
  var $i54: i8;
  var $i55: i1;
  var $p56: ref;
  var $i57: i8;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $i72: i32;
  var $i73: i32;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i1;
  var $i78: i8;
  var $i79: i1;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $i83: i64;
  var $i84: i64;
  var $p85: ref;
  var $i86: i64;
  var $i87: i64;
  var $p88: ref;
  var $i89: i64;
  var $i90: i64;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i8;
  var $i96: i1;
  var $p97: ref;
  var $i98: i8;
  var $i99: i1;
  var $p100: ref;
  var $i101: i8;
  var $i102: i1;
  var $p103: ref;
  var $i104: i32;
  var $p105: ref;
  var $i106: i32;
  var $i107: i1;
  var $p109: ref;
  var $i110: i32;
  var $p111: ref;
  var $p112: ref;
  var $i113: i32;
  var $i114: i16;
  var $p115: ref;
  var $p116: ref;
  var $i117: i32;
  var $i118: i32;
  var $p119: ref;
  var $p120: ref;
  var $i121: i32;
  var $i122: i32;
  var $i123: i32;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p132: ref;
  var $p134: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p144: ref;
  var $p146: ref;
  var $p148: ref;
  var $p149: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $i155: i8;
  var $i156: i32;
  var $i157: i8;
  var $p158: ref;
  var $i159: i32;
  var $i160: i1;
  var $i161: i32;
  var $i162: i32;
  var $i163: i1;
  var $i164: i32;
  var $i165: i1;
  var $i167: i32;
  var $i168: i32;
  var $p169: ref;
  var $i170: i32;
  var $i171: i1;
  var $i172: i32;
  var $i166: i32;
  var $p173: ref;
  var $i174: i32;
  var $i175: i1;
  var $i176: i32;
  var $i177: i1;
  var $i178: i32;
  var $p179: ref;
  var $p180: ref;
  var $i181: i32;
  var $i182: i64;
  var $p183: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $i188: i64;
  var $i189: i1;
  var $i190: i32;
  var $i191: i1;
  var $i195: i32;
  var $p196: ref;
  var $i197: i32;
  var $i198: i32;
  var $i199: i32;
  var $i200: i32;
  var $i201: i32;
  var $p202: ref;
  var $i203: i32;
  var $i204: i32;
  var $i205: i32;
  var $i206: i32;
  var $p207: ref;
  var $i208: i32;
  var $i209: i32;
  var $i210: i32;
  var $p211: ref;
  var $i212: i32;
  var $i213: i32;
  var $p214: ref;
  var $i215: i32;
  var $i216: i32;
  var $i217: i32;
  var $i218: i32;
  var $p219: ref;
  var $i220: i32;
  var $i221: i32;
  var $i222: i32;
  var $p223: ref;
  var $i224: i32;
  var $i225: i32;
  var $p226: ref;
  var $i227: i32;
  var $i228: i32;
  var $p229: ref;
  var $i230: i32;
  var $i231: i32;
  var $i232: i1;
  var $i237: i32;
  var $i239: i1;
  var $p240: ref;
  var $i241: i32;
  var $i242: i32;
  var $i243: i1;
  var $i245: i32;
  var $i246: i1;
  var $i247: i32;
  var $p248: ref;
  var $p249: ref;
  var $i250: i32;
  var $i251: i64;
  var $p252: ref;
  var $p253: ref;
  var $i254: i1;
  var $i256: i32;
  var $i257: i32;
  var $i258: i32;
  var $i255: i32;
  var $p259: ref;
  var $p260: ref;
  var $p263: ref;
  var $p264: ref;
  var $p265: ref;
  var $i266: i32;
  var $i267: i1;
  var $i268: i32;
  var $i270: i32;
  var $i271: i1;
  var $i272: i32;
  var $i273: i32;
  var $i274: i1;
  var $i275: i32;
  var $i276: i1;
  var $i277: i32;
  var $i278: i1;
  var $i279: i8;
  var $i280: i32;
  var $p281: ref;
  var $i282: i32;
  var $p283: ref;
  var $p284: ref;
  var $p285: ref;
  var $i286: i32;
  var $p287: ref;
  var $i288: i32;
  var $i289: i32;
  var $i290: i1;
  var $i291: i32;
  var $i292: i64;
  var $p293: ref;
  var $p294: ref;
  var $i295: i64;
  var $i296: i64;
  var $i297: i64;
  var $i298: i32;
  var $p299: ref;
  var $i301: i32;
  var $p302: ref;
  var $i303: i32;
  var $i304: i32;
  var $i305: i1;
  var $i234: i32;
  var $i235: i32;
  var $i236: i8;
  var $i238: i32;
  var $i306: i8;
  var $i233: i8;
  var $i244: i8;
  var $i307: i8;
  var $i300: i8;
  var $i308: i32;
  var $i309: i32;
  var $i310: i1;
  var $i192: i8;
  var $i193: i32;
  var $i194: i32;
  var $p311: ref;
  var $i312: i32;
  var $p313: ref;
  var $p314: ref;
  var $p315: ref;
  var $i316: i32;
  var $i317: i1;
  var $p318: ref;
  var $i319: i32;
  var $i320: i1;
  var $p321: ref;
  var $i322: i64;
  var $i323: i64;
  var $p324: ref;
  var $i325: i16;
  var $i326: i32;
  var $i327: i16;
  var $i328: i16;
  var $p329: ref;
  var $i330: i64;
  var $i331: i64;
  var $p332: ref;
  var $i333: i64;
  var $i334: i64;
  var $p335: ref;
  var $p336: ref;
  var $p337: ref;
  var $i338: i32;
  var $p339: ref;
  var $p340: ref;
  var $p341: ref;
  var $p342: ref;
  var $p343: ref;
  var $p344: ref;
  var $i345: i32;
  var $i346: i32;
  var $p347: ref;
  var $p348: ref;
  var $p349: ref;
  var $i350: i64;
  var $i269: i32;
  var $p351: ref;
  var $i352: i32;
  var $i353: i1;
  var $p355: ref;
  var $p356: ref;
  var $i357: i64;
  var $p358: ref;
  var $i359: i32;
  var $i360: i32;
  var $i361: i1;
  var $i354: i32;
  var $p362: ref;
  var $p363: ref;
  var $p364: ref;
  var $i66: i32;
  var $i19: i64;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var vslice_dummy_var_98: ref;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: ref;
  var vslice_dummy_var_101: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 754} {:cexpr "srp_create_target:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p0);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref($sub.ref(0, 16), 1792));
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p10, $mul.ref($sub.ref(0, 16), 1792)), $mul.ref(0, 1));
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} $p16 := ldv_scsi_host_alloc_145(srp_template, 464);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p20 := $M.58;
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p16, $mul.ref(0, 3816)), $mul.ref(512, 1));
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p21, $p20);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p16, $mul.ref(0, 3816)), $mul.ref(784, 1));
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p22, 0);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p16, $mul.ref(0, 3816)), $mul.ref(788, 1));
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p23, 1);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p16, $mul.ref(0, 3816)), $mul.ref(792, 1));
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p24, 512);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p16, $mul.ref(0, 3816)), $mul.ref(804, 1));
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p25, 16);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} $p26 := host_to_target($p16);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(160, 1));
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p27, 256);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p28, $p16);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(168, 1));
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p29, $p11);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p10, $mul.ref($sub.ref(0, 16), 1792)), $mul.ref(0, 1));
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.1, $p30);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.1, $p32);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.1, $p34);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(84, 1));
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p36, $i35);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p10, $mul.ref($sub.ref(0, 16), 1792)), $mul.ref(0, 1));
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.1, $p37);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.1, $p39);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.1, $p41);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p43, $i42);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i44 := $M.59;
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(100, 1));
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p45, $i44);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $i46 := $M.60;
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i47 == 1);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $i52 := $M.59;
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $i51 := $i52;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(228, 1));
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p53, $i51);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $i54 := $M.61;
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i8.i1($i54);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(108, 1));
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $i57 := $zext.i1.i8($i55);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p56, $i57);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(244, 1));
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p58, 7);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(232, 1));
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p59, 64);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.1, $p60);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} vslice_dummy_var_98 := scsi_host_get($p61);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p10, $mul.ref($sub.ref(0, 16), 1792)), $mul.ref(1632, 1));
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} ldv_mutex_lock_146($p63);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} $i64 := srp_parse_options($p2, $p26);
    call {:si_unique_call 760} {:cexpr "ret"} boogie_si_record_i32($i64);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p16, $mul.ref(0, 3816)), $mul.ref(812, 1));
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.1, $p67);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} $i69 := scsi_init_shared_tag_map($p16, $i68);
    call {:si_unique_call 763} {:cexpr "ret"} boogie_si_record_i32($i69);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(232, 1));
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.1, $p71);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $i73 := $add.i32($i72, $sub.i32(0, 1));
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(236, 1));
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p74, $i73);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(168, 1));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.1, $p75);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} $i77 := srp_conn_unique($p76, $p26);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i78 := $zext.i1.i8($i77);
    call {:si_unique_call 765} {:cexpr "tmp___2"} boogie_si_record_i8($i78);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i8.i1($i78);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    $i80 := 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p13, $mul.ref(0, 64)), $mul.ref(60, 1));
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.1, $p94);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i8.i1($i95);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb23;

  $bb23:
    assume !($i96 == 1);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p13, $mul.ref(0, 64)), $mul.ref(61, 1));
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.1, $p97);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i8.i1($i98);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i99 == 1);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(108, 1));
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.1, $p100);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $i102 := $trunc.i8.i1($i101);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i102 == 1);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(100, 1));
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.1, $p103);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(228, 1));
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.1, $p105);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i107 := $ult.i32($i104, $i106);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i107 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(228, 1));
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.1, $p112);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $i114 := $trunc.i32.i16($i113);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p16, $mul.ref(0, 3816)), $mul.ref(818, 1));
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p115, $i114);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(228, 1));
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.1, $p116);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i118 := $mul.i32($i117, 16);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(104, 1));
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p119, $i118);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(100, 1));
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.1, $p120);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i122 := $mul.i32($i121, 16);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i123 := $add.i32($i122, 68);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p124, $i123);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(280, 1));
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} __init_work($p125, 0);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p126, 137438953408);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p128);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $p130 := $bitcast.ref.ref($p5);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_37 := $M.1;
    cmdloc_dummy_var_38 := $M.1;
    call {:si_unique_call 775} cmdloc_dummy_var_39 := $memcpy.i8(cmdloc_dummy_var_37, cmdloc_dummy_var_38, $p129, $p130, 8, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_39;
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(280, 1)), $mul.ref(32, 1));
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} lockdep_init_map($p132, .str.82, $p4, 0);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} INIT_LIST_HEAD($p134);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(280, 1)), $mul.ref(24, 1));
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p136, srp_tl_err_work);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(360, 1));
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} __init_work($p137, 0);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p7, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p138, 137438953408);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $p141 := $bitcast.ref.ref($p140);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $p142 := $bitcast.ref.ref($p7);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_40 := $M.1;
    cmdloc_dummy_var_41 := $M.1;
    call {:si_unique_call 779} cmdloc_dummy_var_42 := $memcpy.i8(cmdloc_dummy_var_40, cmdloc_dummy_var_41, $p141, $p142, 8, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_42;
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(360, 1)), $mul.ref(32, 1));
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} lockdep_init_map($p144, .str.83, $p6, 0);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} INIT_LIST_HEAD($p146);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(360, 1)), $mul.ref(24, 1));
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p148, srp_remove_work);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} vslice_dummy_var_100 := spinlock_check($p149);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $p153 := $bitcast.ref.ref($p152);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} __raw_spin_lock_init($p153, .str.84, $p8);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p10, $mul.ref($sub.ref(0, 16), 1792)), $mul.ref(8, 1));
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i155 := $load.i8($M.1, $p154);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i156 := $zext.i8.i32($i155);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i157 := $trunc.i32.i8($i156);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} $i159 := ib_query_gid($p15, $i157, 0, $p158);
    call {:si_unique_call 785} {:cexpr "ret"} boogie_si_record_i32($i159);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $i160 := $ne.i32($i159, 0);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    assume {:branchcond $i160} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} $i161 := num_node_state(1);
    call {:si_unique_call 787} {:cexpr "tmp___4"} boogie_si_record_i32($i161);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $i162 := $M.62;
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $i163 := $ne.i32($i162, 0);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i164 := $zext.i1.i32($i163);
    call {:si_unique_call 788} {:cexpr "tmp___6"} boogie_si_record_i32($i164);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i165 := $ne.i32($i164, 0);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i165 == 1);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} $i167 := num_node_state(1);
    call {:si_unique_call 790} {:cexpr "tmp___5"} boogie_si_record_i32($i167);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $i168 := $mul.i32($i167, 4);
    call {:si_unique_call 791} {:cexpr "_min1___0"} boogie_si_record_i32($i168);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p15, $mul.ref(0, 2488)), $mul.ref(408, 1));
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i170 := $load.i32($M.1, $p169);
    call {:si_unique_call 792} {:cexpr "_min2"} boogie_si_record_i32($i170);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $i171 := $slt.i32($i168, $i170);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    assume {:branchcond $i171} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i171 == 1);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $i172 := $i170;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i166 := $i172;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $p173 := $load.ref($M.1, cpu_online_mask);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} $i174 := cpumask_weight($p173);
    call {:si_unique_call 794} {:cexpr "tmp___7"} boogie_si_record_i32($i174);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i175 := $ult.i32($i166, $i174);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    assume {:branchcond $i175} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i175 == 1);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $i176 := $i174;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $i177 := $ugt.i32($i161, $i176);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i177 == 1);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i178 := $i176;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p179, $i178);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $i181 := $load.i32($M.1, $p180);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $i182 := $zext.i32.i64($i181);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} $p183 := kcalloc($i182, 576, 208);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p185, $p183);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $p187 := $load.ref($M.1, $p186);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $i188 := $p2i.ref.i64($p187);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $i189 := $eq.i64($i188, 0);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    assume {:branchcond $i189} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} $i190 := __first_node($add.ref($add.ref(node_states, $mul.ref(0, 640)), $mul.ref(1, 128)));
    call {:si_unique_call 797} {:cexpr "node"} boogie_si_record_i32($i190);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i191 := $sle.i32($i190, 1023);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    assume {:branchcond $i191} true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i191 == 1);
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i312 := $load.i32($M.1, $p311);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p314 := $load.ref($M.1, $p313);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($p314, $mul.ref(0, 3816)), $mul.ref(840, 1));
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p315, $i312);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} $i316 := srp_add_target($p11, $p26);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    call {:si_unique_call 838} {:cexpr "ret"} boogie_si_record_i32($i316);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i317 := $ne.i32($i316, 0);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    assume {:branchcond $i317} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i317 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $i319 := $load.i32($M.1, $p318);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i320 := $ne.i32($i319, 2);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    assume {:branchcond $i320} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i320 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $i345 := $trunc.i64.i32($i3);
    call {:si_unique_call 848} {:cexpr "ret"} boogie_si_record_i32($i345);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $i346 := $i345;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($p10, $mul.ref($sub.ref(0, 16), 1792)), $mul.ref(1632, 1));
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} ldv_mutex_unlock_147($p347);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $p349 := $load.ref($M.1, $p348);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} scsi_host_put($p349);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $i350 := $sext.i32.i64($i346);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $i19 := $i350;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  $bb98:
    assume $i320 == 1;
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(144, 1));
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $i322 := $load.i64($M.1, $p321);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} $i323 := __fswab64($i322);
    call {:si_unique_call 840} {:cexpr "tmp___15"} boogie_si_record_i64($i323);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(264, 1));
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $i325 := $load.i16($M.1, $p324);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $i326 := $zext.i16.i32($i325);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $i327 := $trunc.i32.i16($i326);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} $i328 := __fswab16($i327);
    call {:si_unique_call 842} {:cexpr "tmp___16"} boogie_si_record_i16($i328);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(136, 1));
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $i330 := $load.i64($M.1, $p329);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} $i331 := __fswab64($i330);
    call {:si_unique_call 844} {:cexpr "tmp___17"} boogie_si_record_i64($i331);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(128, 1));
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i333 := $load.i64($M.1, $p332);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} $i334 := __fswab64($i333);
    call {:si_unique_call 846} {:cexpr "tmp___18"} boogie_si_record_i64($i334);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $p336 := $load.ref($M.1, $p335);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($p336, $mul.ref(0, 3816)), $mul.ref(952, 1));
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $i338 := $zext.i16.i32($i328);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $p340 := $bitcast.ref.ref($p339);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $p341 := $bitcast.ref.ref($p340);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(248, 1));
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $p343 := $bitcast.ref.ref($p342);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $p344 := $bitcast.ref.ref($p343);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} dev_printk.ref.ref.ref.i64.i64.i32.i64.ref.ref(.str.33, $p337, .str.87, $i334, $i331, $i338, $i323, $p341, $p344);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb95:
    assume $i317 == 1;
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $i269 := $i316;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} srp_disconnect_target($p26);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $i352 := $load.i32($M.1, $p351);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i353 := $ult.i32(0, $i352);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    assume {:branchcond $i353} true;
    goto $bb102, $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    assume !($i353 == 1);
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $p363 := $load.ref($M.1, $p362);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $p364 := $bitcast.ref.ref($p363);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} kfree($p364);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i66 := $i269;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} scsi_host_put($p16);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $i346 := $i66;
    goto $bb101;

  $bb102:
    assume $i353 == 1;
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $i354 := 0;
    goto $bb105;

  $bb105:
    call $p355, $p356, $i357, $p358, $i359, $i360, $i361, $i354 := srp_create_target_loop_$bb105($p26, $p351, $p355, $p356, $i357, $p358, $i359, $i360, $i361, $i354);
    goto $bb105_last;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $p356 := $load.ref($M.1, $p355);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $i357 := $sext.i32.i64($i354);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $p358 := $add.ref($p356, $mul.ref($i357, 488));
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} srp_free_ch_ib($p26, $p358);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} srp_free_req_data($p26, $p358);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $i359 := $add.i32($i354, 1);
    call {:si_unique_call 853} {:cexpr "i"} boogie_si_record_i32($i359);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $i360 := $load.i32($M.1, $p351);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i361 := $ult.i32($i359, $i360);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i361 == 1);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb107:
    assume $i361 == 1;
    assume {:verifier.code 0} true;
    $i354 := $i359;
    goto $bb107_dummy;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb49:
    assume $i191 == 1;
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $i192, $i193, $i194 := 0, $i190, 0;
    goto $bb52;

  $bb52:
    call $i195, $p196, $i197, $i198, $i199, $i200, $i201, $p202, $i203, $i204, $i205, $i206, $p207, $i208, $i209, $i210, $p211, $i212, $i213, $p214, $i215, $i216, $i217, $i218, $p219, $i220, $i221, $i222, $p223, $i224, $i225, $p226, $i227, $i228, $p229, $i230, $i231, $i232, $i237, $i239, $p240, $i241, $i242, $i243, $i245, $i246, $i247, $p248, $p249, $i250, $i251, $p252, $p253, $i254, $i256, $i257, $i258, $i255, $p259, $p260, $p263, $p264, $p265, $i266, $i267, $i268, $i270, $i271, $i272, $i273, $i274, $i275, $i276, $i277, $i278, $i279, $i280, $p281, $i282, $p283, $p284, $p285, $i286, $p287, $i288, $i289, $i290, $i291, $i292, $p293, $p294, $i295, $i296, $i297, $i298, $p299, $i301, $p302, $i303, $i304, $i305, $i234, $i235, $i236, $i238, $i306, $i233, $i244, $i307, $i300, $i308, $i309, $i310, $i192, $i193, $i194, vslice_dummy_var_101 := srp_create_target_loop_$bb52($p9, $p15, $p26, $i195, $p196, $i197, $i198, $i199, $i200, $i201, $p202, $i203, $i204, $i205, $i206, $p207, $i208, $i209, $i210, $p211, $i212, $i213, $p214, $i215, $i216, $i217, $i218, $p219, $i220, $i221, $i222, $p223, $i224, $i225, $p226, $i227, $i228, $p229, $i230, $i231, $i232, $i237, $i239, $p240, $i241, $i242, $i243, $i245, $i246, $i247, $p248, $p249, $i250, $i251, $p252, $p253, $i254, $i256, $i257, $i258, $i255, $p259, $p260, $p263, $p264, $p265, $i266, $i267, $i268, $i270, $i271, $i272, $i273, $i274, $i275, $i276, $i277, $i278, $i279, $i280, $p281, $i282, $p283, $p284, $p285, $i286, $p287, $i288, $i289, $i290, $i291, $i292, $p293, $p294, $i295, $i296, $i297, $i298, $p299, $i301, $p302, $i303, $i304, $i305, $i234, $i235, $i236, $i238, $i306, $i233, $i244, $i307, $i300, $i308, $i309, $i310, $i192, $i193, $i194, vslice_dummy_var_101);
    goto $bb52_last;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} $i195 := num_node_state(1);
    call {:si_unique_call 799} {:cexpr "tmp___9"} boogie_si_record_i32($i195);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i197 := $load.i32($M.1, $p196);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $i198 := $mul.i32($i194, $i197);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $i199 := $udiv.i32($i198, $i195);
    call {:si_unique_call 800} {:cexpr "ch_start"} boogie_si_record_i32($i199);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} $i200 := num_node_state(1);
    call {:si_unique_call 802} {:cexpr "tmp___10"} boogie_si_record_i32($i200);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i201 := $add.i32($i194, 1);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i203 := $load.i32($M.1, $p202);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $i204 := $mul.i32($i201, $i203);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $i205 := $udiv.i32($i204, $i200);
    call {:si_unique_call 803} {:cexpr "ch_end"} boogie_si_record_i32($i205);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} $i206 := num_node_state(1);
    call {:si_unique_call 805} {:cexpr "tmp___11"} boogie_si_record_i32($i206);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p15, $mul.ref(0, 2488)), $mul.ref(408, 1));
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $i208 := $load.i32($M.1, $p207);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i209 := $mul.i32($i194, $i208);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i210 := $sdiv.i32($i209, $i206);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(240, 1));
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $i212 := $load.i32($M.1, $p211);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $i213 := $add.i32($i210, $i212);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p15, $mul.ref(0, 2488)), $mul.ref(408, 1));
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i215 := $load.i32($M.1, $p214);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $i216 := $srem.i32($i213, $i215);
    call {:si_unique_call 806} {:cexpr "cv_start"} boogie_si_record_i32($i216);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} $i217 := num_node_state(1);
    call {:si_unique_call 808} {:cexpr "tmp___12"} boogie_si_record_i32($i217);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $i218 := $add.i32($i194, 1);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p15, $mul.ref(0, 2488)), $mul.ref(408, 1));
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i220 := $load.i32($M.1, $p219);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $i221 := $mul.i32($i218, $i220);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $i222 := $sdiv.i32($i221, $i217);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(240, 1));
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i224 := $load.i32($M.1, $p223);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $i225 := $add.i32($i222, $i224);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p15, $mul.ref(0, 2488)), $mul.ref(408, 1));
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $i227 := $load.i32($M.1, $p226);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $i228 := $srem.i32($i225, $i227);
    call {:si_unique_call 809} {:cexpr "cv_end"} boogie_si_record_i32($i228);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $p229 := $load.ref($M.1, cpu_online_mask);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} $i230 := cpumask_next($sub.i32(0, 1), $p229);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    call {:si_unique_call 811} {:cexpr "tmp___14"} boogie_si_record_i32($i230);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i231 := $load.i32($M.1, nr_cpu_ids);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $i232 := $slt.i32($i230, $i231);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $i233 := $i192;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i232 == 1);
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $i307 := $i233;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $i300 := $i307;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i308 := $add.i32($i194, 1);
    call {:si_unique_call 831} {:cexpr "node_idx"} boogie_si_record_i32($i308);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} $i309 := __next_node($i193, $add.ref($add.ref(node_states, $mul.ref(0, 640)), $mul.ref(1, 128)));
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    call {:si_unique_call 833} {:cexpr "node"} boogie_si_record_i32($i309);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $i310 := $sle.i32($i309, 1023);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i310 == 1);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb92:
    assume $i310 == 1;
    assume {:verifier.code 0} true;
    $i192, $i193, $i194 := $i300, $i309, $i308;
    goto $bb92_dummy;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  $bb54:
    assume $i232 == 1;
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $i234, $i235, $i236 := $i230, 0, $i192;
    goto $bb57;

  $bb57:
    call $i237, $i239, $p240, $i241, $i242, $i243, $i245, $i246, $i247, $p248, $p249, $i250, $i251, $p252, $p253, $i254, $i256, $i257, $i258, $i255, $p259, $p260, $p263, $p264, $p265, $i266, $i267, $i268, $i270, $i271, $i272, $i273, $i274, $i275, $i276, $i277, $i278, $i279, $i280, $p281, $i282, $i301, $p302, $i303, $i304, $i305, $i234, $i235, $i236, $i238, $i306, $i244, vslice_dummy_var_101 := srp_create_target_loop_$bb57($p9, $p26, $i199, $i205, $i216, $i228, $i237, $i239, $p240, $i241, $i242, $i243, $i245, $i246, $i247, $p248, $p249, $i250, $i251, $p252, $p253, $i254, $i256, $i257, $i258, $i255, $p259, $p260, $p263, $p264, $p265, $i266, $i267, $i268, $i270, $i271, $i272, $i273, $i274, $i275, $i276, $i277, $i278, $i279, $i280, $p281, $i282, $i301, $p302, $i303, $i304, $i305, $i234, $i235, $i236, $i238, $i306, $i244, $i193, vslice_dummy_var_101);
    goto $bb57_last;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $i238 := $i234;
    goto $bb89;

  $bb89:
    call $i237, $i239, $p240, $i241, $i242, $i243, $i245, $i246, $i247, $i238, $i244 := srp_create_target_loop_$bb89($i199, $i205, $i237, $i239, $p240, $i241, $i242, $i243, $i245, $i246, $i247, $i235, $i236, $i238, $i244, $i193);
    goto $bb89_last;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} $i237 := __cpu_to_node($i238);
    call {:si_unique_call 813} {:cexpr "tmp___13"} boogie_si_record_i32($i237);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i239 := $ne.i32($i237, $i193);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i245 := $add.i32($i199, $i235);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $i246 := $sge.i32($i245, $i205);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $i247 := $i238;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i246 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $p249 := $load.ref($M.1, $p248);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $i250 := $add.i32($i199, $i235);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $i251 := $sext.i32.i64($i250);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($p249, $mul.ref($i251, 488));
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p249, $mul.ref($i251, 488)), $mul.ref(96, 1));
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p253, $p26);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i254 := $eq.i32($i216, $i228);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i254 == 1);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i256 := $sub.i32($i228, $i216);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $i257 := $srem.i32($i235, $i256);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $i258 := $add.i32($i216, $i257);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i255 := $i258;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p249, $mul.ref($i251, 488)), $mul.ref(380, 1));
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p259, $i255);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p249, $mul.ref($i251, 488)), $mul.ref(16, 1));
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} vslice_dummy_var_101 := spinlock_check($p260);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($add.ref($p249, $mul.ref($i251, 488)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $p264 := $bitcast.ref.ref($p263);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} __raw_spin_lock_init($p264, .str.85, $p9);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p249, $mul.ref($i251, 488)), $mul.ref(0, 1));
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} INIT_LIST_HEAD($p265);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} $i266 := srp_new_cm_id($p252);
    call {:si_unique_call 820} {:cexpr "ret"} boogie_si_record_i32($i266);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $i267 := $ne.i32($i266, 0);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $i268 := $i266;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} $i270 := srp_create_ch_ib($p252);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    call {:si_unique_call 823} {:cexpr "ret"} boogie_si_record_i32($i270);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $i271 := $ne.i32($i270, 0);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $i272 := $i270;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} $i273 := srp_alloc_req_data($p252);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    call {:si_unique_call 825} {:cexpr "ret"} boogie_si_record_i32($i273);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $i274 := $ne.i32($i273, 0);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $i275 := $i273;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i276 := $trunc.i8.i1($i236);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} $i277 := srp_connect_ch($p252, $i276);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    call {:si_unique_call 827} {:cexpr "ret"} boogie_si_record_i32($i277);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $i278 := $ne.i32($i277, 0);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $i279, $i280, $p281, $i282 := $i236, $i235, $p252, $i277;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i301 := $add.i32($i235, 1);
    call {:si_unique_call 834} {:cexpr "cpu_idx"} boogie_si_record_i32($i301);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $p302 := $load.ref($M.1, cpu_online_mask);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} $i303 := cpumask_next($i247, $p302);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    call {:si_unique_call 836} {:cexpr "tmp___14"} boogie_si_record_i32($i303);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i304 := $load.i32($M.1, nr_cpu_ids);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $i305 := $slt.i32($i303, $i304);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $i306 := 1;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i305 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $i233 := $i306;
    goto $bb56;

  $bb87:
    assume $i305 == 1;
    assume {:verifier.code 0} true;
    $i234, $i235, $i236 := $i303, $i301, 1;
    goto $bb87_dummy;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  $bb81:
    assume $i278 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $p284 := $load.ref($M.1, $p283);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p284, $mul.ref(0, 3816)), $mul.ref(952, 1));
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $i286 := $add.i32($i199, $i280);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $i288 := $load.i32($M.1, $p287);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} dev_printk.ref.ref.ref.i32.i32(.str.39, $p285, .str.86, $i286, $i288);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $i289 := $or.i32($i194, $i280);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $i290 := $eq.i32($i289, 0);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i291 := $i282;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i290 == 1);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} srp_free_ch_ib($p26, $p281);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} srp_free_req_data($p26, $p281);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $i292 := $p2i.ref.i64($p281);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $p294 := $load.ref($M.1, $p293);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $i295 := $p2i.ref.i64($p294);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $i296 := $sub.i64($i292, $i295);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $i297 := $sdiv.i64($i296, 576);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i298 := $trunc.i64.i32($i297);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p299, $i298);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $i300 := $i279;
    goto $bb85;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb83:
    assume $i290 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $i269 := $i291;
    goto $bb73;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  $bb78:
    assume $i274 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $i269 := $i275;
    goto $bb73;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  $bb75:
    assume $i271 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $i269 := $i272;
    goto $bb73;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb71:
    assume $i267 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i269 := $i268;
    goto $bb73;

  $bb68:
    assume $i254 == 1;
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $i255 := $i216;
    goto $bb70;

  $bb65:
    assume $i246 == 1;
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p240 := $load.ref($M.1, cpu_online_mask);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} $i241 := cpumask_next($i238, $p240);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    call {:si_unique_call 815} {:cexpr "tmp___14"} boogie_si_record_i32($i241);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $i242 := $load.i32($M.1, nr_cpu_ids);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $i243 := $slt.i32($i241, $i242);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $i244 := $i236;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i243 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i307 := $i244;
    goto $bb90;

  $bb62:
    assume $i243 == 1;
    assume {:verifier.code 0} true;
    $i238 := $i241;
    goto $bb62_dummy;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb59:
    assume $i239 == 1;
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    goto $bb61;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb46:
    assume $i189 == 1;
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i66 := $sub.i32(0, 12);
    goto $bb10;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb43:
    assume $i177 == 1;
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $i178 := $i161;
    goto $bb45;

  $bb40:
    assume $i175 == 1;
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i176 := $i166;
    goto $bb42;

  $bb37:
    assume $i171 == 1;
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $i172 := $i168;
    goto $bb39;

  $bb34:
    assume $i165 == 1;
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $i166 := $i164;
    goto $bb36;

  $bb31:
    assume $i160 == 1;
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i66 := $i159;
    goto $bb10;

  $bb28:
    assume $i107 == 1;
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} vslice_dummy_var_99 := printk.ref(.str.81);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(100, 1));
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.1, $p109);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(228, 1));
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p111, $i110);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i102 == 1;
    goto $bb22;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i99 == 1;
    goto $bb22;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i96 == 1;
    goto $bb22;

  $bb18:
    assume $i81 == 1;
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(152, 1));
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i83 := $load.i64($M.1, $p82);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} $i84 := __fswab64($i83);
    call {:si_unique_call 767} {:cexpr "tmp"} boogie_si_record_i64($i84);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(136, 1));
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $i86 := $load.i64($M.1, $p85);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} $i87 := __fswab64($i86);
    call {:si_unique_call 769} {:cexpr "tmp___0"} boogie_si_record_i64($i87);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(128, 1));
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $i89 := $load.i64($M.1, $p88);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} $i90 := __fswab64($i89);
    call {:si_unique_call 771} {:cexpr "tmp___1"} boogie_si_record_i64($i90);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p26, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.1, $p91);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 3816)), $mul.ref(952, 1));
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} dev_printk.ref.ref.ref.i64.i64.i64(.str.31, $p93, .str.80, $i90, $i87, $i84);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i66 := $sub.i32(0, 17);
    goto $bb10;

  $bb15:
    assume $i79 == 1;
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $i80 := 0;
    goto $bb17;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i70 == 1;
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $i66 := $i69;
    goto $bb10;

  $bb8:
    assume $i65 == 1;
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $i66 := $i64;
    goto $bb10;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i47 == 1;
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $i48 := $M.60;
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $i50 := $zext.i1.i32($i49);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $i51 := $i50;
    goto $bb7;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i19 := $sub.i64(0, 12);
    goto $bb3;

  $bb107_dummy:
    assume false;
    return;

  $bb105_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3954;

  $bb62_dummy:
    assume false;
    return;

  $bb89_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3896;

  $bb87_dummy:
    assume false;
    return;

  $bb57_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3787;

  $bb92_dummy:
    assume false;
    return;

  $bb52_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3742;
}



const ldv_scsi_host_alloc_145: ref;

axiom ldv_scsi_host_alloc_145 == $sub.ref(0, 516966);

procedure ldv_scsi_host_alloc_145($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation ldv_scsi_host_alloc_145($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} {:cexpr "ldv_scsi_host_alloc_145:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} $p2 := scsi_host_alloc($p0, $i1);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} $p3 := ldv_scsi_host_alloc($p2, $p0, $i1);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const host_to_target: ref;

axiom host_to_target == $sub.ref(0, 517998);

procedure host_to_target($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation host_to_target($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3816)), $mul.ref(3816, 1));
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const scsi_host_get: ref;

axiom scsi_host_get == $sub.ref(0, 519030);

procedure scsi_host_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation scsi_host_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} $p1 := external_alloc();
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_mutex_lock_146: ref;

axiom ldv_mutex_lock_146 == $sub.ref(0, 520062);

procedure ldv_mutex_lock_146($p0: ref);
  free requires assertsPassed;
  modifies $M.65, assertsPassed;



implementation ldv_mutex_lock_146($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} ldv_linux_kernel_locking_mutex_mutex_lock_add_target_mutex_of_srp_host($p0);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_301:
    assume !assertsPassed;
    return;
}



const srp_parse_options: ref;

axiom srp_parse_options == $sub.ref(0, 521094);

procedure srp_parse_options($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.63, $M.64, $M.1, $CurrAddr;



implementation srp_parse_options($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i16: i8;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $i61: i64;
  var $i62: i64;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $i67: i1;
  var $i68: i64;
  var $i69: i64;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i1;
  var $i75: i64;
  var $i76: i1;
  var $p77: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i64;
  var $p83: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $p90: ref;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $i79: i32;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $i101: i32;
  var $i102: i16;
  var $i103: i32;
  var $i104: i16;
  var $i105: i16;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i64;
  var $i110: i1;
  var $i111: i64;
  var $i112: i64;
  var $p113: ref;
  var $p114: ref;
  var $i115: i32;
  var $i116: i1;
  var $p117: ref;
  var $i119: i32;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $i124: i32;
  var $i125: i1;
  var $i127: i32;
  var $i128: i1;
  var $p126: ref;
  var $i130: i32;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $i134: i32;
  var $i135: i32;
  var $p136: ref;
  var $i137: i32;
  var $i138: i1;
  var $i139: i32;
  var $i140: i16;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i32;
  var $i146: i1;
  var $i148: i32;
  var $i149: i1;
  var $p147: ref;
  var $i151: i32;
  var $i152: i16;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $i157: i32;
  var $i158: i1;
  var $p159: ref;
  var $i161: i32;
  var $i162: i1;
  var $i163: i32;
  var $i164: i1;
  var $i165: i32;
  var $i167: i32;
  var $i168: i16;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $i172: i64;
  var $i173: i1;
  var $i174: i64;
  var $i175: i64;
  var $p176: ref;
  var $p177: ref;
  var $i178: i32;
  var $i179: i1;
  var $i181: i32;
  var $i182: i1;
  var $i183: i32;
  var $i184: i1;
  var $p180: ref;
  var $i186: i32;
  var $p187: ref;
  var $p188: ref;
  var $i189: i32;
  var $i190: i1;
  var $p191: ref;
  var $i193: i32;
  var $i194: i1;
  var $p195: ref;
  var $i196: i8;
  var $p197: ref;
  var $i198: i32;
  var $i199: i1;
  var $i201: i32;
  var $i202: i1;
  var $i203: i32;
  var $i204: i1;
  var $p200: ref;
  var $i206: i32;
  var $p207: ref;
  var $p208: ref;
  var $i209: i32;
  var $i210: i1;
  var $i212: i32;
  var $i213: i1;
  var $p211: ref;
  var $i215: i32;
  var $p216: ref;
  var $p217: ref;
  var $i218: i32;
  var $i219: i1;
  var $i221: i32;
  var $i222: i1;
  var $i223: i32;
  var $i224: i1;
  var $p220: ref;
  var $i226: i32;
  var $p227: ref;
  var $p229: ref;
  var $i230: i64;
  var $i231: i1;
  var $p14: ref;
  var $i15: i32;
  var $p233: ref;
  var $i234: i64;
  var $i235: i1;
  var $p17: ref;
  var $i232: i32;
  var $i13: i32;
  var $i236: i32;
  var $i237: i32;
  var $i238: i32;
  var $i239: i1;
  var $i241: i32;
  var $i242: i1;
  var $i240: i32;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $i247: i16;
  var $i248: i32;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $i252: i32;
  var $i253: i1;
  var $i254: i32;
  var $i255: i1;
  var $p256: ref;
  var $p257: ref;
  var $p258: ref;
  var $i259: i16;
  var $i260: i32;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $i264: i32;
  var $i60: i32;
  var $i9: i32;
  var $i266: i32;
  var $i267: i1;
  var $i269: i32;
  var $i270: i1;
  var $i272: i32;
  var $i273: i1;
  var $i275: i32;
  var $i276: i1;
  var $i278: i32;
  var $i279: i1;
  var $i281: i32;
  var $i282: i1;
  var $i284: i32;
  var $i285: i1;
  var $i287: i32;
  var $i288: i1;
  var $i290: i32;
  var $i291: i1;
  var $i293: i32;
  var $i294: i1;
  var $i296: i32;
  var $i297: i1;
  var $i299: i32;
  var $i300: i1;
  var $i302: i32;
  var $i303: i1;
  var $i305: i32;
  var $i306: i1;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i64;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: i32;
  var vslice_dummy_var_122: i32;
  var vslice_dummy_var_123: i32;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} $p3 := $alloc($mul.ref(3, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} $p4 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} $p6 := kstrdup($p0, 208);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.63 := $store.ref($M.63, $p2, $p6);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} $p10 := strsep($p2, .str.120);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $i13 := 0;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $i237 := $i13;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    $i238 := $and.i32($i237, 31);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i239 := $eq.i32($i238, 31);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i239 == 1);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb178, $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb192, $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb199, $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb206, $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb213, $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb220, $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb227, $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb234, $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb241, $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb248, $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb255, $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb262, $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb269, $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb276, $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb283, $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb290, $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    $i240 := $sub.i32(0, 22);
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $p245 := $load.ref($M.1, $p244);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p245, $mul.ref(0, 3816)), $mul.ref(816, 1));
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $i247 := $load.i16($M.1, $p246);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i248 := $sext.i16.i32($i247);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $p250 := $load.ref($M.1, $p249);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p250, $mul.ref(0, 3816)), $mul.ref(812, 1));
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $i252 := $load.i32($M.1, $p251);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $i253 := $sgt.i32($i248, $i252);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    assume {:branchcond $i253} true;
    goto $bb186, $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    assume !($i253 == 1);
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    $i60 := $i240;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} kfree($p6);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $i9 := $i60;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb186:
    assume $i253 == 1;
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $i254 := $and.i32($i237, 64);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i255 := $ne.i32($i254, 0);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    assume {:branchcond $i255} true;
    goto $bb189, $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    assume !($i255 == 1);
    goto $bb188;

  $bb189:
    assume $i255 == 1;
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $p257 := $load.ref($M.1, $p256);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p257, $mul.ref(0, 3816)), $mul.ref(816, 1));
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i259 := $load.i16($M.1, $p258);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $i260 := $sext.i16.i32($i259);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $p262 := $load.ref($M.1, $p261);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p262, $mul.ref(0, 3816)), $mul.ref(812, 1));
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $i264 := $load.i32($M.1, $p263);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} vslice_dummy_var_117 := printk.ref.i32.i32(.str.122, $i260, $i264);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb290:
    assume 0 == 1;
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb293, $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb292;

  $bb293:
    assume 1 == 1;
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} vslice_dummy_var_132 := printk.ref.ref(.str.121, $0.ref);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb283:
    assume 0 == 1;
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $i305 := $and.i32(16384, $i237);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $i306 := $eq.i32($i305, 0);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    assume {:branchcond $i306} true;
    goto $bb286, $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    assume !($i306 == 1);
    goto $bb285;

  $bb286:
    assume $i306 == 1;
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} vslice_dummy_var_131 := printk.ref.ref(.str.121, .str.137);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb276:
    assume 0 == 1;
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $i302 := $and.i32(8192, $i237);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $i303 := $eq.i32($i302, 0);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    assume {:branchcond $i303} true;
    goto $bb279, $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    assume !($i303 == 1);
    goto $bb278;

  $bb279:
    assume $i303 == 1;
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} vslice_dummy_var_130 := printk.ref.ref(.str.121, .str.136);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb269:
    assume 0 == 1;
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $i299 := $and.i32(4096, $i237);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i300 := $eq.i32($i299, 0);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    assume {:branchcond $i300} true;
    goto $bb272, $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    assume !($i300 == 1);
    goto $bb271;

  $bb272:
    assume $i300 == 1;
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} vslice_dummy_var_129 := printk.ref.ref(.str.121, .str.135);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb262:
    assume 0 == 1;
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $i296 := $and.i32(2048, $i237);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $i297 := $eq.i32($i296, 0);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    assume {:branchcond $i297} true;
    goto $bb265, $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    assume !($i297 == 1);
    goto $bb264;

  $bb265:
    assume $i297 == 1;
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} vslice_dummy_var_128 := printk.ref.ref(.str.121, .str.134);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb255:
    assume 0 == 1;
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $i293 := $and.i32(1024, $i237);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $i294 := $eq.i32($i293, 0);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    assume {:branchcond $i294} true;
    goto $bb258, $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    assume !($i294 == 1);
    goto $bb257;

  $bb258:
    assume $i294 == 1;
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} vslice_dummy_var_127 := printk.ref.ref(.str.121, .str.133);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb248:
    assume 0 == 1;
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $i290 := $and.i32(512, $i237);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $i291 := $eq.i32($i290, 0);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    assume {:branchcond $i291} true;
    goto $bb251, $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    assume !($i291 == 1);
    goto $bb250;

  $bb251:
    assume $i291 == 1;
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} vslice_dummy_var_126 := printk.ref.ref(.str.121, .str.132);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb241:
    assume 0 == 1;
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $i287 := $and.i32(256, $i237);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $i288 := $eq.i32($i287, 0);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    assume {:branchcond $i288} true;
    goto $bb244, $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    assume !($i288 == 1);
    goto $bb243;

  $bb244:
    assume $i288 == 1;
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} vslice_dummy_var_125 := printk.ref.ref(.str.121, .str.131);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb234:
    assume 0 == 1;
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $i284 := $and.i32(128, $i237);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $i285 := $eq.i32($i284, 0);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    assume {:branchcond $i285} true;
    goto $bb237, $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    assume !($i285 == 1);
    goto $bb236;

  $bb237:
    assume $i285 == 1;
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} vslice_dummy_var_124 := printk.ref.ref(.str.121, .str.130);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb227:
    assume 0 == 1;
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $i281 := $and.i32(64, $i237);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $i282 := $eq.i32($i281, 0);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    assume {:branchcond $i282} true;
    goto $bb230, $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    assume !($i282 == 1);
    goto $bb229;

  $bb230:
    assume $i282 == 1;
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} vslice_dummy_var_123 := printk.ref.ref(.str.121, .str.129);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb220:
    assume 0 == 1;
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $i278 := $and.i32(32, $i237);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $i279 := $eq.i32($i278, 0);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    assume {:branchcond $i279} true;
    goto $bb223, $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    assume !($i279 == 1);
    goto $bb222;

  $bb223:
    assume $i279 == 1;
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} vslice_dummy_var_122 := printk.ref.ref(.str.121, .str.128);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb213:
    assume 1 == 1;
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $i275 := $and.i32(16, $i237);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $i276 := $eq.i32($i275, 0);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    assume {:branchcond $i276} true;
    goto $bb216, $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    assume !($i276 == 1);
    goto $bb215;

  $bb216:
    assume $i276 == 1;
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} vslice_dummy_var_121 := printk.ref.ref(.str.121, .str.127);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb206:
    assume 1 == 1;
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i272 := $and.i32(8, $i237);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $i273 := $eq.i32($i272, 0);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    assume {:branchcond $i273} true;
    goto $bb209, $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    assume !($i273 == 1);
    goto $bb208;

  $bb209:
    assume $i273 == 1;
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} vslice_dummy_var_120 := printk.ref.ref(.str.121, .str.126);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb199:
    assume 1 == 1;
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $i269 := $and.i32(4, $i237);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $i270 := $eq.i32($i269, 0);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i270} true;
    goto $bb202, $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    assume !($i270 == 1);
    goto $bb201;

  $bb202:
    assume $i270 == 1;
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} vslice_dummy_var_119 := printk.ref.ref(.str.121, .str.125);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb192:
    assume 1 == 1;
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $i266 := $and.i32(2, $i237);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $i267 := $eq.i32($i266, 0);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    assume !($i267 == 1);
    goto $bb194;

  $bb195:
    assume $i267 == 1;
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} vslice_dummy_var_118 := printk.ref.ref(.str.121, .str.124);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb178:
    assume 1 == 1;
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $i241 := $and.i32(1, $i237);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $i242 := $eq.i32($i241, 0);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    assume {:branchcond $i242} true;
    goto $bb181, $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    assume !($i242 == 1);
    goto $bb180;

  $bb181:
    assume $i242 == 1;
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} vslice_dummy_var_116 := printk.ref.ref(.str.121, .str.123);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb173:
    assume $i239 == 1;
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $i240 := 0;
    goto $bb175;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $p14, $i15 := $p10, 0;
    goto $bb8;

  $bb8:
    call $i16, $i18, $i19, $p20, $p21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $p55, $p56, $p57, $i58, $i59, $i61, $i62, $p63, $p64, $p65, $i66, $i67, $i68, $i69, $p70, $p71, $p72, $i73, $i74, $i75, $i76, $p77, $p80, $i81, $i82, $p83, $p85, $p86, $p87, $p88, $i89, $p90, $i91, $i92, $p93, $i94, $i95, $i79, $p96, $i97, $i98, $p99, $i101, $i102, $i103, $i104, $i105, $p106, $p107, $p108, $i109, $i110, $i111, $i112, $p113, $p114, $i115, $i116, $p117, $i119, $p120, $p121, $p122, $p123, $i124, $i125, $i127, $i128, $p126, $i130, $p131, $p132, $p133, $i134, $i135, $p136, $i137, $i138, $i139, $i140, $p141, $p142, $p143, $p144, $i145, $i146, $i148, $i149, $p147, $i151, $i152, $p153, $p154, $p155, $p156, $i157, $i158, $p159, $i161, $i162, $i163, $i164, $i167, $i168, $p169, $p170, $p171, $i172, $i173, $i174, $i175, $p176, $p177, $i178, $i179, $i181, $i182, $i183, $i184, $p180, $i186, $p187, $p188, $i189, $i190, $p191, $i193, $i194, $p195, $i196, $p197, $i198, $i199, $i201, $i202, $i203, $i204, $p200, $i206, $p207, $p208, $i209, $i210, $i212, $i213, $p211, $i215, $p216, $p217, $i218, $i219, $i221, $i222, $i223, $i224, $p220, $i226, $p227, $p229, $i230, $i231, $p14, $i15, $p233, $i234, $i235, $p17, $i232, $i236, vslice_dummy_var_104 := srp_parse_options_loop_$bb8($p1, $p2, $p3, $p4, $p5, $i16, $i18, $i19, $p20, $p21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $p55, $p56, $p57, $i58, $i59, $i61, $i62, $p63, $p64, $p65, $i66, $i67, $i68, $i69, $p70, $p71, $p72, $i73, $i74, $i75, $i76, $p77, $p80, $i81, $i82, $p83, $p85, $p86, $p87, $p88, $i89, $p90, $i91, $i92, $p93, $i94, $i95, $i79, $p96, $i97, $i98, $p99, $i101, $i102, $i103, $i104, $i105, $p106, $p107, $p108, $i109, $i110, $i111, $i112, $p113, $p114, $i115, $i116, $p117, $i119, $p120, $p121, $p122, $p123, $i124, $i125, $i127, $i128, $p126, $i130, $p131, $p132, $p133, $i134, $i135, $p136, $i137, $i138, $i139, $i140, $p141, $p142, $p143, $p144, $i145, $i146, $i148, $i149, $p147, $i151, $i152, $p153, $p154, $p155, $p156, $i157, $i158, $p159, $i161, $i162, $i163, $i164, $i167, $i168, $p169, $p170, $p171, $i172, $i173, $i174, $i175, $p176, $p177, $i178, $i179, $i181, $i182, $i183, $i184, $p180, $i186, $p187, $p188, $i189, $i190, $p191, $i193, $i194, $p195, $i196, $p197, $i198, $i199, $i201, $i202, $i203, $i204, $p200, $i206, $p207, $p208, $i209, $i210, $i212, $i213, $p211, $i215, $p216, $p217, $i218, $i219, $i221, $i222, $i223, $i224, $p220, $i226, $p227, $p229, $i230, $i231, $p14, $i15, $p233, $i234, $i235, $p17, $i232, $i236, vslice_dummy_var_104);
    goto $bb8_last;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $p17 := $p14;
    goto $bb168;

  $bb168:
    call $i16, $i18, $i19, $p20, $p233, $i234, $i235, $p17, $i236 := srp_parse_options_loop_$bb168($p2, $i16, $i18, $i19, $p20, $i15, $p233, $i234, $i235, $p17, $i236);
    goto $bb168_last;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.1, $p17);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $i18 := $sext.i8.i32($i16);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $p20 := $p17;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p4);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} $i22 := match_token($p20, srp_opt_tokens, $p21);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $M.64 := $store.i32($M.64, $p5, $i22);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.64, $p5);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i15, $i23);
    call {:si_unique_call 868} {:cexpr "opt_mask"} boogie_si_record_i32($i24);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.64, $p5);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 1);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.64, $p5);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.64, $p5);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 4);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.64, $p5);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 8);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.64, $p5);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 16);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.64, $p5);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 32);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.64, $p5);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 16384);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.64, $p5);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 64);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.64, $p5);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 128);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.64, $p5);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 256);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.64, $p5);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 512);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.64, $p5);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 1024);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.64, $p5);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 2048);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.64, $p5);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 4096);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.64, $p5);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 8192);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $p55 := $p20;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} vslice_dummy_var_102 := printk.ref.ref(.str.119, $p55);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32(0, 22);
    goto $bb76;

  $bb69:
    assume $i54 == 1;
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p217 := $bitcast.ref.ref($p4);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} $i218 := match_int($p217, $p5);
    call {:si_unique_call 893} {:cexpr "tmp___19"} boogie_si_record_i32($i218);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $i219 := $ne.i32($i218, 0);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $p220 := $p20;
    assume true;
    goto $bb157, $bb159;

  $bb159:
    assume !($i219 == 1);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $i221 := $load.i32($M.64, $p5);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $i222 := $sle.i32($i221, 1);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $p220 := $p20;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i222 == 1);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i223 := $load.i32($M.64, $p5);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i224 := $sgt.i32($i223, 7);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $p220 := $p20;
    assume true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    $i226 := $load.i32($M.64, $p5);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(244, 1));
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p227, $i226);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} $p229 := strsep($p2, .str.120);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i230 := $p2i.ref.i64($p229);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i231 := $ne.i64($i230, 0);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i232 := $i24;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $i13 := $i232;
    goto $bb7;

  $bb166:
    assume $i231 == 1;
    assume {:verifier.code 0} true;
    $p14, $i15 := $p229, $i24;
    goto $bb166_dummy;

  $bb162:
    assume {:verifier.code 0} true;
    assume $i224 == 1;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} vslice_dummy_var_115 := printk.ref.ref(.str.118, $p220);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32(0, 22);
    goto $bb76;

  $bb160:
    assume {:verifier.code 0} true;
    assume $i222 == 1;
    goto $bb158;

  $bb157:
    assume {:verifier.code 0} true;
    assume $i219 == 1;
    goto $bb158;

  $bb65:
    assume $i52 == 1;
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p208 := $bitcast.ref.ref($p4);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} $i209 := match_int($p208, $p5);
    call {:si_unique_call 891} {:cexpr "tmp___18"} boogie_si_record_i32($i209);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $i210 := $ne.i32($i209, 0);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $p211 := $p20;
    assume true;
    goto $bb151, $bb153;

  $bb153:
    assume !($i210 == 1);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $i212 := $load.i32($M.64, $p5);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $i213 := $slt.i32($i212, 0);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $p211 := $p20;
    assume true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    $i215 := $load.i32($M.64, $p5);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(240, 1));
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p216, $i215);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb154:
    assume {:verifier.code 0} true;
    assume $i213 == 1;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} vslice_dummy_var_114 := printk.ref.ref(.str.117, $p211);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32(0, 22);
    goto $bb76;

  $bb151:
    assume {:verifier.code 0} true;
    assume $i210 == 1;
    goto $bb152;

  $bb61:
    assume $i50 == 1;
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p197 := $bitcast.ref.ref($p4);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} $i198 := match_int($p197, $p5);
    call {:si_unique_call 889} {:cexpr "tmp___17"} boogie_si_record_i32($i198);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i199 := $ne.i32($i198, 0);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $p200 := $p20;
    assume true;
    goto $bb143, $bb145;

  $bb145:
    assume !($i199 == 1);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $i201 := $load.i32($M.64, $p5);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $i202 := $sle.i32($i201, 0);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $p200 := $p20;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i202 == 1);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $i203 := $load.i32($M.64, $p5);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $i204 := $sgt.i32($i203, 2048);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $p200 := $p20;
    assume true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $i206 := $load.i32($M.64, $p5);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(228, 1));
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p207, $i206);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb148:
    assume {:verifier.code 0} true;
    assume $i204 == 1;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} vslice_dummy_var_113 := printk.ref.ref(.str.116, $p200);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32(0, 22);
    goto $bb76;

  $bb146:
    assume {:verifier.code 0} true;
    assume $i202 == 1;
    goto $bb144;

  $bb143:
    assume {:verifier.code 0} true;
    assume $i199 == 1;
    goto $bb144;

  $bb57:
    assume $i48 == 1;
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p188 := $bitcast.ref.ref($p4);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} $i189 := match_int($p188, $p5);
    call {:si_unique_call 887} {:cexpr "tmp___16"} boogie_si_record_i32($i189);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $i190 := $ne.i32($i189, 0);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $p191 := $p20;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $i193 := $load.i32($M.64, $p5);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $i194 := $ne.i32($i193, 0);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(108, 1));
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i196 := $zext.i1.i8($i194);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p195, $i196);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb140:
    assume $i190 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} vslice_dummy_var_112 := printk.ref.ref(.str.115, $p191);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32(0, 22);
    goto $bb76;

  $bb53:
    assume $i46 == 1;
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p177 := $bitcast.ref.ref($p4);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} $i178 := match_int($p177, $p5);
    call {:si_unique_call 885} {:cexpr "tmp___15"} boogie_si_record_i32($i178);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i179 := $ne.i32($i178, 0);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $p180 := $p20;
    assume true;
    goto $bb132, $bb134;

  $bb134:
    assume !($i179 == 1);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $i181 := $load.i32($M.64, $p5);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i182 := $sle.i32($i181, 0);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $p180 := $p20;
    assume true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i182 == 1);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $i183 := $load.i32($M.64, $p5);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $i184 := $sgt.i32($i183, 255);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $p180 := $p20;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    $i186 := $load.i32($M.64, $p5);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(100, 1));
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p187, $i186);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb137:
    assume {:verifier.code 0} true;
    assume $i184 == 1;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} vslice_dummy_var_111 := printk.ref.ref(.str.114, $p180);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32(0, 22);
    goto $bb76;

  $bb135:
    assume {:verifier.code 0} true;
    assume $i182 == 1;
    goto $bb133;

  $bb132:
    assume {:verifier.code 0} true;
    assume $i179 == 1;
    goto $bb133;

  $bb49:
    assume $i44 == 1;
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p170 := $bitcast.ref.ref($p4);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} $p171 := match_strdup($p170);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $i172 := $p2i.ref.i64($p171);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $i173 := $eq.i64($i172, 0);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} $i174 := simple_strtoull($p171, $0.ref, 16);
    call {:si_unique_call 931} {:cexpr "tmp___13"} boogie_si_record_i64($i174);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} $i175 := __fswab64($i174);
    call {:si_unique_call 933} {:cexpr "tmp___14"} boogie_si_record_i64($i175);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(152, 1));
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p176, $i175);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} kfree($p171);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb129:
    assume $i173 == 1;
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32(0, 12);
    goto $bb76;

  $bb45:
    assume $i42 == 1;
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p156 := $bitcast.ref.ref($p4);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} $i157 := match_hex($p156, $p5);
    call {:si_unique_call 882} {:cexpr "tmp___12"} boogie_si_record_i32($i157);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i158 := $ne.i32($i157, 0);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $p159 := $p20;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $i161 := $load.i32($M.64, $p5);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i162 := $ne.i32($i161, 65280);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    assume !($i162 == 1);
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $i167 := $load.i32($M.64, $p5);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $i168 := $trunc.i32.i16($i167);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(160, 1));
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p169, $i168);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb123:
    assume $i162 == 1;
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.64, $p5);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $i164 := $ne.i32($i163, 256);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    assume !($i164 == 1);
    goto $bb125;

  $bb126:
    assume $i164 == 1;
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $i165 := $load.i32($M.64, $p5);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} vslice_dummy_var_110 := printk.ref.i32.i32.i32(.str.113, $i165, 65280, 256);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32(0, 22);
    goto $bb76;

  $bb120:
    assume $i158 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} vslice_dummy_var_109 := printk.ref.ref(.str.112, $p159);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32(0, 22);
    goto $bb76;

  $bb41:
    assume $i40 == 1;
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p144 := $bitcast.ref.ref($p4);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} $i145 := match_int($p144, $p5);
    call {:si_unique_call 880} {:cexpr "tmp___11"} boogie_si_record_i32($i145);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i146 := $ne.i32($i145, 0);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $p147 := $p20;
    assume true;
    goto $bb114, $bb116;

  $bb116:
    assume !($i146 == 1);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.64, $p5);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $i149 := $sle.i32($i148, 0);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $p147 := $p20;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $i151 := $load.i32($M.64, $p5);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $i152 := $trunc.i32.i16($i151);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $p154 := $load.ref($M.1, $p153);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p154, $mul.ref(0, 3816)), $mul.ref(816, 1));
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p155, $i152);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb117:
    assume {:verifier.code 0} true;
    assume $i149 == 1;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} vslice_dummy_var_108 := printk.ref.ref(.str.111, $p147);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32(0, 22);
    goto $bb76;

  $bb114:
    assume {:verifier.code 0} true;
    assume $i146 == 1;
    goto $bb115;

  $bb37:
    assume $i38 == 1;
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p4);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} $i124 := match_int($p123, $p5);
    call {:si_unique_call 878} {:cexpr "tmp___10"} boogie_si_record_i32($i124);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i125 := $ne.i32($i124, 0);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $p126 := $p20;
    assume true;
    goto $bb105, $bb107;

  $bb107:
    assume !($i125 == 1);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.64, $p5);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $i128 := $sle.i32($i127, 0);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $p126 := $p20;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.64, $p5);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.1, $p131);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p132, $mul.ref(0, 3816)), $mul.ref(812, 1));
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p133, $i130);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.64, $p5);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $i135 := $add.i32($i134, 2);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(232, 1));
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p136, $i135);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $i137 := $and.i32($i24, 64);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $i138 := $eq.i32($i137, 0);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb111:
    assume $i138 == 1;
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $i139 := $load.i32($M.64, $p5);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $i140 := $trunc.i32.i16($i139);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.1, $p141);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p142, $mul.ref(0, 3816)), $mul.ref(816, 1));
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p143, $i140);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb108:
    assume {:verifier.code 0} true;
    assume $i128 == 1;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} vslice_dummy_var_107 := printk.ref.ref(.str.110, $p126);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32(0, 22);
    goto $bb76;

  $bb105:
    assume {:verifier.code 0} true;
    assume $i125 == 1;
    goto $bb106;

  $bb33:
    assume $i36 == 1;
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p4);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} $i115 := match_int($p114, $p5);
    call {:si_unique_call 876} {:cexpr "tmp___9"} boogie_si_record_i32($i115);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i115, 0);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $p117 := $p20;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.64, $p5);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.1, $p120);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p121, $mul.ref(0, 3816)), $mul.ref(824, 1));
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p122, $i119);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb102:
    assume $i116 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} vslice_dummy_var_106 := printk.ref.ref(.str.109, $p117);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32(0, 22);
    goto $bb76;

  $bb29:
    assume $i34 == 1;
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p4);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} $p108 := match_strdup($p107);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $i109 := $p2i.ref.i64($p108);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $i110 := $eq.i64($i109, 0);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} $i111 := simple_strtoull($p108, $0.ref, 16);
    call {:si_unique_call 921} {:cexpr "tmp___7"} boogie_si_record_i64($i111);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} $i112 := __fswab64($i111);
    call {:si_unique_call 923} {:cexpr "tmp___8"} boogie_si_record_i64($i112);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(144, 1));
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p113, $i112);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} kfree($p108);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb99:
    assume $i110 == 1;
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32(0, 12);
    goto $bb76;

  $bb25:
    assume $i32 == 1;
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p4);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} $i97 := match_hex($p96, $p5);
    call {:si_unique_call 873} {:cexpr "tmp___5"} boogie_si_record_i32($i97);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $p99 := $p20;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.64, $p5);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $i102 := $trunc.i32.i16($i101);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i103 := $zext.i16.i32($i102);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $i104 := $trunc.i32.i16($i103);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} $i105 := __fswab16($i104);
    call {:si_unique_call 919} {:cexpr "tmp___6"} boogie_si_record_i16($i105);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(264, 1));
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p106, $i105);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb96:
    assume $i98 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} vslice_dummy_var_105 := printk.ref.ref(.str.108, $p99);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32(0, 22);
    goto $bb76;

  $bb21:
    assume $i30 == 1;
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p4);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} $p72 := match_strdup($p71);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p72);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $i74 := $eq.i64($i73, 0);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} $i75 := strlen($p72);
    call {:si_unique_call 908} {:cexpr "tmp___3"} boogie_si_record_i64($i75);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $i76 := $ne.i64($i75, 32);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $p77 := $p72;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i79 := 0;
    goto $bb88;

  $bb88:
    call $p80, $i81, $i82, $p83, $p85, $p86, $p87, $p88, $i89, $p90, $i91, $i92, $p93, $i94, $i95, $i79, vslice_dummy_var_104 := srp_parse_options_loop_$bb88($p1, $p3, $p72, $p80, $i81, $i82, $p83, $p85, $p86, $p87, $p88, $i89, $p90, $i91, $i92, $p93, $i94, $i95, $i79, vslice_dummy_var_104);
    goto $bb88_last;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p3);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i81 := $mul.i32($i79, 2);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $i82 := $sext.i32.i64($i81);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($p72, $mul.ref($i82, 1));
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} vslice_dummy_var_104 := strlcpy($p80, $p83, 3);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p3);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(248, 1));
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i89 := $sext.i32.i64($i79);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($p88, $mul.ref($i89, 1));
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} $i91 := sscanf.ref.ref.ref($p85, .str.107, $p90);
    call {:si_unique_call 913} {:cexpr "tmp___4"} boogie_si_record_i32($i91);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i92 := $sle.i32($i91, 0);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $p93 := $p72;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $i94 := $add.i32($i79, 1);
    call {:si_unique_call 915} {:cexpr "i"} boogie_si_record_i32($i94);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i95 := $sle.i32($i94, 15);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} kfree($p72);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb93:
    assume $i95 == 1;
    assume {:verifier.code 0} true;
    $i79 := $i94;
    goto $bb93_dummy;

  $bb90:
    assume $i92 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} kfree($p93);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32(0, 22);
    goto $bb76;

  $bb85:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} vslice_dummy_var_103 := printk.ref.ref(.str.106, $p77);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} kfree($p77);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32(0, 22);
    goto $bb76;

  $bb82:
    assume $i74 == 1;
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32(0, 12);
    goto $bb76;

  $bb17:
    assume $i28 == 1;
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p4);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} $p65 := match_strdup($p64);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p65);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $i67 := $eq.i64($i66, 0);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} $i68 := simple_strtoull($p65, $0.ref, 16);
    call {:si_unique_call 903} {:cexpr "tmp___1"} boogie_si_record_i64($i68);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} $i69 := __fswab64($i68);
    call {:si_unique_call 905} {:cexpr "tmp___2"} boogie_si_record_i64($i69);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(136, 1));
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p70, $i69);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} kfree($p65);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb79:
    assume $i67 == 1;
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32(0, 12);
    goto $bb76;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p4);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} $p57 := match_strdup($p56);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $i59 := $eq.i64($i58, 0);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} $i61 := simple_strtoull($p57, $0.ref, 16);
    call {:si_unique_call 897} {:cexpr "tmp"} boogie_si_record_i64($i61);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} $i62 := __fswab64($i61);
    call {:si_unique_call 899} {:cexpr "tmp___0"} boogie_si_record_i64($i62);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(128, 1));
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p63, $i62);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} kfree($p57);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb74:
    assume $i59 == 1;
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32(0, 12);
    goto $bb76;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} $p233 := strsep($p2, .str.120);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i234 := $p2i.ref.i64($p233);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $i235 := $ne.i64($i234, 0);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $i236 := $i15;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $i237 := $i236;
    goto $bb171;

  $bb169:
    assume $i235 == 1;
    assume {:verifier.code 0} true;
    $p17 := $p233;
    goto $bb169_dummy;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  $bb93_dummy:
    assume false;
    return;

  $bb88_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4196;

  $bb169_dummy:
    assume false;
    return;

  $bb168_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4383;

  $bb166_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4006;
}



const scsi_init_shared_tag_map: ref;

axiom scsi_init_shared_tag_map == $sub.ref(0, 522126);

procedure scsi_init_shared_tag_map($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation scsi_init_shared_tag_map($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} {:cexpr "scsi_init_shared_tag_map:arg:depth"} boogie_si_record_i32($i1);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} $i2 := shost_use_blk_mq($p0);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 959} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3816)), $mul.ref(520, 1));
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 3816)), $mul.ref(504, 1));
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 336)), $mul.ref(260, 1));
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.1, $p13);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} $p15 := blk_init_tags($i1, $i14);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 3816)), $mul.ref(520, 1));
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p17, $p15);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 3816)), $mul.ref(520, 1));
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.1, $p19);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const srp_conn_unique: ref;

axiom srp_conn_unique == $sub.ref(0, 523158);

procedure srp_conn_unique($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.10, assertsPassed;



implementation srp_conn_unique($p0: ref, $p1: ref) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p17: ref;
  var $i36: i8;
  var $p45: ref;
  var $i5: i8;
  var $i46: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, $p2);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1792)), $mul.ref(1448, 1));
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} ldv_spin_lock_109($p6);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1792)), $mul.ref(1432, 1)), $mul.ref(0, 1));
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref($sub.ref(0, 440), 464));
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p10, $mul.ref($sub.ref(0, 440), 464)), $mul.ref(440, 1));
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1792)), $mul.ref(1432, 1));
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i13, $i15);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i36 := 1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 1792)), $mul.ref(1448, 1));
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} ldv_spin_unlock_110($p45);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $i5 := $i36;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i8.i1($i5);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $r := $i46;
    return;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $p17 := $p11;
    goto $bb8;

  $bb8:
    call $i18, $i19, $i20, $p21, $i22, $p23, $i24, $i25, $p26, $i27, $p28, $i29, $i30, $p31, $i32, $p33, $i34, $i35, $p38, $p39, $p40, $p41, $p42, $i43, $i44, $p17 := srp_conn_unique_loop_$bb8($p1, $i15, $i18, $i19, $i20, $p21, $i22, $p23, $i24, $i25, $p26, $i27, $p28, $i29, $i30, $p31, $i32, $p33, $i34, $i35, $p38, $p39, $p40, $p41, $p42, $i43, $i44, $p17);
    goto $bb8_last;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p1);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i18, $i19);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 464)), $mul.ref(440, 1)), $mul.ref(0, 1));
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.1, $p38);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p40, $mul.ref($sub.ref(0, 440), 464));
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p40, $mul.ref($sub.ref(0, 440), 464)), $mul.ref(440, 1));
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, $i15);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i44 == 1);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb21:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $p17 := $p41;
    goto $bb21_dummy;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(128, 1));
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.1, $p21);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p17, $mul.ref(0, 464)), $mul.ref(128, 1));
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.1, $p23);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i22, $i24);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb12;

  $bb13:
    assume $i25 == 1;
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(136, 1));
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.1, $p26);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p17, $mul.ref(0, 464)), $mul.ref(136, 1));
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.1, $p28);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i27, $i29);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb12;

  $bb15:
    assume $i30 == 1;
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(152, 1));
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.1, $p31);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p17, $mul.ref(0, 464)), $mul.ref(152, 1));
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.1, $p33);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $i35 := $eq.i64($i32, $i34);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb12;

  $bb17:
    assume $i35 == 1;
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb19;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb21_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4588;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 524190);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 525222);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    return;
}



const srp_tl_err_work: ref;

axiom srp_tl_err_work == $sub.ref(0, 526254);

procedure srp_tl_err_work($p0: ref);
  free requires assertsPassed;



implementation srp_tl_err_work($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 280), 464)), $mul.ref(184, 1));
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 280), 464)), $mul.ref(184, 1));
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} srp_start_tl_fail_timers($p8);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const srp_remove_work: ref;

axiom srp_remove_work == $sub.ref(0, 527286);

procedure srp_remove_work($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.26, $M.27, $M.28, $M.29, $M.17, $M.10, $M.11, $CurrAddr, assertsPassed;



implementation srp_remove_work($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i1;
  var $i26: i32;
  var $i27: i64;
  var vslice_dummy_var_133: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 360), 464));
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 360), 464)), $mul.ref(92, 1));
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.1, $p3);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 2);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    call {:si_unique_call 966} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i6);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 968} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i6, 0);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} vslice_dummy_var_133 := ldv__builtin_expect($i27, 0);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} srp_remove_target($p2);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1(1);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $i13 := $xor.i1($i12, 1);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    call {:si_unique_call 969} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i14);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 971} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i14, 0);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 974} {:cexpr "tmp___0"} boogie_si_record_i64($i23);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i24 == 1;
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i19 == 1;
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} warn_slowpath_null(.str.20, 976);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ib_query_gid: ref;

axiom ib_query_gid == $sub.ref(0, 528318);

procedure ib_query_gid($p0: ref, $i1: i8, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ib_query_gid($p0: ref, $i1: i8, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 977} {:cexpr "ib_query_gid:arg:arg1"} boogie_si_record_i8($i1);
    call {:si_unique_call 978} {:cexpr "ib_query_gid:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 1} true;
    call {:si_unique_call 979} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 980} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const num_node_state: ref;

axiom num_node_state == $sub.ref(0, 529350);

procedure num_node_state($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation num_node_state($i0: i32) returns ($r: i32)
{
  var $i1: i64;
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} {:cexpr "num_node_state:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $i1 := $zext.i32.i64($i0);
    $p2 := $add.ref($add.ref(node_states, $mul.ref(0, 640)), $mul.ref($i1, 128));
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} $i3 := __nodes_weight($p2, 1024);
    call {:si_unique_call 983} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const cpumask_weight: ref;

axiom cpumask_weight == $sub.ref(0, 530382);

procedure cpumask_weight($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cpumask_weight($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1024)), $mul.ref(0, 1));
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, nr_cpu_ids);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} $i4 := bitmap_weight($p2, $i3);
    call {:si_unique_call 985} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __first_node: ref;

axiom __first_node == $sub.ref(0, 531414);

procedure __first_node($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __first_node($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} $i3 := ldv_find_first_bit_46($p2, 1024);
    call {:si_unique_call 987} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    call {:si_unique_call 988} {:cexpr "__min2"} boogie_si_record_i32($i4);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32(1024, $i4);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $i6 := 1024;
    goto $bb3;
}



const __cpu_to_node: ref;

axiom __cpu_to_node == $sub.ref(0, 532446);

procedure __cpu_to_node($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __cpu_to_node($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 989} {:cexpr "__cpu_to_node:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 1} true;
    call {:si_unique_call 990} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 991} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const srp_alloc_req_data: ref;

axiom srp_alloc_req_data == $sub.ref(0, 533478);

procedure srp_alloc_req_data($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation srp_alloc_req_data($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $i36: i8;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i64;
  var $i47: i64;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i64;
  var $p58: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i64;
  var $i71: i64;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $i77: i1;
  var $i23: i32;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(96, 1));
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(168, 1));
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1792)), $mul.ref(0, 1));
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(236, 1));
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.1, $p9);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} $p12 := kcalloc($i11, 56, 208);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(368, 1));
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p14, $p12);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(368, 1));
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(236, 1));
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.1, $p20);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32(0, $i21);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb8;

  $bb8:
    call $p24, $p25, $i26, $p28, $i29, $i30, $i31, $p32, $i33, $i34, $p35, $i36, $i37, $p39, $p40, $p42, $p43, $p44, $i45, $i46, $i47, $p48, $p50, $p51, $p52, $i53, $i54, $p55, $i56, $i57, $p58, $p60, $p61, $p62, $i63, $i64, $p65, $p66, $p67, $p68, $i69, $i70, $i71, $i72, $i73, $p74, $i75, $i76, $i77, $i23 := srp_alloc_req_data_loop_$bb8($p0, $p2, $p6, $p8, $p20, $p24, $p25, $i26, $p28, $i29, $i30, $i31, $p32, $i33, $i34, $p35, $i36, $i37, $p39, $p40, $p42, $p43, $p44, $i45, $i46, $i47, $p48, $p50, $p51, $p52, $i53, $i54, $p55, $i56, $i57, $p58, $p60, $p61, $p62, $i63, $i64, $p65, $p66, $p67, $p68, $i69, $i70, $i71, $i72, $i73, $p74, $i75, $i76, $i77, $i23);
    goto $bb8_last;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(368, 1));
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.1, $p24);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i23);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(100, 1));
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.1, $p28);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $i30 := $zext.i32.i64($i29);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $i31 := $mul.i64($i30, 8);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} $p32 := kmalloc($i31, 208);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i33, 0);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(62, 1));
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.1, $p35);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i8.i1($i36);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i37 == 1);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p25, $mul.ref($i26, 56)), $mul.ref(16, 1));
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p43, $p32);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.1, $p44);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i45);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $i47 := $mul.i64($i46, 8);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} $p48 := kmalloc($i47, 208);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p25, $mul.ref($i26, 56)), $mul.ref(24, 1));
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p50, $p48);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p25, $mul.ref($i26, 56)), $mul.ref(24, 1));
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.1, $p51);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i54 := $eq.i64($i53, 0);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(104, 1));
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.1, $p55);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $i57 := $zext.i32.i64($i56);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} $p58 := kmalloc($i57, 208);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p25, $mul.ref($i26, 56)), $mul.ref(32, 1));
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p60, $p58);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p25, $mul.ref($i26, 56)), $mul.ref(32, 1));
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.1, $p61);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $i64 := $eq.i64($i63, 0);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p25, $mul.ref($i26, 56)), $mul.ref(32, 1));
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.1, $p65);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(104, 1));
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.1, $p68);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $i70 := $zext.i32.i64($i69);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} $i71 := ib_dma_map_single($p8, $p67, $i70, 1);
    call {:si_unique_call 997} {:cexpr "dma_addr"} boogie_si_record_i64($i71);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} $i72 := ib_dma_mapping_error($p8, $i71);
    call {:si_unique_call 999} {:cexpr "tmp___2"} boogie_si_record_i32($i72);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p25, $mul.ref($i26, 56)), $mul.ref(40, 1));
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p74, $i71);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i23, 1);
    call {:si_unique_call 1000} {:cexpr "i"} boogie_si_record_i32($i75);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.1, $p20);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i75, $i76);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i77 == 1);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb25:
    assume $i77 == 1;
    assume {:verifier.code 0} true;
    $i23 := $i75;
    goto $bb25_dummy;

  $bb22:
    assume $i73 == 1;
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 12);
    goto $bb3;

  $bb19:
    assume $i64 == 1;
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_322:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i54 == 1;
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i37 == 1;
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p25, $mul.ref($i26, 56)), $mul.ref(16, 1));
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p40, $p32);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i34 == 1;
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  $bb25_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4748;
}



const srp_free_ch_ib: ref;

axiom srp_free_ch_ib == $sub.ref(0, 534510);

procedure srp_free_ch_ib($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.26, $M.27, $M.28, $M.29, $M.17, $CurrAddr, assertsPassed;



implementation srp_free_ch_ib($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $i22: i8;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p43: ref;
  var $p44: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $i57: i32;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $i75: i1;
  var $p76: ref;
  var $i77: i32;
  var $i78: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i64;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i32;
  var $i89: i1;
  var $i79: i32;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(168, 1));
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1792)), $mul.ref(0, 1));
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(96, 1));
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(344, 1));
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(120, 1));
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(62, 1));
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.1, $p21);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i8.i1($i22);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(128, 1));
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.1, $p33);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} srp_destroy_qp($p1);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(104, 1));
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.1, $p40);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} vslice_dummy_var_134 := ib_destroy_cq($p41);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(112, 1));
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.1, $p43);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} vslice_dummy_var_135 := ib_destroy_cq($p44);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(96, 1));
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p46, $0.ref);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(120, 1));
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p47, $0.ref);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(112, 1));
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p48, $0.ref);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(104, 1));
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p49, $0.ref);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(360, 1));
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.1, $p50);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(352, 1));
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.1, $p72);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p73);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i74, 0);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb31:
    assume $i75 == 1;
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(232, 1));
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.1, $p76);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $i78 := $slt.i32(0, $i77);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(352, 1));
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.1, $p90);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} kfree($p92);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(352, 1));
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p93, $0.ref);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb33:
    assume $i78 == 1;
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i79 := 0;
    goto $bb36;

  $bb36:
    call $p80, $p81, $p82, $p83, $i84, $p85, $p86, $i87, $i88, $i89, $i79 := srp_free_ch_ib_loop_$bb36($p0, $p1, $p76, $p80, $p81, $p82, $p83, $i84, $p85, $p86, $i87, $i88, $i89, $i79);
    goto $bb36_last;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(168, 1));
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.1, $p80);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(352, 1));
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.1, $p82);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $i84 := $sext.i32.i64($i79);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p83, $mul.ref($i84, 8));
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.1, $p85);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} srp_free_iu($p81, $p86);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $i87 := $add.i32($i79, 1);
    call {:si_unique_call 1011} {:cexpr "i"} boogie_si_record_i32($i87);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.1, $p76);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $i89 := $slt.i32($i87, $i88);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i89 == 1);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb38:
    assume $i89 == 1;
    assume {:verifier.code 0} true;
    $i79 := $i87;
    goto $bb38_dummy;

  $bb20:
    assume $i53 == 1;
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(232, 1));
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.1, $p54);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32(0, $i55);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(360, 1));
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.1, $p68);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} kfree($p70);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(360, 1));
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p71, $0.ref);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb22:
    assume $i56 == 1;
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i57 := 0;
    goto $bb25;

  $bb25:
    call $p58, $p59, $p60, $p61, $i62, $p63, $p64, $i65, $i66, $i67, $i57 := srp_free_ch_ib_loop_$bb25($p0, $p1, $p54, $p58, $p59, $p60, $p61, $i62, $p63, $p64, $i65, $i66, $i67, $i57);
    goto $bb25_last;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(168, 1));
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.1, $p58);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(360, 1));
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.1, $p60);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i57);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p61, $mul.ref($i62, 8));
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.1, $p63);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} srp_free_iu($p59, $p64);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i57, 1);
    call {:si_unique_call 1008} {:cexpr "i"} boogie_si_record_i32($i65);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.1, $p54);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i65, $i66);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i67 == 1);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb27:
    assume $i67 == 1;
    assume {:verifier.code 0} true;
    $i57 := $i65;
    goto $bb27_dummy;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i36 == 1;
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(128, 1));
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.1, $p38);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} ib_destroy_fmr_pool($p39);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(128, 1));
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.1, $p25);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i28 == 1;
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(128, 1));
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.1, $p30);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} srp_destroy_fr_pool($p31);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(344, 1));
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} ib_destroy_cm_id($p15);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(344, 1));
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p16, $0.ref);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb38_dummy:
    assume false;
    return;

  $bb36_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4951;

  $bb27_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4916;
}



const srp_free_req_data: ref;

axiom srp_free_req_data == $sub.ref(0, 535542);

procedure srp_free_req_data($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation srp_free_req_data($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p24: ref;
  var $i25: i8;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $i42: i64;
  var $p43: ref;
  var $i44: i32;
  var $i45: i64;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $i19: i32;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(168, 1));
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1792)), $mul.ref(0, 1));
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(96, 1));
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i11 == 1);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(368, 1));
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(236, 1));
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.1, $p16);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32(0, $i17);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(368, 1));
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.1, $p52);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} kfree($p54);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(368, 1));
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p55, $0.ref);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb11;

  $bb11:
    call $p20, $p21, $i22, $p24, $i25, $i26, $p27, $p28, $p29, $p30, $p31, $p32, $p33, $p34, $p35, $p36, $p37, $p38, $i39, $i40, $p41, $i42, $p43, $i44, $i45, $p46, $p47, $p48, $i49, $i50, $i51, $i19 := srp_free_req_data_loop_$bb11($p0, $p1, $p5, $p7, $p16, $p20, $p21, $i22, $p24, $i25, $i26, $p27, $p28, $p29, $p30, $p31, $p32, $p33, $p34, $p35, $p36, $p37, $p38, $i39, $i40, $p41, $i42, $p43, $i44, $i45, $p46, $p47, $p48, $i49, $i50, $i51, $i19);
    goto $bb11_last;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(368, 1));
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i19);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(62, 1));
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.1, $p24);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i25);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i26 == 1);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p21, $mul.ref($i22, 56)), $mul.ref(16, 1));
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.1, $p32);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} kfree($p34);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p21, $mul.ref($i22, 56)), $mul.ref(24, 1));
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.1, $p35);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} kfree($p37);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p21, $mul.ref($i22, 56)), $mul.ref(40, 1));
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.1, $p38);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p21, $mul.ref($i22, 56)), $mul.ref(32, 1));
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.1, $p46);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} kfree($p48);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i19, 1);
    call {:si_unique_call 1018} {:cexpr "i"} boogie_si_record_i32($i49);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.1, $p16);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i49, $i50);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i51 == 1);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb19:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $i19 := $i49;
    goto $bb19_dummy;

  $bb16:
    assume $i40 == 1;
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p21, $mul.ref($i22, 56)), $mul.ref(40, 1));
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.1, $p41);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(104, 1));
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.1, $p43);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $i45 := $zext.i32.i64($i44);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} ib_dma_unmap_single($p7, $i42, $i45, 1);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p21, $mul.ref($i22, 56)), $mul.ref(16, 1));
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.1, $p28);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} kfree($p30);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb19_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4998;
}



const cpumask_next: ref;

axiom cpumask_next == $sub.ref(0, 536574);

procedure cpumask_next($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation cpumask_next($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i32;
  var vslice_dummy_var_136: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} {:cexpr "cpumask_next:arg:n"} boogie_si_record_i32($i0);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i0, $sub.i32(0, 1));
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 1024)), $mul.ref(0, 1));
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, nr_cpu_ids);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i0, 1);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} $i10 := ldv_find_next_bit_5($p5, $i7, $i9);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    call {:si_unique_call 1023} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} vslice_dummy_var_136 := cpumask_check($i0);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __next_node: ref;

axiom __next_node == $sub.ref(0, 537606);

procedure __next_node($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation __next_node($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} {:cexpr "__next_node:arg:n"} boogie_si_record_i32($i0);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i0, 1);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} $i6 := ldv_find_next_bit_47($p3, 1024, $i5);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    call {:si_unique_call 1026} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i6);
    call {:si_unique_call 1027} {:cexpr "__min2"} boogie_si_record_i32($i7);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32(1024, $i7);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $i9 := 1024;
    goto $bb3;

  SeqInstr_331:
    assume !assertsPassed;
    return;
}



const srp_add_target: ref;

axiom srp_add_target == $sub.ref(0, 538638);

procedure srp_add_target($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.10, $M.11, $CurrAddr, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.25, $M.26, $M.27, $M.28, $M.29, $M.66, $M.17, $M.18, $M.19, $M.12, $M.16;



implementation srp_add_target($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i1;
  var $i37: i8;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $i57: i8;
  var $i58: i1;
  var $p59: ref;
  var $i60: i8;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i24;
  var $i73: i24;
  var $i74: i24;
  var $p75: ref;
  var $p76: ref;
  var $i77: i8;
  var $i78: i64;
  var $i79: i64;
  var $i80: i64;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $p94: ref;
  var $i21: i32;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;
  var vslice_dummy_var_137: i32;
  var vslice_dummy_var_138: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} $p2 := $alloc($mul.ref(17, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p4, 0);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(128, 1));
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.1, $p5);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} $i7 := __fswab64($i6);
    call {:si_unique_call 1031} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} vslice_dummy_var_137 := sprintf.ref.ref.i64($p9, .str.139, $i7);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1792)), $mul.ref(0, 1));
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 2488)), $mul.ref(0, 1));
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} $i19 := ldv_scsi_add_host_137($p12, $p18);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    call {:si_unique_call 1034} {:cexpr "tmp___0"} boogie_si_record_i32($i19);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 17)), $mul.ref(0, 1));
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(128, 1));
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_43 := $M.1;
    cmdloc_dummy_var_44 := $M.1;
    call {:si_unique_call 1035} cmdloc_dummy_var_45 := $memcpy.i8(cmdloc_dummy_var_43, cmdloc_dummy_var_44, $p23, $p25, 8, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_45;
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 17)), $mul.ref(0, 1));
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p27, $mul.ref(8, 1));
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(136, 1));
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_46 := $M.1;
    cmdloc_dummy_var_47 := $M.1;
    call {:si_unique_call 1036} cmdloc_dummy_var_48 := $memcpy.i8(cmdloc_dummy_var_46, cmdloc_dummy_var_47, $p28, $p30, 8, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_48;
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 17)), $mul.ref(16, 1));
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p31, 1);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.1, $p32);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} $p34 := srp_rport_add($p33, $p2);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} $i36 := IS_ERR($p35);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i8($i36);
    call {:si_unique_call 1039} {:cexpr "tmp___2"} boogie_si_record_i8($i37);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1($i37);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p34, $mul.ref(0, 2304)), $mul.ref(1440, 1));
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p45, $p1);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(184, 1));
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p46, $p34);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 1792)), $mul.ref(1448, 1));
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} ldv_spin_lock_109($p47);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(440, 1));
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 1792)), $mul.ref(1432, 1));
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} list_add_tail($p48, $p49);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 1792)), $mul.ref(1448, 1));
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} ldv_spin_unlock_110($p50);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.1, $p51);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 3816)), $mul.ref(952, 1));
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(224, 1));
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.1, $p54);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} scsi_scan_target($p53, 0, $i55, $sub.i64(0, 1), 0);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(272, 1));
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.1, $p56);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i8.i1($i57);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.1, $p62);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 3816)), $mul.ref(952, 1));
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} dev_printk.ref.ref.ref(.str.31, $p64, .str.140);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} vslice_dummy_var_138 := srp_queue_remove_work($p1);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  SeqInstr_343:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i58 == 1;
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.1, $p59);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i8.i1($i60);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p66, .str.18);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p67, .str.141);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p68, .str.20);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p69, .str.142);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $i72 := $load.i24($M.7, $p71);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $i73 := $and.i24($i72, $sub.i24(0, 262144));
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $i74 := $or.i24($i73, 2808);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p71, $i74);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p75, 0);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.8, $p76);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i64($i77);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $i79 := $and.i64($i78, 1);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} $i80 := ldv__builtin_expect($i79, 0);
    call {:si_unique_call 1050} {:cexpr "tmp___5"} boogie_si_record_i64($i80);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i80, 0);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} ldv_spin_lock_irq_104($p89);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.1, $p90);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 0);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(0, 1));
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} ldv_spin_unlock_irq_105($p94);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_349:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i92 == 1;
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p93, 1);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    goto $bb20;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i81 == 1;
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.1, $p82);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} $i84 := srp_sdev_count($p83);
    call {:si_unique_call 1052} {:cexpr "tmp___3"} boogie_si_record_i32($i84);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.1, $p85);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 3816)), $mul.ref(952, 1));
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} $p88 := dev_name($p87);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} __dynamic_pr_debug.ref.ref.ref.i32($p3, .str.143, $p88, $i84);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i61 == 1;
    goto $bb10;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  SeqInstr_337:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i38 == 1;
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.1, $p39);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} ldv_scsi_remove_host_138($p40);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p34);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} $i42 := PTR_ERR($p41);
    call {:si_unique_call 1042} {:cexpr "tmp___1"} boogie_si_record_i64($i42);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i64.i32($i42);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $i21 := $i43;
    goto $bb3;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 19);
    goto $bb3;

  SeqInstr_334:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_147: ref;

axiom ldv_mutex_unlock_147 == $sub.ref(0, 539670);

procedure ldv_mutex_unlock_147($p0: ref);
  free requires assertsPassed;
  modifies $M.65, assertsPassed;



implementation ldv_mutex_unlock_147($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} ldv_linux_kernel_locking_mutex_mutex_unlock_add_target_mutex_of_srp_host($p0);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_352:
    assume !assertsPassed;
    return;
}



const scsi_host_put: ref;

axiom scsi_host_put == $sub.ref(0, 540702);

procedure scsi_host_put($p0: ref);
  free requires assertsPassed;



implementation scsi_host_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_unlock_add_target_mutex_of_srp_host: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_unlock_add_target_mutex_of_srp_host == $sub.ref(0, 541734);

procedure ldv_linux_kernel_locking_mutex_mutex_unlock_add_target_mutex_of_srp_host($p0: ref);
  free requires assertsPassed;
  modifies $M.65, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_unlock_add_target_mutex_of_srp_host($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $i1 := $M.65;
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i3);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $M.65 := 0;
    call {:si_unique_call 1059} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_add_target_mutex_of_srp_host"} boogie_si_record_i8(0);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_355:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock: ref;

axiom ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock == $sub.ref(0, 542766);

procedure ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} {:cexpr "ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1061} __VERIFIER_error();
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_358:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 543798);

procedure sprintf.ref.ref($p0: ref, $p1: ref) returns ($r: i32);



procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



procedure sprintf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);



procedure sprintf.ref.ref.i64($p0: ref, $p1: ref, p.2: i64) returns ($r: i32);



const ldv_scsi_add_host_137: ref;

axiom ldv_scsi_add_host_137 == $sub.ref(0, 544830);

procedure ldv_scsi_add_host_137($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $CurrAddr, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.67, $M.69, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $M.66, $M.11, $M.17, $M.18, $M.19, $M.12, $M.10, $M.16;



implementation ldv_scsi_add_host_137($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} $i2 := scsi_add_host($p0, $p1);
    call {:si_unique_call 1063} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} $i3 := ldv_scsi_add_host($i2, $p0, $p1);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    call {:si_unique_call 1065} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_361:
    assume !assertsPassed;
    return;
}



const srp_rport_add: ref;

axiom srp_rport_add == $sub.ref(0, 545862);

procedure srp_rport_add($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation srp_rport_add($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} $p2 := external_alloc();
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const ldv_scsi_remove_host_138: ref;

axiom ldv_scsi_remove_host_138 == $sub.ref(0, 546894);

procedure ldv_scsi_remove_host_138($p0: ref);
  free requires assertsPassed;



implementation ldv_scsi_remove_host_138($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} scsi_remove_host($p0);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} ldv_scsi_remove_host($0.ref, $p0);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    return;
}



const scsi_scan_target: ref;

axiom scsi_scan_target == $sub.ref(0, 547926);

procedure scsi_scan_target($p0: ref, $i1: i32, $i2: i32, $i3: i64, $i4: i32);
  free requires assertsPassed;



implementation scsi_scan_target($p0: ref, $i1: i32, $i2: i32, $i3: i64, $i4: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} {:cexpr "scsi_scan_target:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1070} {:cexpr "scsi_scan_target:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1071} {:cexpr "scsi_scan_target:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 1072} {:cexpr "scsi_scan_target:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    return;
}



const srp_sdev_count: ref;

axiom srp_sdev_count == $sub.ref(0, 548958);

procedure srp_sdev_count($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation srp_sdev_count($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i7: i32;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i5: i32;
  var $p6: ref;
  var $i11: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} $p1 := __scsi_iterate_devices($p0, $0.ref);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $i5, $p6 := 0, $p1;
    goto $bb4;

  $bb4:
    call $i7, $p8, $i9, $i10, $i5, $p6, $i11 := srp_sdev_count_loop_$bb4($p0, $i7, $p8, $i9, $i10, $i5, $p6, $i11);
    goto $bb4_last;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i5, 1);
    call {:si_unique_call 1074} {:cexpr "c"} boogie_si_record_i32($i7);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} $p8 := __scsi_iterate_devices($p0, $p6);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $i11 := $i7;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $i4 := $i11;
    goto $bb3;

  $bb6:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i5, $p6 := $i7, $p8;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5255;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 549990);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(312, 1));
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(16, 1));
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} $p9 := kobject_name($p8);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(312, 1));
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 551022);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const scsi_remove_host: ref;

axiom scsi_remove_host == $sub.ref(0, 552054);

procedure scsi_remove_host($p0: ref);
  free requires assertsPassed;



implementation scsi_remove_host($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    return;
}



const ldv_scsi_remove_host: ref;

axiom ldv_scsi_remove_host == $sub.ref(0, 553086);

procedure ldv_scsi_remove_host($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_scsi_remove_host($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} ldv_dispatch_deregister_27_1($p1);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_27_1: ref;

axiom ldv_dispatch_deregister_27_1 == $sub.ref(0, 554118);

procedure ldv_dispatch_deregister_27_1($p0: ref);
  free requires assertsPassed;



implementation ldv_dispatch_deregister_27_1($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    return;
}



const scsi_add_host: ref;

axiom scsi_add_host == $sub.ref(0, 555150);

procedure scsi_add_host($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_add_host($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} $i2 := scsi_add_host_with_dma($p0, $p1, $p1);
    call {:si_unique_call 1079} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_scsi_add_host: ref;

axiom ldv_scsi_add_host == $sub.ref(0, 556182);

procedure ldv_scsi_add_host($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $CurrAddr, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.67, $M.69, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $M.66, $M.11, $M.17, $M.18, $M.19, $M.12, $M.10, $M.16;



implementation ldv_scsi_add_host($i0: i32, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} {:cexpr "ldv_scsi_add_host:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} $i3 := ldv_undef_int();
    call {:si_unique_call 1082} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i0, 0);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} ldv_assume($i8);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} ldv_assume($i6);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} ldv_dispatch_register_25_2($u3);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_364:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_register_25_2: ref;

axiom ldv_dispatch_register_25_2 == $sub.ref(0, 557214);

procedure ldv_dispatch_register_25_2($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $CurrAddr, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.67, $M.69, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $M.66, $M.11, $M.17, $M.18, $M.19, $M.12, $M.10, $M.16;



implementation ldv_dispatch_register_25_2($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} $p1 := ldv_xmalloc(16);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, $p0);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} ldv_scsi_host_template_scsi_host_template_instance_2($p4);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_367:
    assume !assertsPassed;
    return;
}



const ldv_xmalloc: ref;

axiom ldv_xmalloc == $sub.ref(0, 558246);

procedure ldv_xmalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_xmalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} {:cexpr "ldv_xmalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} $p1 := malloc($i0);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} ldv_assume($i4);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} $i5 := ldv_is_err($p1);
    call {:si_unique_call 1092} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} ldv_assume($i7);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_scsi_host_template_scsi_host_template_instance_2: ref;

axiom ldv_scsi_host_template_scsi_host_template_instance_2 == $sub.ref(0, 559278);

procedure ldv_scsi_host_template_scsi_host_template_instance_2($p0: ref);
  free requires assertsPassed;
  modifies $M.70, $M.71, $M.1, $M.40, $M.41, $M.42, $M.14, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.67, $M.69, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $M.66, $CurrAddr, $M.11, $M.17, $M.18, $M.19, $M.12, $M.10, $M.16;



implementation ldv_scsi_host_template_scsi_host_template_instance_2($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $p7 := $u3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} $i8 := ldv_undef_int();
    call {:si_unique_call 1096} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb7;

  $bb7:
    call $i10, $p11, $p12, $p13, $p14, $i15, $i16, $p17, $p18, $p19, $p20, $p21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $p35, $p36, $p37, $p38, $i39, $i40, $p41, $p42, $p43, $p44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54 := ldv_scsi_host_template_scsi_host_template_instance_2_loop_$bb7($p7, $i10, $p11, $p12, $p13, $p14, $i15, $i16, $p17, $p18, $p19, $p20, $p21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $p35, $p36, $p37, $p38, $i39, $i40, $p41, $p42, $p43, $p44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54);
    goto $bb7_last;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} ldv_ldv_pre_probe_160();
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 3816)), $mul.ref(504, 1));
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 336)), $mul.ref(16, 1));
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i23 := $i10;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} $i24 := ldv_ldv_post_probe_161($i23);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    call {:si_unique_call 1101} {:cexpr "ldv_2_ret_default"} boogie_si_record_i32($i24);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} $i25 := ldv_undef_int();
    call {:si_unique_call 1103} {:cexpr "tmp"} boogie_si_record_i32($i25);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i24, 0);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} ldv_assume($i32);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} $i33 := ldv_undef_int();
    call {:si_unique_call 1111} {:cexpr "tmp___0"} boogie_si_record_i32($i33);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i34 == 1);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb18:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i10 := $i24;
    goto $bb18_dummy;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i24, 0);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} ldv_assume($i28);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} $i29 := ldv_undef_int();
    call {:si_unique_call 1106} {:cexpr "tmp___2"} boogie_si_record_i32($i29);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i30 == 1);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    call $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54 := ldv_scsi_host_template_scsi_host_template_instance_2_loop_$bb16($p7, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54);
    goto $bb16_last;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 1);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i45, 2);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i45, 3);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i45, 4);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i45, 5);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i45, 6);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i45, 7);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} ldv_stop();
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} $i53 := ldv_undef_int();
    call {:si_unique_call 1122} {:cexpr "tmp___2"} boogie_si_record_i32($i53);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb56_dummy;

  $bb20:
    assume $i54 == 1;
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p7, $mul.ref(0, 3816)), $mul.ref(504, 1));
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.1, $p35);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.1, $p37);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb21:
    assume $i40 == 1;
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p7, $mul.ref(0, 3816)), $mul.ref(504, 1));
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.1, $p41);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.1, $p43);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} ldv_scsi_host_template_instance_release_2_2($p44, $p7);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_376:
    assume !assertsPassed;
    return;

  $bb48:
    assume $i52 == 1;
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} ldv_scsi_host_template_instance_callback_2_4($u10, $u5, $u2);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb44:
    assume $i51 == 1;
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} ldv_scsi_host_template_instance_callback_2_17($u9, $u7);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    goto $bb53;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i50 == 1;
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} ldv_scsi_host_template_instance_callback_2_18($u9, $u7);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    goto $bb53;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i49 == 1;
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} ldv_scsi_host_template_instance_callback_2_19($u9, $u7);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb32:
    assume $i48 == 1;
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} ldv_scsi_host_template_instance_callback_2_20($u8, $p7);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb28:
    assume $i47 == 1;
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} ldv_scsi_host_template_instance_callback_2_21($u6, $p7, $u7);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    goto $bb53;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i46 == 1;
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} ldv_scsi_host_template_instance_callback_2_22($u4, $u5);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb14;

  SeqInstr_373:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 3816)), $mul.ref(504, 1));
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 336)), $mul.ref(16, 1));
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.1, $p19);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} $i22 := ldv_scsi_host_template_instance_probe_2_10($p21, $p7);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    call {:si_unique_call 1099} {:cexpr "ldv_2_ret_default"} boogie_si_record_i32($i22);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb10;

  SeqInstr_370:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} ldv_free($p6);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $p7 := $p5;
    goto $bb3;

  $bb56_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} $i45 := ldv_undef_int();
    call {:si_unique_call 1109} {:cexpr "tmp___1"} boogie_si_record_i32($i45);
    goto corral_source_split_5387;

  $bb18_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5344;
}



const ldv_free: ref;

axiom ldv_free == $sub.ref(0, 560310);

procedure ldv_free($p0: ref);
  free requires assertsPassed;



implementation ldv_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} free_($p0);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    return;
}



const ldv_ldv_pre_probe_160: ref;

axiom ldv_ldv_pre_probe_160 == $sub.ref(0, 561342);

procedure ldv_ldv_pre_probe_160();
  free requires assertsPassed;
  modifies $M.70, $M.71;



implementation ldv_ldv_pre_probe_160()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} ldv_pre_probe();
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    return;
}



const ldv_scsi_host_template_instance_probe_2_10: ref;

axiom ldv_scsi_host_template_instance_probe_2_10 == $sub.ref(0, 562374);

procedure ldv_scsi_host_template_instance_probe_2_10($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.40, $M.41, $M.42, $M.14, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $M.66, $M.67, $CurrAddr, $M.11, $M.17, $M.18, $M.19, $M.12, $M.10, $M.16;



implementation ldv_scsi_host_template_instance_probe_2_10($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} $i2 := devirtbounce.16($p0, $p1);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    call {:si_unique_call 1128} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_388:
    assume !assertsPassed;
    return;
}



const ldv_ldv_post_probe_161: ref;

axiom ldv_ldv_post_probe_161 == $sub.ref(0, 563406);

procedure ldv_ldv_post_probe_161($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.70, $M.71, assertsPassed;



implementation ldv_ldv_post_probe_161($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} {:cexpr "ldv_ldv_post_probe_161:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} ldv_linux_net_register_check_return_value_probe($i0);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} ldv_linux_usb_register_check_return_value_probe($i0);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} $i1 := ldv_post_probe($i0);
    call {:si_unique_call 1133} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_394:
    assume !assertsPassed;
    return;

  SeqInstr_391:
    assume !assertsPassed;
    return;
}



const ldv_scsi_host_template_instance_release_2_2: ref;

axiom ldv_scsi_host_template_instance_release_2_2 == $sub.ref(0, 564438);

procedure ldv_scsi_host_template_instance_release_2_2($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.40, $M.41, $M.42, $M.14, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $M.66, $M.67, $CurrAddr, $M.11, $M.17, $M.18, $M.19, $M.12, $M.10, $M.16;



implementation ldv_scsi_host_template_instance_release_2_2($p0: ref, $p1: ref)
{
  var vslice_dummy_var_139: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} vslice_dummy_var_139 := devirtbounce.16($p0, $p1);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_397:
    assume !assertsPassed;
    return;
}



const ldv_scsi_host_template_instance_callback_2_22: ref;

axiom ldv_scsi_host_template_instance_callback_2_22 == $sub.ref(0, 565470);

procedure ldv_scsi_host_template_instance_callback_2_22($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_scsi_host_template_instance_callback_2_22($p0: ref, $p1: ref)
{
  var vslice_dummy_var_140: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} vslice_dummy_var_140 := srp_slave_configure($p1);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    return;
}



const ldv_scsi_host_template_instance_callback_2_21: ref;

axiom ldv_scsi_host_template_instance_callback_2_21 == $sub.ref(0, 566502);

procedure ldv_scsi_host_template_instance_callback_2_21($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.1, $M.40, $M.41, $M.42, $M.67, $M.15, $M.69, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.14, assertsPassed, $CurrAddr, $M.26, $M.27, $M.28, $M.29, $M.16, $M.12, $M.10, $M.11, $M.17, $M.25, $M.66, $M.18, $M.19;



implementation ldv_scsi_host_template_instance_callback_2_21($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_141: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} vslice_dummy_var_141 := srp_queuecommand($p1, $p2);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_400:
    assume !assertsPassed;
    return;
}



const ldv_scsi_host_template_instance_callback_2_20: ref;

axiom ldv_scsi_host_template_instance_callback_2_20 == $sub.ref(0, 567534);

procedure ldv_scsi_host_template_instance_callback_2_20($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_scsi_host_template_instance_callback_2_20($p0: ref, $p1: ref)
{
  var vslice_dummy_var_142: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} vslice_dummy_var_142 := srp_target_info($p1);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    return;
}



const ldv_scsi_host_template_instance_callback_2_19: ref;

axiom ldv_scsi_host_template_instance_callback_2_19 == $sub.ref(0, 568566);

procedure ldv_scsi_host_template_instance_callback_2_19($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_scsi_host_template_instance_callback_2_19($p0: ref, $p1: ref)
{
  var vslice_dummy_var_143: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} vslice_dummy_var_143 := srp_reset_host($p1);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    return;
}



const ldv_scsi_host_template_instance_callback_2_18: ref;

axiom ldv_scsi_host_template_instance_callback_2_18 == $sub.ref(0, 569598);

procedure ldv_scsi_host_template_instance_callback_2_18($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.40, $M.41, $M.42, $M.14, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.66, $M.67, assertsPassed, $CurrAddr, $M.26, $M.27, $M.28, $M.29, $M.12, $M.10, $M.11, $M.17, $M.16;



implementation ldv_scsi_host_template_instance_callback_2_18($p0: ref, $p1: ref)
{
  var vslice_dummy_var_144: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} vslice_dummy_var_144 := srp_reset_device($p1);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_403:
    assume !assertsPassed;
    return;
}



const ldv_scsi_host_template_instance_callback_2_17: ref;

axiom ldv_scsi_host_template_instance_callback_2_17 == $sub.ref(0, 570630);

procedure ldv_scsi_host_template_instance_callback_2_17($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.15, $M.40, $M.41, $M.42, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, assertsPassed, $M.14, $M.26, $M.27, $M.28, $M.29, $M.66, $M.67, $CurrAddr, $M.12, $M.10, $M.11, $M.17, $M.16;



implementation ldv_scsi_host_template_instance_callback_2_17($p0: ref, $p1: ref)
{
  var vslice_dummy_var_145: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} vslice_dummy_var_145 := srp_abort($p1);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_406:
    assume !assertsPassed;
    return;
}



const ldv_scsi_host_template_instance_callback_2_4: ref;

axiom ldv_scsi_host_template_instance_callback_2_4 == $sub.ref(0, 571662);

procedure ldv_scsi_host_template_instance_callback_2_4($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation ldv_scsi_host_template_instance_callback_2_4($p0: ref, $p1: ref, $i2: i32)
{
  var vslice_dummy_var_146: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} {:cexpr "ldv_scsi_host_template_instance_callback_2_4:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} vslice_dummy_var_146 := srp_change_queue_depth($p1, $i2);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 572694);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const srp_change_queue_depth: ref;

axiom srp_change_queue_depth == $sub.ref(0, 573726);

procedure srp_change_queue_depth($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation srp_change_queue_depth($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} {:cexpr "srp_change_queue_depth:arg:qdepth"} boogie_si_record_i32($i1);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(329, 1));
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.1, $p3);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} $i8 := scsi_change_queue_depth($p0, $i7);
    call {:si_unique_call 1145} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;
}



const scsi_change_queue_depth: ref;

axiom scsi_change_queue_depth == $sub.ref(0, 574758);

procedure scsi_change_queue_depth($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_change_queue_depth($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1146} {:cexpr "scsi_change_queue_depth:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1147} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1148} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const srp_abort: ref;

axiom srp_abort == $sub.ref(0, 575790);

procedure srp_abort($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.15, $M.40, $M.41, $M.42, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, assertsPassed, $M.14, $M.26, $M.27, $M.28, $M.29, $M.66, $M.67, $CurrAddr, $M.12, $M.10, $M.11, $M.17, $M.16;



implementation srp_abort($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i16;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $i37: i1;
  var $i38: i32;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $i42: i1;
  var $i43: i32;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i32;
  var $i63: i32;
  var $i64: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $i71: i32;
  var $i65: i32;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 3480)), $mul.ref(0, 1));
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} $p5 := host_to_target($p4);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 472)), $mul.ref(448, 1));
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 3816)), $mul.ref(952, 1));
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} dev_printk.ref.ref.ref(.str.39, $p11, .str.147);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p8);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 472)), $mul.ref(360, 1));
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} $i17 := blk_mq_unique_tag($p16);
    call {:si_unique_call 1152} {:cexpr "tag"} boogie_si_record_i32($i17);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} $i18 := blk_mq_unique_tag_to_hwq($i17);
    call {:si_unique_call 1154} {:cexpr "ch_idx"} boogie_si_record_i16($i18);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.1, $p20);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $i22 := $uge.i32($i19, $i21);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    call {:si_unique_call 1155} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i23);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 1157} {:cexpr "tmp___2"} boogie_si_record_i64($i27);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i23, 0);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $i43 := $zext.i1.i32($i42);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i43);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} $i45 := ldv__builtin_expect($i44, 0);
    call {:si_unique_call 1165} {:cexpr "tmp___3"} boogie_si_record_i64($i45);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.1, $p47);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i64($i18);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p48, $mul.ref($i49, 488));
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} $p51 := srp_claim_req($p50, $p8, $0.ref, $p0);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $i53 := $eq.i64($i52, 0);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.1, $p54);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 3816)), $mul.ref(952, 1));
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} dev_printk.ref.ref.ref.i32(.str.39, $p56, .str.148, $i17);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i57 := $zext.i32.i64($i17);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.1, $p58);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 3480)), $mul.ref(208, 1));
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $i61 := $load.i64($M.1, $p60);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i64.i32($i61);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} $i63 := srp_send_tsk_mgmt($p50, $i57, $i62, 1);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    call {:si_unique_call 1169} {:cexpr "tmp___5"} boogie_si_record_i32($i63);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 0);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i64 == 1);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(184, 1));
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.1, $p66);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 2304)), $mul.ref(1608, 1));
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.1, $p68);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 3);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i71 := 8195;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i65 := $i71;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} srp_free_req($p50, $p8, $p0, 0);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p72, 327680);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 472)), $mul.ref(376, 1));
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.1, $p73);
    call {:si_unique_call 1171} devirtbounce.1($p74, $p0);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $i14 := $i65;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  SeqInstr_415:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i70 == 1;
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $i71 := 8201;
    goto $bb25;

  $bb20:
    assume $i64 == 1;
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $i65 := 8194;
    goto $bb22;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i53 == 1;
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $i14 := 8194;
    goto $bb3;

  SeqInstr_409:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i46 == 1;
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $i14 := 8194;
    goto $bb3;

  $bb5:
    assume $i28 == 1;
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1(1);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $i30 := $xor.i1($i29, 1);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i32($i30);
    call {:si_unique_call 1158} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i31);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i32($i32);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} $i35 := ldv__builtin_expect($i34, 0);
    call {:si_unique_call 1160} {:cexpr "tmp___0"} boogie_si_record_i64($i35);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i31, 0);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $i38 := $zext.i1.i32($i37);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i38);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} $i40 := ldv__builtin_expect($i39, 0);
    call {:si_unique_call 1163} {:cexpr "tmp___1"} boogie_si_record_i64($i40);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i41 == 1;
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i36 == 1;
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} warn_slowpath_null(.str.20, 2488);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $i14 := 8194;
    goto $bb3;
}



const blk_mq_unique_tag: ref;

axiom blk_mq_unique_tag == $sub.ref(0, 576822);

procedure blk_mq_unique_tag($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation blk_mq_unique_tag($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1172} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1173} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const srp_send_tsk_mgmt: ref;

axiom srp_send_tsk_mgmt == $sub.ref(0, 577854);

procedure srp_send_tsk_mgmt($p0: ref, $i1: i64, $i2: i32, $i3: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.40, $M.41, $M.42, $M.15, $M.66, $M.67, assertsPassed, $CurrAddr;



implementation srp_send_tsk_mgmt($p0: ref, $i1: i64, $i2: i32, $i3: i8) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i1;
  var $p17: ref;
  var $i18: i8;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $i20: i32;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} {:cexpr "srp_send_tsk_mgmt:arg:req_tag"} boogie_si_record_i64($i1);
    call {:si_unique_call 1175} {:cexpr "srp_send_tsk_mgmt:arg:lun"} boogie_si_record_i32($i2);
    call {:si_unique_call 1176} {:cexpr "srp_send_tsk_mgmt:arg:func"} boogie_si_record_i8($i3);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(96, 1));
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(184, 1));
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(168, 1));
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 1792)), $mul.ref(0, 1));
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(272, 1));
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.1, $p14);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(456, 1));
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.1, $p17);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(384, 1));
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} ldv_init_completion_129($p21);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p7, $mul.ref(0, 2304)), $mul.ref(1448, 1));
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} ldv_mutex_lock_130($p22);
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(16, 1));
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} ldv_spin_lock_irq_131($p23);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} $p24 := __srp_get_tx_iu($p0, 1);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(16, 1));
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} ldv_spin_unlock_irq_132($p25);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p24);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p24, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.1, $p29);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} ib_dma_sync_single_for_cpu($p13, $i30, 48, 1);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p24, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.1, $p31);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_49 := $M.1;
    call {:si_unique_call 1184} cmdloc_dummy_var_50 := $memset.i8(cmdloc_dummy_var_49, $p34, 0, 48, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_50;
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p33, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p35, 1);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $i36 := $zext.i32.i64($i2);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $i37 := $shl.i64($i36, 48);
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} $i38 := __fswab64($i37);
    call {:si_unique_call 1186} {:cexpr "tmp"} boogie_si_record_i64($i38);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p33, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p39, $i38);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $i40 := $or.i64($i1, 2147483648);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p33, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p41, $i40);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p33, $mul.ref(0, 56)), $mul.ref(34, 1));
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p42, $i3);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p33, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p43, $i1);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p24, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.1, $p44);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} ib_dma_sync_single_for_device($p13, $i45, 48, 1);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} $i46 := srp_post_send($p0, $p24, 48);
    call {:si_unique_call 1189} {:cexpr "tmp___0"} boogie_si_record_i32($i46);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p7, $mul.ref(0, 2304)), $mul.ref(1448, 1));
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} ldv_mutex_unlock_135($p49);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} $i50 := msecs_to_jiffies(5000);
    call {:si_unique_call 1194} {:cexpr "tmp___1"} boogie_si_record_i64($i50);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 488)), $mul.ref(384, 1));
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} $i52 := ldv_wait_for_completion_timeout_136($p51, $i50);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    call {:si_unique_call 1196} {:cexpr "tmp___2"} boogie_si_record_i64($i52);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $i53 := $eq.i64($i52, 0);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb6;

  $bb14:
    assume $i53 == 1;
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 1);
    goto $bb6;

  SeqInstr_442:
    assume !assertsPassed;
    return;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i47 == 1;
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} srp_put_tx_iu($p0, $p24, 1);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p7, $mul.ref(0, 2304)), $mul.ref(1448, 1));
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} ldv_mutex_unlock_134($p48);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 1);
    goto $bb6;

  SeqInstr_436:
    assume !assertsPassed;
    return;

  SeqInstr_433:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i27 == 1;
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p7, $mul.ref(0, 2304)), $mul.ref(1448, 1));
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} ldv_mutex_unlock_133($p28);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 1);
    goto $bb6;

  SeqInstr_430:
    assume !assertsPassed;
    return;

  SeqInstr_427:
    assume !assertsPassed;
    return;

  SeqInstr_424:
    assume !assertsPassed;
    return;

  SeqInstr_421:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb3;
}



const ldv_init_completion_129: ref;

axiom ldv_init_completion_129 == $sub.ref(0, 578886);

procedure ldv_init_completion_129($p0: ref);
  free requires assertsPassed;
  modifies $M.66;



implementation ldv_init_completion_129($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} ldv_linux_kernel_sched_completion_init_completion_tsk_mgmt_done_of_srp_rdma_ch();
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_130: ref;

axiom ldv_mutex_lock_130 == $sub.ref(0, 579918);

procedure ldv_mutex_lock_130($p0: ref);
  free requires assertsPassed;
  modifies $M.67, assertsPassed;



implementation ldv_mutex_lock_130($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} ldv_linux_kernel_locking_mutex_mutex_lock_mutex_of_srp_rport($p0);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_445:
    assume !assertsPassed;
    return;
}



const ldv_spin_lock_irq_131: ref;

axiom ldv_spin_lock_irq_131 == $sub.ref(0, 580950);

procedure ldv_spin_lock_irq_131($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv_spin_lock_irq_131($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_srp_rdma_ch();
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} spin_lock_irq($p0);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_448:
    assume !assertsPassed;
    return;
}



const ldv_spin_unlock_irq_132: ref;

axiom ldv_spin_unlock_irq_132 == $sub.ref(0, 581982);

procedure ldv_spin_unlock_irq_132($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv_spin_unlock_irq_132($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_srp_rdma_ch();
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} spin_unlock_irq($p0);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_451:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_133: ref;

axiom ldv_mutex_unlock_133 == $sub.ref(0, 583014);

procedure ldv_mutex_unlock_133($p0: ref);
  free requires assertsPassed;
  modifies $M.67, assertsPassed;



implementation ldv_mutex_unlock_133($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_srp_rport($p0);
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_454:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_134: ref;

axiom ldv_mutex_unlock_134 == $sub.ref(0, 584046);

procedure ldv_mutex_unlock_134($p0: ref);
  free requires assertsPassed;
  modifies $M.67, assertsPassed;



implementation ldv_mutex_unlock_134($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_srp_rport($p0);
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_457:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_135: ref;

axiom ldv_mutex_unlock_135 == $sub.ref(0, 585078);

procedure ldv_mutex_unlock_135($p0: ref);
  free requires assertsPassed;
  modifies $M.67, assertsPassed;



implementation ldv_mutex_unlock_135($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_srp_rport($p0);
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_460:
    assume !assertsPassed;
    return;
}



const ldv_wait_for_completion_timeout_136: ref;

axiom ldv_wait_for_completion_timeout_136 == $sub.ref(0, 586110);

procedure ldv_wait_for_completion_timeout_136($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.66, assertsPassed;



implementation ldv_wait_for_completion_timeout_136($p0: ref, $i1: i64) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} {:cexpr "ldv_wait_for_completion_timeout_136:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} ldv_linux_kernel_sched_completion_wait_for_completion_tsk_mgmt_done_of_srp_rdma_ch();
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} $i2 := wait_for_completion_timeout($p0, $i1);
    call {:si_unique_call 1209} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_463:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_sched_completion_wait_for_completion_tsk_mgmt_done_of_srp_rdma_ch: ref;

axiom ldv_linux_kernel_sched_completion_wait_for_completion_tsk_mgmt_done_of_srp_rdma_ch == $sub.ref(0, 587142);

procedure ldv_linux_kernel_sched_completion_wait_for_completion_tsk_mgmt_done_of_srp_rdma_ch();
  free requires assertsPassed;
  modifies $M.66, assertsPassed;



implementation ldv_linux_kernel_sched_completion_wait_for_completion_tsk_mgmt_done_of_srp_rdma_ch()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $i0 := $M.66;
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} ldv_assert_linux_kernel_sched_completion__wait_without_init($i2);
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $M.66 := 2;
    call {:si_unique_call 1211} {:cexpr "ldv_linux_kernel_sched_completion_completion_tsk_mgmt_done_of_srp_rdma_ch"} boogie_si_record_i32(2);
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_466:
    assume !assertsPassed;
    return;
}



const wait_for_completion_timeout: ref;

axiom wait_for_completion_timeout == $sub.ref(0, 588174);

procedure wait_for_completion_timeout($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation wait_for_completion_timeout($p0: ref, $i1: i64) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1212} {:cexpr "wait_for_completion_timeout:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1213} $i2 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1214} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i2);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_srp_rport: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_srp_rport == $sub.ref(0, 589206);

procedure ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_srp_rport($p0: ref);
  free requires assertsPassed;
  modifies $M.67, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_srp_rport($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $i1 := $M.67;
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i3);
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $M.67 := 0;
    call {:si_unique_call 1216} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_srp_rport"} boogie_si_record_i8(0);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_469:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_lock_mutex_of_srp_rport: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_lock_mutex_of_srp_rport == $sub.ref(0, 590238);

procedure ldv_linux_kernel_locking_mutex_mutex_lock_mutex_of_srp_rport($p0: ref);
  free requires assertsPassed;
  modifies $M.67, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_lock_mutex_of_srp_rport($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $i1 := $M.67;
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $i3 := $xor.i1($i2, 1);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i4);
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 1218} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_srp_rport"} boogie_si_record_i8(1);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_472:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock: ref;

axiom ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock == $sub.ref(0, 591270);

procedure ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} {:cexpr "ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1220} __VERIFIER_error();
    goto SeqInstr_475, SeqInstr_476;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  SeqInstr_477:
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_475:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_kernel_sched_completion_init_completion_tsk_mgmt_done_of_srp_rdma_ch: ref;

axiom ldv_linux_kernel_sched_completion_init_completion_tsk_mgmt_done_of_srp_rdma_ch == $sub.ref(0, 592302);

procedure ldv_linux_kernel_sched_completion_init_completion_tsk_mgmt_done_of_srp_rdma_ch();
  free requires assertsPassed;
  modifies $M.66;



implementation ldv_linux_kernel_sched_completion_init_completion_tsk_mgmt_done_of_srp_rdma_ch()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 1221} {:cexpr "ldv_linux_kernel_sched_completion_completion_tsk_mgmt_done_of_srp_rdma_ch"} boogie_si_record_i32(1);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    return;
}



const srp_reset_device: ref;

axiom srp_reset_device == $sub.ref(0, 593334);

procedure srp_reset_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.40, $M.41, $M.42, $M.14, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.66, $M.67, assertsPassed, $CurrAddr, $M.26, $M.27, $M.28, $M.29, $M.12, $M.10, $M.11, $M.17, $M.16;



implementation srp_reset_device($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $i35: i32;
  var $i45: i32;
  var $i34: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $i26: i32;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 3480)), $mul.ref(0, 1));
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} $p5 := host_to_target($p4);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 3816)), $mul.ref(952, 1));
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} dev_printk.ref.ref.ref(.str.39, $p8, .str.149);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 3480)), $mul.ref(208, 1));
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.1, $p13);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i14);
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} $i16 := srp_send_tsk_mgmt($p10, 4294967295, $i15, 8);
    goto SeqInstr_478, SeqInstr_479;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  SeqInstr_480:
    call {:si_unique_call 1225} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p10, $mul.ref(0, 488)), $mul.ref(480, 1));
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.1, $p19);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.1, $p23);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $i25 := $ult.i32(0, $i24);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i18 := 8194;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb11;

  $bb11:
    call $p27, $p28, $i29, $p30, $p31, $i32, $i33, $p36, $p37, $i38, $p39, $p40, $p41, $i42, $i43, $i44, $i35, $i45, $i34, $i46, $i47, $i48, $i26 := srp_reset_device_loop_$bb11($p0, $p5, $p23, $p27, $p28, $i29, $p30, $p31, $i32, $i33, $p36, $p37, $i38, $p39, $p40, $p41, $i42, $i43, $i44, $i35, $i45, $i34, $i46, $i47, $i48, $i26);
    goto $bb11_last;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.1, $p27);
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i26);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p28, $mul.ref($i29, 488));
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(236, 1));
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.1, $p31);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32(0, $i32);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $i34 := 0;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i34, 1);
    call {:si_unique_call 1228} {:cexpr "i"} boogie_si_record_i32($i46);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.1, $p23);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $i48 := $ult.i32($i46, $i47);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i48 == 1);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb21:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i26 := $i46;
    goto $bb21_dummy;

  $bb13:
    assume $i33 == 1;
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb16;

  $bb16:
    call $p36, $p37, $i38, $p39, $p40, $p41, $i42, $i43, $i44, $i35, $i45 := srp_reset_device_loop_$bb16($p0, $p28, $i29, $p30, $p31, $p36, $p37, $i38, $p39, $p40, $p41, $i42, $i43, $i44, $i35, $i45);
    goto $bb16_last;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p28, $mul.ref($i29, 488)), $mul.ref(368, 1));
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.1, $p36);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i35);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p37, $mul.ref($i38, 56));
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.1, $p40);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} srp_finish_req($p30, $p39, $p41, 524288);
    goto SeqInstr_481, SeqInstr_482;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  SeqInstr_483:
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i35, 1);
    call {:si_unique_call 1227} {:cexpr "i"} boogie_si_record_i32($i42);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.1, $p31);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i42, $i43);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $i45 := $i42;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $i34 := $i45;
    goto $bb15;

  $bb18:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $i35 := $i42;
    goto $bb18_dummy;

  SeqInstr_481:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $i18 := 8195;
    goto $bb3;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $i18 := 8195;
    goto $bb3;

  SeqInstr_478:
    assume !assertsPassed;
    return;

  $bb18_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5802;

  $bb21_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5790;
}



const srp_reset_host: ref;

axiom srp_reset_host == $sub.ref(0, 594366);

procedure srp_reset_host($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation srp_reset_host($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 3480)), $mul.ref(0, 1));
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} $p5 := host_to_target($p4);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 3816)), $mul.ref(952, 1));
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} dev_printk.ref.ref.ref(.str.39, $p8, .str.150);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(184, 1));
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} $i11 := srp_reconnect_rport($p10);
    call {:si_unique_call 1232} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $i13 := (if $i12 == 1 then 8194 else 8195);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;
}



const srp_reconnect_rport: ref;

axiom srp_reconnect_rport == $sub.ref(0, 595398);

procedure srp_reconnect_rport($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation srp_reconnect_rport($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1233} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1234} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const srp_target_info: ref;

axiom srp_target_info == $sub.ref(0, 596430);

procedure srp_target_info($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation srp_target_info($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} $p1 := host_to_target($p0);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 464)), $mul.ref(192, 1));
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const srp_queuecommand: ref;

axiom srp_queuecommand == $sub.ref(0, 597462);

procedure srp_queuecommand($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.40, $M.41, $M.42, $M.67, $M.15, $M.69, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.14, assertsPassed, $CurrAddr, $M.26, $M.27, $M.28, $M.29, $M.16, $M.12, $M.10, $M.11, $M.17, $M.25, $M.66, $M.18, $M.19;



implementation srp_queuecommand($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i8;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i64;
  var $i49: i64;
  var $i50: i1;
  var $i51: i1;
  var $i52: i32;
  var $i53: i64;
  var $i54: i64;
  var $i55: i1;
  var $i56: i1;
  var $i57: i32;
  var $i58: i64;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i16;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $p67: ref;
  var $i68: i16;
  var $i69: i32;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i74: i1;
  var $i75: i32;
  var $i76: i64;
  var $i77: i64;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i32;
  var $i82: i1;
  var $i83: i32;
  var $i84: i64;
  var $i85: i64;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $p90: ref;
  var $i91: i32;
  var $i92: i1;
  var $i93: i32;
  var $i94: i64;
  var $i95: i64;
  var $i96: i1;
  var $i97: i1;
  var $i98: i32;
  var $i99: i64;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i64;
  var $i105: i1;
  var $p106: ref;
  var $p107: ref;
  var $i108: i64;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $i117: i64;
  var $p118: ref;
  var $i119: i32;
  var $i120: i64;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $i131: i64;
  var $i132: i64;
  var $i133: i64;
  var $p134: ref;
  var $i135: i64;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $i142: i16;
  var $i143: i64;
  var $p144: ref;
  var $p145: ref;
  var $i146: i32;
  var $i147: i1;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $i151: i1;
  var $i152: i32;
  var $p153: ref;
  var $p154: ref;
  var $i155: i64;
  var $p156: ref;
  var $i157: i32;
  var $i158: i64;
  var $i159: i32;
  var $i160: i1;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $i164: i32;
  var $i165: i1;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $i169: i32;
  var $i170: i1;
  var $p171: ref;
  var $p172: ref;
  var $i173: i32;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;
  var vslice_dummy_var_147: i64;
  var vslice_dummy_var_148: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} $p2 := host_to_target($p0);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(184, 1));
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} $i5 := preempt_count();
    goto SeqInstr_484, SeqInstr_485;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  SeqInstr_486:
    call {:si_unique_call 1238} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $i7 := $and.i64($i6, 2096896);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i8($i17);
    call {:si_unique_call 1240} {:cexpr "in_scsi_eh"} boogie_si_record_i8($i18);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(184, 1));
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} $i23 := srp_chkready($p22);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p24, $i23);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.1, $p25);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} $i30 := ldv__builtin_expect($i29, 0);
    call {:si_unique_call 1244} {:cexpr "tmp___3"} boogie_si_record_i64($i30);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(360, 1));
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.1, $p32);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 368)), $mul.ref(256, 1));
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.1, $p34);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i35, 0);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i32($i36);
    call {:si_unique_call 1245} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i37);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i32($i38);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} $i41 := ldv__builtin_expect($i40, 0);
    call {:si_unique_call 1247} {:cexpr "tmp___6"} boogie_si_record_i64($i41);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i37, 0);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $i57 := $zext.i1.i32($i56);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i57);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} vslice_dummy_var_147 := ldv__builtin_expect($i58, 0);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(360, 1));
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.1, $p60);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} $i62 := blk_mq_unique_tag($p61);
    call {:si_unique_call 1256} {:cexpr "tag"} boogie_si_record_i32($i62);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} $i63 := blk_mq_unique_tag_to_hwq($i62);
    call {:si_unique_call 1258} {:cexpr "tmp___7"} boogie_si_record_i16($i63);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.1, $p64);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $i66 := $zext.i16.i64($i63);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p65, $mul.ref($i66, 488));
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} $i68 := blk_mq_unique_tag_to_tag($i62);
    call {:si_unique_call 1260} {:cexpr "idx"} boogie_si_record_i16($i68);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $i69 := $zext.i16.i32($i68);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(236, 1));
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.1, $p70);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $i72 := $sge.i32($i69, $i71);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $i73 := $zext.i1.i32($i72);
    call {:si_unique_call 1261} {:cexpr "__ret_warn_once___0"} boogie_si_record_i32($i73);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $i75 := $zext.i1.i32($i74);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i75);
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} $i77 := ldv__builtin_expect($i76, 0);
    call {:si_unique_call 1263} {:cexpr "tmp___11"} boogie_si_record_i64($i77);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $i78 := $ne.i64($i77, 0);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i73, 0);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $i98 := $zext.i1.i32($i97);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $i99 := $sext.i32.i64($i98);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} vslice_dummy_var_148 := ldv__builtin_expect($i99, 0);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p65, $mul.ref($i66, 488)), $mul.ref(16, 1));
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_126($p101);
    goto SeqInstr_490, SeqInstr_491;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  SeqInstr_492:
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} $p102 := __srp_get_tx_iu($p67, 0);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p65, $mul.ref($i66, 488)), $mul.ref(16, 1));
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} ldv_spin_unlock_irqrestore_114($p103, $u0);
    goto SeqInstr_493, SeqInstr_494;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  SeqInstr_495:
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $i104 := $p2i.ref.i64($p102);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $i105 := $eq.i64($i104, 0);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p65, $mul.ref($i66, 488)), $mul.ref(368, 1));
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.1, $p106);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $i108 := $zext.i16.i64($i68);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($p107, $mul.ref($i108, 56));
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(168, 1));
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.1, $p110);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p111, $mul.ref(0, 1792)), $mul.ref(0, 1));
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.1, $p112);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p113, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.1, $p114);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p102, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $i117 := $load.i64($M.1, $p116);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.1, $p118);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $i120 := $zext.i32.i64($i119);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} ib_dma_sync_single_for_cpu($p115, $i117, $i120, 1);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(448, 1));
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p122, $p109);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p102, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.1, $p123);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p124);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p125);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_51 := $M.1;
    call {:si_unique_call 1276} cmdloc_dummy_var_52 := $memset.i8(cmdloc_dummy_var_51, $p126, 0, 48, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_52;
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p125, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p127, 2);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.1, $p128);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p129, $mul.ref(0, 3480)), $mul.ref(208, 1));
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $i131 := $load.i64($M.1, $p130);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $i132 := $shl.i64($i131, 48);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} $i133 := __fswab64($i132);
    call {:si_unique_call 1278} {:cexpr "tmp___12"} boogie_si_record_i64($i133);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p125, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p134, $i133);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $i135 := $zext.i32.i64($i62);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p125, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p136, $i135);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p125, $mul.ref(0, 56)), $mul.ref(36, 1));
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p137);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(312, 1));
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $p140 := $load.ref($M.1, $p139);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(300, 1));
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $i142 := $load.i16($M.1, $p141);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $i143 := $zext.i16.i64($i142);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_53 := $M.1;
    cmdloc_dummy_var_54 := $M.1;
    call {:si_unique_call 1279} cmdloc_dummy_var_55 := $memcpy.i8(cmdloc_dummy_var_53, cmdloc_dummy_var_54, $p138, $p140, $i143, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_55;
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p107, $mul.ref($i108, 56)), $mul.ref(0, 1));
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p144, $p1);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p107, $mul.ref($i108, 56)), $mul.ref(8, 1));
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p145, $p102);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} $i146 := srp_map_data($p1, $p67, $p109);
    goto SeqInstr_496, SeqInstr_497;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  SeqInstr_498:
    call {:si_unique_call 1281} {:cexpr "len"} boogie_si_record_i32($i146);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $i147 := $slt.i32($i146, 0);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    assume {:branchcond $i147} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p102, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $i155 := $load.i64($M.1, $p154);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(96, 1));
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $i157 := $load.i32($M.1, $p156);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $i158 := $zext.i32.i64($i157);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} ib_dma_sync_single_for_device($p115, $i155, $i158, 1);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} $i159 := srp_post_send($p67, $p102, $i146);
    call {:si_unique_call 1286} {:cexpr "tmp___13"} boogie_si_record_i32($i159);
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $i160 := $ne.i32($i159, 0);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    assume {:branchcond $i160} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i164 := 0;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $i165 := $trunc.i8.i1($i18);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $r := $i164;
    return;

  $bb44:
    assume $i165 == 1;
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p4, $mul.ref(0, 2304)), $mul.ref(1448, 1));
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} ldv_mutex_unlock_128($p166);
    goto SeqInstr_505, SeqInstr_506;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  SeqInstr_507:
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    goto $bb46;

  SeqInstr_505:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i160 == 1;
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $p162 := $load.ref($M.1, $p161);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p162, $mul.ref(0, 3816)), $mul.ref(952, 1));
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} dev_printk.ref.ref.ref(.str.39, $p163, .str.153);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} srp_unmap_data($p1, $p67, $p109);
    goto SeqInstr_502, SeqInstr_503;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  SeqInstr_504:
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} srp_put_tx_iu($p67, $p102, 0);
    goto SeqInstr_499, SeqInstr_500;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  SeqInstr_501:
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p107, $mul.ref($i108, 56)), $mul.ref(0, 1));
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p167, $0.ref);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $i169 := $load.i32($M.1, $p168);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $i170 := $ne.i32($i169, 0);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    $i173 := 4181;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $i164 := $i173;
    goto $bb43;

  $bb47:
    assume $i170 == 1;
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(376, 1));
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $p172 := $load.ref($M.1, $p171);
    call {:si_unique_call 1290} devirtbounce.1($p172, $p1);
    goto SeqInstr_508, SeqInstr_509;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  SeqInstr_510:
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $i173 := 0;
    goto $bb49;

  SeqInstr_508:
    assume !assertsPassed;
    return;

  SeqInstr_499:
    assume !assertsPassed;
    return;

  SeqInstr_502:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i147 == 1;
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.1, $p148);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p149, $mul.ref(0, 3816)), $mul.ref(952, 1));
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} dev_printk.ref.ref.ref.i32(.str.39, $p150, .str.152, $i146);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $i151 := $eq.i32($i146, $sub.i32(0, 12));
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $i152 := (if $i151 == 1 then 40 else 458752);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p1, $mul.ref(0, 472)), $mul.ref(456, 1));
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p153, $i152);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_496:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i105 == 1;
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_493:
    assume !assertsPassed;
    return;

  SeqInstr_490:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i78 == 1;
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i8.i1(1);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $i80 := $xor.i1($i79, 1);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $i81 := $zext.i1.i32($i80);
    call {:si_unique_call 1264} {:cexpr "__ret_warn_on___0"} boogie_si_record_i32($i81);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $i83 := $zext.i1.i32($i82);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $i84 := $sext.i32.i64($i83);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} $i85 := ldv__builtin_expect($i84, 0);
    call {:si_unique_call 1266} {:cexpr "tmp___9"} boogie_si_record_i64($i85);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $i86 := $ne.i64($i85, 0);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i81, 0);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $i93 := $zext.i1.i32($i92);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $i94 := $sext.i32.i64($i93);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} $i95 := ldv__builtin_expect($i94, 0);
    call {:si_unique_call 1270} {:cexpr "tmp___10"} boogie_si_record_i64($i95);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $i96 := $ne.i64($i95, 0);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i96 == 1;
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i86 == 1;
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 3816)), $mul.ref(952, 1));
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} $p88 := dev_name($p87);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $i89 := $zext.i16.i32($i68);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p2, $mul.ref(0, 464)), $mul.ref(236, 1));
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.1, $p90);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} warn_slowpath_fmt.ref.i32.ref.ref.i32.i32.i32(.str.20, 2016, .str.151, $p88, $i62, $i89, $i91);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb14:
    assume $i42 == 1;
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i8.i1(1);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $i44 := $xor.i1($i43, 1);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $i45 := $zext.i1.i32($i44);
    call {:si_unique_call 1248} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i45);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $i47 := $zext.i1.i32($i46);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i47);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} $i49 := ldv__builtin_expect($i48, 0);
    call {:si_unique_call 1250} {:cexpr "tmp___4"} boogie_si_record_i64($i49);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i45, 0);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $i52 := $zext.i1.i32($i51);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i52);
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} $i54 := ldv__builtin_expect($i53, 0);
    call {:si_unique_call 1253} {:cexpr "tmp___5"} boogie_si_record_i64($i54);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i55 == 1;
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i50 == 1;
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} warn_slowpath_null(.str.20, 2010);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume $i31 == 1;
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 2304)), $mul.ref(1448, 1));
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} ldv_mutex_lock_125($p20);
    goto SeqInstr_487, SeqInstr_488;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  SeqInstr_489:
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_487:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} $p9 := get_current();
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 3816)), $mul.ref(400, 1));
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i10, $i13);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i15 := 1;
    goto $bb5;

  SeqInstr_484:
    assume !assertsPassed;
    return;
}



const preempt_count: ref;

axiom preempt_count == $sub.ref(0, 598494);

procedure preempt_count() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.40, $M.41, $M.42, $M.14, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $M.66, $M.67, $CurrAddr, $M.11, $M.17, $M.18, $M.19, $M.12, $M.10, $M.16;



implementation preempt_count() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call {:si_unique_call 1291} $i2 := devirtbounce.17(0, __preempt_count);
    goto SeqInstr_511, SeqInstr_512;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  SeqInstr_513:
    call {:si_unique_call 1292} {:cexpr "pfo_ret__"} boogie_si_record_i32($i2);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i2, 2147483647);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_511:
    assume !assertsPassed;
    return;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 599526);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call {:si_unique_call 1297} $p3 := devirtbounce.18(0, current_task);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const ldv_mutex_lock_125: ref;

axiom ldv_mutex_lock_125 == $sub.ref(0, 600558);

procedure ldv_mutex_lock_125($p0: ref);
  free requires assertsPassed;
  modifies $M.67, assertsPassed;



implementation ldv_mutex_lock_125($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} ldv_linux_kernel_locking_mutex_mutex_lock_mutex_of_srp_rport($p0);
    goto SeqInstr_523, SeqInstr_524;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  SeqInstr_525:
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_523:
    assume !assertsPassed;
    return;
}



const srp_chkready: ref;

axiom srp_chkready == $sub.ref(0, 601590);

procedure srp_chkready($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation srp_chkready($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2304)), $mul.ref(1608, 1));
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.1, $p1);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2304)), $mul.ref(1608, 1));
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 1);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2304)), $mul.ref(1608, 1));
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.1, $p7);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 2);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2304)), $mul.ref(1608, 1));
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.1, $p10);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 3);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb13:
    assume $i12 == 1;
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i13 := 65536;
    goto $bb18;

  $bb9:
    assume $i9 == 1;
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i13 := 983040;
    goto $bb18;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_126: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_126 == $sub.ref(0, 602622);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_126($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_126($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_srp_rdma_ch();
    goto SeqInstr_526, SeqInstr_527;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  SeqInstr_528:
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_526:
    assume !assertsPassed;
    return;
}



const srp_map_data: ref;

axiom srp_map_data == $sub.ref(0, 603654);

procedure srp_map_data($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.69, $CurrAddr, $M.16, assertsPassed;



implementation srp_map_data($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $i43: i1;
  var $i44: i8;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i64;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $p65: ref;
  var $i66: i32;
  var $i67: i64;
  var $p68: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $i85: i64;
  var $i86: i64;
  var $i87: i1;
  var $p88: ref;
  var $i89: i8;
  var $i90: i1;
  var $i91: i1;
  var $i92: i32;
  var $i93: i64;
  var $i94: i64;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $i100: i32;
  var $p101: ref;
  var $i102: i32;
  var $i103: i1;
  var $i104: i32;
  var $p105: ref;
  var $i106: i32;
  var $i107: i32;
  var $i108: i64;
  var $i109: i32;
  var $i110: i32;
  var $i111: i32;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $i117: i64;
  var $i118: i64;
  var $p119: ref;
  var $i120: i64;
  var $i121: i64;
  var $p123: ref;
  var $p124: ref;
  var $i125: i32;
  var $i126: i32;
  var $p128: ref;
  var $i129: i32;
  var $p131: ref;
  var $p132: ref;
  var $i133: i32;
  var $i134: i32;
  var $p135: ref;
  var $p136: ref;
  var $i137: i32;
  var $i138: i1;
  var $i139: i8;
  var $p140: ref;
  var $i141: i8;
  var $p142: ref;
  var $p143: ref;
  var $i144: i64;
  var $i145: i64;
  var $i59: i32;
  var $i60: i8;
  var $p146: ref;
  var $i147: i32;
  var $i148: i1;
  var $i149: i32;
  var $i150: i32;
  var $i151: i8;
  var $p152: ref;
  var $p153: ref;
  var $i17: i32;
  var cmdloc_dummy_var_56: [ref]i8;
  var cmdloc_dummy_var_57: [ref]i8;
  var cmdloc_dummy_var_58: [ref]i8;
  var cmdloc_dummy_var_59: [ref]i8;
  var cmdloc_dummy_var_60: [ref]i8;
  var cmdloc_dummy_var_61: [ref]i8;
  var cmdloc_dummy_var_62: [ref]i8;
  var cmdloc_dummy_var_63: [ref]i8;
  var vslice_dummy_var_149: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} $p3 := $alloc($mul.ref(80, $zext.i32.i64(1)));
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(96, 1));
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} $p11 := scsi_sglist($p0);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i13 == 1);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 472)), $mul.ref(304, 1));
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.1, $p14);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 3);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 472)), $mul.ref(304, 1));
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.1, $p18);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32($i19, 1);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $i21 := $ugt.i32($i20, 1);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} $i27 := scsi_sg_count($p0);
    call {:si_unique_call 1309} {:cexpr "tmp___0"} boogie_si_record_i32($i27);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} $p28 := scsi_sglist($p0);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(168, 1));
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.1, $p29);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 1792)), $mul.ref(0, 1));
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.1, $p31);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.1, $p33);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 472)), $mul.ref(304, 1));
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.1, $p35);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} $i37 := ib_dma_map_sg($p34, $p28, $i27, $i36);
    call {:si_unique_call 1312} {:cexpr "count"} boogie_si_record_i32($i37);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i32($i38);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} $i41 := ldv__builtin_expect($i40, 0);
    call {:si_unique_call 1314} {:cexpr "tmp___1"} boogie_si_record_i64($i41);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i37, 1);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p10, $mul.ref(0, 56)), $mul.ref(52, 1));
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $i64 := $load.i64($M.1, $p63);
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(104, 1));
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.1, $p65);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $i67 := $zext.i32.i64($i66);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} ib_dma_sync_single_for_cpu($p34, $i64, $i67, 1);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p3);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_56 := $M.69;
    call {:si_unique_call 1326} cmdloc_dummy_var_57 := $memset.i8(cmdloc_dummy_var_56, $p68, 0, 80, $zext.i32.i64(8), 0 == 1);
    $M.69 := cmdloc_dummy_var_57;
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} vslice_dummy_var_149 := srp_map_sg($p3, $p1, $p2, $p28, $i37);
    goto SeqInstr_529, SeqInstr_530;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  SeqInstr_531:
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(48, 1));
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.69, $p70);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 1);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(100, 1));
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.1, $p79);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(48, 1));
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.69, $p81);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $i83 := $ult.i32($i80, $i82);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $i84 := $zext.i1.i32($i83);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $i85 := $sext.i32.i64($i84);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} $i86 := ldv__builtin_expect($i85, 0);
    call {:si_unique_call 1330} {:cexpr "tmp___7"} boogie_si_record_i64($i86);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $i87 := $ne.i64($i86, 0);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(48, 1));
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.69, $p99);
    call {:si_unique_call 1334} {:cexpr "_min1"} boogie_si_record_i32($i100);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(100, 1));
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.1, $p101);
    call {:si_unique_call 1335} {:cexpr "_min2"} boogie_si_record_i32($i102);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $i103 := $ult.i32($i100, $i102);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i103 == 1);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $i104 := $i102;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(48, 1));
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.69, $p105);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $i107 := $mul.i32($i106, 16);
    call {:si_unique_call 1336} {:cexpr "table_len"} boogie_si_record_i32($i107);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $i108 := $sext.i32.i64($i104);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i64.i32($i108);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $i110 := $mul.i32($i109, 16);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $i111 := $add.i32(68, $i110);
    call {:si_unique_call 1337} {:cexpr "len"} boogie_si_record_i32($i111);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p62, $mul.ref(0, 24)), $mul.ref(24, 1));
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p112);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.1, $p114);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p115);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $i117 := $sext.i32.i64($i104);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i118 := $mul.i64($i117, 16);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_61 := $M.1;
    cmdloc_dummy_var_62 := $M.1;
    call {:si_unique_call 1338} cmdloc_dummy_var_63 := $memcpy.i8(cmdloc_dummy_var_61, cmdloc_dummy_var_62, $p113, $p116, $i118, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_63;
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $i120 := $load.i64($M.1, $p119);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} $i121 := __fswab64($i120);
    call {:si_unique_call 1340} {:cexpr "tmp___9"} boogie_si_record_i64($i121);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p62, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p123, $i121);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.1, $p124);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} $i126 := __fswab32($i125);
    call {:si_unique_call 1342} {:cexpr "tmp___10"} boogie_si_record_i32($i126);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p62, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p128, $i126);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} $i129 := __fswab32($i107);
    call {:si_unique_call 1344} {:cexpr "tmp___11"} boogie_si_record_i32($i129);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($p62, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p131, $i129);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(36, 1));
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.69, $p132);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} $i134 := __fswab32($i133);
    call {:si_unique_call 1346} {:cexpr "tmp___12"} boogie_si_record_i32($i134);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p62, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p135, $i134);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p0, $mul.ref(0, 472)), $mul.ref(304, 1));
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.1, $p136);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $i138 := $eq.i32($i137, 1);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i138 == 1);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $i141 := $trunc.i32.i8($i104);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p10, $mul.ref(0, 56)), $mul.ref(7, 1));
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p142, $i141);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $i144 := $load.i64($M.1, $p143);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $i145 := $zext.i32.i64($i107);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} ib_dma_sync_single_for_device($p34, $i144, $i145, 1);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $i59, $i60 := $i111, 2;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p0, $mul.ref(0, 472)), $mul.ref(304, 1));
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $i147 := $load.i32($M.1, $p146);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i147, 1);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i148 == 1);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p10, $mul.ref(0, 56)), $mul.ref(5, 1));
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p153, $i60);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i17 := $i59;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb36:
    assume $i148 == 1;
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $i149 := $zext.i8.i32($i60);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $i150 := $shl.i32($i149, 4);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $i151 := $trunc.i32.i8($i150);
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p10, $mul.ref(0, 56)), $mul.ref(5, 1));
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p152, $i151);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb33:
    assume $i138 == 1;
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $i139 := $trunc.i32.i8($i104);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p10, $mul.ref(0, 56)), $mul.ref(6, 1));
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p140, $i139);
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume $i103 == 1;
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $i104 := $i100;
    goto $bb32;

  $bb24:
    assume $i87 == 1;
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(108, 1));
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.1, $p88);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i8.i1($i89);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $i91 := $xor.i1($i90, 1);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $i92 := $zext.i1.i32($i91);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $i93 := $sext.i32.i64($i92);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} $i94 := ldv__builtin_expect($i93, 0);
    call {:si_unique_call 1332} {:cexpr "tmp___8"} boogie_si_record_i64($i94);
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $i95 := $ne.i64($i94, 0);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb26:
    assume $i95 == 1;
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.1, $p96);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p97, $mul.ref(0, 3816)), $mul.ref(952, 1));
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} dev_printk.ref.ref.ref(.str.39, $p98, .str.155);
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 5);
    goto $bb6;

  $bb21:
    assume $i72 == 1;
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p10, $mul.ref(0, 56)), $mul.ref(52, 1));
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.1, $p75);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p74);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p76);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_58 := $M.1;
    cmdloc_dummy_var_59 := $M.1;
    call {:si_unique_call 1328} cmdloc_dummy_var_60 := $memcpy.i8(cmdloc_dummy_var_58, cmdloc_dummy_var_59, $p77, $p78, 16, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_60;
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $i59, $i60 := 64, 1;
    goto $bb19;

  SeqInstr_529:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i43 == 1;
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $i44 := $M.68;
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i8.i1($i44);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i45 == 1);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p10, $mul.ref(0, 56)), $mul.ref(52, 1));
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} $i48 := ib_sg_dma_address($p34, $p28);
    call {:si_unique_call 1316} {:cexpr "tmp___2"} boogie_si_record_i64($i48);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} $i49 := __fswab64($i48);
    call {:si_unique_call 1318} {:cexpr "tmp___3"} boogie_si_record_i64($i49);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p47, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p50, $i49);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.1, $p51);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} $i53 := __fswab32($i52);
    call {:si_unique_call 1320} {:cexpr "tmp___4"} boogie_si_record_i32($i53);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p47, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p54, $i53);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} $i55 := ib_sg_dma_len($p34, $p28);
    call {:si_unique_call 1322} {:cexpr "tmp___5"} boogie_si_record_i32($i55);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} $i56 := __fswab32($i55);
    call {:si_unique_call 1324} {:cexpr "tmp___6"} boogie_si_record_i32($i56);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p47, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p57, $i56);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p58, 0);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $i59, $i60 := 64, 1;
    goto $bb19;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i45 == 1;
    goto $bb16;

  $bb11:
    assume $i42 == 1;
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 5);
    goto $bb6;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 3816)), $mul.ref(952, 1));
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 472)), $mul.ref(304, 1));
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.1, $p25);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} dev_printk.ref.ref.ref.i32(.str.37, $p24, .str.154, $i26);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 22);
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i17 := 48;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb2;
}



const ldv_mutex_unlock_128: ref;

axiom ldv_mutex_unlock_128 == $sub.ref(0, 604686);

procedure ldv_mutex_unlock_128($p0: ref);
  free requires assertsPassed;
  modifies $M.67, assertsPassed;



implementation ldv_mutex_unlock_128($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_srp_rport($p0);
    goto SeqInstr_532, SeqInstr_533;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  SeqInstr_534:
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_532:
    assume !assertsPassed;
    return;
}



const ib_dma_map_sg: ref;

axiom ib_dma_map_sg == $sub.ref(0, 605718);

procedure ib_dma_map_sg($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ib_dma_map_sg($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} {:cexpr "ib_dma_map_sg:arg:nents"} boogie_si_record_i32($i2);
    call {:si_unique_call 1350} {:cexpr "ib_dma_map_sg:arg:direction"} boogie_si_record_i32($i3);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2488)), $mul.ref(928, 1));
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2488)), $mul.ref(0, 1));
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} $i16 := dma_map_sg_attrs($p15, $p1, $i2, $i3, $0.ref);
    call {:si_unique_call 1354} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $i13 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2488)), $mul.ref(928, 1));
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 88)), $mul.ref(40, 1));
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    call {:si_unique_call 1351} $i12 := devirtbounce.19($p11, $p0, $p1, $i2, $i3);
    call {:si_unique_call 1352} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const ib_sg_dma_address: ref;

axiom ib_sg_dma_address == $sub.ref(0, 606750);

procedure ib_sg_dma_address($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ib_sg_dma_address($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.1, $p2);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ib_sg_dma_len: ref;

axiom ib_sg_dma_len == $sub.ref(0, 607782);

procedure ib_sg_dma_len($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ib_sg_dma_len($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, $p2);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const srp_map_sg: ref;

axiom srp_map_sg == $sub.ref(0, 608814);

procedure srp_map_sg($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.69, $M.1, $CurrAddr, $M.16, assertsPassed;



implementation srp_map_sg($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $i32: i8;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $i44: i8;
  var $i33: i8;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i64;
  var $i56: i32;
  var $i57: i32;
  var $p58: ref;
  var $i59: i64;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;
  var $i64: i64;
  var $p65: ref;
  var $i66: i32;
  var $p67: ref;
  var $i68: i32;
  var $i69: i8;
  var $i70: i32;
  var $p71: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i8;
  var $i72: i1;
  var $i73: i1;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $i77: i32;
  var $i78: i16;
  var $p79: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} {:cexpr "srp_map_sg:arg:count"} boogie_si_record_i32($i4);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(96, 1));
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(168, 1));
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1792)), $mul.ref(0, 1));
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $M.69 := $store.ref($M.69, $p15, $p14);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $M.69 := $store.ref($M.69, $p18, $p17);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p10, $mul.ref(0, 64)), $mul.ref(62, 1));
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.1, $p19);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i20);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.1, $p35);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $M.69 := $store.ref($M.69, $p38, $p36);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(128, 1));
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.1, $p40);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $i44 := $zext.i1.i8($i43);
    call {:si_unique_call 1357} {:cexpr "use_mr"} boogie_si_record_i8($i44);
    assume {:verifier.code 0} true;
    $i33 := $i44;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $p45, $i46, $i47 := $p3, 0, $i33;
    goto $bb4;

  $bb4:
    call $i48, $i49, $i50, $p51, $p52, $p53, $i54, $i55, $i56, $i57, $p58, $i59, $i60, $i61, $i62, $p63, $i64, $p65, $i66, $p67, $i68, $i69, $i70, $p71, $p45, $i46, $i47, $i72, $i73, $i74, $i75 := srp_map_sg_loop_$bb4($p0, $p1, $i4, $p6, $p12, $i48, $i49, $i50, $p51, $p52, $p53, $i54, $i55, $i56, $i57, $p58, $i59, $i60, $i61, $i62, $p63, $i64, $p65, $i66, $p67, $i68, $i69, $i70, $p71, $p45, $i46, $i47, $i72, $i73, $i74, $i75);
    goto $bb4_last;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i46, $i4);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i8.i1($i47);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(44, 1));
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.69, $p76);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i32.i16($i77);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p79, $i78);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb13:
    assume $i73 == 1;
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} $i74 := srp_finish_mapping($p0, $p1);
    goto SeqInstr_538, SeqInstr_539;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  SeqInstr_540:
    call {:si_unique_call 1371} {:cexpr "tmp___0"} boogie_si_record_i32($i74);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i75 == 1;
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.69, $p51);
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(64, 1));
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.69, $p53);
    call {:si_unique_call 1360} {:cexpr "i"} boogie_si_record_i32($i54);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} $i55 := ib_sg_dma_address($p12, $p52);
    call {:si_unique_call 1362} {:cexpr "dma_addr"} boogie_si_record_i64($i55);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} $i56 := ib_sg_dma_len($p12, $p52);
    call {:si_unique_call 1364} {:cexpr "dma_len"} boogie_si_record_i32($i56);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i64.i32($i55);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(72, 1));
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $i59 := $load.i64($M.69, $p58);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i64.i32($i59);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $i61 := $sub.i32($i57, $i60);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i56, $i61);
    call {:si_unique_call 1365} {:cexpr "dma_len"} boogie_si_record_i32($i62);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(72, 1));
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $i64 := $load.i64($M.69, $p63);
    call {:si_unique_call 1366} {:cexpr "dma_addr"} boogie_si_record_i64($i64);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p6, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.1, $p65);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} srp_map_desc($p0, $i64, $i62, $i66);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $p67, $i68, $i69 := $p52, $i54, 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i68, 1);
    call {:si_unique_call 1368} {:cexpr "i"} boogie_si_record_i32($i70);
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} $p71 := sg_next($p67);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $p45, $i46, $i47 := $p71, $i70, $i69;
    goto corral_source_split_6466_dummy;

  SeqInstr_538:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i72 == 1;
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i8.i1($i47);
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} $i49 := srp_map_sg_entry($p0, $p1, $p45, $i46, $i48);
    goto SeqInstr_535, SeqInstr_536;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  SeqInstr_537:
    call {:si_unique_call 1359} {:cexpr "tmp"} boogie_si_record_i32($i49);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $p67, $i68, $i69 := $p45, $i46, $i47;
    goto $bb9;

  $bb6:
    assume $i50 == 1;
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_535:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.1, $p23);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $M.69 := $store.ref($M.69, $p26, $p24);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(128, 1));
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.1, $p28);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i8($i31);
    call {:si_unique_call 1356} {:cexpr "use_mr"} boogie_si_record_i8($i32);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb3;

  corral_source_split_6466_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6437;
}



const srp_map_sg_entry: ref;

axiom srp_map_sg_entry == $sub.ref(0, 609846);

procedure srp_map_sg_entry($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.69, $M.1, $CurrAddr, $M.16, assertsPassed;



implementation srp_map_sg_entry($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i1) returns ($r: i32)
{
  var $i5: i8;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i32;
  var $i16: i1;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i8;
  var $i23: i1;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $i40: i1;
  var $i44: i32;
  var $p45: ref;
  var $i46: i64;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $i55: i1;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $i76: i64;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i32;
  var $p84: ref;
  var $i85: i64;
  var $i86: i64;
  var $i87: i32;
  var $i88: i1;
  var $i42: i32;
  var $i43: i64;
  var $i89: i32;
  var $i41: i32;
  var $p90: ref;
  var $i91: i32;
  var $i92: i1;
  var $i93: i32;
  var $i94: i1;
  var $i95: i32;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} {:cexpr "srp_map_sg_entry:arg:sg_index"} boogie_si_record_i32($i3);
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 1373} {:cexpr "srp_map_sg_entry:arg:use_mr"} boogie_si_record_i1($i4);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(96, 1));
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 464)), $mul.ref(168, 1));
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 1792)), $mul.ref(0, 1));
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} $i14 := ib_sg_dma_address($p13, $p2);
    call {:si_unique_call 1375} {:cexpr "tmp"} boogie_si_record_i64($i14);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} $i15 := ib_sg_dma_len($p13, $p2);
    call {:si_unique_call 1377} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i5);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p7, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.1, $p19);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} srp_map_desc($p0, $i14, $i15, $i20);
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb5:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(62, 1));
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.1, $p21);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i8.i1($i22);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i23 == 1);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.1, $p24);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $i26 := $xor.i64($i25, $sub.i64(0, 1));
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i14, $i26);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(52, 1));
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.1, $p29);
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $i31 := $ugt.i32($i15, $i30);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.69, $p36);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $i39 := $eq.i64($i38, 0);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i15, 0);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $i41 := $u2;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.1, $p90);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i41, $i91);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    $i95 := 0;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $i17 := $i95;
    goto $bb3;

  $bb46:
    assume $i92 == 1;
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} $i93 := srp_finish_mapping($p0, $p1);
    goto SeqInstr_547, SeqInstr_548;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  SeqInstr_549:
    call {:si_unique_call 1393} {:cexpr "ret"} boogie_si_record_i32($i93);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i93, 0);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i95 := $i93;
    goto $bb51;

  $bb48:
    assume $i94 == 1;
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} srp_map_update_start($p0, $0.ref, 0, 0);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    goto $bb50;

  SeqInstr_547:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i40 == 1;
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $i42, $i43 := $i15, $i14;
    goto $bb26;

  $bb26:
    call $i44, $p45, $i46, $i47, $i48, $i49, $p50, $i51, $p52, $i53, $i54, $i55, $i56, $i57, $i58, $p59, $i60, $i61, $i62, $i63, $p64, $i65, $i66, $p67, $p68, $i69, $p70, $i71, $i72, $p73, $p74, $i75, $i76, $p77, $p78, $i79, $p80, $p81, $i82, $i83, $p84, $i85, $i86, $i87, $i88, $i42, $i43, $i89 := srp_map_sg_entry_loop_$bb26($p0, $p1, $p2, $i3, $p11, $i44, $p45, $i46, $i47, $i48, $i49, $p50, $i51, $p52, $i53, $i54, $i55, $i56, $i57, $i58, $p59, $i60, $i61, $i62, $i63, $p64, $i65, $i66, $p67, $p68, $i69, $p70, $i71, $i72, $p73, $p74, $i75, $i76, $p77, $p78, $i79, $p80, $p81, $i82, $i83, $p84, $i85, $i86, $i87, $i88, $i42, $i43, $i89);
    goto $bb26_last;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i64.i32($i43);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.1, $p45);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i64.i32($i46);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $i48 := $xor.i32($i47, $sub.i32(0, 1));
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i44, $i48);
    call {:si_unique_call 1384} {:cexpr "offset"} boogie_si_record_i32($i49);
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.69, $p50);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.1, $p52);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i51, $i53);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb30;

  $bb30:
    assume !($i54 == 1);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i49, 0);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.1, $p59);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $i61 := $sub.i32($i60, $i49);
    call {:si_unique_call 1388} {:cexpr "__min2"} boogie_si_record_i32($i61);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $i62 := $ult.i32($i42, $i61);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i62 == 1);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $i63 := $i61;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.69, $p64);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 0);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.69, $p68);
    call {:si_unique_call 1389} {:cexpr "tmp___1"} boogie_si_record_i32($i69);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.69, $p70);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $i72 := $add.i32($i71, 1);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $M.69 := $store.i32($M.69, $p73, $i72);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $i75 := $load.i64($M.1, $p74);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $i76 := $and.i64($i43, $i75);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.69, $p77);
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $i79 := $zext.i32.i64($i69);
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($p78, $mul.ref($i79, 8));
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p80, $i76);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.69, $p81);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $i83 := $add.i32($i82, $i63);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $M.69 := $store.i32($M.69, $p84, $i83);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $i85 := $zext.i32.i64($i63);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $i86 := $add.i64($i43, $i85);
    call {:si_unique_call 1390} {:cexpr "dma_addr"} boogie_si_record_i64($i86);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $i87 := $sub.i32($i42, $i63);
    call {:si_unique_call 1391} {:cexpr "dma_len"} boogie_si_record_i32($i87);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $i89 := $i63;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $i41 := $i89;
    goto $bb25;

  $bb43:
    assume $i88 == 1;
    assume {:verifier.code 0} true;
    $i42, $i43 := $i87, $i86;
    goto $bb43_dummy;

  $bb40:
    assume $i66 == 1;
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $M.69 := $store.i64($M.69, $p67, $i43);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume $i62 == 1;
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $i63 := $i42;
    goto $bb39;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i55 == 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} $i56 := srp_finish_mapping($p0, $p1);
    goto SeqInstr_544, SeqInstr_545;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  SeqInstr_546:
    call {:si_unique_call 1386} {:cexpr "ret"} boogie_si_record_i32($i56);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $i58 := $i56;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} srp_map_update_start($p0, $p2, $i3, $i43);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb33:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $i17 := $i58;
    goto $bb3;

  SeqInstr_544:
    assume !assertsPassed;
    return;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i54 == 1;
    goto $bb29;

  $bb20:
    assume $i39 == 1;
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} srp_map_update_start($p0, $p2, $i3, $i14);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} $i32 := srp_finish_mapping($p0, $p1);
    goto SeqInstr_541, SeqInstr_542;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  SeqInstr_543:
    call {:si_unique_call 1380} {:cexpr "ret"} boogie_si_record_i32($i32);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p7, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.1, $p34);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} srp_map_desc($p0, $i14, $i15, $i35);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} srp_map_update_start($p0, $0.ref, 0, 0);
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;

  $bb16:
    assume $i33 == 1;
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $i17 := $i32;
    goto $bb3;

  SeqInstr_541:
    assume !assertsPassed;
    return;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb12;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb9;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;

  $bb43_dummy:
    assume false;
    return;

  $bb26_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6545;
}



const srp_map_desc: ref;

axiom srp_map_desc == $sub.ref(0, 610878);

procedure srp_map_desc($p0: ref, $i1: i64, $i2: i32, $i3: i32);
  free requires assertsPassed;
  modifies $M.1, $M.69;



implementation srp_map_desc($p0: ref, $i1: i64, $i2: i32, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} {:cexpr "srp_map_desc:arg:dma_addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 1396} {:cexpr "srp_map_desc:arg:dma_len"} boogie_si_record_i32($i2);
    call {:si_unique_call 1397} {:cexpr "srp_map_desc:arg:rkey"} boogie_si_record_i32($i3);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.69, $p4);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} $i6 := __fswab64($i1);
    call {:si_unique_call 1399} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p7, $i6);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} $i8 := __fswab32($i3);
    call {:si_unique_call 1401} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p9, $i8);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} $i10 := __fswab32($i2);
    call {:si_unique_call 1403} {:cexpr "tmp___1"} boogie_si_record_i32($i10);
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p11, $i10);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(36, 1));
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.69, $p12);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, $i2);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(36, 1));
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $M.69 := $store.i32($M.69, $p15, $i14);
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.69, $p16);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p17, $mul.ref(1, 16));
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $M.69 := $store.ref($M.69, $p19, $p18);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(48, 1));
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.69, $p20);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, 1);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(48, 1));
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $M.69 := $store.i32($M.69, $p23, $i22);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    return;
}



const sg_next: ref;

axiom sg_next == $sub.ref(0, 611910);

procedure sg_next($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation sg_next($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} $p1 := external_alloc();
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const srp_finish_mapping: ref;

axiom srp_finish_mapping == $sub.ref(0, 612942);

procedure srp_finish_mapping($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.69, $CurrAddr, $M.16, assertsPassed;



implementation srp_finish_mapping($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i8;
  var $i12: i1;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i1;
  var $i27: i32;
  var $i29: i32;
  var $i28: i32;
  var $i19: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(96, 1));
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.69, $p4);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.69, $p8);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 1);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(168, 1));
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 1792)), $mul.ref(0, 1));
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 64)), $mul.ref(62, 1));
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.1, $p24);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i25);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} $i29 := srp_map_finish_fmr($p0, $p1);
    call {:si_unique_call 1409} {:cexpr "tmp___0"} boogie_si_record_i32($i29);
    assume {:verifier.code 0} true;
    $i28 := $i29;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i19 := $i28;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i19, 0);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i7 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb14:
    assume $i30 == 1;
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $M.69 := $store.i32($M.69, $p31, 0);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $M.69 := $store.i32($M.69, $p32, 0);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} $i27 := srp_map_finish_fr($p0, $p1);
    goto SeqInstr_550, SeqInstr_551;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  SeqInstr_552:
    call {:si_unique_call 1407} {:cexpr "tmp"} boogie_si_record_i32($i27);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $i28 := $i27;
    goto $bb13;

  SeqInstr_550:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $i11 := $M.68;
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.69, $p13);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.69, $p15);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.1, $p17);
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} srp_map_desc($p0, $i14, $i16, $i18);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb10;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const srp_map_finish_fr: ref;

axiom srp_map_finish_fr == $sub.ref(0, 613974);

procedure srp_map_finish_fr($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.69, $CurrAddr, $M.16, assertsPassed;



implementation srp_map_finish_fr($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i8;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $i89: i32;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $p93: ref;
  var $i94: i32;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i32;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $i16: i32;
  var cmdloc_dummy_var_64: [ref]i8;
  var cmdloc_dummy_var_65: [ref]i8;
  var cmdloc_dummy_var_66: [ref]i8;
  var cmdloc_dummy_var_67: [ref]i8;
  var cmdloc_dummy_var_68: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} $p3 := $alloc($mul.ref(96, $zext.i32.i64(1)));
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(96, 1));
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(168, 1));
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1792)), $mul.ref(0, 1));
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(128, 1));
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} $p13 := srp_fr_pool_get($p12);
    goto SeqInstr_553, SeqInstr_554;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  SeqInstr_555:
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p13, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.1, $p19);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} $i21 := ib_inc_rkey($i20);
    call {:si_unique_call 1414} {:cexpr "rkey"} boogie_si_record_i32($i21);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p13, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i21);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i8($i25);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} ib_update_fast_reg_key($p23, $i26);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p13, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.1, $p27);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.1, $p29);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.69, $p32);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.69, $p35);
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $i37 := $zext.i32.i64($i36);
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $i38 := $mul.i64($i37, 8);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_64 := $M.1;
    cmdloc_dummy_var_65 := $M.1;
    call {:si_unique_call 1416} cmdloc_dummy_var_66 := $memcpy.i8(cmdloc_dummy_var_64, cmdloc_dummy_var_65, $p31, $p34, $i38, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_66;
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p3);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_67 := $M.1;
    call {:si_unique_call 1417} cmdloc_dummy_var_68 := $memset.i8(cmdloc_dummy_var_67, $p39, 0, 96, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_68;
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(28, 1));
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p40, 11);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p41, 2);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.69, $p42);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(40, 1));
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p46, $i43);
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p13, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.1, $p47);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(40, 1));
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p51, $p48);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.69, $p52);
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(40, 1));
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p56, $i53);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p9, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.1, $p57);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} $i59 := __ilog2_u32($i58);
    call {:si_unique_call 1419} {:cexpr "tmp___66"} boogie_si_record_i32($i59);
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(40, 1));
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p62, $i59);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.69, $p63);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(40, 1));
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p67, $i64);
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(40, 1));
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p70, 7);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p13, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.1, $p71);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.1, $p73);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(40, 1));
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p77, $i74);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.69, $p79);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.69, $p82);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($p83, $mul.ref(1, 8));
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p85);
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $M.69 := $store.ref($M.69, $p86, $p84);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p80, $p13);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(44, 1));
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.69, $p87);
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $i89 := $add.i32($i88, 1);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(44, 1));
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $M.69 := $store.i32($M.69, $p90, $i89);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $i92 := $load.i64($M.69, $p91);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.69, $p93);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p13, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.1, $p95);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p96, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.1, $p97);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} srp_map_desc($p0, $i92, $i94, $i98);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(120, 1));
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.1, $p99);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} $i101 := ib_post_send($p100, $p3, $p2);
    call {:si_unique_call 1422} {:cexpr "tmp___68"} boogie_si_record_i32($i101);
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $i16 := $i101;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_553:
    assume !assertsPassed;
    return;
}



const srp_map_finish_fmr: ref;

axiom srp_map_finish_fmr == $sub.ref(0, 615006);

procedure srp_map_finish_fmr($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.69, $M.1;



implementation srp_map_finish_fmr($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $i12: i8;
  var $i13: i1;
  var $p14: ref;
  var $i15: i64;
  var $i16: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 488)), $mul.ref(128, 1));
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.69, $p5);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.69, $p7);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} $p9 := ib_fmr_pool_map_phys($p4, $p6, $i8, 0);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} $i11 := IS_ERR($p10);
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    call {:si_unique_call 1425} {:cexpr "tmp___0"} boogie_si_record_i8($i12);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.69, $p19);
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.69, $p22);
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p23, $mul.ref(1, 8));
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $M.69 := $store.ref($M.69, $p26, $p24);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p20, $p9);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(44, 1));
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.69, $p27);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i28, 1);
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(44, 1));
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $M.69 := $store.i32($M.69, $p30, $i29);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.69, $p31);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p9, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.1, $p33);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 40)), $mul.ref(36, 1));
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.1, $p35);
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} srp_map_desc($p0, 0, $i32, $i36);
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p9);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} $i15 := PTR_ERR($p14);
    call {:si_unique_call 1427} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i64.i32($i15);
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb3;
}



const ib_fmr_pool_map_phys: ref;

axiom ib_fmr_pool_map_phys == $sub.ref(0, 616038);

procedure ib_fmr_pool_map_phys($p0: ref, $p1: ref, $i2: i32, $i3: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ib_fmr_pool_map_phys($p0: ref, $p1: ref, $i2: i32, $i3: i64) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} {:cexpr "ib_fmr_pool_map_phys:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1430} {:cexpr "ib_fmr_pool_map_phys:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} $p4 := external_alloc();
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const srp_fr_pool_get: ref;

axiom srp_fr_pool_get == $sub.ref(0, 617070);

procedure srp_fr_pool_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation srp_fr_pool_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_96($p1);
    goto SeqInstr_556, SeqInstr_557;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  SeqInstr_558:
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} $i3 := list_empty($p2);
    call {:si_unique_call 1434} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $p10 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} ldv_spin_unlock_irqrestore_97($p11, $u0);
    goto SeqInstr_559, SeqInstr_560;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  SeqInstr_561:
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $r := $p10;
    return;

  SeqInstr_559:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} list_del($p9);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $p10 := $p7;
    goto $bb3;

  SeqInstr_556:
    assume !assertsPassed;
    return;
}



const ib_inc_rkey: ref;

axiom ib_inc_rkey == $sub.ref(0, 618102);

procedure ib_inc_rkey($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ib_inc_rkey($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} {:cexpr "ib_inc_rkey:arg:rkey"} boogie_si_record_i32($i0);
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $i1 := $add.i32($i0, 1);
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 255);
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, $sub.i32(0, 256));
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $i4 := $or.i32($i2, $i3);
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ib_update_fast_reg_key: ref;

axiom ib_update_fast_reg_key == $sub.ref(0, 619134);

procedure ib_update_fast_reg_key($p0: ref, $i1: i8);
  free requires assertsPassed;
  modifies $M.1;



implementation ib_update_fast_reg_key($p0: ref, $i1: i8)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} {:cexpr "ib_update_fast_reg_key:arg:newkey"} boogie_si_record_i8($i1);
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, $p2);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, $sub.i32(0, 256));
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i1);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i4, $i5);
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p7, $i6);
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.1, $p8);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, $sub.i32(0, 256));
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i1);
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i10, $i11);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p13, $i12);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_96: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_96 == $sub.ref(0, 620166);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_96($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_96($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_srp_fr_pool();
    goto SeqInstr_562, SeqInstr_563;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  SeqInstr_564:
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_562:
    assume !assertsPassed;
    return;
}



const srp_map_update_start: ref;

axiom srp_map_update_start == $sub.ref(0, 621198);

procedure srp_map_update_start($p0: ref, $p1: ref, $i2: i32, $i3: i64);
  free requires assertsPassed;
  modifies $M.69;



implementation srp_map_update_start($p0: ref, $p1: ref, $i2: i32, $i3: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} {:cexpr "srp_map_update_start:arg:sg_index"} boogie_si_record_i32($i2);
    call {:si_unique_call 1442} {:cexpr "srp_map_update_start:arg:dma_addr"} boogie_si_record_i64($i3);
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $M.69 := $store.ref($M.69, $p4, $p1);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(64, 1));
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $M.69 := $store.i32($M.69, $p5, $i2);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(72, 1));
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $M.69 := $store.i64($M.69, $p6, $i3);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    return;
}



const dma_map_sg_attrs: ref;

axiom dma_map_sg_attrs == $sub.ref(0, 622230);

procedure dma_map_sg_attrs($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dma_map_sg_attrs($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $i14: i1;
  var $p7: ref;
  var $i8: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} {:cexpr "dma_map_sg_attrs:arg:nents"} boogie_si_record_i32($i2);
    call {:si_unique_call 1444} {:cexpr "dma_map_sg_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} $p5 := get_dma_ops($p0);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32(0, $i2);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} $i15 := valid_dma_direction($i3);
    call {:si_unique_call 1451} {:cexpr "tmp___1"} boogie_si_record_i32($i15);
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 1453} {:cexpr "tmp___2"} boogie_si_record_i64($i19);
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(48, 1));
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    call {:si_unique_call 1455} $i23 := devirtbounce.20($p22, $p0, $p1, $i2, $i3, $p4);
    call {:si_unique_call 1456} {:cexpr "ents"} boogie_si_record_i32($i23);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} debug_dma_map_sg($p0, $p1, $i2, $i23, $i3);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb9:
    assume $i20 == 1;
    call {:si_unique_call 1454} devirtbounce.3(0, .str.44, 52, 12);
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $p7, $i8 := $p1, 0;
    goto $bb4;

  $bb4:
    call $p9, $p10, $i11, $i12, $p13, $i14, $p7, $i8 := dma_map_sg_attrs_loop_$bb4($i2, $p9, $p10, $i11, $i12, $p13, $i14, $p7, $i8);
    goto $bb4_last;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} $p9 := sg_virt($p7);
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.1, $p10);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} kmemcheck_mark_initialized($p9, $i11);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i8, 1);
    call {:si_unique_call 1448} {:cexpr "i"} boogie_si_record_i32($i12);
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} $p13 := sg_next($p7);
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, $i2);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $p7, $i8 := $p13, $i12;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6936;
}



const sg_virt: ref;

axiom sg_virt == $sub.ref(0, 623262);

procedure sg_virt($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation sg_virt($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} $p1 := sg_page($p0);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} $p2 := lowmem_page_address($p1);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.1, $p3);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const debug_dma_map_sg: ref;

axiom debug_dma_map_sg == $sub.ref(0, 624294);

procedure debug_dma_map_sg($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32);
  free requires assertsPassed;



implementation debug_dma_map_sg($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} {:cexpr "debug_dma_map_sg:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1461} {:cexpr "debug_dma_map_sg:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 1462} {:cexpr "debug_dma_map_sg:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    return;
}



const sg_page: ref;

axiom sg_page == $sub.ref(0, 625326);

procedure sg_page($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation sg_page($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.1, $p1);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 2271560481);
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 1464} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.1, $p8);
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i9);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $i12 := $and.i64($i11, 1);
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 1467} {:cexpr "tmp___0"} boogie_si_record_i64($i13);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.1, $p15);
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, $sub.i64(0, 4));
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $r := $p18;
    return;

  $bb4:
    assume $i14 == 1;
    call {:si_unique_call 1468} devirtbounce.3(0, .str.156, 99, 12);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb1:
    assume $i7 == 1;
    call {:si_unique_call 1465} devirtbounce.3(0, .str.156, 98, 12);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    assume false;
    return;
}



const lowmem_page_address: ref;

axiom lowmem_page_address == $sub.ref(0, 626358);

procedure lowmem_page_address($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation lowmem_page_address($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 24189255811072);
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $i3 := $sdiv.i64($i2, 64);
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $i4 := $shl.i64($i3, 12);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $sub.i64(0, 131941395333120));
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const __bad_percpu_size: ref;

axiom __bad_percpu_size == $sub.ref(0, 627390);

procedure __bad_percpu_size();



const srp_slave_configure: ref;

axiom srp_slave_configure == $sub.ref(0, 628422);

procedure srp_slave_configure($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation srp_slave_configure($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3480)), $mul.ref(0, 1));
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} $p3 := host_to_target($p2);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3480)), $mul.ref(8, 1));
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3480)), $mul.ref(232, 1));
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.1, $p6);
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $i8 := $sext.i8.i32($i7);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 464)), $mul.ref(268, 1));
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.1, $p10);
    call {:si_unique_call 1470} {:cexpr "__max2"} boogie_si_record_i32($i11);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $i12 := $ugt.i32(7500, $i11);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i13);
    call {:si_unique_call 1471} {:cexpr "timeout"} boogie_si_record_i64($i14);
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i14);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} blk_queue_rq_timeout($p5, $i15);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $i13 := 7500;
    goto $bb5;
}



const blk_queue_rq_timeout: ref;

axiom blk_queue_rq_timeout == $sub.ref(0, 629454);

procedure blk_queue_rq_timeout($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation blk_queue_rq_timeout($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} {:cexpr "blk_queue_rq_timeout:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_net_register_check_return_value_probe: ref;

axiom ldv_linux_net_register_check_return_value_probe == $sub.ref(0, 630486);

procedure ldv_linux_net_register_check_return_value_probe($i0: i32);
  free requires assertsPassed;
  modifies $M.70, assertsPassed;



implementation ldv_linux_net_register_check_return_value_probe($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} {:cexpr "ldv_linux_net_register_check_return_value_probe:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $i1 := $M.70;
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} ldv_assert_linux_net_register__wrong_return_value($i4);
    goto SeqInstr_565, SeqInstr_566;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  SeqInstr_567:
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_565:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_register_check_return_value_probe: ref;

axiom ldv_linux_usb_register_check_return_value_probe == $sub.ref(0, 631518);

procedure ldv_linux_usb_register_check_return_value_probe($i0: i32);
  free requires assertsPassed;
  modifies $M.71, assertsPassed;



implementation ldv_linux_usb_register_check_return_value_probe($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} {:cexpr "ldv_linux_usb_register_check_return_value_probe:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $i1 := $M.71;
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} ldv_assert_linux_usb_register__wrong_return_value($i4);
    goto SeqInstr_568, SeqInstr_569;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  SeqInstr_570:
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_568:
    assume !assertsPassed;
    return;
}



const ldv_post_probe: ref;

axiom ldv_post_probe == $sub.ref(0, 632550);

procedure ldv_post_probe($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_post_probe($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} {:cexpr "ldv_post_probe:arg:probe_ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 1482} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_filter_positive_int: ref;

axiom ldv_filter_positive_int == $sub.ref(0, 633582);

procedure ldv_filter_positive_int($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_filter_positive_int($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} {:cexpr "ldv_filter_positive_int:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $i1 := $sle.i32($i0, 0);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} ldv_assume($i2);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_assert_linux_usb_register__wrong_return_value: ref;

axiom ldv_assert_linux_usb_register__wrong_return_value == $sub.ref(0, 634614);

procedure ldv_assert_linux_usb_register__wrong_return_value($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_register__wrong_return_value($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} {:cexpr "ldv_assert_linux_usb_register__wrong_return_value:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1486} __VERIFIER_error();
    goto SeqInstr_571, SeqInstr_572;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  SeqInstr_573:
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_571:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_usb_register_reset_error_counter: ref;

axiom ldv_linux_usb_register_reset_error_counter == $sub.ref(0, 635646);

procedure ldv_linux_usb_register_reset_error_counter();
  free requires assertsPassed;
  modifies $M.71;



implementation ldv_linux_usb_register_reset_error_counter()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $M.71 := 0;
    call {:si_unique_call 1487} {:cexpr "ldv_linux_usb_register_probe_state"} boogie_si_record_i32(0);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    return;
}



const ldv_assert_linux_net_register__wrong_return_value: ref;

axiom ldv_assert_linux_net_register__wrong_return_value == $sub.ref(0, 636678);

procedure ldv_assert_linux_net_register__wrong_return_value($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_register__wrong_return_value($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} {:cexpr "ldv_assert_linux_net_register__wrong_return_value:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1489} __VERIFIER_error();
    goto SeqInstr_574, SeqInstr_575;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  SeqInstr_576:
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_574:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_net_register_reset_error_counter: ref;

axiom ldv_linux_net_register_reset_error_counter == $sub.ref(0, 637710);

procedure ldv_linux_net_register_reset_error_counter();
  free requires assertsPassed;
  modifies $M.70;



implementation ldv_linux_net_register_reset_error_counter()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $M.70 := 0;
    call {:si_unique_call 1490} {:cexpr "ldv_linux_net_register_probe_state"} boogie_si_record_i32(0);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    return;
}



const ldv_pre_probe: ref;

axiom ldv_pre_probe == $sub.ref(0, 638742);

procedure ldv_pre_probe();
  free requires assertsPassed;



implementation ldv_pre_probe()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    return;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 639774);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 1491} $r := $malloc($i0);
    return;
}



const scsi_add_host_with_dma: ref;

axiom scsi_add_host_with_dma == $sub.ref(0, 640806);

procedure scsi_add_host_with_dma($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_add_host_with_dma($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1492} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1493} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_find_next_bit_47: ref;

axiom ldv_find_next_bit_47 == $sub.ref(0, 641838);

procedure ldv_find_next_bit_47($p0: ref, $i1: i64, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_find_next_bit_47($p0: ref, $i1: i64, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} {:cexpr "ldv_find_next_bit_47:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1495} {:cexpr "ldv_find_next_bit_47:arg:offset"} boogie_si_record_i64($i2);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} $i3 := ldv_linux_lib_find_bit_find_next_bit($i1, $i2);
    goto SeqInstr_577, SeqInstr_578;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  SeqInstr_579:
    call {:si_unique_call 1497} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_577:
    assume !assertsPassed;
    return;
}



const ldv_linux_lib_find_bit_find_next_bit: ref;

axiom ldv_linux_lib_find_bit_find_next_bit == $sub.ref(0, 642870);

procedure ldv_linux_lib_find_bit_find_next_bit($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_lib_find_bit_find_next_bit($i0: i64, $i1: i64) returns ($r: i64)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} {:cexpr "ldv_linux_lib_find_bit_find_next_bit:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1499} {:cexpr "ldv_linux_lib_find_bit_find_next_bit:arg:offset"} boogie_si_record_i64($i1);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} $i2 := ldv_undef_ulong();
    call {:si_unique_call 1501} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $i3 := $ule.i64($i1, $i0);
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} ldv_assert_linux_lib_find_bit__offset_out_of_range($i4);
    goto SeqInstr_580, SeqInstr_581;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  SeqInstr_582:
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $i5 := $ule.i64($i2, $i0);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} ldv_assume($i6);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} ldv_assume(1);
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_580:
    assume !assertsPassed;
    return;
}



const ldv_undef_ulong: ref;

axiom ldv_undef_ulong == $sub.ref(0, 643902);

procedure ldv_undef_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation ldv_undef_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1505} $i0 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1506} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i0);
    call {:si_unique_call 1507} {:cexpr "tmp"} boogie_si_record_i64($i0);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_assert_linux_lib_find_bit__offset_out_of_range: ref;

axiom ldv_assert_linux_lib_find_bit__offset_out_of_range == $sub.ref(0, 644934);

procedure ldv_assert_linux_lib_find_bit__offset_out_of_range($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_lib_find_bit__offset_out_of_range($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} {:cexpr "ldv_assert_linux_lib_find_bit__offset_out_of_range:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1509} __VERIFIER_error();
    goto SeqInstr_583, SeqInstr_584;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  SeqInstr_585:
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_583:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const cpumask_check: ref;

axiom cpumask_check == $sub.ref(0, 645966);

procedure cpumask_check($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation cpumask_check($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $i22: i1;
  var $i23: i32;
  var $i24: i64;
  var vslice_dummy_var_150: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} {:cexpr "cpumask_check:arg:cpu"} boogie_si_record_i32($i0);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $i1 := $load.i32($M.1, nr_cpu_ids);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $i2 := $uge.i32($i0, $i1);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    call {:si_unique_call 1511} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i3);
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 1513} {:cexpr "tmp___1"} boogie_si_record_i64($i7);
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i3, 0);
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} vslice_dummy_var_150 := ldv__builtin_expect($i24, 0);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1(1);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $i10 := $xor.i1($i9, 1);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    call {:si_unique_call 1514} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i11);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 1516} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i11, 0);
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 1519} {:cexpr "tmp___0"} boogie_si_record_i64($i20);
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} warn_slowpath_null(.str.138, 116);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_find_next_bit_5: ref;

axiom ldv_find_next_bit_5 == $sub.ref(0, 646998);

procedure ldv_find_next_bit_5($p0: ref, $i1: i64, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_find_next_bit_5($p0: ref, $i1: i64, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} {:cexpr "ldv_find_next_bit_5:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1522} {:cexpr "ldv_find_next_bit_5:arg:offset"} boogie_si_record_i64($i2);
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} $i3 := ldv_linux_lib_find_bit_find_next_bit($i1, $i2);
    goto SeqInstr_586, SeqInstr_587;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  SeqInstr_588:
    call {:si_unique_call 1524} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_586:
    assume !assertsPassed;
    return;
}



const ldv_find_first_bit_46: ref;

axiom ldv_find_first_bit_46 == $sub.ref(0, 648030);

procedure ldv_find_first_bit_46($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_find_first_bit_46($p0: ref, $i1: i64) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} {:cexpr "ldv_find_first_bit_46:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} $i2 := ldv_linux_lib_find_bit_find_first_bit($i1);
    call {:si_unique_call 1527} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_linux_lib_find_bit_find_first_bit: ref;

axiom ldv_linux_lib_find_bit_find_first_bit == $sub.ref(0, 649062);

procedure ldv_linux_lib_find_bit_find_first_bit($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_linux_lib_find_bit_find_first_bit($i0: i64) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} {:cexpr "ldv_linux_lib_find_bit_find_first_bit:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} $i1 := ldv_undef_ulong();
    call {:si_unique_call 1530} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $i2 := $ule.i64($i1, $i0);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} ldv_assume($i3);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} ldv_assume(1);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const bitmap_weight: ref;

axiom bitmap_weight == $sub.ref(0, 650094);

procedure bitmap_weight($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation bitmap_weight($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} {:cexpr "bitmap_weight:arg:nbits"} boogie_si_record_i32($i1);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} $i2 := __bitmap_weight($p0, $i1);
    call {:si_unique_call 1535} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __bitmap_weight: ref;

axiom __bitmap_weight == $sub.ref(0, 651126);

procedure __bitmap_weight($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __bitmap_weight($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1536} {:cexpr "__bitmap_weight:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1537} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1538} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __nodes_weight: ref;

axiom __nodes_weight == $sub.ref(0, 652158);

procedure __nodes_weight($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __nodes_weight($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} {:cexpr "__nodes_weight:arg:nbits"} boogie_si_record_i32($i1);
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} $i4 := bitmap_weight($p3, $i1);
    call {:si_unique_call 1541} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const srp_remove_target: ref;

axiom srp_remove_target == $sub.ref(0, 653190);

procedure srp_remove_target($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.26, $M.27, $M.28, $M.29, $M.17, $M.10, $M.11, $CurrAddr, assertsPassed;



implementation srp_remove_target($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $i40: i32;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $i55: i32;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var vslice_dummy_var_151: i64;
  var vslice_dummy_var_152: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(92, 1));
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.1, $p1);
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 2);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    call {:si_unique_call 1542} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i4);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 1544} {:cexpr "tmp___1"} boogie_si_record_i64($i8);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i4, 0);
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} vslice_dummy_var_151 := ldv__builtin_expect($i25, 0);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.1, $p27);
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} srp_del_scsi_host_attr($p28);
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1));
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.1, $p29);
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} srp_rport_get($p30);
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.1, $p31);
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} srp_remove_host($p32);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.1, $p33);
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} ldv_scsi_remove_host_108($p34);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1));
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.1, $p35);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} srp_stop_rport_timers($p36);
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} srp_disconnect_target($p0);
    goto SeqInstr_589, SeqInstr_590;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  SeqInstr_591:
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.1, $p37);
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $i39 := $ult.i32(0, $i38);
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(280, 1));
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} vslice_dummy_var_152 := cancel_work_sync($p48);
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(184, 1));
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.1, $p50);
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} srp_rport_put($p51);
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.1, $p52);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $i54 := $ult.i32(0, $i53);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.1, $p63);
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} kfree($p65);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p66, $0.ref);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(168, 1));
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.1, $p67);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 1792)), $mul.ref(1448, 1));
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} ldv_spin_lock_109($p69);
    goto SeqInstr_595, SeqInstr_596;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  SeqInstr_597:
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(440, 1));
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} list_del($p70);
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(168, 1));
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.1, $p71);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 1792)), $mul.ref(1448, 1));
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} ldv_spin_unlock_110($p73);
    goto SeqInstr_598, SeqInstr_599;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  SeqInstr_600:
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.1, $p74);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} scsi_host_put($p75);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_598:
    assume !assertsPassed;
    return;

  SeqInstr_595:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i54 == 1;
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $i55 := 0;
    goto $bb21;

  $bb21:
    call $p56, $p57, $i58, $p59, $i60, $i61, $i62, $i55 := srp_remove_target_loop_$bb21($p0, $p52, $p56, $p57, $i58, $p59, $i60, $i61, $i62, $i55);
    goto $bb21_last;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.1, $p56);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i55);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p57, $mul.ref($i58, 488));
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} srp_free_req_data($p0, $p59);
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $i60 := $add.i32($i55, 1);
    call {:si_unique_call 1563} {:cexpr "i"} boogie_si_record_i32($i60);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.1, $p52);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $i62 := $ult.i32($i60, $i61);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i62 == 1);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb23:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $i55 := $i60;
    goto $bb23_dummy;

  $bb10:
    assume $i39 == 1;
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb13;

  $bb13:
    call $p41, $p42, $i43, $p44, $i45, $i46, $i47, $i40 := srp_remove_target_loop_$bb13($p0, $p37, $p41, $p42, $i43, $p44, $i45, $i46, $i47, $i40);
    goto $bb13_last;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.1, $p41);
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i40);
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p42, $mul.ref($i43, 488));
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} srp_free_ch_ib($p0, $p44);
    goto SeqInstr_592, SeqInstr_593;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  SeqInstr_594:
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i40, 1);
    call {:si_unique_call 1559} {:cexpr "i"} boogie_si_record_i32($i45);
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.1, $p37);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $i47 := $ult.i32($i45, $i46);
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i47 == 1);
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb15:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i40 := $i45;
    goto $bb15_dummy;

  SeqInstr_592:
    assume !assertsPassed;
    return;

  SeqInstr_589:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1(1);
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $i11 := $xor.i1($i10, 1);
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 1545} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i12);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 1547} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i12, 0);
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 1550} {:cexpr "tmp___0"} boogie_si_record_i64($i21);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} warn_slowpath_null(.str.20, 943);
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb23_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7249;

  $bb15_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7225;
}



const srp_del_scsi_host_attr: ref;

axiom srp_del_scsi_host_attr == $sub.ref(0, 654222);

procedure srp_del_scsi_host_attr($p0: ref);
  free requires assertsPassed;



implementation srp_del_scsi_host_attr($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p7: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3816)), $mul.ref(504, 1));
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 336)), $mul.ref(272, 1));
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $p7 := $p4;
    goto $bb4;

  $bb4:
    call $p8, $p9, $p10, $i11, $i12, $p7, $p13, $i14, $i15 := srp_del_scsi_host_attr_loop_$bb4($p0, $p8, $p9, $p10, $i11, $i12, $p7, $p13, $i14, $i15);
    goto $bb4_last;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p7);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 3816)), $mul.ref(2368, 1));
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p7);
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} device_remove_file($p8, $p9);
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p7, $mul.ref(1, 8));
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $p7 := $p10;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7292;
}



const srp_rport_get: ref;

axiom srp_rport_get == $sub.ref(0, 655254);

procedure srp_rport_get($p0: ref);
  free requires assertsPassed;



implementation srp_rport_get($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    return;
}



const srp_remove_host: ref;

axiom srp_remove_host == $sub.ref(0, 656286);

procedure srp_remove_host($p0: ref);
  free requires assertsPassed;



implementation srp_remove_host($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    return;
}



const ldv_scsi_remove_host_108: ref;

axiom ldv_scsi_remove_host_108 == $sub.ref(0, 657318);

procedure ldv_scsi_remove_host_108($p0: ref);
  free requires assertsPassed;



implementation ldv_scsi_remove_host_108($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} scsi_remove_host($p0);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} ldv_scsi_remove_host($0.ref, $p0);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    return;
}



const srp_stop_rport_timers: ref;

axiom srp_stop_rport_timers == $sub.ref(0, 658350);

procedure srp_stop_rport_timers($p0: ref);
  free requires assertsPassed;



implementation srp_stop_rport_timers($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    return;
}



const cancel_work_sync: ref;

axiom cancel_work_sync == $sub.ref(0, 659382);

procedure cancel_work_sync($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_work_sync($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1572} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1573} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const srp_rport_put: ref;

axiom srp_rport_put == $sub.ref(0, 660414);

procedure srp_rport_put($p0: ref);
  free requires assertsPassed;



implementation srp_rport_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    return;
}



const device_remove_file: ref;

axiom device_remove_file == $sub.ref(0, 661446);

procedure device_remove_file($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation device_remove_file($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    return;
}



const srp_start_tl_fail_timers: ref;

axiom srp_start_tl_fail_timers == $sub.ref(0, 662478);

procedure srp_start_tl_fail_timers($p0: ref);
  free requires assertsPassed;



implementation srp_start_tl_fail_timers($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    return;
}



const blk_init_tags: ref;

axiom blk_init_tags == $sub.ref(0, 663510);

procedure blk_init_tags($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation blk_init_tags($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} {:cexpr "blk_init_tags:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1575} {:cexpr "blk_init_tags:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} $p2 := external_alloc();
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const kstrdup: ref;

axiom kstrdup == $sub.ref(0, 664542);

procedure kstrdup($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kstrdup($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} {:cexpr "kstrdup:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} $p2 := external_alloc();
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const match_token: ref;

axiom match_token == $sub.ref(0, 665574);

procedure match_token($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation match_token($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1579} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1580} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const match_strdup: ref;

axiom match_strdup == $sub.ref(0, 666606);

procedure match_strdup($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation match_strdup($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} $p1 := external_alloc();
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const simple_strtoull: ref;

axiom simple_strtoull == $sub.ref(0, 667638);

procedure simple_strtoull($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation simple_strtoull($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1582} {:cexpr "simple_strtoull:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1583} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1584} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const strlen: ref;

axiom strlen == $sub.ref(0, 668670);

procedure strlen($p0: ref) returns ($r: i64);



const strlcpy: ref;

axiom strlcpy == $sub.ref(0, 669702);

procedure strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1585} {:cexpr "strlcpy:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1586} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1587} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const sscanf: ref;

axiom sscanf == $sub.ref(0, 670734);

procedure sscanf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);



const match_hex: ref;

axiom match_hex == $sub.ref(0, 671766);

procedure match_hex($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation match_hex($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1588} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1589} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const match_int: ref;

axiom match_int == $sub.ref(0, 672798);

procedure match_int($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation match_int($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1590} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1591} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const strsep: ref;

axiom strsep == $sub.ref(0, 673830);

procedure strsep($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation strsep($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} $p2 := external_alloc();
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_lock_add_target_mutex_of_srp_host: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_lock_add_target_mutex_of_srp_host == $sub.ref(0, 674862);

procedure ldv_linux_kernel_locking_mutex_mutex_lock_add_target_mutex_of_srp_host($p0: ref);
  free requires assertsPassed;
  modifies $M.65, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_lock_add_target_mutex_of_srp_host($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $i1 := $M.65;
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $i3 := $xor.i1($i2, 1);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i4);
    goto SeqInstr_601, SeqInstr_602;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  SeqInstr_603:
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1594} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_add_target_mutex_of_srp_host"} boogie_si_record_i8(1);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_601:
    assume !assertsPassed;
    return;
}



const scsi_host_alloc: ref;

axiom scsi_host_alloc == $sub.ref(0, 675894);

procedure scsi_host_alloc($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation scsi_host_alloc($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} {:cexpr "scsi_host_alloc:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1596} $p2 := external_alloc();
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const ldv_scsi_host_alloc: ref;

axiom ldv_scsi_host_alloc == $sub.ref(0, 676926);

procedure ldv_scsi_host_alloc($p0: ref, $p1: ref, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation ldv_scsi_host_alloc($p0: ref, $p1: ref, $i2: i32) returns ($r: ref)
{
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} {:cexpr "ldv_scsi_host_alloc:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} $i3 := ldv_undef_int();
    call {:si_unique_call 1599} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} $p5 := ldv_xmalloc(3800);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 3816)), $mul.ref(504, 1));
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p7, $p1);
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $p8 := $p5;
    goto $bb3;
}



const show_ibdev: ref;

axiom show_ibdev == $sub.ref(0, 677958);

procedure show_ibdev($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation show_ibdev($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 16), 1792)), $mul.ref(0, 1));
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 2488)), $mul.ref(8, 1));
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} $i11 := sprintf.ref.ref.ref($p2, .str.12, $p10);
    call {:si_unique_call 1602} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const show_port: ref;

axiom show_port == $sub.ref(0, 678990);

procedure show_port($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation show_port($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 16), 1792)), $mul.ref(8, 1));
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.1, $p5);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} $i8 := sprintf.ref.ref.i32($p2, .str.13, $i7);
    call {:si_unique_call 1604} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const show_id_ext: ref;

axiom show_id_ext == $sub.ref(0, 680022);

procedure show_id_ext($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation show_id_ext($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 2360), 3816));
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} $p5 := host_to_target($p4);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(128, 1));
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.1, $p6);
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} $i8 := __fswab64($i7);
    call {:si_unique_call 1607} {:cexpr "tmp___0"} boogie_si_record_i64($i8);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} $i9 := sprintf.ref.ref.i64($p2, .str.11, $i8);
    call {:si_unique_call 1609} {:cexpr "tmp___1"} boogie_si_record_i32($i9);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const show_ioc_guid: ref;

axiom show_ioc_guid == $sub.ref(0, 681054);

procedure show_ioc_guid($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation show_ioc_guid($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 2360), 3816));
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} $p5 := host_to_target($p4);
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(136, 1));
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.1, $p6);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} $i8 := __fswab64($i7);
    call {:si_unique_call 1612} {:cexpr "tmp___0"} boogie_si_record_i64($i8);
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} $i9 := sprintf.ref.ref.i64($p2, .str.11, $i8);
    call {:si_unique_call 1614} {:cexpr "tmp___1"} boogie_si_record_i32($i9);
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const show_service_id: ref;

axiom show_service_id == $sub.ref(0, 682086);

procedure show_service_id($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation show_service_id($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 2360), 3816));
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1615} $p5 := host_to_target($p4);
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(144, 1));
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.1, $p6);
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} $i8 := __fswab64($i7);
    call {:si_unique_call 1617} {:cexpr "tmp___0"} boogie_si_record_i64($i8);
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} $i9 := sprintf.ref.ref.i64($p2, .str.11, $i8);
    call {:si_unique_call 1619} {:cexpr "tmp___1"} boogie_si_record_i32($i9);
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const show_pkey: ref;

axiom show_pkey == $sub.ref(0, 683118);

procedure show_pkey($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation show_pkey($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i16;
  var $i10: i16;
  var $i11: i32;
  var $i12: i32;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 2360), 3816));
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} $p5 := host_to_target($p4);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(264, 1));
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.1, $p6);
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} $i10 := __fswab16($i9);
    call {:si_unique_call 1622} {:cexpr "tmp___0"} boogie_si_record_i16($i10);
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1623} $i12 := sprintf.ref.ref.i32($p2, .str.15, $i11);
    call {:si_unique_call 1624} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;
}



const show_sgid: ref;

axiom show_sgid == $sub.ref(0, 684150);

procedure show_sgid($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation show_sgid($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 2360), 3816));
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} $p5 := host_to_target($p4);
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(112, 1));
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} $i9 := sprintf.ref.ref.ref($p2, .str.14, $p8);
    call {:si_unique_call 1627} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const show_dgid: ref;

axiom show_dgid == $sub.ref(0, 685182);

procedure show_dgid($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation show_dgid($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 2360), 3816));
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} $p5 := host_to_target($p4);
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 488)), $mul.ref(240, 1)), $mul.ref(8, 1));
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1629} $i12 := sprintf.ref.ref.ref($p2, .str.14, $p11);
    call {:si_unique_call 1630} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;
}



const show_orig_dgid: ref;

axiom show_orig_dgid == $sub.ref(0, 686214);

procedure show_orig_dgid($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation show_orig_dgid($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 2360), 3816));
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1631} $p5 := host_to_target($p4);
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(248, 1));
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} $i9 := sprintf.ref.ref.ref($p2, .str.14, $p8);
    call {:si_unique_call 1633} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const show_req_lim: ref;

axiom show_req_lim == $sub.ref(0, 687246);

procedure show_req_lim($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation show_req_lim($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i10: i32;
  var $i11: i32;
  var $i23: i32;
  var $i9: i32;
  var $i24: i32;
  var $i25: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 2360), 3816));
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} $p5 := host_to_target($p4);
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.1, $p6);
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $i8 := $ult.i32(0, $i7);
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $i9 := 2147483647;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1637} $i24 := sprintf.ref.ref.i32($p2, .str.13, $i9);
    call {:si_unique_call 1638} {:cexpr "tmp___0"} boogie_si_record_i32($i24);
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $i10, $i11 := 2147483647, 0;
    goto $bb4;

  $bb4:
    call $p12, $p13, $i14, $p16, $i17, $i18, $i19, $i20, $i21, $i22, $i10, $i11, $i23 := show_req_lim_loop_$bb4($p5, $p6, $p12, $p13, $i14, $p16, $i17, $i18, $i19, $i20, $i21, $i22, $i10, $i11, $i23);
    goto $bb4_last;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i11);
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p13, $mul.ref($i14, 488)), $mul.ref(88, 1));
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.1, $p16);
    call {:si_unique_call 1635} {:cexpr "_min2"} boogie_si_record_i32($i17);
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i10, $i17);
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    $i19 := $i17;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i11, 1);
    call {:si_unique_call 1636} {:cexpr "i"} boogie_si_record_i32($i20);
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.1, $p6);
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    $i22 := $ult.i32($i20, $i21);
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $i23 := $i19;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    $i9 := $i23;
    goto $bb3;

  $bb9:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i10, $i11 := $i19, $i20;
    goto $bb9_dummy;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    $i19 := $i10;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7489;
}



const show_zero_req_lim: ref;

axiom show_zero_req_lim == $sub.ref(0, 688278);

procedure show_zero_req_lim($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation show_zero_req_lim($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 2360), 3816));
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} $p5 := host_to_target($p4);
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(276, 1));
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.1, $p6);
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} $i8 := sprintf.ref.ref.i32($p2, .str.13, $i7);
    call {:si_unique_call 1641} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const show_local_ib_port: ref;

axiom show_local_ib_port == $sub.ref(0, 689310);

procedure show_local_ib_port($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation show_local_ib_port($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 2360), 3816));
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} $p5 := host_to_target($p4);
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(168, 1));
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1792)), $mul.ref(8, 1));
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.1, $p8);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1643} $i11 := sprintf.ref.ref.i32($p2, .str.13, $i10);
    call {:si_unique_call 1644} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const show_local_ib_device: ref;

axiom show_local_ib_device == $sub.ref(0, 690342);

procedure show_local_ib_device($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation show_local_ib_device($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 2360), 3816));
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1645} $p5 := host_to_target($p4);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(168, 1));
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1792)), $mul.ref(0, 1));
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 2488)), $mul.ref(8, 1));
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} $i14 := sprintf.ref.ref.ref($p2, .str.12, $p13);
    call {:si_unique_call 1647} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const show_ch_count: ref;

axiom show_ch_count == $sub.ref(0, 691374);

procedure show_ch_count($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation show_ch_count($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 2360), 3816));
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} $p5 := host_to_target($p4);
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.1, $p6);
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} $i8 := sprintf.ref.ref.i32($p2, .str.13, $i7);
    call {:si_unique_call 1650} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const show_comp_vector: ref;

axiom show_comp_vector == $sub.ref(0, 692406);

procedure show_comp_vector($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation show_comp_vector($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 2360), 3816));
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} $p5 := host_to_target($p4);
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(240, 1));
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.1, $p6);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} $i8 := sprintf.ref.ref.i32($p2, .str.13, $i7);
    call {:si_unique_call 1653} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const show_tl_retry_count: ref;

axiom show_tl_retry_count == $sub.ref(0, 693438);

procedure show_tl_retry_count($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation show_tl_retry_count($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 2360), 3816));
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} $p5 := host_to_target($p4);
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(244, 1));
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.1, $p6);
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1655} $i8 := sprintf.ref.ref.i32($p2, .str.13, $i7);
    call {:si_unique_call 1656} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const show_cmd_sg_entries: ref;

axiom show_cmd_sg_entries == $sub.ref(0, 694470);

procedure show_cmd_sg_entries($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation show_cmd_sg_entries($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 2360), 3816));
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} $p5 := host_to_target($p4);
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(100, 1));
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.1, $p6);
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} $i8 := sprintf.ref.ref.i32($p2, .str.146, $i7);
    call {:si_unique_call 1659} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const show_allow_ext_sg: ref;

axiom show_allow_ext_sg == $sub.ref(0, 695502);

procedure show_allow_ext_sg($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation show_allow_ext_sg($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 2360), 3816));
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} $p5 := host_to_target($p4);
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 464)), $mul.ref(108, 1));
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.1, $p6);
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $p9 := (if $i8 == 1 then .str.144 else .str.145);
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} $i10 := sprintf.ref.ref.ref($p2, .str.12, $p9);
    call {:si_unique_call 1662} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;
}



const ldv_assert_linux_usb_gadget__class_registration_with_usb_gadget: ref;

axiom ldv_assert_linux_usb_gadget__class_registration_with_usb_gadget == $sub.ref(0, 696534);

procedure ldv_assert_linux_usb_gadget__class_registration_with_usb_gadget($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_gadget__class_registration_with_usb_gadget($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} {:cexpr "ldv_assert_linux_usb_gadget__class_registration_with_usb_gadget:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1664} __VERIFIER_error();
    goto SeqInstr_604, SeqInstr_605;

  SeqInstr_605:
    assume assertsPassed;
    goto SeqInstr_606;

  SeqInstr_606:
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_604:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_drivers_base_class__double_registration: ref;

axiom ldv_assert_linux_drivers_base_class__double_registration == $sub.ref(0, 697566);

procedure ldv_assert_linux_drivers_base_class__double_registration($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_drivers_base_class__double_registration($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} {:cexpr "ldv_assert_linux_drivers_base_class__double_registration:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1666} __VERIFIER_error();
    goto SeqInstr_607, SeqInstr_608;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  SeqInstr_609:
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_607:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_register_class: ref;

axiom ldv_register_class == $sub.ref(0, 698598);

procedure ldv_register_class() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.72, assertsPassed;



implementation ldv_register_class() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} $i0 := ldv_linux_drivers_base_class_register_class();
    goto SeqInstr_610, SeqInstr_611;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  SeqInstr_612:
    call {:si_unique_call 1668} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} $i1 := ldv_linux_usb_gadget_register_class();
    goto SeqInstr_613, SeqInstr_614;

  SeqInstr_614:
    assume assertsPassed;
    goto SeqInstr_615;

  SeqInstr_615:
    call {:si_unique_call 1670} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i0, $i1);
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1671} ldv_assume($i3);
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  SeqInstr_613:
    assume !assertsPassed;
    return;

  SeqInstr_610:
    assume !assertsPassed;
    return;
}



const ldv_linux_drivers_base_class_register_class: ref;

axiom ldv_linux_drivers_base_class_register_class == $sub.ref(0, 699630);

procedure ldv_linux_drivers_base_class_register_class() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.72, assertsPassed;



implementation ldv_linux_drivers_base_class_register_class() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} $i0 := ldv_undef_int_nonpositive();
    call {:si_unique_call 1673} {:cexpr "is_reg"} boogie_si_record_i32($i0);
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    $i2 := $M.72;
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} ldv_assert_linux_drivers_base_class__double_registration($i4);
    goto SeqInstr_616, SeqInstr_617;

  SeqInstr_617:
    assume assertsPassed;
    goto SeqInstr_618;

  SeqInstr_618:
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $M.72 := 1;
    call {:si_unique_call 1675} {:cexpr "ldv_linux_drivers_base_class_usb_gadget_class"} boogie_si_record_i32(1);
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_616:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_gadget_register_class: ref;

axiom ldv_linux_usb_gadget_register_class == $sub.ref(0, 700662);

procedure ldv_linux_usb_gadget_register_class() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_gadget_register_class() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} $i0 := ldv_undef_int_nonpositive();
    call {:si_unique_call 1677} {:cexpr "is_reg"} boogie_si_record_i32($i0);
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $i2 := $M.73;
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} ldv_assert_linux_usb_gadget__class_registration_with_usb_gadget($i4);
    goto SeqInstr_619, SeqInstr_620;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  SeqInstr_621:
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_619:
    assume !assertsPassed;
    return;
}



const ldv_undef_int_nonpositive: ref;

axiom ldv_undef_int_nonpositive == $sub.ref(0, 701694);

procedure ldv_undef_int_nonpositive() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int_nonpositive() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} $i0 := ldv_undef_int();
    call {:si_unique_call 1680} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $i1 := $sle.i32($i0, 0);
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1681} ldv_assume($i2);
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_EMGentry_exit_srp_cleanup_module_28_2: ref;

axiom ldv_EMGentry_exit_srp_cleanup_module_28_2 == $sub.ref(0, 702726);

procedure ldv_EMGentry_exit_srp_cleanup_module_28_2($p0: ref);
  free requires assertsPassed;
  modifies $M.72, assertsPassed;



implementation ldv_EMGentry_exit_srp_cleanup_module_28_2($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} srp_cleanup_module();
    goto SeqInstr_622, SeqInstr_623;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  SeqInstr_624:
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_622:
    assume !assertsPassed;
    return;
}



const srp_cleanup_module: ref;

axiom srp_cleanup_module == $sub.ref(0, 703758);

procedure srp_cleanup_module();
  free requires assertsPassed;
  modifies $M.72, assertsPassed;



implementation srp_cleanup_module()
{
  var $p0: ref;
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1683} ib_unregister_client(srp_client);
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} ib_sa_unregister_client(srp_sa_client);
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} ldv_class_unregister_153(srp_class);
    goto SeqInstr_625, SeqInstr_626;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  SeqInstr_627:
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $p0 := $M.58;
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} srp_release_transport($p0);
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    $p1 := $M.9;
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1687} destroy_workqueue($p1);
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_625:
    assume !assertsPassed;
    return;
}



const ib_unregister_client: ref;

axiom ib_unregister_client == $sub.ref(0, 704790);

procedure ib_unregister_client($p0: ref);
  free requires assertsPassed;



implementation ib_unregister_client($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    return;
}



const ib_sa_unregister_client: ref;

axiom ib_sa_unregister_client == $sub.ref(0, 705822);

procedure ib_sa_unregister_client($p0: ref);
  free requires assertsPassed;



implementation ib_sa_unregister_client($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    return;
}



const ldv_class_unregister_153: ref;

axiom ldv_class_unregister_153 == $sub.ref(0, 706854);

procedure ldv_class_unregister_153($p0: ref);
  free requires assertsPassed;
  modifies $M.72, assertsPassed;



implementation ldv_class_unregister_153($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} class_unregister($p0);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1689} ldv_linux_drivers_base_class_unregister_class();
    goto SeqInstr_628, SeqInstr_629;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  SeqInstr_630:
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} ldv_linux_usb_gadget_unregister_class();
    goto SeqInstr_631, SeqInstr_632;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  SeqInstr_633:
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_631:
    assume !assertsPassed;
    return;

  SeqInstr_628:
    assume !assertsPassed;
    return;
}



const srp_release_transport: ref;

axiom srp_release_transport == $sub.ref(0, 707886);

procedure srp_release_transport($p0: ref);
  free requires assertsPassed;



implementation srp_release_transport($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    return;
}



const destroy_workqueue: ref;

axiom destroy_workqueue == $sub.ref(0, 708918);

procedure destroy_workqueue($p0: ref);
  free requires assertsPassed;



implementation destroy_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    return;
}



const class_unregister: ref;

axiom class_unregister == $sub.ref(0, 709950);

procedure class_unregister($p0: ref);
  free requires assertsPassed;



implementation class_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_drivers_base_class_unregister_class: ref;

axiom ldv_linux_drivers_base_class_unregister_class == $sub.ref(0, 710982);

procedure ldv_linux_drivers_base_class_unregister_class();
  free requires assertsPassed;
  modifies $M.72, assertsPassed;



implementation ldv_linux_drivers_base_class_unregister_class()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    $i0 := $M.72;
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1691} ldv_assert_linux_drivers_base_class__double_deregistration($i2);
    goto SeqInstr_634, SeqInstr_635;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  SeqInstr_636:
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    $M.72 := 0;
    call {:si_unique_call 1692} {:cexpr "ldv_linux_drivers_base_class_usb_gadget_class"} boogie_si_record_i32(0);
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_634:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_gadget_unregister_class: ref;

axiom ldv_linux_usb_gadget_unregister_class == $sub.ref(0, 712014);

procedure ldv_linux_usb_gadget_unregister_class();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_gadget_unregister_class()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    $i0 := $M.73;
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1693} ldv_assert_linux_usb_gadget__class_deregistration_with_usb_gadget($i2);
    goto SeqInstr_637, SeqInstr_638;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  SeqInstr_639:
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_637:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_usb_gadget__class_deregistration_with_usb_gadget: ref;

axiom ldv_assert_linux_usb_gadget__class_deregistration_with_usb_gadget == $sub.ref(0, 713046);

procedure ldv_assert_linux_usb_gadget__class_deregistration_with_usb_gadget($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_gadget__class_deregistration_with_usb_gadget($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} {:cexpr "ldv_assert_linux_usb_gadget__class_deregistration_with_usb_gadget:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1695} __VERIFIER_error();
    goto SeqInstr_640, SeqInstr_641;

  SeqInstr_641:
    assume assertsPassed;
    goto SeqInstr_642;

  SeqInstr_642:
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_640:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_drivers_base_class__double_deregistration: ref;

axiom ldv_assert_linux_drivers_base_class__double_deregistration == $sub.ref(0, 714078);

procedure ldv_assert_linux_drivers_base_class__double_deregistration($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_drivers_base_class__double_deregistration($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} {:cexpr "ldv_assert_linux_drivers_base_class__double_deregistration:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1697} __VERIFIER_error();
    goto SeqInstr_643, SeqInstr_644;

  SeqInstr_644:
    assume assertsPassed;
    goto SeqInstr_645;

  SeqInstr_645:
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_643:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_EMGentry_init_srp_init_module_28_17: ref;

axiom ldv_EMGentry_init_srp_init_module_28_17 == $sub.ref(0, 715110);

procedure ldv_EMGentry_init_srp_init_module_28_17($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.59, $M.60, $M.9, $M.58, $M.72, $CurrAddr, assertsPassed;



implementation ldv_EMGentry_init_srp_init_module_28_17($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} $i1 := srp_init_module();
    goto SeqInstr_646, SeqInstr_647;

  SeqInstr_647:
    assume assertsPassed;
    goto SeqInstr_648;

  SeqInstr_648:
    call {:si_unique_call 1699} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_646:
    assume !assertsPassed;
    return;
}



const srp_init_module: ref;

axiom srp_init_module == $sub.ref(0, 716142);

procedure srp_init_module() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.59, $M.60, $M.9, $M.58, $M.72, $CurrAddr, assertsPassed;



implementation srp_init_module() returns ($r: i32)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $i32: i32;
  var $i33: i1;
  var $i36: i32;
  var $i37: i1;
  var $i26: i32;
  var $i35: i32;
  var $p39: ref;
  var $i31: i32;
  var $p40: ref;
  var vslice_dummy_var_153: i32;
  var vslice_dummy_var_154: i32;
  var vslice_dummy_var_155: i32;
  var vslice_dummy_var_156: i32;
  var vslice_dummy_var_157: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $i1 := $trunc.i8.i1(0);
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.74;
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i8 := $M.59;
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i10 := $M.59;
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    $i11 := $ugt.i32($i10, 255);
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i13 := $M.60;
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i14 == 1);
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $i16 := $M.60;
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    $i17 := $M.59;
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $i18 := $ult.i32($i16, $i17);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} $p22 := __alloc_workqueue_key.ref.i32.i32.ref.ref.ref(.str.7, 8, 1, $p0, .str.6, .str.8);
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    $M.9 := $p22;
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    $p23 := $M.9;
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1711} $p27 := srp_attach_transport(ib_srp_transport_functions);
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    $M.58 := $p27;
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    $p28 := $M.58;
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i29, 0);
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1713} $i32 := ldv_register_class();
    goto SeqInstr_649, SeqInstr_650;

  SeqInstr_650:
    assume assertsPassed;
    goto SeqInstr_651;

  SeqInstr_651:
    call {:si_unique_call 1714} {:cexpr "ret"} boogie_si_record_i32($i32);
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} ib_sa_register_client(srp_sa_client);
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1718} $i36 := ib_register_client(srp_client);
    call {:si_unique_call 1719} {:cexpr "ret"} boogie_si_record_i32($i36);
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i26 := $i36;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb34:
    assume $i37 == 1;
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} vslice_dummy_var_157 := printk.ref(.str.10);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1721} ib_sa_unregister_client(srp_sa_client);
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} ldv_class_unregister_152(srp_class);
    goto SeqInstr_652, SeqInstr_653;

  SeqInstr_653:
    assume assertsPassed;
    goto SeqInstr_654;

  SeqInstr_654:
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $i35 := $i36;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    $p39 := $M.58;
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1716} srp_release_transport($p39);
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    $i31 := $i35;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    $p40 := $M.9;
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} destroy_workqueue($p40);
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    $i26 := $i31;
    goto $bb24;

  SeqInstr_652:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i33 == 1;
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} vslice_dummy_var_156 := printk.ref(.str.9);
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    $i35 := $i32;
    goto $bb32;

  SeqInstr_649:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i30 == 1;
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 12);
    goto $bb28;

  $bb22:
    assume $i25 == 1;
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 12);
    goto $bb24;

  $bb19:
    assume $i18 == 1;
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    $i19 := $M.59;
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1709} vslice_dummy_var_155 := printk.ref.i32(.str.5, $i19);
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    $i21 := $M.59;
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $M.60 := $i21;
    call {:si_unique_call 1710} {:cexpr "indirect_sg_entries"} boogie_si_record_i32($i21);
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i14 == 1;
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $i15 := $M.59;
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    $M.60 := $i15;
    call {:si_unique_call 1707} {:cexpr "indirect_sg_entries"} boogie_si_record_i32($i15);
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1705} vslice_dummy_var_154 := printk.ref(.str.4);
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $M.59 := 255;
    call {:si_unique_call 1706} {:cexpr "cmd_sg_entries"} boogie_si_record_i32(255);
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i9 == 1;
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $M.59 := 12;
    call {:si_unique_call 1704} {:cexpr "cmd_sg_entries"} boogie_si_record_i32(12);
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} vslice_dummy_var_153 := printk.ref(.str.3);
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    $i5 := $M.59;
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i6 == 1;
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    $i7 := $M.74;
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $M.59 := $i7;
    call {:si_unique_call 1703} {:cexpr "cmd_sg_entries"} boogie_si_record_i32($i7);
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} __compiletime_assert_3537();
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __compiletime_assert_3537: ref;

axiom __compiletime_assert_3537 == $sub.ref(0, 717174);

procedure __compiletime_assert_3537();
  free requires assertsPassed;



implementation __compiletime_assert_3537()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    return;
}



const __alloc_workqueue_key: ref;

axiom __alloc_workqueue_key == $sub.ref(0, 718206);

procedure __alloc_workqueue_key.ref.i32.i32.ref.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref, p.5: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_workqueue_key.ref.i32.i32.ref.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref, p.5: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1723} {:cexpr "__alloc_workqueue_key:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1724} {:cexpr "__alloc_workqueue_key:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} $p5 := external_alloc();
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const srp_attach_transport: ref;

axiom srp_attach_transport == $sub.ref(0, 719238);

procedure srp_attach_transport($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation srp_attach_transport($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} $p1 := external_alloc();
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ib_sa_register_client: ref;

axiom ib_sa_register_client == $sub.ref(0, 720270);

procedure ib_sa_register_client($p0: ref);
  free requires assertsPassed;



implementation ib_sa_register_client($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    return;
}



const ib_register_client: ref;

axiom ib_register_client == $sub.ref(0, 721302);

procedure ib_register_client($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ib_register_client($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1727} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1728} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_class_unregister_152: ref;

axiom ldv_class_unregister_152 == $sub.ref(0, 722334);

procedure ldv_class_unregister_152($p0: ref);
  free requires assertsPassed;
  modifies $M.72, assertsPassed;



implementation ldv_class_unregister_152($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1729} class_unregister($p0);
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} ldv_linux_drivers_base_class_unregister_class();
    goto SeqInstr_655, SeqInstr_656;

  SeqInstr_656:
    assume assertsPassed;
    goto SeqInstr_657;

  SeqInstr_657:
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1731} ldv_linux_usb_gadget_unregister_class();
    goto SeqInstr_658, SeqInstr_659;

  SeqInstr_659:
    assume assertsPassed;
    goto SeqInstr_660;

  SeqInstr_660:
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_658:
    assume !assertsPassed;
    return;

  SeqInstr_655:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_deregister_dummy_resourceless_instance_10_28_4: ref;

axiom ldv_dispatch_deregister_dummy_resourceless_instance_10_28_4 == $sub.ref(0, 723366);

procedure ldv_dispatch_deregister_dummy_resourceless_instance_10_28_4();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_dummy_resourceless_instance_10_28_4()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_dummy_resourceless_instance_7_28_5: ref;

axiom ldv_dispatch_deregister_dummy_resourceless_instance_7_28_5 == $sub.ref(0, 724398);

procedure ldv_dispatch_deregister_dummy_resourceless_instance_7_28_5();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_dummy_resourceless_instance_7_28_5()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_dummy_resourceless_instance_8_28_6: ref;

axiom ldv_dispatch_deregister_dummy_resourceless_instance_8_28_6 == $sub.ref(0, 725430);

procedure ldv_dispatch_deregister_dummy_resourceless_instance_8_28_6();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_dummy_resourceless_instance_8_28_6()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_dummy_resourceless_instance_9_28_7: ref;

axiom ldv_dispatch_deregister_dummy_resourceless_instance_9_28_7 == $sub.ref(0, 726462);

procedure ldv_dispatch_deregister_dummy_resourceless_instance_9_28_7();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_dummy_resourceless_instance_9_28_7()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_platform_instance_5_28_8: ref;

axiom ldv_dispatch_deregister_platform_instance_5_28_8 == $sub.ref(0, 727494);

procedure ldv_dispatch_deregister_platform_instance_5_28_8();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_platform_instance_5_28_8()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_pm_deregister_1_5: ref;

axiom ldv_dispatch_pm_deregister_1_5 == $sub.ref(0, 728526);

procedure ldv_dispatch_pm_deregister_1_5();
  free requires assertsPassed;



implementation ldv_dispatch_pm_deregister_1_5()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_pm_register_1_6: ref;

axiom ldv_dispatch_pm_register_1_6 == $sub.ref(0, 729558);

procedure ldv_dispatch_pm_register_1_6();
  free requires assertsPassed;
  modifies $CurrAddr, $M.1, $M.40, $M.41, $M.42, $M.14, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.15, $M.26, $M.27, $M.28, $M.29, $M.66, $M.67, assertsPassed, $M.25, $M.17, $M.10, $M.12, $M.11, $M.18, $M.19, $M.16;



implementation ldv_dispatch_pm_register_1_6()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} $p0 := ldv_xmalloc(4);
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} ldv_pm_pm_ops_instance_0($p2);
    goto SeqInstr_661, SeqInstr_662;

  SeqInstr_662:
    assume assertsPassed;
    goto SeqInstr_663;

  SeqInstr_663:
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_661:
    assume !assertsPassed;
    return;
}



const ldv_pm_pm_ops_instance_0: ref;

axiom ldv_pm_pm_ops_instance_0 == $sub.ref(0, 730590);

procedure ldv_pm_pm_ops_instance_0($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.40, $M.41, $M.42, $M.14, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.15, $M.26, $M.27, $M.28, $M.29, $M.66, $M.67, assertsPassed, $CurrAddr, $M.25, $M.17, $M.10, $M.12, $M.11, $M.18, $M.19, $M.16;



implementation ldv_pm_pm_ops_instance_0($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i1;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i64;
  var $i96: i1;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i64;
  var $i102: i1;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i64;
  var $i114: i1;
  var $p115: ref;
  var $p116: ref;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $p120: ref;
  var $i121: i64;
  var $i122: i1;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i64;
  var $i128: i1;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $i133: i64;
  var $i134: i1;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i64;
  var $i140: i1;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i64;
  var $i146: i1;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $i151: i64;
  var $i152: i1;
  var $p153: ref;
  var $p154: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i1, $i2, $i3, $i4, $i5, $p7, $p8, $i9, $i10, $p11, $p12, $p13, $p14, $i15, $i16, $p17, $p18, $p19, $p20, $i21, $i22, $p23, $p24, $p25, $p26, $i27, $i28, $p29, $p30, $i31, $i32, $i33, $i34, $p35, $p36, $i37, $i38, $p39, $p40, $i41, $i42, $p43, $p44, $i45, $i46, $p47, $p48, $p49, $p50, $i51, $i52, $p53, $p54, $p55, $p56, $i57, $i58, $p59, $p60, $p61, $p62, $i63, $i64, $p65, $p66, $p67, $p68, $i69, $i70, $p71, $p72, $p73, $p74, $i75, $i76, $p77, $p78, $i79, $i80, $p81, $p82, $i83, $i84, $p85, $p86, $p87, $p88, $i89, $i90, $p91, $p92, $p93, $p94, $i95, $i96, $p97, $p98, $p99, $p100, $i101, $i102, $p103, $p104, $p105, $p106, $i107, $i108, $p109, $p110, $p111, $p112, $i113, $i114, $p115, $p116, $i117, $i118, $p119, $p120, $i121, $i122, $p123, $p124, $p125, $p126, $i127, $i128, $p129, $p130, $p131, $p132, $i133, $i134, $p135, $p136, $p137, $p138, $i139, $i140, $p141, $p142, $p143, $p144, $i145, $i146, $p147, $p148, $p149, $p150, $i151, $i152, $p153, $p154 := ldv_pm_pm_ops_instance_0_loop_$bb1($i1, $i2, $i3, $i4, $i5, $p7, $p8, $i9, $i10, $p11, $p12, $p13, $p14, $i15, $i16, $p17, $p18, $p19, $p20, $i21, $i22, $p23, $p24, $p25, $p26, $i27, $i28, $p29, $p30, $i31, $i32, $i33, $i34, $p35, $p36, $i37, $i38, $p39, $p40, $i41, $i42, $p43, $p44, $i45, $i46, $p47, $p48, $p49, $p50, $i51, $i52, $p53, $p54, $p55, $p56, $i57, $i58, $p59, $p60, $p61, $p62, $i63, $i64, $p65, $p66, $p67, $p68, $i69, $i70, $p71, $p72, $p73, $p74, $i75, $i76, $p77, $p78, $i79, $i80, $p81, $p82, $i83, $i84, $p85, $p86, $p87, $p88, $i89, $i90, $p91, $p92, $p93, $p94, $i95, $i96, $p97, $p98, $p99, $p100, $i101, $i102, $p103, $p104, $p105, $p106, $i107, $i108, $p109, $p110, $p111, $p112, $i113, $i114, $p115, $p116, $i117, $i118, $p119, $p120, $i121, $i122, $p123, $p124, $p125, $p126, $i127, $i128, $p129, $p130, $p131, $p132, $i133, $i134, $p135, $p136, $p137, $p138, $i139, $i140, $p141, $p142, $p143, $p144, $i145, $i146, $p147, $p148, $p149, $p150, $i151, $i152, $p153, $p154);
    goto $bb1_last;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 2);
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 3);
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    $i5 := $i1;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 4);
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} ldv_stop();
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume $i6 == 1;
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb10:
    assume $i4 == 1;
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.81, $p25);
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} $i31 := ldv_undef_int();
    call {:si_unique_call 1742} {:cexpr "tmp___0"} boogie_si_record_i32($i31);
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 1);
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i31, 2);
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i31, 3);
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1743} ldv_stop();
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.119, $p149);
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    $i151 := $p2i.ref.i64($p150);
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    $i152 := $ne.i64($i151, 0);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb22_dummy;

  $bb110:
    assume $i152 == 1;
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    $p154 := $load.ref($M.120, $p153);
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} ldv_pm_ops_instance_complete_0_3($p154, $u14);
    goto SeqInstr_730, SeqInstr_731;

  SeqInstr_731:
    assume assertsPassed;
    goto SeqInstr_732;

  SeqInstr_732:
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    goto $bb112;

  SeqInstr_730:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i34 == 1;
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.107, $p111);
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    $i113 := $p2i.ref.i64($p112);
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    $i114 := $ne.i64($i113, 0);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1761} $i117 := ldv_undef_int();
    call {:si_unique_call 1762} {:cexpr "tmp___3"} boogie_si_record_i32($i117);
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i117, 0);
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i118 == 1);
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.113, $p131);
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    $i133 := $p2i.ref.i64($p132);
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    $i134 := $ne.i64($i133, 0);
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.115, $p137);
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    $i139 := $p2i.ref.i64($p138);
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    $i140 := $ne.i64($i139, 0);
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.117, $p143);
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    $i145 := $p2i.ref.i64($p144);
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    $i146 := $ne.i64($i145, 0);
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb106:
    assume $i146 == 1;
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.118, $p147);
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1767} ldv_pm_ops_instance_restore_0_4($p148, $u14);
    goto SeqInstr_727, SeqInstr_728;

  SeqInstr_728:
    assume assertsPassed;
    goto SeqInstr_729;

  SeqInstr_729:
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    goto $bb108;

  SeqInstr_727:
    assume !assertsPassed;
    return;

  $bb103:
    assume $i140 == 1;
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.116, $p141);
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} ldv_pm_ops_instance_restore_noirq_0_5($p142, $u14);
    goto SeqInstr_724, SeqInstr_725;

  SeqInstr_725:
    assume assertsPassed;
    goto SeqInstr_726;

  SeqInstr_726:
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    goto $bb105;

  SeqInstr_724:
    assume !assertsPassed;
    return;

  $bb100:
    assume $i134 == 1;
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.114, $p135);
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1765} ldv_pm_ops_instance_poweroff_noirq_0_6($p136, $u14);
    goto SeqInstr_721, SeqInstr_722;

  SeqInstr_722:
    assume assertsPassed;
    goto SeqInstr_723;

  SeqInstr_723:
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    goto $bb102;

  SeqInstr_721:
    assume !assertsPassed;
    return;

  $bb91:
    assume $i118 == 1;
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.109, $p119);
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    $i121 := $p2i.ref.i64($p120);
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    $i122 := $ne.i64($i121, 0);
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.111, $p125);
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $i127 := $p2i.ref.i64($p126);
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    $i128 := $ne.i64($i127, 0);
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb96:
    assume $i128 == 1;
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.112, $p129);
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} ldv_pm_ops_instance_restore_early_0_7($p130, $u14);
    goto SeqInstr_718, SeqInstr_719;

  SeqInstr_719:
    assume assertsPassed;
    goto SeqInstr_720;

  SeqInstr_720:
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    goto $bb98;

  SeqInstr_718:
    assume !assertsPassed;
    return;

  $bb93:
    assume $i122 == 1;
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.110, $p123);
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1763} ldv_pm_ops_instance_poweroff_late_0_8($p124, $u14);
    goto SeqInstr_715, SeqInstr_716;

  SeqInstr_716:
    assume assertsPassed;
    goto SeqInstr_717;

  SeqInstr_717:
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    goto $bb95;

  SeqInstr_715:
    assume !assertsPassed;
    return;

  $bb88:
    assume $i114 == 1;
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.108, $p115);
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} ldv_pm_ops_instance_poweroff_0_9($p116, $u14);
    goto SeqInstr_712, SeqInstr_713;

  SeqInstr_713:
    assume assertsPassed;
    goto SeqInstr_714;

  SeqInstr_714:
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    goto $bb90;

  SeqInstr_712:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i33 == 1;
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.95, $p73);
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p74);
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    $i76 := $ne.i64($i75, 0);
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} $i79 := ldv_undef_int();
    call {:si_unique_call 1754} {:cexpr "tmp___2"} boogie_si_record_i32($i79);
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i80 == 1);
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.101, $p93);
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    $i95 := $p2i.ref.i64($p94);
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $i96 := $ne.i64($i95, 0);
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.103, $p99);
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    $i101 := $p2i.ref.i64($p100);
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $i102 := $ne.i64($i101, 0);
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.105, $p105);
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p106);
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    $i108 := $ne.i64($i107, 0);
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb85:
    assume $i108 == 1;
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.106, $p109);
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} ldv_pm_ops_instance_thaw_0_10($p110, $u14);
    goto SeqInstr_709, SeqInstr_710;

  SeqInstr_710:
    assume assertsPassed;
    goto SeqInstr_711;

  SeqInstr_711:
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    goto $bb87;

  SeqInstr_709:
    assume !assertsPassed;
    return;

  $bb82:
    assume $i102 == 1;
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.104, $p103);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} ldv_pm_ops_instance_thaw_noirq_0_11($p104, $u14);
    goto SeqInstr_706, SeqInstr_707;

  SeqInstr_707:
    assume assertsPassed;
    goto SeqInstr_708;

  SeqInstr_708:
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_706:
    assume !assertsPassed;
    return;

  $bb79:
    assume $i96 == 1;
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.102, $p97);
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1757} ldv_pm_ops_instance_freeze_noirq_0_12($p98, $u14);
    goto SeqInstr_703, SeqInstr_704;

  SeqInstr_704:
    assume assertsPassed;
    goto SeqInstr_705;

  SeqInstr_705:
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    goto $bb81;

  SeqInstr_703:
    assume !assertsPassed;
    return;

  $bb70:
    assume $i80 == 1;
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.97, $p81);
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p82);
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    $i84 := $ne.i64($i83, 0);
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.99, $p87);
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p88);
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    $i90 := $ne.i64($i89, 0);
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb75:
    assume $i90 == 1;
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.100, $p91);
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} ldv_pm_ops_instance_thaw_early_0_13($p92, $u14);
    goto SeqInstr_700, SeqInstr_701;

  SeqInstr_701:
    assume assertsPassed;
    goto SeqInstr_702;

  SeqInstr_702:
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    goto $bb77;

  SeqInstr_700:
    assume !assertsPassed;
    return;

  $bb72:
    assume $i84 == 1;
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.98, $p85);
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1755} ldv_pm_ops_instance_freeze_late_0_14($p86, $u14);
    goto SeqInstr_697, SeqInstr_698;

  SeqInstr_698:
    assume assertsPassed;
    goto SeqInstr_699;

  SeqInstr_699:
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    goto $bb74;

  SeqInstr_697:
    assume !assertsPassed;
    return;

  $bb67:
    assume $i76 == 1;
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.96, $p77);
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1752} ldv_pm_ops_instance_freeze_0_15($p78, $u14);
    goto SeqInstr_694, SeqInstr_695;

  SeqInstr_695:
    assume assertsPassed;
    goto SeqInstr_696;

  SeqInstr_696:
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    goto $bb69;

  SeqInstr_694:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i32 == 1;
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.83, $p35);
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} $i41 := ldv_undef_int();
    call {:si_unique_call 1746} {:cexpr "tmp___1"} boogie_si_record_i32($i41);
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i42 == 1);
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.89, $p55);
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.91, $p61);
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.93, $p67);
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb63:
    assume $i70 == 1;
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.94, $p71);
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1751} ldv_pm_ops_instance_resume_0_16($p72, $u14);
    goto SeqInstr_691, SeqInstr_692;

  SeqInstr_692:
    assume assertsPassed;
    goto SeqInstr_693;

  SeqInstr_693:
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    goto $bb65;

  SeqInstr_691:
    assume !assertsPassed;
    return;

  $bb60:
    assume $i64 == 1;
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.92, $p65);
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1750} ldv_pm_ops_instance_resume_early_0_17($p66, $u14);
    goto SeqInstr_688, SeqInstr_689;

  SeqInstr_689:
    assume assertsPassed;
    goto SeqInstr_690;

  SeqInstr_690:
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    goto $bb62;

  SeqInstr_688:
    assume !assertsPassed;
    return;

  $bb57:
    assume $i58 == 1;
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.90, $p59);
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} ldv_pm_ops_instance_suspend_late_0_18($p60, $u14);
    goto SeqInstr_685, SeqInstr_686;

  SeqInstr_686:
    assume assertsPassed;
    goto SeqInstr_687;

  SeqInstr_687:
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    goto $bb59;

  SeqInstr_685:
    assume !assertsPassed;
    return;

  $bb48:
    assume $i42 == 1;
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.85, $p43);
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(120, 1));
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.87, $p49);
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb53:
    assume $i52 == 1;
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(120, 1));
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.88, $p53);
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} ldv_pm_ops_instance_resume_noirq_0_19($p54, $u14);
    goto SeqInstr_682, SeqInstr_683;

  SeqInstr_683:
    assume assertsPassed;
    goto SeqInstr_684;

  SeqInstr_684:
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    goto $bb55;

  SeqInstr_682:
    assume !assertsPassed;
    return;

  $bb50:
    assume $i46 == 1;
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.86, $p47);
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} ldv_pm_ops_instance_suspend_noirq_0_20($p48, $u14);
    goto SeqInstr_679, SeqInstr_680;

  SeqInstr_680:
    assume assertsPassed;
    goto SeqInstr_681;

  SeqInstr_681:
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_679:
    assume !assertsPassed;
    return;

  $bb45:
    assume $i38 == 1;
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.84, $p39);
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} ldv_pm_ops_instance_suspend_0_21($p40, $u14);
    goto SeqInstr_676, SeqInstr_677;

  SeqInstr_677:
    assume assertsPassed;
    goto SeqInstr_678;

  SeqInstr_678:
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    goto $bb47;

  SeqInstr_676:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i28 == 1;
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.82, $p29);
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} ldv_pm_ops_instance_prepare_0_22($p30, $u14);
    goto SeqInstr_673, SeqInstr_674;

  SeqInstr_674:
    assume assertsPassed;
    goto SeqInstr_675;

  SeqInstr_675:
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_673:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.77, $p13);
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.79, $p19);
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb26:
    assume $i22 == 1;
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.80, $p23);
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} ldv_pm_ops_instance_runtime_resume_0_24($p24, $u14);
    goto SeqInstr_670, SeqInstr_671;

  SeqInstr_671:
    assume assertsPassed;
    goto SeqInstr_672;

  SeqInstr_672:
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_670:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i16 == 1;
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.78, $p17);
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} ldv_pm_ops_instance_runtime_suspend_0_25($p18, $u14);
    goto SeqInstr_667, SeqInstr_668;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  SeqInstr_669:
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_667:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i2 == 1;
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.75, $p7);
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i10 == 1;
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.76, $p11);
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1737} ldv_pm_ops_instance_runtime_idle_0_27($p12, $u14);
    goto SeqInstr_664, SeqInstr_665;

  SeqInstr_665:
    assume assertsPassed;
    goto SeqInstr_666;

  SeqInstr_666:
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_664:
    assume !assertsPassed;
    return;

  $bb22_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} $i1 := ldv_undef_int();
    call {:si_unique_call 1735} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7828;
}



const ldv_pm_ops_instance_runtime_idle_0_27: ref;

axiom ldv_pm_ops_instance_runtime_idle_0_27 == $sub.ref(0, 731622);

procedure ldv_pm_ops_instance_runtime_idle_0_27($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.40, $M.41, $M.42, $M.14, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.66, $M.67, assertsPassed, $CurrAddr, $M.26, $M.27, $M.28, $M.29, $M.25, $M.12, $M.10, $M.11, $M.17, $M.18, $M.19, $M.16;



implementation ldv_pm_ops_instance_runtime_idle_0_27($p0: ref, $p1: ref)
{
  var vslice_dummy_var_158: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1769} vslice_dummy_var_158 := devirtbounce.21($p0, $p1);
    goto SeqInstr_733, SeqInstr_734;

  SeqInstr_734:
    assume assertsPassed;
    goto SeqInstr_735;

  SeqInstr_735:
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_733:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_runtime_suspend_0_25: ref;

axiom ldv_pm_ops_instance_runtime_suspend_0_25 == $sub.ref(0, 732654);

procedure ldv_pm_ops_instance_runtime_suspend_0_25($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.40, $M.41, $M.42, $M.14, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.66, $M.67, assertsPassed, $CurrAddr, $M.26, $M.27, $M.28, $M.29, $M.25, $M.12, $M.10, $M.11, $M.17, $M.18, $M.19, $M.16;



implementation ldv_pm_ops_instance_runtime_suspend_0_25($p0: ref, $p1: ref)
{
  var vslice_dummy_var_159: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} vslice_dummy_var_159 := devirtbounce.21($p0, $p1);
    goto SeqInstr_736, SeqInstr_737;

  SeqInstr_737:
    assume assertsPassed;
    goto SeqInstr_738;

  SeqInstr_738:
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_736:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_runtime_resume_0_24: ref;

axiom ldv_pm_ops_instance_runtime_resume_0_24 == $sub.ref(0, 733686);

procedure ldv_pm_ops_instance_runtime_resume_0_24($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.40, $M.41, $M.42, $M.14, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.66, $M.67, assertsPassed, $CurrAddr, $M.26, $M.27, $M.28, $M.29, $M.25, $M.12, $M.10, $M.11, $M.17, $M.18, $M.19, $M.16;



implementation ldv_pm_ops_instance_runtime_resume_0_24($p0: ref, $p1: ref)
{
  var vslice_dummy_var_160: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1771} vslice_dummy_var_160 := devirtbounce.21($p0, $p1);
    goto SeqInstr_739, SeqInstr_740;

  SeqInstr_740:
    assume assertsPassed;
    goto SeqInstr_741;

  SeqInstr_741:
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_739:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_prepare_0_22: ref;

axiom ldv_pm_ops_instance_prepare_0_22 == $sub.ref(0, 734718);

procedure ldv_pm_ops_instance_prepare_0_22($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.40, $M.41, $M.42, $M.14, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.66, $M.67, assertsPassed, $CurrAddr, $M.26, $M.27, $M.28, $M.29, $M.25, $M.12, $M.10, $M.11, $M.17, $M.18, $M.19, $M.16;



implementation ldv_pm_ops_instance_prepare_0_22($p0: ref, $p1: ref)
{
  var vslice_dummy_var_161: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} vslice_dummy_var_161 := devirtbounce.21($p0, $p1);
    goto SeqInstr_742, SeqInstr_743;

  SeqInstr_743:
    assume assertsPassed;
    goto SeqInstr_744;

  SeqInstr_744:
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_742:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_suspend_0_21: ref;

axiom ldv_pm_ops_instance_suspend_0_21 == $sub.ref(0, 735750);

procedure ldv_pm_ops_instance_suspend_0_21($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.40, $M.41, $M.42, $M.14, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.66, $M.67, assertsPassed, $CurrAddr, $M.26, $M.27, $M.28, $M.29, $M.25, $M.12, $M.10, $M.11, $M.17, $M.18, $M.19, $M.16;



implementation ldv_pm_ops_instance_suspend_0_21($p0: ref, $p1: ref)
{
  var vslice_dummy_var_162: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1773} vslice_dummy_var_162 := devirtbounce.21($p0, $p1);
    goto SeqInstr_745, SeqInstr_746;

  SeqInstr_746:
    assume assertsPassed;
    goto SeqInstr_747;

  SeqInstr_747:
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_745:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_suspend_noirq_0_20: ref;

axiom ldv_pm_ops_instance_suspend_noirq_0_20 == $sub.ref(0, 736782);

procedure ldv_pm_ops_instance_suspend_noirq_0_20($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.40, $M.41, $M.42, $M.14, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.66, $M.67, assertsPassed, $CurrAddr, $M.26, $M.27, $M.28, $M.29, $M.25, $M.12, $M.10, $M.11, $M.17, $M.18, $M.19, $M.16;



implementation ldv_pm_ops_instance_suspend_noirq_0_20($p0: ref, $p1: ref)
{
  var vslice_dummy_var_163: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1774} vslice_dummy_var_163 := devirtbounce.21($p0, $p1);
    goto SeqInstr_748, SeqInstr_749;

  SeqInstr_749:
    assume assertsPassed;
    goto SeqInstr_750;

  SeqInstr_750:
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_748:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_resume_noirq_0_19: ref;

axiom ldv_pm_ops_instance_resume_noirq_0_19 == $sub.ref(0, 737814);

procedure ldv_pm_ops_instance_resume_noirq_0_19($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.40, $M.41, $M.42, $M.14, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.66, $M.67, assertsPassed, $CurrAddr, $M.26, $M.27, $M.28, $M.29, $M.25, $M.12, $M.10, $M.11, $M.17, $M.18, $M.19, $M.16;



implementation ldv_pm_ops_instance_resume_noirq_0_19($p0: ref, $p1: ref)
{
  var vslice_dummy_var_164: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1775} vslice_dummy_var_164 := devirtbounce.21($p0, $p1);
    goto SeqInstr_751, SeqInstr_752;

  SeqInstr_752:
    assume assertsPassed;
    goto SeqInstr_753;

  SeqInstr_753:
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_751:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_suspend_late_0_18: ref;

axiom ldv_pm_ops_instance_suspend_late_0_18 == $sub.ref(0, 738846);

procedure ldv_pm_ops_instance_suspend_late_0_18($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.40, $M.41, $M.42, $M.14, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.66, $M.67, assertsPassed, $CurrAddr, $M.26, $M.27, $M.28, $M.29, $M.25, $M.12, $M.10, $M.11, $M.17, $M.18, $M.19, $M.16;



implementation ldv_pm_ops_instance_suspend_late_0_18($p0: ref, $p1: ref)
{
  var vslice_dummy_var_165: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} vslice_dummy_var_165 := devirtbounce.21($p0, $p1);
    goto SeqInstr_754, SeqInstr_755;

  SeqInstr_755:
    assume assertsPassed;
    goto SeqInstr_756;

  SeqInstr_756:
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_754:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_resume_early_0_17: ref;

axiom ldv_pm_ops_instance_resume_early_0_17 == $sub.ref(0, 739878);

procedure ldv_pm_ops_instance_resume_early_0_17($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.40, $M.41, $M.42, $M.14, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.66, $M.67, assertsPassed, $CurrAddr, $M.26, $M.27, $M.28, $M.29, $M.25, $M.12, $M.10, $M.11, $M.17, $M.18, $M.19, $M.16;



implementation ldv_pm_ops_instance_resume_early_0_17($p0: ref, $p1: ref)
{
  var vslice_dummy_var_166: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1777} vslice_dummy_var_166 := devirtbounce.21($p0, $p1);
    goto SeqInstr_757, SeqInstr_758;

  SeqInstr_758:
    assume assertsPassed;
    goto SeqInstr_759;

  SeqInstr_759:
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_757:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_resume_0_16: ref;

axiom ldv_pm_ops_instance_resume_0_16 == $sub.ref(0, 740910);

procedure ldv_pm_ops_instance_resume_0_16($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.40, $M.41, $M.42, $M.14, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.66, $M.67, assertsPassed, $CurrAddr, $M.26, $M.27, $M.28, $M.29, $M.25, $M.12, $M.10, $M.11, $M.17, $M.18, $M.19, $M.16;



implementation ldv_pm_ops_instance_resume_0_16($p0: ref, $p1: ref)
{
  var vslice_dummy_var_167: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} vslice_dummy_var_167 := devirtbounce.21($p0, $p1);
    goto SeqInstr_760, SeqInstr_761;

  SeqInstr_761:
    assume assertsPassed;
    goto SeqInstr_762;

  SeqInstr_762:
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_760:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_freeze_0_15: ref;

axiom ldv_pm_ops_instance_freeze_0_15 == $sub.ref(0, 741942);

procedure ldv_pm_ops_instance_freeze_0_15($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.40, $M.41, $M.42, $M.14, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.66, $M.67, assertsPassed, $CurrAddr, $M.26, $M.27, $M.28, $M.29, $M.25, $M.12, $M.10, $M.11, $M.17, $M.18, $M.19, $M.16;



implementation ldv_pm_ops_instance_freeze_0_15($p0: ref, $p1: ref)
{
  var vslice_dummy_var_168: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1779} vslice_dummy_var_168 := devirtbounce.21($p0, $p1);
    goto SeqInstr_763, SeqInstr_764;

  SeqInstr_764:
    assume assertsPassed;
    goto SeqInstr_765;

  SeqInstr_765:
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_763:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_freeze_late_0_14: ref;

axiom ldv_pm_ops_instance_freeze_late_0_14 == $sub.ref(0, 742974);

procedure ldv_pm_ops_instance_freeze_late_0_14($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.40, $M.41, $M.42, $M.14, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.66, $M.67, assertsPassed, $CurrAddr, $M.26, $M.27, $M.28, $M.29, $M.25, $M.12, $M.10, $M.11, $M.17, $M.18, $M.19, $M.16;



implementation ldv_pm_ops_instance_freeze_late_0_14($p0: ref, $p1: ref)
{
  var vslice_dummy_var_169: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} vslice_dummy_var_169 := devirtbounce.21($p0, $p1);
    goto SeqInstr_766, SeqInstr_767;

  SeqInstr_767:
    assume assertsPassed;
    goto SeqInstr_768;

  SeqInstr_768:
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_766:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_thaw_early_0_13: ref;

axiom ldv_pm_ops_instance_thaw_early_0_13 == $sub.ref(0, 744006);

procedure ldv_pm_ops_instance_thaw_early_0_13($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.40, $M.41, $M.42, $M.14, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.66, $M.67, assertsPassed, $CurrAddr, $M.26, $M.27, $M.28, $M.29, $M.25, $M.12, $M.10, $M.11, $M.17, $M.18, $M.19, $M.16;



implementation ldv_pm_ops_instance_thaw_early_0_13($p0: ref, $p1: ref)
{
  var vslice_dummy_var_170: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} vslice_dummy_var_170 := devirtbounce.21($p0, $p1);
    goto SeqInstr_769, SeqInstr_770;

  SeqInstr_770:
    assume assertsPassed;
    goto SeqInstr_771;

  SeqInstr_771:
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_769:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_freeze_noirq_0_12: ref;

axiom ldv_pm_ops_instance_freeze_noirq_0_12 == $sub.ref(0, 745038);

procedure ldv_pm_ops_instance_freeze_noirq_0_12($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.40, $M.41, $M.42, $M.14, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.66, $M.67, assertsPassed, $CurrAddr, $M.26, $M.27, $M.28, $M.29, $M.25, $M.12, $M.10, $M.11, $M.17, $M.18, $M.19, $M.16;



implementation ldv_pm_ops_instance_freeze_noirq_0_12($p0: ref, $p1: ref)
{
  var vslice_dummy_var_171: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1782} vslice_dummy_var_171 := devirtbounce.21($p0, $p1);
    goto SeqInstr_772, SeqInstr_773;

  SeqInstr_773:
    assume assertsPassed;
    goto SeqInstr_774;

  SeqInstr_774:
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_772:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_thaw_noirq_0_11: ref;

axiom ldv_pm_ops_instance_thaw_noirq_0_11 == $sub.ref(0, 746070);

procedure ldv_pm_ops_instance_thaw_noirq_0_11($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.40, $M.41, $M.42, $M.14, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.66, $M.67, assertsPassed, $CurrAddr, $M.26, $M.27, $M.28, $M.29, $M.25, $M.12, $M.10, $M.11, $M.17, $M.18, $M.19, $M.16;



implementation ldv_pm_ops_instance_thaw_noirq_0_11($p0: ref, $p1: ref)
{
  var vslice_dummy_var_172: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1783} vslice_dummy_var_172 := devirtbounce.21($p0, $p1);
    goto SeqInstr_775, SeqInstr_776;

  SeqInstr_776:
    assume assertsPassed;
    goto SeqInstr_777;

  SeqInstr_777:
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_775:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_thaw_0_10: ref;

axiom ldv_pm_ops_instance_thaw_0_10 == $sub.ref(0, 747102);

procedure ldv_pm_ops_instance_thaw_0_10($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.40, $M.41, $M.42, $M.14, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.66, $M.67, assertsPassed, $CurrAddr, $M.26, $M.27, $M.28, $M.29, $M.25, $M.12, $M.10, $M.11, $M.17, $M.18, $M.19, $M.16;



implementation ldv_pm_ops_instance_thaw_0_10($p0: ref, $p1: ref)
{
  var vslice_dummy_var_173: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} vslice_dummy_var_173 := devirtbounce.21($p0, $p1);
    goto SeqInstr_778, SeqInstr_779;

  SeqInstr_779:
    assume assertsPassed;
    goto SeqInstr_780;

  SeqInstr_780:
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_778:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_poweroff_0_9: ref;

axiom ldv_pm_ops_instance_poweroff_0_9 == $sub.ref(0, 748134);

procedure ldv_pm_ops_instance_poweroff_0_9($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.40, $M.41, $M.42, $M.14, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.66, $M.67, assertsPassed, $CurrAddr, $M.26, $M.27, $M.28, $M.29, $M.25, $M.12, $M.10, $M.11, $M.17, $M.18, $M.19, $M.16;



implementation ldv_pm_ops_instance_poweroff_0_9($p0: ref, $p1: ref)
{
  var vslice_dummy_var_174: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1785} vslice_dummy_var_174 := devirtbounce.21($p0, $p1);
    goto SeqInstr_781, SeqInstr_782;

  SeqInstr_782:
    assume assertsPassed;
    goto SeqInstr_783;

  SeqInstr_783:
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_781:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_poweroff_late_0_8: ref;

axiom ldv_pm_ops_instance_poweroff_late_0_8 == $sub.ref(0, 749166);

procedure ldv_pm_ops_instance_poweroff_late_0_8($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.40, $M.41, $M.42, $M.14, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.66, $M.67, assertsPassed, $CurrAddr, $M.26, $M.27, $M.28, $M.29, $M.25, $M.12, $M.10, $M.11, $M.17, $M.18, $M.19, $M.16;



implementation ldv_pm_ops_instance_poweroff_late_0_8($p0: ref, $p1: ref)
{
  var vslice_dummy_var_175: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} vslice_dummy_var_175 := devirtbounce.21($p0, $p1);
    goto SeqInstr_784, SeqInstr_785;

  SeqInstr_785:
    assume assertsPassed;
    goto SeqInstr_786;

  SeqInstr_786:
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_784:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_restore_early_0_7: ref;

axiom ldv_pm_ops_instance_restore_early_0_7 == $sub.ref(0, 750198);

procedure ldv_pm_ops_instance_restore_early_0_7($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.40, $M.41, $M.42, $M.14, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.66, $M.67, assertsPassed, $CurrAddr, $M.26, $M.27, $M.28, $M.29, $M.25, $M.12, $M.10, $M.11, $M.17, $M.18, $M.19, $M.16;



implementation ldv_pm_ops_instance_restore_early_0_7($p0: ref, $p1: ref)
{
  var vslice_dummy_var_176: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1787} vslice_dummy_var_176 := devirtbounce.21($p0, $p1);
    goto SeqInstr_787, SeqInstr_788;

  SeqInstr_788:
    assume assertsPassed;
    goto SeqInstr_789;

  SeqInstr_789:
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_787:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_poweroff_noirq_0_6: ref;

axiom ldv_pm_ops_instance_poweroff_noirq_0_6 == $sub.ref(0, 751230);

procedure ldv_pm_ops_instance_poweroff_noirq_0_6($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.40, $M.41, $M.42, $M.14, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.66, $M.67, assertsPassed, $CurrAddr, $M.26, $M.27, $M.28, $M.29, $M.25, $M.12, $M.10, $M.11, $M.17, $M.18, $M.19, $M.16;



implementation ldv_pm_ops_instance_poweroff_noirq_0_6($p0: ref, $p1: ref)
{
  var vslice_dummy_var_177: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} vslice_dummy_var_177 := devirtbounce.21($p0, $p1);
    goto SeqInstr_790, SeqInstr_791;

  SeqInstr_791:
    assume assertsPassed;
    goto SeqInstr_792;

  SeqInstr_792:
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_790:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_restore_noirq_0_5: ref;

axiom ldv_pm_ops_instance_restore_noirq_0_5 == $sub.ref(0, 752262);

procedure ldv_pm_ops_instance_restore_noirq_0_5($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.40, $M.41, $M.42, $M.14, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.66, $M.67, assertsPassed, $CurrAddr, $M.26, $M.27, $M.28, $M.29, $M.25, $M.12, $M.10, $M.11, $M.17, $M.18, $M.19, $M.16;



implementation ldv_pm_ops_instance_restore_noirq_0_5($p0: ref, $p1: ref)
{
  var vslice_dummy_var_178: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1789} vslice_dummy_var_178 := devirtbounce.21($p0, $p1);
    goto SeqInstr_793, SeqInstr_794;

  SeqInstr_794:
    assume assertsPassed;
    goto SeqInstr_795;

  SeqInstr_795:
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_793:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_restore_0_4: ref;

axiom ldv_pm_ops_instance_restore_0_4 == $sub.ref(0, 753294);

procedure ldv_pm_ops_instance_restore_0_4($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.40, $M.41, $M.42, $M.14, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.66, $M.67, assertsPassed, $CurrAddr, $M.26, $M.27, $M.28, $M.29, $M.25, $M.12, $M.10, $M.11, $M.17, $M.18, $M.19, $M.16;



implementation ldv_pm_ops_instance_restore_0_4($p0: ref, $p1: ref)
{
  var vslice_dummy_var_179: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} vslice_dummy_var_179 := devirtbounce.21($p0, $p1);
    goto SeqInstr_796, SeqInstr_797;

  SeqInstr_797:
    assume assertsPassed;
    goto SeqInstr_798;

  SeqInstr_798:
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_796:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_complete_0_3: ref;

axiom ldv_pm_ops_instance_complete_0_3 == $sub.ref(0, 754326);

procedure ldv_pm_ops_instance_complete_0_3($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.26, $M.27, $M.28, $M.29, $M.14, $M.17, $M.10, $CurrAddr, $M.12, $M.11, assertsPassed, $M.15, $M.16;



implementation ldv_pm_ops_instance_complete_0_3($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} devirtbounce.22($p0, $p1);
    goto SeqInstr_799, SeqInstr_800;

  SeqInstr_800:
    assume assertsPassed;
    goto SeqInstr_801;

  SeqInstr_801:
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_799:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_register_dummy_resourceless_instance_10_28_9: ref;

axiom ldv_dispatch_register_dummy_resourceless_instance_10_28_9 == $sub.ref(0, 755358);

procedure ldv_dispatch_register_dummy_resourceless_instance_10_28_9();
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.14, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.11, $M.25, $M.26, $M.27, $M.28, $M.29, $M.15, assertsPassed, $M.17, $M.18, $M.19, $M.12, $M.10, $M.16;



implementation ldv_dispatch_register_dummy_resourceless_instance_10_28_9()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1792} $p0 := ldv_xmalloc(4);
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1793} ldv_struct_srp_function_template_dummy_resourceless_instance_24($p2);
    goto SeqInstr_802, SeqInstr_803;

  SeqInstr_803:
    assume assertsPassed;
    goto SeqInstr_804;

  SeqInstr_804:
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_802:
    assume !assertsPassed;
    return;
}



const ldv_struct_srp_function_template_dummy_resourceless_instance_24: ref;

axiom ldv_struct_srp_function_template_dummy_resourceless_instance_24 == $sub.ref(0, 756390);

procedure ldv_struct_srp_function_template_dummy_resourceless_instance_24($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.11, $M.25, $M.26, $M.27, $M.28, $M.29, $M.15, assertsPassed, $M.17, $M.18, $M.19, $CurrAddr, $M.12, $M.10, $M.16;



implementation ldv_struct_srp_function_template_dummy_resourceless_instance_24($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i1, $i2, $i3, $i4, $i5 := ldv_struct_srp_function_template_dummy_resourceless_instance_24_loop_$bb1($i1, $i2, $i3, $i4, $i5);
    goto $bb1_last;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 2);
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 3);
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    $i5 := $i1;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 4);
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} ldv_stop();
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume $i6 == 1;
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb10:
    assume $i4 == 1;
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} ldv_dummy_resourceless_instance_callback_24_3($u17, $u16);
    goto SeqInstr_811, SeqInstr_812;

  SeqInstr_812:
    assume assertsPassed;
    goto SeqInstr_813;

  SeqInstr_813:
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb19_dummy;

  SeqInstr_811:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1797} ldv_dummy_resourceless_instance_callback_24_7($u15, $u16);
    goto SeqInstr_808, SeqInstr_809;

  SeqInstr_809:
    assume assertsPassed;
    goto SeqInstr_810;

  SeqInstr_810:
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_808:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i2 == 1;
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} ldv_dummy_resourceless_instance_callback_24_8($u15, $u16);
    goto SeqInstr_805, SeqInstr_806;

  SeqInstr_806:
    assume assertsPassed;
    goto SeqInstr_807;

  SeqInstr_807:
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_805:
    assume !assertsPassed;
    return;

  $bb19_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} $i1 := ldv_undef_int();
    call {:si_unique_call 1795} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_8161;
}



const ldv_dummy_resourceless_instance_callback_24_8: ref;

axiom ldv_dummy_resourceless_instance_callback_24_8 == $sub.ref(0, 757422);

procedure ldv_dummy_resourceless_instance_callback_24_8($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.14, $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.15, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr, $M.12, $M.10, $M.11, $M.17, $M.16;



implementation ldv_dummy_resourceless_instance_callback_24_8($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} srp_terminate_io($p1);
    goto SeqInstr_814, SeqInstr_815;

  SeqInstr_815:
    assume assertsPassed;
    goto SeqInstr_816;

  SeqInstr_816:
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_814:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_24_7: ref;

axiom ldv_dummy_resourceless_instance_callback_24_7 == $sub.ref(0, 758454);

procedure ldv_dummy_resourceless_instance_callback_24_7($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.11, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_24_7($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} srp_rport_delete($p1);
    goto SeqInstr_817, SeqInstr_818;

  SeqInstr_818:
    assume assertsPassed;
    goto SeqInstr_819;

  SeqInstr_819:
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_817:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_24_3: ref;

axiom ldv_dummy_resourceless_instance_callback_24_3 == $sub.ref(0, 759486);

procedure ldv_dummy_resourceless_instance_callback_24_3($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.25, $M.26, $M.27, $M.28, $M.29, $M.11, $M.15, $M.17, $M.18, $M.19, assertsPassed, $CurrAddr, $M.12, $M.10, $M.16;



implementation ldv_dummy_resourceless_instance_callback_24_3($p0: ref, $p1: ref)
{
  var vslice_dummy_var_180: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} vslice_dummy_var_180 := srp_rport_reconnect($p1);
    goto SeqInstr_820, SeqInstr_821;

  SeqInstr_821:
    assume assertsPassed;
    goto SeqInstr_822;

  SeqInstr_822:
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_820:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_register_dummy_resourceless_instance_7_28_10: ref;

axiom ldv_dispatch_register_dummy_resourceless_instance_7_28_10 == $sub.ref(0, 760518);

procedure ldv_dispatch_register_dummy_resourceless_instance_7_28_10();
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_dispatch_register_dummy_resourceless_instance_7_28_10()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1803} $p0 := ldv_xmalloc(4);
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1804} ldv_struct_device_attribute_dummy_resourceless_instance_3($p2);
    goto SeqInstr_823, SeqInstr_824;

  SeqInstr_824:
    assume assertsPassed;
    goto SeqInstr_825;

  SeqInstr_825:
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} $p3 := ldv_xmalloc(4);
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1806} ldv_struct_device_attribute_dummy_resourceless_instance_4($p5);
    goto SeqInstr_826, SeqInstr_827;

  SeqInstr_827:
    assume assertsPassed;
    goto SeqInstr_828;

  SeqInstr_828:
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} $p6 := ldv_xmalloc(4);
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1808} ldv_struct_device_attribute_dummy_resourceless_instance_5($p8);
    goto SeqInstr_829, SeqInstr_830;

  SeqInstr_830:
    assume assertsPassed;
    goto SeqInstr_831;

  SeqInstr_831:
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} $p9 := ldv_xmalloc(4);
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1810} ldv_struct_device_attribute_dummy_resourceless_instance_6($p11);
    goto SeqInstr_832, SeqInstr_833;

  SeqInstr_833:
    assume assertsPassed;
    goto SeqInstr_834;

  SeqInstr_834:
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} $p12 := ldv_xmalloc(4);
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1812} ldv_struct_device_attribute_dummy_resourceless_instance_7($p14);
    goto SeqInstr_835, SeqInstr_836;

  SeqInstr_836:
    assume assertsPassed;
    goto SeqInstr_837;

  SeqInstr_837:
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} $p15 := ldv_xmalloc(4);
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1814} ldv_struct_device_attribute_dummy_resourceless_instance_8($p17);
    goto SeqInstr_838, SeqInstr_839;

  SeqInstr_839:
    assume assertsPassed;
    goto SeqInstr_840;

  SeqInstr_840:
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} $p18 := ldv_xmalloc(4);
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1816} ldv_struct_device_attribute_dummy_resourceless_instance_9($p20);
    goto SeqInstr_841, SeqInstr_842;

  SeqInstr_842:
    assume assertsPassed;
    goto SeqInstr_843;

  SeqInstr_843:
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} $p21 := ldv_xmalloc(4);
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1818} ldv_struct_device_attribute_dummy_resourceless_instance_10($p23);
    goto SeqInstr_844, SeqInstr_845;

  SeqInstr_845:
    assume assertsPassed;
    goto SeqInstr_846;

  SeqInstr_846:
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} $p24 := ldv_xmalloc(4);
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1820} ldv_struct_device_attribute_dummy_resourceless_instance_11($p26);
    goto SeqInstr_847, SeqInstr_848;

  SeqInstr_848:
    assume assertsPassed;
    goto SeqInstr_849;

  SeqInstr_849:
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} $p27 := ldv_xmalloc(4);
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1822} ldv_struct_device_attribute_dummy_resourceless_instance_12($p29);
    goto SeqInstr_850, SeqInstr_851;

  SeqInstr_851:
    assume assertsPassed;
    goto SeqInstr_852;

  SeqInstr_852:
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1823} $p30 := ldv_xmalloc(4);
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1824} ldv_struct_device_attribute_dummy_resourceless_instance_13($p32);
    goto SeqInstr_853, SeqInstr_854;

  SeqInstr_854:
    assume assertsPassed;
    goto SeqInstr_855;

  SeqInstr_855:
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} $p33 := ldv_xmalloc(4);
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1826} ldv_struct_device_attribute_dummy_resourceless_instance_14($p35);
    goto SeqInstr_856, SeqInstr_857;

  SeqInstr_857:
    assume assertsPassed;
    goto SeqInstr_858;

  SeqInstr_858:
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} $p36 := ldv_xmalloc(4);
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1828} ldv_struct_device_attribute_dummy_resourceless_instance_15($p38);
    goto SeqInstr_859, SeqInstr_860;

  SeqInstr_860:
    assume assertsPassed;
    goto SeqInstr_861;

  SeqInstr_861:
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1829} $p39 := ldv_xmalloc(4);
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1830} ldv_struct_device_attribute_dummy_resourceless_instance_16($p41);
    goto SeqInstr_862, SeqInstr_863;

  SeqInstr_863:
    assume assertsPassed;
    goto SeqInstr_864;

  SeqInstr_864:
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} $p42 := ldv_xmalloc(4);
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1832} ldv_struct_device_attribute_dummy_resourceless_instance_17($p44);
    goto SeqInstr_865, SeqInstr_866;

  SeqInstr_866:
    assume assertsPassed;
    goto SeqInstr_867;

  SeqInstr_867:
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} $p45 := ldv_xmalloc(4);
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1834} ldv_struct_device_attribute_dummy_resourceless_instance_18($p47);
    goto SeqInstr_868, SeqInstr_869;

  SeqInstr_869:
    assume assertsPassed;
    goto SeqInstr_870;

  SeqInstr_870:
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} $p48 := ldv_xmalloc(4);
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1836} ldv_struct_device_attribute_dummy_resourceless_instance_19($p50);
    goto SeqInstr_871, SeqInstr_872;

  SeqInstr_872:
    assume assertsPassed;
    goto SeqInstr_873;

  SeqInstr_873:
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} $p51 := ldv_xmalloc(4);
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} ldv_struct_device_attribute_dummy_resourceless_instance_20($p53);
    goto SeqInstr_874, SeqInstr_875;

  SeqInstr_875:
    assume assertsPassed;
    goto SeqInstr_876;

  SeqInstr_876:
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1839} $p54 := ldv_xmalloc(4);
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1840} ldv_struct_device_attribute_dummy_resourceless_instance_21($p56);
    goto SeqInstr_877, SeqInstr_878;

  SeqInstr_878:
    assume assertsPassed;
    goto SeqInstr_879;

  SeqInstr_879:
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_877:
    assume !assertsPassed;
    return;

  SeqInstr_874:
    assume !assertsPassed;
    return;

  SeqInstr_871:
    assume !assertsPassed;
    return;

  SeqInstr_868:
    assume !assertsPassed;
    return;

  SeqInstr_865:
    assume !assertsPassed;
    return;

  SeqInstr_862:
    assume !assertsPassed;
    return;

  SeqInstr_859:
    assume !assertsPassed;
    return;

  SeqInstr_856:
    assume !assertsPassed;
    return;

  SeqInstr_853:
    assume !assertsPassed;
    return;

  SeqInstr_850:
    assume !assertsPassed;
    return;

  SeqInstr_847:
    assume !assertsPassed;
    return;

  SeqInstr_844:
    assume !assertsPassed;
    return;

  SeqInstr_841:
    assume !assertsPassed;
    return;

  SeqInstr_838:
    assume !assertsPassed;
    return;

  SeqInstr_835:
    assume !assertsPassed;
    return;

  SeqInstr_832:
    assume !assertsPassed;
    return;

  SeqInstr_829:
    assume !assertsPassed;
    return;

  SeqInstr_826:
    assume !assertsPassed;
    return;

  SeqInstr_823:
    assume !assertsPassed;
    return;
}



const ldv_struct_device_attribute_dummy_resourceless_instance_3: ref;

axiom ldv_struct_device_attribute_dummy_resourceless_instance_3 == $sub.ref(0, 761550);

procedure ldv_struct_device_attribute_dummy_resourceless_instance_3($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_3($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1841} $i1 := ldv_undef_int();
    call {:si_unique_call 1842} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10 := ldv_struct_device_attribute_dummy_resourceless_instance_3_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10);
    goto $bb4_last;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} $i4 := ldv_undef_int();
    call {:si_unique_call 1845} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($u20);
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1849} ldv_free($p3);
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} $i9 := ldv_undef_int();
    call {:si_unique_call 1851} {:cexpr "tmp___2"} boogie_si_record_i32($i9);
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11_dummy;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1852} ldv_dummy_resourceless_instance_callback_3_3($u20, $u14, $u19, $p3);
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1846} $p6 := ldv_xmalloc(1);
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1847} ldv_dummy_resourceless_instance_callback_3_9($u18, $u14, $u19, $p6, $u0);
    goto SeqInstr_880, SeqInstr_881;

  SeqInstr_881:
    assume assertsPassed;
    goto SeqInstr_882;

  SeqInstr_882:
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1848} ldv_free($p6);
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_880:
    assume !assertsPassed;
    return;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1843} $p3 := ldv_xmalloc(1);
    goto corral_source_split_8279;
}



const ldv_struct_device_attribute_dummy_resourceless_instance_4: ref;

axiom ldv_struct_device_attribute_dummy_resourceless_instance_4 == $sub.ref(0, 762582);

procedure ldv_struct_device_attribute_dummy_resourceless_instance_4($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_4($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1853} $i1 := ldv_undef_int();
    call {:si_unique_call 1854} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8305;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10 := ldv_struct_device_attribute_dummy_resourceless_instance_4_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10);
    goto $bb4_last;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} $i4 := ldv_undef_int();
    call {:si_unique_call 1857} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1859} ldv_dummy_resourceless_instance_callback_4_3($u20, $u14, $u19, $p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} ldv_free($p3);
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1863} $i9 := ldv_undef_int();
    call {:si_unique_call 1864} {:cexpr "tmp___2"} boogie_si_record_i32($i9);
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11_dummy;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} $p6 := ldv_xmalloc(1);
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($u18);
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1861} ldv_free($p6);
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1860} ldv_dummy_resourceless_instance_callback_4_9($u18, $u14, $u19, $p6, $u0);
    goto SeqInstr_883, SeqInstr_884;

  SeqInstr_884:
    assume assertsPassed;
    goto SeqInstr_885;

  SeqInstr_885:
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_883:
    assume !assertsPassed;
    return;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1855} $p3 := ldv_xmalloc(1);
    goto corral_source_split_8307;
}



const ldv_struct_device_attribute_dummy_resourceless_instance_5: ref;

axiom ldv_struct_device_attribute_dummy_resourceless_instance_5 == $sub.ref(0, 763614);

procedure ldv_struct_device_attribute_dummy_resourceless_instance_5($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_5($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1865} $i1 := ldv_undef_int();
    call {:si_unique_call 1866} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10 := ldv_struct_device_attribute_dummy_resourceless_instance_5_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10);
    goto $bb4_last;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1868} $i4 := ldv_undef_int();
    call {:si_unique_call 1869} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} ldv_dummy_resourceless_instance_callback_5_3($u20, $u14, $u19, $p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1874} ldv_free($p3);
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1875} $i9 := ldv_undef_int();
    call {:si_unique_call 1876} {:cexpr "tmp___2"} boogie_si_record_i32($i9);
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11_dummy;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1870} $p6 := ldv_xmalloc(1);
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($u18);
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1873} ldv_free($p6);
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1872} ldv_dummy_resourceless_instance_callback_5_9($u18, $u14, $u19, $p6, $u0);
    goto SeqInstr_886, SeqInstr_887;

  SeqInstr_887:
    assume assertsPassed;
    goto SeqInstr_888;

  SeqInstr_888:
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_886:
    assume !assertsPassed;
    return;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1867} $p3 := ldv_xmalloc(1);
    goto corral_source_split_8335;
}



const ldv_struct_device_attribute_dummy_resourceless_instance_6: ref;

axiom ldv_struct_device_attribute_dummy_resourceless_instance_6 == $sub.ref(0, 764646);

procedure ldv_struct_device_attribute_dummy_resourceless_instance_6($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_6($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1877} $i1 := ldv_undef_int();
    call {:si_unique_call 1878} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10 := ldv_struct_device_attribute_dummy_resourceless_instance_6_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10);
    goto $bb4_last;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1880} $i4 := ldv_undef_int();
    call {:si_unique_call 1881} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1883} ldv_dummy_resourceless_instance_callback_6_3($u20, $u14, $u19, $p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1886} ldv_free($p3);
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} $i9 := ldv_undef_int();
    call {:si_unique_call 1888} {:cexpr "tmp___2"} boogie_si_record_i32($i9);
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11_dummy;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1882} $p6 := ldv_xmalloc(1);
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($u18);
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1885} ldv_free($p6);
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} ldv_dummy_resourceless_instance_callback_6_9($u18, $u14, $u19, $p6, $u0);
    goto SeqInstr_889, SeqInstr_890;

  SeqInstr_890:
    assume assertsPassed;
    goto SeqInstr_891;

  SeqInstr_891:
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_889:
    assume !assertsPassed;
    return;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} $p3 := ldv_xmalloc(1);
    goto corral_source_split_8363;
}



const ldv_struct_device_attribute_dummy_resourceless_instance_7: ref;

axiom ldv_struct_device_attribute_dummy_resourceless_instance_7 == $sub.ref(0, 765678);

procedure ldv_struct_device_attribute_dummy_resourceless_instance_7($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_7($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1889} $i1 := ldv_undef_int();
    call {:si_unique_call 1890} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10 := ldv_struct_device_attribute_dummy_resourceless_instance_7_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10);
    goto $bb4_last;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1892} $i4 := ldv_undef_int();
    call {:si_unique_call 1893} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1895} ldv_dummy_resourceless_instance_callback_7_3($u20, $u14, $u19, $p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1898} ldv_free($p3);
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1899} $i9 := ldv_undef_int();
    call {:si_unique_call 1900} {:cexpr "tmp___2"} boogie_si_record_i32($i9);
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11_dummy;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1894} $p6 := ldv_xmalloc(1);
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($u18);
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} ldv_free($p6);
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1896} ldv_dummy_resourceless_instance_callback_7_9($u18, $u14, $u19, $p6, $u0);
    goto SeqInstr_892, SeqInstr_893;

  SeqInstr_893:
    assume assertsPassed;
    goto SeqInstr_894;

  SeqInstr_894:
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_892:
    assume !assertsPassed;
    return;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} $p3 := ldv_xmalloc(1);
    goto corral_source_split_8391;
}



const ldv_struct_device_attribute_dummy_resourceless_instance_8: ref;

axiom ldv_struct_device_attribute_dummy_resourceless_instance_8 == $sub.ref(0, 766710);

procedure ldv_struct_device_attribute_dummy_resourceless_instance_8($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_8($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1901} $i1 := ldv_undef_int();
    call {:si_unique_call 1902} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10 := ldv_struct_device_attribute_dummy_resourceless_instance_8_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10);
    goto $bb4_last;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1904} $i4 := ldv_undef_int();
    call {:si_unique_call 1905} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1907} ldv_dummy_resourceless_instance_callback_8_3($u20, $u14, $u19, $p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1910} ldv_free($p3);
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1911} $i9 := ldv_undef_int();
    call {:si_unique_call 1912} {:cexpr "tmp___2"} boogie_si_record_i32($i9);
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11_dummy;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1906} $p6 := ldv_xmalloc(1);
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($u18);
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1909} ldv_free($p6);
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} ldv_dummy_resourceless_instance_callback_8_9($u18, $u14, $u19, $p6, $u0);
    goto SeqInstr_895, SeqInstr_896;

  SeqInstr_896:
    assume assertsPassed;
    goto SeqInstr_897;

  SeqInstr_897:
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_895:
    assume !assertsPassed;
    return;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1903} $p3 := ldv_xmalloc(1);
    goto corral_source_split_8419;
}



const ldv_struct_device_attribute_dummy_resourceless_instance_9: ref;

axiom ldv_struct_device_attribute_dummy_resourceless_instance_9 == $sub.ref(0, 767742);

procedure ldv_struct_device_attribute_dummy_resourceless_instance_9($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_9($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1913} $i1 := ldv_undef_int();
    call {:si_unique_call 1914} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10 := ldv_struct_device_attribute_dummy_resourceless_instance_9_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10);
    goto $bb4_last;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} $i4 := ldv_undef_int();
    call {:si_unique_call 1917} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1919} ldv_dummy_resourceless_instance_callback_9_3($u20, $u14, $u19, $p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1922} ldv_free($p3);
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1923} $i9 := ldv_undef_int();
    call {:si_unique_call 1924} {:cexpr "tmp___2"} boogie_si_record_i32($i9);
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11_dummy;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1918} $p6 := ldv_xmalloc(1);
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($u18);
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1921} ldv_free($p6);
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1920} ldv_dummy_resourceless_instance_callback_9_9($u18, $u14, $u19, $p6, $u0);
    goto SeqInstr_898, SeqInstr_899;

  SeqInstr_899:
    assume assertsPassed;
    goto SeqInstr_900;

  SeqInstr_900:
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_898:
    assume !assertsPassed;
    return;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1915} $p3 := ldv_xmalloc(1);
    goto corral_source_split_8447;
}



const ldv_struct_device_attribute_dummy_resourceless_instance_10: ref;

axiom ldv_struct_device_attribute_dummy_resourceless_instance_10 == $sub.ref(0, 768774);

procedure ldv_struct_device_attribute_dummy_resourceless_instance_10($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_10($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1925} $i1 := ldv_undef_int();
    call {:si_unique_call 1926} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8473;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10 := ldv_struct_device_attribute_dummy_resourceless_instance_10_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10);
    goto $bb4_last;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1928} $i4 := ldv_undef_int();
    call {:si_unique_call 1929} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1931} ldv_dummy_resourceless_instance_callback_10_3($u20, $u14, $u19, $p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1934} ldv_free($p3);
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1935} $i9 := ldv_undef_int();
    call {:si_unique_call 1936} {:cexpr "tmp___2"} boogie_si_record_i32($i9);
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11_dummy;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1930} $p6 := ldv_xmalloc(1);
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($u18);
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1933} ldv_free($p6);
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1932} ldv_dummy_resourceless_instance_callback_10_9($u18, $u14, $u19, $p6, $u0);
    goto SeqInstr_901, SeqInstr_902;

  SeqInstr_902:
    assume assertsPassed;
    goto SeqInstr_903;

  SeqInstr_903:
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_901:
    assume !assertsPassed;
    return;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1927} $p3 := ldv_xmalloc(1);
    goto corral_source_split_8475;
}



const ldv_struct_device_attribute_dummy_resourceless_instance_11: ref;

axiom ldv_struct_device_attribute_dummy_resourceless_instance_11 == $sub.ref(0, 769806);

procedure ldv_struct_device_attribute_dummy_resourceless_instance_11($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_11($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1937} $i1 := ldv_undef_int();
    call {:si_unique_call 1938} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10 := ldv_struct_device_attribute_dummy_resourceless_instance_11_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10);
    goto $bb4_last;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1940} $i4 := ldv_undef_int();
    call {:si_unique_call 1941} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1943} ldv_dummy_resourceless_instance_callback_11_3($u20, $u14, $u19, $p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1946} ldv_free($p3);
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1947} $i9 := ldv_undef_int();
    call {:si_unique_call 1948} {:cexpr "tmp___2"} boogie_si_record_i32($i9);
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11_dummy;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1942} $p6 := ldv_xmalloc(1);
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($u18);
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1945} ldv_free($p6);
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1944} ldv_dummy_resourceless_instance_callback_11_9($u18, $u14, $u19, $p6, $u0);
    goto SeqInstr_904, SeqInstr_905;

  SeqInstr_905:
    assume assertsPassed;
    goto SeqInstr_906;

  SeqInstr_906:
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_904:
    assume !assertsPassed;
    return;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1939} $p3 := ldv_xmalloc(1);
    goto corral_source_split_8503;
}



const ldv_struct_device_attribute_dummy_resourceless_instance_12: ref;

axiom ldv_struct_device_attribute_dummy_resourceless_instance_12 == $sub.ref(0, 770838);

procedure ldv_struct_device_attribute_dummy_resourceless_instance_12($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_12($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1949} $i1 := ldv_undef_int();
    call {:si_unique_call 1950} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10 := ldv_struct_device_attribute_dummy_resourceless_instance_12_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10);
    goto $bb4_last;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1952} $i4 := ldv_undef_int();
    call {:si_unique_call 1953} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1955} ldv_dummy_resourceless_instance_callback_12_3($u20, $u14, $u19, $p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1958} ldv_free($p3);
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1959} $i9 := ldv_undef_int();
    call {:si_unique_call 1960} {:cexpr "tmp___2"} boogie_si_record_i32($i9);
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11_dummy;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1954} $p6 := ldv_xmalloc(1);
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($u18);
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1957} ldv_free($p6);
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1956} ldv_dummy_resourceless_instance_callback_12_9($u18, $u14, $u19, $p6, $u0);
    goto SeqInstr_907, SeqInstr_908;

  SeqInstr_908:
    assume assertsPassed;
    goto SeqInstr_909;

  SeqInstr_909:
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_907:
    assume !assertsPassed;
    return;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1951} $p3 := ldv_xmalloc(1);
    goto corral_source_split_8531;
}



const ldv_struct_device_attribute_dummy_resourceless_instance_13: ref;

axiom ldv_struct_device_attribute_dummy_resourceless_instance_13 == $sub.ref(0, 771870);

procedure ldv_struct_device_attribute_dummy_resourceless_instance_13($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_13($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1961} $i1 := ldv_undef_int();
    call {:si_unique_call 1962} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10 := ldv_struct_device_attribute_dummy_resourceless_instance_13_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10);
    goto $bb4_last;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1964} $i4 := ldv_undef_int();
    call {:si_unique_call 1965} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1967} ldv_dummy_resourceless_instance_callback_13_3($u20, $u14, $u19, $p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1970} ldv_free($p3);
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1971} $i9 := ldv_undef_int();
    call {:si_unique_call 1972} {:cexpr "tmp___2"} boogie_si_record_i32($i9);
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11_dummy;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1966} $p6 := ldv_xmalloc(1);
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($u18);
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1969} ldv_free($p6);
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1968} ldv_dummy_resourceless_instance_callback_13_9($u18, $u14, $u19, $p6, $u0);
    goto SeqInstr_910, SeqInstr_911;

  SeqInstr_911:
    assume assertsPassed;
    goto SeqInstr_912;

  SeqInstr_912:
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_910:
    assume !assertsPassed;
    return;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1963} $p3 := ldv_xmalloc(1);
    goto corral_source_split_8559;
}



const ldv_struct_device_attribute_dummy_resourceless_instance_14: ref;

axiom ldv_struct_device_attribute_dummy_resourceless_instance_14 == $sub.ref(0, 772902);

procedure ldv_struct_device_attribute_dummy_resourceless_instance_14($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_14($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1973} $i1 := ldv_undef_int();
    call {:si_unique_call 1974} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10 := ldv_struct_device_attribute_dummy_resourceless_instance_14_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10);
    goto $bb4_last;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1976} $i4 := ldv_undef_int();
    call {:si_unique_call 1977} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1979} ldv_dummy_resourceless_instance_callback_14_3($u20, $u14, $u19, $p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1982} ldv_free($p3);
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1983} $i9 := ldv_undef_int();
    call {:si_unique_call 1984} {:cexpr "tmp___2"} boogie_si_record_i32($i9);
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11_dummy;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1978} $p6 := ldv_xmalloc(1);
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($u18);
    goto corral_source_split_8593;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1981} ldv_free($p6);
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1980} ldv_dummy_resourceless_instance_callback_14_9($u18, $u14, $u19, $p6, $u0);
    goto SeqInstr_913, SeqInstr_914;

  SeqInstr_914:
    assume assertsPassed;
    goto SeqInstr_915;

  SeqInstr_915:
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_913:
    assume !assertsPassed;
    return;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1975} $p3 := ldv_xmalloc(1);
    goto corral_source_split_8587;
}



const ldv_struct_device_attribute_dummy_resourceless_instance_15: ref;

axiom ldv_struct_device_attribute_dummy_resourceless_instance_15 == $sub.ref(0, 773934);

procedure ldv_struct_device_attribute_dummy_resourceless_instance_15($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_15($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1985} $i1 := ldv_undef_int();
    call {:si_unique_call 1986} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10 := ldv_struct_device_attribute_dummy_resourceless_instance_15_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10);
    goto $bb4_last;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1988} $i4 := ldv_undef_int();
    call {:si_unique_call 1989} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1991} ldv_dummy_resourceless_instance_callback_15_3($u20, $u14, $u19, $p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1994} ldv_free($p3);
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1995} $i9 := ldv_undef_int();
    call {:si_unique_call 1996} {:cexpr "tmp___2"} boogie_si_record_i32($i9);
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11_dummy;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1990} $p6 := ldv_xmalloc(1);
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($u18);
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1993} ldv_free($p6);
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1992} ldv_dummy_resourceless_instance_callback_15_9($u18, $u14, $u19, $p6, $u0);
    goto SeqInstr_916, SeqInstr_917;

  SeqInstr_917:
    assume assertsPassed;
    goto SeqInstr_918;

  SeqInstr_918:
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_916:
    assume !assertsPassed;
    return;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1987} $p3 := ldv_xmalloc(1);
    goto corral_source_split_8615;
}



const ldv_struct_device_attribute_dummy_resourceless_instance_16: ref;

axiom ldv_struct_device_attribute_dummy_resourceless_instance_16 == $sub.ref(0, 774966);

procedure ldv_struct_device_attribute_dummy_resourceless_instance_16($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_16($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1997} $i1 := ldv_undef_int();
    call {:si_unique_call 1998} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10 := ldv_struct_device_attribute_dummy_resourceless_instance_16_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10);
    goto $bb4_last;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2000} $i4 := ldv_undef_int();
    call {:si_unique_call 2001} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2003} ldv_dummy_resourceless_instance_callback_16_3($u20, $u14, $u19, $p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2006} ldv_free($p3);
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2007} $i9 := ldv_undef_int();
    call {:si_unique_call 2008} {:cexpr "tmp___2"} boogie_si_record_i32($i9);
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11_dummy;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2002} $p6 := ldv_xmalloc(1);
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($u18);
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2005} ldv_free($p6);
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2004} ldv_dummy_resourceless_instance_callback_16_9($u18, $u14, $u19, $p6, $u0);
    goto SeqInstr_919, SeqInstr_920;

  SeqInstr_920:
    assume assertsPassed;
    goto SeqInstr_921;

  SeqInstr_921:
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_919:
    assume !assertsPassed;
    return;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1999} $p3 := ldv_xmalloc(1);
    goto corral_source_split_8643;
}



const ldv_struct_device_attribute_dummy_resourceless_instance_17: ref;

axiom ldv_struct_device_attribute_dummy_resourceless_instance_17 == $sub.ref(0, 775998);

procedure ldv_struct_device_attribute_dummy_resourceless_instance_17($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_17($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2009} $i1 := ldv_undef_int();
    call {:si_unique_call 2010} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10 := ldv_struct_device_attribute_dummy_resourceless_instance_17_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10);
    goto $bb4_last;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2012} $i4 := ldv_undef_int();
    call {:si_unique_call 2013} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2015} ldv_dummy_resourceless_instance_callback_17_3($u20, $u14, $u19, $p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2018} ldv_free($p3);
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2019} $i9 := ldv_undef_int();
    call {:si_unique_call 2020} {:cexpr "tmp___2"} boogie_si_record_i32($i9);
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11_dummy;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2014} $p6 := ldv_xmalloc(1);
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($u18);
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2017} ldv_free($p6);
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2016} ldv_dummy_resourceless_instance_callback_17_9($u18, $u14, $u19, $p6, $u0);
    goto SeqInstr_922, SeqInstr_923;

  SeqInstr_923:
    assume assertsPassed;
    goto SeqInstr_924;

  SeqInstr_924:
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_922:
    assume !assertsPassed;
    return;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2011} $p3 := ldv_xmalloc(1);
    goto corral_source_split_8671;
}



const ldv_struct_device_attribute_dummy_resourceless_instance_18: ref;

axiom ldv_struct_device_attribute_dummy_resourceless_instance_18 == $sub.ref(0, 777030);

procedure ldv_struct_device_attribute_dummy_resourceless_instance_18($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_18($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2021} $i1 := ldv_undef_int();
    call {:si_unique_call 2022} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10 := ldv_struct_device_attribute_dummy_resourceless_instance_18_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10);
    goto $bb4_last;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2024} $i4 := ldv_undef_int();
    call {:si_unique_call 2025} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2027} ldv_dummy_resourceless_instance_callback_18_3($u20, $u14, $u19, $p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2030} ldv_free($p3);
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2031} $i9 := ldv_undef_int();
    call {:si_unique_call 2032} {:cexpr "tmp___2"} boogie_si_record_i32($i9);
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11_dummy;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2026} $p6 := ldv_xmalloc(1);
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($u18);
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2029} ldv_free($p6);
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2028} ldv_dummy_resourceless_instance_callback_18_9($u18, $u14, $u19, $p6, $u0);
    goto SeqInstr_925, SeqInstr_926;

  SeqInstr_926:
    assume assertsPassed;
    goto SeqInstr_927;

  SeqInstr_927:
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_925:
    assume !assertsPassed;
    return;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2023} $p3 := ldv_xmalloc(1);
    goto corral_source_split_8699;
}



const ldv_struct_device_attribute_dummy_resourceless_instance_19: ref;

axiom ldv_struct_device_attribute_dummy_resourceless_instance_19 == $sub.ref(0, 778062);

procedure ldv_struct_device_attribute_dummy_resourceless_instance_19($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_19($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2033} $i1 := ldv_undef_int();
    call {:si_unique_call 2034} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10 := ldv_struct_device_attribute_dummy_resourceless_instance_19_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10);
    goto $bb4_last;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2036} $i4 := ldv_undef_int();
    call {:si_unique_call 2037} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2039} ldv_dummy_resourceless_instance_callback_19_3($u20, $u14, $u19, $p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2042} ldv_free($p3);
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2043} $i9 := ldv_undef_int();
    call {:si_unique_call 2044} {:cexpr "tmp___2"} boogie_si_record_i32($i9);
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11_dummy;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2038} $p6 := ldv_xmalloc(1);
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($u18);
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2041} ldv_free($p6);
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2040} ldv_dummy_resourceless_instance_callback_19_9($u18, $u14, $u19, $p6, $u0);
    goto SeqInstr_928, SeqInstr_929;

  SeqInstr_929:
    assume assertsPassed;
    goto SeqInstr_930;

  SeqInstr_930:
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_928:
    assume !assertsPassed;
    return;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2035} $p3 := ldv_xmalloc(1);
    goto corral_source_split_8727;
}



const ldv_struct_device_attribute_dummy_resourceless_instance_20: ref;

axiom ldv_struct_device_attribute_dummy_resourceless_instance_20 == $sub.ref(0, 779094);

procedure ldv_struct_device_attribute_dummy_resourceless_instance_20($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_20($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8749;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2045} $i1 := ldv_undef_int();
    call {:si_unique_call 2046} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10 := ldv_struct_device_attribute_dummy_resourceless_instance_20_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10);
    goto $bb4_last;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2048} $i4 := ldv_undef_int();
    call {:si_unique_call 2049} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2051} ldv_dummy_resourceless_instance_callback_20_3($u20, $u14, $u19, $p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2054} ldv_free($p3);
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2055} $i9 := ldv_undef_int();
    call {:si_unique_call 2056} {:cexpr "tmp___2"} boogie_si_record_i32($i9);
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11_dummy;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2050} $p6 := ldv_xmalloc(1);
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($u18);
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2053} ldv_free($p6);
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2052} ldv_dummy_resourceless_instance_callback_20_9($u18, $u14, $u19, $p6, $u0);
    goto SeqInstr_931, SeqInstr_932;

  SeqInstr_932:
    assume assertsPassed;
    goto SeqInstr_933;

  SeqInstr_933:
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_931:
    assume !assertsPassed;
    return;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2047} $p3 := ldv_xmalloc(1);
    goto corral_source_split_8755;
}



const ldv_struct_device_attribute_dummy_resourceless_instance_21: ref;

axiom ldv_struct_device_attribute_dummy_resourceless_instance_21 == $sub.ref(0, 780126);

procedure ldv_struct_device_attribute_dummy_resourceless_instance_21($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_21($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2057} $i1 := ldv_undef_int();
    call {:si_unique_call 2058} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_8778;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10 := ldv_struct_device_attribute_dummy_resourceless_instance_21_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10);
    goto $bb4_last;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2060} $i4 := ldv_undef_int();
    call {:si_unique_call 2061} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2063} ldv_dummy_resourceless_instance_callback_21_3($u20, $u14, $u19, $p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2066} ldv_free($p3);
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2067} $i9 := ldv_undef_int();
    call {:si_unique_call 2068} {:cexpr "tmp___2"} boogie_si_record_i32($i9);
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11_dummy;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2062} $p6 := ldv_xmalloc(1);
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($u18);
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2065} ldv_free($p6);
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2064} ldv_dummy_resourceless_instance_callback_21_9($u18, $u14, $u19, $p6, $u0);
    goto SeqInstr_934, SeqInstr_935;

  SeqInstr_935:
    assume assertsPassed;
    goto SeqInstr_936;

  SeqInstr_936:
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_934:
    assume !assertsPassed;
    return;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2059} $p3 := ldv_xmalloc(1);
    goto corral_source_split_8783;
}



const ldv_dummy_resourceless_instance_callback_21_9: ref;

axiom ldv_dummy_resourceless_instance_callback_21_9 == $sub.ref(0, 781158);

procedure ldv_dummy_resourceless_instance_callback_21_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_dummy_resourceless_instance_callback_21_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_181: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2069} {:cexpr "ldv_dummy_resourceless_instance_callback_21_9:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 2070} vslice_dummy_var_181 := devirtbounce.23($p0, $p1, $p2, $p3, $i4);
    goto SeqInstr_937, SeqInstr_938;

  SeqInstr_938:
    assume assertsPassed;
    goto SeqInstr_939;

  SeqInstr_939:
    goto corral_source_split_8805;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_937:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_21_3: ref;

axiom ldv_dummy_resourceless_instance_callback_21_3 == $sub.ref(0, 782190);

procedure ldv_dummy_resourceless_instance_callback_21_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_21_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_182: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2071} vslice_dummy_var_182 := show_zero_req_lim($p1, $p2, $p3);
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_20_9: ref;

axiom ldv_dummy_resourceless_instance_callback_20_9 == $sub.ref(0, 783222);

procedure ldv_dummy_resourceless_instance_callback_20_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_dummy_resourceless_instance_callback_20_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_183: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2072} {:cexpr "ldv_dummy_resourceless_instance_callback_20_9:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 2073} vslice_dummy_var_183 := devirtbounce.23($p0, $p1, $p2, $p3, $i4);
    goto SeqInstr_940, SeqInstr_941;

  SeqInstr_941:
    assume assertsPassed;
    goto SeqInstr_942;

  SeqInstr_942:
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_940:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_20_3: ref;

axiom ldv_dummy_resourceless_instance_callback_20_3 == $sub.ref(0, 784254);

procedure ldv_dummy_resourceless_instance_callback_20_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_20_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_184: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8812;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2074} vslice_dummy_var_184 := show_tl_retry_count($p1, $p2, $p3);
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_19_9: ref;

axiom ldv_dummy_resourceless_instance_callback_19_9 == $sub.ref(0, 785286);

procedure ldv_dummy_resourceless_instance_callback_19_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_dummy_resourceless_instance_callback_19_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_185: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2075} {:cexpr "ldv_dummy_resourceless_instance_callback_19_9:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 2076} vslice_dummy_var_185 := devirtbounce.23($p0, $p1, $p2, $p3, $i4);
    goto SeqInstr_943, SeqInstr_944;

  SeqInstr_944:
    assume assertsPassed;
    goto SeqInstr_945;

  SeqInstr_945:
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_943:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_19_3: ref;

axiom ldv_dummy_resourceless_instance_callback_19_3 == $sub.ref(0, 786318);

procedure ldv_dummy_resourceless_instance_callback_19_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_19_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_186: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2077} vslice_dummy_var_186 := show_sgid($p1, $p2, $p3);
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_18_9: ref;

axiom ldv_dummy_resourceless_instance_callback_18_9 == $sub.ref(0, 787350);

procedure ldv_dummy_resourceless_instance_callback_18_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_dummy_resourceless_instance_callback_18_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_187: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2078} {:cexpr "ldv_dummy_resourceless_instance_callback_18_9:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 2079} vslice_dummy_var_187 := devirtbounce.23($p0, $p1, $p2, $p3, $i4);
    goto SeqInstr_946, SeqInstr_947;

  SeqInstr_947:
    assume assertsPassed;
    goto SeqInstr_948;

  SeqInstr_948:
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_946:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_18_3: ref;

axiom ldv_dummy_resourceless_instance_callback_18_3 == $sub.ref(0, 788382);

procedure ldv_dummy_resourceless_instance_callback_18_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_18_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_188: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2080} vslice_dummy_var_188 := show_service_id($p1, $p2, $p3);
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_17_9: ref;

axiom ldv_dummy_resourceless_instance_callback_17_9 == $sub.ref(0, 789414);

procedure ldv_dummy_resourceless_instance_callback_17_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_dummy_resourceless_instance_callback_17_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_189: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2081} {:cexpr "ldv_dummy_resourceless_instance_callback_17_9:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 2082} vslice_dummy_var_189 := devirtbounce.23($p0, $p1, $p2, $p3, $i4);
    goto SeqInstr_949, SeqInstr_950;

  SeqInstr_950:
    assume assertsPassed;
    goto SeqInstr_951;

  SeqInstr_951:
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_949:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_17_3: ref;

axiom ldv_dummy_resourceless_instance_callback_17_3 == $sub.ref(0, 790446);

procedure ldv_dummy_resourceless_instance_callback_17_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_17_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_190: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2083} vslice_dummy_var_190 := show_req_lim($p1, $p2, $p3);
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_16_9: ref;

axiom ldv_dummy_resourceless_instance_callback_16_9 == $sub.ref(0, 791478);

procedure ldv_dummy_resourceless_instance_callback_16_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_dummy_resourceless_instance_callback_16_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_191: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2084} {:cexpr "ldv_dummy_resourceless_instance_callback_16_9:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 2085} vslice_dummy_var_191 := devirtbounce.23($p0, $p1, $p2, $p3, $i4);
    goto SeqInstr_952, SeqInstr_953;

  SeqInstr_953:
    assume assertsPassed;
    goto SeqInstr_954;

  SeqInstr_954:
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_952:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_16_3: ref;

axiom ldv_dummy_resourceless_instance_callback_16_3 == $sub.ref(0, 792510);

procedure ldv_dummy_resourceless_instance_callback_16_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_16_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_192: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2086} vslice_dummy_var_192 := show_port($p1, $p2, $p3);
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_15_9: ref;

axiom ldv_dummy_resourceless_instance_callback_15_9 == $sub.ref(0, 793542);

procedure ldv_dummy_resourceless_instance_callback_15_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_dummy_resourceless_instance_callback_15_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_193: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2087} {:cexpr "ldv_dummy_resourceless_instance_callback_15_9:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 2088} vslice_dummy_var_193 := devirtbounce.23($p0, $p1, $p2, $p3, $i4);
    goto SeqInstr_955, SeqInstr_956;

  SeqInstr_956:
    assume assertsPassed;
    goto SeqInstr_957;

  SeqInstr_957:
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_955:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_15_3: ref;

axiom ldv_dummy_resourceless_instance_callback_15_3 == $sub.ref(0, 794574);

procedure ldv_dummy_resourceless_instance_callback_15_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_15_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_194: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2089} vslice_dummy_var_194 := show_pkey($p1, $p2, $p3);
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_14_9: ref;

axiom ldv_dummy_resourceless_instance_callback_14_9 == $sub.ref(0, 795606);

procedure ldv_dummy_resourceless_instance_callback_14_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_dummy_resourceless_instance_callback_14_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_195: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2090} {:cexpr "ldv_dummy_resourceless_instance_callback_14_9:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 2091} vslice_dummy_var_195 := devirtbounce.23($p0, $p1, $p2, $p3, $i4);
    goto SeqInstr_958, SeqInstr_959;

  SeqInstr_959:
    assume assertsPassed;
    goto SeqInstr_960;

  SeqInstr_960:
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_958:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_14_3: ref;

axiom ldv_dummy_resourceless_instance_callback_14_3 == $sub.ref(0, 796638);

procedure ldv_dummy_resourceless_instance_callback_14_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_14_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_196: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2092} vslice_dummy_var_196 := show_orig_dgid($p1, $p2, $p3);
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_13_9: ref;

axiom ldv_dummy_resourceless_instance_callback_13_9 == $sub.ref(0, 797670);

procedure ldv_dummy_resourceless_instance_callback_13_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_dummy_resourceless_instance_callback_13_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_197: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2093} {:cexpr "ldv_dummy_resourceless_instance_callback_13_9:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 2094} vslice_dummy_var_197 := devirtbounce.23($p0, $p1, $p2, $p3, $i4);
    goto SeqInstr_961, SeqInstr_962;

  SeqInstr_962:
    assume assertsPassed;
    goto SeqInstr_963;

  SeqInstr_963:
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_961:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_13_3: ref;

axiom ldv_dummy_resourceless_instance_callback_13_3 == $sub.ref(0, 798702);

procedure ldv_dummy_resourceless_instance_callback_13_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_13_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_198: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2095} vslice_dummy_var_198 := show_local_ib_port($p1, $p2, $p3);
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_12_9: ref;

axiom ldv_dummy_resourceless_instance_callback_12_9 == $sub.ref(0, 799734);

procedure ldv_dummy_resourceless_instance_callback_12_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_dummy_resourceless_instance_callback_12_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_199: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2096} {:cexpr "ldv_dummy_resourceless_instance_callback_12_9:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 2097} vslice_dummy_var_199 := devirtbounce.23($p0, $p1, $p2, $p3, $i4);
    goto SeqInstr_964, SeqInstr_965;

  SeqInstr_965:
    assume assertsPassed;
    goto SeqInstr_966;

  SeqInstr_966:
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_964:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_12_3: ref;

axiom ldv_dummy_resourceless_instance_callback_12_3 == $sub.ref(0, 800766);

procedure ldv_dummy_resourceless_instance_callback_12_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_12_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_200: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2098} vslice_dummy_var_200 := show_local_ib_device($p1, $p2, $p3);
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_11_9: ref;

axiom ldv_dummy_resourceless_instance_callback_11_9 == $sub.ref(0, 801798);

procedure ldv_dummy_resourceless_instance_callback_11_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_dummy_resourceless_instance_callback_11_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_201: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2099} {:cexpr "ldv_dummy_resourceless_instance_callback_11_9:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 2100} vslice_dummy_var_201 := devirtbounce.23($p0, $p1, $p2, $p3, $i4);
    goto SeqInstr_967, SeqInstr_968;

  SeqInstr_968:
    assume assertsPassed;
    goto SeqInstr_969;

  SeqInstr_969:
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_967:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_11_3: ref;

axiom ldv_dummy_resourceless_instance_callback_11_3 == $sub.ref(0, 802830);

procedure ldv_dummy_resourceless_instance_callback_11_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_11_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_202: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2101} vslice_dummy_var_202 := show_ioc_guid($p1, $p2, $p3);
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_10_9: ref;

axiom ldv_dummy_resourceless_instance_callback_10_9 == $sub.ref(0, 803862);

procedure ldv_dummy_resourceless_instance_callback_10_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_dummy_resourceless_instance_callback_10_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_203: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2102} {:cexpr "ldv_dummy_resourceless_instance_callback_10_9:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 2103} vslice_dummy_var_203 := devirtbounce.23($p0, $p1, $p2, $p3, $i4);
    goto SeqInstr_970, SeqInstr_971;

  SeqInstr_971:
    assume assertsPassed;
    goto SeqInstr_972;

  SeqInstr_972:
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_970:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_10_3: ref;

axiom ldv_dummy_resourceless_instance_callback_10_3 == $sub.ref(0, 804894);

procedure ldv_dummy_resourceless_instance_callback_10_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_10_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_204: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2104} vslice_dummy_var_204 := show_id_ext($p1, $p2, $p3);
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_9_9: ref;

axiom ldv_dummy_resourceless_instance_callback_9_9 == $sub.ref(0, 805926);

procedure ldv_dummy_resourceless_instance_callback_9_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_dummy_resourceless_instance_callback_9_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_205: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2105} {:cexpr "ldv_dummy_resourceless_instance_callback_9_9:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 2106} vslice_dummy_var_205 := devirtbounce.23($p0, $p1, $p2, $p3, $i4);
    goto SeqInstr_973, SeqInstr_974;

  SeqInstr_974:
    assume assertsPassed;
    goto SeqInstr_975;

  SeqInstr_975:
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_973:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_9_3: ref;

axiom ldv_dummy_resourceless_instance_callback_9_3 == $sub.ref(0, 806958);

procedure ldv_dummy_resourceless_instance_callback_9_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_9_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_206: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2107} vslice_dummy_var_206 := show_ibdev($p1, $p2, $p3);
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_8_9: ref;

axiom ldv_dummy_resourceless_instance_callback_8_9 == $sub.ref(0, 807990);

procedure ldv_dummy_resourceless_instance_callback_8_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_dummy_resourceless_instance_callback_8_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_207: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2108} {:cexpr "ldv_dummy_resourceless_instance_callback_8_9:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 2109} vslice_dummy_var_207 := devirtbounce.23($p0, $p1, $p2, $p3, $i4);
    goto SeqInstr_976, SeqInstr_977;

  SeqInstr_977:
    assume assertsPassed;
    goto SeqInstr_978;

  SeqInstr_978:
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_976:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_8_3: ref;

axiom ldv_dummy_resourceless_instance_callback_8_3 == $sub.ref(0, 809022);

procedure ldv_dummy_resourceless_instance_callback_8_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_8_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_208: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2110} vslice_dummy_var_208 := show_dgid($p1, $p2, $p3);
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_7_9: ref;

axiom ldv_dummy_resourceless_instance_callback_7_9 == $sub.ref(0, 810054);

procedure ldv_dummy_resourceless_instance_callback_7_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_dummy_resourceless_instance_callback_7_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_209: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2111} {:cexpr "ldv_dummy_resourceless_instance_callback_7_9:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 2112} vslice_dummy_var_209 := devirtbounce.23($p0, $p1, $p2, $p3, $i4);
    goto SeqInstr_979, SeqInstr_980;

  SeqInstr_980:
    assume assertsPassed;
    goto SeqInstr_981;

  SeqInstr_981:
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_979:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_7_3: ref;

axiom ldv_dummy_resourceless_instance_callback_7_3 == $sub.ref(0, 811086);

procedure ldv_dummy_resourceless_instance_callback_7_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_7_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_210: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2113} vslice_dummy_var_210 := show_comp_vector($p1, $p2, $p3);
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_6_9: ref;

axiom ldv_dummy_resourceless_instance_callback_6_9 == $sub.ref(0, 812118);

procedure ldv_dummy_resourceless_instance_callback_6_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_dummy_resourceless_instance_callback_6_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_211: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2114} {:cexpr "ldv_dummy_resourceless_instance_callback_6_9:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 2115} vslice_dummy_var_211 := devirtbounce.23($p0, $p1, $p2, $p3, $i4);
    goto SeqInstr_982, SeqInstr_983;

  SeqInstr_983:
    assume assertsPassed;
    goto SeqInstr_984;

  SeqInstr_984:
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_982:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_6_3: ref;

axiom ldv_dummy_resourceless_instance_callback_6_3 == $sub.ref(0, 813150);

procedure ldv_dummy_resourceless_instance_callback_6_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_6_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_212: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2116} vslice_dummy_var_212 := show_cmd_sg_entries($p1, $p2, $p3);
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_5_9: ref;

axiom ldv_dummy_resourceless_instance_callback_5_9 == $sub.ref(0, 814182);

procedure ldv_dummy_resourceless_instance_callback_5_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_dummy_resourceless_instance_callback_5_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_213: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2117} {:cexpr "ldv_dummy_resourceless_instance_callback_5_9:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 2118} vslice_dummy_var_213 := devirtbounce.23($p0, $p1, $p2, $p3, $i4);
    goto SeqInstr_985, SeqInstr_986;

  SeqInstr_986:
    assume assertsPassed;
    goto SeqInstr_987;

  SeqInstr_987:
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_985:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_5_3: ref;

axiom ldv_dummy_resourceless_instance_callback_5_3 == $sub.ref(0, 815214);

procedure ldv_dummy_resourceless_instance_callback_5_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_5_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_214: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8887;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2119} vslice_dummy_var_214 := show_ch_count($p1, $p2, $p3);
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_4_9: ref;

axiom ldv_dummy_resourceless_instance_callback_4_9 == $sub.ref(0, 816246);

procedure ldv_dummy_resourceless_instance_callback_4_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_dummy_resourceless_instance_callback_4_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_215: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2120} {:cexpr "ldv_dummy_resourceless_instance_callback_4_9:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 2121} vslice_dummy_var_215 := devirtbounce.23($p0, $p1, $p2, $p3, $i4);
    goto SeqInstr_988, SeqInstr_989;

  SeqInstr_989:
    assume assertsPassed;
    goto SeqInstr_990;

  SeqInstr_990:
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_988:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_4_3: ref;

axiom ldv_dummy_resourceless_instance_callback_4_3 == $sub.ref(0, 817278);

procedure ldv_dummy_resourceless_instance_callback_4_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_4_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_216: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2122} vslice_dummy_var_216 := show_allow_ext_sg($p1, $p2, $p3);
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_3_9: ref;

axiom ldv_dummy_resourceless_instance_callback_3_9 == $sub.ref(0, 818310);

procedure ldv_dummy_resourceless_instance_callback_3_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_dummy_resourceless_instance_callback_3_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_217: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2123} {:cexpr "ldv_dummy_resourceless_instance_callback_3_9:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2124} vslice_dummy_var_217 := srp_create_target($p1, $p2, $p3, $i4);
    goto SeqInstr_991, SeqInstr_992;

  SeqInstr_992:
    assume assertsPassed;
    goto SeqInstr_993;

  SeqInstr_993:
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_991:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_3_3: ref;

axiom ldv_dummy_resourceless_instance_callback_3_3 == $sub.ref(0, 819342);

procedure ldv_dummy_resourceless_instance_callback_3_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_3_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_218: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2125} vslice_dummy_var_218 := devirtbounce.24($p0, $p1, $p2, $p3);
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_register_dummy_resourceless_instance_8_28_11: ref;

axiom ldv_dispatch_register_dummy_resourceless_instance_8_28_11 == $sub.ref(0, 820374);

procedure ldv_dispatch_register_dummy_resourceless_instance_8_28_11();
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.12, $M.10, assertsPassed, $M.11;



implementation ldv_dispatch_register_dummy_resourceless_instance_8_28_11()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2126} $p0 := ldv_xmalloc(4);
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2127} ldv_struct_ib_client_dummy_resourceless_instance_22($p2);
    goto SeqInstr_994, SeqInstr_995;

  SeqInstr_995:
    assume assertsPassed;
    goto SeqInstr_996;

  SeqInstr_996:
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_994:
    assume !assertsPassed;
    return;
}



const ldv_struct_ib_client_dummy_resourceless_instance_22: ref;

axiom ldv_struct_ib_client_dummy_resourceless_instance_22 == $sub.ref(0, 821406);

procedure ldv_struct_ib_client_dummy_resourceless_instance_22($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.12, $M.10, $CurrAddr, assertsPassed, $M.11;



implementation ldv_struct_ib_client_dummy_resourceless_instance_22($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i1, $i2, $i3, $i4 := ldv_struct_ib_client_dummy_resourceless_instance_22_loop_$bb1($i1, $i2, $i3, $i4);
    goto $bb1_last;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 2);
    goto corral_source_split_8915;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    $i4 := $i1;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 3);
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2132} ldv_stop();
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i5 == 1;
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2131} ldv_dummy_resourceless_instance_callback_22_3($u21, $u22);
    goto SeqInstr_1000, SeqInstr_1001;

  SeqInstr_1001:
    assume assertsPassed;
    goto SeqInstr_1002;

  SeqInstr_1002:
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb15_dummy;

  SeqInstr_1000:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i2 == 1;
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2130} ldv_dummy_resourceless_instance_callback_22_7($u21, $u22);
    goto SeqInstr_997, SeqInstr_998;

  SeqInstr_998:
    assume assertsPassed;
    goto SeqInstr_999;

  SeqInstr_999:
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_997:
    assume !assertsPassed;
    return;

  $bb15_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2128} $i1 := ldv_undef_int();
    call {:si_unique_call 2129} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_8908;
}



const ldv_dummy_resourceless_instance_callback_22_7: ref;

axiom ldv_dummy_resourceless_instance_callback_22_7 == $sub.ref(0, 822438);

procedure ldv_dummy_resourceless_instance_callback_22_7($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.12, $M.10, assertsPassed, $M.11;



implementation ldv_dummy_resourceless_instance_callback_22_7($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2133} srp_remove_one($p1);
    goto SeqInstr_1003, SeqInstr_1004;

  SeqInstr_1004:
    assume assertsPassed;
    goto SeqInstr_1005;

  SeqInstr_1005:
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1003:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_22_3: ref;

axiom ldv_dummy_resourceless_instance_callback_22_3 == $sub.ref(0, 823470);

procedure ldv_dummy_resourceless_instance_callback_22_3($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.12, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_22_3($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2134} srp_add_one($p1);
    goto SeqInstr_1006, SeqInstr_1007;

  SeqInstr_1007:
    assume assertsPassed;
    goto SeqInstr_1008;

  SeqInstr_1008:
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1006:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_register_dummy_resourceless_instance_9_28_12: ref;

axiom ldv_dispatch_register_dummy_resourceless_instance_9_28_12 == $sub.ref(0, 824502);

procedure ldv_dispatch_register_dummy_resourceless_instance_9_28_12();
  free requires assertsPassed;
  modifies $CurrAddr, $M.123, $M.128;



implementation ldv_dispatch_register_dummy_resourceless_instance_9_28_12()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2135} $p0 := ldv_xmalloc(4);
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2136} ldv_struct_kernel_param_ops_dummy_resourceless_instance_23($p2);
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    return;
}



const ldv_struct_kernel_param_ops_dummy_resourceless_instance_23: ref;

axiom ldv_struct_kernel_param_ops_dummy_resourceless_instance_23 == $sub.ref(0, 825534);

procedure ldv_struct_kernel_param_ops_dummy_resourceless_instance_23($p0: ref);
  free requires assertsPassed;
  modifies $M.123, $M.128, $CurrAddr;



implementation ldv_struct_kernel_param_ops_dummy_resourceless_instance_23($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2137} $i1 := ldv_undef_int();
    call {:si_unique_call 2138} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_8940;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8 := ldv_struct_kernel_param_ops_dummy_resourceless_instance_23_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8);
    goto $bb4_last;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2140} $i4 := ldv_undef_int();
    call {:si_unique_call 2141} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2145} ldv_dummy_resourceless_instance_callback_23_3($u23, $p3, $u24);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2146} ldv_free($p3);
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2147} $i7 := ldv_undef_int();
    call {:si_unique_call 2148} {:cexpr "tmp___2"} boogie_si_record_i32($i7);
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb8_dummy;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2142} $p6 := ldv_xmalloc(1);
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2143} ldv_dummy_resourceless_instance_callback_23_9($u23, $p6, $u24);
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2144} ldv_free($p6);
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb8_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2139} $p3 := ldv_xmalloc(1);
    goto corral_source_split_8945;
}



const ldv_dummy_resourceless_instance_callback_23_9: ref;

axiom ldv_dummy_resourceless_instance_callback_23_9 == $sub.ref(0, 826566);

procedure ldv_dummy_resourceless_instance_callback_23_9($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.123, $M.128, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_23_9($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_219: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2149} vslice_dummy_var_219 := srp_tmo_set($p1, $p2);
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_23_3: ref;

axiom ldv_dummy_resourceless_instance_callback_23_3 == $sub.ref(0, 827598);

procedure ldv_dummy_resourceless_instance_callback_23_3($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_23_3($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_220: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2150} vslice_dummy_var_220 := srp_tmo_get($p1, $p2);
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    return;
}



const srp_tmo_get: ref;

axiom srp_tmo_get == $sub.ref(0, 828630);

procedure srp_tmo_get($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation srp_tmo_get($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i10: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.121, $p3);
    goto corral_source_split_8971;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.122, $p5);
    call {:si_unique_call 2151} {:cexpr "tmo"} boogie_si_record_i32($i6);
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    $i7 := $sge.i32($i6, 0);
    goto corral_source_split_8974;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2154} $i10 := sprintf.ref.ref($p0, .str.30);
    call {:si_unique_call 2155} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_8980;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2152} $i8 := sprintf.ref.ref.i32($p0, .str.29, $i6);
    call {:si_unique_call 2153} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;
}



const srp_tmo_set: ref;

axiom srp_tmo_set == $sub.ref(0, 829662);

procedure srp_tmo_set($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.123, $M.128, $CurrAddr;



implementation srp_tmo_set($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i27: i32;
  var $i17: i32;
  var $i32: i1;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2156} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2157} $i3 := strncmp($p0, .str.30, 3);
    call {:si_unique_call 2158} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    $M.123 := $store.i32($M.123, $p2, $sub.i32(0, 1));
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.124, $p9);
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, $p2i.ref.i64(srp_reconnect_delay));
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.124, $p19);
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, $p2i.ref.i64(srp_fast_io_fail_tmo));
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    $i28 := $M.127;
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    $i29 := $M.125;
    goto corral_source_split_9028;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.123, $p2);
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2165} $i31 := srp_tmo_valid($i28, $i29, $i30);
    call {:si_unique_call 2166} {:cexpr "res"} boogie_si_record_i32($i31);
    assume {:verifier.code 0} true;
    $i27 := $i31;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i17 := $i27;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i17, 0);
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.123, $p2);
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_9035;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.124, $p35);
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    $M.128 := $store.i32($M.128, $p37, $i33);
    goto corral_source_split_9038;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    $i7 := $i17;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb14:
    assume $i32 == 1;
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    $i7 := $i17;
    goto $bb5;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    $i23 := $M.127;
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.123, $p2);
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    $i25 := $M.126;
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2163} $i26 := srp_tmo_valid($i23, $i24, $i25);
    call {:si_unique_call 2164} {:cexpr "res"} boogie_si_record_i32($i26);
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb13;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.123, $p2);
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    $i14 := $M.125;
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    $i15 := $M.126;
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2161} $i16 := srp_tmo_valid($i13, $i14, $i15);
    call {:si_unique_call 2162} {:cexpr "res"} boogie_si_record_i32($i16);
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb10;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2159} $i5 := kstrtoint($p0, 0, $p2);
    call {:si_unique_call 2160} {:cexpr "res"} boogie_si_record_i32($i5);
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb5;
}



const strncmp: ref;

axiom strncmp == $sub.ref(0, 830694);

procedure strncmp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const kstrtoint: ref;

axiom kstrtoint == $sub.ref(0, 831726);

procedure kstrtoint($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtoint($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2167} {:cexpr "kstrtoint:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2168} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2169} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const srp_tmo_valid: ref;

axiom srp_tmo_valid == $sub.ref(0, 832758);

procedure srp_tmo_valid($i0: i32, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation srp_tmo_valid($i0: i32, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2170} {:cexpr "srp_tmo_valid:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 2171} {:cexpr "srp_tmo_valid:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2172} {:cexpr "srp_tmo_valid:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2173} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2174} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_dispatch_register_platform_instance_5_28_13: ref;

axiom ldv_dispatch_register_platform_instance_5_28_13 == $sub.ref(0, 833790);

procedure ldv_dispatch_register_platform_instance_5_28_13();
  free requires assertsPassed;
  modifies $M.70, $M.71, $CurrAddr, $M.1, $M.40, $M.41, $M.42, $M.14, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, assertsPassed, $M.66, $M.67, $M.26, $M.27, $M.28, $M.29, $M.25, $M.12, $M.10, $M.11, $M.17, $M.18, $M.19, $M.16;



implementation ldv_dispatch_register_platform_instance_5_28_13()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2175} $p0 := ldv_xmalloc(4);
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2176} ldv_pm_platform_instance_1($p2);
    goto SeqInstr_1009, SeqInstr_1010;

  SeqInstr_1010:
    assume assertsPassed;
    goto SeqInstr_1011;

  SeqInstr_1011:
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1009:
    assume !assertsPassed;
    return;
}



const ldv_pm_platform_instance_1: ref;

axiom ldv_pm_platform_instance_1 == $sub.ref(0, 834822);

procedure ldv_pm_platform_instance_1($p0: ref);
  free requires assertsPassed;
  modifies $M.70, $M.71, $M.1, $M.40, $M.41, $M.42, $M.14, $CurrAddr, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, assertsPassed, $M.66, $M.67, $M.26, $M.27, $M.28, $M.29, $M.25, $M.12, $M.10, $M.11, $M.17, $M.18, $M.19, $M.16;



implementation ldv_pm_platform_instance_1($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i22: i32;
  var $i28: i1;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2177} $i1 := ldv_undef_int();
    call {:si_unique_call 2178} {:cexpr "tmp___1"} boogie_si_record_i32($i1);
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_9054;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb4;

  $bb4:
    call $i3, $p4, $p5, $p6, $p7, $i8, $i9, $p10, $p11, $i12, $i13, $i14, $p15, $i16, $i17, $i18, $i19, $i20, $i21, $i23, $i24, $i25, $i26, $i27, $i22, $i28, $i29, $p30, $p31, $p32, $p33, $i34, $i35, $p36, $p37, $p38, $i39, $i40 := ldv_pm_platform_instance_1_loop_$bb4($i3, $p4, $p5, $p6, $p7, $i8, $i9, $p10, $p11, $i12, $i13, $i14, $p15, $i16, $i17, $i18, $i19, $i20, $i21, $i23, $i24, $i25, $i26, $i27, $i22, $i28, $i29, $p30, $p31, $p32, $p33, $i34, $i35, $p36, $p37, $p38, $i39, $i40);
    goto $bb4_last;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2179} $p4 := ldv_xmalloc(1464);
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_9060;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2180} ldv_ldv_pre_probe_158();
    goto corral_source_split_9061;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($u25, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.129, $p6);
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i13 := $i3;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2183} $i14 := ldv_ldv_post_probe_159($i13);
    goto SeqInstr_1015, SeqInstr_1016;

  SeqInstr_1016:
    assume assertsPassed;
    goto SeqInstr_1017;

  SeqInstr_1017:
    call {:si_unique_call 2184} {:cexpr "ldv_1_probed_default"} boogie_si_record_i32($i14);
    goto corral_source_split_9073;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p5);
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2185} ldv_free($p15);
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2186} $i16 := ldv_undef_int();
    call {:si_unique_call 2187} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i14, 0);
    goto corral_source_split_9087;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2191} ldv_assume($i24);
    goto corral_source_split_9089;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    $i25 := $i14;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_9093;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2192} $i26 := ldv_undef_int();
    call {:si_unique_call 2193} {:cexpr "tmp___1"} boogie_si_record_i32($i26);
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i27 == 1);
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb15:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i3 := $i25;
    goto $bb15_dummy;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i14, 0);
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2188} ldv_assume($i19);
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2189} $i20 := ldv_undef_int();
    call {:si_unique_call 2190} {:cexpr "tmp___2"} boogie_si_record_i32($i20);
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 1);
    goto corral_source_split_9084;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i21 == 1);
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    $i22 := $i20;
    goto $bb13;

  $bb13:
    call $i22, $i28, $i29, $i39, $i40 := ldv_pm_platform_instance_1_loop_$bb13($i22, $i28, $i29, $i39, $i40);
    goto $bb13_last;

  $bb20:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i22, 2);
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i22, 3);
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2197} ldv_stop();
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb25:
    assume $i29 == 1;
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2195} ldv_dispatch_pm_register_1_6();
    goto SeqInstr_1018, SeqInstr_1019;

  SeqInstr_1019:
    assume assertsPassed;
    goto SeqInstr_1020;

  SeqInstr_1020:
    goto corral_source_split_9116;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2196} ldv_dispatch_pm_deregister_1_5();
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2200} $i39 := ldv_undef_int();
    call {:si_unique_call 2201} {:cexpr "tmp___2"} boogie_si_record_i32($i39);
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 1);
    goto corral_source_split_9130;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb34;

  $bb34:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i22 := $i39;
    goto $bb34_dummy;

  $bb18:
    assume $i40 == 1;
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2194} $p30 := ldv_xmalloc(1464);
    goto corral_source_split_9101;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($u25, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.131, $p32);
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_9105;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p31);
    goto corral_source_split_9126;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2199} ldv_free($p38);
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    $i25 := 1;
    goto $bb14;

  $bb30:
    assume $i35 == 1;
    goto corral_source_split_9121;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($u25, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.132, $p36);
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2198} ldv_platform_instance_release_1_3($p37, $p31);
    goto SeqInstr_1021, SeqInstr_1022;

  SeqInstr_1022:
    assume assertsPassed;
    goto SeqInstr_1023;

  SeqInstr_1023:
    goto corral_source_split_9124;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    goto $bb32;

  SeqInstr_1021:
    assume !assertsPassed;
    return;

  SeqInstr_1018:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i28 == 1;
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb11;

  SeqInstr_1015:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($u25, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.130, $p10);
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2181} $i12 := ldv_platform_instance_probe_1_14($p11, $p5);
    goto SeqInstr_1012, SeqInstr_1013;

  SeqInstr_1013:
    assume assertsPassed;
    goto SeqInstr_1014;

  SeqInstr_1014:
    call {:si_unique_call 2182} {:cexpr "ldv_1_probed_default"} boogie_si_record_i32($i12);
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb7;

  SeqInstr_1012:
    assume !assertsPassed;
    return;

  $bb34_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9058;
}



const ldv_ldv_pre_probe_158: ref;

axiom ldv_ldv_pre_probe_158 == $sub.ref(0, 835854);

procedure ldv_ldv_pre_probe_158();
  free requires assertsPassed;
  modifies $M.70, $M.71;



implementation ldv_ldv_pre_probe_158()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2202} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2203} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2204} ldv_pre_probe();
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    return;
}



const ldv_platform_instance_probe_1_14: ref;

axiom ldv_platform_instance_probe_1_14 == $sub.ref(0, 836886);

procedure ldv_platform_instance_probe_1_14($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.40, $M.41, $M.42, $M.14, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.66, $M.67, assertsPassed, $CurrAddr, $M.26, $M.27, $M.28, $M.29, $M.25, $M.12, $M.10, $M.11, $M.17, $M.18, $M.19, $M.16;



implementation ldv_platform_instance_probe_1_14($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2205} $i2 := devirtbounce.25($p0, $p1);
    goto SeqInstr_1024, SeqInstr_1025;

  SeqInstr_1025:
    assume assertsPassed;
    goto SeqInstr_1026;

  SeqInstr_1026:
    call {:si_unique_call 2206} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_1024:
    assume !assertsPassed;
    return;
}



const ldv_ldv_post_probe_159: ref;

axiom ldv_ldv_post_probe_159 == $sub.ref(0, 837918);

procedure ldv_ldv_post_probe_159($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.70, $M.71, assertsPassed;



implementation ldv_ldv_post_probe_159($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2207} {:cexpr "ldv_ldv_post_probe_159:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2208} ldv_linux_net_register_check_return_value_probe($i0);
    goto SeqInstr_1027, SeqInstr_1028;

  SeqInstr_1028:
    assume assertsPassed;
    goto SeqInstr_1029;

  SeqInstr_1029:
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2209} ldv_linux_usb_register_check_return_value_probe($i0);
    goto SeqInstr_1030, SeqInstr_1031;

  SeqInstr_1031:
    assume assertsPassed;
    goto SeqInstr_1032;

  SeqInstr_1032:
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2210} $i1 := ldv_post_probe($i0);
    call {:si_unique_call 2211} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_9142;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_1030:
    assume !assertsPassed;
    return;

  SeqInstr_1027:
    assume !assertsPassed;
    return;
}



const ldv_platform_instance_release_1_3: ref;

axiom ldv_platform_instance_release_1_3 == $sub.ref(0, 838950);

procedure ldv_platform_instance_release_1_3($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.40, $M.41, $M.42, $M.14, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.66, $M.67, assertsPassed, $CurrAddr, $M.26, $M.27, $M.28, $M.29, $M.25, $M.12, $M.10, $M.11, $M.17, $M.18, $M.19, $M.16;



implementation ldv_platform_instance_release_1_3($p0: ref, $p1: ref)
{
  var vslice_dummy_var_221: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2212} vslice_dummy_var_221 := devirtbounce.25($p0, $p1);
    goto SeqInstr_1033, SeqInstr_1034;

  SeqInstr_1034:
    assume assertsPassed;
    goto SeqInstr_1035;

  SeqInstr_1035:
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1033:
    assume !assertsPassed;
    return;
}



const ldv_entry_EMGentry_28: ref;

axiom ldv_entry_EMGentry_28 == $sub.ref(0, 839982);

procedure ldv_entry_EMGentry_28($p0: ref);
  free requires assertsPassed;
  modifies $M.59, $M.60, $M.9, $M.58, $M.70, $M.71, $M.72, $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, assertsPassed, $M.40, $M.41, $M.42, $M.14, $M.123, $M.128, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.15, $M.12, $M.10, $M.65, $M.11, $M.17, $M.18, $M.19, $M.66, $M.67, $M.16, $M.69;



implementation ldv_entry_EMGentry_28($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9146;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2213} $i1 := ldv_EMGentry_init_srp_init_module_28_17($u26);
    goto SeqInstr_1036, SeqInstr_1037;

  SeqInstr_1037:
    assume assertsPassed;
    goto SeqInstr_1038;

  SeqInstr_1038:
    call {:si_unique_call 2214} {:cexpr "ldv_28_ret_default"} boogie_si_record_i32($i1);
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2215} $i2 := ldv_ldv_post_init_154($i1);
    call {:si_unique_call 2216} {:cexpr "ldv_28_ret_default"} boogie_si_record_i32($i2);
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2217} $i3 := ldv_undef_int();
    call {:si_unique_call 2218} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_9150;

  corral_source_split_9150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i2, 0);
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2222} ldv_assume($i8);
    goto corral_source_split_9162;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2223} $i9 := ldv_undef_int();
    call {:si_unique_call 2224} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_9164;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2235} ldv_EMGentry_exit_srp_cleanup_module_28_2($u27);
    goto SeqInstr_1054, SeqInstr_1055;

  SeqInstr_1055:
    assume assertsPassed;
    goto SeqInstr_1056;

  SeqInstr_1056:
    goto corral_source_split_9178;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2236} ldv_ldv_check_final_state_156();
    goto SeqInstr_1057, SeqInstr_1058;

  SeqInstr_1058:
    assume assertsPassed;
    goto SeqInstr_1059;

  SeqInstr_1059:
    goto corral_source_split_9179;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2237} ldv_stop();
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1057:
    assume !assertsPassed;
    return;

  SeqInstr_1054:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_9166;

  corral_source_split_9166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2225} ldv_dispatch_register_platform_instance_5_28_13();
    goto SeqInstr_1042, SeqInstr_1043;

  SeqInstr_1043:
    assume assertsPassed;
    goto SeqInstr_1044;

  SeqInstr_1044:
    goto corral_source_split_9167;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2226} ldv_dispatch_register_dummy_resourceless_instance_9_28_12();
    goto corral_source_split_9168;

  corral_source_split_9168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2227} ldv_dispatch_register_dummy_resourceless_instance_8_28_11();
    goto SeqInstr_1045, SeqInstr_1046;

  SeqInstr_1046:
    assume assertsPassed;
    goto SeqInstr_1047;

  SeqInstr_1047:
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2228} ldv_dispatch_register_dummy_resourceless_instance_7_28_10();
    goto SeqInstr_1048, SeqInstr_1049;

  SeqInstr_1049:
    assume assertsPassed;
    goto SeqInstr_1050;

  SeqInstr_1050:
    goto corral_source_split_9170;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2229} ldv_dispatch_register_dummy_resourceless_instance_10_28_9();
    goto SeqInstr_1051, SeqInstr_1052;

  SeqInstr_1052:
    assume assertsPassed;
    goto SeqInstr_1053;

  SeqInstr_1053:
    goto corral_source_split_9171;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2230} ldv_dispatch_deregister_platform_instance_5_28_8();
    goto corral_source_split_9172;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2231} ldv_dispatch_deregister_dummy_resourceless_instance_9_28_7();
    goto corral_source_split_9173;

  corral_source_split_9173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2232} ldv_dispatch_deregister_dummy_resourceless_instance_8_28_6();
    goto corral_source_split_9174;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2233} ldv_dispatch_deregister_dummy_resourceless_instance_7_28_5();
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2234} ldv_dispatch_deregister_dummy_resourceless_instance_10_28_4();
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_1051:
    assume !assertsPassed;
    return;

  SeqInstr_1048:
    assume !assertsPassed;
    return;

  SeqInstr_1045:
    assume !assertsPassed;
    return;

  SeqInstr_1042:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_9152;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i2, 0);
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2219} ldv_assume($i6);
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2220} ldv_ldv_check_final_state_155();
    goto SeqInstr_1039, SeqInstr_1040;

  SeqInstr_1040:
    assume assertsPassed;
    goto SeqInstr_1041;

  SeqInstr_1041:
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2221} ldv_stop();
    goto corral_source_split_9157;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1039:
    assume !assertsPassed;
    return;

  SeqInstr_1036:
    assume !assertsPassed;
    return;
}



const ldv_ldv_post_init_154: ref;

axiom ldv_ldv_post_init_154 == $sub.ref(0, 841014);

procedure ldv_ldv_post_init_154($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.70, $M.71;



implementation ldv_ldv_post_init_154($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2238} {:cexpr "ldv_ldv_post_init_154:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2239} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_9183;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2240} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2241} $i1 := ldv_post_init($i0);
    call {:si_unique_call 2242} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_9185;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_ldv_check_final_state_155: ref;

axiom ldv_ldv_check_final_state_155 == $sub.ref(0, 842046);

procedure ldv_ldv_check_final_state_155();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_ldv_check_final_state_155()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2243} ldv_linux_arch_io_check_final_state();
    goto SeqInstr_1060, SeqInstr_1061;

  SeqInstr_1061:
    assume assertsPassed;
    goto SeqInstr_1062;

  SeqInstr_1062:
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2244} ldv_linux_block_genhd_check_final_state();
    goto SeqInstr_1063, SeqInstr_1064;

  SeqInstr_1064:
    assume assertsPassed;
    goto SeqInstr_1065;

  SeqInstr_1065:
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2245} ldv_linux_block_queue_check_final_state();
    goto SeqInstr_1066, SeqInstr_1067;

  SeqInstr_1067:
    assume assertsPassed;
    goto SeqInstr_1068;

  SeqInstr_1068:
    goto corral_source_split_9190;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2246} ldv_linux_block_request_check_final_state();
    goto SeqInstr_1069, SeqInstr_1070;

  SeqInstr_1070:
    assume assertsPassed;
    goto SeqInstr_1071;

  SeqInstr_1071:
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2247} ldv_linux_drivers_base_class_check_final_state();
    goto SeqInstr_1072, SeqInstr_1073;

  SeqInstr_1073:
    assume assertsPassed;
    goto SeqInstr_1074;

  SeqInstr_1074:
    goto corral_source_split_9192;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2248} ldv_linux_fs_char_dev_check_final_state();
    goto SeqInstr_1075, SeqInstr_1076;

  SeqInstr_1076:
    assume assertsPassed;
    goto SeqInstr_1077;

  SeqInstr_1077:
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2249} ldv_linux_fs_sysfs_check_final_state();
    goto SeqInstr_1078, SeqInstr_1079;

  SeqInstr_1079:
    assume assertsPassed;
    goto SeqInstr_1080;

  SeqInstr_1080:
    goto corral_source_split_9194;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2250} ldv_linux_kernel_locking_rwlock_check_final_state();
    goto SeqInstr_1081, SeqInstr_1082;

  SeqInstr_1082:
    assume assertsPassed;
    goto SeqInstr_1083;

  SeqInstr_1083:
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2251} ldv_linux_kernel_module_check_final_state();
    goto SeqInstr_1084, SeqInstr_1085;

  SeqInstr_1085:
    assume assertsPassed;
    goto SeqInstr_1086;

  SeqInstr_1086:
    goto corral_source_split_9196;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2252} ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
    goto SeqInstr_1087, SeqInstr_1088;

  SeqInstr_1088:
    assume assertsPassed;
    goto SeqInstr_1089;

  SeqInstr_1089:
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2253} ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
    goto SeqInstr_1090, SeqInstr_1091;

  SeqInstr_1091:
    assume assertsPassed;
    goto SeqInstr_1092;

  SeqInstr_1092:
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2254} ldv_linux_kernel_rcu_update_lock_check_final_state();
    goto SeqInstr_1093, SeqInstr_1094;

  SeqInstr_1094:
    assume assertsPassed;
    goto SeqInstr_1095;

  SeqInstr_1095:
    goto corral_source_split_9199;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2255} ldv_linux_kernel_rcu_srcu_check_final_state();
    goto SeqInstr_1096, SeqInstr_1097;

  SeqInstr_1097:
    assume assertsPassed;
    goto SeqInstr_1098;

  SeqInstr_1098:
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2256} ldv_linux_lib_idr_check_final_state();
    goto SeqInstr_1099, SeqInstr_1100;

  SeqInstr_1100:
    assume assertsPassed;
    goto SeqInstr_1101;

  SeqInstr_1101:
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2257} ldv_linux_mmc_sdio_func_check_final_state();
    goto SeqInstr_1102, SeqInstr_1103;

  SeqInstr_1103:
    assume assertsPassed;
    goto SeqInstr_1104;

  SeqInstr_1104:
    goto corral_source_split_9202;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2258} ldv_linux_net_rtnetlink_check_final_state();
    goto SeqInstr_1105, SeqInstr_1106;

  SeqInstr_1106:
    assume assertsPassed;
    goto SeqInstr_1107;

  SeqInstr_1107:
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2259} ldv_linux_net_sock_check_final_state();
    goto SeqInstr_1108, SeqInstr_1109;

  SeqInstr_1109:
    assume assertsPassed;
    goto SeqInstr_1110;

  SeqInstr_1110:
    goto corral_source_split_9204;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2260} ldv_linux_usb_coherent_check_final_state();
    goto SeqInstr_1111, SeqInstr_1112;

  SeqInstr_1112:
    assume assertsPassed;
    goto SeqInstr_1113;

  SeqInstr_1113:
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2261} ldv_linux_usb_gadget_check_final_state();
    goto SeqInstr_1114, SeqInstr_1115;

  SeqInstr_1115:
    assume assertsPassed;
    goto SeqInstr_1116;

  SeqInstr_1116:
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2262} ldv_linux_usb_urb_check_final_state();
    goto SeqInstr_1117, SeqInstr_1118;

  SeqInstr_1118:
    assume assertsPassed;
    goto SeqInstr_1119;

  SeqInstr_1119:
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1117:
    assume !assertsPassed;
    return;

  SeqInstr_1114:
    assume !assertsPassed;
    return;

  SeqInstr_1111:
    assume !assertsPassed;
    return;

  SeqInstr_1108:
    assume !assertsPassed;
    return;

  SeqInstr_1105:
    assume !assertsPassed;
    return;

  SeqInstr_1102:
    assume !assertsPassed;
    return;

  SeqInstr_1099:
    assume !assertsPassed;
    return;

  SeqInstr_1096:
    assume !assertsPassed;
    return;

  SeqInstr_1093:
    assume !assertsPassed;
    return;

  SeqInstr_1090:
    assume !assertsPassed;
    return;

  SeqInstr_1087:
    assume !assertsPassed;
    return;

  SeqInstr_1084:
    assume !assertsPassed;
    return;

  SeqInstr_1081:
    assume !assertsPassed;
    return;

  SeqInstr_1078:
    assume !assertsPassed;
    return;

  SeqInstr_1075:
    assume !assertsPassed;
    return;

  SeqInstr_1072:
    assume !assertsPassed;
    return;

  SeqInstr_1069:
    assume !assertsPassed;
    return;

  SeqInstr_1066:
    assume !assertsPassed;
    return;

  SeqInstr_1063:
    assume !assertsPassed;
    return;

  SeqInstr_1060:
    assume !assertsPassed;
    return;
}



const ldv_ldv_check_final_state_156: ref;

axiom ldv_ldv_check_final_state_156 == $sub.ref(0, 843078);

procedure ldv_ldv_check_final_state_156();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_ldv_check_final_state_156()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9209;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2263} ldv_linux_arch_io_check_final_state();
    goto SeqInstr_1120, SeqInstr_1121;

  SeqInstr_1121:
    assume assertsPassed;
    goto SeqInstr_1122;

  SeqInstr_1122:
    goto corral_source_split_9210;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2264} ldv_linux_block_genhd_check_final_state();
    goto SeqInstr_1123, SeqInstr_1124;

  SeqInstr_1124:
    assume assertsPassed;
    goto SeqInstr_1125;

  SeqInstr_1125:
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2265} ldv_linux_block_queue_check_final_state();
    goto SeqInstr_1126, SeqInstr_1127;

  SeqInstr_1127:
    assume assertsPassed;
    goto SeqInstr_1128;

  SeqInstr_1128:
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2266} ldv_linux_block_request_check_final_state();
    goto SeqInstr_1129, SeqInstr_1130;

  SeqInstr_1130:
    assume assertsPassed;
    goto SeqInstr_1131;

  SeqInstr_1131:
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2267} ldv_linux_drivers_base_class_check_final_state();
    goto SeqInstr_1132, SeqInstr_1133;

  SeqInstr_1133:
    assume assertsPassed;
    goto SeqInstr_1134;

  SeqInstr_1134:
    goto corral_source_split_9214;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2268} ldv_linux_fs_char_dev_check_final_state();
    goto SeqInstr_1135, SeqInstr_1136;

  SeqInstr_1136:
    assume assertsPassed;
    goto SeqInstr_1137;

  SeqInstr_1137:
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2269} ldv_linux_fs_sysfs_check_final_state();
    goto SeqInstr_1138, SeqInstr_1139;

  SeqInstr_1139:
    assume assertsPassed;
    goto SeqInstr_1140;

  SeqInstr_1140:
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2270} ldv_linux_kernel_locking_rwlock_check_final_state();
    goto SeqInstr_1141, SeqInstr_1142;

  SeqInstr_1142:
    assume assertsPassed;
    goto SeqInstr_1143;

  SeqInstr_1143:
    goto corral_source_split_9217;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2271} ldv_linux_kernel_module_check_final_state();
    goto SeqInstr_1144, SeqInstr_1145;

  SeqInstr_1145:
    assume assertsPassed;
    goto SeqInstr_1146;

  SeqInstr_1146:
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2272} ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
    goto SeqInstr_1147, SeqInstr_1148;

  SeqInstr_1148:
    assume assertsPassed;
    goto SeqInstr_1149;

  SeqInstr_1149:
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2273} ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
    goto SeqInstr_1150, SeqInstr_1151;

  SeqInstr_1151:
    assume assertsPassed;
    goto SeqInstr_1152;

  SeqInstr_1152:
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2274} ldv_linux_kernel_rcu_update_lock_check_final_state();
    goto SeqInstr_1153, SeqInstr_1154;

  SeqInstr_1154:
    assume assertsPassed;
    goto SeqInstr_1155;

  SeqInstr_1155:
    goto corral_source_split_9221;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2275} ldv_linux_kernel_rcu_srcu_check_final_state();
    goto SeqInstr_1156, SeqInstr_1157;

  SeqInstr_1157:
    assume assertsPassed;
    goto SeqInstr_1158;

  SeqInstr_1158:
    goto corral_source_split_9222;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2276} ldv_linux_lib_idr_check_final_state();
    goto SeqInstr_1159, SeqInstr_1160;

  SeqInstr_1160:
    assume assertsPassed;
    goto SeqInstr_1161;

  SeqInstr_1161:
    goto corral_source_split_9223;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2277} ldv_linux_mmc_sdio_func_check_final_state();
    goto SeqInstr_1162, SeqInstr_1163;

  SeqInstr_1163:
    assume assertsPassed;
    goto SeqInstr_1164;

  SeqInstr_1164:
    goto corral_source_split_9224;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2278} ldv_linux_net_rtnetlink_check_final_state();
    goto SeqInstr_1165, SeqInstr_1166;

  SeqInstr_1166:
    assume assertsPassed;
    goto SeqInstr_1167;

  SeqInstr_1167:
    goto corral_source_split_9225;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2279} ldv_linux_net_sock_check_final_state();
    goto SeqInstr_1168, SeqInstr_1169;

  SeqInstr_1169:
    assume assertsPassed;
    goto SeqInstr_1170;

  SeqInstr_1170:
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2280} ldv_linux_usb_coherent_check_final_state();
    goto SeqInstr_1171, SeqInstr_1172;

  SeqInstr_1172:
    assume assertsPassed;
    goto SeqInstr_1173;

  SeqInstr_1173:
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2281} ldv_linux_usb_gadget_check_final_state();
    goto SeqInstr_1174, SeqInstr_1175;

  SeqInstr_1175:
    assume assertsPassed;
    goto SeqInstr_1176;

  SeqInstr_1176:
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2282} ldv_linux_usb_urb_check_final_state();
    goto SeqInstr_1177, SeqInstr_1178;

  SeqInstr_1178:
    assume assertsPassed;
    goto SeqInstr_1179;

  SeqInstr_1179:
    goto corral_source_split_9229;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1177:
    assume !assertsPassed;
    return;

  SeqInstr_1174:
    assume !assertsPassed;
    return;

  SeqInstr_1171:
    assume !assertsPassed;
    return;

  SeqInstr_1168:
    assume !assertsPassed;
    return;

  SeqInstr_1165:
    assume !assertsPassed;
    return;

  SeqInstr_1162:
    assume !assertsPassed;
    return;

  SeqInstr_1159:
    assume !assertsPassed;
    return;

  SeqInstr_1156:
    assume !assertsPassed;
    return;

  SeqInstr_1153:
    assume !assertsPassed;
    return;

  SeqInstr_1150:
    assume !assertsPassed;
    return;

  SeqInstr_1147:
    assume !assertsPassed;
    return;

  SeqInstr_1144:
    assume !assertsPassed;
    return;

  SeqInstr_1141:
    assume !assertsPassed;
    return;

  SeqInstr_1138:
    assume !assertsPassed;
    return;

  SeqInstr_1135:
    assume !assertsPassed;
    return;

  SeqInstr_1132:
    assume !assertsPassed;
    return;

  SeqInstr_1129:
    assume !assertsPassed;
    return;

  SeqInstr_1126:
    assume !assertsPassed;
    return;

  SeqInstr_1123:
    assume !assertsPassed;
    return;

  SeqInstr_1120:
    assume !assertsPassed;
    return;
}



const ldv_linux_arch_io_check_final_state: ref;

axiom ldv_linux_arch_io_check_final_state == $sub.ref(0, 844110);

procedure ldv_linux_arch_io_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_arch_io_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9231;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    $i0 := $M.133;
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_9233;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_9234;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2283} ldv_assert_linux_arch_io__more_initial_at_exit($i2);
    goto SeqInstr_1180, SeqInstr_1181;

  SeqInstr_1181:
    assume assertsPassed;
    goto SeqInstr_1182;

  SeqInstr_1182:
    goto corral_source_split_9235;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1180:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_genhd_check_final_state: ref;

axiom ldv_linux_block_genhd_check_final_state == $sub.ref(0, 845142);

procedure ldv_linux_block_genhd_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_genhd_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9237;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    $i0 := $M.134;
    goto corral_source_split_9238;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_9240;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2284} ldv_assert_linux_block_genhd__more_initial_at_exit($i2);
    goto SeqInstr_1183, SeqInstr_1184;

  SeqInstr_1184:
    assume assertsPassed;
    goto SeqInstr_1185;

  SeqInstr_1185:
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1183:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_queue_check_final_state: ref;

axiom ldv_linux_block_queue_check_final_state == $sub.ref(0, 846174);

procedure ldv_linux_block_queue_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_queue_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    $i0 := $M.135;
    goto corral_source_split_9244;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2285} ldv_assert_linux_block_queue__more_initial_at_exit($i2);
    goto SeqInstr_1186, SeqInstr_1187;

  SeqInstr_1187:
    assume assertsPassed;
    goto SeqInstr_1188;

  SeqInstr_1188:
    goto corral_source_split_9247;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1186:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_request_check_final_state: ref;

axiom ldv_linux_block_request_check_final_state == $sub.ref(0, 847206);

procedure ldv_linux_block_request_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_request_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    $i0 := $M.136;
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2286} ldv_assert_linux_block_request__get_at_exit($i2);
    goto SeqInstr_1189, SeqInstr_1190;

  SeqInstr_1190:
    assume assertsPassed;
    goto SeqInstr_1191;

  SeqInstr_1191:
    goto corral_source_split_9253;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1189:
    assume !assertsPassed;
    return;
}



const ldv_linux_drivers_base_class_check_final_state: ref;

axiom ldv_linux_drivers_base_class_check_final_state == $sub.ref(0, 848238);

procedure ldv_linux_drivers_base_class_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_drivers_base_class_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    $i0 := $M.72;
    goto corral_source_split_9256;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_9258;

  corral_source_split_9258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2287} ldv_assert_linux_drivers_base_class__registered_at_exit($i2);
    goto SeqInstr_1192, SeqInstr_1193;

  SeqInstr_1193:
    assume assertsPassed;
    goto SeqInstr_1194;

  SeqInstr_1194:
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1192:
    assume !assertsPassed;
    return;
}



const ldv_linux_fs_char_dev_check_final_state: ref;

axiom ldv_linux_fs_char_dev_check_final_state == $sub.ref(0, 849270);

procedure ldv_linux_fs_char_dev_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_fs_char_dev_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    $i0 := $M.137;
    goto corral_source_split_9262;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_9264;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2288} ldv_assert_linux_fs_char_dev__registered_at_exit($i2);
    goto SeqInstr_1195, SeqInstr_1196;

  SeqInstr_1196:
    assume assertsPassed;
    goto SeqInstr_1197;

  SeqInstr_1197:
    goto corral_source_split_9265;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1195:
    assume !assertsPassed;
    return;
}



const ldv_linux_fs_sysfs_check_final_state: ref;

axiom ldv_linux_fs_sysfs_check_final_state == $sub.ref(0, 850302);

procedure ldv_linux_fs_sysfs_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_fs_sysfs_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9267;

  corral_source_split_9267:
    assume {:verifier.code 0} true;
    $i0 := $M.138;
    goto corral_source_split_9268;

  corral_source_split_9268:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_9270;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2289} ldv_assert_linux_fs_sysfs__more_initial_at_exit($i2);
    goto SeqInstr_1198, SeqInstr_1199;

  SeqInstr_1199:
    assume assertsPassed;
    goto SeqInstr_1200;

  SeqInstr_1200:
    goto corral_source_split_9271;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1198:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_rwlock_check_final_state: ref;

axiom ldv_linux_kernel_locking_rwlock_check_final_state == $sub.ref(0, 851334);

procedure ldv_linux_kernel_locking_rwlock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_locking_rwlock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    $i0 := $M.139;
    goto corral_source_split_9274;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_9276;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2290} ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i2);
    goto SeqInstr_1201, SeqInstr_1202;

  SeqInstr_1202:
    assume assertsPassed;
    goto SeqInstr_1203;

  SeqInstr_1203:
    goto corral_source_split_9277;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    $i3 := $M.140;
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_9279;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_9280;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2291} ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i5);
    goto SeqInstr_1204, SeqInstr_1205;

  SeqInstr_1205:
    assume assertsPassed;
    goto SeqInstr_1206;

  SeqInstr_1206:
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1204:
    assume !assertsPassed;
    return;

  SeqInstr_1201:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_module_check_final_state: ref;

axiom ldv_linux_kernel_module_check_final_state == $sub.ref(0, 852366);

procedure ldv_linux_kernel_module_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_module_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    $i0 := $M.141;
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_9285;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2292} ldv_assert_linux_kernel_module__more_initial_at_exit($i2);
    goto SeqInstr_1207, SeqInstr_1208;

  SeqInstr_1208:
    assume assertsPassed;
    goto SeqInstr_1209;

  SeqInstr_1209:
    goto corral_source_split_9287;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1207:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_bh_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_bh_check_final_state == $sub.ref(0, 853398);

procedure ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_bh_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9289;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    $i0 := $M.142;
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_9291;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_9292;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2293} ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i2);
    goto SeqInstr_1210, SeqInstr_1211;

  SeqInstr_1211:
    assume assertsPassed;
    goto SeqInstr_1212;

  SeqInstr_1212:
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1210:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_sched_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_sched_check_final_state == $sub.ref(0, 854430);

procedure ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_sched_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9295;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    $i0 := $M.143;
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_9298;

  corral_source_split_9298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2294} ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i2);
    goto SeqInstr_1213, SeqInstr_1214;

  SeqInstr_1214:
    assume assertsPassed;
    goto SeqInstr_1215;

  SeqInstr_1215:
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1213:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_check_final_state == $sub.ref(0, 855462);

procedure ldv_linux_kernel_rcu_update_lock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    $i0 := $M.144;
    goto corral_source_split_9302;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_9303;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2295} ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i2);
    goto SeqInstr_1216, SeqInstr_1217;

  SeqInstr_1217:
    assume assertsPassed;
    goto SeqInstr_1218;

  SeqInstr_1218:
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1216:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_srcu_check_final_state: ref;

axiom ldv_linux_kernel_rcu_srcu_check_final_state == $sub.ref(0, 856494);

procedure ldv_linux_kernel_rcu_srcu_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_srcu_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    $i0 := $M.145;
    goto corral_source_split_9308;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_9310;

  corral_source_split_9310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2296} ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i2);
    goto SeqInstr_1219, SeqInstr_1220;

  SeqInstr_1220:
    assume assertsPassed;
    goto SeqInstr_1221;

  SeqInstr_1221:
    goto corral_source_split_9311;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1219:
    assume !assertsPassed;
    return;
}



const ldv_linux_lib_idr_check_final_state: ref;

axiom ldv_linux_lib_idr_check_final_state == $sub.ref(0, 857526);

procedure ldv_linux_lib_idr_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_lib_idr_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9313;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    $i0 := $M.146;
    goto corral_source_split_9314;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_9321;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    $i3 := $M.146;
    goto corral_source_split_9322;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 3);
    goto corral_source_split_9323;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2297} ldv_assert_linux_lib_idr__more_at_exit($i5);
    goto SeqInstr_1222, SeqInstr_1223;

  SeqInstr_1223:
    assume assertsPassed;
    goto SeqInstr_1224;

  SeqInstr_1224:
    goto corral_source_split_9319;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1222:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const ldv_linux_mmc_sdio_func_check_final_state: ref;

axiom ldv_linux_mmc_sdio_func_check_final_state == $sub.ref(0, 858558);

procedure ldv_linux_mmc_sdio_func_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_mmc_sdio_func_check_final_state()
{
  var $i0: i16;
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9325;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    $i0 := $M.147;
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_9328;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2298} ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i3);
    goto SeqInstr_1225, SeqInstr_1226;

  SeqInstr_1226:
    assume assertsPassed;
    goto SeqInstr_1227;

  SeqInstr_1227:
    goto corral_source_split_9330;

  corral_source_split_9330:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1225:
    assume !assertsPassed;
    return;
}



const ldv_linux_net_rtnetlink_check_final_state: ref;

axiom ldv_linux_net_rtnetlink_check_final_state == $sub.ref(0, 859590);

procedure ldv_linux_net_rtnetlink_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_net_rtnetlink_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9332;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    $i0 := $M.148;
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_9334;

  corral_source_split_9334:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2299} ldv_assert_linux_net_rtnetlink__lock_on_exit($i2);
    goto SeqInstr_1228, SeqInstr_1229;

  SeqInstr_1229:
    assume assertsPassed;
    goto SeqInstr_1230;

  SeqInstr_1230:
    goto corral_source_split_9336;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1228:
    assume !assertsPassed;
    return;
}



const ldv_linux_net_sock_check_final_state: ref;

axiom ldv_linux_net_sock_check_final_state == $sub.ref(0, 860622);

procedure ldv_linux_net_sock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_net_sock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    $i0 := $M.149;
    goto corral_source_split_9339;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_9340;

  corral_source_split_9340:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2300} ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i2);
    goto SeqInstr_1231, SeqInstr_1232;

  SeqInstr_1232:
    assume assertsPassed;
    goto SeqInstr_1233;

  SeqInstr_1233:
    goto corral_source_split_9342;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1231:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_coherent_check_final_state: ref;

axiom ldv_linux_usb_coherent_check_final_state == $sub.ref(0, 861654);

procedure ldv_linux_usb_coherent_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_coherent_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    $i0 := $M.150;
    goto corral_source_split_9345;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_9346;

  corral_source_split_9346:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2301} ldv_assert_linux_usb_coherent__more_initial_at_exit($i2);
    goto SeqInstr_1234, SeqInstr_1235;

  SeqInstr_1235:
    assume assertsPassed;
    goto SeqInstr_1236;

  SeqInstr_1236:
    goto corral_source_split_9348;

  corral_source_split_9348:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1234:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_gadget_check_final_state: ref;

axiom ldv_linux_usb_gadget_check_final_state == $sub.ref(0, 862686);

procedure ldv_linux_usb_gadget_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_gadget_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    $i0 := $M.73;
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_9352;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2302} ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i2);
    goto SeqInstr_1237, SeqInstr_1238;

  SeqInstr_1238:
    assume assertsPassed;
    goto SeqInstr_1239;

  SeqInstr_1239:
    goto corral_source_split_9354;

  corral_source_split_9354:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1237:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_urb_check_final_state: ref;

axiom ldv_linux_usb_urb_check_final_state == $sub.ref(0, 863718);

procedure ldv_linux_usb_urb_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_urb_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9356;

  corral_source_split_9356:
    assume {:verifier.code 0} true;
    $i0 := $M.151;
    goto corral_source_split_9357;

  corral_source_split_9357:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2303} ldv_assert_linux_usb_urb__more_initial_at_exit($i2);
    goto SeqInstr_1240, SeqInstr_1241;

  SeqInstr_1241:
    assume assertsPassed;
    goto SeqInstr_1242;

  SeqInstr_1242:
    goto corral_source_split_9360;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1240:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_usb_urb__more_initial_at_exit: ref;

axiom ldv_assert_linux_usb_urb__more_initial_at_exit == $sub.ref(0, 864750);

procedure ldv_assert_linux_usb_urb__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_urb__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2304} {:cexpr "ldv_assert_linux_usb_urb__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9363;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2305} __VERIFIER_error();
    goto SeqInstr_1243, SeqInstr_1244;

  SeqInstr_1244:
    assume assertsPassed;
    goto SeqInstr_1245;

  SeqInstr_1245:
    goto corral_source_split_9366;

  corral_source_split_9366:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1243:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit: ref;

axiom ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit == $sub.ref(0, 865782);

procedure ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2306} {:cexpr "ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9369;

  corral_source_split_9369:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_9371;

  corral_source_split_9371:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2307} __VERIFIER_error();
    goto SeqInstr_1246, SeqInstr_1247;

  SeqInstr_1247:
    assume assertsPassed;
    goto SeqInstr_1248;

  SeqInstr_1248:
    goto corral_source_split_9372;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1246:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_usb_coherent__more_initial_at_exit: ref;

axiom ldv_assert_linux_usb_coherent__more_initial_at_exit == $sub.ref(0, 866814);

procedure ldv_assert_linux_usb_coherent__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_coherent__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2308} {:cexpr "ldv_assert_linux_usb_coherent__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9375;

  corral_source_split_9375:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_9377;

  corral_source_split_9377:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2309} __VERIFIER_error();
    goto SeqInstr_1249, SeqInstr_1250;

  SeqInstr_1250:
    assume assertsPassed;
    goto SeqInstr_1251;

  SeqInstr_1251:
    goto corral_source_split_9378;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1249:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_net_sock__all_locked_sockets_must_be_released: ref;

axiom ldv_assert_linux_net_sock__all_locked_sockets_must_be_released == $sub.ref(0, 867846);

procedure ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2310} {:cexpr "ldv_assert_linux_net_sock__all_locked_sockets_must_be_released:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_9380;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2311} __VERIFIER_error();
    goto SeqInstr_1252, SeqInstr_1253;

  SeqInstr_1253:
    assume assertsPassed;
    goto SeqInstr_1254;

  SeqInstr_1254:
    goto corral_source_split_9384;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1252:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_net_rtnetlink__lock_on_exit: ref;

axiom ldv_assert_linux_net_rtnetlink__lock_on_exit == $sub.ref(0, 868878);

procedure ldv_assert_linux_net_rtnetlink__lock_on_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_rtnetlink__lock_on_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2312} {:cexpr "ldv_assert_linux_net_rtnetlink__lock_on_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9387;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2313} __VERIFIER_error();
    goto SeqInstr_1255, SeqInstr_1256;

  SeqInstr_1256:
    assume assertsPassed;
    goto SeqInstr_1257;

  SeqInstr_1257:
    goto corral_source_split_9390;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1255:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_mmc_sdio_func__unreleased_at_exit: ref;

axiom ldv_assert_linux_mmc_sdio_func__unreleased_at_exit == $sub.ref(0, 869910);

procedure ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2314} {:cexpr "ldv_assert_linux_mmc_sdio_func__unreleased_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_9392;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9393;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_9395;

  corral_source_split_9395:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2315} __VERIFIER_error();
    goto SeqInstr_1258, SeqInstr_1259;

  SeqInstr_1259:
    assume assertsPassed;
    goto SeqInstr_1260;

  SeqInstr_1260:
    goto corral_source_split_9396;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1258:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_lib_idr__more_at_exit: ref;

axiom ldv_assert_linux_lib_idr__more_at_exit == $sub.ref(0, 870942);

procedure ldv_assert_linux_lib_idr__more_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_lib_idr__more_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2316} {:cexpr "ldv_assert_linux_lib_idr__more_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9399;

  corral_source_split_9399:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_9401;

  corral_source_split_9401:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2317} __VERIFIER_error();
    goto SeqInstr_1261, SeqInstr_1262;

  SeqInstr_1262:
    assume assertsPassed;
    goto SeqInstr_1263;

  SeqInstr_1263:
    goto corral_source_split_9402;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1261:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_srcu__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_srcu__locked_at_exit == $sub.ref(0, 871974);

procedure ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2318} {:cexpr "ldv_assert_linux_kernel_rcu_srcu__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9405;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2319} __VERIFIER_error();
    goto SeqInstr_1264, SeqInstr_1265;

  SeqInstr_1265:
    assume assertsPassed;
    goto SeqInstr_1266;

  SeqInstr_1266:
    goto corral_source_split_9408;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1264:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit == $sub.ref(0, 873006);

procedure ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2320} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_9410;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9411;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2321} __VERIFIER_error();
    goto SeqInstr_1267, SeqInstr_1268;

  SeqInstr_1268:
    assume assertsPassed;
    goto SeqInstr_1269;

  SeqInstr_1269:
    goto corral_source_split_9414;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1267:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit == $sub.ref(0, 874038);

procedure ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2322} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_9416;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9417;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_9419;

  corral_source_split_9419:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2323} __VERIFIER_error();
    goto SeqInstr_1270, SeqInstr_1271;

  SeqInstr_1271:
    assume assertsPassed;
    goto SeqInstr_1272;

  SeqInstr_1272:
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1270:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit == $sub.ref(0, 875070);

procedure ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2324} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9423;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_9425;

  corral_source_split_9425:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2325} __VERIFIER_error();
    goto SeqInstr_1273, SeqInstr_1274;

  SeqInstr_1274:
    assume assertsPassed;
    goto SeqInstr_1275;

  SeqInstr_1275:
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1273:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_module__more_initial_at_exit: ref;

axiom ldv_assert_linux_kernel_module__more_initial_at_exit == $sub.ref(0, 876102);

procedure ldv_assert_linux_kernel_module__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_module__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2326} {:cexpr "ldv_assert_linux_kernel_module__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_9428;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_9431;

  corral_source_split_9431:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2327} __VERIFIER_error();
    goto SeqInstr_1276, SeqInstr_1277;

  SeqInstr_1277:
    assume assertsPassed;
    goto SeqInstr_1278;

  SeqInstr_1278:
    goto corral_source_split_9432;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1276:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit: ref;

axiom ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit == $sub.ref(0, 877134);

procedure ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2328} {:cexpr "ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9435;

  corral_source_split_9435:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_9437;

  corral_source_split_9437:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2329} __VERIFIER_error();
    goto SeqInstr_1279, SeqInstr_1280;

  SeqInstr_1280:
    assume assertsPassed;
    goto SeqInstr_1281;

  SeqInstr_1281:
    goto corral_source_split_9438;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1279:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit: ref;

axiom ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit == $sub.ref(0, 878166);

procedure ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2330} {:cexpr "ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_9440;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_9443;

  corral_source_split_9443:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2331} __VERIFIER_error();
    goto SeqInstr_1282, SeqInstr_1283;

  SeqInstr_1283:
    assume assertsPassed;
    goto SeqInstr_1284;

  SeqInstr_1284:
    goto corral_source_split_9444;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1282:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_sysfs__more_initial_at_exit: ref;

axiom ldv_assert_linux_fs_sysfs__more_initial_at_exit == $sub.ref(0, 879198);

procedure ldv_assert_linux_fs_sysfs__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_sysfs__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2332} {:cexpr "ldv_assert_linux_fs_sysfs__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_9446;

  corral_source_split_9446:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9447;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_9449;

  corral_source_split_9449:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2333} __VERIFIER_error();
    goto SeqInstr_1285, SeqInstr_1286;

  SeqInstr_1286:
    assume assertsPassed;
    goto SeqInstr_1287;

  SeqInstr_1287:
    goto corral_source_split_9450;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1285:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_char_dev__registered_at_exit: ref;

axiom ldv_assert_linux_fs_char_dev__registered_at_exit == $sub.ref(0, 880230);

procedure ldv_assert_linux_fs_char_dev__registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_char_dev__registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2334} {:cexpr "ldv_assert_linux_fs_char_dev__registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9453;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_9455;

  corral_source_split_9455:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2335} __VERIFIER_error();
    goto SeqInstr_1288, SeqInstr_1289;

  SeqInstr_1289:
    assume assertsPassed;
    goto SeqInstr_1290;

  SeqInstr_1290:
    goto corral_source_split_9456;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1288:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_drivers_base_class__registered_at_exit: ref;

axiom ldv_assert_linux_drivers_base_class__registered_at_exit == $sub.ref(0, 881262);

procedure ldv_assert_linux_drivers_base_class__registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_drivers_base_class__registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2336} {:cexpr "ldv_assert_linux_drivers_base_class__registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_9458;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9459;

  corral_source_split_9459:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_9461;

  corral_source_split_9461:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2337} __VERIFIER_error();
    goto SeqInstr_1291, SeqInstr_1292;

  SeqInstr_1292:
    assume assertsPassed;
    goto SeqInstr_1293;

  SeqInstr_1293:
    goto corral_source_split_9462;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1291:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_request__get_at_exit: ref;

axiom ldv_assert_linux_block_request__get_at_exit == $sub.ref(0, 882294);

procedure ldv_assert_linux_block_request__get_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_request__get_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2338} {:cexpr "ldv_assert_linux_block_request__get_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_9464;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9465;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_9467;

  corral_source_split_9467:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2339} __VERIFIER_error();
    goto SeqInstr_1294, SeqInstr_1295;

  SeqInstr_1295:
    assume assertsPassed;
    goto SeqInstr_1296;

  SeqInstr_1296:
    goto corral_source_split_9468;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1294:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_queue__more_initial_at_exit: ref;

axiom ldv_assert_linux_block_queue__more_initial_at_exit == $sub.ref(0, 883326);

procedure ldv_assert_linux_block_queue__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_queue__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2340} {:cexpr "ldv_assert_linux_block_queue__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9471;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_9473;

  corral_source_split_9473:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2341} __VERIFIER_error();
    goto SeqInstr_1297, SeqInstr_1298;

  SeqInstr_1298:
    assume assertsPassed;
    goto SeqInstr_1299;

  SeqInstr_1299:
    goto corral_source_split_9474;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1297:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_genhd__more_initial_at_exit: ref;

axiom ldv_assert_linux_block_genhd__more_initial_at_exit == $sub.ref(0, 884358);

procedure ldv_assert_linux_block_genhd__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_genhd__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2342} {:cexpr "ldv_assert_linux_block_genhd__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9477;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2343} __VERIFIER_error();
    goto SeqInstr_1300, SeqInstr_1301;

  SeqInstr_1301:
    assume assertsPassed;
    goto SeqInstr_1302;

  SeqInstr_1302:
    goto corral_source_split_9480;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1300:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_arch_io__more_initial_at_exit: ref;

axiom ldv_assert_linux_arch_io__more_initial_at_exit == $sub.ref(0, 885390);

procedure ldv_assert_linux_arch_io__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_arch_io__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2344} {:cexpr "ldv_assert_linux_arch_io__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_9482;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9483;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_9485;

  corral_source_split_9485:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2345} __VERIFIER_error();
    goto SeqInstr_1303, SeqInstr_1304;

  SeqInstr_1304:
    assume assertsPassed;
    goto SeqInstr_1305;

  SeqInstr_1305:
    goto corral_source_split_9486;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1303:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_post_init: ref;

axiom ldv_post_init == $sub.ref(0, 886422);

procedure ldv_post_init($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_post_init($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2346} {:cexpr "ldv_post_init:arg:init_ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_9488;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2347} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 2348} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_9489;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 887454);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $M.133, $M.136, $M.72, $M.137, $M.138, $M.139, $M.140, $M.141, $M.145, $M.142, $M.143, $M.144, $M.147, $M.70, $M.148, $M.149, $M.150, $M.73, $M.71, $M.151, $M.65, $M.67, $M.146, $M.66, $M.12, $M.17, $M.10, $M.11, $M.15, $M.16, $M.0, $M.135, $M.134, $M.68, $M.62, $M.215, $M.216, $M.61, $M.1, $M.20, $M.217, $M.2, $M.126, $M.125, $M.127, $M.60, $M.59, $M.74, $M.9, $M.58, $M.228, $M.234, $M.235, $M.236, $M.237, $M.238, $M.239, $M.240, $M.241, $M.242, $M.243, $M.244, $CurrAddr, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, assertsPassed, $M.40, $M.41, $M.42, $M.14, $M.123, $M.128, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.18, $M.19, $M.69;



implementation main() returns ($r: i32)
{

  $bb0:
    call {:si_unique_call 2349} $initialize();
    goto corral_source_split_9491;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2350} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_9492;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2351} ldv_ldv_initialize_157();
    goto corral_source_split_9493;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2352} ldv_entry_EMGentry_28($0.ref);
    goto SeqInstr_1306, SeqInstr_1307;

  SeqInstr_1307:
    assume assertsPassed;
    goto SeqInstr_1308;

  SeqInstr_1308:
    goto corral_source_split_9494;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_1306:
    assume !assertsPassed;
    return;
}



const ldv_ldv_initialize_157: ref;

axiom ldv_ldv_initialize_157 == $sub.ref(0, 888486);

procedure ldv_ldv_initialize_157();
  free requires assertsPassed;



implementation ldv_ldv_initialize_157()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2353} ldv_linux_lib_find_bit_initialize();
    goto corral_source_split_9497;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_lib_find_bit_initialize: ref;

axiom ldv_linux_lib_find_bit_initialize == $sub.ref(0, 889518);

procedure ldv_linux_lib_find_bit_initialize();
  free requires assertsPassed;



implementation ldv_linux_lib_find_bit_initialize()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9499;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    $i0 := $load.i32($M.1, nr_cpu_ids);
    goto corral_source_split_9500;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    $i1 := $sgt.i32($i0, 0);
    goto corral_source_split_9501;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_9502;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2354} ldv_assume($i2);
    goto corral_source_split_9503;

  corral_source_split_9503:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 890550);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2355} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_9505;

  corral_source_split_9505:
    assume {:verifier.code 1} true;
    goto corral_source_split_9506;

  corral_source_split_9506:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_9507;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 891582);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 892614);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 893646);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9509;

  corral_source_split_9509:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_1309, SeqInstr_1310;

  SeqInstr_1310:
    assume assertsPassed;
    goto SeqInstr_1311;

  SeqInstr_1311:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_9510;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1309:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 894678);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 895710);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 896742);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 897774);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 898806);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 899838);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 900870);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 901902);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 902934);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 903966);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9512;

  corral_source_split_9512:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2356} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 2357} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2358} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_9513;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_9514;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_9519;

  corral_source_split_9519:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2359} __VERIFIER_assume($i4);
    goto corral_source_split_9520;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_9516;

  corral_source_split_9516:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 904998);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 906030);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 907062);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 908094);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9522;

  corral_source_split_9522:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2360} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 2361} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2362} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_9523;

  corral_source_split_9523:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2363} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 2364} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 2365} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_9524;

  corral_source_split_9524:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2366} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 2367} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 2368} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_9525;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_9526;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9531;

  corral_source_split_9531:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_9532;

  corral_source_split_9532:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2369} __VERIFIER_assume($i7);
    goto corral_source_split_9533;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_9534;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_9540;

  corral_source_split_9540:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_9541;

  corral_source_split_9541:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2370} __VERIFIER_assume($i11);
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_9538;

  corral_source_split_9538:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9528;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_9529;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_9536;

  corral_source_split_9536:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 909126);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 910158);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 911190);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 912222);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 913254);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 914286);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9544;

  corral_source_split_9544:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2371} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2372} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2373} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_9545;

  corral_source_split_9545:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2374} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2375} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 2376} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_9546;

  corral_source_split_9546:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2377} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2378} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 2379} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_9547;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_9548;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9553;

  corral_source_split_9553:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_9554;

  corral_source_split_9554:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2380} __VERIFIER_assume($i7);
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_9556;

  corral_source_split_9556:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_9562;

  corral_source_split_9562:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2381} __VERIFIER_assume($i11);
    goto corral_source_split_9564;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_9560;

  corral_source_split_9560:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9550;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_9558;

  corral_source_split_9558:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 915318);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 916350);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 917382);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 918414);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 919446);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 920478);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 921510);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 922542);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 923574);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9566;

  corral_source_split_9566:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2382} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2383} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9567;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9568;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 2384} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_9569;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_9570;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_9571;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_9572;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_9579;

  corral_source_split_9579:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_9580;

  corral_source_split_9580:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_9581;

  corral_source_split_9581:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_9582;

  corral_source_split_9582:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_9574;

  corral_source_split_9574:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_9575;

  corral_source_split_9575:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2385} __VERIFIER_assume($i10);
    goto corral_source_split_9576;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_9577;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 924606);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9584;

  corral_source_split_9584:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2386} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 2387} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2388} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_9585;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 925638);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9587;

  corral_source_split_9587:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2389} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 2390} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2391} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_9588;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 926670);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9590;

  corral_source_split_9590:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2392} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 2393} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_9591;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 927702);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 928734);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2394} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2395} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 929766);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 930798);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9593;

  corral_source_split_9593:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_9594;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 931830);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_69: [ref]i8;
  var cmdloc_dummy_var_70: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2396} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 2397} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2398} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2399} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_9597;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_9598;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_9602;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_9603;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2400} $p6 := malloc($i5);
    goto corral_source_split_9604;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_9605;

  corral_source_split_9605:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_69 := $M.1;
    call {:si_unique_call 2401} cmdloc_dummy_var_70 := $memset.i8(cmdloc_dummy_var_69, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_70;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9607;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9600;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 932862);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 933894);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.13, $M.133, $M.136, $M.72, $M.137, $M.138, $M.139, $M.140, $M.141, $M.145, $M.142, $M.143, $M.144, $M.147, $M.70, $M.148, $M.149, $M.150, $M.73, $M.71, $M.151, $M.65, $M.67, $M.146, $M.66, $M.12, $M.17, $M.10, $M.11, $M.15, $M.16, $M.0, $M.135, $M.134, $M.68, $M.62, $M.215, $M.216, $M.61, $M.1, $M.20, $M.217, $M.2, $M.126, $M.125, $M.127, $M.60, $M.59, $M.74, $M.9, $M.58, $M.228, $M.234, $M.235, $M.236, $M.237, $M.238, $M.239, $M.240, $M.241, $M.242, $M.243, $M.244;



implementation __SMACK_static_init()
{

  $bb0:
    $M.13 := 1;
    call {:si_unique_call 2402} {:cexpr "ldv_linux_alloc_usb_lock_lock"} boogie_si_record_i32(1);
    $M.133 := 0;
    call {:si_unique_call 2403} {:cexpr "ldv_linux_arch_io_iomem"} boogie_si_record_i32(0);
    $M.136 := 0;
    call {:si_unique_call 2404} {:cexpr "ldv_linux_block_request_blk_rq"} boogie_si_record_i32(0);
    $M.72 := 0;
    call {:si_unique_call 2405} {:cexpr "ldv_linux_drivers_base_class_usb_gadget_class"} boogie_si_record_i32(0);
    $M.137 := 0;
    call {:si_unique_call 2406} {:cexpr "ldv_linux_fs_char_dev_usb_gadget_chrdev"} boogie_si_record_i32(0);
    $M.138 := 0;
    call {:si_unique_call 2407} {:cexpr "ldv_linux_fs_sysfs_sysfs"} boogie_si_record_i32(0);
    $M.139 := 1;
    call {:si_unique_call 2408} {:cexpr "ldv_linux_kernel_locking_rwlock_rlock"} boogie_si_record_i32(1);
    $M.140 := 1;
    call {:si_unique_call 2409} {:cexpr "ldv_linux_kernel_locking_rwlock_wlock"} boogie_si_record_i32(1);
    $M.141 := 1;
    call {:si_unique_call 2410} {:cexpr "ldv_linux_kernel_module_module_refcounter"} boogie_si_record_i32(1);
    $M.145 := 0;
    call {:si_unique_call 2411} {:cexpr "ldv_linux_kernel_rcu_srcu_srcu_nested"} boogie_si_record_i32(0);
    $M.142 := 0;
    call {:si_unique_call 2412} {:cexpr "ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh"} boogie_si_record_i32(0);
    $M.143 := 0;
    call {:si_unique_call 2413} {:cexpr "ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched"} boogie_si_record_i32(0);
    $M.144 := 0;
    call {:si_unique_call 2414} {:cexpr "ldv_linux_kernel_rcu_update_lock_rcu_nested"} boogie_si_record_i32(0);
    $M.147 := 0;
    call {:si_unique_call 2415} {:cexpr "ldv_linux_mmc_sdio_func_sdio_element"} boogie_si_record_i16(0);
    $M.70 := 0;
    call {:si_unique_call 2416} {:cexpr "ldv_linux_net_register_probe_state"} boogie_si_record_i32(0);
    $M.148 := 0;
    call {:si_unique_call 2417} {:cexpr "rtnllocknumber"} boogie_si_record_i32(0);
    $M.149 := 0;
    call {:si_unique_call 2418} {:cexpr "locksocknumber"} boogie_si_record_i32(0);
    $M.150 := 0;
    call {:si_unique_call 2419} {:cexpr "ldv_linux_usb_coherent_coherent_state"} boogie_si_record_i32(0);
    call {:si_unique_call 2420} {:cexpr "LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS"} boogie_si_record_i32(0);
    $M.73 := 0;
    call {:si_unique_call 2421} {:cexpr "ldv_linux_usb_gadget_usb_gadget"} boogie_si_record_i32(0);
    $M.71 := 0;
    call {:si_unique_call 2422} {:cexpr "ldv_linux_usb_register_probe_state"} boogie_si_record_i32(0);
    $M.151 := 0;
    call {:si_unique_call 2423} {:cexpr "ldv_linux_usb_urb_urb_state"} boogie_si_record_i32(0);
    $M.65 := 0;
    call {:si_unique_call 2424} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_add_target_mutex_of_srp_host"} boogie_si_record_i8(0);
    call {:si_unique_call 2425} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode"} boogie_si_record_i8(0);
    call {:si_unique_call 2426} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock"} boogie_si_record_i8(0);
    call {:si_unique_call 2427} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device"} boogie_si_record_i8(0);
    $M.67 := 0;
    call {:si_unique_call 2428} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_srp_rport"} boogie_si_record_i8(0);
    $M.146 := 0;
    call {:si_unique_call 2429} {:cexpr "ldv_linux_lib_idr_idr"} boogie_si_record_i32(0);
    $M.66 := 0;
    call {:si_unique_call 2430} {:cexpr "ldv_linux_kernel_sched_completion_completion_tsk_mgmt_done_of_srp_rdma_ch"} boogie_si_record_i32(0);
    $M.12 := 0;
    call {:si_unique_call 2431} {:cexpr "ldv_linux_kernel_sched_completion_completion_released_of_srp_host"} boogie_si_record_i32(0);
    $M.17 := 0;
    call {:si_unique_call 2432} {:cexpr "ldv_linux_kernel_sched_completion_completion_done_of_srp_rdma_ch"} boogie_si_record_i32(0);
    $M.10 := 1;
    call {:si_unique_call 2433} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_target_lock_of_srp_host"} boogie_si_record_i32(1);
    call {:si_unique_call 2434} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct"} boogie_si_record_i32(1);
    call {:si_unique_call 2435} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_ptl"} boogie_si_record_i32(1);
    call {:si_unique_call 2436} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data"} boogie_si_record_i32(1);
    $M.11 := 1;
    call {:si_unique_call 2437} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_srp_target_port"} boogie_si_record_i32(1);
    $M.15 := 1;
    call {:si_unique_call 2438} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_srp_rdma_ch"} boogie_si_record_i32(1);
    $M.16 := 1;
    call {:si_unique_call 2439} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_srp_fr_pool"} boogie_si_record_i32(1);
    call {:si_unique_call 2440} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN"} boogie_si_record_i32(1);
    call {:si_unique_call 2441} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock"} boogie_si_record_i32(1);
    call {:si_unique_call 2442} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode"} boogie_si_record_i32(1);
    call {:si_unique_call 2443} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct"} boogie_si_record_i32(1);
    $M.0 := 0;
    call {:si_unique_call 2444} {:cexpr "__ldv_in_interrupt_context"} boogie_si_record_i8(0);
    $M.135 := 0;
    call {:si_unique_call 2445} {:cexpr "ldv_linux_block_queue_queue_state"} boogie_si_record_i32(0);
    $M.134 := 0;
    call {:si_unique_call 2446} {:cexpr "ldv_linux_block_genhd_disk_state"} boogie_si_record_i32(0);
    $M.68 := 0;
    call {:si_unique_call 2447} {:cexpr "register_always"} boogie_si_record_i8(0);
    $M.62 := 0;
    call {:si_unique_call 2448} {:cexpr "ch_count"} boogie_si_record_i32(0);
    $M.215 := $store.i32($M.215, srp_opt_tokens, 1);
    $M.216 := $store.ref($M.216, $add.ref($add.ref($add.ref(srp_opt_tokens, $mul.ref(0, 256)), $mul.ref(0, 16)), $mul.ref(8, 1)), .str.123);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(srp_opt_tokens, $mul.ref(0, 256)), $mul.ref(1, 16)), $mul.ref(0, 1)), 2);
    $M.216 := $store.ref($M.216, $add.ref($add.ref($add.ref(srp_opt_tokens, $mul.ref(0, 256)), $mul.ref(1, 16)), $mul.ref(8, 1)), .str.124);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(srp_opt_tokens, $mul.ref(0, 256)), $mul.ref(2, 16)), $mul.ref(0, 1)), 4);
    $M.216 := $store.ref($M.216, $add.ref($add.ref($add.ref(srp_opt_tokens, $mul.ref(0, 256)), $mul.ref(2, 16)), $mul.ref(8, 1)), .str.125);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(srp_opt_tokens, $mul.ref(0, 256)), $mul.ref(3, 16)), $mul.ref(0, 1)), 8);
    $M.216 := $store.ref($M.216, $add.ref($add.ref($add.ref(srp_opt_tokens, $mul.ref(0, 256)), $mul.ref(3, 16)), $mul.ref(8, 1)), .str.126);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(srp_opt_tokens, $mul.ref(0, 256)), $mul.ref(4, 16)), $mul.ref(0, 1)), 16);
    $M.216 := $store.ref($M.216, $add.ref($add.ref($add.ref(srp_opt_tokens, $mul.ref(0, 256)), $mul.ref(4, 16)), $mul.ref(8, 1)), .str.127);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(srp_opt_tokens, $mul.ref(0, 256)), $mul.ref(5, 16)), $mul.ref(0, 1)), 32);
    $M.216 := $store.ref($M.216, $add.ref($add.ref($add.ref(srp_opt_tokens, $mul.ref(0, 256)), $mul.ref(5, 16)), $mul.ref(8, 1)), .str.128);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(srp_opt_tokens, $mul.ref(0, 256)), $mul.ref(6, 16)), $mul.ref(0, 1)), 64);
    $M.216 := $store.ref($M.216, $add.ref($add.ref($add.ref(srp_opt_tokens, $mul.ref(0, 256)), $mul.ref(6, 16)), $mul.ref(8, 1)), .str.129);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(srp_opt_tokens, $mul.ref(0, 256)), $mul.ref(7, 16)), $mul.ref(0, 1)), 128);
    $M.216 := $store.ref($M.216, $add.ref($add.ref($add.ref(srp_opt_tokens, $mul.ref(0, 256)), $mul.ref(7, 16)), $mul.ref(8, 1)), .str.130);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(srp_opt_tokens, $mul.ref(0, 256)), $mul.ref(8, 16)), $mul.ref(0, 1)), 256);
    $M.216 := $store.ref($M.216, $add.ref($add.ref($add.ref(srp_opt_tokens, $mul.ref(0, 256)), $mul.ref(8, 16)), $mul.ref(8, 1)), .str.131);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(srp_opt_tokens, $mul.ref(0, 256)), $mul.ref(9, 16)), $mul.ref(0, 1)), 512);
    $M.216 := $store.ref($M.216, $add.ref($add.ref($add.ref(srp_opt_tokens, $mul.ref(0, 256)), $mul.ref(9, 16)), $mul.ref(8, 1)), .str.132);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(srp_opt_tokens, $mul.ref(0, 256)), $mul.ref(10, 16)), $mul.ref(0, 1)), 1024);
    $M.216 := $store.ref($M.216, $add.ref($add.ref($add.ref(srp_opt_tokens, $mul.ref(0, 256)), $mul.ref(10, 16)), $mul.ref(8, 1)), .str.133);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(srp_opt_tokens, $mul.ref(0, 256)), $mul.ref(11, 16)), $mul.ref(0, 1)), 2048);
    $M.216 := $store.ref($M.216, $add.ref($add.ref($add.ref(srp_opt_tokens, $mul.ref(0, 256)), $mul.ref(11, 16)), $mul.ref(8, 1)), .str.134);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(srp_opt_tokens, $mul.ref(0, 256)), $mul.ref(12, 16)), $mul.ref(0, 1)), 4096);
    $M.216 := $store.ref($M.216, $add.ref($add.ref($add.ref(srp_opt_tokens, $mul.ref(0, 256)), $mul.ref(12, 16)), $mul.ref(8, 1)), .str.135);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(srp_opt_tokens, $mul.ref(0, 256)), $mul.ref(13, 16)), $mul.ref(0, 1)), 8192);
    $M.216 := $store.ref($M.216, $add.ref($add.ref($add.ref(srp_opt_tokens, $mul.ref(0, 256)), $mul.ref(13, 16)), $mul.ref(8, 1)), .str.136);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(srp_opt_tokens, $mul.ref(0, 256)), $mul.ref(14, 16)), $mul.ref(0, 1)), 16384);
    $M.216 := $store.ref($M.216, $add.ref($add.ref($add.ref(srp_opt_tokens, $mul.ref(0, 256)), $mul.ref(14, 16)), $mul.ref(8, 1)), .str.137);
    $M.215 := $store.i32($M.215, $add.ref($add.ref($add.ref(srp_opt_tokens, $mul.ref(0, 256)), $mul.ref(15, 16)), $mul.ref(0, 1)), 0);
    $M.216 := $store.ref($M.216, $add.ref($add.ref($add.ref(srp_opt_tokens, $mul.ref(0, 256)), $mul.ref(15, 16)), $mul.ref(8, 1)), $0.ref);
    $M.61 := 0;
    call {:si_unique_call 2449} {:cexpr "allow_ext_sg"} boogie_si_record_i8(0);
    $M.1 := $store.ref($M.1, dev_attr_allow_ext_sg, .str.105);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_allow_ext_sg, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_allow_ext_sg, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_allow_ext_sg, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_allow_ext_sg, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_allow_ext_sg, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_allow_ext_sg, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_allow_ext_sg, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_allow_ext_sg, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_allow_ext_sg, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_allow_ext_sg, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_allow_ext_sg, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_allow_ext_sg, $mul.ref(0, 48)), $mul.ref(32, 1)), show_allow_ext_sg);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_allow_ext_sg, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_cmd_sg_entries, .str.104);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_cmd_sg_entries, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_cmd_sg_entries, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_cmd_sg_entries, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_cmd_sg_entries, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_cmd_sg_entries, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_cmd_sg_entries, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_cmd_sg_entries, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_cmd_sg_entries, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_cmd_sg_entries, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_cmd_sg_entries, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_cmd_sg_entries, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_cmd_sg_entries, $mul.ref(0, 48)), $mul.ref(32, 1)), show_cmd_sg_entries);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_cmd_sg_entries, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_tl_retry_count, .str.103);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_tl_retry_count, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_tl_retry_count, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_tl_retry_count, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_tl_retry_count, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_tl_retry_count, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_tl_retry_count, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_tl_retry_count, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_tl_retry_count, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_tl_retry_count, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_tl_retry_count, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_tl_retry_count, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_tl_retry_count, $mul.ref(0, 48)), $mul.ref(32, 1)), show_tl_retry_count);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_tl_retry_count, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_comp_vector, .str.102);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_comp_vector, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_comp_vector, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_comp_vector, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_comp_vector, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_comp_vector, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_comp_vector, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_comp_vector, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_comp_vector, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_comp_vector, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_comp_vector, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_comp_vector, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_comp_vector, $mul.ref(0, 48)), $mul.ref(32, 1)), show_comp_vector);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_comp_vector, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_ch_count, .str.101);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_ch_count, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_ch_count, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_ch_count, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ch_count, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ch_count, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ch_count, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ch_count, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ch_count, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ch_count, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ch_count, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ch_count, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_ch_count, $mul.ref(0, 48)), $mul.ref(32, 1)), show_ch_count);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_ch_count, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_local_ib_device, .str.100);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_local_ib_device, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_local_ib_device, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_local_ib_device, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_local_ib_device, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_local_ib_device, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_local_ib_device, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_local_ib_device, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_local_ib_device, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_local_ib_device, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_local_ib_device, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_local_ib_device, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_local_ib_device, $mul.ref(0, 48)), $mul.ref(32, 1)), show_local_ib_device);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_local_ib_device, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_local_ib_port, .str.99);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_local_ib_port, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_local_ib_port, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_local_ib_port, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_local_ib_port, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_local_ib_port, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_local_ib_port, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_local_ib_port, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_local_ib_port, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_local_ib_port, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_local_ib_port, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_local_ib_port, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_local_ib_port, $mul.ref(0, 48)), $mul.ref(32, 1)), show_local_ib_port);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_local_ib_port, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_zero_req_lim, .str.98);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_zero_req_lim, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_zero_req_lim, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_zero_req_lim, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_zero_req_lim, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_zero_req_lim, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_zero_req_lim, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_zero_req_lim, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_zero_req_lim, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_zero_req_lim, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_zero_req_lim, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_zero_req_lim, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_zero_req_lim, $mul.ref(0, 48)), $mul.ref(32, 1)), show_zero_req_lim);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_zero_req_lim, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_req_lim, .str.97);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_req_lim, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_req_lim, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_req_lim, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_req_lim, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_req_lim, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_req_lim, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_req_lim, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_req_lim, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_req_lim, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_req_lim, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_req_lim, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_req_lim, $mul.ref(0, 48)), $mul.ref(32, 1)), show_req_lim);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_req_lim, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_orig_dgid, .str.96);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_orig_dgid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_orig_dgid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_orig_dgid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_orig_dgid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_orig_dgid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_orig_dgid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_orig_dgid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_orig_dgid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_orig_dgid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_orig_dgid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_orig_dgid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_orig_dgid, $mul.ref(0, 48)), $mul.ref(32, 1)), show_orig_dgid);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_orig_dgid, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_dgid, .str.95);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_dgid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_dgid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_dgid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_dgid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_dgid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_dgid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_dgid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_dgid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_dgid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_dgid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_dgid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_dgid, $mul.ref(0, 48)), $mul.ref(32, 1)), show_dgid);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_dgid, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_sgid, .str.94);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_sgid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_sgid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_sgid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_sgid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_sgid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_sgid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_sgid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_sgid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_sgid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_sgid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_sgid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_sgid, $mul.ref(0, 48)), $mul.ref(32, 1)), show_sgid);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_sgid, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_pkey, .str.93);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_pkey, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_pkey, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_pkey, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_pkey, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_pkey, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_pkey, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_pkey, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_pkey, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_pkey, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_pkey, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_pkey, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_pkey, $mul.ref(0, 48)), $mul.ref(32, 1)), show_pkey);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_pkey, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_service_id, .str.92);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_service_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_service_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_service_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_service_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_service_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_service_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_service_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_service_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_service_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_service_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_service_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_service_id, $mul.ref(0, 48)), $mul.ref(32, 1)), show_service_id);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_service_id, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_ioc_guid, .str.91);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_ioc_guid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_ioc_guid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_ioc_guid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ioc_guid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ioc_guid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ioc_guid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ioc_guid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ioc_guid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ioc_guid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ioc_guid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ioc_guid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_ioc_guid, $mul.ref(0, 48)), $mul.ref(32, 1)), show_ioc_guid);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_ioc_guid, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_id_ext, .str.90);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_id_ext, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_id_ext, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_id_ext, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_id_ext, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_id_ext, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_id_ext, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_id_ext, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_id_ext, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_id_ext, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_id_ext, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_id_ext, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_id_ext, $mul.ref(0, 48)), $mul.ref(32, 1)), show_id_ext);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_id_ext, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, srp_host_attrs, dev_attr_id_ext);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_host_attrs, $mul.ref(0, 136)), $mul.ref(1, 8)), dev_attr_ioc_guid);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_host_attrs, $mul.ref(0, 136)), $mul.ref(2, 8)), dev_attr_service_id);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_host_attrs, $mul.ref(0, 136)), $mul.ref(3, 8)), dev_attr_pkey);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_host_attrs, $mul.ref(0, 136)), $mul.ref(4, 8)), dev_attr_sgid);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_host_attrs, $mul.ref(0, 136)), $mul.ref(5, 8)), dev_attr_dgid);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_host_attrs, $mul.ref(0, 136)), $mul.ref(6, 8)), dev_attr_orig_dgid);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_host_attrs, $mul.ref(0, 136)), $mul.ref(7, 8)), dev_attr_req_lim);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_host_attrs, $mul.ref(0, 136)), $mul.ref(8, 8)), dev_attr_zero_req_lim);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_host_attrs, $mul.ref(0, 136)), $mul.ref(9, 8)), dev_attr_local_ib_port);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_host_attrs, $mul.ref(0, 136)), $mul.ref(10, 8)), dev_attr_local_ib_device);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_host_attrs, $mul.ref(0, 136)), $mul.ref(11, 8)), dev_attr_ch_count);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_host_attrs, $mul.ref(0, 136)), $mul.ref(12, 8)), dev_attr_comp_vector);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_host_attrs, $mul.ref(0, 136)), $mul.ref(13, 8)), dev_attr_tl_retry_count);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_host_attrs, $mul.ref(0, 136)), $mul.ref(14, 8)), dev_attr_cmd_sg_entries);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_host_attrs, $mul.ref(0, 136)), $mul.ref(15, 8)), dev_attr_allow_ext_sg);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_host_attrs, $mul.ref(0, 136)), $mul.ref(16, 8)), $0.ref);
    $M.1 := $store.ref($M.1, srp_template, __this_module);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(8, 1)), .str.88);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(32, 1)), srp_target_info);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(48, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(56, 1)), srp_queuecommand);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(64, 1)), srp_abort);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(72, 1)), srp_reset_device);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(80, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(88, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(96, 1)), srp_reset_host);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(104, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(112, 1)), srp_slave_configure);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(120, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(128, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(136, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(144, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(152, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(160, 1)), srp_change_queue_depth);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(168, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(176, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(184, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(192, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(200, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(208, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(216, 1)), .str.18);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(224, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(232, 1)), 62);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(236, 1)), $sub.i32(0, 1));
    $M.1 := $store.i16($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(240, 1)), 12);
    $M.1 := $store.i16($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(242, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(244, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(248, 1)), 0);
    $M.1 := $store.i16($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(256, 1)), 62);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(258, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(260, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(264, 1)), $sub.i8(0, 93));
    $M.1 := $store.i8($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(265, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(268, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(272, 1)), srp_host_attrs);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(280, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(288, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(288, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.i64($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(304, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(312, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(320, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(srp_template, $mul.ref(0, 336)), $mul.ref(328, 1)), 0);
    $M.20 := 1;
    call {:si_unique_call 2450} {:cexpr "topspin_workarounds"} boogie_si_record_i32(1);
    $M.217 := $store.ref($M.217, dev_attr_port, .str.28);
    $M.217 := $store.i16($M.217, $add.ref($add.ref($add.ref(dev_attr_port, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.217 := $store.i8($M.217, $add.ref($add.ref($add.ref(dev_attr_port, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.217 := $store.ref($M.217, $add.ref($add.ref($add.ref(dev_attr_port, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.217 := $store.i8($M.217, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.217 := $store.i8($M.217, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.217 := $store.i8($M.217, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.217 := $store.i8($M.217, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.217 := $store.i8($M.217, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.217 := $store.i8($M.217, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.217 := $store.i8($M.217, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.217 := $store.i8($M.217, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_port, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.217 := $store.ref($M.217, $add.ref($add.ref(dev_attr_port, $mul.ref(0, 48)), $mul.ref(32, 1)), show_port);
    $M.217 := $store.ref($M.217, $add.ref($add.ref(dev_attr_port, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.217 := $store.ref($M.217, dev_attr_ibdev, .str.27);
    $M.217 := $store.i16($M.217, $add.ref($add.ref($add.ref(dev_attr_ibdev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.217 := $store.i8($M.217, $add.ref($add.ref($add.ref(dev_attr_ibdev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.217 := $store.ref($M.217, $add.ref($add.ref($add.ref(dev_attr_ibdev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.217 := $store.i8($M.217, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ibdev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.217 := $store.i8($M.217, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ibdev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.217 := $store.i8($M.217, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ibdev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.217 := $store.i8($M.217, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ibdev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.217 := $store.i8($M.217, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ibdev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.217 := $store.i8($M.217, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ibdev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.217 := $store.i8($M.217, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ibdev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.217 := $store.i8($M.217, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ibdev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.217 := $store.ref($M.217, $add.ref($add.ref(dev_attr_ibdev, $mul.ref(0, 48)), $mul.ref(32, 1)), show_ibdev);
    $M.217 := $store.ref($M.217, $add.ref($add.ref(dev_attr_ibdev, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.217 := $store.ref($M.217, dev_attr_add_target, .str.26);
    $M.217 := $store.i16($M.217, $add.ref($add.ref($add.ref(dev_attr_add_target, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 128);
    $M.217 := $store.i8($M.217, $add.ref($add.ref($add.ref(dev_attr_add_target, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.217 := $store.ref($M.217, $add.ref($add.ref($add.ref(dev_attr_add_target, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.217 := $store.i8($M.217, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_add_target, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.217 := $store.i8($M.217, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_add_target, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.217 := $store.i8($M.217, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_add_target, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.217 := $store.i8($M.217, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_add_target, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.217 := $store.i8($M.217, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_add_target, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.217 := $store.i8($M.217, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_add_target, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.217 := $store.i8($M.217, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_add_target, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.217 := $store.i8($M.217, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_add_target, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.217 := $store.ref($M.217, $add.ref($add.ref(dev_attr_add_target, $mul.ref(0, 48)), $mul.ref(32, 1)), $0.ref);
    $M.217 := $store.ref($M.217, $add.ref($add.ref(dev_attr_add_target, $mul.ref(0, 48)), $mul.ref(40, 1)), srp_create_target);
    $M.2 := 0;
    call {:si_unique_call 2451} {:cexpr "prefer_fr"} boogie_si_record_i8(0);
    $M.126 := 600;
    call {:si_unique_call 2452} {:cexpr "srp_dev_loss_tmo"} boogie_si_record_i32(600);
    $M.125 := 15;
    call {:si_unique_call 2453} {:cexpr "srp_fast_io_fail_tmo"} boogie_si_record_i32(15);
    $M.127 := 10;
    call {:si_unique_call 2454} {:cexpr "srp_reconnect_delay"} boogie_si_record_i32(10);
    $M.60 := 0;
    call {:si_unique_call 2455} {:cexpr "indirect_sg_entries"} boogie_si_record_i32(0);
    $M.59 := 0;
    call {:si_unique_call 2456} {:cexpr "cmd_sg_entries"} boogie_si_record_i32(0);
    $M.74 := 0;
    call {:si_unique_call 2457} {:cexpr "srp_sg_tablesize"} boogie_si_record_i32(0);
    $M.9 := $0.ref;
    $M.58 := $0.ref;
    $M.1 := $store.ref($M.1, srp_class, .str.2);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_class, $mul.ref(0, 120)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_class, $mul.ref(0, 120)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_class, $mul.ref(0, 120)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_class, $mul.ref(0, 120)), $mul.ref(32, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_class, $mul.ref(0, 120)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_class, $mul.ref(0, 120)), $mul.ref(48, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_class, $mul.ref(0, 120)), $mul.ref(56, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_class, $mul.ref(0, 120)), $mul.ref(64, 1)), srp_release_dev);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_class, $mul.ref(0, 120)), $mul.ref(72, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_class, $mul.ref(0, 120)), $mul.ref(80, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_class, $mul.ref(0, 120)), $mul.ref(88, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_class, $mul.ref(0, 120)), $mul.ref(96, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_class, $mul.ref(0, 120)), $mul.ref(104, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(srp_class, $mul.ref(0, 120)), $mul.ref(112, 1)), $0.ref);
    $M.228 := $store.i32($M.228, srp_sa_client, 0);
    $M.228 := $store.i32($M.228, $add.ref($add.ref($add.ref(srp_sa_client, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(0, 1)), 0);
    $M.228 := $store.i32($M.228, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(srp_sa_client, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.228 := $store.i32($M.228, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(srp_sa_client, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.228 := $store.i32($M.228, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(srp_sa_client, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.228 := $store.ref($M.228, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(srp_sa_client, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.228 := $store.ref($M.228, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(srp_sa_client, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.228 := $store.ref($M.228, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(srp_sa_client, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.228 := $store.ref($M.228, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(srp_sa_client, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.228 := $store.ref($M.228, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(srp_sa_client, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.228 := $store.i32($M.228, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(srp_sa_client, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.228 := $store.i64($M.228, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(srp_sa_client, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.228 := $store.ref($M.228, $add.ref($add.ref($add.ref($add.ref($add.ref(srp_sa_client, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.228 := $store.ref($M.228, $add.ref($add.ref($add.ref($add.ref($add.ref(srp_sa_client, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.i8($M.1, .str.18, 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 7)), $mul.ref(1, 1)), 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 7)), $mul.ref(2, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 7)), $mul.ref(3, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 7)), $mul.ref(4, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 7)), $mul.ref(5, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.1 := $store.i8($M.1, .str.2, 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.2, $mul.ref(0, 15)), $mul.ref(1, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.2, $mul.ref(0, 15)), $mul.ref(2, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.2, $mul.ref(0, 15)), $mul.ref(3, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.2, $mul.ref(0, 15)), $mul.ref(4, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.2, $mul.ref(0, 15)), $mul.ref(5, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.2, $mul.ref(0, 15)), $mul.ref(6, 1)), 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.2, $mul.ref(0, 15)), $mul.ref(7, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.2, $mul.ref(0, 15)), $mul.ref(8, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.2, $mul.ref(0, 15)), $mul.ref(9, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.2, $mul.ref(0, 15)), $mul.ref(10, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.2, $mul.ref(0, 15)), $mul.ref(11, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.2, $mul.ref(0, 15)), $mul.ref(12, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.2, $mul.ref(0, 15)), $mul.ref(13, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.2, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.234 := $store.i8($M.234, .str.139, 83);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(.str.139, $mul.ref(0, 16)), $mul.ref(1, 1)), 82);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(.str.139, $mul.ref(0, 16)), $mul.ref(2, 1)), 80);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(.str.139, $mul.ref(0, 16)), $mul.ref(3, 1)), 46);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(.str.139, $mul.ref(0, 16)), $mul.ref(4, 1)), 84);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(.str.139, $mul.ref(0, 16)), $mul.ref(5, 1)), 49);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(.str.139, $mul.ref(0, 16)), $mul.ref(6, 1)), 48);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(.str.139, $mul.ref(0, 16)), $mul.ref(7, 1)), 58);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(.str.139, $mul.ref(0, 16)), $mul.ref(8, 1)), 37);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(.str.139, $mul.ref(0, 16)), $mul.ref(9, 1)), 48);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(.str.139, $mul.ref(0, 16)), $mul.ref(10, 1)), 49);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(.str.139, $mul.ref(0, 16)), $mul.ref(11, 1)), 54);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(.str.139, $mul.ref(0, 16)), $mul.ref(12, 1)), 108);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(.str.139, $mul.ref(0, 16)), $mul.ref(13, 1)), 108);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(.str.139, $mul.ref(0, 16)), $mul.ref(14, 1)), 88);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(.str.139, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.235 := $store.i8($M.235, .str.107, 37);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(.str.107, $mul.ref(0, 5)), $mul.ref(1, 1)), 104);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(.str.107, $mul.ref(0, 5)), $mul.ref(2, 1)), 104);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(.str.107, $mul.ref(0, 5)), $mul.ref(3, 1)), 120);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(.str.107, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.236 := $store.i8($M.236, .str.12, 37);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.12, $mul.ref(0, 4)), $mul.ref(1, 1)), 115);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.12, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.12, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.237 := $store.i8($M.237, .str.13, 37);
    $M.237 := $store.i8($M.237, $add.ref($add.ref(.str.13, $mul.ref(0, 4)), $mul.ref(1, 1)), 100);
    $M.237 := $store.i8($M.237, $add.ref($add.ref(.str.13, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.237 := $store.i8($M.237, $add.ref($add.ref(.str.13, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.1 := $store.i8($M.1, .str.88, 73);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.88, $mul.ref(0, 25)), $mul.ref(1, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.88, $mul.ref(0, 25)), $mul.ref(2, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.88, $mul.ref(0, 25)), $mul.ref(3, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.88, $mul.ref(0, 25)), $mul.ref(4, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.88, $mul.ref(0, 25)), $mul.ref(5, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.88, $mul.ref(0, 25)), $mul.ref(6, 1)), 66);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.88, $mul.ref(0, 25)), $mul.ref(7, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.88, $mul.ref(0, 25)), $mul.ref(8, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.88, $mul.ref(0, 25)), $mul.ref(9, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.88, $mul.ref(0, 25)), $mul.ref(10, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.88, $mul.ref(0, 25)), $mul.ref(11, 1)), 83);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.88, $mul.ref(0, 25)), $mul.ref(12, 1)), 82);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.88, $mul.ref(0, 25)), $mul.ref(13, 1)), 80);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.88, $mul.ref(0, 25)), $mul.ref(14, 1)), 32);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.88, $mul.ref(0, 25)), $mul.ref(15, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.88, $mul.ref(0, 25)), $mul.ref(16, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.88, $mul.ref(0, 25)), $mul.ref(17, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.88, $mul.ref(0, 25)), $mul.ref(18, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.88, $mul.ref(0, 25)), $mul.ref(19, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.88, $mul.ref(0, 25)), $mul.ref(20, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.88, $mul.ref(0, 25)), $mul.ref(21, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.88, $mul.ref(0, 25)), $mul.ref(22, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.88, $mul.ref(0, 25)), $mul.ref(23, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.88, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i8($M.1, .str.90, 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.90, $mul.ref(0, 7)), $mul.ref(1, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.90, $mul.ref(0, 7)), $mul.ref(2, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.90, $mul.ref(0, 7)), $mul.ref(3, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.90, $mul.ref(0, 7)), $mul.ref(4, 1)), 120);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.90, $mul.ref(0, 7)), $mul.ref(5, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.90, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.238 := $store.i8($M.238, .str.11, 48);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.11, $mul.ref(0, 11)), $mul.ref(1, 1)), 120);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.11, $mul.ref(0, 11)), $mul.ref(2, 1)), 37);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.11, $mul.ref(0, 11)), $mul.ref(3, 1)), 48);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.11, $mul.ref(0, 11)), $mul.ref(4, 1)), 49);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.11, $mul.ref(0, 11)), $mul.ref(5, 1)), 54);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.11, $mul.ref(0, 11)), $mul.ref(6, 1)), 108);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.11, $mul.ref(0, 11)), $mul.ref(7, 1)), 108);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.11, $mul.ref(0, 11)), $mul.ref(8, 1)), 120);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.11, $mul.ref(0, 11)), $mul.ref(9, 1)), 10);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.11, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i8($M.1, .str.91, 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.91, $mul.ref(0, 9)), $mul.ref(1, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.91, $mul.ref(0, 9)), $mul.ref(2, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.91, $mul.ref(0, 9)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.91, $mul.ref(0, 9)), $mul.ref(4, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.91, $mul.ref(0, 9)), $mul.ref(5, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.91, $mul.ref(0, 9)), $mul.ref(6, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.91, $mul.ref(0, 9)), $mul.ref(7, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.91, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, .str.92, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.92, $mul.ref(0, 11)), $mul.ref(1, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.92, $mul.ref(0, 11)), $mul.ref(2, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.92, $mul.ref(0, 11)), $mul.ref(3, 1)), 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.92, $mul.ref(0, 11)), $mul.ref(4, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.92, $mul.ref(0, 11)), $mul.ref(5, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.92, $mul.ref(0, 11)), $mul.ref(6, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.92, $mul.ref(0, 11)), $mul.ref(7, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.92, $mul.ref(0, 11)), $mul.ref(8, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.92, $mul.ref(0, 11)), $mul.ref(9, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.92, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i8($M.1, .str.93, 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.93, $mul.ref(0, 5)), $mul.ref(1, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.93, $mul.ref(0, 5)), $mul.ref(2, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.93, $mul.ref(0, 5)), $mul.ref(3, 1)), 121);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.93, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.239 := $store.i8($M.239, .str.15, 48);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(.str.15, $mul.ref(0, 8)), $mul.ref(1, 1)), 120);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(.str.15, $mul.ref(0, 8)), $mul.ref(2, 1)), 37);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(.str.15, $mul.ref(0, 8)), $mul.ref(3, 1)), 48);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(.str.15, $mul.ref(0, 8)), $mul.ref(4, 1)), 52);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(.str.15, $mul.ref(0, 8)), $mul.ref(5, 1)), 120);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(.str.15, $mul.ref(0, 8)), $mul.ref(6, 1)), 10);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(.str.15, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.1 := $store.i8($M.1, .str.94, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.94, $mul.ref(0, 5)), $mul.ref(1, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.94, $mul.ref(0, 5)), $mul.ref(2, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.94, $mul.ref(0, 5)), $mul.ref(3, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.94, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.240 := $store.i8($M.240, .str.14, 37);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(.str.14, $mul.ref(0, 6)), $mul.ref(1, 1)), 112);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(.str.14, $mul.ref(0, 6)), $mul.ref(2, 1)), 73);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(.str.14, $mul.ref(0, 6)), $mul.ref(3, 1)), 54);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(.str.14, $mul.ref(0, 6)), $mul.ref(4, 1)), 10);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(.str.14, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.1 := $store.i8($M.1, .str.95, 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.95, $mul.ref(0, 5)), $mul.ref(1, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.95, $mul.ref(0, 5)), $mul.ref(2, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.95, $mul.ref(0, 5)), $mul.ref(3, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.95, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i8($M.1, .str.96, 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.96, $mul.ref(0, 10)), $mul.ref(1, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.96, $mul.ref(0, 10)), $mul.ref(2, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.96, $mul.ref(0, 10)), $mul.ref(3, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.96, $mul.ref(0, 10)), $mul.ref(4, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.96, $mul.ref(0, 10)), $mul.ref(5, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.96, $mul.ref(0, 10)), $mul.ref(6, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.96, $mul.ref(0, 10)), $mul.ref(7, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.96, $mul.ref(0, 10)), $mul.ref(8, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.96, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, .str.97, 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.97, $mul.ref(0, 8)), $mul.ref(1, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.97, $mul.ref(0, 8)), $mul.ref(2, 1)), 113);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.97, $mul.ref(0, 8)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.97, $mul.ref(0, 8)), $mul.ref(4, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.97, $mul.ref(0, 8)), $mul.ref(5, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.97, $mul.ref(0, 8)), $mul.ref(6, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.97, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.1 := $store.i8($M.1, .str.98, 122);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.98, $mul.ref(0, 13)), $mul.ref(1, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.98, $mul.ref(0, 13)), $mul.ref(2, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.98, $mul.ref(0, 13)), $mul.ref(3, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.98, $mul.ref(0, 13)), $mul.ref(4, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.98, $mul.ref(0, 13)), $mul.ref(5, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.98, $mul.ref(0, 13)), $mul.ref(6, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.98, $mul.ref(0, 13)), $mul.ref(7, 1)), 113);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.98, $mul.ref(0, 13)), $mul.ref(8, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.98, $mul.ref(0, 13)), $mul.ref(9, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.98, $mul.ref(0, 13)), $mul.ref(10, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.98, $mul.ref(0, 13)), $mul.ref(11, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.98, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, .str.99, 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.99, $mul.ref(0, 14)), $mul.ref(1, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.99, $mul.ref(0, 14)), $mul.ref(2, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.99, $mul.ref(0, 14)), $mul.ref(3, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.99, $mul.ref(0, 14)), $mul.ref(4, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.99, $mul.ref(0, 14)), $mul.ref(5, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.99, $mul.ref(0, 14)), $mul.ref(6, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.99, $mul.ref(0, 14)), $mul.ref(7, 1)), 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.99, $mul.ref(0, 14)), $mul.ref(8, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.99, $mul.ref(0, 14)), $mul.ref(9, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.99, $mul.ref(0, 14)), $mul.ref(10, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.99, $mul.ref(0, 14)), $mul.ref(11, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.99, $mul.ref(0, 14)), $mul.ref(12, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.99, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.1 := $store.i8($M.1, .str.100, 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.100, $mul.ref(0, 16)), $mul.ref(1, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.100, $mul.ref(0, 16)), $mul.ref(2, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.100, $mul.ref(0, 16)), $mul.ref(3, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.100, $mul.ref(0, 16)), $mul.ref(4, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.100, $mul.ref(0, 16)), $mul.ref(5, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.100, $mul.ref(0, 16)), $mul.ref(6, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.100, $mul.ref(0, 16)), $mul.ref(7, 1)), 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.100, $mul.ref(0, 16)), $mul.ref(8, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.100, $mul.ref(0, 16)), $mul.ref(9, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.100, $mul.ref(0, 16)), $mul.ref(10, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.100, $mul.ref(0, 16)), $mul.ref(11, 1)), 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.100, $mul.ref(0, 16)), $mul.ref(12, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.100, $mul.ref(0, 16)), $mul.ref(13, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.100, $mul.ref(0, 16)), $mul.ref(14, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.100, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.1 := $store.i8($M.1, .str.101, 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.101, $mul.ref(0, 9)), $mul.ref(1, 1)), 104);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.101, $mul.ref(0, 9)), $mul.ref(2, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.101, $mul.ref(0, 9)), $mul.ref(3, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.101, $mul.ref(0, 9)), $mul.ref(4, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.101, $mul.ref(0, 9)), $mul.ref(5, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.101, $mul.ref(0, 9)), $mul.ref(6, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.101, $mul.ref(0, 9)), $mul.ref(7, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.101, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, .str.102, 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.102, $mul.ref(0, 12)), $mul.ref(1, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.102, $mul.ref(0, 12)), $mul.ref(2, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.102, $mul.ref(0, 12)), $mul.ref(3, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.102, $mul.ref(0, 12)), $mul.ref(4, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.102, $mul.ref(0, 12)), $mul.ref(5, 1)), 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.102, $mul.ref(0, 12)), $mul.ref(6, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.102, $mul.ref(0, 12)), $mul.ref(7, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.102, $mul.ref(0, 12)), $mul.ref(8, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.102, $mul.ref(0, 12)), $mul.ref(9, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.102, $mul.ref(0, 12)), $mul.ref(10, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.102, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.1 := $store.i8($M.1, .str.103, 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.103, $mul.ref(0, 15)), $mul.ref(1, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.103, $mul.ref(0, 15)), $mul.ref(2, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.103, $mul.ref(0, 15)), $mul.ref(3, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.103, $mul.ref(0, 15)), $mul.ref(4, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.103, $mul.ref(0, 15)), $mul.ref(5, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.103, $mul.ref(0, 15)), $mul.ref(6, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.103, $mul.ref(0, 15)), $mul.ref(7, 1)), 121);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.103, $mul.ref(0, 15)), $mul.ref(8, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.103, $mul.ref(0, 15)), $mul.ref(9, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.103, $mul.ref(0, 15)), $mul.ref(10, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.103, $mul.ref(0, 15)), $mul.ref(11, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.103, $mul.ref(0, 15)), $mul.ref(12, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.103, $mul.ref(0, 15)), $mul.ref(13, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.103, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i8($M.1, .str.104, 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.104, $mul.ref(0, 15)), $mul.ref(1, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.104, $mul.ref(0, 15)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.104, $mul.ref(0, 15)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.104, $mul.ref(0, 15)), $mul.ref(4, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.104, $mul.ref(0, 15)), $mul.ref(5, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.104, $mul.ref(0, 15)), $mul.ref(6, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.104, $mul.ref(0, 15)), $mul.ref(7, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.104, $mul.ref(0, 15)), $mul.ref(8, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.104, $mul.ref(0, 15)), $mul.ref(9, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.104, $mul.ref(0, 15)), $mul.ref(10, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.104, $mul.ref(0, 15)), $mul.ref(11, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.104, $mul.ref(0, 15)), $mul.ref(12, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.104, $mul.ref(0, 15)), $mul.ref(13, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.104, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.241 := $store.i8($M.241, .str.146, 37);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(.str.146, $mul.ref(0, 4)), $mul.ref(1, 1)), 117);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(.str.146, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(.str.146, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.1 := $store.i8($M.1, .str.105, 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.105, $mul.ref(0, 13)), $mul.ref(1, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.105, $mul.ref(0, 13)), $mul.ref(2, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.105, $mul.ref(0, 13)), $mul.ref(3, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.105, $mul.ref(0, 13)), $mul.ref(4, 1)), 119);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.105, $mul.ref(0, 13)), $mul.ref(5, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.105, $mul.ref(0, 13)), $mul.ref(6, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.105, $mul.ref(0, 13)), $mul.ref(7, 1)), 120);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.105, $mul.ref(0, 13)), $mul.ref(8, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.105, $mul.ref(0, 13)), $mul.ref(9, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.105, $mul.ref(0, 13)), $mul.ref(10, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.105, $mul.ref(0, 13)), $mul.ref(11, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.105, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.242 := $store.i8($M.242, .str.144, 116);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(.str.144, $mul.ref(0, 5)), $mul.ref(1, 1)), 114);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(.str.144, $mul.ref(0, 5)), $mul.ref(2, 1)), 117);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(.str.144, $mul.ref(0, 5)), $mul.ref(3, 1)), 101);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(.str.144, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.242 := $store.i8($M.242, .str.145, 102);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(.str.145, $mul.ref(0, 6)), $mul.ref(1, 1)), 97);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(.str.145, $mul.ref(0, 6)), $mul.ref(2, 1)), 108);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(.str.145, $mul.ref(0, 6)), $mul.ref(3, 1)), 115);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(.str.145, $mul.ref(0, 6)), $mul.ref(4, 1)), 101);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(.str.145, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.243 := $store.i8($M.243, .str.29, 37);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(.str.29, $mul.ref(0, 3)), $mul.ref(1, 1)), 100);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(.str.29, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.244 := $store.i8($M.244, .str.30, 111);
    $M.244 := $store.i8($M.244, $add.ref($add.ref(.str.30, $mul.ref(0, 4)), $mul.ref(1, 1)), 102);
    $M.244 := $store.i8($M.244, $add.ref($add.ref(.str.30, $mul.ref(0, 4)), $mul.ref(2, 1)), 102);
    $M.244 := $store.i8($M.244, $add.ref($add.ref(.str.30, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    call {:si_unique_call 2458} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 934926);

procedure devirtbounce(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 935958);

procedure devirtbounce.1(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.14, $M.26, $M.27, $M.28, $M.29, $CurrAddr, $M.12, $M.10, $M.11, $M.17, assertsPassed, $M.15, $M.16;



implementation devirtbounce.1(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i14 := $eq.ref(srp_remove_work, $p0);
    assume true;
    goto $bb8, $bb15;

  $bb15:
    assume !($i14 == 1);
    $i13 := $eq.ref(srp_tl_err_work, $p0);
    assume true;
    goto $bb7, $bb14;

  $bb14:
    assume !($i13 == 1);
    $i12 := $eq.ref(srp_rport_delete, $p0);
    assume true;
    goto $bb6, $bb13;

  $bb13:
    assume !($i12 == 1);
    $i11 := $eq.ref(srp_terminate_io, $p0);
    assume {:branchcond $i11} true;
    goto $bb5, $bb12;

  $bb12:
    assume !($i11 == 1);
    $i10 := $eq.ref(srp_release_dev, $p0);
    assume true;
    goto $bb4, $bb11;

  $bb11:
    assume !($i10 == 1);
    $i9 := $eq.ref(srp_remove_one, $p0);
    assume true;
    goto $bb3, $bb10;

  $bb10:
    assume !($i9 == 1);
    $i8 := $eq.ref(srp_add_one, $p0);
    assume true;
    goto $bb2, $bb9;

  $bb9:
    assume !($i8 == 1);
    assume false;
    return;

  $bb2:
    assume $i8 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2459} srp_add_one($p1);
    goto SeqInstr_1312, SeqInstr_1313;

  SeqInstr_1313:
    assume assertsPassed;
    goto SeqInstr_1314;

  SeqInstr_1314:
    return;

  SeqInstr_1312:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i9 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2460} srp_remove_one($p2);
    goto SeqInstr_1315, SeqInstr_1316;

  SeqInstr_1316:
    assume assertsPassed;
    goto SeqInstr_1317;

  SeqInstr_1317:
    return;

  SeqInstr_1315:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i10 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2461} srp_release_dev($p3);
    return;

  $bb5:
    assume $i11 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2462} srp_terminate_io($p4);
    goto SeqInstr_1318, SeqInstr_1319;

  SeqInstr_1319:
    assume assertsPassed;
    goto SeqInstr_1320;

  SeqInstr_1320:
    return;

  SeqInstr_1318:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i12 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2463} srp_rport_delete($p5);
    goto SeqInstr_1321, SeqInstr_1322;

  SeqInstr_1322:
    assume assertsPassed;
    goto SeqInstr_1323;

  SeqInstr_1323:
    return;

  SeqInstr_1321:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i13 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2464} srp_tl_err_work($p6);
    return;

  $bb8:
    assume $i14 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2465} srp_remove_work($p7);
    goto SeqInstr_1324, SeqInstr_1325;

  SeqInstr_1325:
    assume assertsPassed;
    goto SeqInstr_1326;

  SeqInstr_1326:
    return;

  SeqInstr_1324:
    assume !assertsPassed;
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 936990);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 938022);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 939054);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 940086);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 941118);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(srp_change_queue_depth, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2466} $i2 := srp_change_queue_depth($p1, arg1);
    $r := $i2;
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 942150);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 943182);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 944214);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 945246);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 946278);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 947310);

procedure devirtbounce.12(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i32) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.12(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i32) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 948342);

procedure devirtbounce.13(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.13(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 949374);

procedure devirtbounce.14(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.14(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 950406);

procedure devirtbounce.15(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.15(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 951438);

procedure devirtbounce.16(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.40, $M.41, $M.42, $M.14, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $M.66, $M.67, $CurrAddr, $M.11, $M.17, $M.18, $M.19, $M.12, $M.10, $M.16;



implementation devirtbounce.16(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i15 := $eq.ref(srp_slave_configure, $p0);
    assume true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i15 == 1);
    $i14 := $eq.ref(srp_reset_host, $p0);
    assume true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i14 == 1);
    $i13 := $eq.ref(srp_reset_device, $p0);
    assume true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i13 == 1);
    $i12 := $eq.ref(srp_abort, $p0);
    assume true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i12 == 1);
    $i11 := $eq.ref(srp_rport_reconnect, $p0);
    assume {:branchcond $i11} true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume false;
    return;

  $bb2:
    assume $i11 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2467} $i2 := srp_rport_reconnect($p1);
    goto SeqInstr_1327, SeqInstr_1328;

  SeqInstr_1328:
    assume assertsPassed;
    goto SeqInstr_1329;

  SeqInstr_1329:
    $r := $i2;
    return;

  SeqInstr_1327:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i12 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2468} $i4 := srp_abort($p3);
    goto SeqInstr_1330, SeqInstr_1331;

  SeqInstr_1331:
    assume assertsPassed;
    goto SeqInstr_1332;

  SeqInstr_1332:
    $r := $i4;
    return;

  SeqInstr_1330:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i13 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2469} $i6 := srp_reset_device($p5);
    goto SeqInstr_1333, SeqInstr_1334;

  SeqInstr_1334:
    assume assertsPassed;
    goto SeqInstr_1335;

  SeqInstr_1335:
    $r := $i6;
    return;

  SeqInstr_1333:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i14 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2470} $i8 := srp_reset_host($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i15 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2471} $i10 := srp_slave_configure($p9);
    $r := $i10;
    return;
}



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 952470);

procedure devirtbounce.17(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.40, $M.41, $M.42, $M.14, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $M.66, $M.67, $CurrAddr, $M.11, $M.17, $M.18, $M.19, $M.12, $M.10, $M.16;



implementation devirtbounce.17(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i15 := $eq.ref(srp_slave_configure, $p0);
    assume true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i15 == 1);
    $i14 := $eq.ref(srp_reset_host, $p0);
    assume true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i14 == 1);
    $i13 := $eq.ref(srp_reset_device, $p0);
    assume true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i13 == 1);
    $i12 := $eq.ref(srp_abort, $p0);
    assume true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i12 == 1);
    $i11 := $eq.ref(srp_rport_reconnect, $p0);
    assume {:branchcond $i11} true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume false;
    return;

  $bb2:
    assume $i11 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2472} $i2 := srp_rport_reconnect($p1);
    goto SeqInstr_1336, SeqInstr_1337;

  SeqInstr_1337:
    assume assertsPassed;
    goto SeqInstr_1338;

  SeqInstr_1338:
    $r := $i2;
    return;

  SeqInstr_1336:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i12 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2473} $i4 := srp_abort($p3);
    goto SeqInstr_1339, SeqInstr_1340;

  SeqInstr_1340:
    assume assertsPassed;
    goto SeqInstr_1341;

  SeqInstr_1341:
    $r := $i4;
    return;

  SeqInstr_1339:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i13 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2474} $i6 := srp_reset_device($p5);
    goto SeqInstr_1342, SeqInstr_1343;

  SeqInstr_1343:
    assume assertsPassed;
    goto SeqInstr_1344;

  SeqInstr_1344:
    $r := $i6;
    return;

  SeqInstr_1342:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i14 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2475} $i8 := srp_reset_host($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i15 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2476} $i10 := srp_slave_configure($p9);
    $r := $i10;
    return;
}



const devirtbounce.18: ref;

axiom devirtbounce.18 == $sub.ref(0, 953502);

procedure devirtbounce.18(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.18(funcPtr: ref, arg: ref) returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(srp_target_info, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2477} $p2 := srp_target_info($p1);
    $r := $p2;
    return;
}



const devirtbounce.19: ref;

axiom devirtbounce.19 == $sub.ref(0, 954534);

procedure devirtbounce.19(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.19(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.20: ref;

axiom devirtbounce.20 == $sub.ref(0, 955566);

procedure devirtbounce.20(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32, arg4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.20(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32, arg4: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.21: ref;

axiom devirtbounce.21 == $sub.ref(0, 956598);

procedure devirtbounce.21(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.40, $M.41, $M.42, $M.14, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.66, $M.67, assertsPassed, $CurrAddr, $M.26, $M.27, $M.28, $M.29, $M.25, $M.12, $M.10, $M.11, $M.17, $M.18, $M.19, $M.16;



implementation devirtbounce.21(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i15 := $eq.ref(srp_slave_configure, $p0);
    assume true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i15 == 1);
    $i14 := $eq.ref(srp_reset_host, $p0);
    assume true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i14 == 1);
    $i13 := $eq.ref(srp_rport_reconnect, $p0);
    assume true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i13 == 1);
    $i12 := $eq.ref(srp_abort, $p0);
    assume true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i12 == 1);
    $i11 := $eq.ref(srp_reset_device, $p0);
    assume {:branchcond $i11} true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume false;
    return;

  $bb2:
    assume $i11 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2478} $i2 := srp_reset_device($p1);
    goto SeqInstr_1345, SeqInstr_1346;

  SeqInstr_1346:
    assume assertsPassed;
    goto SeqInstr_1347;

  SeqInstr_1347:
    $r := $i2;
    return;

  SeqInstr_1345:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i12 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2479} $i4 := srp_abort($p3);
    goto SeqInstr_1348, SeqInstr_1349;

  SeqInstr_1349:
    assume assertsPassed;
    goto SeqInstr_1350;

  SeqInstr_1350:
    $r := $i4;
    return;

  SeqInstr_1348:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i13 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2480} $i6 := srp_rport_reconnect($p5);
    goto SeqInstr_1351, SeqInstr_1352;

  SeqInstr_1352:
    assume assertsPassed;
    goto SeqInstr_1353;

  SeqInstr_1353:
    $r := $i6;
    return;

  SeqInstr_1351:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i14 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2481} $i8 := srp_reset_host($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i15 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2482} $i10 := srp_slave_configure($p9);
    $r := $i10;
    return;
}



const devirtbounce.22: ref;

axiom devirtbounce.22 == $sub.ref(0, 957630);

procedure devirtbounce.22(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.26, $M.27, $M.28, $M.29, $M.14, $M.17, $M.10, $CurrAddr, $M.12, $M.11, assertsPassed, $M.15, $M.16;



implementation devirtbounce.22(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i13 := $eq.ref(srp_tl_err_work, $p0);
    assume true;
    goto $bb8, $bb15;

  $bb15:
    assume !($i13 == 1);
    $i12 := $eq.ref(srp_rport_delete, $p0);
    assume true;
    goto $bb7, $bb14;

  $bb14:
    assume !($i12 == 1);
    $i11 := $eq.ref(srp_release_dev, $p0);
    assume {:branchcond $i11} true;
    goto $bb6, $bb13;

  $bb13:
    assume !($i11 == 1);
    $i10 := $eq.ref(srp_remove_one, $p0);
    assume true;
    goto $bb5, $bb12;

  $bb12:
    assume !($i10 == 1);
    $i9 := $eq.ref(srp_add_one, $p0);
    assume true;
    goto $bb4, $bb11;

  $bb11:
    assume !($i9 == 1);
    $i8 := $eq.ref(srp_terminate_io, $p0);
    assume true;
    goto $bb3, $bb10;

  $bb10:
    assume !($i8 == 1);
    $i7 := $eq.ref(srp_remove_work, $p0);
    assume {:branchcond $i7} true;
    goto $bb2, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2483} srp_remove_work($p1);
    goto SeqInstr_1354, SeqInstr_1355;

  SeqInstr_1355:
    assume assertsPassed;
    goto SeqInstr_1356;

  SeqInstr_1356:
    return;

  SeqInstr_1354:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i8 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2484} srp_terminate_io($p2);
    goto SeqInstr_1357, SeqInstr_1358;

  SeqInstr_1358:
    assume assertsPassed;
    goto SeqInstr_1359;

  SeqInstr_1359:
    return;

  SeqInstr_1357:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i9 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2485} srp_add_one($p3);
    goto SeqInstr_1360, SeqInstr_1361;

  SeqInstr_1361:
    assume assertsPassed;
    goto SeqInstr_1362;

  SeqInstr_1362:
    return;

  SeqInstr_1360:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i10 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2486} srp_remove_one($p4);
    goto SeqInstr_1363, SeqInstr_1364;

  SeqInstr_1364:
    assume assertsPassed;
    goto SeqInstr_1365;

  SeqInstr_1365:
    return;

  SeqInstr_1363:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i11 == 1;
    call {:si_unique_call 2487} srp_release_dev(arg);
    return;

  $bb7:
    assume $i12 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2488} srp_rport_delete($p5);
    goto SeqInstr_1366, SeqInstr_1367;

  SeqInstr_1367:
    assume assertsPassed;
    goto SeqInstr_1368;

  SeqInstr_1368:
    return;

  SeqInstr_1366:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i13 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2489} srp_tl_err_work($p6);
    return;
}



const devirtbounce.23: ref;

axiom devirtbounce.23 == $sub.ref(0, 958662);

procedure devirtbounce.23(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation devirtbounce.23(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i64) returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(srp_create_target, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 2490} $i1 := srp_create_target(arg, arg1, arg2, arg3);
    goto SeqInstr_1369, SeqInstr_1370;

  SeqInstr_1370:
    assume assertsPassed;
    goto SeqInstr_1371;

  SeqInstr_1371:
    $r := $i1;
    return;

  SeqInstr_1369:
    assume !assertsPassed;
    return;
}



const devirtbounce.24: ref;

axiom devirtbounce.24 == $sub.ref(0, 959694);

procedure devirtbounce.24(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.24(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i36 := $eq.ref(show_allow_ext_sg, $p0);
    assume true;
    goto $bb19, $bb37;

  $bb37:
    assume !($i36 == 1);
    $i35 := $eq.ref(show_cmd_sg_entries, $p0);
    assume true;
    goto $bb18, $bb36;

  $bb36:
    assume !($i35 == 1);
    $i34 := $eq.ref(show_tl_retry_count, $p0);
    assume true;
    goto $bb17, $bb35;

  $bb35:
    assume !($i34 == 1);
    $i33 := $eq.ref(show_comp_vector, $p0);
    assume true;
    goto $bb16, $bb34;

  $bb34:
    assume !($i33 == 1);
    $i32 := $eq.ref(show_ch_count, $p0);
    assume true;
    goto $bb15, $bb33;

  $bb33:
    assume !($i32 == 1);
    $i31 := $eq.ref(show_local_ib_device, $p0);
    assume {:branchcond $i31} true;
    goto $bb14, $bb32;

  $bb32:
    assume !($i31 == 1);
    $i30 := $eq.ref(show_local_ib_port, $p0);
    assume true;
    goto $bb13, $bb31;

  $bb31:
    assume !($i30 == 1);
    $i29 := $eq.ref(show_zero_req_lim, $p0);
    assume true;
    goto $bb12, $bb30;

  $bb30:
    assume !($i29 == 1);
    $i28 := $eq.ref(show_req_lim, $p0);
    assume true;
    goto $bb11, $bb29;

  $bb29:
    assume !($i28 == 1);
    $i27 := $eq.ref(show_orig_dgid, $p0);
    assume true;
    goto $bb10, $bb28;

  $bb28:
    assume !($i27 == 1);
    $i26 := $eq.ref(show_dgid, $p0);
    assume true;
    goto $bb9, $bb27;

  $bb27:
    assume !($i26 == 1);
    $i25 := $eq.ref(show_sgid, $p0);
    assume true;
    goto $bb8, $bb26;

  $bb26:
    assume !($i25 == 1);
    $i24 := $eq.ref(show_pkey, $p0);
    assume {:branchcond $i24} true;
    goto $bb7, $bb25;

  $bb25:
    assume !($i24 == 1);
    $i23 := $eq.ref(show_service_id, $p0);
    assume true;
    goto $bb6, $bb24;

  $bb24:
    assume !($i23 == 1);
    $i22 := $eq.ref(show_ioc_guid, $p0);
    assume true;
    goto $bb5, $bb23;

  $bb23:
    assume !($i22 == 1);
    $i21 := $eq.ref(show_id_ext, $p0);
    assume true;
    goto $bb4, $bb22;

  $bb22:
    assume !($i21 == 1);
    $i20 := $eq.ref(show_port, $p0);
    assume true;
    goto $bb3, $bb21;

  $bb21:
    assume !($i20 == 1);
    $i19 := $eq.ref(show_ibdev, $p0);
    assume true;
    goto $bb2, $bb20;

  $bb20:
    assume !($i19 == 1);
    assume false;
    return;

  $bb2:
    assume $i19 == 1;
    call {:si_unique_call 2491} $i1 := show_ibdev(arg, arg1, arg2);
    $r := $i1;
    return;

  $bb3:
    assume $i20 == 1;
    call {:si_unique_call 2492} $i2 := show_port(arg, arg1, arg2);
    $r := $i2;
    return;

  $bb4:
    assume $i21 == 1;
    call {:si_unique_call 2493} $i3 := show_id_ext(arg, arg1, arg2);
    $r := $i3;
    return;

  $bb5:
    assume $i22 == 1;
    call {:si_unique_call 2494} $i4 := show_ioc_guid(arg, arg1, arg2);
    $r := $i4;
    return;

  $bb6:
    assume $i23 == 1;
    call {:si_unique_call 2495} $i5 := show_service_id(arg, arg1, arg2);
    $r := $i5;
    return;

  $bb7:
    assume $i24 == 1;
    call {:si_unique_call 2496} $i6 := show_pkey(arg, arg1, arg2);
    $r := $i6;
    return;

  $bb8:
    assume $i25 == 1;
    call {:si_unique_call 2497} $i7 := show_sgid(arg, arg1, arg2);
    $r := $i7;
    return;

  $bb9:
    assume $i26 == 1;
    call {:si_unique_call 2498} $i8 := show_dgid(arg, arg1, arg2);
    $r := $i8;
    return;

  $bb10:
    assume $i27 == 1;
    call {:si_unique_call 2499} $i9 := show_orig_dgid(arg, arg1, arg2);
    $r := $i9;
    return;

  $bb11:
    assume $i28 == 1;
    call {:si_unique_call 2500} $i10 := show_req_lim(arg, arg1, arg2);
    $r := $i10;
    return;

  $bb12:
    assume $i29 == 1;
    call {:si_unique_call 2501} $i11 := show_zero_req_lim(arg, arg1, arg2);
    $r := $i11;
    return;

  $bb13:
    assume $i30 == 1;
    call {:si_unique_call 2502} $i12 := show_local_ib_port(arg, arg1, arg2);
    $r := $i12;
    return;

  $bb14:
    assume $i31 == 1;
    call {:si_unique_call 2503} $i13 := show_local_ib_device(arg, arg1, arg2);
    $r := $i13;
    return;

  $bb15:
    assume $i32 == 1;
    call {:si_unique_call 2504} $i14 := show_ch_count(arg, arg1, arg2);
    $r := $i14;
    return;

  $bb16:
    assume $i33 == 1;
    call {:si_unique_call 2505} $i15 := show_comp_vector(arg, arg1, arg2);
    $r := $i15;
    return;

  $bb17:
    assume $i34 == 1;
    call {:si_unique_call 2506} $i16 := show_tl_retry_count(arg, arg1, arg2);
    $r := $i16;
    return;

  $bb18:
    assume $i35 == 1;
    call {:si_unique_call 2507} $i17 := show_cmd_sg_entries(arg, arg1, arg2);
    $r := $i17;
    return;

  $bb19:
    assume $i36 == 1;
    call {:si_unique_call 2508} $i18 := show_allow_ext_sg(arg, arg1, arg2);
    $r := $i18;
    return;
}



const devirtbounce.25: ref;

axiom devirtbounce.25 == $sub.ref(0, 960726);

procedure devirtbounce.25(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.40, $M.41, $M.42, $M.14, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.66, $M.67, assertsPassed, $CurrAddr, $M.26, $M.27, $M.28, $M.29, $M.25, $M.12, $M.10, $M.11, $M.17, $M.18, $M.19, $M.16;



implementation devirtbounce.25(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i15 := $eq.ref(srp_slave_configure, $p0);
    assume true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i15 == 1);
    $i14 := $eq.ref(srp_reset_host, $p0);
    assume true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i14 == 1);
    $i13 := $eq.ref(srp_rport_reconnect, $p0);
    assume true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i13 == 1);
    $i12 := $eq.ref(srp_abort, $p0);
    assume true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i12 == 1);
    $i11 := $eq.ref(srp_reset_device, $p0);
    assume {:branchcond $i11} true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume false;
    return;

  $bb2:
    assume $i11 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2509} $i2 := srp_reset_device($p1);
    goto SeqInstr_1372, SeqInstr_1373;

  SeqInstr_1373:
    assume assertsPassed;
    goto SeqInstr_1374;

  SeqInstr_1374:
    $r := $i2;
    return;

  SeqInstr_1372:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i12 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2510} $i4 := srp_abort($p3);
    goto SeqInstr_1375, SeqInstr_1376;

  SeqInstr_1376:
    assume assertsPassed;
    goto SeqInstr_1377;

  SeqInstr_1377:
    $r := $i4;
    return;

  SeqInstr_1375:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i13 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2511} $i6 := srp_rport_reconnect($p5);
    goto SeqInstr_1378, SeqInstr_1379;

  SeqInstr_1379:
    assume assertsPassed;
    goto SeqInstr_1380;

  SeqInstr_1380:
    $r := $i6;
    return;

  SeqInstr_1378:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i14 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2512} $i8 := srp_reset_host($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i15 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2513} $i10 := srp_slave_configure($p9);
    $r := $i10;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

const $u1: ref;

const $u10: ref;

const $u11: ref;

const $u12: ref;

const $u13: ref;

const $u14: ref;

const $u15: ref;

const $u16: ref;

const $u17: ref;

const $u18: ref;

const $u19: ref;

const $u2: i32;

const $u20: ref;

const $u21: ref;

const $u22: ref;

const $u23: ref;

const $u24: ref;

const $u25: ref;

const $u26: ref;

const $u27: ref;

const $u3: ref;

const $u4: ref;

const $u5: ref;

const $u6: ref;

const $u7: ref;

const $u8: ref;

const $u9: ref;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.13, $M.133, $M.136, $M.72, $M.137, $M.138, $M.139, $M.140, $M.141, $M.145, $M.142, $M.143, $M.144, $M.147, $M.70, $M.148, $M.149, $M.150, $M.73, $M.71, $M.151, $M.65, $M.67, $M.146, $M.66, $M.12, $M.17, $M.10, $M.11, $M.15, $M.16, $M.0, $M.135, $M.134, $M.68, $M.62, $M.215, $M.216, $M.61, $M.1, $M.20, $M.217, $M.2, $M.126, $M.125, $M.127, $M.60, $M.59, $M.74, $M.9, $M.58, $M.228, $M.234, $M.235, $M.236, $M.237, $M.238, $M.239, $M.240, $M.241, $M.242, $M.243, $M.244, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 2514} __SMACK_static_init();
    call {:si_unique_call 2515} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.13, $M.133, $M.136, $M.72, $M.137, $M.138, $M.139, $M.140, $M.141, $M.145, $M.142, $M.143, $M.144, $M.147, $M.70, $M.148, $M.149, $M.150, $M.73, $M.71, $M.151, $M.65, $M.67, $M.146, $M.66, $M.12, $M.17, $M.10, $M.11, $M.15, $M.16, $M.0, $M.135, $M.134, $M.68, $M.62, $M.215, $M.216, $M.61, $M.1, $M.20, $M.217, $M.2, $M.126, $M.125, $M.127, $M.60, $M.59, $M.74, $M.9, $M.58, $M.228, $M.234, $M.235, $M.236, $M.237, $M.238, $M.239, $M.240, $M.241, $M.242, $M.243, $M.244, $CurrAddr, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.40, $M.41, $M.42, $M.14, $M.123, $M.128, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.18, $M.19, $M.69;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation srp_add_one_loop_$bb60(in_$p12: ref, in_$i150: i32, in_$i156: i8, in_$i157: i32, in_$i158: i8, in_$p159: ref, in_$i160: i64, in_$i161: i1, in_$p162: ref, in_$p163: ref, in_$i164: i32, in_$i165: i1, in_$i155: i32) returns (out_$i156: i8, out_$i157: i32, out_$i158: i8, out_$p159: ref, out_$i160: i64, out_$i161: i1, out_$p162: ref, out_$p163: ref, out_$i164: i32, out_$i165: i1, out_$i155: i32)
{

  entry:
    out_$i156, out_$i157, out_$i158, out_$p159, out_$i160, out_$i161, out_$p162, out_$p163, out_$i164, out_$i165, out_$i155 := in_$i156, in_$i157, in_$i158, in_$p159, in_$i160, in_$i161, in_$p162, in_$p163, in_$i164, in_$i165, in_$i155;
    goto $bb60, exit;

  $bb60:
    assume {:verifier.code 0} true;
    goto corral_source_split_246;

  $bb65:
    assume out_$i165 == 1;
    assume {:verifier.code 0} true;
    out_$i155 := out_$i164;
    goto $bb65_dummy;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    out_$i165 := $sle.i32(out_$i164, in_$i150);
    goto corral_source_split_261;

  $bb64:
    assume {:verifier.code 0} true;
    out_$i164 := $add.i32(out_$i155, 1);
    call {:si_unique_call 31} {:cexpr "p"} boogie_si_record_i32(out_$i164);
    goto corral_source_split_260;

  $bb63:
    assume !(out_$i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} list_add_tail(out_$p162, out_$p163);
    goto corral_source_split_258;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    out_$p163 := $add.ref($add.ref(in_$p12, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_257;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    out_$p162 := $add.ref($add.ref(out_$p159, $mul.ref(0, 1792)), $mul.ref(1616, 1));
    goto corral_source_split_256;

  $bb62:
    assume out_$i161 == 1;
    goto corral_source_split_255;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    out_$i161 := $ne.i64(out_$i160, 0);
    goto corral_source_split_253;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    out_$i160 := $p2i.ref.i64(out_$p159);
    goto corral_source_split_252;

  SeqInstr_9:
    goto corral_source_split_251;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} out_$p159 := srp_add_port(in_$p12, out_$i158);
    goto SeqInstr_8;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    out_$i158 := $trunc.i32.i8(out_$i157);
    goto corral_source_split_250;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    out_$i157 := $zext.i8.i32(out_$i156);
    goto corral_source_split_249;

  $bb61:
    assume {:verifier.code 0} true;
    out_$i156 := $trunc.i32.i8(out_$i155);
    goto corral_source_split_248;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb65_dummy:
    call {:si_unique_call 1} out_$i156, out_$i157, out_$i158, out_$p159, out_$i160, out_$i161, out_$p162, out_$p163, out_$i164, out_$i165, out_$i155 := srp_add_one_loop_$bb60(in_$p12, in_$i150, out_$i156, out_$i157, out_$i158, out_$p159, out_$i160, out_$i161, out_$p162, out_$p163, out_$i164, out_$i165, out_$i155);
    return;

  exit:
    return;
}



procedure srp_add_one_loop_$bb60(in_$p12: ref, in_$i150: i32, in_$i156: i8, in_$i157: i32, in_$i158: i8, in_$p159: ref, in_$i160: i64, in_$i161: i1, in_$p162: ref, in_$p163: ref, in_$i164: i32, in_$i165: i1, in_$i155: i32) returns (out_$i156: i8, out_$i157: i32, out_$i158: i8, out_$p159: ref, out_$i160: i64, out_$i161: i1, out_$p162: ref, out_$p163: ref, out_$i164: i32, out_$i165: i1, out_$i155: i32);
  modifies $M.1, $CurrAddr, $M.12, assertsPassed;



implementation srp_remove_one_loop_$bb13(in_$i33: i64, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p35: ref, in_vslice_dummy_var_73: i1) returns (out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p35: ref, out_vslice_dummy_var_73: i1)
{

  entry:
    out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p35, out_vslice_dummy_var_73 := in_$p38, in_$p39, in_$p40, in_$p41, in_$p42, in_$i43, in_$i44, in_$p35, in_vslice_dummy_var_73;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_312;

  $bb15:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$p35 := out_$p41;
    goto $bb15_dummy;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i64(out_$i43, in_$i33);
    goto corral_source_split_321;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    out_$i43 := $p2i.ref.i64(out_$p42);
    goto corral_source_split_320;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p40, $mul.ref($sub.ref(0, 440), 464)), $mul.ref(440, 1));
    goto corral_source_split_319;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref(out_$p40, $mul.ref($sub.ref(0, 440), 464));
    goto corral_source_split_318;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    out_$p40 := $bitcast.ref.ref(out_$p39);
    goto corral_source_split_317;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.1, out_$p38);
    goto corral_source_split_316;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref($add.ref(out_$p35, $mul.ref(0, 464)), $mul.ref(440, 1)), $mul.ref(0, 1));
    goto corral_source_split_315;

  SeqInstr_18:
    goto corral_source_split_314;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} out_vslice_dummy_var_73 := srp_queue_remove_work(out_$p35);
    goto SeqInstr_17;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p35, out_vslice_dummy_var_73 := srp_remove_one_loop_$bb13(in_$i33, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p35, out_vslice_dummy_var_73);
    return;

  exit:
    return;
}



procedure srp_remove_one_loop_$bb13(in_$i33: i64, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p35: ref, in_vslice_dummy_var_73: i1) returns (out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p35: ref, out_vslice_dummy_var_73: i1);
  modifies $M.1, $M.11, assertsPassed;



implementation srp_remove_one_loop_$bb8(in_$i18: i64, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p35: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p20: ref, in_$p21: ref, in_vslice_dummy_var_73: i1) returns (out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p35: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p20: ref, out_$p21: ref, out_vslice_dummy_var_73: i1)
{

  entry:
    out_$p22, out_$p23, out_$p24, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p35, out_$p45, out_$p46, out_$p47, out_$p48, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p20, out_$p21, out_vslice_dummy_var_73 := in_$p22, in_$p23, in_$p24, in_$p26, in_$p27, in_$p28, in_$p29, in_$p30, in_$i31, in_$p32, in_$i33, in_$i34, in_$p38, in_$p39, in_$p40, in_$p41, in_$p42, in_$i43, in_$i44, in_$p35, in_$p45, in_$p46, in_$p47, in_$p48, in_$p50, in_$p51, in_$p52, in_$p53, in_$p54, in_$i55, in_$i56, in_$p20, in_$p21, in_vslice_dummy_var_73;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_292;

  $bb18:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$p20, out_$p21 := out_$p53, out_$p20;
    goto $bb18_dummy;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i64(out_$i55, in_$i18);
    goto corral_source_split_339;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    out_$i55 := $p2i.ref.i64(out_$p54);
    goto corral_source_split_338;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p20, $mul.ref(0, 1792)), $mul.ref(1616, 1));
    goto corral_source_split_337;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref(out_$p52, $mul.ref($sub.ref(0, 1608), 1792));
    goto corral_source_split_336;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    out_$p52 := $bitcast.ref.ref(out_$p51);
    goto corral_source_split_335;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.1, out_$p50);
    goto corral_source_split_334;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref($add.ref(out_$p20, $mul.ref(0, 1792)), $mul.ref(1616, 1)), $mul.ref(0, 1));
    goto corral_source_split_333;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} kfree(out_$p48);
    goto corral_source_split_332;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(out_$p21);
    goto corral_source_split_331;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} flush_workqueue(out_$p47);
    goto corral_source_split_330;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    out_$p47 := $M.9;
    goto corral_source_split_329;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} flush_workqueue(out_$p46);
    goto corral_source_split_328;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.1, system_long_wq);
    goto corral_source_split_327;

  SeqInstr_21:
    goto corral_source_split_326;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} ldv_spin_unlock_110(out_$p45);
    goto SeqInstr_20;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p21, $mul.ref(0, 1792)), $mul.ref(1448, 1));
    goto corral_source_split_325;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume {:verifier.code 0} true;
    assume !(out_$i34 == 1);
    goto $bb12;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb16:
    assume !(out_$i44 == 1);
    goto corral_source_split_323;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i64(out_$i43, out_$i33);
    goto corral_source_split_321;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    out_$i43 := $p2i.ref.i64(out_$p42);
    goto corral_source_split_320;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p40, $mul.ref($sub.ref(0, 440), 464)), $mul.ref(440, 1));
    goto corral_source_split_319;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref(out_$p40, $mul.ref($sub.ref(0, 440), 464));
    goto corral_source_split_318;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    out_$p40 := $bitcast.ref.ref(out_$p39);
    goto corral_source_split_317;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.1, out_$p38);
    goto corral_source_split_316;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref($add.ref(out_$p35, $mul.ref(0, 464)), $mul.ref(440, 1)), $mul.ref(0, 1));
    goto corral_source_split_315;

  SeqInstr_18:
    goto corral_source_split_314;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} out_vslice_dummy_var_73 := srp_queue_remove_work(out_$p35);
    goto SeqInstr_17;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb13:
    call out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p35, out_vslice_dummy_var_73 := srp_remove_one_loop_$bb13(out_$i33, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p35, out_vslice_dummy_var_73);
    goto $bb13_last;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_312;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    out_$p35 := out_$p29;
    goto $bb13;

  $bb15:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$p35 := out_$p41;
    assume false;
    return;

  $bb10:
    assume out_$i34 == 1;
    goto corral_source_split_310;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i64(out_$i31, out_$i33);
    goto corral_source_split_308;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(out_$p32);
    goto corral_source_split_307;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p21, $mul.ref(0, 1792)), $mul.ref(1432, 1));
    goto corral_source_split_306;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_305;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p28, $mul.ref($sub.ref(0, 440), 464)), $mul.ref(440, 1));
    goto corral_source_split_304;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref(out_$p28, $mul.ref($sub.ref(0, 440), 464));
    goto corral_source_split_303;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    out_$p28 := $bitcast.ref.ref(out_$p27);
    goto corral_source_split_302;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.1, out_$p26);
    goto corral_source_split_301;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref(out_$p21, $mul.ref(0, 1792)), $mul.ref(1432, 1)), $mul.ref(0, 1));
    goto corral_source_split_300;

  SeqInstr_15:
    goto corral_source_split_299;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} ldv_spin_lock_109(out_$p24);
    goto SeqInstr_14;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p21, $mul.ref(0, 1792)), $mul.ref(1448, 1));
    goto corral_source_split_298;

  SeqInstr_12:
    goto corral_source_split_297;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} ldv_wait_for_completion_149(out_$p23);
    goto SeqInstr_11;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p21, $mul.ref(0, 1792)), $mul.ref(1520, 1));
    goto corral_source_split_296;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} device_unregister(out_$p22);
    goto corral_source_split_295;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p21, $mul.ref(0, 1792)), $mul.ref(16, 1));
    goto corral_source_split_294;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p22, out_$p23, out_$p24, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p35, out_$p45, out_$p46, out_$p47, out_$p48, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p20, out_$p21, out_vslice_dummy_var_73 := srp_remove_one_loop_$bb8(in_$i18, out_$p22, out_$p23, out_$p24, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p35, out_$p45, out_$p46, out_$p47, out_$p48, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p20, out_$p21, out_vslice_dummy_var_73);
    return;

  exit:
    return;
}



procedure srp_remove_one_loop_$bb8(in_$i18: i64, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p35: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p20: ref, in_$p21: ref, in_vslice_dummy_var_73: i1) returns (out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p35: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p20: ref, out_$p21: ref, out_vslice_dummy_var_73: i1);
  modifies $M.10, assertsPassed, $M.1, $M.11, $M.12;



implementation ldv_assume_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} ldv_assume_loop_$bb3();
    return;

  exit:
    return;
}



procedure ldv_assume_loop_$bb3();



implementation srp_rport_reconnect_loop_$bb60(in_$p3: ref, in_$p93: ref, in_$p100: ref, in_$p101: ref, in_$i102: i64, in_$p103: ref, in_$i104: i1, in_$p107: ref, in_$p108: ref, in_$i109: i64, in_$i110: i1, in_$i105: i32, in_$i106: i32, in_$i114: i1, in_$i115: i32, in_$i116: i32, in_$i117: i32, in_$i118: i1, in_$i97: i8, in_$i98: i32, in_$i99: i32, in_$i119: i32) returns (out_$p100: ref, out_$p101: ref, out_$i102: i64, out_$p103: ref, out_$i104: i1, out_$p107: ref, out_$p108: ref, out_$i109: i64, out_$i110: i1, out_$i105: i32, out_$i106: i32, out_$i114: i1, out_$i115: i32, out_$i116: i32, out_$i117: i32, out_$i118: i1, out_$i97: i8, out_$i98: i32, out_$i99: i32, out_$i119: i32)
{

  entry:
    out_$p100, out_$p101, out_$i102, out_$p103, out_$i104, out_$p107, out_$p108, out_$i109, out_$i110, out_$i105, out_$i106, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i97, out_$i98, out_$i99, out_$i119 := in_$p100, in_$p101, in_$i102, in_$p103, in_$i104, in_$p107, in_$p108, in_$i109, in_$i110, in_$i105, in_$i106, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i97, in_$i98, in_$i99, in_$i119;
    goto $bb60, exit;

  $bb60:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_945;

  $bb72:
    assume out_$i118 == 1;
    assume {:verifier.code 0} true;
    out_$i97, out_$i98, out_$i99 := 1, out_$i115, out_$i116;
    goto $bb72_dummy;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    out_$i119 := out_$i115;
    assume true;
    goto $bb72;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    out_$i118 := $ult.i32(out_$i116, out_$i117);
    goto corral_source_split_973;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    out_$i117 := $load.i32($M.1, in_$p93);
    goto corral_source_split_972;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    out_$i116 := $add.i32(out_$i99, 1);
    call {:si_unique_call 214} {:cexpr "i"} boogie_si_record_i32(out_$i116);
    goto corral_source_split_971;

  SeqInstr_108:
    call {:si_unique_call 213} {:cexpr "ret"} boogie_si_record_i32(out_$i115);
    goto corral_source_split_970;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} out_$i115 := srp_connect_ch(out_$p103, out_$i114);
    goto SeqInstr_107;

  $bb71:
    assume {:verifier.code 0} true;
    out_$i114 := $trunc.i8.i1(out_$i97);
    goto corral_source_split_969;

  $bb66:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    out_$i105, out_$i106 := out_$i99, out_$i98;
    assume true;
    goto $bb66;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    out_$i110 := $eq.i64(out_$i109, 0);
    goto corral_source_split_960;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    out_$i109 := $p2i.ref.i64(out_$p108);
    goto corral_source_split_959;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    out_$p108 := $load.ref($M.1, out_$p107);
    goto corral_source_split_958;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(out_$p101, $mul.ref(out_$i102, 488)), $mul.ref(96, 1));
    goto corral_source_split_957;

  $bb64:
    assume !(out_$i104 == 1);
    goto corral_source_split_956;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    out_$i105, out_$i106 := out_$i99, out_$i98;
    assume true;
    goto $bb64;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    out_$i104 := $ne.i32(out_$i98, 0);
    goto corral_source_split_951;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref(out_$p101, $mul.ref(out_$i102, 488));
    goto corral_source_split_950;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    out_$i102 := $sext.i32.i64(out_$i99);
    goto corral_source_split_949;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    out_$p101 := $load.ref($M.1, out_$p100);
    goto corral_source_split_948;

  $bb61:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(in_$p3, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_947;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb72_dummy:
    call {:si_unique_call 1} out_$p100, out_$p101, out_$i102, out_$p103, out_$i104, out_$p107, out_$p108, out_$i109, out_$i110, out_$i105, out_$i106, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i97, out_$i98, out_$i99, out_$i119 := srp_rport_reconnect_loop_$bb60(in_$p3, in_$p93, out_$p100, out_$p101, out_$i102, out_$p103, out_$i104, out_$p107, out_$p108, out_$i109, out_$i110, out_$i105, out_$i106, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i97, out_$i98, out_$i99, out_$i119);
    return;

  exit:
    return;
}



procedure srp_rport_reconnect_loop_$bb60(in_$p3: ref, in_$p93: ref, in_$p100: ref, in_$p101: ref, in_$i102: i64, in_$p103: ref, in_$i104: i1, in_$p107: ref, in_$p108: ref, in_$i109: i64, in_$i110: i1, in_$i105: i32, in_$i106: i32, in_$i114: i1, in_$i115: i32, in_$i116: i32, in_$i117: i32, in_$i118: i1, in_$i97: i8, in_$i98: i32, in_$i99: i32, in_$i119: i32) returns (out_$p100: ref, out_$p101: ref, out_$i102: i64, out_$p103: ref, out_$i104: i1, out_$p107: ref, out_$p108: ref, out_$i109: i64, out_$i110: i1, out_$i105: i32, out_$i106: i32, out_$i114: i1, out_$i115: i32, out_$i116: i32, out_$i117: i32, out_$i118: i1, out_$i97: i8, out_$i98: i32, out_$i99: i32, out_$i119: i32);
  modifies $M.1, $M.17, $M.18, $M.19, $M.11, assertsPassed, $CurrAddr;



implementation srp_rport_reconnect_loop_$bb49(in_$p63: ref, in_$i64: i64, in_$p75: ref, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i32, in_$i87: i32, in_$i88: i1, in_$i78: i32) returns (out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i32, out_$i87: i32, out_$i88: i1, out_$i78: i32)
{

  entry:
    out_$p79, out_$p80, out_$i81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i78 := in_$p79, in_$p80, in_$i81, in_$p82, in_$p83, in_$p84, in_$p85, in_$i86, in_$i87, in_$i88, in_$i78;
    goto $bb49, exit;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_921;

  $bb51:
    assume out_$i88 == 1;
    assume {:verifier.code 0} true;
    out_$i78 := out_$i86;
    goto $bb51_dummy;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    out_$i88 := $slt.i32(out_$i86, out_$i87);
    goto corral_source_split_933;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i32($M.1, in_$p75);
    goto corral_source_split_932;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    out_$i86 := $add.i32(out_$i78, 1);
    call {:si_unique_call 210} {:cexpr "j"} boogie_si_record_i32(out_$i86);
    goto corral_source_split_931;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} list_add(out_$p84, out_$p85);
    goto corral_source_split_930;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p63, $mul.ref(in_$i64, 488)), $mul.ref(0, 1));
    goto corral_source_split_929;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(out_$p83, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_928;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    out_$p83 := $load.ref($M.1, out_$p82);
    goto corral_source_split_927;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref(out_$p80, $mul.ref(out_$i81, 8));
    goto corral_source_split_926;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    out_$i81 := $sext.i32.i64(out_$i78);
    goto corral_source_split_925;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.1, out_$p79);
    goto corral_source_split_924;

  $bb50:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p63, $mul.ref(in_$i64, 488)), $mul.ref(352, 1));
    goto corral_source_split_923;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb51_dummy:
    call {:si_unique_call 1} out_$p79, out_$p80, out_$i81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i78 := srp_rport_reconnect_loop_$bb49(in_$p63, in_$i64, in_$p75, out_$p79, out_$p80, out_$i81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i78);
    return;

  exit:
    return;
}



procedure srp_rport_reconnect_loop_$bb49(in_$p63: ref, in_$i64: i64, in_$p75: ref, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i32, in_$i87: i32, in_$i88: i1, in_$i78: i32) returns (out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i32, out_$i87: i32, out_$i88: i1, out_$i78: i32);



implementation srp_rport_reconnect_loop_$bb40(in_$p3: ref, in_$p56: ref, in_$p62: ref, in_$p63: ref, in_$i64: i64, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i64, in_$i69: i1, in_$i70: i32, in_$i72: i32, in_$i73: i32, in_$p74: ref, in_$p75: ref, in_$i76: i32, in_$i77: i1, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i32, in_$i87: i32, in_$i88: i1, in_$i78: i32, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$i60: i32, in_$i61: i32, in_$i92: i32) returns (out_$p62: ref, out_$p63: ref, out_$i64: i64, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i64, out_$i69: i1, out_$i70: i32, out_$i72: i32, out_$i73: i32, out_$p74: ref, out_$p75: ref, out_$i76: i32, out_$i77: i1, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i32, out_$i87: i32, out_$i88: i1, out_$i78: i32, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$i60: i32, out_$i61: i32, out_$i92: i32)
{

  entry:
    out_$p62, out_$p63, out_$i64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$p79, out_$p80, out_$i81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i78, out_$i89, out_$i90, out_$i91, out_$i60, out_$i61, out_$i92 := in_$p62, in_$p63, in_$i64, in_$p65, in_$p66, in_$p67, in_$i68, in_$i69, in_$i70, in_$i72, in_$i73, in_$p74, in_$p75, in_$i76, in_$i77, in_$p79, in_$p80, in_$i81, in_$p82, in_$p83, in_$p84, in_$p85, in_$i86, in_$i87, in_$i88, in_$i78, in_$i89, in_$i90, in_$i91, in_$i60, in_$i61, in_$i92;
    goto $bb40, exit;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_893;

  $bb54:
    assume out_$i91 == 1;
    assume {:verifier.code 0} true;
    out_$i60, out_$i61 := out_$i73, out_$i89;
    goto $bb54_dummy;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    out_$i92 := out_$i73;
    assume true;
    goto $bb54;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    out_$i91 := $ult.i32(out_$i89, out_$i90);
    goto corral_source_split_939;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i32($M.1, in_$p56);
    goto corral_source_split_938;

  $bb53:
    assume {:verifier.code 0} true;
    out_$i89 := $add.i32(out_$i61, 1);
    call {:si_unique_call 211} {:cexpr "i"} boogie_si_record_i32(out_$i89);
    goto corral_source_split_937;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb47:
    assume {:verifier.code 0} true;
    assume !(out_$i77 == 1);
    goto $bb48;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb52:
    assume !(out_$i88 == 1);
    goto corral_source_split_935;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    out_$i88 := $slt.i32(out_$i86, out_$i87);
    goto corral_source_split_933;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i32($M.1, out_$p75);
    goto corral_source_split_932;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    out_$i86 := $add.i32(out_$i78, 1);
    call {:si_unique_call 210} {:cexpr "j"} boogie_si_record_i32(out_$i86);
    goto corral_source_split_931;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} list_add(out_$p84, out_$p85);
    goto corral_source_split_930;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p63, $mul.ref(out_$i64, 488)), $mul.ref(0, 1));
    goto corral_source_split_929;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(out_$p83, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_928;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    out_$p83 := $load.ref($M.1, out_$p82);
    goto corral_source_split_927;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref(out_$p80, $mul.ref(out_$i81, 8));
    goto corral_source_split_926;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    out_$i81 := $sext.i32.i64(out_$i78);
    goto corral_source_split_925;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.1, out_$p79);
    goto corral_source_split_924;

  $bb50:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p63, $mul.ref(out_$i64, 488)), $mul.ref(352, 1));
    goto corral_source_split_923;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb49:
    call out_$p79, out_$p80, out_$i81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i78 := srp_rport_reconnect_loop_$bb49(out_$p63, out_$i64, out_$p75, out_$p79, out_$p80, out_$i81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i78);
    goto $bb49_last;

  $bb49_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_921;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    out_$i78 := 0;
    goto $bb49;

  $bb51:
    assume out_$i88 == 1;
    assume {:verifier.code 0} true;
    out_$i78 := out_$i86;
    assume false;
    return;

  $bb46:
    assume out_$i77 == 1;
    goto corral_source_split_919;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    out_$i77 := $slt.i32(0, out_$i76);
    goto corral_source_split_917;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i32($M.1, out_$p75);
    goto corral_source_split_916;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p3, $mul.ref(0, 464)), $mul.ref(232, 1));
    goto corral_source_split_915;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} INIT_LIST_HEAD(out_$p74);
    goto corral_source_split_914;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p63, $mul.ref(out_$i64, 488)), $mul.ref(0, 1));
    goto corral_source_split_913;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    out_$i73 := $add.i32(out_$i60, out_$i72);
    call {:si_unique_call 207} {:cexpr "ret"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_912;

  SeqInstr_105:
    call {:si_unique_call 206} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_911;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} out_$i72 := srp_create_ch_ib(out_$p65);
    goto SeqInstr_104;

  $bb43:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    out_$i70 := out_$i60;
    assume true;
    goto $bb43;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i64(out_$i68, 0);
    goto corral_source_split_902;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    out_$i68 := $p2i.ref.i64(out_$p67);
    goto corral_source_split_901;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.1, out_$p66);
    goto corral_source_split_900;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(out_$p63, $mul.ref(out_$i64, 488)), $mul.ref(96, 1));
    goto corral_source_split_899;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref(out_$p63, $mul.ref(out_$i64, 488));
    goto corral_source_split_898;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    out_$i64 := $sext.i32.i64(out_$i61);
    goto corral_source_split_897;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    out_$p63 := $load.ref($M.1, out_$p62);
    goto corral_source_split_896;

  $bb41:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p3, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_895;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb54_dummy:
    call {:si_unique_call 1} out_$p62, out_$p63, out_$i64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$p79, out_$p80, out_$i81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i78, out_$i89, out_$i90, out_$i91, out_$i60, out_$i61, out_$i92 := srp_rport_reconnect_loop_$bb40(in_$p3, in_$p56, out_$p62, out_$p63, out_$i64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$p79, out_$p80, out_$i81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i78, out_$i89, out_$i90, out_$i91, out_$i60, out_$i61, out_$i92);
    return;

  exit:
    return;
}



procedure srp_rport_reconnect_loop_$bb40(in_$p3: ref, in_$p56: ref, in_$p62: ref, in_$p63: ref, in_$i64: i64, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i64, in_$i69: i1, in_$i70: i32, in_$i72: i32, in_$i73: i32, in_$p74: ref, in_$p75: ref, in_$i76: i32, in_$i77: i1, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i32, in_$i87: i32, in_$i88: i1, in_$i78: i32, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$i60: i32, in_$i61: i32, in_$i92: i32) returns (out_$p62: ref, out_$p63: ref, out_$i64: i64, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i64, out_$i69: i1, out_$i70: i32, out_$i72: i32, out_$i73: i32, out_$p74: ref, out_$p75: ref, out_$i76: i32, out_$i77: i1, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i32, out_$i87: i32, out_$i88: i1, out_$i78: i32, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$i60: i32, out_$i61: i32, out_$i92: i32);
  modifies $M.1, $M.25, $M.26, $M.27, $M.28, $M.29, $M.17, $CurrAddr, assertsPassed;



implementation srp_rport_reconnect_loop_$bb29(in_$p35: ref, in_$i36: i64, in_$p37: ref, in_$p42: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$i45: i32) returns (out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$i45: i32)
{

  entry:
    out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i45 := in_$p46, in_$p47, in_$i48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i45;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_872;

  $bb31:
    assume out_$i52 == 1;
    assume {:verifier.code 0} true;
    out_$i45 := out_$i50;
    goto $bb31_dummy;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    out_$i52 := $slt.i32(out_$i50, out_$i51);
    goto corral_source_split_881;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.1, in_$p42);
    goto corral_source_split_880;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    out_$i50 := $add.i32(out_$i45, 1);
    call {:si_unique_call 203} {:cexpr "j"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_879;

  SeqInstr_102:
    goto corral_source_split_878;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} srp_finish_req(in_$p37, out_$p49, $0.ref, 524288);
    goto SeqInstr_101;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref(out_$p47, $mul.ref(out_$i48, 56));
    goto corral_source_split_877;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(out_$i45);
    goto corral_source_split_876;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.1, out_$p46);
    goto corral_source_split_875;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p35, $mul.ref(in_$i36, 488)), $mul.ref(368, 1));
    goto corral_source_split_874;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb31_dummy:
    call {:si_unique_call 1} out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i45 := srp_rport_reconnect_loop_$bb29(in_$p35, in_$i36, in_$p37, in_$p42, out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i45);
    return;

  exit:
    return;
}



procedure srp_rport_reconnect_loop_$bb29(in_$p35: ref, in_$i36: i64, in_$p37: ref, in_$p42: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$i45: i32) returns (out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$i45: i32);
  modifies $M.14, $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.15, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr, $M.12, $M.10, $M.11, $M.17, $M.16;



implementation srp_rport_reconnect_loop_$bb20(in_$p3: ref, in_$p30: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$i45: i32, in_$i53: i32, in_$i54: i32, in_$i55: i1, in_$i33: i32) returns (out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$i45: i32, out_$i53: i32, out_$i54: i32, out_$i55: i1, out_$i33: i32)
{

  entry:
    out_$p34, out_$p35, out_$i36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i45, out_$i53, out_$i54, out_$i55, out_$i33 := in_$p34, in_$p35, in_$i36, in_$p37, in_$p38, in_$p39, in_$i40, in_$i41, in_$p42, in_$i43, in_$i44, in_$p46, in_$p47, in_$i48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i45, in_$i53, in_$i54, in_$i55, in_$i33;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_849;

  $bb34:
    assume out_$i55 == 1;
    assume {:verifier.code 0} true;
    out_$i33 := out_$i53;
    goto $bb34_dummy;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    out_$i55 := $ult.i32(out_$i53, out_$i54);
    goto corral_source_split_887;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.1, in_$p30);
    goto corral_source_split_886;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i53 := $add.i32(out_$i33, 1);
    call {:si_unique_call 204} {:cexpr "i"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_885;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i44 == 1);
    goto $bb28;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb32:
    assume !(out_$i52 == 1);
    goto corral_source_split_883;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    out_$i52 := $slt.i32(out_$i50, out_$i51);
    goto corral_source_split_881;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.1, out_$p42);
    goto corral_source_split_880;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    out_$i50 := $add.i32(out_$i45, 1);
    call {:si_unique_call 203} {:cexpr "j"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_879;

  SeqInstr_102:
    goto corral_source_split_878;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} srp_finish_req(out_$p37, out_$p49, $0.ref, 524288);
    goto SeqInstr_101;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref(out_$p47, $mul.ref(out_$i48, 56));
    goto corral_source_split_877;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(out_$i45);
    goto corral_source_split_876;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.1, out_$p46);
    goto corral_source_split_875;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p35, $mul.ref(out_$i36, 488)), $mul.ref(368, 1));
    goto corral_source_split_874;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb29:
    call out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i45 := srp_rport_reconnect_loop_$bb29(out_$p35, out_$i36, out_$p37, out_$p42, out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i45);
    goto $bb29_last;

  $bb29_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_872;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    out_$i45 := 0;
    goto $bb29;

  $bb31:
    assume out_$i52 == 1;
    assume {:verifier.code 0} true;
    out_$i45 := out_$i50;
    assume false;
    return;

  $bb26:
    assume out_$i44 == 1;
    goto corral_source_split_870;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    out_$i44 := $slt.i32(0, out_$i43);
    goto corral_source_split_868;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.1, out_$p42);
    goto corral_source_split_867;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p3, $mul.ref(0, 464)), $mul.ref(236, 1));
    goto corral_source_split_866;

  $bb23:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i64(out_$i40, 0);
    goto corral_source_split_858;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    out_$i40 := $p2i.ref.i64(out_$p39);
    goto corral_source_split_857;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.1, out_$p38);
    goto corral_source_split_856;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p35, $mul.ref(out_$i36, 488)), $mul.ref(96, 1));
    goto corral_source_split_855;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref(out_$p35, $mul.ref(out_$i36, 488));
    goto corral_source_split_854;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    out_$i36 := $sext.i32.i64(out_$i33);
    goto corral_source_split_853;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.1, out_$p34);
    goto corral_source_split_852;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p3, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_851;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb34_dummy:
    call {:si_unique_call 1} out_$p34, out_$p35, out_$i36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i45, out_$i53, out_$i54, out_$i55, out_$i33 := srp_rport_reconnect_loop_$bb20(in_$p3, in_$p30, out_$p34, out_$p35, out_$i36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i45, out_$i53, out_$i54, out_$i55, out_$i33);
    return;

  exit:
    return;
}



procedure srp_rport_reconnect_loop_$bb20(in_$p3: ref, in_$p30: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$i45: i32, in_$i53: i32, in_$i54: i32, in_$i55: i1, in_$i33: i32) returns (out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$i45: i32, out_$i53: i32, out_$i54: i32, out_$i55: i1, out_$i33: i32);
  modifies $M.14, $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.15, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr, $M.12, $M.10, $M.11, $M.17, $M.16;



implementation srp_rport_reconnect_loop_$bb8(in_$p3: ref, in_$p8: ref, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$i22: i32, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i12: i32, in_$i13: i32, in_$i29: i32) returns (out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$i22: i32, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i12: i32, out_$i13: i32, out_$i29: i32)
{

  entry:
    out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i12, out_$i13, out_$i29 := in_$p14, in_$p15, in_$i16, in_$p17, in_$p18, in_$p19, in_$i20, in_$i21, in_$i22, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i12, in_$i13, in_$i29;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_821;

  $bb14:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$i12, out_$i13 := out_$i25, out_$i26;
    goto $bb14_dummy;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i25;
    assume true;
    goto $bb14;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    out_$i28 := $ult.i32(out_$i26, out_$i27);
    goto corral_source_split_843;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.1, in_$p8);
    goto corral_source_split_842;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    out_$i26 := $add.i32(out_$i13, 1);
    call {:si_unique_call 201} {:cexpr "i"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_841;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    out_$i25 := $add.i32(out_$i12, out_$i24);
    call {:si_unique_call 200} {:cexpr "ret"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_840;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} out_$i24 := srp_new_cm_id(out_$p17);
    call {:si_unique_call 199} {:cexpr "tmp"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_839;

  $bb11:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i12;
    assume true;
    goto $bb11;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i64(out_$i20, 0);
    goto corral_source_split_830;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64(out_$p19);
    goto corral_source_split_829;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.1, out_$p18);
    goto corral_source_split_828;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i16, 488)), $mul.ref(96, 1));
    goto corral_source_split_827;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref(out_$p15, $mul.ref(out_$i16, 488));
    goto corral_source_split_826;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i13);
    goto corral_source_split_825;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.1, out_$p14);
    goto corral_source_split_824;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p3, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_823;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i12, out_$i13, out_$i29 := srp_rport_reconnect_loop_$bb8(in_$p3, in_$p8, out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i12, out_$i13, out_$i29);
    return;

  exit:
    return;
}



procedure srp_rport_reconnect_loop_$bb8(in_$p3: ref, in_$p8: ref, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$i22: i32, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i12: i32, in_$i13: i32, in_$i29: i32) returns (out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$i22: i32, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i12: i32, out_$i13: i32, out_$i29: i32);
  modifies $M.1;



implementation srp_terminate_io_loop_$bb26(in_$p46: ref, in_$i47: i64, in_$p48: ref, in_$p49: ref, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i1, in_$i52: i32) returns (out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i1, out_$i52: i32)
{

  entry:
    out_$p53, out_$p54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i52 := in_$p53, in_$p54, in_$i55, in_$p56, in_$i57, in_$i58, in_$i59, in_$i52;
    goto $bb26, exit;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_1058;

  $bb28:
    assume out_$i59 == 1;
    assume {:verifier.code 0} true;
    out_$i52 := out_$i57;
    goto $bb28_dummy;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    out_$i59 := $slt.i32(out_$i57, out_$i58);
    goto corral_source_split_1067;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i32($M.1, in_$p49);
    goto corral_source_split_1066;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    out_$i57 := $add.i32(out_$i52, 1);
    call {:si_unique_call 229} {:cexpr "j"} boogie_si_record_i32(out_$i57);
    goto corral_source_split_1065;

  SeqInstr_111:
    goto corral_source_split_1064;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} srp_finish_req(in_$p48, out_$p56, $0.ref, 983040);
    goto SeqInstr_110;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref(out_$p54, $mul.ref(out_$i55, 56));
    goto corral_source_split_1063;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    out_$i55 := $sext.i32.i64(out_$i52);
    goto corral_source_split_1062;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.1, out_$p53);
    goto corral_source_split_1061;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p46, $mul.ref(in_$i47, 488)), $mul.ref(368, 1));
    goto corral_source_split_1060;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb28_dummy:
    call {:si_unique_call 1} out_$p53, out_$p54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i52 := srp_terminate_io_loop_$bb26(in_$p46, in_$i47, in_$p48, in_$p49, out_$p53, out_$p54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i52);
    return;

  exit:
    return;
}



procedure srp_terminate_io_loop_$bb26(in_$p46: ref, in_$i47: i64, in_$p48: ref, in_$p49: ref, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i1, in_$i52: i32) returns (out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i1, out_$i52: i32);
  modifies $M.14, $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.15, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr, $M.12, $M.10, $M.11, $M.17, $M.16;



implementation srp_terminate_io_loop_$bb21(in_$p3: ref, in_$p41: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i1, in_$i52: i32, in_$i60: i32, in_$i61: i32, in_$i62: i1, in_$i44: i32) returns (out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i1, out_$i52: i32, out_$i60: i32, out_$i61: i32, out_$i62: i1, out_$i44: i32)
{

  entry:
    out_$p45, out_$p46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p53, out_$p54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i52, out_$i60, out_$i61, out_$i62, out_$i44 := in_$p45, in_$p46, in_$i47, in_$p48, in_$p49, in_$i50, in_$i51, in_$p53, in_$p54, in_$i55, in_$p56, in_$i57, in_$i58, in_$i59, in_$i52, in_$i60, in_$i61, in_$i62, in_$i44;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_1046;

  $bb31:
    assume out_$i62 == 1;
    assume {:verifier.code 0} true;
    out_$i44 := out_$i60;
    goto $bb31_dummy;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    out_$i62 := $ult.i32(out_$i60, out_$i61);
    goto corral_source_split_1073;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.1, in_$p41);
    goto corral_source_split_1072;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i60 := $add.i32(out_$i44, 1);
    call {:si_unique_call 230} {:cexpr "i"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_1071;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb24:
    assume {:verifier.code 0} true;
    assume !(out_$i51 == 1);
    goto $bb25;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb29:
    assume !(out_$i59 == 1);
    goto corral_source_split_1069;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    out_$i59 := $slt.i32(out_$i57, out_$i58);
    goto corral_source_split_1067;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i32($M.1, out_$p49);
    goto corral_source_split_1066;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    out_$i57 := $add.i32(out_$i52, 1);
    call {:si_unique_call 229} {:cexpr "j"} boogie_si_record_i32(out_$i57);
    goto corral_source_split_1065;

  SeqInstr_111:
    goto corral_source_split_1064;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} srp_finish_req(out_$p48, out_$p56, $0.ref, 983040);
    goto SeqInstr_110;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref(out_$p54, $mul.ref(out_$i55, 56));
    goto corral_source_split_1063;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    out_$i55 := $sext.i32.i64(out_$i52);
    goto corral_source_split_1062;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.1, out_$p53);
    goto corral_source_split_1061;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p46, $mul.ref(out_$i47, 488)), $mul.ref(368, 1));
    goto corral_source_split_1060;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb26:
    call out_$p53, out_$p54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i52 := srp_terminate_io_loop_$bb26(out_$p46, out_$i47, out_$p48, out_$p49, out_$p53, out_$p54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i52);
    goto $bb26_last;

  $bb26_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1058;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    out_$i52 := 0;
    goto $bb26;

  $bb28:
    assume out_$i59 == 1;
    assume {:verifier.code 0} true;
    out_$i52 := out_$i57;
    assume false;
    return;

  $bb23:
    assume out_$i51 == 1;
    goto corral_source_split_1056;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    out_$i51 := $slt.i32(0, out_$i50);
    goto corral_source_split_1054;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.1, out_$p49);
    goto corral_source_split_1053;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p3, $mul.ref(0, 464)), $mul.ref(236, 1));
    goto corral_source_split_1052;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref(out_$p46, $mul.ref(out_$i47, 488));
    goto corral_source_split_1051;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    out_$i47 := $sext.i32.i64(out_$i44);
    goto corral_source_split_1050;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.1, out_$p45);
    goto corral_source_split_1049;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p3, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_1048;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb31_dummy:
    call {:si_unique_call 1} out_$p45, out_$p46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p53, out_$p54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i52, out_$i60, out_$i61, out_$i62, out_$i44 := srp_terminate_io_loop_$bb21(in_$p3, in_$p41, out_$p45, out_$p46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p53, out_$p54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i52, out_$i60, out_$i61, out_$i62, out_$i44);
    return;

  exit:
    return;
}



procedure srp_terminate_io_loop_$bb21(in_$p3: ref, in_$p41: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i1, in_$i52: i32, in_$i60: i32, in_$i61: i32, in_$i62: i1, in_$i44: i32) returns (out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i1, out_$i52: i32, out_$i60: i32, out_$i61: i32, out_$i62: i1, out_$i44: i32);
  modifies $M.14, $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.15, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr, $M.12, $M.10, $M.11, $M.17, $M.16;



implementation srp_terminate_io_loop_$bb4(in_$p5: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i15: i32, in_$i16: i1, in_$i17: i32, in_$i18: i64, in_$i19: i64, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i64, in_$i27: i64, in_$i28: i1, in_$i29: i1, in_$i30: i32, in_$i31: i64, in_$i32: i64, in_$i33: i1, in_$i34: i1, in_$i35: i32, in_$i36: i64, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$p9: ref, in_vslice_dummy_var_79: i64) returns (out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i15: i32, out_$i16: i1, out_$i17: i32, out_$i18: i64, out_$i19: i64, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i64, out_$i27: i64, out_$i28: i1, out_$i29: i1, out_$i30: i32, out_$i31: i64, out_$i32: i64, out_$i33: i1, out_$i34: i1, out_$i35: i32, out_$i36: i64, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$p9: ref, out_vslice_dummy_var_79: i64)
{

  entry:
    out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p38, out_$i39, out_$i40, out_$p9, out_vslice_dummy_var_79 := in_$p10, in_$p11, in_$p12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$p38, in_$i39, in_$i40, in_$p9, in_vslice_dummy_var_79;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_995;

  $bb15:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    out_$p9 := out_$p38;
    goto $bb15_dummy;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i64(out_$i39, 0);
    goto corral_source_split_1036;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    out_$i39 := $p2i.ref.i64(out_$p38);
    goto corral_source_split_1035;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} out_$p38 := __scsi_iterate_devices(in_$p5, out_$p9);
    goto corral_source_split_1034;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} out_vslice_dummy_var_79 := ldv__builtin_expect(out_$i36, 0);
    goto corral_source_split_1033;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    out_$i36 := $sext.i32.i64(out_$i35);
    goto corral_source_split_1032;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i1.i32(out_$i34);
    goto corral_source_split_1031;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i32(out_$i15, 0);
    goto corral_source_split_1030;

  $bb7:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb12:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb11:
    assume out_$i33 == 1;
    goto corral_source_split_1028;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i64(out_$i32, 0);
    goto corral_source_split_1026;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} out_$i32 := ldv__builtin_expect(out_$i31, 0);
    call {:si_unique_call 225} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i32);
    goto corral_source_split_1025;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i32.i64(out_$i30);
    goto corral_source_split_1024;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    out_$i30 := $zext.i1.i32(out_$i29);
    goto corral_source_split_1023;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i32(out_$i23, 0);
    goto corral_source_split_1022;

  $bb9:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} warn_slowpath_null(.str.20, 1174);
    goto corral_source_split_1020;

  $bb8:
    assume out_$i28 == 1;
    goto corral_source_split_1019;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, 0);
    goto corral_source_split_1017;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} out_$i27 := ldv__builtin_expect(out_$i26, 0);
    call {:si_unique_call 222} {:cexpr "tmp"} boogie_si_record_i64(out_$i27);
    goto corral_source_split_1016;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i25);
    goto corral_source_split_1015;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i1.i32(out_$i24);
    goto corral_source_split_1014;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i32(out_$i23, 0);
    goto corral_source_split_1013;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i1.i32(out_$i22);
    call {:si_unique_call 220} {:cexpr "__ret_warn_on"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_1012;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    out_$i22 := $xor.i1(out_$i21, 1);
    goto corral_source_split_1011;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    out_$i21 := $trunc.i8.i1(1);
    goto corral_source_split_1010;

  $bb6:
    assume out_$i20 == 1;
    goto corral_source_split_1009;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i64(out_$i19, 0);
    goto corral_source_split_1007;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} out_$i19 := ldv__builtin_expect(out_$i18, 0);
    call {:si_unique_call 219} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i19);
    goto corral_source_split_1006;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(out_$i17);
    goto corral_source_split_1005;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i1.i32(out_$i16);
    goto corral_source_split_1004;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i32(out_$i15, 0);
    goto corral_source_split_1003;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i1.i32(out_$i14);
    call {:si_unique_call 217} {:cexpr "__ret_warn_once"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_1002;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i32(out_$i13, 0);
    goto corral_source_split_1001;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i32($M.1, out_$p12);
    goto corral_source_split_1000;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p11, $mul.ref(0, 3704)), $mul.ref(2772, 1));
    goto corral_source_split_999;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.1, out_$p10);
    goto corral_source_split_998;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p9, $mul.ref(0, 3480)), $mul.ref(8, 1));
    goto corral_source_split_997;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p38, out_$i39, out_$i40, out_$p9, out_vslice_dummy_var_79 := srp_terminate_io_loop_$bb4(in_$p5, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p38, out_$i39, out_$i40, out_$p9, out_vslice_dummy_var_79);
    return;

  exit:
    return;
}



procedure srp_terminate_io_loop_$bb4(in_$p5: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i15: i32, in_$i16: i1, in_$i17: i32, in_$i18: i64, in_$i19: i64, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i64, in_$i27: i64, in_$i28: i1, in_$i29: i1, in_$i30: i32, in_$i31: i64, in_$i32: i64, in_$i33: i1, in_$i34: i1, in_$i35: i32, in_$i36: i64, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$p9: ref, in_vslice_dummy_var_79: i64) returns (out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i15: i32, out_$i16: i1, out_$i17: i32, out_$i18: i64, out_$i19: i64, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i64, out_$i27: i64, out_$i28: i1, out_$i29: i1, out_$i30: i32, out_$i31: i64, out_$i32: i64, out_$i33: i1, out_$i34: i1, out_$i35: i32, out_$i36: i64, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$p9: ref, out_vslice_dummy_var_79: i64);



implementation srp_unmap_data_loop_$bb28(in_$p73: ref, in_$i75: i32, in_$p76: ref, in_$i77: i1, in_$p71: ref, in_$i72: i32, in_vslice_dummy_var_82: i32) returns (out_$p73: ref, out_$i75: i32, out_$p76: ref, out_$i77: i1, out_$p71: ref, out_$i72: i32, out_vslice_dummy_var_82: i32)
{

  entry:
    out_$p73, out_$i75, out_$p76, out_$i77, out_$p71, out_$i72, out_vslice_dummy_var_82 := in_$p73, in_$i75, in_$p76, in_$i77, in_$p71, in_$i72, in_vslice_dummy_var_82;
    goto $bb28, exit;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1251;

  $bb30:
    assume out_$i77 == 1;
    assume {:verifier.code 0} true;
    out_$p71, out_$i72 := out_$p76, out_$i75;
    goto $bb30_dummy;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    out_$i77 := $sgt.i32(out_$i75, 0);
    goto corral_source_split_1257;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref(out_$p71, $mul.ref(1, 8));
    goto corral_source_split_1256;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    out_$i75 := $sub.i32(out_$i72, 1);
    call {:si_unique_call 258} {:cexpr "i"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_1255;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} out_vslice_dummy_var_82 := ib_fmr_pool_unmap(out_$p73);
    goto corral_source_split_1254;

  $bb29:
    assume {:verifier.code 0} true;
    out_$p73 := $load.ref($M.1, out_$p71);
    goto corral_source_split_1253;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb30_dummy:
    call {:si_unique_call 1} out_$p73, out_$i75, out_$p76, out_$i77, out_$p71, out_$i72, out_vslice_dummy_var_82 := srp_unmap_data_loop_$bb28(out_$p73, out_$i75, out_$p76, out_$i77, out_$p71, out_$i72, out_vslice_dummy_var_82);
    return;

  exit:
    return;
}



procedure srp_unmap_data_loop_$bb28(in_$p73: ref, in_$i75: i32, in_$p76: ref, in_$i77: i1, in_$p71: ref, in_$i72: i32, in_vslice_dummy_var_82: i32) returns (out_$p73: ref, out_$i75: i32, out_$p76: ref, out_$i77: i1, out_$p71: ref, out_$i72: i32, out_vslice_dummy_var_82: i32);



implementation srp_unmap_data_loop_$bb13(in_$p1: ref, in_$p4: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$p45: ref, in_$p46: ref, in_$i48: i32, in_$p49: ref, in_$i50: i1, in_$p28: ref, in_$i29: i32, in_vslice_dummy_var_81: i1) returns (out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$p45: ref, out_$p46: ref, out_$i48: i32, out_$p49: ref, out_$i50: i1, out_$p28: ref, out_$i29: i32, out_vslice_dummy_var_81: i1)
{

  entry:
    out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$p45, out_$p46, out_$i48, out_$p49, out_$i50, out_$p28, out_$i29, out_vslice_dummy_var_81 := in_$p30, in_$p31, in_$p32, in_$p33, in_$i34, in_$i35, in_$i36, in_$p37, in_$p38, in_$p39, in_$p40, in_$p41, in_$p42, in_$p43, in_$i44, in_$p45, in_$p46, in_$i48, in_$p49, in_$i50, in_$p28, in_$i29, in_vslice_dummy_var_81;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1196;

  $bb18:
    assume out_$i50 == 1;
    assume {:verifier.code 0} true;
    out_$p28, out_$i29 := out_$p49, out_$i48;
    goto $bb18_dummy;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    out_$i50 := $sgt.i32(out_$i48, 0);
    goto corral_source_split_1222;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref(out_$p28, $mul.ref(1, 8));
    goto corral_source_split_1221;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i48 := $sub.i32(out_$i29, 1);
    call {:si_unique_call 251} {:cexpr "i"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_1220;

  $bb16:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} out_vslice_dummy_var_81 := queue_work(out_$p45, out_$p46);
    goto corral_source_split_1218;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p4, $mul.ref(0, 464)), $mul.ref(280, 1));
    goto corral_source_split_1217;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.1, system_long_wq);
    goto corral_source_split_1216;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} dev_printk.ref.ref.ref.i32.i32(.str.39, out_$p39, .str.53, out_$i44, out_$i35);
    goto corral_source_split_1215;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.1, out_$p43);
    goto corral_source_split_1214;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p42, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_1213;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.1, out_$p41);
    goto corral_source_split_1212;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p40, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1211;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.1, out_$p28);
    goto corral_source_split_1210;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p38, $mul.ref(0, 3816)), $mul.ref(952, 1));
    goto corral_source_split_1209;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.1, out_$p37);
    goto corral_source_split_1208;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p4, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_1207;

  $bb15:
    assume out_$i36 == 1;
    goto corral_source_split_1206;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    out_$i36 := $slt.i32(out_$i35, 0);
    goto corral_source_split_1204;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} out_$i35 := srp_inv_rkey(in_$p1, out_$i34);
    call {:si_unique_call 248} {:cexpr "res"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_1203;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i32($M.1, out_$p33);
    goto corral_source_split_1202;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p32, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_1201;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.1, out_$p31);
    goto corral_source_split_1200;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p30, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1199;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.1, out_$p28);
    goto corral_source_split_1198;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$p45, out_$p46, out_$i48, out_$p49, out_$i50, out_$p28, out_$i29, out_vslice_dummy_var_81 := srp_unmap_data_loop_$bb13(in_$p1, in_$p4, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$p45, out_$p46, out_$i48, out_$p49, out_$i50, out_$p28, out_$i29, out_vslice_dummy_var_81);
    return;

  exit:
    return;
}



procedure srp_unmap_data_loop_$bb13(in_$p1: ref, in_$p4: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$p45: ref, in_$p46: ref, in_$i48: i32, in_$p49: ref, in_$i50: i1, in_$p28: ref, in_$i29: i32, in_vslice_dummy_var_81: i1) returns (out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$p45: ref, out_$p46: ref, out_$i48: i32, out_$p49: ref, out_$i50: i1, out_$p28: ref, out_$i29: i32, out_vslice_dummy_var_81: i1);
  modifies $M.1, $CurrAddr;



implementation srp_fr_pool_put_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i6: i64, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$i5: i32) returns (out_$i6: i64, out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$i5: i32)
{

  entry:
    out_$i6, out_$p7, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i5 := in_$i6, in_$p7, in_$p8, in_$p9, in_$p10, in_$i11, in_$i12, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1371;

  $bb6:
    assume out_$i12 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i11;
    goto $bb6_dummy;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    out_$i12 := $slt.i32(out_$i11, in_$i2);
    goto corral_source_split_1380;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i32(out_$i5, 1);
    call {:si_unique_call 281} {:cexpr "i"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_1379;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} list_add(out_$p9, out_$p10);
    goto corral_source_split_1378;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p0, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_1377;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p8, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1376;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.1, out_$p7);
    goto corral_source_split_1375;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref(in_$p1, $mul.ref(out_$i6, 8));
    goto corral_source_split_1374;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i6 := $sext.i32.i64(out_$i5);
    goto corral_source_split_1373;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i6, out_$p7, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i5 := srp_fr_pool_put_loop_$bb4(in_$p0, in_$p1, in_$i2, out_$i6, out_$p7, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i5);
    return;

  exit:
    return;
}



procedure srp_fr_pool_put_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i6: i64, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$i5: i32) returns (out_$i6: i64, out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$i5: i32);



implementation srp_disconnect_target_loop_$bb6(in_$p0: ref, in_$p4: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$i15: i1, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i7: i32) returns (out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$i15: i1, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i7: i32)
{

  entry:
    out_$p8, out_$p9, out_$i10, out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i7 := in_$p8, in_$p9, in_$i10, in_$p12, in_$p13, in_$i14, in_$i15, in_$p16, in_$p17, in_$i18, in_$i19, in_$p20, in_$p21, in_$p22, in_$i23, in_$i24, in_$i25, in_$i7;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1516;

  $bb14:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i23;
    goto $bb14_dummy;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    out_$i25 := $ult.i32(out_$i23, out_$i24);
    goto corral_source_split_1541;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.1, in_$p4);
    goto corral_source_split_1540;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i32(out_$i7, 1);
    call {:si_unique_call 325} {:cexpr "i"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_1539;

  $bb9:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb11:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} dev_printk.ref.ref.ref(.str.33, out_$p22, .str.34);
    goto corral_source_split_1537;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p21, $mul.ref(0, 3816)), $mul.ref(952, 1));
    goto corral_source_split_1536;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.1, out_$p20);
    goto corral_source_split_1535;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_1534;

  $bb10:
    assume out_$i19 == 1;
    goto corral_source_split_1533;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i32(out_$i18, 0);
    goto corral_source_split_1531;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} out_$i18 := ib_send_cm_dreq(out_$p17, $0.ref, 0);
    call {:si_unique_call 323} {:cexpr "tmp"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_1530;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.1, out_$p16);
    goto corral_source_split_1529;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p9, $mul.ref(out_$i10, 488)), $mul.ref(344, 1));
    goto corral_source_split_1528;

  $bb8:
    assume out_$i15 == 1;
    goto corral_source_split_1527;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i64(out_$i14, 0);
    goto corral_source_split_1525;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    out_$i14 := $p2i.ref.i64(out_$p13);
    goto corral_source_split_1524;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.1, out_$p12);
    goto corral_source_split_1523;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p9, $mul.ref(out_$i10, 488)), $mul.ref(344, 1));
    goto corral_source_split_1522;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    goto corral_source_split_1521;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    out_$i10 := $sext.i32.i64(out_$i7);
    goto corral_source_split_1520;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.1, out_$p8);
    goto corral_source_split_1519;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_1518;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$i10, out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i7 := srp_disconnect_target_loop_$bb6(in_$p0, in_$p4, out_$p8, out_$p9, out_$i10, out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i7);
    return;

  exit:
    return;
}



procedure srp_disconnect_target_loop_$bb6(in_$p0: ref, in_$p4: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$i15: i1, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i7: i32) returns (out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$i15: i1, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i7: i32);



implementation srp_connect_ch_loop_$bb20(in_$p0: ref, in_$p37: ref, in_$i38: i1, in_$i42: i32, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$p53: ref, in_$i54: i32, in_$i55: i1, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$i71: i32, in_$i72: i1) returns (out_$i42: i32, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$p53: ref, out_$i54: i32, out_$i55: i1, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$i71: i32, out_$i72: i1)
{

  entry:
    out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i60, out_$i61, out_$i62, out_$i71, out_$i72 := in_$i42, in_$p43, in_$i44, in_$i45, in_$i46, in_$p47, in_$i48, in_$i49, in_$p50, in_$i51, in_$i52, in_$p53, in_$i54, in_$i55, in_$i60, in_$i61, in_$i62, in_$i71, in_$i72;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb48:
    assume {:verifier.code 0} true;
    assume !(out_$i72 == 1);
    goto $bb48_dummy;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    out_$i42 := out_$i71;
    assume true;
    goto $bb48;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    out_$i72 := $ne.i32(out_$i71, 0);
    goto corral_source_split_1947;

  SeqInstr_207:
    call {:si_unique_call 405} {:cexpr "ret"} boogie_si_record_i32(out_$i71);
    goto corral_source_split_1946;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} out_$i71 := srp_send_req(in_$p0, in_$i38);
    goto SeqInstr_206;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} ldv_init_completion_100(in_$p37);
    goto corral_source_split_1945;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb44:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    out_$i62 := out_$i60;
    assume true;
    goto $bb44;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i32(out_$i60, 0);
    goto corral_source_split_1917;

  SeqInstr_204:
    call {:si_unique_call 401} {:cexpr "ret"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_1916;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} out_$i60 := srp_lookup_path(in_$p0);
    goto SeqInstr_203;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb30:
    assume out_$i52 == 1;
    goto corral_source_split_1914;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i51, 1);
    goto corral_source_split_1912;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.1, out_$p50);
    goto corral_source_split_1911;

  $bb29:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p0, $mul.ref(0, 488)), $mul.ref(232, 1));
    goto corral_source_split_1910;

  $bb27:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i48, 0);
    goto corral_source_split_1904;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.1, out_$p47);
    goto corral_source_split_1903;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p0, $mul.ref(0, 488)), $mul.ref(232, 1));
    goto corral_source_split_1902;

  $bb24:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    out_$i46 := out_$i44;
    assume true;
    goto $bb24;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    out_$i45 := $slt.i32(out_$i44, 0);
    goto corral_source_split_1898;

  SeqInstr_198:
    call {:si_unique_call 398} {:cexpr "ret"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_1897;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} out_$i44 := ldv_wait_for_completion_interruptible_112(out_$p43);
    goto SeqInstr_197;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p0, $mul.ref(0, 488)), $mul.ref(136, 1));
    goto corral_source_split_1896;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb34:
    assume out_$i55 == 1;
    goto corral_source_split_1923;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i54, 2);
    goto corral_source_split_1921;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.1, out_$p53);
    goto corral_source_split_1920;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p0, $mul.ref(0, 488)), $mul.ref(232, 1));
    goto corral_source_split_1919;

  $bb31:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb48_dummy:
    call {:si_unique_call 1} out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i60, out_$i61, out_$i62, out_$i71, out_$i72 := srp_connect_ch_loop_$bb20(in_$p0, in_$p37, in_$i38, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i60, out_$i61, out_$i62, out_$i71, out_$i72);
    return;

  exit:
    return;
}



procedure srp_connect_ch_loop_$bb20(in_$p0: ref, in_$p37: ref, in_$i38: i1, in_$i42: i32, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$p53: ref, in_$i54: i32, in_$i55: i1, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$i71: i32, in_$i72: i1) returns (out_$i42: i32, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$p53: ref, out_$i54: i32, out_$i55: i1, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$i71: i32, out_$i72: i1);
  modifies $M.1, $M.18, $M.19, $CurrAddr, assertsPassed, $M.17;



implementation srp_send_completion_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p6: ref, in_$i7: i32, in_$i8: i1, in_$i9: i32, in_$i10: i64, in_$i11: i64, in_$i12: i1, in_$p13: ref, in_$i14: i64, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p20: ref, in_$i21: i32, in_$i22: i32, in_$i23: i1) returns (out_$p6: ref, out_$i7: i32, out_$i8: i1, out_$i9: i32, out_$i10: i64, out_$i11: i64, out_$i12: i1, out_$p13: ref, out_$i14: i64, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p20: ref, out_$i21: i32, out_$i22: i32, out_$i23: i1)
{

  entry:
    out_$p6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$p13, out_$i14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23 := in_$p6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$p13, in_$i14, in_$p15, in_$p16, in_$p17, in_$p18, in_$i19, in_$p20, in_$i21, in_$i22, in_$i23;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9:
    assume {:verifier.code 0} true;
    assume out_$i23 == 1;
    goto $bb9_dummy;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    out_$i23 := $sgt.i32(out_$i22, 0);
    goto corral_source_split_2308;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} out_$i22 := ib_poll_cq(in_$p0, 1, in_$p2);
    call {:si_unique_call 483} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_2307;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} srp_handle_qp_err(out_$i19, out_$i21, 1, in_$p3);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} list_add(out_$p16, out_$p17);
    goto corral_source_split_2299;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p3, $mul.ref(0, 488)), $mul.ref(0, 1));
    goto corral_source_split_2298;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p15, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2297;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    out_$p15 := $i2p.i64.ref(out_$i14);
    goto corral_source_split_2296;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i64($M.23, out_$p13);
    goto corral_source_split_2295;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_2294;

  $bb6:
    assume out_$i12 == 1;
    goto corral_source_split_2293;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    out_$i12 := $ne.i64(out_$i11, 0);
    goto corral_source_split_2291;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} out_$i11 := ldv__builtin_expect(out_$i10, 1);
    call {:si_unique_call 479} {:cexpr "tmp"} boogie_si_record_i64(out_$i11);
    goto corral_source_split_2290;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    out_$i10 := $sext.i32.i64(out_$i9);
    goto corral_source_split_2289;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    out_$i9 := $zext.i1.i32(out_$i8);
    goto corral_source_split_2288;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i32(out_$i7, 0);
    goto corral_source_split_2287;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    out_$i7 := $load.i32($M.22, out_$p6);
    goto corral_source_split_2286;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_2285;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.22, out_$p20);
    goto corral_source_split_2305;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_2304;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i64($M.23, out_$p18);
    goto corral_source_split_2303;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_2302;

  $bb7:
    assume !(out_$i12 == 1);
    goto corral_source_split_2301;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$p13, out_$i14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23 := srp_send_completion_loop_$bb4(in_$p0, in_$p2, in_$p3, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$p13, out_$i14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23);
    return;

  exit:
    return;
}



procedure srp_send_completion_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p6: ref, in_$i7: i32, in_$i8: i1, in_$i9: i32, in_$i10: i64, in_$i11: i64, in_$i12: i1, in_$p13: ref, in_$i14: i64, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p20: ref, in_$i21: i32, in_$i22: i32, in_$i23: i1) returns (out_$p6: ref, out_$i7: i32, out_$i8: i1, out_$i9: i32, out_$i10: i64, out_$i11: i64, out_$i12: i1, out_$p13: ref, out_$i14: i64, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p20: ref, out_$i21: i32, out_$i22: i32, out_$i23: i1);
  modifies $M.1;



implementation srp_destroy_fr_pool_loop_$bb8(in_$p5: ref, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$p20: ref, in_$p21: ref, in_$i23: i32, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$p8: ref, in_$i9: i32, in_vslice_dummy_var_91: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$p20: ref, out_$p21: ref, out_$i23: i32, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$p8: ref, out_$i9: i32, out_vslice_dummy_var_91: i32)
{

  entry:
    out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i23, out_$p24, out_$i25, out_$i26, out_$p8, out_$i9, out_vslice_dummy_var_91 := in_$p10, in_$p11, in_$i12, in_$i13, in_$p14, in_$p15, in_$p16, in_$p17, in_$i18, in_$i19, in_$p20, in_$p21, in_$i23, in_$p24, in_$i25, in_$i26, in_$p8, in_$i9, in_vslice_dummy_var_91;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2404;

  $bb16:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$p8, out_$i9 := out_$p24, out_$i23;
    goto $bb16_dummy;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    out_$i26 := $slt.i32(out_$i23, out_$i25);
    goto corral_source_split_2429;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.1, in_$p5);
    goto corral_source_split_2428;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref(out_$p8, $mul.ref(1, 32));
    goto corral_source_split_2427;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i32(out_$i9, 1);
    call {:si_unique_call 499} {:cexpr "i"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_2426;

  $bb14:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} out_vslice_dummy_var_91 := ib_dereg_mr(out_$p21);
    goto corral_source_split_2424;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.1, out_$p20);
    goto corral_source_split_2423;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p8, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2422;

  $bb13:
    assume out_$i19 == 1;
    goto corral_source_split_2421;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i64(out_$i18, 0);
    goto corral_source_split_2419;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    out_$i18 := $p2i.ref.i64(out_$p17);
    goto corral_source_split_2418;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.1, out_$p16);
    goto corral_source_split_2417;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p8, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2416;

  $bb11:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} ib_free_fast_reg_page_list(out_$p15);
    goto corral_source_split_2414;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.1, out_$p14);
    goto corral_source_split_2413;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p8, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2412;

  $bb10:
    assume out_$i13 == 1;
    goto corral_source_split_2411;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    out_$i13 := $ne.i64(out_$i12, 0);
    goto corral_source_split_2409;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    out_$i12 := $p2i.ref.i64(out_$p11);
    goto corral_source_split_2408;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.1, out_$p10);
    goto corral_source_split_2407;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p8, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2406;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i23, out_$p24, out_$i25, out_$i26, out_$p8, out_$i9, out_vslice_dummy_var_91 := srp_destroy_fr_pool_loop_$bb8(in_$p5, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i23, out_$p24, out_$i25, out_$i26, out_$p8, out_$i9, out_vslice_dummy_var_91);
    return;

  exit:
    return;
}



procedure srp_destroy_fr_pool_loop_$bb8(in_$p5: ref, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$p20: ref, in_$p21: ref, in_$i23: i32, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$p8: ref, in_$i9: i32, in_vslice_dummy_var_91: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$p20: ref, out_$p21: ref, out_$i23: i32, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$p8: ref, out_$i9: i32, out_vslice_dummy_var_91: i32);



implementation srp_create_fr_pool_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$i3: i32, in_$p11: ref, in_$p24: ref, in_$p29: ref, in_$p30: ref, in_$i31: i1, in_$i32: i8, in_$i33: i1, in_$p34: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i1, in_$i43: i8, in_$i44: i1, in_$p45: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i32, in_$p53: ref, in_$i54: i32, in_$i55: i1, in_$i27: i32, in_$p28: ref) returns (out_$p29: ref, out_$p30: ref, out_$i31: i1, out_$i32: i8, out_$i33: i1, out_$p34: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i1, out_$i43: i8, out_$i44: i1, out_$p45: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i32, out_$p53: ref, out_$i54: i32, out_$i55: i1, out_$i27: i32, out_$p28: ref)
{

  entry:
    out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$p45, out_$p49, out_$p50, out_$p51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i27, out_$p28 := in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_$p34, in_$p39, in_$p40, in_$p41, in_$i42, in_$i43, in_$i44, in_$p45, in_$p49, in_$p50, in_$p51, in_$i52, in_$p53, in_$i54, in_$i55, in_$i27, in_$p28;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2963;

  $bb20:
    assume out_$i55 == 1;
    assume {:verifier.code 0} true;
    out_$i27, out_$p28 := out_$i52, out_$p53;
    goto $bb20_dummy;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    out_$i55 := $slt.i32(out_$i52, out_$i54);
    goto corral_source_split_3000;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.1, in_$p24);
    goto corral_source_split_2999;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref(out_$p28, $mul.ref(1, 32));
    goto corral_source_split_2998;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i32(out_$i27, 1);
    call {:si_unique_call 588} {:cexpr "i"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_2997;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} list_add_tail(out_$p50, out_$p51);
    goto corral_source_split_2996;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p11, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2995;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p28, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2994;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p49, out_$p40);
    goto corral_source_split_2993;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p28, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2992;

  $bb18:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    out_$p45 := out_$p40;
    assume true;
    goto $bb18;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    out_$i44 := $trunc.i8.i1(out_$i43);
    goto corral_source_split_2985;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i1.i8(out_$i42);
    call {:si_unique_call 583} {:cexpr "tmp___3"} boogie_si_record_i8(out_$i43);
    goto corral_source_split_2984;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} out_$i42 := IS_ERR(out_$p41);
    goto corral_source_split_2983;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    out_$p41 := $bitcast.ref.ref(out_$p40);
    goto corral_source_split_2982;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} out_$p40 := ib_alloc_fast_reg_page_list(in_$p0, in_$i3);
    goto corral_source_split_2981;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p39, out_$p29);
    goto corral_source_split_2980;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p28, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2979;

  $bb14:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    out_$p34 := out_$p29;
    assume true;
    goto $bb14;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    out_$i33 := $trunc.i8.i1(out_$i32);
    goto corral_source_split_2969;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i1.i8(out_$i31);
    call {:si_unique_call 576} {:cexpr "tmp___1"} boogie_si_record_i8(out_$i32);
    goto corral_source_split_2968;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} out_$i31 := IS_ERR(out_$p30);
    goto corral_source_split_2967;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(out_$p29);
    goto corral_source_split_2966;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} out_$p29 := ib_alloc_fast_reg_mr(in_$p1, in_$i3);
    goto corral_source_split_2965;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb20_dummy:
    call {:si_unique_call 1} out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$p45, out_$p49, out_$p50, out_$p51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i27, out_$p28 := srp_create_fr_pool_loop_$bb11(in_$p0, in_$p1, in_$i3, in_$p11, in_$p24, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$p45, out_$p49, out_$p50, out_$p51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i27, out_$p28);
    return;

  exit:
    return;
}



procedure srp_create_fr_pool_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$i3: i32, in_$p11: ref, in_$p24: ref, in_$p29: ref, in_$p30: ref, in_$i31: i1, in_$i32: i8, in_$i33: i1, in_$p34: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i1, in_$i43: i8, in_$i44: i1, in_$p45: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i32, in_$p53: ref, in_$i54: i32, in_$i55: i1, in_$i27: i32, in_$p28: ref) returns (out_$p29: ref, out_$p30: ref, out_$i31: i1, out_$i32: i8, out_$i33: i1, out_$p34: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i1, out_$i43: i8, out_$i44: i1, out_$p45: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i32, out_$p53: ref, out_$i54: i32, out_$i55: i1, out_$i27: i32, out_$p28: ref);
  modifies $M.1;



implementation srp_create_target_loop_$bb105(in_$p26: ref, in_$p351: ref, in_$p355: ref, in_$p356: ref, in_$i357: i64, in_$p358: ref, in_$i359: i32, in_$i360: i32, in_$i361: i1, in_$i354: i32) returns (out_$p355: ref, out_$p356: ref, out_$i357: i64, out_$p358: ref, out_$i359: i32, out_$i360: i32, out_$i361: i1, out_$i354: i32)
{

  entry:
    out_$p355, out_$p356, out_$i357, out_$p358, out_$i359, out_$i360, out_$i361, out_$i354 := in_$p355, in_$p356, in_$i357, in_$p358, in_$i359, in_$i360, in_$i361, in_$i354;
    goto $bb105, exit;

  $bb105:
    assume {:verifier.code 0} true;
    goto corral_source_split_3954;

  $bb107:
    assume out_$i361 == 1;
    assume {:verifier.code 0} true;
    out_$i354 := out_$i359;
    goto $bb107_dummy;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    out_$i361 := $ult.i32(out_$i359, out_$i360);
    goto corral_source_split_3964;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    out_$i360 := $load.i32($M.1, in_$p351);
    goto corral_source_split_3963;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    out_$i359 := $add.i32(out_$i354, 1);
    call {:si_unique_call 853} {:cexpr "i"} boogie_si_record_i32(out_$i359);
    goto corral_source_split_3962;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} srp_free_req_data(in_$p26, out_$p358);
    goto corral_source_split_3961;

  SeqInstr_300:
    goto corral_source_split_3960;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} srp_free_ch_ib(in_$p26, out_$p358);
    goto SeqInstr_299;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    out_$p358 := $add.ref(out_$p356, $mul.ref(out_$i357, 488));
    goto corral_source_split_3959;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    out_$i357 := $sext.i32.i64(out_$i354);
    goto corral_source_split_3958;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    out_$p356 := $load.ref($M.1, out_$p355);
    goto corral_source_split_3957;

  $bb106:
    assume {:verifier.code 0} true;
    out_$p355 := $add.ref($add.ref(in_$p26, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_3956;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb107_dummy:
    call {:si_unique_call 1} out_$p355, out_$p356, out_$i357, out_$p358, out_$i359, out_$i360, out_$i361, out_$i354 := srp_create_target_loop_$bb105(in_$p26, in_$p351, out_$p355, out_$p356, out_$i357, out_$p358, out_$i359, out_$i360, out_$i361, out_$i354);
    return;

  exit:
    return;
}



procedure srp_create_target_loop_$bb105(in_$p26: ref, in_$p351: ref, in_$p355: ref, in_$p356: ref, in_$i357: i64, in_$p358: ref, in_$i359: i32, in_$i360: i32, in_$i361: i1, in_$i354: i32) returns (out_$p355: ref, out_$p356: ref, out_$i357: i64, out_$p358: ref, out_$i359: i32, out_$i360: i32, out_$i361: i1, out_$i354: i32);
  modifies $M.1, $M.26, $M.27, $M.28, $M.29, $M.17, $CurrAddr, assertsPassed;



implementation srp_create_target_loop_$bb89(in_$i199: i32, in_$i205: i32, in_$i237: i32, in_$i239: i1, in_$p240: ref, in_$i241: i32, in_$i242: i32, in_$i243: i1, in_$i245: i32, in_$i246: i1, in_$i247: i32, in_$i235: i32, in_$i236: i8, in_$i238: i32, in_$i244: i8, in_$i193: i32) returns (out_$i237: i32, out_$i239: i1, out_$p240: ref, out_$i241: i32, out_$i242: i32, out_$i243: i1, out_$i245: i32, out_$i246: i1, out_$i247: i32, out_$i238: i32, out_$i244: i8)
{

  entry:
    out_$i237, out_$i239, out_$p240, out_$i241, out_$i242, out_$i243, out_$i245, out_$i246, out_$i247, out_$i238, out_$i244 := in_$i237, in_$i239, in_$p240, in_$i241, in_$i242, in_$i243, in_$i245, in_$i246, in_$i247, in_$i238, in_$i244;
    goto $bb89, exit;

  $bb89:
    assume {:verifier.code 0} true;
    goto corral_source_split_3896;

  $bb62:
    assume out_$i243 == 1;
    assume {:verifier.code 0} true;
    out_$i238 := out_$i241;
    goto $bb62_dummy;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    out_$i244 := in_$i236;
    assume true;
    goto $bb62;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    out_$i243 := $slt.i32(out_$i241, out_$i242);
    goto corral_source_split_3797;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    out_$i242 := $load.i32($M.1, nr_cpu_ids);
    goto corral_source_split_3796;

  SeqInstr_270:
    call {:si_unique_call 815} {:cexpr "tmp___14"} boogie_si_record_i32(out_$i241);
    goto corral_source_split_3795;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} out_$i241 := cpumask_next(out_$i238, out_$p240);
    goto SeqInstr_269;

  $bb61:
    assume {:verifier.code 0} true;
    out_$p240 := $load.ref($M.1, cpu_online_mask);
    goto corral_source_split_3794;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb59:
    assume out_$i239 == 1;
    goto corral_source_split_3792;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    out_$i239 := $ne.i32(out_$i237, in_$i193);
    goto corral_source_split_3790;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} out_$i237 := __cpu_to_node(out_$i238);
    call {:si_unique_call 813} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i237);
    goto corral_source_split_3789;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb65:
    assume out_$i246 == 1;
    goto corral_source_split_3804;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    out_$i247 := out_$i238;
    assume true;
    goto $bb65;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    out_$i246 := $sge.i32(out_$i245, in_$i205);
    goto corral_source_split_3802;

  $bb64:
    assume {:verifier.code 0} true;
    out_$i245 := $add.i32(in_$i199, in_$i235);
    goto corral_source_split_3801;

  $bb60:
    assume !(out_$i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb62_dummy:
    call {:si_unique_call 1} out_$i237, out_$i239, out_$p240, out_$i241, out_$i242, out_$i243, out_$i245, out_$i246, out_$i247, out_$i238, out_$i244 := srp_create_target_loop_$bb89(in_$i199, in_$i205, out_$i237, out_$i239, out_$p240, out_$i241, out_$i242, out_$i243, out_$i245, out_$i246, out_$i247, in_$i235, in_$i236, out_$i238, out_$i244, in_$i193);
    return;

  exit:
    return;
}



procedure srp_create_target_loop_$bb89(in_$i199: i32, in_$i205: i32, in_$i237: i32, in_$i239: i1, in_$p240: ref, in_$i241: i32, in_$i242: i32, in_$i243: i1, in_$i245: i32, in_$i246: i1, in_$i247: i32, in_$i235: i32, in_$i236: i8, in_$i238: i32, in_$i244: i8, in_$i193: i32) returns (out_$i237: i32, out_$i239: i1, out_$p240: ref, out_$i241: i32, out_$i242: i32, out_$i243: i1, out_$i245: i32, out_$i246: i1, out_$i247: i32, out_$i238: i32, out_$i244: i8);
  modifies assertsPassed;



implementation srp_create_target_loop_$bb57(in_$p9: ref, in_$p26: ref, in_$i199: i32, in_$i205: i32, in_$i216: i32, in_$i228: i32, in_$i237: i32, in_$i239: i1, in_$p240: ref, in_$i241: i32, in_$i242: i32, in_$i243: i1, in_$i245: i32, in_$i246: i1, in_$i247: i32, in_$p248: ref, in_$p249: ref, in_$i250: i32, in_$i251: i64, in_$p252: ref, in_$p253: ref, in_$i254: i1, in_$i256: i32, in_$i257: i32, in_$i258: i32, in_$i255: i32, in_$p259: ref, in_$p260: ref, in_$p263: ref, in_$p264: ref, in_$p265: ref, in_$i266: i32, in_$i267: i1, in_$i268: i32, in_$i270: i32, in_$i271: i1, in_$i272: i32, in_$i273: i32, in_$i274: i1, in_$i275: i32, in_$i276: i1, in_$i277: i32, in_$i278: i1, in_$i279: i8, in_$i280: i32, in_$p281: ref, in_$i282: i32, in_$i301: i32, in_$p302: ref, in_$i303: i32, in_$i304: i32, in_$i305: i1, in_$i234: i32, in_$i235: i32, in_$i236: i8, in_$i238: i32, in_$i306: i8, in_$i244: i8, in_$i193: i32, in_vslice_dummy_var_101: ref) returns (out_$i237: i32, out_$i239: i1, out_$p240: ref, out_$i241: i32, out_$i242: i32, out_$i243: i1, out_$i245: i32, out_$i246: i1, out_$i247: i32, out_$p248: ref, out_$p249: ref, out_$i250: i32, out_$i251: i64, out_$p252: ref, out_$p253: ref, out_$i254: i1, out_$i256: i32, out_$i257: i32, out_$i258: i32, out_$i255: i32, out_$p259: ref, out_$p260: ref, out_$p263: ref, out_$p264: ref, out_$p265: ref, out_$i266: i32, out_$i267: i1, out_$i268: i32, out_$i270: i32, out_$i271: i1, out_$i272: i32, out_$i273: i32, out_$i274: i1, out_$i275: i32, out_$i276: i1, out_$i277: i32, out_$i278: i1, out_$i279: i8, out_$i280: i32, out_$p281: ref, out_$i282: i32, out_$i301: i32, out_$p302: ref, out_$i303: i32, out_$i304: i32, out_$i305: i1, out_$i234: i32, out_$i235: i32, out_$i236: i8, out_$i238: i32, out_$i306: i8, out_$i244: i8, out_vslice_dummy_var_101: ref)
{

  entry:
    out_$i237, out_$i239, out_$p240, out_$i241, out_$i242, out_$i243, out_$i245, out_$i246, out_$i247, out_$p248, out_$p249, out_$i250, out_$i251, out_$p252, out_$p253, out_$i254, out_$i256, out_$i257, out_$i258, out_$i255, out_$p259, out_$p260, out_$p263, out_$p264, out_$p265, out_$i266, out_$i267, out_$i268, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$p281, out_$i282, out_$i301, out_$p302, out_$i303, out_$i304, out_$i305, out_$i234, out_$i235, out_$i236, out_$i238, out_$i306, out_$i244, out_vslice_dummy_var_101 := in_$i237, in_$i239, in_$p240, in_$i241, in_$i242, in_$i243, in_$i245, in_$i246, in_$i247, in_$p248, in_$p249, in_$i250, in_$i251, in_$p252, in_$p253, in_$i254, in_$i256, in_$i257, in_$i258, in_$i255, in_$p259, in_$p260, in_$p263, in_$p264, in_$p265, in_$i266, in_$i267, in_$i268, in_$i270, in_$i271, in_$i272, in_$i273, in_$i274, in_$i275, in_$i276, in_$i277, in_$i278, in_$i279, in_$i280, in_$p281, in_$i282, in_$i301, in_$p302, in_$i303, in_$i304, in_$i305, in_$i234, in_$i235, in_$i236, in_$i238, in_$i306, in_$i244, in_vslice_dummy_var_101;
    goto $bb57, exit;

  $bb57:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3787;

  $bb87:
    assume out_$i305 == 1;
    assume {:verifier.code 0} true;
    out_$i234, out_$i235, out_$i236 := out_$i303, out_$i301, 1;
    goto $bb87_dummy;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    out_$i306 := 1;
    assume true;
    goto $bb87;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    out_$i305 := $slt.i32(out_$i303, out_$i304);
    goto corral_source_split_3892;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    out_$i304 := $load.i32($M.1, nr_cpu_ids);
    goto corral_source_split_3891;

  SeqInstr_291:
    call {:si_unique_call 836} {:cexpr "tmp___14"} boogie_si_record_i32(out_$i303);
    goto corral_source_split_3890;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} out_$i303 := cpumask_next(out_$i247, out_$p302);
    goto SeqInstr_290;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    out_$p302 := $load.ref($M.1, cpu_online_mask);
    goto corral_source_split_3889;

  $bb86:
    assume {:verifier.code 0} true;
    out_$i301 := $add.i32(out_$i235, 1);
    call {:si_unique_call 834} {:cexpr "cpu_idx"} boogie_si_record_i32(out_$i301);
    goto corral_source_split_3888;

  $bb82:
    assume !(out_$i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    out_$i279, out_$i280, out_$p281, out_$i282 := out_$i236, out_$i235, out_$p252, out_$i277;
    assume true;
    goto $bb82;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    out_$i278 := $ne.i32(out_$i277, 0);
    goto corral_source_split_3855;

  SeqInstr_282:
    call {:si_unique_call 827} {:cexpr "ret"} boogie_si_record_i32(out_$i277);
    goto corral_source_split_3854;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} out_$i277 := srp_connect_ch(out_$p252, out_$i276);
    goto SeqInstr_281;

  $bb80:
    assume {:verifier.code 0} true;
    out_$i276 := $trunc.i8.i1(out_$i236);
    goto corral_source_split_3853;

  $bb79:
    assume !(out_$i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    out_$i275 := out_$i273;
    assume true;
    goto $bb79;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    out_$i274 := $ne.i32(out_$i273, 0);
    goto corral_source_split_3849;

  SeqInstr_279:
    call {:si_unique_call 825} {:cexpr "ret"} boogie_si_record_i32(out_$i273);
    goto corral_source_split_3848;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} out_$i273 := srp_alloc_req_data(out_$p252);
    goto SeqInstr_278;

  $bb76:
    assume !(out_$i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    out_$i272 := out_$i270;
    assume true;
    goto $bb76;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    out_$i271 := $ne.i32(out_$i270, 0);
    goto corral_source_split_3844;

  SeqInstr_276:
    call {:si_unique_call 823} {:cexpr "ret"} boogie_si_record_i32(out_$i270);
    goto corral_source_split_3843;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} out_$i270 := srp_create_ch_ib(out_$p252);
    goto SeqInstr_275;

  $bb72:
    assume !(out_$i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    out_$i268 := out_$i266;
    assume true;
    goto $bb72;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    out_$i267 := $ne.i32(out_$i266, 0);
    goto corral_source_split_3833;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} out_$i266 := srp_new_cm_id(out_$p252);
    call {:si_unique_call 820} {:cexpr "ret"} boogie_si_record_i32(out_$i266);
    goto corral_source_split_3832;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} INIT_LIST_HEAD(out_$p265);
    goto corral_source_split_3831;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    out_$p265 := $add.ref($add.ref(out_$p249, $mul.ref(out_$i251, 488)), $mul.ref(0, 1));
    goto corral_source_split_3830;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} __raw_spin_lock_init(out_$p264, .str.85, in_$p9);
    goto corral_source_split_3829;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    out_$p264 := $bitcast.ref.ref(out_$p263);
    goto corral_source_split_3828;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    out_$p263 := $add.ref($add.ref($add.ref(out_$p249, $mul.ref(out_$i251, 488)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3827;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} out_vslice_dummy_var_101 := spinlock_check(out_$p260);
    goto corral_source_split_3826;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    out_$p260 := $add.ref($add.ref(out_$p249, $mul.ref(out_$i251, 488)), $mul.ref(16, 1));
    goto corral_source_split_3825;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p259, out_$i255);
    goto corral_source_split_3824;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    out_$p259 := $add.ref($add.ref(out_$p249, $mul.ref(out_$i251, 488)), $mul.ref(380, 1));
    goto corral_source_split_3823;

  $bb70:
    assume {:verifier.code 0} true;
    goto corral_source_split_3822;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    out_$i255 := out_$i258;
    goto $bb70;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    out_$i255 := in_$i216;
    goto $bb70;

  $bb68:
    assume out_$i254 == 1;
    goto corral_source_split_3815;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    out_$i254 := $eq.i32(in_$i216, in_$i228);
    goto corral_source_split_3813;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p253, in_$p26);
    goto corral_source_split_3812;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    out_$p253 := $add.ref($add.ref(out_$p249, $mul.ref(out_$i251, 488)), $mul.ref(96, 1));
    goto corral_source_split_3811;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    out_$p252 := $add.ref(out_$p249, $mul.ref(out_$i251, 488));
    goto corral_source_split_3810;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    out_$i251 := $sext.i32.i64(out_$i250);
    goto corral_source_split_3809;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    out_$i250 := $add.i32(in_$i199, out_$i235);
    goto corral_source_split_3808;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    out_$p249 := $load.ref($M.1, out_$p248);
    goto corral_source_split_3807;

  $bb67:
    assume {:verifier.code 0} true;
    out_$p248 := $add.ref($add.ref(in_$p26, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_3806;

  $bb66:
    assume !(out_$i246 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    out_$i247 := out_$i238;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    out_$i246 := $sge.i32(out_$i245, in_$i205);
    goto corral_source_split_3802;

  $bb64:
    assume {:verifier.code 0} true;
    out_$i245 := $add.i32(in_$i199, out_$i235);
    goto corral_source_split_3801;

  $bb60:
    assume !(out_$i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    out_$i239 := $ne.i32(out_$i237, in_$i193);
    goto corral_source_split_3790;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} out_$i237 := __cpu_to_node(out_$i238);
    call {:si_unique_call 813} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i237);
    goto corral_source_split_3789;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb89:
    call out_$i237, out_$i239, out_$p240, out_$i241, out_$i242, out_$i243, out_$i245, out_$i246, out_$i247, out_$i238, out_$i244 := srp_create_target_loop_$bb89(in_$i199, in_$i205, out_$i237, out_$i239, out_$p240, out_$i241, out_$i242, out_$i243, out_$i245, out_$i246, out_$i247, out_$i235, out_$i236, out_$i238, out_$i244, in_$i193);
    goto $bb89_last;

  $bb89_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3896;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    out_$i238 := out_$i234;
    goto $bb89;

  $bb62:
    assume out_$i243 == 1;
    assume {:verifier.code 0} true;
    out_$i238 := out_$i241;
    assume false;
    return;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    out_$i244 := out_$i236;
    assume true;
    goto $bb62;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    out_$i243 := $slt.i32(out_$i241, out_$i242);
    goto corral_source_split_3797;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    out_$i242 := $load.i32($M.1, nr_cpu_ids);
    goto corral_source_split_3796;

  SeqInstr_270:
    call {:si_unique_call 815} {:cexpr "tmp___14"} boogie_si_record_i32(out_$i241);
    goto corral_source_split_3795;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} out_$i241 := cpumask_next(out_$i238, out_$p240);
    goto SeqInstr_269;

  $bb61:
    assume {:verifier.code 0} true;
    out_$p240 := $load.ref($M.1, cpu_online_mask);
    goto corral_source_split_3794;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb59:
    assume out_$i239 == 1;
    goto corral_source_split_3792;

  $bb65:
    assume out_$i246 == 1;
    goto corral_source_split_3804;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    out_$i258 := $add.i32(in_$i216, out_$i257);
    goto corral_source_split_3820;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    out_$i257 := $srem.i32(out_$i235, out_$i256);
    goto corral_source_split_3819;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    out_$i256 := $sub.i32(in_$i228, in_$i216);
    goto corral_source_split_3818;

  $bb69:
    assume !(out_$i254 == 1);
    goto corral_source_split_3817;

  $bb87_dummy:
    call {:si_unique_call 1} out_$i237, out_$i239, out_$p240, out_$i241, out_$i242, out_$i243, out_$i245, out_$i246, out_$i247, out_$p248, out_$p249, out_$i250, out_$i251, out_$p252, out_$p253, out_$i254, out_$i256, out_$i257, out_$i258, out_$i255, out_$p259, out_$p260, out_$p263, out_$p264, out_$p265, out_$i266, out_$i267, out_$i268, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$p281, out_$i282, out_$i301, out_$p302, out_$i303, out_$i304, out_$i305, out_$i234, out_$i235, out_$i236, out_$i238, out_$i306, out_$i244, out_vslice_dummy_var_101 := srp_create_target_loop_$bb57(in_$p9, in_$p26, in_$i199, in_$i205, in_$i216, in_$i228, out_$i237, out_$i239, out_$p240, out_$i241, out_$i242, out_$i243, out_$i245, out_$i246, out_$i247, out_$p248, out_$p249, out_$i250, out_$i251, out_$p252, out_$p253, out_$i254, out_$i256, out_$i257, out_$i258, out_$i255, out_$p259, out_$p260, out_$p263, out_$p264, out_$p265, out_$i266, out_$i267, out_$i268, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$p281, out_$i282, out_$i301, out_$p302, out_$i303, out_$i304, out_$i305, out_$i234, out_$i235, out_$i236, out_$i238, out_$i306, out_$i244, in_$i193, out_vslice_dummy_var_101);
    return;

  exit:
    return;
}



procedure srp_create_target_loop_$bb57(in_$p9: ref, in_$p26: ref, in_$i199: i32, in_$i205: i32, in_$i216: i32, in_$i228: i32, in_$i237: i32, in_$i239: i1, in_$p240: ref, in_$i241: i32, in_$i242: i32, in_$i243: i1, in_$i245: i32, in_$i246: i1, in_$i247: i32, in_$p248: ref, in_$p249: ref, in_$i250: i32, in_$i251: i64, in_$p252: ref, in_$p253: ref, in_$i254: i1, in_$i256: i32, in_$i257: i32, in_$i258: i32, in_$i255: i32, in_$p259: ref, in_$p260: ref, in_$p263: ref, in_$p264: ref, in_$p265: ref, in_$i266: i32, in_$i267: i1, in_$i268: i32, in_$i270: i32, in_$i271: i1, in_$i272: i32, in_$i273: i32, in_$i274: i1, in_$i275: i32, in_$i276: i1, in_$i277: i32, in_$i278: i1, in_$i279: i8, in_$i280: i32, in_$p281: ref, in_$i282: i32, in_$i301: i32, in_$p302: ref, in_$i303: i32, in_$i304: i32, in_$i305: i1, in_$i234: i32, in_$i235: i32, in_$i236: i8, in_$i238: i32, in_$i306: i8, in_$i244: i8, in_$i193: i32, in_vslice_dummy_var_101: ref) returns (out_$i237: i32, out_$i239: i1, out_$p240: ref, out_$i241: i32, out_$i242: i32, out_$i243: i1, out_$i245: i32, out_$i246: i1, out_$i247: i32, out_$p248: ref, out_$p249: ref, out_$i250: i32, out_$i251: i64, out_$p252: ref, out_$p253: ref, out_$i254: i1, out_$i256: i32, out_$i257: i32, out_$i258: i32, out_$i255: i32, out_$p259: ref, out_$p260: ref, out_$p263: ref, out_$p264: ref, out_$p265: ref, out_$i266: i32, out_$i267: i1, out_$i268: i32, out_$i270: i32, out_$i271: i1, out_$i272: i32, out_$i273: i32, out_$i274: i1, out_$i275: i32, out_$i276: i1, out_$i277: i32, out_$i278: i1, out_$i279: i8, out_$i280: i32, out_$p281: ref, out_$i282: i32, out_$i301: i32, out_$p302: ref, out_$i303: i32, out_$i304: i32, out_$i305: i1, out_$i234: i32, out_$i235: i32, out_$i236: i8, out_$i238: i32, out_$i306: i8, out_$i244: i8, out_vslice_dummy_var_101: ref);
  modifies assertsPassed, $M.1, $M.17, $M.18, $M.19, $M.11, $CurrAddr, $M.25, $M.26, $M.27, $M.28, $M.29;



implementation srp_create_target_loop_$bb52(in_$p9: ref, in_$p15: ref, in_$p26: ref, in_$i195: i32, in_$p196: ref, in_$i197: i32, in_$i198: i32, in_$i199: i32, in_$i200: i32, in_$i201: i32, in_$p202: ref, in_$i203: i32, in_$i204: i32, in_$i205: i32, in_$i206: i32, in_$p207: ref, in_$i208: i32, in_$i209: i32, in_$i210: i32, in_$p211: ref, in_$i212: i32, in_$i213: i32, in_$p214: ref, in_$i215: i32, in_$i216: i32, in_$i217: i32, in_$i218: i32, in_$p219: ref, in_$i220: i32, in_$i221: i32, in_$i222: i32, in_$p223: ref, in_$i224: i32, in_$i225: i32, in_$p226: ref, in_$i227: i32, in_$i228: i32, in_$p229: ref, in_$i230: i32, in_$i231: i32, in_$i232: i1, in_$i237: i32, in_$i239: i1, in_$p240: ref, in_$i241: i32, in_$i242: i32, in_$i243: i1, in_$i245: i32, in_$i246: i1, in_$i247: i32, in_$p248: ref, in_$p249: ref, in_$i250: i32, in_$i251: i64, in_$p252: ref, in_$p253: ref, in_$i254: i1, in_$i256: i32, in_$i257: i32, in_$i258: i32, in_$i255: i32, in_$p259: ref, in_$p260: ref, in_$p263: ref, in_$p264: ref, in_$p265: ref, in_$i266: i32, in_$i267: i1, in_$i268: i32, in_$i270: i32, in_$i271: i1, in_$i272: i32, in_$i273: i32, in_$i274: i1, in_$i275: i32, in_$i276: i1, in_$i277: i32, in_$i278: i1, in_$i279: i8, in_$i280: i32, in_$p281: ref, in_$i282: i32, in_$p283: ref, in_$p284: ref, in_$p285: ref, in_$i286: i32, in_$p287: ref, in_$i288: i32, in_$i289: i32, in_$i290: i1, in_$i291: i32, in_$i292: i64, in_$p293: ref, in_$p294: ref, in_$i295: i64, in_$i296: i64, in_$i297: i64, in_$i298: i32, in_$p299: ref, in_$i301: i32, in_$p302: ref, in_$i303: i32, in_$i304: i32, in_$i305: i1, in_$i234: i32, in_$i235: i32, in_$i236: i8, in_$i238: i32, in_$i306: i8, in_$i233: i8, in_$i244: i8, in_$i307: i8, in_$i300: i8, in_$i308: i32, in_$i309: i32, in_$i310: i1, in_$i192: i8, in_$i193: i32, in_$i194: i32, in_vslice_dummy_var_101: ref) returns (out_$i195: i32, out_$p196: ref, out_$i197: i32, out_$i198: i32, out_$i199: i32, out_$i200: i32, out_$i201: i32, out_$p202: ref, out_$i203: i32, out_$i204: i32, out_$i205: i32, out_$i206: i32, out_$p207: ref, out_$i208: i32, out_$i209: i32, out_$i210: i32, out_$p211: ref, out_$i212: i32, out_$i213: i32, out_$p214: ref, out_$i215: i32, out_$i216: i32, out_$i217: i32, out_$i218: i32, out_$p219: ref, out_$i220: i32, out_$i221: i32, out_$i222: i32, out_$p223: ref, out_$i224: i32, out_$i225: i32, out_$p226: ref, out_$i227: i32, out_$i228: i32, out_$p229: ref, out_$i230: i32, out_$i231: i32, out_$i232: i1, out_$i237: i32, out_$i239: i1, out_$p240: ref, out_$i241: i32, out_$i242: i32, out_$i243: i1, out_$i245: i32, out_$i246: i1, out_$i247: i32, out_$p248: ref, out_$p249: ref, out_$i250: i32, out_$i251: i64, out_$p252: ref, out_$p253: ref, out_$i254: i1, out_$i256: i32, out_$i257: i32, out_$i258: i32, out_$i255: i32, out_$p259: ref, out_$p260: ref, out_$p263: ref, out_$p264: ref, out_$p265: ref, out_$i266: i32, out_$i267: i1, out_$i268: i32, out_$i270: i32, out_$i271: i1, out_$i272: i32, out_$i273: i32, out_$i274: i1, out_$i275: i32, out_$i276: i1, out_$i277: i32, out_$i278: i1, out_$i279: i8, out_$i280: i32, out_$p281: ref, out_$i282: i32, out_$p283: ref, out_$p284: ref, out_$p285: ref, out_$i286: i32, out_$p287: ref, out_$i288: i32, out_$i289: i32, out_$i290: i1, out_$i291: i32, out_$i292: i64, out_$p293: ref, out_$p294: ref, out_$i295: i64, out_$i296: i64, out_$i297: i64, out_$i298: i32, out_$p299: ref, out_$i301: i32, out_$p302: ref, out_$i303: i32, out_$i304: i32, out_$i305: i1, out_$i234: i32, out_$i235: i32, out_$i236: i8, out_$i238: i32, out_$i306: i8, out_$i233: i8, out_$i244: i8, out_$i307: i8, out_$i300: i8, out_$i308: i32, out_$i309: i32, out_$i310: i1, out_$i192: i8, out_$i193: i32, out_$i194: i32, out_vslice_dummy_var_101: ref)
{

  entry:
    out_$i195, out_$p196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$p202, out_$i203, out_$i204, out_$i205, out_$i206, out_$p207, out_$i208, out_$i209, out_$i210, out_$p211, out_$i212, out_$i213, out_$p214, out_$i215, out_$i216, out_$i217, out_$i218, out_$p219, out_$i220, out_$i221, out_$i222, out_$p223, out_$i224, out_$i225, out_$p226, out_$i227, out_$i228, out_$p229, out_$i230, out_$i231, out_$i232, out_$i237, out_$i239, out_$p240, out_$i241, out_$i242, out_$i243, out_$i245, out_$i246, out_$i247, out_$p248, out_$p249, out_$i250, out_$i251, out_$p252, out_$p253, out_$i254, out_$i256, out_$i257, out_$i258, out_$i255, out_$p259, out_$p260, out_$p263, out_$p264, out_$p265, out_$i266, out_$i267, out_$i268, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$p281, out_$i282, out_$p283, out_$p284, out_$p285, out_$i286, out_$p287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$p293, out_$p294, out_$i295, out_$i296, out_$i297, out_$i298, out_$p299, out_$i301, out_$p302, out_$i303, out_$i304, out_$i305, out_$i234, out_$i235, out_$i236, out_$i238, out_$i306, out_$i233, out_$i244, out_$i307, out_$i300, out_$i308, out_$i309, out_$i310, out_$i192, out_$i193, out_$i194, out_vslice_dummy_var_101 := in_$i195, in_$p196, in_$i197, in_$i198, in_$i199, in_$i200, in_$i201, in_$p202, in_$i203, in_$i204, in_$i205, in_$i206, in_$p207, in_$i208, in_$i209, in_$i210, in_$p211, in_$i212, in_$i213, in_$p214, in_$i215, in_$i216, in_$i217, in_$i218, in_$p219, in_$i220, in_$i221, in_$i222, in_$p223, in_$i224, in_$i225, in_$p226, in_$i227, in_$i228, in_$p229, in_$i230, in_$i231, in_$i232, in_$i237, in_$i239, in_$p240, in_$i241, in_$i242, in_$i243, in_$i245, in_$i246, in_$i247, in_$p248, in_$p249, in_$i250, in_$i251, in_$p252, in_$p253, in_$i254, in_$i256, in_$i257, in_$i258, in_$i255, in_$p259, in_$p260, in_$p263, in_$p264, in_$p265, in_$i266, in_$i267, in_$i268, in_$i270, in_$i271, in_$i272, in_$i273, in_$i274, in_$i275, in_$i276, in_$i277, in_$i278, in_$i279, in_$i280, in_$p281, in_$i282, in_$p283, in_$p284, in_$p285, in_$i286, in_$p287, in_$i288, in_$i289, in_$i290, in_$i291, in_$i292, in_$p293, in_$p294, in_$i295, in_$i296, in_$i297, in_$i298, in_$p299, in_$i301, in_$p302, in_$i303, in_$i304, in_$i305, in_$i234, in_$i235, in_$i236, in_$i238, in_$i306, in_$i233, in_$i244, in_$i307, in_$i300, in_$i308, in_$i309, in_$i310, in_$i192, in_$i193, in_$i194, in_vslice_dummy_var_101;
    goto $bb52, exit;

  $bb52:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3742;

  $bb92:
    assume out_$i310 == 1;
    assume {:verifier.code 0} true;
    out_$i192, out_$i193, out_$i194 := out_$i300, out_$i309, out_$i308;
    goto $bb92_dummy;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    out_$i310 := $sle.i32(out_$i309, 1023);
    goto corral_source_split_3886;

  SeqInstr_288:
    call {:si_unique_call 833} {:cexpr "node"} boogie_si_record_i32(out_$i309);
    goto corral_source_split_3885;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} out_$i309 := __next_node(out_$i193, $add.ref($add.ref(node_states, $mul.ref(0, 640)), $mul.ref(1, 128)));
    goto SeqInstr_287;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    out_$i308 := $add.i32(out_$i194, 1);
    call {:si_unique_call 831} {:cexpr "node_idx"} boogie_si_record_i32(out_$i308);
    goto corral_source_split_3884;

  $bb85:
    assume {:verifier.code 0} true;
    goto corral_source_split_3883;

  $bb91:
    assume {:verifier.code 0} true;
    out_$i300 := out_$i307;
    goto $bb85;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    out_$i300 := out_$i279;
    goto $bb85;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p299, out_$i298);
    goto corral_source_split_3881;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    out_$p299 := $add.ref($add.ref(in_$p26, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_3880;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    out_$i298 := $trunc.i64.i32(out_$i297);
    goto corral_source_split_3879;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    out_$i297 := $sdiv.i64(out_$i296, 576);
    goto corral_source_split_3878;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    out_$i296 := $sub.i64(out_$i292, out_$i295);
    goto corral_source_split_3877;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    out_$i295 := $p2i.ref.i64(out_$p294);
    goto corral_source_split_3876;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    out_$p294 := $load.ref($M.1, out_$p293);
    goto corral_source_split_3875;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    out_$p293 := $add.ref($add.ref(in_$p26, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_3874;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    out_$i292 := $p2i.ref.i64(out_$p281);
    goto corral_source_split_3873;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} srp_free_req_data(in_$p26, out_$p281);
    goto corral_source_split_3872;

  SeqInstr_285:
    goto corral_source_split_3871;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} srp_free_ch_ib(in_$p26, out_$p281);
    goto SeqInstr_284;

  $bb84:
    assume !(out_$i290 == 1);
    goto corral_source_split_3870;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    out_$i291 := out_$i282;
    assume true;
    goto $bb84;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    out_$i290 := $eq.i32(out_$i289, 0);
    goto corral_source_split_3866;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    out_$i289 := $or.i32(out_$i194, out_$i280);
    goto corral_source_split_3865;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} dev_printk.ref.ref.ref.i32.i32(.str.39, out_$p285, .str.86, out_$i286, out_$i288);
    goto corral_source_split_3864;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    out_$i288 := $load.i32($M.1, out_$p287);
    goto corral_source_split_3863;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    out_$p287 := $add.ref($add.ref(in_$p26, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_3862;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    out_$i286 := $add.i32(out_$i199, out_$i280);
    goto corral_source_split_3861;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    out_$p285 := $add.ref($add.ref(out_$p284, $mul.ref(0, 3816)), $mul.ref(952, 1));
    goto corral_source_split_3860;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    out_$p284 := $load.ref($M.1, out_$p283);
    goto corral_source_split_3859;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    out_$p283 := $add.ref($add.ref(in_$p26, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_3858;

  $bb81:
    assume out_$i278 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3857;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    out_$i279, out_$i280, out_$p281, out_$i282 := out_$i236, out_$i235, out_$p252, out_$i277;
    assume true;
    goto $bb81, $bb82;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    out_$i278 := $ne.i32(out_$i277, 0);
    goto corral_source_split_3855;

  SeqInstr_282:
    call {:si_unique_call 827} {:cexpr "ret"} boogie_si_record_i32(out_$i277);
    goto corral_source_split_3854;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} out_$i277 := srp_connect_ch(out_$p252, out_$i276);
    goto SeqInstr_281;

  $bb80:
    assume {:verifier.code 0} true;
    out_$i276 := $trunc.i8.i1(out_$i236);
    goto corral_source_split_3853;

  $bb79:
    assume !(out_$i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    out_$i275 := out_$i273;
    assume true;
    goto $bb79;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    out_$i274 := $ne.i32(out_$i273, 0);
    goto corral_source_split_3849;

  SeqInstr_279:
    call {:si_unique_call 825} {:cexpr "ret"} boogie_si_record_i32(out_$i273);
    goto corral_source_split_3848;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} out_$i273 := srp_alloc_req_data(out_$p252);
    goto SeqInstr_278;

  $bb76:
    assume !(out_$i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    out_$i272 := out_$i270;
    assume true;
    goto $bb76;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    out_$i271 := $ne.i32(out_$i270, 0);
    goto corral_source_split_3844;

  SeqInstr_276:
    call {:si_unique_call 823} {:cexpr "ret"} boogie_si_record_i32(out_$i270);
    goto corral_source_split_3843;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} out_$i270 := srp_create_ch_ib(out_$p252);
    goto SeqInstr_275;

  $bb72:
    assume !(out_$i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    out_$i268 := out_$i266;
    assume true;
    goto $bb72;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    out_$i267 := $ne.i32(out_$i266, 0);
    goto corral_source_split_3833;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} out_$i266 := srp_new_cm_id(out_$p252);
    call {:si_unique_call 820} {:cexpr "ret"} boogie_si_record_i32(out_$i266);
    goto corral_source_split_3832;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} INIT_LIST_HEAD(out_$p265);
    goto corral_source_split_3831;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    out_$p265 := $add.ref($add.ref(out_$p249, $mul.ref(out_$i251, 488)), $mul.ref(0, 1));
    goto corral_source_split_3830;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} __raw_spin_lock_init(out_$p264, .str.85, in_$p9);
    goto corral_source_split_3829;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    out_$p264 := $bitcast.ref.ref(out_$p263);
    goto corral_source_split_3828;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    out_$p263 := $add.ref($add.ref($add.ref(out_$p249, $mul.ref(out_$i251, 488)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3827;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} out_vslice_dummy_var_101 := spinlock_check(out_$p260);
    goto corral_source_split_3826;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    out_$p260 := $add.ref($add.ref(out_$p249, $mul.ref(out_$i251, 488)), $mul.ref(16, 1));
    goto corral_source_split_3825;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p259, out_$i255);
    goto corral_source_split_3824;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    out_$p259 := $add.ref($add.ref(out_$p249, $mul.ref(out_$i251, 488)), $mul.ref(380, 1));
    goto corral_source_split_3823;

  $bb70:
    assume {:verifier.code 0} true;
    goto corral_source_split_3822;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    out_$i255 := out_$i258;
    goto $bb70;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    out_$i255 := out_$i216;
    goto $bb70;

  $bb68:
    assume out_$i254 == 1;
    goto corral_source_split_3815;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    out_$i254 := $eq.i32(out_$i216, out_$i228);
    goto corral_source_split_3813;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p253, in_$p26);
    goto corral_source_split_3812;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    out_$p253 := $add.ref($add.ref(out_$p249, $mul.ref(out_$i251, 488)), $mul.ref(96, 1));
    goto corral_source_split_3811;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    out_$p252 := $add.ref(out_$p249, $mul.ref(out_$i251, 488));
    goto corral_source_split_3810;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    out_$i251 := $sext.i32.i64(out_$i250);
    goto corral_source_split_3809;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    out_$i250 := $add.i32(out_$i199, out_$i235);
    goto corral_source_split_3808;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    out_$p249 := $load.ref($M.1, out_$p248);
    goto corral_source_split_3807;

  $bb67:
    assume {:verifier.code 0} true;
    out_$p248 := $add.ref($add.ref(in_$p26, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_3806;

  $bb66:
    assume !(out_$i246 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    out_$i247 := out_$i238;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    out_$i246 := $sge.i32(out_$i245, out_$i205);
    goto corral_source_split_3802;

  $bb64:
    assume {:verifier.code 0} true;
    out_$i245 := $add.i32(out_$i199, out_$i235);
    goto corral_source_split_3801;

  $bb60:
    assume !(out_$i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    out_$i239 := $ne.i32(out_$i237, out_$i193);
    goto corral_source_split_3790;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} out_$i237 := __cpu_to_node(out_$i238);
    call {:si_unique_call 813} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i237);
    goto corral_source_split_3789;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb89:
    call out_$i237, out_$i239, out_$p240, out_$i241, out_$i242, out_$i243, out_$i245, out_$i246, out_$i247, out_$i238, out_$i244 := srp_create_target_loop_$bb89(out_$i199, out_$i205, out_$i237, out_$i239, out_$p240, out_$i241, out_$i242, out_$i243, out_$i245, out_$i246, out_$i247, out_$i235, out_$i236, out_$i238, out_$i244, out_$i193);
    goto $bb89_last;

  $bb89_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3896;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    out_$i238 := out_$i234;
    goto $bb89;

  $bb62:
    assume out_$i243 == 1;
    assume {:verifier.code 0} true;
    out_$i238 := out_$i241;
    assume false;
    return;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    out_$i244 := out_$i236;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    out_$i243 := $slt.i32(out_$i241, out_$i242);
    goto corral_source_split_3797;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    out_$i242 := $load.i32($M.1, nr_cpu_ids);
    goto corral_source_split_3796;

  SeqInstr_270:
    call {:si_unique_call 815} {:cexpr "tmp___14"} boogie_si_record_i32(out_$i241);
    goto corral_source_split_3795;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} out_$i241 := cpumask_next(out_$i238, out_$p240);
    goto SeqInstr_269;

  $bb61:
    assume {:verifier.code 0} true;
    out_$p240 := $load.ref($M.1, cpu_online_mask);
    goto corral_source_split_3794;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb59:
    assume out_$i239 == 1;
    goto corral_source_split_3792;

  $bb65:
    assume out_$i246 == 1;
    goto corral_source_split_3804;

  $bb57:
    call out_$i237, out_$i239, out_$p240, out_$i241, out_$i242, out_$i243, out_$i245, out_$i246, out_$i247, out_$p248, out_$p249, out_$i250, out_$i251, out_$p252, out_$p253, out_$i254, out_$i256, out_$i257, out_$i258, out_$i255, out_$p259, out_$p260, out_$p263, out_$p264, out_$p265, out_$i266, out_$i267, out_$i268, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$p281, out_$i282, out_$i301, out_$p302, out_$i303, out_$i304, out_$i305, out_$i234, out_$i235, out_$i236, out_$i238, out_$i306, out_$i244, out_vslice_dummy_var_101 := srp_create_target_loop_$bb57(in_$p9, in_$p26, out_$i199, out_$i205, out_$i216, out_$i228, out_$i237, out_$i239, out_$p240, out_$i241, out_$i242, out_$i243, out_$i245, out_$i246, out_$i247, out_$p248, out_$p249, out_$i250, out_$i251, out_$p252, out_$p253, out_$i254, out_$i256, out_$i257, out_$i258, out_$i255, out_$p259, out_$p260, out_$p263, out_$p264, out_$p265, out_$i266, out_$i267, out_$i268, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$p281, out_$i282, out_$i301, out_$p302, out_$i303, out_$i304, out_$i305, out_$i234, out_$i235, out_$i236, out_$i238, out_$i306, out_$i244, out_$i193, out_vslice_dummy_var_101);
    goto $bb57_last;

  $bb57_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3787;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    out_$i234, out_$i235, out_$i236 := out_$i230, 0, out_$i192;
    goto $bb57;

  $bb87:
    assume out_$i305 == 1;
    assume {:verifier.code 0} true;
    out_$i234, out_$i235, out_$i236 := out_$i303, out_$i301, 1;
    assume false;
    return;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    out_$i306 := 1;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    out_$i305 := $slt.i32(out_$i303, out_$i304);
    goto corral_source_split_3892;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    out_$i304 := $load.i32($M.1, nr_cpu_ids);
    goto corral_source_split_3891;

  SeqInstr_291:
    call {:si_unique_call 836} {:cexpr "tmp___14"} boogie_si_record_i32(out_$i303);
    goto corral_source_split_3890;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} out_$i303 := cpumask_next(out_$i247, out_$p302);
    goto SeqInstr_290;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    out_$p302 := $load.ref($M.1, cpu_online_mask);
    goto corral_source_split_3889;

  $bb86:
    assume {:verifier.code 0} true;
    out_$i301 := $add.i32(out_$i235, 1);
    call {:si_unique_call 834} {:cexpr "cpu_idx"} boogie_si_record_i32(out_$i301);
    goto corral_source_split_3888;

  $bb82:
    assume !(out_$i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb54:
    assume out_$i232 == 1;
    goto corral_source_split_3783;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    out_$i233 := out_$i192;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    out_$i232 := $slt.i32(out_$i230, out_$i231);
    goto corral_source_split_3781;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    out_$i231 := $load.i32($M.1, nr_cpu_ids);
    goto corral_source_split_3780;

  SeqInstr_267:
    call {:si_unique_call 811} {:cexpr "tmp___14"} boogie_si_record_i32(out_$i230);
    goto corral_source_split_3779;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} out_$i230 := cpumask_next($sub.i32(0, 1), out_$p229);
    goto SeqInstr_266;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    out_$p229 := $load.ref($M.1, cpu_online_mask);
    goto corral_source_split_3778;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    out_$i228 := $srem.i32(out_$i225, out_$i227);
    call {:si_unique_call 809} {:cexpr "cv_end"} boogie_si_record_i32(out_$i228);
    goto corral_source_split_3777;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    out_$i227 := $load.i32($M.1, out_$p226);
    goto corral_source_split_3776;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    out_$p226 := $add.ref($add.ref(in_$p15, $mul.ref(0, 2488)), $mul.ref(408, 1));
    goto corral_source_split_3775;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    out_$i225 := $add.i32(out_$i222, out_$i224);
    goto corral_source_split_3774;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    out_$i224 := $load.i32($M.1, out_$p223);
    goto corral_source_split_3773;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    out_$p223 := $add.ref($add.ref(in_$p26, $mul.ref(0, 464)), $mul.ref(240, 1));
    goto corral_source_split_3772;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    out_$i222 := $sdiv.i32(out_$i221, out_$i217);
    goto corral_source_split_3771;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    out_$i221 := $mul.i32(out_$i218, out_$i220);
    goto corral_source_split_3770;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    out_$i220 := $load.i32($M.1, out_$p219);
    goto corral_source_split_3769;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    out_$p219 := $add.ref($add.ref(in_$p15, $mul.ref(0, 2488)), $mul.ref(408, 1));
    goto corral_source_split_3768;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    out_$i218 := $add.i32(out_$i194, 1);
    goto corral_source_split_3767;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} out_$i217 := num_node_state(1);
    call {:si_unique_call 808} {:cexpr "tmp___12"} boogie_si_record_i32(out_$i217);
    goto corral_source_split_3766;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    out_$i216 := $srem.i32(out_$i213, out_$i215);
    call {:si_unique_call 806} {:cexpr "cv_start"} boogie_si_record_i32(out_$i216);
    goto corral_source_split_3765;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    out_$i215 := $load.i32($M.1, out_$p214);
    goto corral_source_split_3764;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    out_$p214 := $add.ref($add.ref(in_$p15, $mul.ref(0, 2488)), $mul.ref(408, 1));
    goto corral_source_split_3763;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    out_$i213 := $add.i32(out_$i210, out_$i212);
    goto corral_source_split_3762;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    out_$i212 := $load.i32($M.1, out_$p211);
    goto corral_source_split_3761;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    out_$p211 := $add.ref($add.ref(in_$p26, $mul.ref(0, 464)), $mul.ref(240, 1));
    goto corral_source_split_3760;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    out_$i210 := $sdiv.i32(out_$i209, out_$i206);
    goto corral_source_split_3759;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    out_$i209 := $mul.i32(out_$i194, out_$i208);
    goto corral_source_split_3758;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    out_$i208 := $load.i32($M.1, out_$p207);
    goto corral_source_split_3757;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    out_$p207 := $add.ref($add.ref(in_$p15, $mul.ref(0, 2488)), $mul.ref(408, 1));
    goto corral_source_split_3756;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} out_$i206 := num_node_state(1);
    call {:si_unique_call 805} {:cexpr "tmp___11"} boogie_si_record_i32(out_$i206);
    goto corral_source_split_3755;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    out_$i205 := $udiv.i32(out_$i204, out_$i200);
    call {:si_unique_call 803} {:cexpr "ch_end"} boogie_si_record_i32(out_$i205);
    goto corral_source_split_3754;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    out_$i204 := $mul.i32(out_$i201, out_$i203);
    goto corral_source_split_3753;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    out_$i203 := $load.i32($M.1, out_$p202);
    goto corral_source_split_3752;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    out_$p202 := $add.ref($add.ref(in_$p26, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_3751;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    out_$i201 := $add.i32(out_$i194, 1);
    goto corral_source_split_3750;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} out_$i200 := num_node_state(1);
    call {:si_unique_call 802} {:cexpr "tmp___10"} boogie_si_record_i32(out_$i200);
    goto corral_source_split_3749;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    out_$i199 := $udiv.i32(out_$i198, out_$i195);
    call {:si_unique_call 800} {:cexpr "ch_start"} boogie_si_record_i32(out_$i199);
    goto corral_source_split_3748;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    out_$i198 := $mul.i32(out_$i194, out_$i197);
    goto corral_source_split_3747;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    out_$i197 := $load.i32($M.1, out_$p196);
    goto corral_source_split_3746;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    out_$p196 := $add.ref($add.ref(in_$p26, $mul.ref(0, 464)), $mul.ref(80, 1));
    goto corral_source_split_3745;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} out_$i195 := num_node_state(1);
    call {:si_unique_call 799} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i195);
    goto corral_source_split_3744;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    out_$i258 := $add.i32(out_$i216, out_$i257);
    goto corral_source_split_3820;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    out_$i257 := $srem.i32(out_$i235, out_$i256);
    goto corral_source_split_3819;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    out_$i256 := $sub.i32(out_$i228, out_$i216);
    goto corral_source_split_3818;

  $bb69:
    assume !(out_$i254 == 1);
    goto corral_source_split_3817;

  $bb90:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    out_$i307 := out_$i233;
    goto $bb90;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    out_$i307 := out_$i244;
    goto $bb90;

  $bb63:
    assume !(out_$i243 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3799;

  $bb56:
    assume {:verifier.code 0} true;
    goto corral_source_split_3785;

  $bb55:
    assume {:verifier.code 0} true;
    assume !(out_$i232 == 1);
    goto $bb56;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    out_$i233 := out_$i306;
    goto $bb56;

  $bb88:
    assume !(out_$i305 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3894;

  $bb92_dummy:
    call {:si_unique_call 1} out_$i195, out_$p196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$p202, out_$i203, out_$i204, out_$i205, out_$i206, out_$p207, out_$i208, out_$i209, out_$i210, out_$p211, out_$i212, out_$i213, out_$p214, out_$i215, out_$i216, out_$i217, out_$i218, out_$p219, out_$i220, out_$i221, out_$i222, out_$p223, out_$i224, out_$i225, out_$p226, out_$i227, out_$i228, out_$p229, out_$i230, out_$i231, out_$i232, out_$i237, out_$i239, out_$p240, out_$i241, out_$i242, out_$i243, out_$i245, out_$i246, out_$i247, out_$p248, out_$p249, out_$i250, out_$i251, out_$p252, out_$p253, out_$i254, out_$i256, out_$i257, out_$i258, out_$i255, out_$p259, out_$p260, out_$p263, out_$p264, out_$p265, out_$i266, out_$i267, out_$i268, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$p281, out_$i282, out_$p283, out_$p284, out_$p285, out_$i286, out_$p287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$p293, out_$p294, out_$i295, out_$i296, out_$i297, out_$i298, out_$p299, out_$i301, out_$p302, out_$i303, out_$i304, out_$i305, out_$i234, out_$i235, out_$i236, out_$i238, out_$i306, out_$i233, out_$i244, out_$i307, out_$i300, out_$i308, out_$i309, out_$i310, out_$i192, out_$i193, out_$i194, out_vslice_dummy_var_101 := srp_create_target_loop_$bb52(in_$p9, in_$p15, in_$p26, out_$i195, out_$p196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$p202, out_$i203, out_$i204, out_$i205, out_$i206, out_$p207, out_$i208, out_$i209, out_$i210, out_$p211, out_$i212, out_$i213, out_$p214, out_$i215, out_$i216, out_$i217, out_$i218, out_$p219, out_$i220, out_$i221, out_$i222, out_$p223, out_$i224, out_$i225, out_$p226, out_$i227, out_$i228, out_$p229, out_$i230, out_$i231, out_$i232, out_$i237, out_$i239, out_$p240, out_$i241, out_$i242, out_$i243, out_$i245, out_$i246, out_$i247, out_$p248, out_$p249, out_$i250, out_$i251, out_$p252, out_$p253, out_$i254, out_$i256, out_$i257, out_$i258, out_$i255, out_$p259, out_$p260, out_$p263, out_$p264, out_$p265, out_$i266, out_$i267, out_$i268, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$p281, out_$i282, out_$p283, out_$p284, out_$p285, out_$i286, out_$p287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$p293, out_$p294, out_$i295, out_$i296, out_$i297, out_$i298, out_$p299, out_$i301, out_$p302, out_$i303, out_$i304, out_$i305, out_$i234, out_$i235, out_$i236, out_$i238, out_$i306, out_$i233, out_$i244, out_$i307, out_$i300, out_$i308, out_$i309, out_$i310, out_$i192, out_$i193, out_$i194, out_vslice_dummy_var_101);
    return;

  exit:
    return;
}



procedure srp_create_target_loop_$bb52(in_$p9: ref, in_$p15: ref, in_$p26: ref, in_$i195: i32, in_$p196: ref, in_$i197: i32, in_$i198: i32, in_$i199: i32, in_$i200: i32, in_$i201: i32, in_$p202: ref, in_$i203: i32, in_$i204: i32, in_$i205: i32, in_$i206: i32, in_$p207: ref, in_$i208: i32, in_$i209: i32, in_$i210: i32, in_$p211: ref, in_$i212: i32, in_$i213: i32, in_$p214: ref, in_$i215: i32, in_$i216: i32, in_$i217: i32, in_$i218: i32, in_$p219: ref, in_$i220: i32, in_$i221: i32, in_$i222: i32, in_$p223: ref, in_$i224: i32, in_$i225: i32, in_$p226: ref, in_$i227: i32, in_$i228: i32, in_$p229: ref, in_$i230: i32, in_$i231: i32, in_$i232: i1, in_$i237: i32, in_$i239: i1, in_$p240: ref, in_$i241: i32, in_$i242: i32, in_$i243: i1, in_$i245: i32, in_$i246: i1, in_$i247: i32, in_$p248: ref, in_$p249: ref, in_$i250: i32, in_$i251: i64, in_$p252: ref, in_$p253: ref, in_$i254: i1, in_$i256: i32, in_$i257: i32, in_$i258: i32, in_$i255: i32, in_$p259: ref, in_$p260: ref, in_$p263: ref, in_$p264: ref, in_$p265: ref, in_$i266: i32, in_$i267: i1, in_$i268: i32, in_$i270: i32, in_$i271: i1, in_$i272: i32, in_$i273: i32, in_$i274: i1, in_$i275: i32, in_$i276: i1, in_$i277: i32, in_$i278: i1, in_$i279: i8, in_$i280: i32, in_$p281: ref, in_$i282: i32, in_$p283: ref, in_$p284: ref, in_$p285: ref, in_$i286: i32, in_$p287: ref, in_$i288: i32, in_$i289: i32, in_$i290: i1, in_$i291: i32, in_$i292: i64, in_$p293: ref, in_$p294: ref, in_$i295: i64, in_$i296: i64, in_$i297: i64, in_$i298: i32, in_$p299: ref, in_$i301: i32, in_$p302: ref, in_$i303: i32, in_$i304: i32, in_$i305: i1, in_$i234: i32, in_$i235: i32, in_$i236: i8, in_$i238: i32, in_$i306: i8, in_$i233: i8, in_$i244: i8, in_$i307: i8, in_$i300: i8, in_$i308: i32, in_$i309: i32, in_$i310: i1, in_$i192: i8, in_$i193: i32, in_$i194: i32, in_vslice_dummy_var_101: ref) returns (out_$i195: i32, out_$p196: ref, out_$i197: i32, out_$i198: i32, out_$i199: i32, out_$i200: i32, out_$i201: i32, out_$p202: ref, out_$i203: i32, out_$i204: i32, out_$i205: i32, out_$i206: i32, out_$p207: ref, out_$i208: i32, out_$i209: i32, out_$i210: i32, out_$p211: ref, out_$i212: i32, out_$i213: i32, out_$p214: ref, out_$i215: i32, out_$i216: i32, out_$i217: i32, out_$i218: i32, out_$p219: ref, out_$i220: i32, out_$i221: i32, out_$i222: i32, out_$p223: ref, out_$i224: i32, out_$i225: i32, out_$p226: ref, out_$i227: i32, out_$i228: i32, out_$p229: ref, out_$i230: i32, out_$i231: i32, out_$i232: i1, out_$i237: i32, out_$i239: i1, out_$p240: ref, out_$i241: i32, out_$i242: i32, out_$i243: i1, out_$i245: i32, out_$i246: i1, out_$i247: i32, out_$p248: ref, out_$p249: ref, out_$i250: i32, out_$i251: i64, out_$p252: ref, out_$p253: ref, out_$i254: i1, out_$i256: i32, out_$i257: i32, out_$i258: i32, out_$i255: i32, out_$p259: ref, out_$p260: ref, out_$p263: ref, out_$p264: ref, out_$p265: ref, out_$i266: i32, out_$i267: i1, out_$i268: i32, out_$i270: i32, out_$i271: i1, out_$i272: i32, out_$i273: i32, out_$i274: i1, out_$i275: i32, out_$i276: i1, out_$i277: i32, out_$i278: i1, out_$i279: i8, out_$i280: i32, out_$p281: ref, out_$i282: i32, out_$p283: ref, out_$p284: ref, out_$p285: ref, out_$i286: i32, out_$p287: ref, out_$i288: i32, out_$i289: i32, out_$i290: i1, out_$i291: i32, out_$i292: i64, out_$p293: ref, out_$p294: ref, out_$i295: i64, out_$i296: i64, out_$i297: i64, out_$i298: i32, out_$p299: ref, out_$i301: i32, out_$p302: ref, out_$i303: i32, out_$i304: i32, out_$i305: i1, out_$i234: i32, out_$i235: i32, out_$i236: i8, out_$i238: i32, out_$i306: i8, out_$i233: i8, out_$i244: i8, out_$i307: i8, out_$i300: i8, out_$i308: i32, out_$i309: i32, out_$i310: i1, out_$i192: i8, out_$i193: i32, out_$i194: i32, out_vslice_dummy_var_101: ref);
  modifies assertsPassed, $M.1, $M.26, $M.27, $M.28, $M.29, $M.17, $CurrAddr, $M.18, $M.19, $M.11, $M.25;



implementation srp_parse_options_loop_$bb88(in_$p1: ref, in_$p3: ref, in_$p72: ref, in_$p80: ref, in_$i81: i32, in_$i82: i64, in_$p83: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$p90: ref, in_$i91: i32, in_$i92: i1, in_$p93: ref, in_$i94: i32, in_$i95: i1, in_$i79: i32, in_vslice_dummy_var_104: i64) returns (out_$p80: ref, out_$i81: i32, out_$i82: i64, out_$p83: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$p90: ref, out_$i91: i32, out_$i92: i1, out_$p93: ref, out_$i94: i32, out_$i95: i1, out_$i79: i32, out_vslice_dummy_var_104: i64)
{

  entry:
    out_$p80, out_$i81, out_$i82, out_$p83, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$p90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$i79, out_vslice_dummy_var_104 := in_$p80, in_$i81, in_$i82, in_$p83, in_$p85, in_$p86, in_$p87, in_$p88, in_$i89, in_$p90, in_$i91, in_$i92, in_$p93, in_$i94, in_$i95, in_$i79, in_vslice_dummy_var_104;
    goto $bb88, exit;

  $bb88:
    assume {:verifier.code 0} true;
    goto corral_source_split_4196;

  $bb93:
    assume out_$i95 == 1;
    assume {:verifier.code 0} true;
    out_$i79 := out_$i94;
    goto $bb93_dummy;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    out_$i95 := $sle.i32(out_$i94, 15);
    goto corral_source_split_4216;

  $bb92:
    assume {:verifier.code 0} true;
    out_$i94 := $add.i32(out_$i79, 1);
    call {:si_unique_call 915} {:cexpr "i"} boogie_si_record_i32(out_$i94);
    goto corral_source_split_4215;

  $bb91:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    out_$p93 := in_$p72;
    assume true;
    goto $bb91;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    out_$i92 := $sle.i32(out_$i91, 0);
    goto corral_source_split_4210;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} out_$i91 := sscanf.ref.ref.ref(out_$p85, .str.107, out_$p90);
    call {:si_unique_call 913} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i91);
    goto corral_source_split_4209;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref(out_$p88, $mul.ref(out_$i89, 1));
    goto corral_source_split_4208;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    out_$i89 := $sext.i32.i64(out_$i79);
    goto corral_source_split_4207;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    out_$p88 := $bitcast.ref.ref(out_$p87);
    goto corral_source_split_4206;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    out_$p87 := $bitcast.ref.ref(out_$p86);
    goto corral_source_split_4205;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(in_$p1, $mul.ref(0, 464)), $mul.ref(248, 1));
    goto corral_source_split_4204;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    out_$p85 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_4203;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} out_vslice_dummy_var_104 := strlcpy(out_$p80, out_$p83, 3);
    goto corral_source_split_4202;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref(in_$p72, $mul.ref(out_$i82, 1));
    goto corral_source_split_4201;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    out_$i82 := $sext.i32.i64(out_$i81);
    goto corral_source_split_4200;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    out_$i81 := $mul.i32(out_$i79, 2);
    goto corral_source_split_4199;

  $bb89:
    assume {:verifier.code 0} true;
    out_$p80 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_4198;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb93_dummy:
    call {:si_unique_call 1} out_$p80, out_$i81, out_$i82, out_$p83, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$p90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$i79, out_vslice_dummy_var_104 := srp_parse_options_loop_$bb88(in_$p1, in_$p3, in_$p72, out_$p80, out_$i81, out_$i82, out_$p83, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$p90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$i79, out_vslice_dummy_var_104);
    return;

  exit:
    return;
}



procedure srp_parse_options_loop_$bb88(in_$p1: ref, in_$p3: ref, in_$p72: ref, in_$p80: ref, in_$i81: i32, in_$i82: i64, in_$p83: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$p90: ref, in_$i91: i32, in_$i92: i1, in_$p93: ref, in_$i94: i32, in_$i95: i1, in_$i79: i32, in_vslice_dummy_var_104: i64) returns (out_$p80: ref, out_$i81: i32, out_$i82: i64, out_$p83: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$p90: ref, out_$i91: i32, out_$i92: i1, out_$p93: ref, out_$i94: i32, out_$i95: i1, out_$i79: i32, out_vslice_dummy_var_104: i64);



implementation srp_parse_options_loop_$bb168(in_$p2: ref, in_$i16: i8, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$i15: i32, in_$p233: ref, in_$i234: i64, in_$i235: i1, in_$p17: ref, in_$i236: i32) returns (out_$i16: i8, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$p233: ref, out_$i234: i64, out_$i235: i1, out_$p17: ref, out_$i236: i32)
{

  entry:
    out_$i16, out_$i18, out_$i19, out_$p20, out_$p233, out_$i234, out_$i235, out_$p17, out_$i236 := in_$i16, in_$i18, in_$i19, in_$p20, in_$p233, in_$i234, in_$i235, in_$p17, in_$i236;
    goto $bb168, exit;

  $bb168:
    assume {:verifier.code 0} true;
    goto corral_source_split_4383;

  $bb169:
    assume out_$i235 == 1;
    assume {:verifier.code 0} true;
    out_$p17 := out_$p233;
    goto $bb169_dummy;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    out_$i236 := in_$i15;
    assume true;
    goto $bb169;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    out_$i235 := $ne.i64(out_$i234, 0);
    goto corral_source_split_4015;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    out_$i234 := $p2i.ref.i64(out_$p233);
    goto corral_source_split_4014;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} out_$p233 := strsep(in_$p2, .str.120);
    goto corral_source_split_4013;

  $bb10:
    assume out_$i19 == 1;
    goto corral_source_split_4012;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    out_$p20 := out_$p17;
    assume true;
    goto $bb10;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i32(out_$i18, 0);
    goto corral_source_split_4010;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i8.i32(out_$i16);
    goto corral_source_split_4009;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i8($M.1, out_$p17);
    goto corral_source_split_4008;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb169_dummy:
    call {:si_unique_call 1} out_$i16, out_$i18, out_$i19, out_$p20, out_$p233, out_$i234, out_$i235, out_$p17, out_$i236 := srp_parse_options_loop_$bb168(in_$p2, out_$i16, out_$i18, out_$i19, out_$p20, in_$i15, out_$p233, out_$i234, out_$i235, out_$p17, out_$i236);
    return;

  exit:
    return;
}



procedure srp_parse_options_loop_$bb168(in_$p2: ref, in_$i16: i8, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$i15: i32, in_$p233: ref, in_$i234: i64, in_$i235: i1, in_$p17: ref, in_$i236: i32) returns (out_$i16: i8, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$p233: ref, out_$i234: i64, out_$i235: i1, out_$p17: ref, out_$i236: i32);



implementation srp_parse_options_loop_$bb8(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$i16: i8, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$i59: i1, in_$i61: i64, in_$i62: i64, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$i66: i64, in_$i67: i1, in_$i68: i64, in_$i69: i64, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$i74: i1, in_$i75: i64, in_$i76: i1, in_$p77: ref, in_$p80: ref, in_$i81: i32, in_$i82: i64, in_$p83: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$p90: ref, in_$i91: i32, in_$i92: i1, in_$p93: ref, in_$i94: i32, in_$i95: i1, in_$i79: i32, in_$p96: ref, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$i101: i32, in_$i102: i16, in_$i103: i32, in_$i104: i16, in_$i105: i16, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$i109: i64, in_$i110: i1, in_$i111: i64, in_$i112: i64, in_$p113: ref, in_$p114: ref, in_$i115: i32, in_$i116: i1, in_$p117: ref, in_$i119: i32, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$i124: i32, in_$i125: i1, in_$i127: i32, in_$i128: i1, in_$p126: ref, in_$i130: i32, in_$p131: ref, in_$p132: ref, in_$p133: ref, in_$i134: i32, in_$i135: i32, in_$p136: ref, in_$i137: i32, in_$i138: i1, in_$i139: i32, in_$i140: i16, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$i145: i32, in_$i146: i1, in_$i148: i32, in_$i149: i1, in_$p147: ref, in_$i151: i32, in_$i152: i16, in_$p153: ref, in_$p154: ref, in_$p155: ref, in_$p156: ref, in_$i157: i32, in_$i158: i1, in_$p159: ref, in_$i161: i32, in_$i162: i1, in_$i163: i32, in_$i164: i1, in_$i167: i32, in_$i168: i16, in_$p169: ref, in_$p170: ref, in_$p171: ref, in_$i172: i64, in_$i173: i1, in_$i174: i64, in_$i175: i64, in_$p176: ref, in_$p177: ref, in_$i178: i32, in_$i179: i1, in_$i181: i32, in_$i182: i1, in_$i183: i32, in_$i184: i1, in_$p180: ref, in_$i186: i32, in_$p187: ref, in_$p188: ref, in_$i189: i32, in_$i190: i1, in_$p191: ref, in_$i193: i32, in_$i194: i1, in_$p195: ref, in_$i196: i8, in_$p197: ref, in_$i198: i32, in_$i199: i1, in_$i201: i32, in_$i202: i1, in_$i203: i32, in_$i204: i1, in_$p200: ref, in_$i206: i32, in_$p207: ref, in_$p208: ref, in_$i209: i32, in_$i210: i1, in_$i212: i32, in_$i213: i1, in_$p211: ref, in_$i215: i32, in_$p216: ref, in_$p217: ref, in_$i218: i32, in_$i219: i1, in_$i221: i32, in_$i222: i1, in_$i223: i32, in_$i224: i1, in_$p220: ref, in_$i226: i32, in_$p227: ref, in_$p229: ref, in_$i230: i64, in_$i231: i1, in_$p14: ref, in_$i15: i32, in_$p233: ref, in_$i234: i64, in_$i235: i1, in_$p17: ref, in_$i232: i32, in_$i236: i32, in_vslice_dummy_var_104: i64) returns (out_$i16: i8, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$i59: i1, out_$i61: i64, out_$i62: i64, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$i66: i64, out_$i67: i1, out_$i68: i64, out_$i69: i64, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$i74: i1, out_$i75: i64, out_$i76: i1, out_$p77: ref, out_$p80: ref, out_$i81: i32, out_$i82: i64, out_$p83: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$p90: ref, out_$i91: i32, out_$i92: i1, out_$p93: ref, out_$i94: i32, out_$i95: i1, out_$i79: i32, out_$p96: ref, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$i101: i32, out_$i102: i16, out_$i103: i32, out_$i104: i16, out_$i105: i16, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$i109: i64, out_$i110: i1, out_$i111: i64, out_$i112: i64, out_$p113: ref, out_$p114: ref, out_$i115: i32, out_$i116: i1, out_$p117: ref, out_$i119: i32, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$i124: i32, out_$i125: i1, out_$i127: i32, out_$i128: i1, out_$p126: ref, out_$i130: i32, out_$p131: ref, out_$p132: ref, out_$p133: ref, out_$i134: i32, out_$i135: i32, out_$p136: ref, out_$i137: i32, out_$i138: i1, out_$i139: i32, out_$i140: i16, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$i145: i32, out_$i146: i1, out_$i148: i32, out_$i149: i1, out_$p147: ref, out_$i151: i32, out_$i152: i16, out_$p153: ref, out_$p154: ref, out_$p155: ref, out_$p156: ref, out_$i157: i32, out_$i158: i1, out_$p159: ref, out_$i161: i32, out_$i162: i1, out_$i163: i32, out_$i164: i1, out_$i167: i32, out_$i168: i16, out_$p169: ref, out_$p170: ref, out_$p171: ref, out_$i172: i64, out_$i173: i1, out_$i174: i64, out_$i175: i64, out_$p176: ref, out_$p177: ref, out_$i178: i32, out_$i179: i1, out_$i181: i32, out_$i182: i1, out_$i183: i32, out_$i184: i1, out_$p180: ref, out_$i186: i32, out_$p187: ref, out_$p188: ref, out_$i189: i32, out_$i190: i1, out_$p191: ref, out_$i193: i32, out_$i194: i1, out_$p195: ref, out_$i196: i8, out_$p197: ref, out_$i198: i32, out_$i199: i1, out_$i201: i32, out_$i202: i1, out_$i203: i32, out_$i204: i1, out_$p200: ref, out_$i206: i32, out_$p207: ref, out_$p208: ref, out_$i209: i32, out_$i210: i1, out_$i212: i32, out_$i213: i1, out_$p211: ref, out_$i215: i32, out_$p216: ref, out_$p217: ref, out_$i218: i32, out_$i219: i1, out_$i221: i32, out_$i222: i1, out_$i223: i32, out_$i224: i1, out_$p220: ref, out_$i226: i32, out_$p227: ref, out_$p229: ref, out_$i230: i64, out_$i231: i1, out_$p14: ref, out_$i15: i32, out_$p233: ref, out_$i234: i64, out_$i235: i1, out_$p17: ref, out_$i232: i32, out_$i236: i32, out_vslice_dummy_var_104: i64)
{

  entry:
    out_$i16, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$p80, out_$i81, out_$i82, out_$p83, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$p90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$i79, out_$p96, out_$i97, out_$i98, out_$p99, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$p114, out_$i115, out_$i116, out_$p117, out_$i119, out_$p120, out_$p121, out_$p122, out_$p123, out_$i124, out_$i125, out_$i127, out_$i128, out_$p126, out_$i130, out_$p131, out_$p132, out_$p133, out_$i134, out_$i135, out_$p136, out_$i137, out_$i138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p143, out_$p144, out_$i145, out_$i146, out_$i148, out_$i149, out_$p147, out_$i151, out_$i152, out_$p153, out_$p154, out_$p155, out_$p156, out_$i157, out_$i158, out_$p159, out_$i161, out_$i162, out_$i163, out_$i164, out_$i167, out_$i168, out_$p169, out_$p170, out_$p171, out_$i172, out_$i173, out_$i174, out_$i175, out_$p176, out_$p177, out_$i178, out_$i179, out_$i181, out_$i182, out_$i183, out_$i184, out_$p180, out_$i186, out_$p187, out_$p188, out_$i189, out_$i190, out_$p191, out_$i193, out_$i194, out_$p195, out_$i196, out_$p197, out_$i198, out_$i199, out_$i201, out_$i202, out_$i203, out_$i204, out_$p200, out_$i206, out_$p207, out_$p208, out_$i209, out_$i210, out_$i212, out_$i213, out_$p211, out_$i215, out_$p216, out_$p217, out_$i218, out_$i219, out_$i221, out_$i222, out_$i223, out_$i224, out_$p220, out_$i226, out_$p227, out_$p229, out_$i230, out_$i231, out_$p14, out_$i15, out_$p233, out_$i234, out_$i235, out_$p17, out_$i232, out_$i236, out_vslice_dummy_var_104 := in_$i16, in_$i18, in_$i19, in_$p20, in_$p21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$p55, in_$p56, in_$p57, in_$i58, in_$i59, in_$i61, in_$i62, in_$p63, in_$p64, in_$p65, in_$i66, in_$i67, in_$i68, in_$i69, in_$p70, in_$p71, in_$p72, in_$i73, in_$i74, in_$i75, in_$i76, in_$p77, in_$p80, in_$i81, in_$i82, in_$p83, in_$p85, in_$p86, in_$p87, in_$p88, in_$i89, in_$p90, in_$i91, in_$i92, in_$p93, in_$i94, in_$i95, in_$i79, in_$p96, in_$i97, in_$i98, in_$p99, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$p106, in_$p107, in_$p108, in_$i109, in_$i110, in_$i111, in_$i112, in_$p113, in_$p114, in_$i115, in_$i116, in_$p117, in_$i119, in_$p120, in_$p121, in_$p122, in_$p123, in_$i124, in_$i125, in_$i127, in_$i128, in_$p126, in_$i130, in_$p131, in_$p132, in_$p133, in_$i134, in_$i135, in_$p136, in_$i137, in_$i138, in_$i139, in_$i140, in_$p141, in_$p142, in_$p143, in_$p144, in_$i145, in_$i146, in_$i148, in_$i149, in_$p147, in_$i151, in_$i152, in_$p153, in_$p154, in_$p155, in_$p156, in_$i157, in_$i158, in_$p159, in_$i161, in_$i162, in_$i163, in_$i164, in_$i167, in_$i168, in_$p169, in_$p170, in_$p171, in_$i172, in_$i173, in_$i174, in_$i175, in_$p176, in_$p177, in_$i178, in_$i179, in_$i181, in_$i182, in_$i183, in_$i184, in_$p180, in_$i186, in_$p187, in_$p188, in_$i189, in_$i190, in_$p191, in_$i193, in_$i194, in_$p195, in_$i196, in_$p197, in_$i198, in_$i199, in_$i201, in_$i202, in_$i203, in_$i204, in_$p200, in_$i206, in_$p207, in_$p208, in_$i209, in_$i210, in_$i212, in_$i213, in_$p211, in_$i215, in_$p216, in_$p217, in_$i218, in_$i219, in_$i221, in_$i222, in_$i223, in_$i224, in_$p220, in_$i226, in_$p227, in_$p229, in_$i230, in_$i231, in_$p14, in_$i15, in_$p233, in_$i234, in_$i235, in_$p17, in_$i232, in_$i236, in_vslice_dummy_var_104;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4006;

  $bb166:
    assume out_$i231 == 1;
    assume {:verifier.code 0} true;
    out_$p14, out_$i15 := out_$p229, out_$i24;
    goto $bb166_dummy;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    out_$i232 := out_$i24;
    assume true;
    goto $bb166;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    out_$i231 := $ne.i64(out_$i230, 0);
    goto corral_source_split_4177;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    out_$i230 := $p2i.ref.i64(out_$p229);
    goto corral_source_split_4176;

  $bb78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} out_$p229 := strsep(in_$p2, .str.120);
    goto corral_source_split_4175;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} kfree(out_$p57);
    goto corral_source_split_4173;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, out_$p63, out_$i62);
    goto corral_source_split_4172;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p1, $mul.ref(0, 464)), $mul.ref(128, 1));
    goto corral_source_split_4171;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} out_$i62 := __fswab64(out_$i61);
    call {:si_unique_call 899} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i62);
    goto corral_source_split_4170;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} out_$i61 := simple_strtoull(out_$p57, $0.ref, 16);
    call {:si_unique_call 897} {:cexpr "tmp"} boogie_si_record_i64(out_$i61);
    goto corral_source_split_4169;

  $bb75:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    out_$i59 := $eq.i64(out_$i58, 0);
    goto corral_source_split_4030;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    out_$i58 := $p2i.ref.i64(out_$p57);
    goto corral_source_split_4029;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} out_$p57 := match_strdup(out_$p56);
    goto corral_source_split_4028;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p56 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4027;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb13:
    assume out_$i26 == 1;
    goto corral_source_split_4025;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i25, 1);
    goto corral_source_split_4023;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4022;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    out_$i24 := $or.i32(out_$i15, out_$i23);
    call {:si_unique_call 868} {:cexpr "opt_mask"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_4021;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4020;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $M.64 := $store.i32($M.64, in_$p5, out_$i22);
    goto corral_source_split_4019;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} out_$i22 := match_token(out_$p20, srp_opt_tokens, out_$p21);
    goto corral_source_split_4018;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4017;

  $bb11:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    out_$p20 := out_$p17;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i32(out_$i18, 0);
    goto corral_source_split_4010;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i8.i32(out_$i16);
    goto corral_source_split_4009;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i8($M.1, out_$p17);
    goto corral_source_split_4008;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb168:
    call out_$i16, out_$i18, out_$i19, out_$p20, out_$p233, out_$i234, out_$i235, out_$p17, out_$i236 := srp_parse_options_loop_$bb168(in_$p2, out_$i16, out_$i18, out_$i19, out_$p20, out_$i15, out_$p233, out_$i234, out_$i235, out_$p17, out_$i236);
    goto $bb168_last;

  $bb168_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4383;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    out_$p17 := out_$p14;
    goto $bb168;

  $bb169:
    assume out_$i235 == 1;
    assume {:verifier.code 0} true;
    out_$p17 := out_$p233;
    assume false;
    return;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    out_$i236 := out_$i15;
    assume true;
    goto $bb169;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    out_$i235 := $ne.i64(out_$i234, 0);
    goto corral_source_split_4015;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    out_$i234 := $p2i.ref.i64(out_$p233);
    goto corral_source_split_4014;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} out_$p233 := strsep(in_$p2, .str.120);
    goto corral_source_split_4013;

  $bb10:
    assume out_$i19 == 1;
    goto corral_source_split_4012;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} kfree(out_$p65);
    goto corral_source_split_4185;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, out_$p70, out_$i69);
    goto corral_source_split_4184;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p1, $mul.ref(0, 464)), $mul.ref(136, 1));
    goto corral_source_split_4183;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} out_$i69 := __fswab64(out_$i68);
    call {:si_unique_call 905} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i69);
    goto corral_source_split_4182;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} out_$i68 := simple_strtoull(out_$p65, $0.ref, 16);
    call {:si_unique_call 903} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i68);
    goto corral_source_split_4181;

  $bb80:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    out_$i67 := $eq.i64(out_$i66, 0);
    goto corral_source_split_4040;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    out_$i66 := $p2i.ref.i64(out_$p65);
    goto corral_source_split_4039;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} out_$p65 := match_strdup(out_$p64);
    goto corral_source_split_4038;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p64 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4037;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb17:
    assume out_$i28 == 1;
    goto corral_source_split_4035;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i27, 2);
    goto corral_source_split_4033;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4032;

  $bb14:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} kfree(out_$p72);
    goto corral_source_split_4218;

  $bb94:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    out_$i95 := $sle.i32(out_$i94, 15);
    goto corral_source_split_4216;

  $bb92:
    assume {:verifier.code 0} true;
    out_$i94 := $add.i32(out_$i79, 1);
    call {:si_unique_call 915} {:cexpr "i"} boogie_si_record_i32(out_$i94);
    goto corral_source_split_4215;

  $bb91:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    out_$p93 := out_$p72;
    assume true;
    goto $bb91;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    out_$i92 := $sle.i32(out_$i91, 0);
    goto corral_source_split_4210;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} out_$i91 := sscanf.ref.ref.ref(out_$p85, .str.107, out_$p90);
    call {:si_unique_call 913} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i91);
    goto corral_source_split_4209;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref(out_$p88, $mul.ref(out_$i89, 1));
    goto corral_source_split_4208;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    out_$i89 := $sext.i32.i64(out_$i79);
    goto corral_source_split_4207;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    out_$p88 := $bitcast.ref.ref(out_$p87);
    goto corral_source_split_4206;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    out_$p87 := $bitcast.ref.ref(out_$p86);
    goto corral_source_split_4205;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(in_$p1, $mul.ref(0, 464)), $mul.ref(248, 1));
    goto corral_source_split_4204;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    out_$p85 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_4203;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} out_vslice_dummy_var_104 := strlcpy(out_$p80, out_$p83, 3);
    goto corral_source_split_4202;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref(out_$p72, $mul.ref(out_$i82, 1));
    goto corral_source_split_4201;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    out_$i82 := $sext.i32.i64(out_$i81);
    goto corral_source_split_4200;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    out_$i81 := $mul.i32(out_$i79, 2);
    goto corral_source_split_4199;

  $bb89:
    assume {:verifier.code 0} true;
    out_$p80 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_4198;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb88:
    call out_$p80, out_$i81, out_$i82, out_$p83, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$p90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$i79, out_vslice_dummy_var_104 := srp_parse_options_loop_$bb88(in_$p1, in_$p3, out_$p72, out_$p80, out_$i81, out_$i82, out_$p83, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$p90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$i79, out_vslice_dummy_var_104);
    goto $bb88_last;

  $bb88_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4196;

  $bb87:
    assume {:verifier.code 0} true;
    out_$i79 := 0;
    goto $bb88;

  $bb93:
    assume out_$i95 == 1;
    assume {:verifier.code 0} true;
    out_$i79 := out_$i94;
    assume false;
    return;

  $bb86:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    out_$p77 := out_$p72;
    assume true;
    goto $bb86;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    out_$i76 := $ne.i64(out_$i75, 32);
    goto corral_source_split_4190;

  $bb84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} out_$i75 := strlen(out_$p72);
    call {:si_unique_call 908} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i75);
    goto corral_source_split_4189;

  $bb83:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    out_$i74 := $eq.i64(out_$i73, 0);
    goto corral_source_split_4050;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    out_$i73 := $p2i.ref.i64(out_$p72);
    goto corral_source_split_4049;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} out_$p72 := match_strdup(out_$p71);
    goto corral_source_split_4048;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p71 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4047;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb21:
    assume out_$i30 == 1;
    goto corral_source_split_4045;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, 4);
    goto corral_source_split_4043;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4042;

  $bb18:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, out_$p106, out_$i105);
    goto corral_source_split_4229;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(in_$p1, $mul.ref(0, 464)), $mul.ref(264, 1));
    goto corral_source_split_4228;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} out_$i105 := __fswab16(out_$i104);
    call {:si_unique_call 919} {:cexpr "tmp___6"} boogie_si_record_i16(out_$i105);
    goto corral_source_split_4227;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    out_$i104 := $trunc.i32.i16(out_$i103);
    goto corral_source_split_4226;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    out_$i103 := $zext.i16.i32(out_$i102);
    goto corral_source_split_4225;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    out_$i102 := $trunc.i32.i16(out_$i101);
    goto corral_source_split_4224;

  $bb98:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4223;

  $bb97:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    out_$p99 := out_$p20;
    assume true;
    goto $bb97;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    out_$i98 := $ne.i32(out_$i97, 0);
    goto corral_source_split_4059;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} out_$i97 := match_hex(out_$p96, in_$p5);
    call {:si_unique_call 873} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i97);
    goto corral_source_split_4058;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p96 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4057;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb25:
    assume out_$i32 == 1;
    goto corral_source_split_4055;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i31, 8);
    goto corral_source_split_4053;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4052;

  $bb22:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} kfree(out_$p108);
    goto corral_source_split_4237;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, out_$p113, out_$i112);
    goto corral_source_split_4236;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(in_$p1, $mul.ref(0, 464)), $mul.ref(144, 1));
    goto corral_source_split_4235;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} out_$i112 := __fswab64(out_$i111);
    call {:si_unique_call 923} {:cexpr "tmp___8"} boogie_si_record_i64(out_$i112);
    goto corral_source_split_4234;

  $bb101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} out_$i111 := simple_strtoull(out_$p108, $0.ref, 16);
    call {:si_unique_call 921} {:cexpr "tmp___7"} boogie_si_record_i64(out_$i111);
    goto corral_source_split_4233;

  $bb100:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    out_$i110 := $eq.i64(out_$i109, 0);
    goto corral_source_split_4069;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    out_$i109 := $p2i.ref.i64(out_$p108);
    goto corral_source_split_4068;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} out_$p108 := match_strdup(out_$p107);
    goto corral_source_split_4067;

  $bb31:
    assume {:verifier.code 0} true;
    out_$p107 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4066;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb29:
    assume out_$i34 == 1;
    goto corral_source_split_4064;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i33, 16);
    goto corral_source_split_4062;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4061;

  $bb26:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p122, out_$i119);
    goto corral_source_split_4246;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref(out_$p121, $mul.ref(0, 3816)), $mul.ref(824, 1));
    goto corral_source_split_4245;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    out_$p121 := $load.ref($M.1, out_$p120);
    goto corral_source_split_4244;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(in_$p1, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_4243;

  $bb104:
    assume {:verifier.code 0} true;
    out_$i119 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4242;

  $bb103:
    assume !(out_$i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    out_$p117 := out_$p20;
    assume true;
    goto $bb103;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    out_$i116 := $ne.i32(out_$i115, 0);
    goto corral_source_split_4078;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} out_$i115 := match_int(out_$p114, in_$p5);
    call {:si_unique_call 876} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i115);
    goto corral_source_split_4077;

  $bb35:
    assume {:verifier.code 0} true;
    out_$p114 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4076;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb33:
    assume out_$i36 == 1;
    goto corral_source_split_4074;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i35, 32);
    goto corral_source_split_4072;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4071;

  $bb30:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb112:
    assume !(out_$i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    goto $bb113;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, out_$p143, out_$i140);
    goto corral_source_split_4273;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref($add.ref(out_$p142, $mul.ref(0, 3816)), $mul.ref(816, 1));
    goto corral_source_split_4272;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    out_$p142 := $load.ref($M.1, out_$p141);
    goto corral_source_split_4271;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref($add.ref(in_$p1, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_4270;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    out_$i140 := $trunc.i32.i16(out_$i139);
    goto corral_source_split_4269;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    out_$i139 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4268;

  $bb111:
    assume out_$i138 == 1;
    goto corral_source_split_4267;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    out_$i138 := $eq.i32(out_$i137, 0);
    goto corral_source_split_4265;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    out_$i137 := $and.i32(out_$i24, 64);
    goto corral_source_split_4264;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p136, out_$i135);
    goto corral_source_split_4263;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    out_$p136 := $add.ref($add.ref(in_$p1, $mul.ref(0, 464)), $mul.ref(232, 1));
    goto corral_source_split_4262;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    out_$i135 := $add.i32(out_$i134, 2);
    goto corral_source_split_4261;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    out_$i134 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4260;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p133, out_$i130);
    goto corral_source_split_4259;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref($add.ref(out_$p132, $mul.ref(0, 3816)), $mul.ref(812, 1));
    goto corral_source_split_4258;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    out_$p132 := $load.ref($M.1, out_$p131);
    goto corral_source_split_4257;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref(in_$p1, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_4256;

  $bb110:
    assume {:verifier.code 0} true;
    out_$i130 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4255;

  $bb109:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    out_$p126 := out_$p20;
    assume true;
    goto $bb109;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    out_$i128 := $sle.i32(out_$i127, 0);
    goto corral_source_split_4253;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    out_$i127 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4252;

  $bb107:
    assume !(out_$i125 == 1);
    goto corral_source_split_4251;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    out_$p126 := out_$p20;
    assume true;
    goto $bb107;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    out_$i125 := $ne.i32(out_$i124, 0);
    goto corral_source_split_4087;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} out_$i124 := match_int(out_$p123, in_$p5);
    call {:si_unique_call 878} {:cexpr "tmp___10"} boogie_si_record_i32(out_$i124);
    goto corral_source_split_4086;

  $bb39:
    assume {:verifier.code 0} true;
    out_$p123 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4085;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb37:
    assume out_$i38 == 1;
    goto corral_source_split_4083;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i37, 16384);
    goto corral_source_split_4081;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4080;

  $bb34:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, out_$p155, out_$i152);
    goto corral_source_split_4287;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref(out_$p154, $mul.ref(0, 3816)), $mul.ref(816, 1));
    goto corral_source_split_4286;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    out_$p154 := $load.ref($M.1, out_$p153);
    goto corral_source_split_4285;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    out_$p153 := $add.ref($add.ref(in_$p1, $mul.ref(0, 464)), $mul.ref(176, 1));
    goto corral_source_split_4284;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    out_$i152 := $trunc.i32.i16(out_$i151);
    goto corral_source_split_4283;

  $bb119:
    assume {:verifier.code 0} true;
    out_$i151 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4282;

  $bb118:
    assume !(out_$i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    out_$p147 := out_$p20;
    assume true;
    goto $bb118;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    out_$i149 := $sle.i32(out_$i148, 0);
    goto corral_source_split_4280;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    out_$i148 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4279;

  $bb116:
    assume !(out_$i146 == 1);
    goto corral_source_split_4278;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    out_$p147 := out_$p20;
    assume true;
    goto $bb116;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    out_$i146 := $ne.i32(out_$i145, 0);
    goto corral_source_split_4096;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} out_$i145 := match_int(out_$p144, in_$p5);
    call {:si_unique_call 880} {:cexpr "tmp___11"} boogie_si_record_i32(out_$i145);
    goto corral_source_split_4095;

  $bb43:
    assume {:verifier.code 0} true;
    out_$p144 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4094;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb41:
    assume out_$i40 == 1;
    goto corral_source_split_4092;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i39, 64);
    goto corral_source_split_4090;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4089;

  $bb38:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, out_$p169, out_$i168);
    goto corral_source_split_4306;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    out_$p169 := $add.ref($add.ref(in_$p1, $mul.ref(0, 464)), $mul.ref(160, 1));
    goto corral_source_split_4305;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    out_$i168 := $trunc.i32.i16(out_$i167);
    goto corral_source_split_4304;

  $bb128:
    assume {:verifier.code 0} true;
    out_$i167 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4303;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb124:
    assume {:verifier.code 0} true;
    assume !(out_$i162 == 1);
    goto $bb125;

  $bb127:
    assume {:verifier.code 0} true;
    assume !(out_$i164 == 1);
    goto $bb125;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    out_$i164 := $ne.i32(out_$i163, 256);
    goto corral_source_split_4297;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    out_$i163 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4296;

  $bb123:
    assume out_$i162 == 1;
    goto corral_source_split_4295;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    out_$i162 := $ne.i32(out_$i161, 65280);
    goto corral_source_split_4293;

  $bb122:
    assume {:verifier.code 0} true;
    out_$i161 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4292;

  $bb121:
    assume !(out_$i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    out_$p159 := out_$p20;
    assume true;
    goto $bb121;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    out_$i158 := $ne.i32(out_$i157, 0);
    goto corral_source_split_4105;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} out_$i157 := match_hex(out_$p156, in_$p5);
    call {:si_unique_call 882} {:cexpr "tmp___12"} boogie_si_record_i32(out_$i157);
    goto corral_source_split_4104;

  $bb47:
    assume {:verifier.code 0} true;
    out_$p156 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4103;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb45:
    assume out_$i42 == 1;
    goto corral_source_split_4101;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i41, 128);
    goto corral_source_split_4099;

  $bb44:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4098;

  $bb42:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} kfree(out_$p171);
    goto corral_source_split_4314;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, out_$p176, out_$i175);
    goto corral_source_split_4313;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    out_$p176 := $add.ref($add.ref(in_$p1, $mul.ref(0, 464)), $mul.ref(152, 1));
    goto corral_source_split_4312;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} out_$i175 := __fswab64(out_$i174);
    call {:si_unique_call 933} {:cexpr "tmp___14"} boogie_si_record_i64(out_$i175);
    goto corral_source_split_4311;

  $bb131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} out_$i174 := simple_strtoull(out_$p171, $0.ref, 16);
    call {:si_unique_call 931} {:cexpr "tmp___13"} boogie_si_record_i64(out_$i174);
    goto corral_source_split_4310;

  $bb130:
    assume !(out_$i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    out_$i173 := $eq.i64(out_$i172, 0);
    goto corral_source_split_4115;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    out_$i172 := $p2i.ref.i64(out_$p171);
    goto corral_source_split_4114;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} out_$p171 := match_strdup(out_$p170);
    goto corral_source_split_4113;

  $bb51:
    assume {:verifier.code 0} true;
    out_$p170 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4112;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb49:
    assume out_$i44 == 1;
    goto corral_source_split_4110;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i43, 256);
    goto corral_source_split_4108;

  $bb48:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4107;

  $bb46:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p187, out_$i186);
    goto corral_source_split_4329;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    out_$p187 := $add.ref($add.ref(in_$p1, $mul.ref(0, 464)), $mul.ref(100, 1));
    goto corral_source_split_4328;

  $bb139:
    assume {:verifier.code 0} true;
    out_$i186 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4327;

  $bb138:
    assume !(out_$i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    out_$p180 := out_$p20;
    assume true;
    goto $bb138;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    out_$i184 := $sgt.i32(out_$i183, 255);
    goto corral_source_split_4325;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    out_$i183 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4324;

  $bb136:
    assume !(out_$i182 == 1);
    goto corral_source_split_4323;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    out_$p180 := out_$p20;
    assume true;
    goto $bb136;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    out_$i182 := $sle.i32(out_$i181, 0);
    goto corral_source_split_4321;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    out_$i181 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4320;

  $bb134:
    assume !(out_$i179 == 1);
    goto corral_source_split_4319;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    out_$p180 := out_$p20;
    assume true;
    goto $bb134;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    out_$i179 := $ne.i32(out_$i178, 0);
    goto corral_source_split_4124;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} out_$i178 := match_int(out_$p177, in_$p5);
    call {:si_unique_call 885} {:cexpr "tmp___15"} boogie_si_record_i32(out_$i178);
    goto corral_source_split_4123;

  $bb55:
    assume {:verifier.code 0} true;
    out_$p177 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4122;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb53:
    assume out_$i46 == 1;
    goto corral_source_split_4120;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i45, 512);
    goto corral_source_split_4118;

  $bb52:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4117;

  $bb50:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p195, out_$i196);
    goto corral_source_split_4338;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    out_$i196 := $zext.i1.i8(out_$i194);
    goto corral_source_split_4337;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    out_$p195 := $add.ref($add.ref(in_$p1, $mul.ref(0, 464)), $mul.ref(108, 1));
    goto corral_source_split_4336;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    out_$i194 := $ne.i32(out_$i193, 0);
    goto corral_source_split_4335;

  $bb142:
    assume {:verifier.code 0} true;
    out_$i193 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4334;

  $bb141:
    assume !(out_$i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    out_$p191 := out_$p20;
    assume true;
    goto $bb141;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    out_$i190 := $ne.i32(out_$i189, 0);
    goto corral_source_split_4133;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} out_$i189 := match_int(out_$p188, in_$p5);
    call {:si_unique_call 887} {:cexpr "tmp___16"} boogie_si_record_i32(out_$i189);
    goto corral_source_split_4132;

  $bb59:
    assume {:verifier.code 0} true;
    out_$p188 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4131;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb57:
    assume out_$i48 == 1;
    goto corral_source_split_4129;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i47, 1024);
    goto corral_source_split_4127;

  $bb56:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4126;

  $bb54:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p207, out_$i206);
    goto corral_source_split_4353;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    out_$p207 := $add.ref($add.ref(in_$p1, $mul.ref(0, 464)), $mul.ref(228, 1));
    goto corral_source_split_4352;

  $bb150:
    assume {:verifier.code 0} true;
    out_$i206 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4351;

  $bb149:
    assume !(out_$i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    out_$p200 := out_$p20;
    assume true;
    goto $bb149;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    out_$i204 := $sgt.i32(out_$i203, 2048);
    goto corral_source_split_4349;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    out_$i203 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4348;

  $bb147:
    assume !(out_$i202 == 1);
    goto corral_source_split_4347;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    out_$p200 := out_$p20;
    assume true;
    goto $bb147;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    out_$i202 := $sle.i32(out_$i201, 0);
    goto corral_source_split_4345;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    out_$i201 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4344;

  $bb145:
    assume !(out_$i199 == 1);
    goto corral_source_split_4343;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    out_$p200 := out_$p20;
    assume true;
    goto $bb145;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    out_$i199 := $ne.i32(out_$i198, 0);
    goto corral_source_split_4142;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} out_$i198 := match_int(out_$p197, in_$p5);
    call {:si_unique_call 889} {:cexpr "tmp___17"} boogie_si_record_i32(out_$i198);
    goto corral_source_split_4141;

  $bb63:
    assume {:verifier.code 0} true;
    out_$p197 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4140;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb61:
    assume out_$i50 == 1;
    goto corral_source_split_4138;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i49, 2048);
    goto corral_source_split_4136;

  $bb60:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4135;

  $bb58:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p216, out_$i215);
    goto corral_source_split_4364;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    out_$p216 := $add.ref($add.ref(in_$p1, $mul.ref(0, 464)), $mul.ref(240, 1));
    goto corral_source_split_4363;

  $bb156:
    assume {:verifier.code 0} true;
    out_$i215 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4362;

  $bb155:
    assume !(out_$i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    out_$p211 := out_$p20;
    assume true;
    goto $bb155;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    out_$i213 := $slt.i32(out_$i212, 0);
    goto corral_source_split_4360;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    out_$i212 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4359;

  $bb153:
    assume !(out_$i210 == 1);
    goto corral_source_split_4358;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    out_$p211 := out_$p20;
    assume true;
    goto $bb153;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    out_$i210 := $ne.i32(out_$i209, 0);
    goto corral_source_split_4151;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} out_$i209 := match_int(out_$p208, in_$p5);
    call {:si_unique_call 891} {:cexpr "tmp___18"} boogie_si_record_i32(out_$i209);
    goto corral_source_split_4150;

  $bb67:
    assume {:verifier.code 0} true;
    out_$p208 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4149;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb65:
    assume out_$i52 == 1;
    goto corral_source_split_4147;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i51, 4096);
    goto corral_source_split_4145;

  $bb64:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4144;

  $bb62:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p227, out_$i226);
    goto corral_source_split_4379;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    out_$p227 := $add.ref($add.ref(in_$p1, $mul.ref(0, 464)), $mul.ref(244, 1));
    goto corral_source_split_4378;

  $bb164:
    assume {:verifier.code 0} true;
    out_$i226 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4377;

  $bb163:
    assume !(out_$i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    out_$p220 := out_$p20;
    assume true;
    goto $bb163;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    out_$i224 := $sgt.i32(out_$i223, 7);
    goto corral_source_split_4375;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    out_$i223 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4374;

  $bb161:
    assume !(out_$i222 == 1);
    goto corral_source_split_4373;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    out_$p220 := out_$p20;
    assume true;
    goto $bb161;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    out_$i222 := $sle.i32(out_$i221, 1);
    goto corral_source_split_4371;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    out_$i221 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4370;

  $bb159:
    assume !(out_$i219 == 1);
    goto corral_source_split_4369;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    out_$p220 := out_$p20;
    assume true;
    goto $bb159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    out_$i219 := $ne.i32(out_$i218, 0);
    goto corral_source_split_4160;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} out_$i218 := match_int(out_$p217, in_$p5);
    call {:si_unique_call 893} {:cexpr "tmp___19"} boogie_si_record_i32(out_$i218);
    goto corral_source_split_4159;

  $bb71:
    assume {:verifier.code 0} true;
    out_$p217 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4158;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb69:
    assume out_$i54 == 1;
    goto corral_source_split_4156;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    out_$p55 := out_$p20;
    assume true;
    goto $bb69;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i53, 8192);
    goto corral_source_split_4154;

  $bb68:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.64, in_$p5);
    goto corral_source_split_4153;

  $bb66:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb166_dummy:
    call {:si_unique_call 1} out_$i16, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$p80, out_$i81, out_$i82, out_$p83, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$p90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$i79, out_$p96, out_$i97, out_$i98, out_$p99, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$p114, out_$i115, out_$i116, out_$p117, out_$i119, out_$p120, out_$p121, out_$p122, out_$p123, out_$i124, out_$i125, out_$i127, out_$i128, out_$p126, out_$i130, out_$p131, out_$p132, out_$p133, out_$i134, out_$i135, out_$p136, out_$i137, out_$i138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p143, out_$p144, out_$i145, out_$i146, out_$i148, out_$i149, out_$p147, out_$i151, out_$i152, out_$p153, out_$p154, out_$p155, out_$p156, out_$i157, out_$i158, out_$p159, out_$i161, out_$i162, out_$i163, out_$i164, out_$i167, out_$i168, out_$p169, out_$p170, out_$p171, out_$i172, out_$i173, out_$i174, out_$i175, out_$p176, out_$p177, out_$i178, out_$i179, out_$i181, out_$i182, out_$i183, out_$i184, out_$p180, out_$i186, out_$p187, out_$p188, out_$i189, out_$i190, out_$p191, out_$i193, out_$i194, out_$p195, out_$i196, out_$p197, out_$i198, out_$i199, out_$i201, out_$i202, out_$i203, out_$i204, out_$p200, out_$i206, out_$p207, out_$p208, out_$i209, out_$i210, out_$i212, out_$i213, out_$p211, out_$i215, out_$p216, out_$p217, out_$i218, out_$i219, out_$i221, out_$i222, out_$i223, out_$i224, out_$p220, out_$i226, out_$p227, out_$p229, out_$i230, out_$i231, out_$p14, out_$i15, out_$p233, out_$i234, out_$i235, out_$p17, out_$i232, out_$i236, out_vslice_dummy_var_104 := srp_parse_options_loop_$bb8(in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, out_$i16, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$p80, out_$i81, out_$i82, out_$p83, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$p90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$i79, out_$p96, out_$i97, out_$i98, out_$p99, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$p114, out_$i115, out_$i116, out_$p117, out_$i119, out_$p120, out_$p121, out_$p122, out_$p123, out_$i124, out_$i125, out_$i127, out_$i128, out_$p126, out_$i130, out_$p131, out_$p132, out_$p133, out_$i134, out_$i135, out_$p136, out_$i137, out_$i138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p143, out_$p144, out_$i145, out_$i146, out_$i148, out_$i149, out_$p147, out_$i151, out_$i152, out_$p153, out_$p154, out_$p155, out_$p156, out_$i157, out_$i158, out_$p159, out_$i161, out_$i162, out_$i163, out_$i164, out_$i167, out_$i168, out_$p169, out_$p170, out_$p171, out_$i172, out_$i173, out_$i174, out_$i175, out_$p176, out_$p177, out_$i178, out_$i179, out_$i181, out_$i182, out_$i183, out_$i184, out_$p180, out_$i186, out_$p187, out_$p188, out_$i189, out_$i190, out_$p191, out_$i193, out_$i194, out_$p195, out_$i196, out_$p197, out_$i198, out_$i199, out_$i201, out_$i202, out_$i203, out_$i204, out_$p200, out_$i206, out_$p207, out_$p208, out_$i209, out_$i210, out_$i212, out_$i213, out_$p211, out_$i215, out_$p216, out_$p217, out_$i218, out_$i219, out_$i221, out_$i222, out_$i223, out_$i224, out_$p220, out_$i226, out_$p227, out_$p229, out_$i230, out_$i231, out_$p14, out_$i15, out_$p233, out_$i234, out_$i235, out_$p17, out_$i232, out_$i236, out_vslice_dummy_var_104);
    return;

  exit:
    return;
}



procedure srp_parse_options_loop_$bb8(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$i16: i8, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$i59: i1, in_$i61: i64, in_$i62: i64, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$i66: i64, in_$i67: i1, in_$i68: i64, in_$i69: i64, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$i74: i1, in_$i75: i64, in_$i76: i1, in_$p77: ref, in_$p80: ref, in_$i81: i32, in_$i82: i64, in_$p83: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$p90: ref, in_$i91: i32, in_$i92: i1, in_$p93: ref, in_$i94: i32, in_$i95: i1, in_$i79: i32, in_$p96: ref, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$i101: i32, in_$i102: i16, in_$i103: i32, in_$i104: i16, in_$i105: i16, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$i109: i64, in_$i110: i1, in_$i111: i64, in_$i112: i64, in_$p113: ref, in_$p114: ref, in_$i115: i32, in_$i116: i1, in_$p117: ref, in_$i119: i32, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$i124: i32, in_$i125: i1, in_$i127: i32, in_$i128: i1, in_$p126: ref, in_$i130: i32, in_$p131: ref, in_$p132: ref, in_$p133: ref, in_$i134: i32, in_$i135: i32, in_$p136: ref, in_$i137: i32, in_$i138: i1, in_$i139: i32, in_$i140: i16, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$i145: i32, in_$i146: i1, in_$i148: i32, in_$i149: i1, in_$p147: ref, in_$i151: i32, in_$i152: i16, in_$p153: ref, in_$p154: ref, in_$p155: ref, in_$p156: ref, in_$i157: i32, in_$i158: i1, in_$p159: ref, in_$i161: i32, in_$i162: i1, in_$i163: i32, in_$i164: i1, in_$i167: i32, in_$i168: i16, in_$p169: ref, in_$p170: ref, in_$p171: ref, in_$i172: i64, in_$i173: i1, in_$i174: i64, in_$i175: i64, in_$p176: ref, in_$p177: ref, in_$i178: i32, in_$i179: i1, in_$i181: i32, in_$i182: i1, in_$i183: i32, in_$i184: i1, in_$p180: ref, in_$i186: i32, in_$p187: ref, in_$p188: ref, in_$i189: i32, in_$i190: i1, in_$p191: ref, in_$i193: i32, in_$i194: i1, in_$p195: ref, in_$i196: i8, in_$p197: ref, in_$i198: i32, in_$i199: i1, in_$i201: i32, in_$i202: i1, in_$i203: i32, in_$i204: i1, in_$p200: ref, in_$i206: i32, in_$p207: ref, in_$p208: ref, in_$i209: i32, in_$i210: i1, in_$i212: i32, in_$i213: i1, in_$p211: ref, in_$i215: i32, in_$p216: ref, in_$p217: ref, in_$i218: i32, in_$i219: i1, in_$i221: i32, in_$i222: i1, in_$i223: i32, in_$i224: i1, in_$p220: ref, in_$i226: i32, in_$p227: ref, in_$p229: ref, in_$i230: i64, in_$i231: i1, in_$p14: ref, in_$i15: i32, in_$p233: ref, in_$i234: i64, in_$i235: i1, in_$p17: ref, in_$i232: i32, in_$i236: i32, in_vslice_dummy_var_104: i64) returns (out_$i16: i8, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$i59: i1, out_$i61: i64, out_$i62: i64, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$i66: i64, out_$i67: i1, out_$i68: i64, out_$i69: i64, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$i74: i1, out_$i75: i64, out_$i76: i1, out_$p77: ref, out_$p80: ref, out_$i81: i32, out_$i82: i64, out_$p83: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$p90: ref, out_$i91: i32, out_$i92: i1, out_$p93: ref, out_$i94: i32, out_$i95: i1, out_$i79: i32, out_$p96: ref, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$i101: i32, out_$i102: i16, out_$i103: i32, out_$i104: i16, out_$i105: i16, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$i109: i64, out_$i110: i1, out_$i111: i64, out_$i112: i64, out_$p113: ref, out_$p114: ref, out_$i115: i32, out_$i116: i1, out_$p117: ref, out_$i119: i32, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$i124: i32, out_$i125: i1, out_$i127: i32, out_$i128: i1, out_$p126: ref, out_$i130: i32, out_$p131: ref, out_$p132: ref, out_$p133: ref, out_$i134: i32, out_$i135: i32, out_$p136: ref, out_$i137: i32, out_$i138: i1, out_$i139: i32, out_$i140: i16, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$i145: i32, out_$i146: i1, out_$i148: i32, out_$i149: i1, out_$p147: ref, out_$i151: i32, out_$i152: i16, out_$p153: ref, out_$p154: ref, out_$p155: ref, out_$p156: ref, out_$i157: i32, out_$i158: i1, out_$p159: ref, out_$i161: i32, out_$i162: i1, out_$i163: i32, out_$i164: i1, out_$i167: i32, out_$i168: i16, out_$p169: ref, out_$p170: ref, out_$p171: ref, out_$i172: i64, out_$i173: i1, out_$i174: i64, out_$i175: i64, out_$p176: ref, out_$p177: ref, out_$i178: i32, out_$i179: i1, out_$i181: i32, out_$i182: i1, out_$i183: i32, out_$i184: i1, out_$p180: ref, out_$i186: i32, out_$p187: ref, out_$p188: ref, out_$i189: i32, out_$i190: i1, out_$p191: ref, out_$i193: i32, out_$i194: i1, out_$p195: ref, out_$i196: i8, out_$p197: ref, out_$i198: i32, out_$i199: i1, out_$i201: i32, out_$i202: i1, out_$i203: i32, out_$i204: i1, out_$p200: ref, out_$i206: i32, out_$p207: ref, out_$p208: ref, out_$i209: i32, out_$i210: i1, out_$i212: i32, out_$i213: i1, out_$p211: ref, out_$i215: i32, out_$p216: ref, out_$p217: ref, out_$i218: i32, out_$i219: i1, out_$i221: i32, out_$i222: i1, out_$i223: i32, out_$i224: i1, out_$p220: ref, out_$i226: i32, out_$p227: ref, out_$p229: ref, out_$i230: i64, out_$i231: i1, out_$p14: ref, out_$i15: i32, out_$p233: ref, out_$i234: i64, out_$i235: i1, out_$p17: ref, out_$i232: i32, out_$i236: i32, out_vslice_dummy_var_104: i64);
  modifies $M.1, $M.64;



implementation srp_conn_unique_loop_$bb8(in_$p1: ref, in_$i15: i64, in_$i18: i64, in_$i19: i64, in_$i20: i1, in_$p21: ref, in_$i22: i64, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$i27: i64, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p17: ref) returns (out_$i18: i64, out_$i19: i64, out_$i20: i1, out_$p21: ref, out_$i22: i64, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$i27: i64, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p17: ref)
{

  entry:
    out_$i18, out_$i19, out_$i20, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p17 := in_$i18, in_$i19, in_$i20, in_$p21, in_$i22, in_$p23, in_$i24, in_$i25, in_$p26, in_$i27, in_$p28, in_$i29, in_$i30, in_$p31, in_$i32, in_$p33, in_$i34, in_$i35, in_$p38, in_$p39, in_$p40, in_$p41, in_$p42, in_$i43, in_$i44, in_$p17;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4588;

  $bb21:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$p17 := out_$p41;
    goto $bb21_dummy;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i64(out_$i43, in_$i15);
    goto corral_source_split_4627;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    out_$i43 := $p2i.ref.i64(out_$p42);
    goto corral_source_split_4626;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p40, $mul.ref($sub.ref(0, 440), 464)), $mul.ref(440, 1));
    goto corral_source_split_4625;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref(out_$p40, $mul.ref($sub.ref(0, 440), 464));
    goto corral_source_split_4624;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    out_$p40 := $bitcast.ref.ref(out_$p39);
    goto corral_source_split_4623;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.1, out_$p38);
    goto corral_source_split_4622;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 464)), $mul.ref(440, 1)), $mul.ref(0, 1));
    goto corral_source_split_4621;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb11:
    assume {:verifier.code 0} true;
    assume !(out_$i20 == 1);
    goto $bb12;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i25 == 1);
    goto $bb12;

  $bb16:
    assume {:verifier.code 0} true;
    assume !(out_$i30 == 1);
    goto $bb12;

  $bb18:
    assume {:verifier.code 0} true;
    assume !(out_$i35 == 1);
    goto $bb12;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i64(out_$i32, out_$i34);
    goto corral_source_split_4613;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i64($M.1, out_$p33);
    goto corral_source_split_4612;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p17, $mul.ref(0, 464)), $mul.ref(152, 1));
    goto corral_source_split_4611;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i64($M.1, out_$p31);
    goto corral_source_split_4610;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p1, $mul.ref(0, 464)), $mul.ref(152, 1));
    goto corral_source_split_4609;

  $bb15:
    assume out_$i30 == 1;
    goto corral_source_split_4608;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i64(out_$i27, out_$i29);
    goto corral_source_split_4606;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i64($M.1, out_$p28);
    goto corral_source_split_4605;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p17, $mul.ref(0, 464)), $mul.ref(136, 1));
    goto corral_source_split_4604;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i64($M.1, out_$p26);
    goto corral_source_split_4603;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p1, $mul.ref(0, 464)), $mul.ref(136, 1));
    goto corral_source_split_4602;

  $bb13:
    assume out_$i25 == 1;
    goto corral_source_split_4601;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i64(out_$i22, out_$i24);
    goto corral_source_split_4599;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i64($M.1, out_$p23);
    goto corral_source_split_4598;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p17, $mul.ref(0, 464)), $mul.ref(128, 1));
    goto corral_source_split_4597;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i64($M.1, out_$p21);
    goto corral_source_split_4596;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p1, $mul.ref(0, 464)), $mul.ref(128, 1));
    goto corral_source_split_4595;

  $bb10:
    assume out_$i20 == 1;
    goto corral_source_split_4594;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i64(out_$i18, out_$i19);
    goto corral_source_split_4592;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_4591;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i18 := $p2i.ref.i64(out_$p17);
    goto corral_source_split_4590;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb21_dummy:
    call {:si_unique_call 1} out_$i18, out_$i19, out_$i20, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p17 := srp_conn_unique_loop_$bb8(in_$p1, in_$i15, out_$i18, out_$i19, out_$i20, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p17);
    return;

  exit:
    return;
}



procedure srp_conn_unique_loop_$bb8(in_$p1: ref, in_$i15: i64, in_$i18: i64, in_$i19: i64, in_$i20: i1, in_$p21: ref, in_$i22: i64, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$i27: i64, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p17: ref) returns (out_$i18: i64, out_$i19: i64, out_$i20: i1, out_$p21: ref, out_$i22: i64, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$i27: i64, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p17: ref);



implementation srp_alloc_req_data_loop_$bb8(in_$p0: ref, in_$p2: ref, in_$p6: ref, in_$p8: ref, in_$p20: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p28: ref, in_$i29: i32, in_$i30: i64, in_$i31: i64, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p35: ref, in_$i36: i8, in_$i37: i1, in_$p39: ref, in_$p40: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i64, in_$i47: i64, in_$p48: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p55: ref, in_$i56: i32, in_$i57: i64, in_$p58: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i32, in_$i70: i64, in_$i71: i64, in_$i72: i32, in_$i73: i1, in_$p74: ref, in_$i75: i32, in_$i76: i32, in_$i77: i1, in_$i23: i32) returns (out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$p28: ref, out_$i29: i32, out_$i30: i64, out_$i31: i64, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p35: ref, out_$i36: i8, out_$i37: i1, out_$p39: ref, out_$p40: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i64, out_$i47: i64, out_$p48: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p55: ref, out_$i56: i32, out_$i57: i64, out_$p58: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i32, out_$i70: i64, out_$i71: i64, out_$i72: i32, out_$i73: i1, out_$p74: ref, out_$i75: i32, out_$i76: i32, out_$i77: i1, out_$i23: i32)
{

  entry:
    out_$p24, out_$p25, out_$i26, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p39, out_$p40, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i23 := in_$p24, in_$p25, in_$i26, in_$p28, in_$i29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$p35, in_$i36, in_$i37, in_$p39, in_$p40, in_$p42, in_$p43, in_$p44, in_$i45, in_$i46, in_$i47, in_$p48, in_$p50, in_$p51, in_$p52, in_$i53, in_$i54, in_$p55, in_$i56, in_$i57, in_$p58, in_$p60, in_$p61, in_$p62, in_$i63, in_$i64, in_$p65, in_$p66, in_$p67, in_$p68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$p74, in_$i75, in_$i76, in_$i77, in_$i23;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4748;

  $bb25:
    assume out_$i77 == 1;
    assume {:verifier.code 0} true;
    out_$i23 := out_$i75;
    goto $bb25_dummy;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    out_$i77 := $slt.i32(out_$i75, out_$i76);
    goto corral_source_split_4824;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i32($M.1, in_$p20);
    goto corral_source_split_4823;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    out_$i75 := $add.i32(out_$i23, 1);
    call {:si_unique_call 1000} {:cexpr "i"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_4822;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, out_$p74, out_$i71);
    goto corral_source_split_4821;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p25, $mul.ref(out_$i26, 56)), $mul.ref(40, 1));
    goto corral_source_split_4820;

  $bb23:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i32(out_$i72, 0);
    goto corral_source_split_4816;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} out_$i72 := ib_dma_mapping_error(in_$p8, out_$i71);
    call {:si_unique_call 999} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_4815;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} out_$i71 := ib_dma_map_single(in_$p8, out_$p67, out_$i70, 1);
    call {:si_unique_call 997} {:cexpr "dma_addr"} boogie_si_record_i64(out_$i71);
    goto corral_source_split_4814;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    out_$i70 := $zext.i32.i64(out_$i69);
    goto corral_source_split_4813;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i32($M.1, out_$p68);
    goto corral_source_split_4812;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p2, $mul.ref(0, 464)), $mul.ref(104, 1));
    goto corral_source_split_4811;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    out_$p67 := $bitcast.ref.ref(out_$p66);
    goto corral_source_split_4810;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.1, out_$p65);
    goto corral_source_split_4809;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p25, $mul.ref(out_$i26, 56)), $mul.ref(32, 1));
    goto corral_source_split_4808;

  $bb20:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    out_$i64 := $eq.i64(out_$i63, 0);
    goto corral_source_split_4804;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    out_$i63 := $p2i.ref.i64(out_$p62);
    goto corral_source_split_4803;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.1, out_$p61);
    goto corral_source_split_4802;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p25, $mul.ref(out_$i26, 56)), $mul.ref(32, 1));
    goto corral_source_split_4801;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p60, out_$p58);
    goto corral_source_split_4800;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p25, $mul.ref(out_$i26, 56)), $mul.ref(32, 1));
    goto corral_source_split_4799;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    goto corral_source_split_4798;

  SeqInstr_324:
    goto corral_source_split_4797;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} out_$p58 := kmalloc(out_$i57, 208);
    goto SeqInstr_323;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    out_$i57 := $zext.i32.i64(out_$i56);
    goto corral_source_split_4796;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i32($M.1, out_$p55);
    goto corral_source_split_4795;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p2, $mul.ref(0, 464)), $mul.ref(104, 1));
    goto corral_source_split_4794;

  $bb17:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i64(out_$i53, 0);
    goto corral_source_split_4790;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    out_$i53 := $p2i.ref.i64(out_$p52);
    goto corral_source_split_4789;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.1, out_$p51);
    goto corral_source_split_4788;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p25, $mul.ref(out_$i26, 56)), $mul.ref(24, 1));
    goto corral_source_split_4787;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p50, out_$p48);
    goto corral_source_split_4786;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p25, $mul.ref(out_$i26, 56)), $mul.ref(24, 1));
    goto corral_source_split_4785;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    goto corral_source_split_4784;

  SeqInstr_321:
    goto corral_source_split_4783;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} out_$p48 := kmalloc(out_$i47, 208);
    goto SeqInstr_320;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    out_$i47 := $mul.i64(out_$i46, 8);
    goto corral_source_split_4782;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    out_$i46 := $sext.i32.i64(out_$i45);
    goto corral_source_split_4781;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.1, out_$p44);
    goto corral_source_split_4780;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p6, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_4779;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p43, out_$p32);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p40, out_$p32);
    goto corral_source_split_4772;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    out_$p40 := $bitcast.ref.ref(out_$p39);
    goto corral_source_split_4771;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p25, $mul.ref(out_$i26, 56)), $mul.ref(16, 1));
    goto corral_source_split_4770;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    goto corral_source_split_4769;

  $bb13:
    assume out_$i37 == 1;
    goto corral_source_split_4768;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    out_$i37 := $trunc.i8.i1(out_$i36);
    goto corral_source_split_4766;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i8($M.1, out_$p35);
    goto corral_source_split_4765;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p6, $mul.ref(0, 64)), $mul.ref(62, 1));
    goto corral_source_split_4764;

  $bb11:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i64(out_$i33, 0);
    goto corral_source_split_4760;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(out_$p32);
    goto corral_source_split_4759;

  SeqInstr_318:
    goto corral_source_split_4758;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} out_$p32 := kmalloc(out_$i31, 208);
    goto SeqInstr_317;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    out_$i31 := $mul.i64(out_$i30, 8);
    goto corral_source_split_4757;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    out_$i30 := $zext.i32.i64(out_$i29);
    goto corral_source_split_4756;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.1, out_$p28);
    goto corral_source_split_4755;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p2, $mul.ref(0, 464)), $mul.ref(100, 1));
    goto corral_source_split_4754;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    goto corral_source_split_4753;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i23);
    goto corral_source_split_4752;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.1, out_$p24);
    goto corral_source_split_4751;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p0, $mul.ref(0, 488)), $mul.ref(368, 1));
    goto corral_source_split_4750;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    out_$p43 := $bitcast.ref.ref(out_$p42);
    goto corral_source_split_4777;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p25, $mul.ref(out_$i26, 56)), $mul.ref(16, 1));
    goto corral_source_split_4776;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    goto corral_source_split_4775;

  $bb14:
    assume !(out_$i37 == 1);
    goto corral_source_split_4774;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p24, out_$p25, out_$i26, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p39, out_$p40, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i23 := srp_alloc_req_data_loop_$bb8(in_$p0, in_$p2, in_$p6, in_$p8, in_$p20, out_$p24, out_$p25, out_$i26, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p39, out_$p40, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i23);
    return;

  exit:
    return;
}



procedure srp_alloc_req_data_loop_$bb8(in_$p0: ref, in_$p2: ref, in_$p6: ref, in_$p8: ref, in_$p20: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p28: ref, in_$i29: i32, in_$i30: i64, in_$i31: i64, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p35: ref, in_$i36: i8, in_$i37: i1, in_$p39: ref, in_$p40: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i64, in_$i47: i64, in_$p48: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p55: ref, in_$i56: i32, in_$i57: i64, in_$p58: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i32, in_$i70: i64, in_$i71: i64, in_$i72: i32, in_$i73: i1, in_$p74: ref, in_$i75: i32, in_$i76: i32, in_$i77: i1, in_$i23: i32) returns (out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$p28: ref, out_$i29: i32, out_$i30: i64, out_$i31: i64, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p35: ref, out_$i36: i8, out_$i37: i1, out_$p39: ref, out_$p40: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i64, out_$i47: i64, out_$p48: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p55: ref, out_$i56: i32, out_$i57: i64, out_$p58: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i32, out_$i70: i64, out_$i71: i64, out_$i72: i32, out_$i73: i1, out_$p74: ref, out_$i75: i32, out_$i76: i32, out_$i77: i1, out_$i23: i32);
  modifies $M.1, assertsPassed;



implementation srp_free_ch_ib_loop_$bb36(in_$p0: ref, in_$p1: ref, in_$p76: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$i84: i64, in_$p85: ref, in_$p86: ref, in_$i87: i32, in_$i88: i32, in_$i89: i1, in_$i79: i32) returns (out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$i84: i64, out_$p85: ref, out_$p86: ref, out_$i87: i32, out_$i88: i32, out_$i89: i1, out_$i79: i32)
{

  entry:
    out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$p85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i79 := in_$p80, in_$p81, in_$p82, in_$p83, in_$i84, in_$p85, in_$p86, in_$i87, in_$i88, in_$i89, in_$i79;
    goto $bb36, exit;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_4951;

  $bb38:
    assume out_$i89 == 1;
    assume {:verifier.code 0} true;
    out_$i79 := out_$i87;
    goto $bb38_dummy;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    out_$i89 := $slt.i32(out_$i87, out_$i88);
    goto corral_source_split_4963;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    out_$i88 := $load.i32($M.1, in_$p76);
    goto corral_source_split_4962;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    out_$i87 := $add.i32(out_$i79, 1);
    call {:si_unique_call 1011} {:cexpr "i"} boogie_si_record_i32(out_$i87);
    goto corral_source_split_4961;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} srp_free_iu(out_$p81, out_$p86);
    goto corral_source_split_4960;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    out_$p86 := $load.ref($M.1, out_$p85);
    goto corral_source_split_4959;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref(out_$p83, $mul.ref(out_$i84, 8));
    goto corral_source_split_4958;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    out_$i84 := $sext.i32.i64(out_$i79);
    goto corral_source_split_4957;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    out_$p83 := $load.ref($M.1, out_$p82);
    goto corral_source_split_4956;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p1, $mul.ref(0, 488)), $mul.ref(352, 1));
    goto corral_source_split_4955;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    out_$p81 := $load.ref($M.1, out_$p80);
    goto corral_source_split_4954;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(168, 1));
    goto corral_source_split_4953;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb38_dummy:
    call {:si_unique_call 1} out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$p85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i79 := srp_free_ch_ib_loop_$bb36(in_$p0, in_$p1, in_$p76, out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$p85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i79);
    return;

  exit:
    return;
}



procedure srp_free_ch_ib_loop_$bb36(in_$p0: ref, in_$p1: ref, in_$p76: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$i84: i64, in_$p85: ref, in_$p86: ref, in_$i87: i32, in_$i88: i32, in_$i89: i1, in_$i79: i32) returns (out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$i84: i64, out_$p85: ref, out_$p86: ref, out_$i87: i32, out_$i88: i32, out_$i89: i1, out_$i79: i32);



implementation srp_free_ch_ib_loop_$bb25(in_$p0: ref, in_$p1: ref, in_$p54: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$p63: ref, in_$p64: ref, in_$i65: i32, in_$i66: i32, in_$i67: i1, in_$i57: i32) returns (out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$p63: ref, out_$p64: ref, out_$i65: i32, out_$i66: i32, out_$i67: i1, out_$i57: i32)
{

  entry:
    out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i57 := in_$p58, in_$p59, in_$p60, in_$p61, in_$i62, in_$p63, in_$p64, in_$i65, in_$i66, in_$i67, in_$i57;
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_4916;

  $bb27:
    assume out_$i67 == 1;
    assume {:verifier.code 0} true;
    out_$i57 := out_$i65;
    goto $bb27_dummy;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    out_$i67 := $slt.i32(out_$i65, out_$i66);
    goto corral_source_split_4928;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i32($M.1, in_$p54);
    goto corral_source_split_4927;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    out_$i65 := $add.i32(out_$i57, 1);
    call {:si_unique_call 1008} {:cexpr "i"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_4926;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} srp_free_iu(out_$p59, out_$p64);
    goto corral_source_split_4925;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    out_$p64 := $load.ref($M.1, out_$p63);
    goto corral_source_split_4924;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref(out_$p61, $mul.ref(out_$i62, 8));
    goto corral_source_split_4923;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    out_$i62 := $sext.i32.i64(out_$i57);
    goto corral_source_split_4922;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.1, out_$p60);
    goto corral_source_split_4921;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p1, $mul.ref(0, 488)), $mul.ref(360, 1));
    goto corral_source_split_4920;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.1, out_$p58);
    goto corral_source_split_4919;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(168, 1));
    goto corral_source_split_4918;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb27_dummy:
    call {:si_unique_call 1} out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i57 := srp_free_ch_ib_loop_$bb25(in_$p0, in_$p1, in_$p54, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i57);
    return;

  exit:
    return;
}



procedure srp_free_ch_ib_loop_$bb25(in_$p0: ref, in_$p1: ref, in_$p54: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$p63: ref, in_$p64: ref, in_$i65: i32, in_$i66: i32, in_$i67: i1, in_$i57: i32) returns (out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$p63: ref, out_$p64: ref, out_$i65: i32, out_$i66: i32, out_$i67: i1, out_$i57: i32);



implementation srp_free_req_data_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$p7: ref, in_$p16: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p24: ref, in_$i25: i8, in_$i26: i1, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$p41: ref, in_$i42: i64, in_$p43: ref, in_$i44: i32, in_$i45: i64, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i19: i32) returns (out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p24: ref, out_$i25: i8, out_$i26: i1, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$p41: ref, out_$i42: i64, out_$p43: ref, out_$i44: i32, out_$i45: i64, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i19: i32)
{

  entry:
    out_$p20, out_$p21, out_$i22, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$i42, out_$p43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i19 := in_$p20, in_$p21, in_$i22, in_$p24, in_$i25, in_$i26, in_$p27, in_$p28, in_$p29, in_$p30, in_$p31, in_$p32, in_$p33, in_$p34, in_$p35, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40, in_$p41, in_$i42, in_$p43, in_$i44, in_$i45, in_$p46, in_$p47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i19;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_4998;

  $bb19:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    out_$i19 := out_$i49;
    goto $bb19_dummy;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    out_$i51 := $slt.i32(out_$i49, out_$i50);
    goto corral_source_split_5043;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.1, in_$p16);
    goto corral_source_split_5042;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i32(out_$i19, 1);
    call {:si_unique_call 1018} {:cexpr "i"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_5041;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} kfree(out_$p48);
    goto corral_source_split_5040;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(out_$p47);
    goto corral_source_split_5039;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.1, out_$p46);
    goto corral_source_split_5038;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p21, $mul.ref(out_$i22, 56)), $mul.ref(32, 1));
    goto corral_source_split_5037;

  $bb17:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} ib_dma_unmap_single(in_$p7, out_$i42, out_$i45, 1);
    goto corral_source_split_5035;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i32.i64(out_$i44);
    goto corral_source_split_5034;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.1, out_$p43);
    goto corral_source_split_5033;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(104, 1));
    goto corral_source_split_5032;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i64($M.1, out_$p41);
    goto corral_source_split_5031;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p21, $mul.ref(out_$i22, 56)), $mul.ref(40, 1));
    goto corral_source_split_5030;

  $bb16:
    assume out_$i40 == 1;
    goto corral_source_split_5029;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i64(out_$i39, 0);
    goto corral_source_split_5027;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i64($M.1, out_$p38);
    goto corral_source_split_5026;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p21, $mul.ref(out_$i22, 56)), $mul.ref(40, 1));
    goto corral_source_split_5025;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} kfree(out_$p37);
    goto corral_source_split_5024;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(out_$p36);
    goto corral_source_split_5023;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.1, out_$p35);
    goto corral_source_split_5022;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p21, $mul.ref(out_$i22, 56)), $mul.ref(24, 1));
    goto corral_source_split_5021;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} kfree(out_$p34);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} kfree(out_$p30);
    goto corral_source_split_5013;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(out_$p29);
    goto corral_source_split_5012;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.1, out_$p28);
    goto corral_source_split_5011;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    out_$p28 := $bitcast.ref.ref(out_$p27);
    goto corral_source_split_5010;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p21, $mul.ref(out_$i22, 56)), $mul.ref(16, 1));
    goto corral_source_split_5009;

  $bb13:
    assume out_$i26 == 1;
    goto corral_source_split_5008;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    out_$i26 := $trunc.i8.i1(out_$i25);
    goto corral_source_split_5006;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i8($M.1, out_$p24);
    goto corral_source_split_5005;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p5, $mul.ref(0, 64)), $mul.ref(62, 1));
    goto corral_source_split_5004;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    goto corral_source_split_5003;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i19);
    goto corral_source_split_5002;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.1, out_$p20);
    goto corral_source_split_5001;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p1, $mul.ref(0, 488)), $mul.ref(368, 1));
    goto corral_source_split_5000;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    out_$p34 := $bitcast.ref.ref(out_$p33);
    goto corral_source_split_5019;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.1, out_$p32);
    goto corral_source_split_5018;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    out_$p32 := $bitcast.ref.ref(out_$p31);
    goto corral_source_split_5017;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p21, $mul.ref(out_$i22, 56)), $mul.ref(16, 1));
    goto corral_source_split_5016;

  $bb14:
    assume !(out_$i26 == 1);
    goto corral_source_split_5015;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p20, out_$p21, out_$i22, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$i42, out_$p43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i19 := srp_free_req_data_loop_$bb11(in_$p0, in_$p1, in_$p5, in_$p7, in_$p16, out_$p20, out_$p21, out_$i22, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$i42, out_$p43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i19);
    return;

  exit:
    return;
}



procedure srp_free_req_data_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$p7: ref, in_$p16: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p24: ref, in_$i25: i8, in_$i26: i1, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$p41: ref, in_$i42: i64, in_$p43: ref, in_$i44: i32, in_$i45: i64, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i19: i32) returns (out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p24: ref, out_$i25: i8, out_$i26: i1, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$p41: ref, out_$i42: i64, out_$p43: ref, out_$i44: i32, out_$i45: i64, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i19: i32);



implementation srp_sdev_count_loop_$bb4(in_$p0: ref, in_$i7: i32, in_$p8: ref, in_$i9: i64, in_$i10: i1, in_$i5: i32, in_$p6: ref, in_$i11: i32) returns (out_$i7: i32, out_$p8: ref, out_$i9: i64, out_$i10: i1, out_$i5: i32, out_$p6: ref, out_$i11: i32)
{

  entry:
    out_$i7, out_$p8, out_$i9, out_$i10, out_$i5, out_$p6, out_$i11 := in_$i7, in_$p8, in_$i9, in_$i10, in_$i5, in_$p6, in_$i11;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5255;

  $bb6:
    assume out_$i10 == 1;
    assume {:verifier.code 0} true;
    out_$i5, out_$p6 := out_$i7, out_$p8;
    goto $bb6_dummy;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    out_$i11 := out_$i7;
    assume true;
    goto $bb6;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i64(out_$i9, 0);
    goto corral_source_split_5260;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(out_$p8);
    goto corral_source_split_5259;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} out_$p8 := __scsi_iterate_devices(in_$p0, out_$p6);
    goto corral_source_split_5258;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i7 := $add.i32(out_$i5, 1);
    call {:si_unique_call 1074} {:cexpr "c"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_5257;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i7, out_$p8, out_$i9, out_$i10, out_$i5, out_$p6, out_$i11 := srp_sdev_count_loop_$bb4(in_$p0, out_$i7, out_$p8, out_$i9, out_$i10, out_$i5, out_$p6, out_$i11);
    return;

  exit:
    return;
}



procedure srp_sdev_count_loop_$bb4(in_$p0: ref, in_$i7: i32, in_$p8: ref, in_$i9: i64, in_$i10: i1, in_$i5: i32, in_$p6: ref, in_$i11: i32) returns (out_$i7: i32, out_$p8: ref, out_$i9: i64, out_$i10: i1, out_$i5: i32, out_$p6: ref, out_$i11: i32);



implementation ldv_scsi_host_template_scsi_host_template_instance_2_loop_$bb16(in_$p7: ref, in_$i45: i32, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i32, in_$i54: i1) returns (out_$i45: i32, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i32, out_$i54: i1)
{

  entry:
    out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54 := in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} out_$i45 := ldv_undef_int();
    call {:si_unique_call 1109} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_5387;

  $bb56:
    assume {:verifier.code 0} true;
    assume !(out_$i54 == 1);
    goto $bb56_dummy;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i32(out_$i53, 0);
    goto corral_source_split_5447;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} out_$i53 := ldv_undef_int();
    call {:si_unique_call 1122} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_5446;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} ldv_scsi_host_template_instance_callback_2_22($u4, $u5);
    goto corral_source_split_5406;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb24:
    assume out_$i46 == 1;
    goto corral_source_split_5404;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i45, 1);
    goto corral_source_split_5388;

  SeqInstr_381:
    goto corral_source_split_5412;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} ldv_scsi_host_template_instance_callback_2_21($u6, in_$p7, $u7);
    goto SeqInstr_380;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb28:
    assume out_$i47 == 1;
    goto corral_source_split_5410;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i45, 2);
    goto corral_source_split_5408;

  $bb25:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} ldv_scsi_host_template_instance_callback_2_20($u8, in_$p7);
    goto corral_source_split_5418;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume out_$i48 == 1;
    goto corral_source_split_5416;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i45, 3);
    goto corral_source_split_5414;

  $bb29:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} ldv_scsi_host_template_instance_callback_2_19($u9, $u7);
    goto corral_source_split_5424;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume out_$i49 == 1;
    goto corral_source_split_5422;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i45, 4);
    goto corral_source_split_5420;

  $bb33:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  SeqInstr_384:
    goto corral_source_split_5430;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} ldv_scsi_host_template_instance_callback_2_18($u9, $u7);
    goto SeqInstr_383;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb40:
    assume out_$i50 == 1;
    goto corral_source_split_5428;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i45, 5);
    goto corral_source_split_5426;

  $bb37:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  SeqInstr_387:
    goto corral_source_split_5436;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} ldv_scsi_host_template_instance_callback_2_17($u9, $u7);
    goto SeqInstr_386;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb44:
    assume out_$i51 == 1;
    goto corral_source_split_5434;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i32(out_$i45, 6);
    goto corral_source_split_5432;

  $bb41:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} ldv_scsi_host_template_instance_callback_2_4($u10, $u5, $u2);
    goto corral_source_split_5442;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb48:
    assume out_$i52 == 1;
    goto corral_source_split_5440;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i45, 7);
    goto corral_source_split_5438;

  $bb45:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} ldv_stop();
    goto corral_source_split_5444;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb49:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb56_dummy:
    call {:si_unique_call 1} out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54 := ldv_scsi_host_template_scsi_host_template_instance_2_loop_$bb16(in_$p7, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54);
    return;

  exit:
    return;
}



procedure ldv_scsi_host_template_scsi_host_template_instance_2_loop_$bb16(in_$p7: ref, in_$i45: i32, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i32, in_$i54: i1) returns (out_$i45: i32, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i32, out_$i54: i1);
  modifies $M.1, $M.40, $M.41, $M.42, $M.67, $M.15, $M.69, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.14, assertsPassed, $CurrAddr, $M.26, $M.27, $M.28, $M.29, $M.16, $M.12, $M.10, $M.11, $M.17, $M.25, $M.66, $M.18, $M.19;



implementation ldv_scsi_host_template_scsi_host_template_instance_2_loop_$bb7(in_$p7: ref, in_$i10: i32, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i27: i1, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i31: i1, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i32, in_$i54: i1) returns (out_$i10: i32, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i27: i1, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i31: i1, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i32, out_$i54: i1)
{

  entry:
    out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54 := in_$i10, in_$p11, in_$p12, in_$p13, in_$p14, in_$i15, in_$i16, in_$p17, in_$p18, in_$p19, in_$p20, in_$p21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p35, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40, in_$p41, in_$p42, in_$p43, in_$p44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5344;

  $bb18:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i24;
    goto $bb18_dummy;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i32(out_$i33, 0);
    goto corral_source_split_5391;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} out_$i33 := ldv_undef_int();
    call {:si_unique_call 1111} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_5390;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb22:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_378:
    goto corral_source_split_5402;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} ldv_scsi_host_template_instance_release_2_2(out_$p44, in_$p7);
    goto SeqInstr_377;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.1, out_$p43);
    goto corral_source_split_5401;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p42, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_5400;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.1, out_$p41);
    goto corral_source_split_5399;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p7, $mul.ref(0, 3816)), $mul.ref(504, 1));
    goto corral_source_split_5398;

  $bb21:
    assume out_$i40 == 1;
    goto corral_source_split_5397;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i64(out_$i39, 0);
    goto corral_source_split_5383;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    out_$i39 := $p2i.ref.i64(out_$p38);
    goto corral_source_split_5382;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.1, out_$p37);
    goto corral_source_split_5381;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p36, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_5380;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.1, out_$p35);
    goto corral_source_split_5379;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p7, $mul.ref(0, 3816)), $mul.ref(504, 1));
    goto corral_source_split_5378;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    assume out_$i30 == 1;
    goto $bb14;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i29, 0);
    goto corral_source_split_5371;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} out_$i29 := ldv_undef_int();
    call {:si_unique_call 1106} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_5370;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} ldv_assume(out_$i28);
    goto corral_source_split_5369;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i1.i32(out_$i27);
    goto corral_source_split_5368;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i24, 0);
    goto corral_source_split_5367;

  $bb11:
    assume out_$i26 == 1;
    goto corral_source_split_5366;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i32(out_$i25, 0);
    goto corral_source_split_5364;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} out_$i25 := ldv_undef_int();
    call {:si_unique_call 1103} {:cexpr "tmp"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_5363;

  SeqInstr_375:
    call {:si_unique_call 1101} {:cexpr "ldv_2_ret_default"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_5362;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} out_$i24 := ldv_ldv_post_probe_161(out_$i23);
    goto SeqInstr_374;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5361;

  $bb9:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    out_$i23 := out_$i10;
    goto $bb10;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    out_$i23 := out_$i22;
    goto $bb10;

  SeqInstr_372:
    call {:si_unique_call 1099} {:cexpr "ldv_2_ret_default"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_5359;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} out_$i22 := ldv_scsi_host_template_instance_probe_2_10(out_$p21, in_$p7);
    goto SeqInstr_371;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_5358;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.1, out_$p19);
    goto corral_source_split_5357;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p18, $mul.ref(0, 336)), $mul.ref(16, 1));
    goto corral_source_split_5356;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.1, out_$p17);
    goto corral_source_split_5355;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p7, $mul.ref(0, 3816)), $mul.ref(504, 1));
    goto corral_source_split_5354;

  $bb8:
    assume out_$i16 == 1;
    goto corral_source_split_5353;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_5351;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_5350;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.1, out_$p13);
    goto corral_source_split_5349;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p12, $mul.ref(0, 336)), $mul.ref(16, 1));
    goto corral_source_split_5348;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.1, out_$p11);
    goto corral_source_split_5347;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p7, $mul.ref(0, 3816)), $mul.ref(504, 1));
    goto corral_source_split_5346;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} ldv_ldv_pre_probe_160();
    goto corral_source_split_5345;

  $bb20:
    assume out_$i54 == 1;
    goto corral_source_split_5395;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb56;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i32(out_$i53, 0);
    goto corral_source_split_5447;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} out_$i53 := ldv_undef_int();
    call {:si_unique_call 1122} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_5446;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} ldv_scsi_host_template_instance_callback_2_22($u4, $u5);
    goto corral_source_split_5406;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb24:
    assume out_$i46 == 1;
    goto corral_source_split_5404;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i45, 1);
    goto corral_source_split_5388;

  $bb16:
    call out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54 := ldv_scsi_host_template_scsi_host_template_instance_2_loop_$bb16(in_$p7, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54);
    goto $bb16_last;

  $bb16_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} out_$i45 := ldv_undef_int();
    call {:si_unique_call 1109} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_5387;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb56:
    assume {:verifier.code 0} true;
    assume !(out_$i54 == 1);
    assume false;
    return;

  $bb15:
    assume !(out_$i30 == 1);
    goto corral_source_split_5385;

  SeqInstr_381:
    goto corral_source_split_5412;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} ldv_scsi_host_template_instance_callback_2_21($u6, in_$p7, $u7);
    goto SeqInstr_380;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb28:
    assume out_$i47 == 1;
    goto corral_source_split_5410;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i45, 2);
    goto corral_source_split_5408;

  $bb25:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} ldv_scsi_host_template_instance_callback_2_20($u8, in_$p7);
    goto corral_source_split_5418;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume out_$i48 == 1;
    goto corral_source_split_5416;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i45, 3);
    goto corral_source_split_5414;

  $bb29:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} ldv_scsi_host_template_instance_callback_2_19($u9, $u7);
    goto corral_source_split_5424;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume out_$i49 == 1;
    goto corral_source_split_5422;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i45, 4);
    goto corral_source_split_5420;

  $bb33:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  SeqInstr_384:
    goto corral_source_split_5430;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} ldv_scsi_host_template_instance_callback_2_18($u9, $u7);
    goto SeqInstr_383;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb40:
    assume out_$i50 == 1;
    goto corral_source_split_5428;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i45, 5);
    goto corral_source_split_5426;

  $bb37:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  SeqInstr_387:
    goto corral_source_split_5436;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} ldv_scsi_host_template_instance_callback_2_17($u9, $u7);
    goto SeqInstr_386;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb44:
    assume out_$i51 == 1;
    goto corral_source_split_5434;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i32(out_$i45, 6);
    goto corral_source_split_5432;

  $bb41:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} ldv_scsi_host_template_instance_callback_2_4($u10, $u5, $u2);
    goto corral_source_split_5442;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb48:
    assume out_$i52 == 1;
    goto corral_source_split_5440;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i45, 7);
    goto corral_source_split_5438;

  $bb45:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} ldv_stop();
    goto corral_source_split_5444;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb49:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} ldv_assume(out_$i32);
    goto corral_source_split_5376;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i1.i32(out_$i31);
    goto corral_source_split_5375;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i24, 0);
    goto corral_source_split_5374;

  $bb12:
    assume !(out_$i26 == 1);
    goto corral_source_split_5373;

  $bb18_dummy:
    call {:si_unique_call 1} out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54 := ldv_scsi_host_template_scsi_host_template_instance_2_loop_$bb7(in_$p7, out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54);
    return;

  exit:
    return;
}



procedure ldv_scsi_host_template_scsi_host_template_instance_2_loop_$bb7(in_$p7: ref, in_$i10: i32, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i27: i1, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i31: i1, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i32, in_$i54: i1) returns (out_$i10: i32, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i27: i1, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i31: i1, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i32, out_$i54: i1);
  modifies $M.1, $M.40, $M.41, $M.42, $M.14, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $M.66, $M.67, $CurrAddr, $M.11, $M.17, $M.18, $M.19, $M.12, $M.10, $M.16, $M.70, $M.71, $M.69;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation srp_reset_device_loop_$bb16(in_$p0: ref, in_$p28: ref, in_$i29: i64, in_$p30: ref, in_$p31: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$i43: i32, in_$i44: i1, in_$i35: i32, in_$i45: i32) returns (out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$i43: i32, out_$i44: i1, out_$i35: i32, out_$i45: i32)
{

  entry:
    out_$p36, out_$p37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i35, out_$i45 := in_$p36, in_$p37, in_$i38, in_$p39, in_$p40, in_$p41, in_$i42, in_$i43, in_$i44, in_$i35, in_$i45;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_5802;

  $bb18:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$i35 := out_$i42;
    goto $bb18_dummy;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    out_$i45 := out_$i42;
    assume true;
    goto $bb18;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    out_$i44 := $slt.i32(out_$i42, out_$i43);
    goto corral_source_split_5813;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.1, in_$p31);
    goto corral_source_split_5812;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    out_$i42 := $add.i32(out_$i35, 1);
    call {:si_unique_call 1227} {:cexpr "i"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_5811;

  SeqInstr_483:
    goto corral_source_split_5810;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} srp_finish_req(in_$p30, out_$p39, out_$p41, 524288);
    goto SeqInstr_482;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.1, out_$p40);
    goto corral_source_split_5809;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p0, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_5808;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref(out_$p37, $mul.ref(out_$i38, 56));
    goto corral_source_split_5807;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i32.i64(out_$i35);
    goto corral_source_split_5806;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.1, out_$p36);
    goto corral_source_split_5805;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p28, $mul.ref(in_$i29, 488)), $mul.ref(368, 1));
    goto corral_source_split_5804;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p36, out_$p37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i35, out_$i45 := srp_reset_device_loop_$bb16(in_$p0, in_$p28, in_$i29, in_$p30, in_$p31, out_$p36, out_$p37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i35, out_$i45);
    return;

  exit:
    return;
}



procedure srp_reset_device_loop_$bb16(in_$p0: ref, in_$p28: ref, in_$i29: i64, in_$p30: ref, in_$p31: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$i43: i32, in_$i44: i1, in_$i35: i32, in_$i45: i32) returns (out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$i43: i32, out_$i44: i1, out_$i35: i32, out_$i45: i32);
  modifies $M.14, $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.15, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr, $M.12, $M.10, $M.11, $M.17, $M.16;



implementation srp_reset_device_loop_$bb11(in_$p0: ref, in_$p5: ref, in_$p23: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$p30: ref, in_$p31: ref, in_$i32: i32, in_$i33: i1, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$i43: i32, in_$i44: i1, in_$i35: i32, in_$i45: i32, in_$i34: i32, in_$i46: i32, in_$i47: i32, in_$i48: i1, in_$i26: i32) returns (out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$p30: ref, out_$p31: ref, out_$i32: i32, out_$i33: i1, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$i43: i32, out_$i44: i1, out_$i35: i32, out_$i45: i32, out_$i34: i32, out_$i46: i32, out_$i47: i32, out_$i48: i1, out_$i26: i32)
{

  entry:
    out_$p27, out_$p28, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p36, out_$p37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i35, out_$i45, out_$i34, out_$i46, out_$i47, out_$i48, out_$i26 := in_$p27, in_$p28, in_$i29, in_$p30, in_$p31, in_$i32, in_$i33, in_$p36, in_$p37, in_$i38, in_$p39, in_$p40, in_$p41, in_$i42, in_$i43, in_$i44, in_$i35, in_$i45, in_$i34, in_$i46, in_$i47, in_$i48, in_$i26;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5790;

  $bb21:
    assume out_$i48 == 1;
    assume {:verifier.code 0} true;
    out_$i26 := out_$i46;
    goto $bb21_dummy;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    out_$i48 := $ult.i32(out_$i46, out_$i47);
    goto corral_source_split_5819;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.1, in_$p23);
    goto corral_source_split_5818;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i32(out_$i34, 1);
    call {:si_unique_call 1228} {:cexpr "i"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_5817;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i33 == 1);
    goto $bb15;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    out_$i34 := out_$i45;
    goto $bb15;

  $bb19:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5815;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    out_$i45 := out_$i42;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    out_$i44 := $slt.i32(out_$i42, out_$i43);
    goto corral_source_split_5813;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.1, out_$p31);
    goto corral_source_split_5812;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    out_$i42 := $add.i32(out_$i35, 1);
    call {:si_unique_call 1227} {:cexpr "i"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_5811;

  SeqInstr_483:
    goto corral_source_split_5810;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} srp_finish_req(out_$p30, out_$p39, out_$p41, 524288);
    goto SeqInstr_482;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.1, out_$p40);
    goto corral_source_split_5809;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p0, $mul.ref(0, 472)), $mul.ref(0, 1));
    goto corral_source_split_5808;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref(out_$p37, $mul.ref(out_$i38, 56));
    goto corral_source_split_5807;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i32.i64(out_$i35);
    goto corral_source_split_5806;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.1, out_$p36);
    goto corral_source_split_5805;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p28, $mul.ref(out_$i29, 488)), $mul.ref(368, 1));
    goto corral_source_split_5804;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb16:
    call out_$p36, out_$p37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i35, out_$i45 := srp_reset_device_loop_$bb16(in_$p0, out_$p28, out_$i29, out_$p30, out_$p31, out_$p36, out_$p37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i35, out_$i45);
    goto $bb16_last;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5802;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    out_$i35 := 0;
    goto $bb16;

  $bb18:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$i35 := out_$i42;
    assume false;
    return;

  $bb13:
    assume out_$i33 == 1;
    goto corral_source_split_5800;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    out_$i34 := 0;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    out_$i33 := $slt.i32(0, out_$i32);
    goto corral_source_split_5798;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i32($M.1, out_$p31);
    goto corral_source_split_5797;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p5, $mul.ref(0, 464)), $mul.ref(236, 1));
    goto corral_source_split_5796;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref(out_$p28, $mul.ref(out_$i29, 488));
    goto corral_source_split_5795;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    out_$i29 := $sext.i32.i64(out_$i26);
    goto corral_source_split_5794;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.1, out_$p27);
    goto corral_source_split_5793;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p5, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_5792;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb21_dummy:
    call {:si_unique_call 1} out_$p27, out_$p28, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p36, out_$p37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i35, out_$i45, out_$i34, out_$i46, out_$i47, out_$i48, out_$i26 := srp_reset_device_loop_$bb11(in_$p0, in_$p5, in_$p23, out_$p27, out_$p28, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p36, out_$p37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i35, out_$i45, out_$i34, out_$i46, out_$i47, out_$i48, out_$i26);
    return;

  exit:
    return;
}



procedure srp_reset_device_loop_$bb11(in_$p0: ref, in_$p5: ref, in_$p23: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$p30: ref, in_$p31: ref, in_$i32: i32, in_$i33: i1, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$i43: i32, in_$i44: i1, in_$i35: i32, in_$i45: i32, in_$i34: i32, in_$i46: i32, in_$i47: i32, in_$i48: i1, in_$i26: i32) returns (out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$p30: ref, out_$p31: ref, out_$i32: i32, out_$i33: i1, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$i43: i32, out_$i44: i1, out_$i35: i32, out_$i45: i32, out_$i34: i32, out_$i46: i32, out_$i47: i32, out_$i48: i1, out_$i26: i32);
  modifies $M.14, $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.15, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr, $M.12, $M.10, $M.11, $M.17, $M.16;



implementation srp_map_sg_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i4: i32, in_$p6: ref, in_$p12: ref, in_$i48: i1, in_$i49: i32, in_$i50: i1, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$i55: i64, in_$i56: i32, in_$i57: i32, in_$p58: ref, in_$i59: i64, in_$i60: i32, in_$i61: i32, in_$i62: i32, in_$p63: ref, in_$i64: i64, in_$p65: ref, in_$i66: i32, in_$p67: ref, in_$i68: i32, in_$i69: i8, in_$i70: i32, in_$p71: ref, in_$p45: ref, in_$i46: i32, in_$i47: i8, in_$i72: i1, in_$i73: i1, in_$i74: i32, in_$i75: i1) returns (out_$i48: i1, out_$i49: i32, out_$i50: i1, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$i55: i64, out_$i56: i32, out_$i57: i32, out_$p58: ref, out_$i59: i64, out_$i60: i32, out_$i61: i32, out_$i62: i32, out_$p63: ref, out_$i64: i64, out_$p65: ref, out_$i66: i32, out_$p67: ref, out_$i68: i32, out_$i69: i8, out_$i70: i32, out_$p71: ref, out_$p45: ref, out_$i46: i32, out_$i47: i8, out_$i72: i1, out_$i73: i1, out_$i74: i32, out_$i75: i1)
{

  entry:
    out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$p65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$p71, out_$p45, out_$i46, out_$i47, out_$i72, out_$i73, out_$i74, out_$i75 := in_$i48, in_$i49, in_$i50, in_$p51, in_$p52, in_$p53, in_$i54, in_$i55, in_$i56, in_$i57, in_$p58, in_$i59, in_$i60, in_$i61, in_$i62, in_$p63, in_$i64, in_$p65, in_$i66, in_$p67, in_$i68, in_$i69, in_$i70, in_$p71, in_$p45, in_$i46, in_$i47, in_$i72, in_$i73, in_$i74, in_$i75;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6437;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    out_$p45, out_$i46, out_$i47 := out_$p71, out_$i70, out_$i69;
    goto corral_source_split_6466_dummy;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} out_$p71 := sg_next(out_$p67);
    goto corral_source_split_6466;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    out_$i70 := $add.i32(out_$i68, 1);
    call {:si_unique_call 1368} {:cexpr "i"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_6465;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6464;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    out_$p67, out_$i68, out_$i69 := out_$p52, out_$i54, 0;
    goto $bb9;

  $bb7:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    out_$p67, out_$i68, out_$i69 := out_$p45, out_$i46, out_$i47;
    goto $bb9;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i32(out_$i49, 0);
    goto corral_source_split_6442;

  SeqInstr_537:
    call {:si_unique_call 1359} {:cexpr "tmp"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_6441;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} out_$i49 := srp_map_sg_entry(in_$p0, in_$p1, out_$p45, out_$i46, out_$i48);
    goto SeqInstr_536;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i48 := $trunc.i8.i1(out_$i47);
    goto corral_source_split_6440;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10:
    assume out_$i72 == 1;
    goto corral_source_split_6468;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    out_$i72 := $slt.i32(out_$i46, in_$i4);
    goto corral_source_split_6438;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} srp_map_desc(in_$p0, out_$i64, out_$i62, out_$i66);
    goto corral_source_split_6462;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i32($M.1, out_$p65);
    goto corral_source_split_6461;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p6, $mul.ref(0, 464)), $mul.ref(88, 1));
    goto corral_source_split_6460;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i64($M.69, out_$p63);
    call {:si_unique_call 1366} {:cexpr "dma_addr"} boogie_si_record_i64(out_$i64);
    goto corral_source_split_6459;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p0, $mul.ref(0, 80)), $mul.ref(72, 1));
    goto corral_source_split_6458;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i32(out_$i56, out_$i61);
    call {:si_unique_call 1365} {:cexpr "dma_len"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_6457;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    out_$i61 := $sub.i32(out_$i57, out_$i60);
    goto corral_source_split_6456;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    out_$i60 := $trunc.i64.i32(out_$i59);
    goto corral_source_split_6455;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i64($M.69, out_$p58);
    goto corral_source_split_6454;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p0, $mul.ref(0, 80)), $mul.ref(72, 1));
    goto corral_source_split_6453;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    out_$i57 := $trunc.i64.i32(out_$i55);
    goto corral_source_split_6452;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} out_$i56 := ib_sg_dma_len(in_$p12, out_$p52);
    call {:si_unique_call 1364} {:cexpr "dma_len"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_6451;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} out_$i55 := ib_sg_dma_address(in_$p12, out_$p52);
    call {:si_unique_call 1362} {:cexpr "dma_addr"} boogie_si_record_i64(out_$i55);
    goto corral_source_split_6450;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.69, out_$p53);
    call {:si_unique_call 1360} {:cexpr "i"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_6449;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p0, $mul.ref(0, 80)), $mul.ref(64, 1));
    goto corral_source_split_6448;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.69, out_$p51);
    goto corral_source_split_6447;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p0, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_6446;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i50 == 1;
    goto corral_source_split_6444;

  $bb15:
    assume out_$i75 == 1;
    goto corral_source_split_6476;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    out_$i75 := $ne.i32(out_$i74, 0);
    goto corral_source_split_6474;

  SeqInstr_540:
    call {:si_unique_call 1371} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_6473;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} out_$i74 := srp_finish_mapping(in_$p0, in_$p1);
    goto SeqInstr_539;

  $bb13:
    assume out_$i73 == 1;
    goto corral_source_split_6472;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i73 := $trunc.i8.i1(out_$i47);
    goto corral_source_split_6470;

  $bb11:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_6466_dummy:
    call {:si_unique_call 1} out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$p65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$p71, out_$p45, out_$i46, out_$i47, out_$i72, out_$i73, out_$i74, out_$i75 := srp_map_sg_loop_$bb4(in_$p0, in_$p1, in_$i4, in_$p6, in_$p12, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$p65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$p71, out_$p45, out_$i46, out_$i47, out_$i72, out_$i73, out_$i74, out_$i75);
    return;

  exit:
    return;
}



procedure srp_map_sg_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i4: i32, in_$p6: ref, in_$p12: ref, in_$i48: i1, in_$i49: i32, in_$i50: i1, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$i55: i64, in_$i56: i32, in_$i57: i32, in_$p58: ref, in_$i59: i64, in_$i60: i32, in_$i61: i32, in_$i62: i32, in_$p63: ref, in_$i64: i64, in_$p65: ref, in_$i66: i32, in_$p67: ref, in_$i68: i32, in_$i69: i8, in_$i70: i32, in_$p71: ref, in_$p45: ref, in_$i46: i32, in_$i47: i8, in_$i72: i1, in_$i73: i1, in_$i74: i32, in_$i75: i1) returns (out_$i48: i1, out_$i49: i32, out_$i50: i1, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$i55: i64, out_$i56: i32, out_$i57: i32, out_$p58: ref, out_$i59: i64, out_$i60: i32, out_$i61: i32, out_$i62: i32, out_$p63: ref, out_$i64: i64, out_$p65: ref, out_$i66: i32, out_$p67: ref, out_$i68: i32, out_$i69: i8, out_$i70: i32, out_$p71: ref, out_$p45: ref, out_$i46: i32, out_$i47: i8, out_$i72: i1, out_$i73: i1, out_$i74: i32, out_$i75: i1);
  modifies $M.69, $M.1, $CurrAddr, $M.16, assertsPassed;



implementation srp_map_sg_entry_loop_$bb26(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i3: i32, in_$p11: ref, in_$i44: i32, in_$p45: ref, in_$i46: i64, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$p50: ref, in_$i51: i32, in_$p52: ref, in_$i53: i32, in_$i54: i1, in_$i55: i1, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$p59: ref, in_$i60: i32, in_$i61: i32, in_$i62: i1, in_$i63: i32, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$p68: ref, in_$i69: i32, in_$p70: ref, in_$i71: i32, in_$i72: i32, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$i76: i64, in_$p77: ref, in_$p78: ref, in_$i79: i64, in_$p80: ref, in_$p81: ref, in_$i82: i32, in_$i83: i32, in_$p84: ref, in_$i85: i64, in_$i86: i64, in_$i87: i32, in_$i88: i1, in_$i42: i32, in_$i43: i64, in_$i89: i32) returns (out_$i44: i32, out_$p45: ref, out_$i46: i64, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$p50: ref, out_$i51: i32, out_$p52: ref, out_$i53: i32, out_$i54: i1, out_$i55: i1, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$p59: ref, out_$i60: i32, out_$i61: i32, out_$i62: i1, out_$i63: i32, out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$p68: ref, out_$i69: i32, out_$p70: ref, out_$i71: i32, out_$i72: i32, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$i76: i64, out_$p77: ref, out_$p78: ref, out_$i79: i64, out_$p80: ref, out_$p81: ref, out_$i82: i32, out_$i83: i32, out_$p84: ref, out_$i85: i64, out_$i86: i64, out_$i87: i32, out_$i88: i1, out_$i42: i32, out_$i43: i64, out_$i89: i32)
{

  entry:
    out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i69, out_$p70, out_$i71, out_$i72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$p78, out_$i79, out_$p80, out_$p81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i42, out_$i43, out_$i89 := in_$i44, in_$p45, in_$i46, in_$i47, in_$i48, in_$i49, in_$p50, in_$i51, in_$p52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$p59, in_$i60, in_$i61, in_$i62, in_$i63, in_$p64, in_$i65, in_$i66, in_$p67, in_$p68, in_$i69, in_$p70, in_$i71, in_$i72, in_$p73, in_$p74, in_$i75, in_$i76, in_$p77, in_$p78, in_$i79, in_$p80, in_$p81, in_$i82, in_$i83, in_$p84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i42, in_$i43, in_$i89;
    goto $bb26, exit;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6545;

  $bb43:
    assume out_$i88 == 1;
    assume {:verifier.code 0} true;
    out_$i42, out_$i43 := out_$i87, out_$i86;
    goto $bb43_dummy;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    out_$i89 := out_$i63;
    assume true;
    goto $bb43;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    out_$i88 := $ne.i32(out_$i87, 0);
    goto corral_source_split_6610;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    out_$i87 := $sub.i32(out_$i42, out_$i63);
    call {:si_unique_call 1391} {:cexpr "dma_len"} boogie_si_record_i32(out_$i87);
    goto corral_source_split_6609;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    out_$i86 := $add.i64(out_$i43, out_$i85);
    call {:si_unique_call 1390} {:cexpr "dma_addr"} boogie_si_record_i64(out_$i86);
    goto corral_source_split_6608;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    out_$i85 := $zext.i32.i64(out_$i63);
    goto corral_source_split_6607;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $M.69 := $store.i32($M.69, out_$p84, out_$i83);
    goto corral_source_split_6606;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(in_$p0, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_6605;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    out_$i83 := $add.i32(out_$i82, out_$i63);
    goto corral_source_split_6604;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i32($M.69, out_$p81);
    goto corral_source_split_6603;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(in_$p0, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_6602;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, out_$p80, out_$i76);
    goto corral_source_split_6601;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref(out_$p78, $mul.ref(out_$i79, 8));
    goto corral_source_split_6600;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    out_$i79 := $zext.i32.i64(out_$i69);
    goto corral_source_split_6599;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    out_$p78 := $load.ref($M.69, out_$p77);
    goto corral_source_split_6598;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(in_$p0, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_6597;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    out_$i76 := $and.i64(out_$i43, out_$i75);
    goto corral_source_split_6596;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i64($M.1, out_$p74);
    goto corral_source_split_6595;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p11, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_6594;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $M.69 := $store.i32($M.69, out_$p73, out_$i72);
    goto corral_source_split_6593;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p0, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_6592;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    out_$i72 := $add.i32(out_$i71, 1);
    goto corral_source_split_6591;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i32($M.69, out_$p70);
    goto corral_source_split_6590;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p0, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_6589;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i32($M.69, out_$p68);
    call {:si_unique_call 1389} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_6588;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p0, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_6587;

  $bb41:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $M.69 := $store.i64($M.69, out_$p67, out_$i43);
    goto corral_source_split_6585;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p0, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_6584;

  $bb40:
    assume out_$i66 == 1;
    goto corral_source_split_6583;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    out_$i66 := $eq.i32(out_$i65, 0);
    goto corral_source_split_6581;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i32($M.69, out_$p64);
    goto corral_source_split_6580;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p0, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_6579;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_6578;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    out_$i63 := out_$i61;
    goto $bb39;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    out_$i63 := out_$i42;
    goto $bb39;

  $bb37:
    assume out_$i62 == 1;
    goto corral_source_split_6574;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    out_$i62 := $ult.i32(out_$i42, out_$i61);
    goto corral_source_split_6572;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    out_$i61 := $sub.i32(out_$i60, out_$i49);
    call {:si_unique_call 1388} {:cexpr "__min2"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_6571;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i32($M.1, out_$p59);
    goto corral_source_split_6570;

  $bb36:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p11, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_6569;

  $bb32:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} srp_map_update_start(in_$p0, in_$p2, in_$i3, out_$i43);
    goto corral_source_split_6567;

  $bb34:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    out_$i58 := out_$i56;
    assume true;
    goto $bb34;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i32(out_$i56, 0);
    goto corral_source_split_6560;

  SeqInstr_546:
    call {:si_unique_call 1386} {:cexpr "ret"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_6559;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} out_$i56 := srp_finish_mapping(in_$p0, in_$p1);
    goto SeqInstr_545;

  $bb31:
    assume {:verifier.code 0} true;
    assume out_$i55 == 1;
    goto $bb29;

  $bb28:
    assume {:verifier.code 0} true;
    assume out_$i54 == 1;
    goto $bb29;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb30;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i51, out_$i53);
    goto corral_source_split_6557;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.1, out_$p52);
    goto corral_source_split_6556;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p11, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_6555;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.69, out_$p50);
    goto corral_source_split_6554;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p0, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_6553;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    out_$i49 := $and.i32(out_$i44, out_$i48);
    call {:si_unique_call 1384} {:cexpr "offset"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_6552;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    out_$i48 := $xor.i32(out_$i47, $sub.i32(0, 1));
    goto corral_source_split_6551;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    out_$i47 := $trunc.i64.i32(out_$i46);
    goto corral_source_split_6550;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i64($M.1, out_$p45);
    goto corral_source_split_6549;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p11, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_6548;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i44 := $trunc.i64.i32(out_$i43);
    goto corral_source_split_6547;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i32(out_$i49, 0);
    goto corral_source_split_6563;

  $bb30:
    assume !(out_$i54 == 1);
    goto corral_source_split_6562;

  $bb38:
    assume !(out_$i62 == 1);
    goto corral_source_split_6576;

  $bb43_dummy:
    call {:si_unique_call 1} out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i69, out_$p70, out_$i71, out_$i72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$p78, out_$i79, out_$p80, out_$p81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i42, out_$i43, out_$i89 := srp_map_sg_entry_loop_$bb26(in_$p0, in_$p1, in_$p2, in_$i3, in_$p11, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i69, out_$p70, out_$i71, out_$i72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$p78, out_$i79, out_$p80, out_$p81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i42, out_$i43, out_$i89);
    return;

  exit:
    return;
}



procedure srp_map_sg_entry_loop_$bb26(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i3: i32, in_$p11: ref, in_$i44: i32, in_$p45: ref, in_$i46: i64, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$p50: ref, in_$i51: i32, in_$p52: ref, in_$i53: i32, in_$i54: i1, in_$i55: i1, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$p59: ref, in_$i60: i32, in_$i61: i32, in_$i62: i1, in_$i63: i32, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$p68: ref, in_$i69: i32, in_$p70: ref, in_$i71: i32, in_$i72: i32, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$i76: i64, in_$p77: ref, in_$p78: ref, in_$i79: i64, in_$p80: ref, in_$p81: ref, in_$i82: i32, in_$i83: i32, in_$p84: ref, in_$i85: i64, in_$i86: i64, in_$i87: i32, in_$i88: i1, in_$i42: i32, in_$i43: i64, in_$i89: i32) returns (out_$i44: i32, out_$p45: ref, out_$i46: i64, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$p50: ref, out_$i51: i32, out_$p52: ref, out_$i53: i32, out_$i54: i1, out_$i55: i1, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$p59: ref, out_$i60: i32, out_$i61: i32, out_$i62: i1, out_$i63: i32, out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$p68: ref, out_$i69: i32, out_$p70: ref, out_$i71: i32, out_$i72: i32, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$i76: i64, out_$p77: ref, out_$p78: ref, out_$i79: i64, out_$p80: ref, out_$p81: ref, out_$i82: i32, out_$i83: i32, out_$p84: ref, out_$i85: i64, out_$i86: i64, out_$i87: i32, out_$i88: i1, out_$i42: i32, out_$i43: i64, out_$i89: i32);
  modifies $M.69, $M.1, $CurrAddr, $M.16, assertsPassed;



implementation dma_map_sg_attrs_loop_$bb4(in_$i2: i32, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i32, in_$p13: ref, in_$i14: i1, in_$p7: ref, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i32, out_$p13: ref, out_$i14: i1, out_$p7: ref, out_$i8: i32)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$p7, out_$i8 := in_$p9, in_$p10, in_$i11, in_$i12, in_$p13, in_$i14, in_$p7, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6936;

  $bb6:
    assume out_$i14 == 1;
    assume {:verifier.code 0} true;
    out_$p7, out_$i8 := out_$p13, out_$i12;
    goto $bb6_dummy;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    out_$i14 := $slt.i32(out_$i12, in_$i2);
    goto corral_source_split_6944;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} out_$p13 := sg_next(out_$p7);
    goto corral_source_split_6943;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    out_$i12 := $add.i32(out_$i8, 1);
    call {:si_unique_call 1448} {:cexpr "i"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_6942;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} kmemcheck_mark_initialized(out_$p9, out_$i11);
    goto corral_source_split_6941;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i32($M.1, out_$p10);
    goto corral_source_split_6940;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p7, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_6939;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} out_$p9 := sg_virt(out_$p7);
    goto corral_source_split_6938;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$p7, out_$i8 := dma_map_sg_attrs_loop_$bb4(in_$i2, out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$p7, out_$i8);
    return;

  exit:
    return;
}



procedure dma_map_sg_attrs_loop_$bb4(in_$i2: i32, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i32, in_$p13: ref, in_$i14: i1, in_$p7: ref, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i32, out_$p13: ref, out_$i14: i1, out_$p7: ref, out_$i8: i32);



implementation srp_remove_target_loop_$bb21(in_$p0: ref, in_$p52: ref, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$p59: ref, in_$i60: i32, in_$i61: i32, in_$i62: i1, in_$i55: i32) returns (out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$p59: ref, out_$i60: i32, out_$i61: i32, out_$i62: i1, out_$i55: i32)
{

  entry:
    out_$p56, out_$p57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i55 := in_$p56, in_$p57, in_$i58, in_$p59, in_$i60, in_$i61, in_$i62, in_$i55;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_7249;

  $bb23:
    assume out_$i62 == 1;
    assume {:verifier.code 0} true;
    out_$i55 := out_$i60;
    goto $bb23_dummy;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    out_$i62 := $ult.i32(out_$i60, out_$i61);
    goto corral_source_split_7258;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.1, in_$p52);
    goto corral_source_split_7257;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    out_$i60 := $add.i32(out_$i55, 1);
    call {:si_unique_call 1563} {:cexpr "i"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_7256;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} srp_free_req_data(in_$p0, out_$p59);
    goto corral_source_split_7255;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref(out_$p57, $mul.ref(out_$i58, 488));
    goto corral_source_split_7254;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    out_$i58 := $sext.i32.i64(out_$i55);
    goto corral_source_split_7253;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.1, out_$p56);
    goto corral_source_split_7252;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_7251;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb23_dummy:
    call {:si_unique_call 1} out_$p56, out_$p57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i55 := srp_remove_target_loop_$bb21(in_$p0, in_$p52, out_$p56, out_$p57, out_$i58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i55);
    return;

  exit:
    return;
}



procedure srp_remove_target_loop_$bb21(in_$p0: ref, in_$p52: ref, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$p59: ref, in_$i60: i32, in_$i61: i32, in_$i62: i1, in_$i55: i32) returns (out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$p59: ref, out_$i60: i32, out_$i61: i32, out_$i62: i1, out_$i55: i32);
  modifies $M.1;



implementation srp_remove_target_loop_$bb13(in_$p0: ref, in_$p37: ref, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$i40: i32) returns (out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$i40: i32)
{

  entry:
    out_$p41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i40 := in_$p41, in_$p42, in_$i43, in_$p44, in_$i45, in_$i46, in_$i47, in_$i40;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_7225;

  $bb15:
    assume out_$i47 == 1;
    assume {:verifier.code 0} true;
    out_$i40 := out_$i45;
    goto $bb15_dummy;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    out_$i47 := $ult.i32(out_$i45, out_$i46);
    goto corral_source_split_7234;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.1, in_$p37);
    goto corral_source_split_7233;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i32(out_$i40, 1);
    call {:si_unique_call 1559} {:cexpr "i"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_7232;

  SeqInstr_594:
    goto corral_source_split_7231;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} srp_free_ch_ib(in_$p0, out_$p44);
    goto SeqInstr_593;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref(out_$p42, $mul.ref(out_$i43, 488));
    goto corral_source_split_7230;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    out_$i43 := $sext.i32.i64(out_$i40);
    goto corral_source_split_7229;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.1, out_$p41);
    goto corral_source_split_7228;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p0, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_7227;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i40 := srp_remove_target_loop_$bb13(in_$p0, in_$p37, out_$p41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i40);
    return;

  exit:
    return;
}



procedure srp_remove_target_loop_$bb13(in_$p0: ref, in_$p37: ref, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$i40: i32) returns (out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$i40: i32);
  modifies $M.1, $M.26, $M.27, $M.28, $M.29, $M.17, $CurrAddr, assertsPassed;



implementation srp_del_scsi_host_attr_loop_$bb4(in_$p0: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$p7: ref, in_$p13: ref, in_$i14: i64, in_$i15: i1) returns (out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$p7: ref, out_$p13: ref, out_$i14: i64, out_$i15: i1)
{

  entry:
    out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$p7, out_$p13, out_$i14, out_$i15 := in_$p8, in_$p9, in_$p10, in_$i11, in_$i12, in_$p7, in_$p13, in_$i14, in_$i15;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_7292;

  $bb6:
    assume out_$i12 == 1;
    assume {:verifier.code 0} true;
    out_$p7 := out_$p10;
    goto $bb6_dummy;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    out_$i12 := $ne.i64(out_$i11, 0);
    goto corral_source_split_7302;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    out_$i11 := $p2i.ref.i64(out_$p10);
    goto corral_source_split_7301;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref(out_$p7, $mul.ref(1, 8));
    goto corral_source_split_7300;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} device_remove_file(out_$p8, out_$p9);
    goto corral_source_split_7299;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.1, out_$p7);
    goto corral_source_split_7298;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3816)), $mul.ref(2368, 1));
    goto corral_source_split_7297;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume out_$i15 == 1;
    goto corral_source_split_7306;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i64(out_$i14, 0);
    goto corral_source_split_7295;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    out_$i14 := $p2i.ref.i64(out_$p13);
    goto corral_source_split_7294;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.1, out_$p7);
    goto corral_source_split_7293;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$p7, out_$p13, out_$i14, out_$i15 := srp_del_scsi_host_attr_loop_$bb4(in_$p0, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$p7, out_$p13, out_$i14, out_$i15);
    return;

  exit:
    return;
}



procedure srp_del_scsi_host_attr_loop_$bb4(in_$p0: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$p7: ref, in_$p13: ref, in_$i14: i64, in_$i15: i1) returns (out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$p7: ref, out_$p13: ref, out_$i14: i64, out_$i15: i1);



implementation show_req_lim_loop_$bb4(in_$p5: ref, in_$p6: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p16: ref, in_$i17: i32, in_$i18: i1, in_$i19: i32, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i10: i32, in_$i11: i32, in_$i23: i32) returns (out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p16: ref, out_$i17: i32, out_$i18: i1, out_$i19: i32, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i10: i32, out_$i11: i32, out_$i23: i32)
{

  entry:
    out_$p12, out_$p13, out_$i14, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i10, out_$i11, out_$i23 := in_$p12, in_$p13, in_$i14, in_$p16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i10, in_$i11, in_$i23;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7489;

  $bb9:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    out_$i10, out_$i11 := out_$i19, out_$i20;
    goto $bb9_dummy;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    out_$i23 := out_$i19;
    assume true;
    goto $bb9;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    out_$i22 := $ult.i32(out_$i20, out_$i21);
    goto corral_source_split_7506;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.1, in_$p6);
    goto corral_source_split_7505;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i32(out_$i11, 1);
    call {:si_unique_call 1636} {:cexpr "i"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_7504;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_7503;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i17;
    goto $bb8;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i10;
    goto $bb8;

  $bb6:
    assume out_$i18 == 1;
    goto corral_source_split_7499;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    out_$i18 := $slt.i32(out_$i10, out_$i17);
    goto corral_source_split_7497;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.1, out_$p16);
    call {:si_unique_call 1635} {:cexpr "_min2"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_7496;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p13, $mul.ref(out_$i14, 488)), $mul.ref(88, 1));
    goto corral_source_split_7495;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    goto corral_source_split_7494;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i11);
    goto corral_source_split_7493;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.1, out_$p12);
    goto corral_source_split_7492;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p5, $mul.ref(0, 464)), $mul.ref(72, 1));
    goto corral_source_split_7491;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb7:
    assume !(out_$i18 == 1);
    goto corral_source_split_7501;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p12, out_$p13, out_$i14, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i10, out_$i11, out_$i23 := show_req_lim_loop_$bb4(in_$p5, in_$p6, out_$p12, out_$p13, out_$i14, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i10, out_$i11, out_$i23);
    return;

  exit:
    return;
}



procedure show_req_lim_loop_$bb4(in_$p5: ref, in_$p6: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p16: ref, in_$i17: i32, in_$i18: i1, in_$i19: i32, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i10: i32, in_$i11: i32, in_$i23: i32) returns (out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p16: ref, out_$i17: i32, out_$i18: i1, out_$i19: i32, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i10: i32, out_$i11: i32, out_$i23: i32);



implementation ldv_pm_pm_ops_instance_0_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i32, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i1, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$i76: i1, in_$p77: ref, in_$p78: ref, in_$i79: i32, in_$i80: i1, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$i84: i1, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$i95: i64, in_$i96: i1, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$i102: i1, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i64, in_$i108: i1, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$i113: i64, in_$i114: i1, in_$p115: ref, in_$p116: ref, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$p120: ref, in_$i121: i64, in_$i122: i1, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$i127: i64, in_$i128: i1, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$i133: i64, in_$i134: i1, in_$p135: ref, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$i139: i64, in_$i140: i1, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$i145: i64, in_$i146: i1, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$p150: ref, in_$i151: i64, in_$i152: i1, in_$p153: ref, in_$p154: ref) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i32, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i1, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$i76: i1, out_$p77: ref, out_$p78: ref, out_$i79: i32, out_$i80: i1, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$i84: i1, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$i95: i64, out_$i96: i1, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$i102: i1, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i64, out_$i108: i1, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$i113: i64, out_$i114: i1, out_$p115: ref, out_$p116: ref, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$p120: ref, out_$i121: i64, out_$i122: i1, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$i127: i64, out_$i128: i1, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$i133: i64, out_$i134: i1, out_$p135: ref, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$i139: i64, out_$i140: i1, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$i145: i64, out_$i146: i1, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$p150: ref, out_$i151: i64, out_$i152: i1, out_$p153: ref, out_$p154: ref)
{

  entry:
    out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$p78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p91, out_$p92, out_$p93, out_$p94, out_$i95, out_$i96, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$p129, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$p135, out_$p136, out_$p137, out_$p138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p143, out_$p144, out_$i145, out_$i146, out_$p147, out_$p148, out_$p149, out_$p150, out_$i151, out_$i152, out_$p153, out_$p154 := in_$i1, in_$i2, in_$i3, in_$i4, in_$i5, in_$p7, in_$p8, in_$i9, in_$i10, in_$p11, in_$p12, in_$p13, in_$p14, in_$i15, in_$i16, in_$p17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p23, in_$p24, in_$p25, in_$p26, in_$i27, in_$i28, in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p35, in_$p36, in_$i37, in_$i38, in_$p39, in_$p40, in_$i41, in_$i42, in_$p43, in_$p44, in_$i45, in_$i46, in_$p47, in_$p48, in_$p49, in_$p50, in_$i51, in_$i52, in_$p53, in_$p54, in_$p55, in_$p56, in_$i57, in_$i58, in_$p59, in_$p60, in_$p61, in_$p62, in_$i63, in_$i64, in_$p65, in_$p66, in_$p67, in_$p68, in_$i69, in_$i70, in_$p71, in_$p72, in_$p73, in_$p74, in_$i75, in_$i76, in_$p77, in_$p78, in_$i79, in_$i80, in_$p81, in_$p82, in_$i83, in_$i84, in_$p85, in_$p86, in_$p87, in_$p88, in_$i89, in_$i90, in_$p91, in_$p92, in_$p93, in_$p94, in_$i95, in_$i96, in_$p97, in_$p98, in_$p99, in_$p100, in_$i101, in_$i102, in_$p103, in_$p104, in_$p105, in_$p106, in_$i107, in_$i108, in_$p109, in_$p110, in_$p111, in_$p112, in_$i113, in_$i114, in_$p115, in_$p116, in_$i117, in_$i118, in_$p119, in_$p120, in_$i121, in_$i122, in_$p123, in_$p124, in_$p125, in_$p126, in_$i127, in_$i128, in_$p129, in_$p130, in_$p131, in_$p132, in_$i133, in_$i134, in_$p135, in_$p136, in_$p137, in_$p138, in_$i139, in_$i140, in_$p141, in_$p142, in_$p143, in_$p144, in_$i145, in_$i146, in_$p147, in_$p148, in_$p149, in_$p150, in_$i151, in_$i152, in_$p153, in_$p154;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} out_$i1 := ldv_undef_int();
    call {:si_unique_call 1735} {:cexpr "tmp"} boogie_si_record_i32(out_$i1);
    goto corral_source_split_7828;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb22_dummy;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_666:
    goto corral_source_split_7865;

  SeqInstr_665:
    assume assertsPassed;
    goto SeqInstr_666;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1737} ldv_pm_ops_instance_runtime_idle_0_27(out_$p12, $u14);
    goto SeqInstr_665;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.76, out_$p11);
    goto corral_source_split_7864;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_7863;

  $bb19:
    assume out_$i10 == 1;
    goto corral_source_split_7862;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i64(out_$i9, 0);
    goto corral_source_split_7836;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(out_$p8);
    goto corral_source_split_7835;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.75, out_$p7);
    goto corral_source_split_7834;

  $bb4:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_7833;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb2:
    assume out_$i2 == 1;
    goto corral_source_split_7831;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    out_$i2 := $eq.i32(out_$i1, 1);
    goto corral_source_split_7829;

  $bb27:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_672:
    goto corral_source_split_7880;

  SeqInstr_671:
    assume assertsPassed;
    goto SeqInstr_672;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} ldv_pm_ops_instance_runtime_resume_0_24(out_$p24, $u14);
    goto SeqInstr_671;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.80, out_$p23);
    goto corral_source_split_7879;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_7878;

  $bb26:
    assume out_$i22 == 1;
    goto corral_source_split_7877;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, 0);
    goto corral_source_split_7875;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_7874;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.79, out_$p19);
    goto corral_source_split_7873;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_7872;

  $bb24:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_669:
    goto corral_source_split_7870;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} ldv_pm_ops_instance_runtime_suspend_0_25(out_$p18, $u14);
    goto SeqInstr_668;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.78, out_$p17);
    goto corral_source_split_7869;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_7868;

  $bb23:
    assume out_$i16 == 1;
    goto corral_source_split_7867;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_7845;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_7844;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.77, out_$p13);
    goto corral_source_split_7843;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_7842;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i3 == 1;
    goto corral_source_split_7840;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i3 := $eq.i32(out_$i1, 2);
    goto corral_source_split_7838;

  $bb3:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb111:
    assume !(out_$i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    goto $bb112;

  SeqInstr_732:
    goto corral_source_split_8105;

  SeqInstr_731:
    assume assertsPassed;
    goto SeqInstr_732;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} ldv_pm_ops_instance_complete_0_3(out_$p154, $u14);
    goto SeqInstr_731;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    out_$p154 := $load.ref($M.120, out_$p153);
    goto corral_source_split_8104;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    out_$p153 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_8103;

  $bb110:
    assume out_$i152 == 1;
    goto corral_source_split_8102;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    out_$i152 := $ne.i64(out_$i151, 0);
    goto corral_source_split_7980;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    out_$i151 := $p2i.ref.i64(out_$p150);
    goto corral_source_split_7979;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    out_$p150 := $load.ref($M.119, out_$p149);
    goto corral_source_split_7978;

  $bb66:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_7977;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb64:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    goto $bb65;

  SeqInstr_693:
    goto corral_source_split_7975;

  SeqInstr_692:
    assume assertsPassed;
    goto SeqInstr_693;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1751} ldv_pm_ops_instance_resume_0_16(out_$p72, $u14);
    goto SeqInstr_692;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.94, out_$p71);
    goto corral_source_split_7974;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_7973;

  $bb63:
    assume out_$i70 == 1;
    goto corral_source_split_7972;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i64(out_$i69, 0);
    goto corral_source_split_7955;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    out_$i69 := $p2i.ref.i64(out_$p68);
    goto corral_source_split_7954;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.93, out_$p67);
    goto corral_source_split_7953;

  $bb56:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_7952;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb54:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    goto $bb55;

  SeqInstr_684:
    goto corral_source_split_7950;

  SeqInstr_683:
    assume assertsPassed;
    goto SeqInstr_684;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} ldv_pm_ops_instance_resume_noirq_0_19(out_$p54, $u14);
    goto SeqInstr_683;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.88, out_$p53);
    goto corral_source_split_7949;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(120, 1));
    goto corral_source_split_7948;

  $bb53:
    assume out_$i52 == 1;
    goto corral_source_split_7947;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i64(out_$i51, 0);
    goto corral_source_split_7945;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    out_$i51 := $p2i.ref.i64(out_$p50);
    goto corral_source_split_7944;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.87, out_$p49);
    goto corral_source_split_7943;

  $bb52:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(120, 1));
    goto corral_source_split_7942;

  $bb51:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_681:
    goto corral_source_split_7940;

  SeqInstr_680:
    assume assertsPassed;
    goto SeqInstr_681;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} ldv_pm_ops_instance_suspend_noirq_0_20(out_$p48, $u14);
    goto SeqInstr_680;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.86, out_$p47);
    goto corral_source_split_7939;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_7938;

  $bb50:
    assume out_$i46 == 1;
    goto corral_source_split_7937;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i64(out_$i45, 0);
    goto corral_source_split_7929;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(out_$p44);
    goto corral_source_split_7928;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.85, out_$p43);
    goto corral_source_split_7927;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_7926;

  $bb48:
    assume out_$i42 == 1;
    goto corral_source_split_7925;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(out_$i41, 0);
    goto corral_source_split_7923;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} out_$i41 := ldv_undef_int();
    call {:si_unique_call 1746} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_7922;

  $bb46:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    goto $bb47;

  SeqInstr_678:
    goto corral_source_split_7920;

  SeqInstr_677:
    assume assertsPassed;
    goto SeqInstr_678;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} ldv_pm_ops_instance_suspend_0_21(out_$p40, $u14);
    goto SeqInstr_677;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.84, out_$p39);
    goto corral_source_split_7919;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_7918;

  $bb45:
    assume out_$i38 == 1;
    goto corral_source_split_7917;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i64(out_$i37, 0);
    goto corral_source_split_7895;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    out_$i37 := $p2i.ref.i64(out_$p36);
    goto corral_source_split_7894;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.83, out_$p35);
    goto corral_source_split_7893;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_7892;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume out_$i32 == 1;
    goto corral_source_split_7890;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i31, 1);
    goto corral_source_split_7888;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} out_$i31 := ldv_undef_int();
    call {:si_unique_call 1742} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_7887;

  $bb30:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_675:
    goto corral_source_split_7885;

  SeqInstr_674:
    assume assertsPassed;
    goto SeqInstr_675;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} ldv_pm_ops_instance_prepare_0_22(out_$p30, $u14);
    goto SeqInstr_674;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.82, out_$p29);
    goto corral_source_split_7884;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_7883;

  $bb29:
    assume out_$i28 == 1;
    goto corral_source_split_7882;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, 0);
    goto corral_source_split_7854;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_7853;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.81, out_$p25);
    goto corral_source_split_7852;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_7851;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i4 == 1;
    goto corral_source_split_7849;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    out_$i5 := out_$i1;
    assume true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i4 := $eq.i32(out_$i1, 3);
    goto corral_source_split_7847;

  $bb7:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb61:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    goto $bb62;

  SeqInstr_690:
    goto corral_source_split_7970;

  SeqInstr_689:
    assume assertsPassed;
    goto SeqInstr_690;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1750} ldv_pm_ops_instance_resume_early_0_17(out_$p66, $u14);
    goto SeqInstr_689;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.92, out_$p65);
    goto corral_source_split_7969;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_7968;

  $bb60:
    assume out_$i64 == 1;
    goto corral_source_split_7967;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i64(out_$i63, 0);
    goto corral_source_split_7965;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    out_$i63 := $p2i.ref.i64(out_$p62);
    goto corral_source_split_7964;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.91, out_$p61);
    goto corral_source_split_7963;

  $bb59:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_7962;

  $bb58:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    goto $bb59;

  SeqInstr_687:
    goto corral_source_split_7960;

  SeqInstr_686:
    assume assertsPassed;
    goto SeqInstr_687;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} ldv_pm_ops_instance_suspend_late_0_18(out_$p60, $u14);
    goto SeqInstr_686;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.90, out_$p59);
    goto corral_source_split_7959;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_7958;

  $bb57:
    assume out_$i58 == 1;
    goto corral_source_split_7957;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i64(out_$i57, 0);
    goto corral_source_split_7935;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    out_$i57 := $p2i.ref.i64(out_$p56);
    goto corral_source_split_7934;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.89, out_$p55);
    goto corral_source_split_7933;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_7932;

  $bb49:
    assume !(out_$i42 == 1);
    goto corral_source_split_7931;

  $bb86:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    goto $bb87;

  SeqInstr_711:
    goto corral_source_split_8040;

  SeqInstr_710:
    assume assertsPassed;
    goto SeqInstr_711;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} ldv_pm_ops_instance_thaw_0_10(out_$p110, $u14);
    goto SeqInstr_710;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    out_$p110 := $load.ref($M.106, out_$p109);
    goto corral_source_split_8039;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_8038;

  $bb85:
    assume out_$i108 == 1;
    goto corral_source_split_8037;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    out_$i108 := $ne.i64(out_$i107, 0);
    goto corral_source_split_8020;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    out_$i107 := $p2i.ref.i64(out_$p106);
    goto corral_source_split_8019;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    out_$p106 := $load.ref($M.105, out_$p105);
    goto corral_source_split_8018;

  $bb78:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_8017;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb76:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    goto $bb77;

  SeqInstr_702:
    goto corral_source_split_8015;

  SeqInstr_701:
    assume assertsPassed;
    goto SeqInstr_702;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} ldv_pm_ops_instance_thaw_early_0_13(out_$p92, $u14);
    goto SeqInstr_701;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    out_$p92 := $load.ref($M.100, out_$p91);
    goto corral_source_split_8014;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_8013;

  $bb75:
    assume out_$i90 == 1;
    goto corral_source_split_8012;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    out_$i90 := $ne.i64(out_$i89, 0);
    goto corral_source_split_8010;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    out_$i89 := $p2i.ref.i64(out_$p88);
    goto corral_source_split_8009;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.99, out_$p87);
    goto corral_source_split_8008;

  $bb74:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_8007;

  $bb73:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    goto $bb74;

  SeqInstr_699:
    goto corral_source_split_8005;

  SeqInstr_698:
    assume assertsPassed;
    goto SeqInstr_699;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1755} ldv_pm_ops_instance_freeze_late_0_14(out_$p86, $u14);
    goto SeqInstr_698;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    out_$p86 := $load.ref($M.98, out_$p85);
    goto corral_source_split_8004;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_8003;

  $bb72:
    assume out_$i84 == 1;
    goto corral_source_split_8002;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    out_$i84 := $ne.i64(out_$i83, 0);
    goto corral_source_split_7994;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    out_$i83 := $p2i.ref.i64(out_$p82);
    goto corral_source_split_7993;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.97, out_$p81);
    goto corral_source_split_7992;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_7991;

  $bb70:
    assume out_$i80 == 1;
    goto corral_source_split_7990;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    out_$i80 := $ne.i32(out_$i79, 0);
    goto corral_source_split_7988;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} out_$i79 := ldv_undef_int();
    call {:si_unique_call 1754} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_7987;

  $bb68:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    goto $bb69;

  SeqInstr_696:
    goto corral_source_split_7985;

  SeqInstr_695:
    assume assertsPassed;
    goto SeqInstr_696;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1752} ldv_pm_ops_instance_freeze_0_15(out_$p78, $u14);
    goto SeqInstr_695;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    out_$p78 := $load.ref($M.96, out_$p77);
    goto corral_source_split_7984;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_7983;

  $bb67:
    assume out_$i76 == 1;
    goto corral_source_split_7982;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    out_$i76 := $ne.i64(out_$i75, 0);
    goto corral_source_split_7904;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    out_$i75 := $p2i.ref.i64(out_$p74);
    goto corral_source_split_7903;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.95, out_$p73);
    goto corral_source_split_7902;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_7901;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume out_$i33 == 1;
    goto corral_source_split_7899;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i31, 2);
    goto corral_source_split_7897;

  $bb33:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb83:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_708:
    goto corral_source_split_8035;

  SeqInstr_707:
    assume assertsPassed;
    goto SeqInstr_708;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} ldv_pm_ops_instance_thaw_noirq_0_11(out_$p104, $u14);
    goto SeqInstr_707;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    out_$p104 := $load.ref($M.104, out_$p103);
    goto corral_source_split_8034;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_8033;

  $bb82:
    assume out_$i102 == 1;
    goto corral_source_split_8032;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    out_$i102 := $ne.i64(out_$i101, 0);
    goto corral_source_split_8030;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    out_$i101 := $p2i.ref.i64(out_$p100);
    goto corral_source_split_8029;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    out_$p100 := $load.ref($M.103, out_$p99);
    goto corral_source_split_8028;

  $bb81:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_8027;

  $bb80:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    goto $bb81;

  SeqInstr_705:
    goto corral_source_split_8025;

  SeqInstr_704:
    assume assertsPassed;
    goto SeqInstr_705;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1757} ldv_pm_ops_instance_freeze_noirq_0_12(out_$p98, $u14);
    goto SeqInstr_704;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    out_$p98 := $load.ref($M.102, out_$p97);
    goto corral_source_split_8024;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_8023;

  $bb79:
    assume out_$i96 == 1;
    goto corral_source_split_8022;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    out_$i96 := $ne.i64(out_$i95, 0);
    goto corral_source_split_8000;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    out_$i95 := $p2i.ref.i64(out_$p94);
    goto corral_source_split_7999;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    out_$p94 := $load.ref($M.101, out_$p93);
    goto corral_source_split_7998;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_7997;

  $bb71:
    assume !(out_$i80 == 1);
    goto corral_source_split_7996;

  $bb107:
    assume !(out_$i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    goto $bb108;

  SeqInstr_729:
    goto corral_source_split_8100;

  SeqInstr_728:
    assume assertsPassed;
    goto SeqInstr_729;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1767} ldv_pm_ops_instance_restore_0_4(out_$p148, $u14);
    goto SeqInstr_728;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    out_$p148 := $load.ref($M.118, out_$p147);
    goto corral_source_split_8099;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_8098;

  $bb106:
    assume out_$i146 == 1;
    goto corral_source_split_8097;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    out_$i146 := $ne.i64(out_$i145, 0);
    goto corral_source_split_8080;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    out_$i145 := $p2i.ref.i64(out_$p144);
    goto corral_source_split_8079;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    out_$p144 := $load.ref($M.117, out_$p143);
    goto corral_source_split_8078;

  $bb99:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_8077;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb97:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    goto $bb98;

  SeqInstr_720:
    goto corral_source_split_8075;

  SeqInstr_719:
    assume assertsPassed;
    goto SeqInstr_720;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} ldv_pm_ops_instance_restore_early_0_7(out_$p130, $u14);
    goto SeqInstr_719;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    out_$p130 := $load.ref($M.112, out_$p129);
    goto corral_source_split_8074;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_8073;

  $bb96:
    assume out_$i128 == 1;
    goto corral_source_split_8072;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    out_$i128 := $ne.i64(out_$i127, 0);
    goto corral_source_split_8070;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    out_$i127 := $p2i.ref.i64(out_$p126);
    goto corral_source_split_8069;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    out_$p126 := $load.ref($M.111, out_$p125);
    goto corral_source_split_8068;

  $bb95:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_8067;

  $bb94:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    goto $bb95;

  SeqInstr_717:
    goto corral_source_split_8065;

  SeqInstr_716:
    assume assertsPassed;
    goto SeqInstr_717;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1763} ldv_pm_ops_instance_poweroff_late_0_8(out_$p124, $u14);
    goto SeqInstr_716;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    out_$p124 := $load.ref($M.110, out_$p123);
    goto corral_source_split_8064;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_8063;

  $bb93:
    assume out_$i122 == 1;
    goto corral_source_split_8062;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    out_$i122 := $ne.i64(out_$i121, 0);
    goto corral_source_split_8054;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    out_$i121 := $p2i.ref.i64(out_$p120);
    goto corral_source_split_8053;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    out_$p120 := $load.ref($M.109, out_$p119);
    goto corral_source_split_8052;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_8051;

  $bb91:
    assume out_$i118 == 1;
    goto corral_source_split_8050;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    out_$i118 := $ne.i32(out_$i117, 0);
    goto corral_source_split_8048;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1761} out_$i117 := ldv_undef_int();
    call {:si_unique_call 1762} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i117);
    goto corral_source_split_8047;

  $bb89:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    goto $bb90;

  SeqInstr_714:
    goto corral_source_split_8045;

  SeqInstr_713:
    assume assertsPassed;
    goto SeqInstr_714;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} ldv_pm_ops_instance_poweroff_0_9(out_$p116, $u14);
    goto SeqInstr_713;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    out_$p116 := $load.ref($M.108, out_$p115);
    goto corral_source_split_8044;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_8043;

  $bb88:
    assume out_$i114 == 1;
    goto corral_source_split_8042;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    out_$i114 := $ne.i64(out_$i113, 0);
    goto corral_source_split_7913;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    out_$i113 := $p2i.ref.i64(out_$p112);
    goto corral_source_split_7912;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    out_$p112 := $load.ref($M.107, out_$p111);
    goto corral_source_split_7911;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_7910;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb40:
    assume out_$i34 == 1;
    goto corral_source_split_7908;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i31, 3);
    goto corral_source_split_7906;

  $bb37:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb104:
    assume !(out_$i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    goto $bb105;

  SeqInstr_726:
    goto corral_source_split_8095;

  SeqInstr_725:
    assume assertsPassed;
    goto SeqInstr_726;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} ldv_pm_ops_instance_restore_noirq_0_5(out_$p142, $u14);
    goto SeqInstr_725;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    out_$p142 := $load.ref($M.116, out_$p141);
    goto corral_source_split_8094;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_8093;

  $bb103:
    assume out_$i140 == 1;
    goto corral_source_split_8092;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    out_$i140 := $ne.i64(out_$i139, 0);
    goto corral_source_split_8090;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    out_$i139 := $p2i.ref.i64(out_$p138);
    goto corral_source_split_8089;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    out_$p138 := $load.ref($M.115, out_$p137);
    goto corral_source_split_8088;

  $bb102:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_8087;

  $bb101:
    assume !(out_$i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    goto $bb102;

  SeqInstr_723:
    goto corral_source_split_8085;

  SeqInstr_722:
    assume assertsPassed;
    goto SeqInstr_723;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1765} ldv_pm_ops_instance_poweroff_noirq_0_6(out_$p136, $u14);
    goto SeqInstr_722;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    out_$p136 := $load.ref($M.114, out_$p135);
    goto corral_source_split_8084;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_8083;

  $bb100:
    assume out_$i134 == 1;
    goto corral_source_split_8082;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    out_$i134 := $ne.i64(out_$i133, 0);
    goto corral_source_split_8060;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    out_$i133 := $p2i.ref.i64(out_$p132);
    goto corral_source_split_8059;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    out_$p132 := $load.ref($M.113, out_$p131);
    goto corral_source_split_8058;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref($u13, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_8057;

  $bb92:
    assume !(out_$i118 == 1);
    goto corral_source_split_8056;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1743} ldv_stop();
    goto corral_source_split_7915;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$p78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p91, out_$p92, out_$p93, out_$p94, out_$i95, out_$i96, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$p129, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$p135, out_$p136, out_$p137, out_$p138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p143, out_$p144, out_$i145, out_$i146, out_$p147, out_$p148, out_$p149, out_$p150, out_$i151, out_$i152, out_$p153, out_$p154 := ldv_pm_pm_ops_instance_0_loop_$bb1(out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$p78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p91, out_$p92, out_$p93, out_$p94, out_$i95, out_$i96, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$p129, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$p135, out_$p136, out_$p137, out_$p138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p143, out_$p144, out_$i145, out_$i146, out_$p147, out_$p148, out_$p149, out_$p150, out_$i151, out_$i152, out_$p153, out_$p154);
    return;

  exit:
    return;
}



procedure ldv_pm_pm_ops_instance_0_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i32, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i1, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$i76: i1, in_$p77: ref, in_$p78: ref, in_$i79: i32, in_$i80: i1, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$i84: i1, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$i95: i64, in_$i96: i1, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$i102: i1, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i64, in_$i108: i1, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$i113: i64, in_$i114: i1, in_$p115: ref, in_$p116: ref, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$p120: ref, in_$i121: i64, in_$i122: i1, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$i127: i64, in_$i128: i1, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$i133: i64, in_$i134: i1, in_$p135: ref, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$i139: i64, in_$i140: i1, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$i145: i64, in_$i146: i1, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$p150: ref, in_$i151: i64, in_$i152: i1, in_$p153: ref, in_$p154: ref) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i32, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i1, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$i76: i1, out_$p77: ref, out_$p78: ref, out_$i79: i32, out_$i80: i1, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$i84: i1, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$i95: i64, out_$i96: i1, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$i102: i1, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i64, out_$i108: i1, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$i113: i64, out_$i114: i1, out_$p115: ref, out_$p116: ref, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$p120: ref, out_$i121: i64, out_$i122: i1, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$i127: i64, out_$i128: i1, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$i133: i64, out_$i134: i1, out_$p135: ref, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$i139: i64, out_$i140: i1, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$i145: i64, out_$i146: i1, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$p150: ref, out_$i151: i64, out_$i152: i1, out_$p153: ref, out_$p154: ref);
  modifies $M.1, $M.40, $M.41, $M.42, $M.14, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.66, $M.67, assertsPassed, $CurrAddr, $M.26, $M.27, $M.28, $M.29, $M.25, $M.12, $M.10, $M.11, $M.17, $M.18, $M.19, $M.16;



implementation ldv_struct_srp_function_template_dummy_resourceless_instance_24_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i32) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i32)
{

  entry:
    out_$i1, out_$i2, out_$i3, out_$i4, out_$i5 := in_$i1, in_$i2, in_$i3, in_$i4, in_$i5;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} out_$i1 := ldv_undef_int();
    call {:si_unique_call 1795} {:cexpr "tmp"} boogie_si_record_i32(out_$i1);
    goto corral_source_split_8161;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb19_dummy;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_807:
    goto corral_source_split_8166;

  SeqInstr_806:
    assume assertsPassed;
    goto SeqInstr_807;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} ldv_dummy_resourceless_instance_callback_24_8($u15, $u16);
    goto SeqInstr_806;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb2:
    assume out_$i2 == 1;
    goto corral_source_split_8164;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    out_$i2 := $eq.i32(out_$i1, 1);
    goto corral_source_split_8162;

  SeqInstr_810:
    goto corral_source_split_8172;

  SeqInstr_809:
    assume assertsPassed;
    goto SeqInstr_810;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1797} ldv_dummy_resourceless_instance_callback_24_7($u15, $u16);
    goto SeqInstr_809;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i3 == 1;
    goto corral_source_split_8170;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i3 := $eq.i32(out_$i1, 2);
    goto corral_source_split_8168;

  $bb3:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_813:
    goto corral_source_split_8178;

  SeqInstr_812:
    assume assertsPassed;
    goto SeqInstr_813;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} ldv_dummy_resourceless_instance_callback_24_3($u17, $u16);
    goto SeqInstr_812;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i4 == 1;
    goto corral_source_split_8176;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    out_$i5 := out_$i1;
    assume true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i4 := $eq.i32(out_$i1, 3);
    goto corral_source_split_8174;

  $bb7:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb19_dummy:
    call {:si_unique_call 1} out_$i1, out_$i2, out_$i3, out_$i4, out_$i5 := ldv_struct_srp_function_template_dummy_resourceless_instance_24_loop_$bb1(out_$i1, out_$i2, out_$i3, out_$i4, out_$i5);
    return;

  exit:
    return;
}



procedure ldv_struct_srp_function_template_dummy_resourceless_instance_24_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i32) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i32);
  modifies $M.14, $M.1, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.15, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr, $M.12, $M.10, $M.11, $M.17, $M.16, $M.25, $M.18, $M.19;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_3_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8, in_$i9, in_$i10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1843} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_8279;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i10 == 1;
    goto $bb11_dummy;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_8294;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} out_$i9 := ldv_undef_int();
    call {:si_unique_call 1851} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_8293;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1849} ldv_free(out_$p3);
    goto corral_source_split_8292;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1848} ldv_free(out_$p6);
    goto corral_source_split_8286;

  SeqInstr_882:
    goto corral_source_split_8285;

  SeqInstr_881:
    assume assertsPassed;
    goto SeqInstr_882;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1847} ldv_dummy_resourceless_instance_callback_3_9($u18, $u14, $u19, out_$p6, $u0);
    goto SeqInstr_881;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1846} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_8284;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_8283;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_8281;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1845} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_8280;

  $bb9:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1852} ldv_dummy_resourceless_instance_callback_3_3($u20, $u14, $u19, out_$p3);
    goto corral_source_split_8297;

  $bb8:
    assume out_$i8 == 1;
    goto corral_source_split_8296;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_8290;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64($u20);
    goto corral_source_split_8289;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_8288;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := ldv_struct_device_attribute_dummy_resourceless_instance_3_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10);
    return;

  exit:
    return;
}



procedure ldv_struct_device_attribute_dummy_resourceless_instance_3_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1);
  modifies $CurrAddr, $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_4_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8, in_$i9, in_$i10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1855} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_8307;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i10 == 1;
    goto $bb11_dummy;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_8325;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1863} out_$i9 := ldv_undef_int();
    call {:si_unique_call 1864} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_8324;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} ldv_free(out_$p3);
    goto corral_source_split_8323;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1859} ldv_dummy_resourceless_instance_callback_4_3($u20, $u14, $u19, out_$p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1861} ldv_free(out_$p6);
    goto corral_source_split_8321;

  $bb8:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_885:
    goto corral_source_split_8319;

  SeqInstr_884:
    assume assertsPassed;
    goto SeqInstr_885;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1860} ldv_dummy_resourceless_instance_callback_4_9($u18, $u14, $u19, out_$p6, $u0);
    goto SeqInstr_884;

  $bb7:
    assume out_$i8 == 1;
    goto corral_source_split_8318;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_8314;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64($u18);
    goto corral_source_split_8313;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_8312;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_8311;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_8309;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1857} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_8308;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_8316;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := ldv_struct_device_attribute_dummy_resourceless_instance_4_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10);
    return;

  exit:
    return;
}



procedure ldv_struct_device_attribute_dummy_resourceless_instance_4_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1);
  modifies $CurrAddr, $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_5_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8, in_$i9, in_$i10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1867} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_8335;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i10 == 1;
    goto $bb11_dummy;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_8353;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1875} out_$i9 := ldv_undef_int();
    call {:si_unique_call 1876} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_8352;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1874} ldv_free(out_$p3);
    goto corral_source_split_8351;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} ldv_dummy_resourceless_instance_callback_5_3($u20, $u14, $u19, out_$p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1873} ldv_free(out_$p6);
    goto corral_source_split_8349;

  $bb8:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_888:
    goto corral_source_split_8347;

  SeqInstr_887:
    assume assertsPassed;
    goto SeqInstr_888;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1872} ldv_dummy_resourceless_instance_callback_5_9($u18, $u14, $u19, out_$p6, $u0);
    goto SeqInstr_887;

  $bb7:
    assume out_$i8 == 1;
    goto corral_source_split_8346;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_8342;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64($u18);
    goto corral_source_split_8341;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1870} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_8340;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_8339;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_8337;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1868} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1869} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_8336;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_8344;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := ldv_struct_device_attribute_dummy_resourceless_instance_5_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10);
    return;

  exit:
    return;
}



procedure ldv_struct_device_attribute_dummy_resourceless_instance_5_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1);
  modifies $CurrAddr, $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_6_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8, in_$i9, in_$i10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_8363;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i10 == 1;
    goto $bb11_dummy;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_8381;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} out_$i9 := ldv_undef_int();
    call {:si_unique_call 1888} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_8380;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1886} ldv_free(out_$p3);
    goto corral_source_split_8379;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1883} ldv_dummy_resourceless_instance_callback_6_3($u20, $u14, $u19, out_$p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1885} ldv_free(out_$p6);
    goto corral_source_split_8377;

  $bb8:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_891:
    goto corral_source_split_8375;

  SeqInstr_890:
    assume assertsPassed;
    goto SeqInstr_891;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} ldv_dummy_resourceless_instance_callback_6_9($u18, $u14, $u19, out_$p6, $u0);
    goto SeqInstr_890;

  $bb7:
    assume out_$i8 == 1;
    goto corral_source_split_8374;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_8370;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64($u18);
    goto corral_source_split_8369;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1882} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_8368;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_8367;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_8365;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1880} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1881} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_8364;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_8372;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := ldv_struct_device_attribute_dummy_resourceless_instance_6_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10);
    return;

  exit:
    return;
}



procedure ldv_struct_device_attribute_dummy_resourceless_instance_6_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1);
  modifies $CurrAddr, $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_7_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8, in_$i9, in_$i10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_8391;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i10 == 1;
    goto $bb11_dummy;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_8409;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1899} out_$i9 := ldv_undef_int();
    call {:si_unique_call 1900} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_8408;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1898} ldv_free(out_$p3);
    goto corral_source_split_8407;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1895} ldv_dummy_resourceless_instance_callback_7_3($u20, $u14, $u19, out_$p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} ldv_free(out_$p6);
    goto corral_source_split_8405;

  $bb8:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_894:
    goto corral_source_split_8403;

  SeqInstr_893:
    assume assertsPassed;
    goto SeqInstr_894;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1896} ldv_dummy_resourceless_instance_callback_7_9($u18, $u14, $u19, out_$p6, $u0);
    goto SeqInstr_893;

  $bb7:
    assume out_$i8 == 1;
    goto corral_source_split_8402;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_8398;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64($u18);
    goto corral_source_split_8397;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1894} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_8396;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_8395;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_8393;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1892} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1893} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_8392;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_8400;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := ldv_struct_device_attribute_dummy_resourceless_instance_7_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10);
    return;

  exit:
    return;
}



procedure ldv_struct_device_attribute_dummy_resourceless_instance_7_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1);
  modifies $CurrAddr, $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_8_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8, in_$i9, in_$i10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1903} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_8419;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i10 == 1;
    goto $bb11_dummy;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_8437;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1911} out_$i9 := ldv_undef_int();
    call {:si_unique_call 1912} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_8436;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1910} ldv_free(out_$p3);
    goto corral_source_split_8435;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1907} ldv_dummy_resourceless_instance_callback_8_3($u20, $u14, $u19, out_$p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1909} ldv_free(out_$p6);
    goto corral_source_split_8433;

  $bb8:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_897:
    goto corral_source_split_8431;

  SeqInstr_896:
    assume assertsPassed;
    goto SeqInstr_897;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} ldv_dummy_resourceless_instance_callback_8_9($u18, $u14, $u19, out_$p6, $u0);
    goto SeqInstr_896;

  $bb7:
    assume out_$i8 == 1;
    goto corral_source_split_8430;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_8426;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64($u18);
    goto corral_source_split_8425;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1906} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_8424;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_8423;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_8421;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1904} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1905} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_8420;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_8428;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := ldv_struct_device_attribute_dummy_resourceless_instance_8_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10);
    return;

  exit:
    return;
}



procedure ldv_struct_device_attribute_dummy_resourceless_instance_8_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1);
  modifies $CurrAddr, $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_9_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8, in_$i9, in_$i10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1915} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_8447;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i10 == 1;
    goto $bb11_dummy;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_8465;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1923} out_$i9 := ldv_undef_int();
    call {:si_unique_call 1924} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_8464;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1922} ldv_free(out_$p3);
    goto corral_source_split_8463;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1919} ldv_dummy_resourceless_instance_callback_9_3($u20, $u14, $u19, out_$p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1921} ldv_free(out_$p6);
    goto corral_source_split_8461;

  $bb8:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_900:
    goto corral_source_split_8459;

  SeqInstr_899:
    assume assertsPassed;
    goto SeqInstr_900;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1920} ldv_dummy_resourceless_instance_callback_9_9($u18, $u14, $u19, out_$p6, $u0);
    goto SeqInstr_899;

  $bb7:
    assume out_$i8 == 1;
    goto corral_source_split_8458;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_8454;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64($u18);
    goto corral_source_split_8453;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1918} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_8452;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_8451;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_8449;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1917} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_8448;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_8456;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := ldv_struct_device_attribute_dummy_resourceless_instance_9_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10);
    return;

  exit:
    return;
}



procedure ldv_struct_device_attribute_dummy_resourceless_instance_9_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1);
  modifies $CurrAddr, $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_10_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8, in_$i9, in_$i10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1927} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_8475;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i10 == 1;
    goto $bb11_dummy;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_8493;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1935} out_$i9 := ldv_undef_int();
    call {:si_unique_call 1936} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_8492;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1934} ldv_free(out_$p3);
    goto corral_source_split_8491;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1931} ldv_dummy_resourceless_instance_callback_10_3($u20, $u14, $u19, out_$p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1933} ldv_free(out_$p6);
    goto corral_source_split_8489;

  $bb8:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_903:
    goto corral_source_split_8487;

  SeqInstr_902:
    assume assertsPassed;
    goto SeqInstr_903;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1932} ldv_dummy_resourceless_instance_callback_10_9($u18, $u14, $u19, out_$p6, $u0);
    goto SeqInstr_902;

  $bb7:
    assume out_$i8 == 1;
    goto corral_source_split_8486;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_8482;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64($u18);
    goto corral_source_split_8481;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1930} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_8480;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_8479;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_8477;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1928} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1929} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_8476;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_8484;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := ldv_struct_device_attribute_dummy_resourceless_instance_10_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10);
    return;

  exit:
    return;
}



procedure ldv_struct_device_attribute_dummy_resourceless_instance_10_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1);
  modifies $CurrAddr, $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_11_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8, in_$i9, in_$i10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1939} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_8503;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i10 == 1;
    goto $bb11_dummy;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_8521;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1947} out_$i9 := ldv_undef_int();
    call {:si_unique_call 1948} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_8520;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1946} ldv_free(out_$p3);
    goto corral_source_split_8519;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1943} ldv_dummy_resourceless_instance_callback_11_3($u20, $u14, $u19, out_$p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1945} ldv_free(out_$p6);
    goto corral_source_split_8517;

  $bb8:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_906:
    goto corral_source_split_8515;

  SeqInstr_905:
    assume assertsPassed;
    goto SeqInstr_906;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1944} ldv_dummy_resourceless_instance_callback_11_9($u18, $u14, $u19, out_$p6, $u0);
    goto SeqInstr_905;

  $bb7:
    assume out_$i8 == 1;
    goto corral_source_split_8514;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_8510;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64($u18);
    goto corral_source_split_8509;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1942} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_8508;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_8507;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_8505;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1940} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1941} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_8504;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_8512;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := ldv_struct_device_attribute_dummy_resourceless_instance_11_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10);
    return;

  exit:
    return;
}



procedure ldv_struct_device_attribute_dummy_resourceless_instance_11_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1);
  modifies $CurrAddr, $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_12_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8, in_$i9, in_$i10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1951} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_8531;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i10 == 1;
    goto $bb11_dummy;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_8549;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1959} out_$i9 := ldv_undef_int();
    call {:si_unique_call 1960} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_8548;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1958} ldv_free(out_$p3);
    goto corral_source_split_8547;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1955} ldv_dummy_resourceless_instance_callback_12_3($u20, $u14, $u19, out_$p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1957} ldv_free(out_$p6);
    goto corral_source_split_8545;

  $bb8:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_909:
    goto corral_source_split_8543;

  SeqInstr_908:
    assume assertsPassed;
    goto SeqInstr_909;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1956} ldv_dummy_resourceless_instance_callback_12_9($u18, $u14, $u19, out_$p6, $u0);
    goto SeqInstr_908;

  $bb7:
    assume out_$i8 == 1;
    goto corral_source_split_8542;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_8538;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64($u18);
    goto corral_source_split_8537;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1954} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_8536;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_8535;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_8533;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1952} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1953} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_8532;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_8540;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := ldv_struct_device_attribute_dummy_resourceless_instance_12_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10);
    return;

  exit:
    return;
}



procedure ldv_struct_device_attribute_dummy_resourceless_instance_12_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1);
  modifies $CurrAddr, $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_13_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8, in_$i9, in_$i10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1963} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_8559;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i10 == 1;
    goto $bb11_dummy;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_8577;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1971} out_$i9 := ldv_undef_int();
    call {:si_unique_call 1972} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_8576;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1970} ldv_free(out_$p3);
    goto corral_source_split_8575;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1967} ldv_dummy_resourceless_instance_callback_13_3($u20, $u14, $u19, out_$p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1969} ldv_free(out_$p6);
    goto corral_source_split_8573;

  $bb8:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_912:
    goto corral_source_split_8571;

  SeqInstr_911:
    assume assertsPassed;
    goto SeqInstr_912;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1968} ldv_dummy_resourceless_instance_callback_13_9($u18, $u14, $u19, out_$p6, $u0);
    goto SeqInstr_911;

  $bb7:
    assume out_$i8 == 1;
    goto corral_source_split_8570;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_8566;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64($u18);
    goto corral_source_split_8565;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1966} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_8564;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_8563;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_8561;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1964} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1965} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_8560;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_8568;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := ldv_struct_device_attribute_dummy_resourceless_instance_13_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10);
    return;

  exit:
    return;
}



procedure ldv_struct_device_attribute_dummy_resourceless_instance_13_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1);
  modifies $CurrAddr, $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_14_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8, in_$i9, in_$i10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1975} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_8587;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i10 == 1;
    goto $bb11_dummy;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_8605;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1983} out_$i9 := ldv_undef_int();
    call {:si_unique_call 1984} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_8604;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1982} ldv_free(out_$p3);
    goto corral_source_split_8603;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1979} ldv_dummy_resourceless_instance_callback_14_3($u20, $u14, $u19, out_$p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1981} ldv_free(out_$p6);
    goto corral_source_split_8601;

  $bb8:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_915:
    goto corral_source_split_8599;

  SeqInstr_914:
    assume assertsPassed;
    goto SeqInstr_915;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1980} ldv_dummy_resourceless_instance_callback_14_9($u18, $u14, $u19, out_$p6, $u0);
    goto SeqInstr_914;

  $bb7:
    assume out_$i8 == 1;
    goto corral_source_split_8598;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_8594;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64($u18);
    goto corral_source_split_8593;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1978} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_8592;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_8591;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_8589;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1976} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1977} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_8588;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_8596;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := ldv_struct_device_attribute_dummy_resourceless_instance_14_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10);
    return;

  exit:
    return;
}



procedure ldv_struct_device_attribute_dummy_resourceless_instance_14_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1);
  modifies $CurrAddr, $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_15_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8, in_$i9, in_$i10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1987} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_8615;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i10 == 1;
    goto $bb11_dummy;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_8633;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1995} out_$i9 := ldv_undef_int();
    call {:si_unique_call 1996} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_8632;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1994} ldv_free(out_$p3);
    goto corral_source_split_8631;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1991} ldv_dummy_resourceless_instance_callback_15_3($u20, $u14, $u19, out_$p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1993} ldv_free(out_$p6);
    goto corral_source_split_8629;

  $bb8:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_918:
    goto corral_source_split_8627;

  SeqInstr_917:
    assume assertsPassed;
    goto SeqInstr_918;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1992} ldv_dummy_resourceless_instance_callback_15_9($u18, $u14, $u19, out_$p6, $u0);
    goto SeqInstr_917;

  $bb7:
    assume out_$i8 == 1;
    goto corral_source_split_8626;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_8622;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64($u18);
    goto corral_source_split_8621;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1990} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_8620;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_8619;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_8617;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1988} out_$i4 := ldv_undef_int();
    call {:si_unique_call 1989} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_8616;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_8624;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := ldv_struct_device_attribute_dummy_resourceless_instance_15_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10);
    return;

  exit:
    return;
}



procedure ldv_struct_device_attribute_dummy_resourceless_instance_15_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1);
  modifies $CurrAddr, $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_16_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8, in_$i9, in_$i10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1999} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_8643;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i10 == 1;
    goto $bb11_dummy;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_8661;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2007} out_$i9 := ldv_undef_int();
    call {:si_unique_call 2008} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_8660;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2006} ldv_free(out_$p3);
    goto corral_source_split_8659;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2003} ldv_dummy_resourceless_instance_callback_16_3($u20, $u14, $u19, out_$p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2005} ldv_free(out_$p6);
    goto corral_source_split_8657;

  $bb8:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_921:
    goto corral_source_split_8655;

  SeqInstr_920:
    assume assertsPassed;
    goto SeqInstr_921;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2004} ldv_dummy_resourceless_instance_callback_16_9($u18, $u14, $u19, out_$p6, $u0);
    goto SeqInstr_920;

  $bb7:
    assume out_$i8 == 1;
    goto corral_source_split_8654;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_8650;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64($u18);
    goto corral_source_split_8649;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2002} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_8648;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_8647;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_8645;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2000} out_$i4 := ldv_undef_int();
    call {:si_unique_call 2001} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_8644;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_8652;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := ldv_struct_device_attribute_dummy_resourceless_instance_16_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10);
    return;

  exit:
    return;
}



procedure ldv_struct_device_attribute_dummy_resourceless_instance_16_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1);
  modifies $CurrAddr, $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_17_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8, in_$i9, in_$i10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2011} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_8671;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i10 == 1;
    goto $bb11_dummy;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_8689;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2019} out_$i9 := ldv_undef_int();
    call {:si_unique_call 2020} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_8688;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2018} ldv_free(out_$p3);
    goto corral_source_split_8687;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2015} ldv_dummy_resourceless_instance_callback_17_3($u20, $u14, $u19, out_$p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2017} ldv_free(out_$p6);
    goto corral_source_split_8685;

  $bb8:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_924:
    goto corral_source_split_8683;

  SeqInstr_923:
    assume assertsPassed;
    goto SeqInstr_924;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2016} ldv_dummy_resourceless_instance_callback_17_9($u18, $u14, $u19, out_$p6, $u0);
    goto SeqInstr_923;

  $bb7:
    assume out_$i8 == 1;
    goto corral_source_split_8682;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_8678;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64($u18);
    goto corral_source_split_8677;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2014} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_8676;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_8675;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_8673;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2012} out_$i4 := ldv_undef_int();
    call {:si_unique_call 2013} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_8672;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_8680;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := ldv_struct_device_attribute_dummy_resourceless_instance_17_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10);
    return;

  exit:
    return;
}



procedure ldv_struct_device_attribute_dummy_resourceless_instance_17_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1);
  modifies $CurrAddr, $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_18_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8, in_$i9, in_$i10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2023} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_8699;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i10 == 1;
    goto $bb11_dummy;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_8717;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2031} out_$i9 := ldv_undef_int();
    call {:si_unique_call 2032} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_8716;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2030} ldv_free(out_$p3);
    goto corral_source_split_8715;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2027} ldv_dummy_resourceless_instance_callback_18_3($u20, $u14, $u19, out_$p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2029} ldv_free(out_$p6);
    goto corral_source_split_8713;

  $bb8:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_927:
    goto corral_source_split_8711;

  SeqInstr_926:
    assume assertsPassed;
    goto SeqInstr_927;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2028} ldv_dummy_resourceless_instance_callback_18_9($u18, $u14, $u19, out_$p6, $u0);
    goto SeqInstr_926;

  $bb7:
    assume out_$i8 == 1;
    goto corral_source_split_8710;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_8706;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64($u18);
    goto corral_source_split_8705;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2026} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_8704;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_8703;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_8701;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2024} out_$i4 := ldv_undef_int();
    call {:si_unique_call 2025} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_8700;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_8708;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := ldv_struct_device_attribute_dummy_resourceless_instance_18_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10);
    return;

  exit:
    return;
}



procedure ldv_struct_device_attribute_dummy_resourceless_instance_18_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1);
  modifies $CurrAddr, $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_19_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8, in_$i9, in_$i10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2035} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_8727;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i10 == 1;
    goto $bb11_dummy;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_8745;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2043} out_$i9 := ldv_undef_int();
    call {:si_unique_call 2044} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_8744;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2042} ldv_free(out_$p3);
    goto corral_source_split_8743;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2039} ldv_dummy_resourceless_instance_callback_19_3($u20, $u14, $u19, out_$p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2041} ldv_free(out_$p6);
    goto corral_source_split_8741;

  $bb8:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_930:
    goto corral_source_split_8739;

  SeqInstr_929:
    assume assertsPassed;
    goto SeqInstr_930;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2040} ldv_dummy_resourceless_instance_callback_19_9($u18, $u14, $u19, out_$p6, $u0);
    goto SeqInstr_929;

  $bb7:
    assume out_$i8 == 1;
    goto corral_source_split_8738;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_8734;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64($u18);
    goto corral_source_split_8733;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2038} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_8732;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_8731;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_8729;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2036} out_$i4 := ldv_undef_int();
    call {:si_unique_call 2037} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_8728;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_8736;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := ldv_struct_device_attribute_dummy_resourceless_instance_19_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10);
    return;

  exit:
    return;
}



procedure ldv_struct_device_attribute_dummy_resourceless_instance_19_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1);
  modifies $CurrAddr, $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_20_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8, in_$i9, in_$i10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2047} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_8755;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i10 == 1;
    goto $bb11_dummy;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_8773;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2055} out_$i9 := ldv_undef_int();
    call {:si_unique_call 2056} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_8772;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2054} ldv_free(out_$p3);
    goto corral_source_split_8771;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2051} ldv_dummy_resourceless_instance_callback_20_3($u20, $u14, $u19, out_$p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2053} ldv_free(out_$p6);
    goto corral_source_split_8769;

  $bb8:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_933:
    goto corral_source_split_8767;

  SeqInstr_932:
    assume assertsPassed;
    goto SeqInstr_933;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2052} ldv_dummy_resourceless_instance_callback_20_9($u18, $u14, $u19, out_$p6, $u0);
    goto SeqInstr_932;

  $bb7:
    assume out_$i8 == 1;
    goto corral_source_split_8766;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_8762;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64($u18);
    goto corral_source_split_8761;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2050} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_8760;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_8759;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_8757;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2048} out_$i4 := ldv_undef_int();
    call {:si_unique_call 2049} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_8756;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_8764;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := ldv_struct_device_attribute_dummy_resourceless_instance_20_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10);
    return;

  exit:
    return;
}



procedure ldv_struct_device_attribute_dummy_resourceless_instance_20_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1);
  modifies $CurrAddr, $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_21_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8, in_$i9, in_$i10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2059} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_8783;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i10 == 1;
    goto $bb11_dummy;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_8801;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2067} out_$i9 := ldv_undef_int();
    call {:si_unique_call 2068} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_8800;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2066} ldv_free(out_$p3);
    goto corral_source_split_8799;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2063} ldv_dummy_resourceless_instance_callback_21_3($u20, $u14, $u19, out_$p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2065} ldv_free(out_$p6);
    goto corral_source_split_8797;

  $bb8:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_936:
    goto corral_source_split_8795;

  SeqInstr_935:
    assume assertsPassed;
    goto SeqInstr_936;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2064} ldv_dummy_resourceless_instance_callback_21_9($u18, $u14, $u19, out_$p6, $u0);
    goto SeqInstr_935;

  $bb7:
    assume out_$i8 == 1;
    goto corral_source_split_8794;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_8790;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64($u18);
    goto corral_source_split_8789;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2062} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_8788;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_8787;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_8785;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2060} out_$i4 := ldv_undef_int();
    call {:si_unique_call 2061} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_8784;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_8792;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := ldv_struct_device_attribute_dummy_resourceless_instance_21_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10);
    return;

  exit:
    return;
}



procedure ldv_struct_device_attribute_dummy_resourceless_instance_21_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1);
  modifies $CurrAddr, $M.1, $M.63, $M.64, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.65, $M.10, $M.11, $M.17, $M.18, $M.19, assertsPassed, $M.70, $M.71, $M.40, $M.41, $M.42, $M.14, $M.15, $M.67, $M.69, $M.66, $M.12, $M.16;



implementation ldv_struct_ib_client_dummy_resourceless_instance_22_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i32) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i32)
{

  entry:
    out_$i1, out_$i2, out_$i3, out_$i4 := in_$i1, in_$i2, in_$i3, in_$i4;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2128} out_$i1 := ldv_undef_int();
    call {:si_unique_call 2129} {:cexpr "tmp"} boogie_si_record_i32(out_$i1);
    goto corral_source_split_8908;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb15_dummy;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_999:
    goto corral_source_split_8913;

  SeqInstr_998:
    assume assertsPassed;
    goto SeqInstr_999;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2130} ldv_dummy_resourceless_instance_callback_22_7($u21, $u22);
    goto SeqInstr_998;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb2:
    assume out_$i2 == 1;
    goto corral_source_split_8911;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    out_$i2 := $eq.i32(out_$i1, 1);
    goto corral_source_split_8909;

  SeqInstr_1002:
    goto corral_source_split_8919;

  SeqInstr_1001:
    assume assertsPassed;
    goto SeqInstr_1002;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2131} ldv_dummy_resourceless_instance_callback_22_3($u21, $u22);
    goto SeqInstr_1001;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i3 == 1;
    goto corral_source_split_8917;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    out_$i4 := out_$i1;
    assume true;
    goto $bb6;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i3 := $eq.i32(out_$i1, 2);
    goto corral_source_split_8915;

  $bb3:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i1, out_$i2, out_$i3, out_$i4 := ldv_struct_ib_client_dummy_resourceless_instance_22_loop_$bb1(out_$i1, out_$i2, out_$i3, out_$i4);
    return;

  exit:
    return;
}



procedure ldv_struct_ib_client_dummy_resourceless_instance_22_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i32) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i32);
  modifies $M.1, $M.12, $M.10, assertsPassed, $M.11, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation ldv_struct_kernel_param_ops_dummy_resourceless_instance_23_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2139} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_8945;

  $bb8:
    assume {:verifier.code 0} true;
    assume out_$i8 == 1;
    goto $bb8_dummy;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_8958;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2147} out_$i7 := ldv_undef_int();
    call {:si_unique_call 2148} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_8957;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2146} ldv_free(out_$p3);
    goto corral_source_split_8956;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2145} ldv_dummy_resourceless_instance_callback_23_3($u23, out_$p3, $u24);
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2144} ldv_free(out_$p6);
    goto corral_source_split_8952;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2143} ldv_dummy_resourceless_instance_callback_23_9($u23, out_$p6, $u24);
    goto corral_source_split_8951;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2142} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_8950;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_8949;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_8947;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2140} out_$i4 := ldv_undef_int();
    call {:si_unique_call 2141} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_8946;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_8954;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8 := ldv_struct_kernel_param_ops_dummy_resourceless_instance_23_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8);
    return;

  exit:
    return;
}



procedure ldv_struct_kernel_param_ops_dummy_resourceless_instance_23_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i32, in_$i8: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i32, out_$i8: i1);
  modifies $CurrAddr, $M.123, $M.128;



implementation ldv_pm_platform_instance_1_loop_$bb13(in_$i22: i32, in_$i28: i1, in_$i29: i1, in_$i39: i32, in_$i40: i1) returns (out_$i22: i32, out_$i28: i1, out_$i29: i1, out_$i39: i32, out_$i40: i1)
{

  entry:
    out_$i22, out_$i28, out_$i29, out_$i39, out_$i40 := in_$i22, in_$i28, in_$i29, in_$i39, in_$i40;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb34:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    out_$i22 := out_$i39;
    goto $bb34_dummy;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i39, 1);
    goto corral_source_split_9130;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2200} out_$i39 := ldv_undef_int();
    call {:si_unique_call 2201} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_9129;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb21:
    assume out_$i28 == 1;
    goto corral_source_split_9110;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i22, 2);
    goto corral_source_split_9108;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2196} ldv_dispatch_pm_deregister_1_5();
    goto corral_source_split_9117;

  SeqInstr_1020:
    goto corral_source_split_9116;

  SeqInstr_1019:
    assume assertsPassed;
    goto SeqInstr_1020;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2195} ldv_dispatch_pm_register_1_6();
    goto SeqInstr_1019;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb25:
    assume out_$i29 == 1;
    goto corral_source_split_9114;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i22, 3);
    goto corral_source_split_9112;

  $bb22:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb34_dummy:
    call {:si_unique_call 1} out_$i22, out_$i28, out_$i29, out_$i39, out_$i40 := ldv_pm_platform_instance_1_loop_$bb13(out_$i22, out_$i28, out_$i29, out_$i39, out_$i40);
    return;

  exit:
    return;
}



procedure ldv_pm_platform_instance_1_loop_$bb13(in_$i22: i32, in_$i28: i1, in_$i29: i1, in_$i39: i32, in_$i40: i1) returns (out_$i22: i32, out_$i28: i1, out_$i29: i1, out_$i39: i32, out_$i40: i1);
  modifies $CurrAddr, $M.1, $M.40, $M.41, $M.42, $M.14, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.15, $M.26, $M.27, $M.28, $M.29, $M.66, $M.67, assertsPassed, $M.25, $M.17, $M.10, $M.12, $M.11, $M.18, $M.19, $M.16;



implementation ldv_pm_platform_instance_1_loop_$bb4(in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i18: i1, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i23: i1, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i22: i32, in_$i28: i1, in_$i29: i1, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i1) returns (out_$i3: i32, out_$p4: ref, out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i18: i1, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i23: i1, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i22: i32, out_$i28: i1, out_$i29: i1, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i1)
{

  entry:
    out_$i3, out_$p4, out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i22, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40 := in_$i3, in_$p4, in_$p5, in_$p6, in_$p7, in_$i8, in_$i9, in_$p10, in_$p11, in_$i12, in_$i13, in_$i14, in_$p15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i22, in_$i28, in_$i29, in_$p30, in_$p31, in_$p32, in_$p33, in_$i34, in_$i35, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_9058;

  $bb15:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$i3 := out_$i25;
    goto $bb15_dummy;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_9095;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2192} out_$i26 := ldv_undef_int();
    call {:si_unique_call 2193} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_9094;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_9093;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i14;
    goto $bb14;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    out_$i25 := 1;
    goto $bb14;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2199} ldv_free(out_$p38);
    goto corral_source_split_9127;

  $bb32:
    assume {:verifier.code 0} true;
    out_$p38 := $bitcast.ref.ref(out_$p31);
    goto corral_source_split_9126;

  $bb31:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    goto $bb32;

  SeqInstr_1023:
    goto corral_source_split_9124;

  SeqInstr_1022:
    assume assertsPassed;
    goto SeqInstr_1023;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2198} ldv_platform_instance_release_1_3(out_$p37, out_$p31);
    goto SeqInstr_1022;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.132, out_$p36);
    goto corral_source_split_9123;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($u25, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_9122;

  $bb30:
    assume out_$i35 == 1;
    goto corral_source_split_9121;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i64(out_$i34, 0);
    goto corral_source_split_9106;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p33);
    goto corral_source_split_9105;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.131, out_$p32);
    goto corral_source_split_9104;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($u25, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_9103;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(out_$p30);
    goto corral_source_split_9102;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2194} out_$p30 := ldv_xmalloc(1464);
    goto corral_source_split_9101;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb10:
    assume {:verifier.code 0} true;
    assume out_$i21 == 1;
    goto $bb11;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i20, 1);
    goto corral_source_split_9084;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2189} out_$i20 := ldv_undef_int();
    call {:si_unique_call 2190} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_9083;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2188} ldv_assume(out_$i19);
    goto corral_source_split_9082;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i1.i32(out_$i18);
    goto corral_source_split_9081;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i14, 0);
    goto corral_source_split_9080;

  $bb8:
    assume out_$i17 == 1;
    goto corral_source_split_9079;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i16, 0);
    goto corral_source_split_9077;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2186} out_$i16 := ldv_undef_int();
    call {:si_unique_call 2187} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_9076;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2185} ldv_free(out_$p15);
    goto corral_source_split_9075;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    out_$p15 := $bitcast.ref.ref(out_$p5);
    goto corral_source_split_9074;

  SeqInstr_1017:
    call {:si_unique_call 2184} {:cexpr "ldv_1_probed_default"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_9073;

  SeqInstr_1016:
    assume assertsPassed;
    goto SeqInstr_1017;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2183} out_$i14 := ldv_ldv_post_probe_159(out_$i13);
    goto SeqInstr_1016;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_9072;

  $bb6:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    out_$i13 := out_$i3;
    goto $bb7;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    out_$i13 := out_$i12;
    goto $bb7;

  SeqInstr_1014:
    call {:si_unique_call 2182} {:cexpr "ldv_1_probed_default"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_9070;

  SeqInstr_1013:
    assume assertsPassed;
    goto SeqInstr_1014;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2181} out_$i12 := ldv_platform_instance_probe_1_14(out_$p11, out_$p5);
    goto SeqInstr_1013;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.130, out_$p10);
    goto corral_source_split_9069;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref($u25, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_9068;

  $bb5:
    assume out_$i9 == 1;
    goto corral_source_split_9067;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    out_$i9 := $ne.i64(out_$i8, 0);
    goto corral_source_split_9065;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    out_$i8 := $p2i.ref.i64(out_$p7);
    goto corral_source_split_9064;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.129, out_$p6);
    goto corral_source_split_9063;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref($u25, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_9062;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2180} ldv_ldv_pre_probe_158();
    goto corral_source_split_9061;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    out_$p5 := $bitcast.ref.ref(out_$p4);
    goto corral_source_split_9060;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2179} out_$p4 := ldv_xmalloc(1464);
    goto corral_source_split_9059;

  $bb18:
    assume out_$i40 == 1;
    goto corral_source_split_9099;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb34;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i39, 1);
    goto corral_source_split_9130;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2200} out_$i39 := ldv_undef_int();
    call {:si_unique_call 2201} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_9129;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb21:
    assume out_$i28 == 1;
    goto corral_source_split_9110;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i22, 2);
    goto corral_source_split_9108;

  $bb13:
    call out_$i22, out_$i28, out_$i29, out_$i39, out_$i40 := ldv_pm_platform_instance_1_loop_$bb13(out_$i22, out_$i28, out_$i29, out_$i39, out_$i40);
    goto $bb13_last;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i20;
    goto $bb13;

  $bb34:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    out_$i22 := out_$i39;
    assume false;
    return;

  $bb12:
    assume !(out_$i21 == 1);
    goto corral_source_split_9091;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2196} ldv_dispatch_pm_deregister_1_5();
    goto corral_source_split_9117;

  SeqInstr_1020:
    goto corral_source_split_9116;

  SeqInstr_1019:
    assume assertsPassed;
    goto SeqInstr_1020;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2195} ldv_dispatch_pm_register_1_6();
    goto SeqInstr_1019;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb25:
    assume out_$i29 == 1;
    goto corral_source_split_9114;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i22, 3);
    goto corral_source_split_9112;

  $bb22:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2191} ldv_assume(out_$i24);
    goto corral_source_split_9089;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i1.i32(out_$i23);
    goto corral_source_split_9088;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i14, 0);
    goto corral_source_split_9087;

  $bb9:
    assume !(out_$i17 == 1);
    goto corral_source_split_9086;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i3, out_$p4, out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i22, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40 := ldv_pm_platform_instance_1_loop_$bb4(out_$i3, out_$p4, out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i22, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40);
    return;

  exit:
    return;
}



procedure ldv_pm_platform_instance_1_loop_$bb4(in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i18: i1, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i23: i1, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i22: i32, in_$i28: i1, in_$i29: i1, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i1) returns (out_$i3: i32, out_$p4: ref, out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i18: i1, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i23: i1, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i22: i32, out_$i28: i1, out_$i29: i1, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i1);
  modifies $M.1, $M.40, $M.41, $M.42, $M.14, $M.15, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.66, $M.67, assertsPassed, $CurrAddr, $M.26, $M.27, $M.28, $M.29, $M.25, $M.12, $M.10, $M.11, $M.17, $M.18, $M.19, $M.16, $M.70, $M.71;


