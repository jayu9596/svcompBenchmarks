var $M.0: [ref]i8;

var $M.1: [ref]ref;

var $M.2: [ref]ref;

var $M.3: [ref]ref;

var $M.4: [ref]ref;

var $M.5: [ref]i24;

var $M.6: [ref]i8;

var $M.7: ref;

var $M.8: [ref]i32;

var $M.9: ref;

var $M.10: ref;

var $M.11: i32;

var $M.12: ref;

var $M.13: i32;

var $M.14: ref;

var $M.15: [ref]ref;

var $M.16: [ref]i8;

var $M.17: i32;

var $M.18: ref;

var $M.19: ref;

var $M.20: ref;

var $M.21: ref;

var $M.22: [ref]i8;

var $M.23: i32;

var $M.24: i32;

var $M.25: i32;

var $M.26: i32;

var $M.27: i32;

var $M.28: i32;

var $M.29: i32;

var $M.30: i32;

var $M.31: i32;

var $M.32: i32;

var $M.33: i32;

var $M.34: i32;

var $M.35: i32;

var $M.36: i32;

var $M.37: i32;

var $M.38: i32;

var $M.39: ref;

var $M.40: i32;

var $M.41: i32;

var $M.56: [ref]i8;

var $M.91: [ref]i8;

var $M.92: [ref]i8;

var $M.93: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 400301);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const acm_driver_group1: ref;

axiom acm_driver_group1 == $sub.ref(0, 2060);

const acm_port_ops_group1: ref;

axiom acm_port_ops_group1 == $sub.ref(0, 3092);

const acm_ops_group0: ref;

axiom acm_ops_group0 == $sub.ref(0, 4124);

const acm_ops_group1: ref;

axiom acm_ops_group1 == $sub.ref(0, 5156);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 6184);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 7212);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 8240);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 9268);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 10296);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 11324);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 12352);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 13380);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 14408);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 15436);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 16464);

const ldv_retval_6: ref;

axiom ldv_retval_6 == $sub.ref(0, 17492);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 18520);

const usb_counter: ref;

axiom usb_counter == $sub.ref(0, 19548);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 20576);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 21604);

const INTERF_STATE: ref;

axiom INTERF_STATE == $sub.ref(0, 22632);

const SERIAL_STATE: ref;

axiom SERIAL_STATE == $sub.ref(0, 23660);

const usb_intfdata: ref;

axiom usb_intfdata == $sub.ref(0, 24692);

const usb_urb: ref;

axiom usb_urb == $sub.ref(0, 25724);

const usb_dev: ref;

axiom usb_dev == $sub.ref(0, 26756);

const dev_counter: ref;

axiom dev_counter == $sub.ref(0, 27784);

const completeFnIntCounter: ref;

axiom completeFnIntCounter == $sub.ref(0, 28812);

const completeFnBulkCounter: ref;

axiom completeFnBulkCounter == $sub.ref(0, 29840);

const completeFnInt: ref;

axiom completeFnInt == $sub.ref(0, 30872);

const completeFnBulk: ref;

axiom completeFnBulk == $sub.ref(0, 31904);

const __mod_usb_device_table: ref;

axiom __mod_usb_device_table == $sub.ref(0, 32960);

const dev_attr_iCountryCodeRelDate: ref;

axiom dev_attr_iCountryCodeRelDate == $sub.ref(0, 34032);

const dev_attr_wCountryCodes: ref;

axiom dev_attr_wCountryCodes == $sub.ref(0, 35104);

const dev_attr_bmCapabilities: ref;

axiom dev_attr_bmCapabilities == $sub.ref(0, 36176);

const acm_port_ops: ref;

axiom acm_port_ops == $sub.ref(0, 37248);

const acm_ops: ref;

axiom acm_ops == $sub.ref(0, 38544);

const acm_tty_driver: ref;

axiom acm_tty_driver == $sub.ref(0, 39576);

const {:count 98} acm_ids: ref;

axiom acm_ids == $sub.ref(0, 43736);

const acm_driver: ref;

axiom acm_driver == $sub.ref(0, 45064);

const {:count 32} acm_table: ref;

axiom acm_table == $sub.ref(0, 46344);

const acm_table_lock: ref;

axiom acm_table_lock == $sub.ref(0, 47536);

const {:count 25} .str.21: ref;

axiom .str.21 == $sub.ref(0, 48585);

const {:count 15} .str.22: ref;

axiom .str.22 == $sub.ref(0, 49624);

const {:count 8} .str.3: ref;

axiom .str.3 == $sub.ref(0, 50656);

const {:count 32} .str.10: ref;

axiom .str.10 == $sub.ref(0, 51712);

const {:count 20} .str.11: ref;

axiom .str.11 == $sub.ref(0, 52756);

const {:count 44} .str.1: ref;

axiom .str.1 == $sub.ref(0, 53824);

const {:count 13} .str.2: ref;

axiom .str.2 == $sub.ref(0, 54861);

const {:count 18} .str.77: ref;

axiom .str.77 == $sub.ref(0, 55903);

const {:count 220} .str.5: ref;

axiom .str.5 == $sub.ref(0, 57147);

const {:count 4} .str.6: ref;

axiom .str.6 == $sub.ref(0, 58175);

const {:count 15} .str.76: ref;

axiom .str.76 == $sub.ref(0, 59214);

const {:count 29} .str.31: ref;

axiom .str.31 == $sub.ref(0, 60267);

const {:count 10} .str.32: ref;

axiom .str.32 == $sub.ref(0, 61301);

const {:count 39} .str.33: ref;

axiom .str.33 == $sub.ref(0, 62364);

const {:count 35} .str.34: ref;

axiom .str.34 == $sub.ref(0, 63423);

const {:count 18} .str.35: ref;

axiom .str.35 == $sub.ref(0, 64465);

const {:count 46} .str.36: ref;

axiom .str.36 == $sub.ref(0, 65535);

const {:count 60} .str.37: ref;

axiom .str.37 == $sub.ref(0, 66619);

const {:count 43} .str.38: ref;

axiom .str.38 == $sub.ref(0, 67686);

const {:count 55} .str.39: ref;

axiom .str.39 == $sub.ref(0, 68765);

const {:count 32} .str.40: ref;

axiom .str.40 == $sub.ref(0, 69821);

const {:count 51} .str.41: ref;

axiom .str.41 == $sub.ref(0, 70896);

const {:count 15} .str.42: ref;

axiom .str.42 == $sub.ref(0, 71935);

const {:count 63} .str.43: ref;

axiom .str.43 == $sub.ref(0, 73022);

const {:count 48} .str.44: ref;

axiom .str.44 == $sub.ref(0, 74094);

const {:count 32} .str.45: ref;

axiom .str.45 == $sub.ref(0, 75150);

const {:count 38} .str.46: ref;

axiom .str.46 == $sub.ref(0, 76212);

const {:count 36} .str.47: ref;

axiom .str.47 == $sub.ref(0, 77272);

const {:count 43} .str.48: ref;

axiom .str.48 == $sub.ref(0, 78339);

const {:count 22} .str.49: ref;

axiom .str.49 == $sub.ref(0, 79385);

const {:count 29} .str.50: ref;

axiom .str.50 == $sub.ref(0, 80438);

const {:count 26} .str.51: ref;

axiom .str.51 == $sub.ref(0, 81488);

const {:count 13} .str.52: ref;

axiom .str.52 == $sub.ref(0, 82525);

const {:count 27} .str.53: ref;

axiom .str.53 == $sub.ref(0, 83576);

const {:count 26} .str.54: ref;

axiom .str.54 == $sub.ref(0, 84626);

const {:count 12} .str.55: ref;

axiom .str.55 == $sub.ref(0, 85662);

const {:count 35} .str.56: ref;

axiom .str.56 == $sub.ref(0, 86721);

const {:count 36} .str.57: ref;

axiom .str.57 == $sub.ref(0, 87781);

const {:count 33} .str.58: ref;

axiom .str.58 == $sub.ref(0, 88838);

const {:count 46} .str.59: ref;

axiom .str.59 == $sub.ref(0, 89908);

const {:count 41} .str.60: ref;

axiom .str.60 == $sub.ref(0, 90973);

const {:count 42} .str.61: ref;

axiom .str.61 == $sub.ref(0, 92039);

const {:count 26} .str.62: ref;

axiom .str.62 == $sub.ref(0, 93089);

const {:count 13} .str.14: ref;

axiom .str.14 == $sub.ref(0, 94126);

const {:count 45} .str.15: ref;

axiom .str.15 == $sub.ref(0, 95195);

const {:count 13} .str.69: ref;

axiom .str.69 == $sub.ref(0, 96232);

const {:count 40} .str.70: ref;

axiom .str.70 == $sub.ref(0, 97296);

const {:count 38} .str.71: ref;

axiom .str.71 == $sub.ref(0, 98358);

const {:count 29} .str.72: ref;

axiom .str.72 == $sub.ref(0, 99411);

const {:count 21} .str.73: ref;

axiom .str.73 == $sub.ref(0, 100456);

const {:count 83} .str.74: ref;

axiom .str.74 == $sub.ref(0, 101563);

const {:count 74} .str.75: ref;

axiom .str.75 == $sub.ref(0, 102661);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 23} .str.63: ref;

axiom .str.63 == $sub.ref(0, 103708);

const {:count 19} .str.64: ref;

axiom .str.64 == $sub.ref(0, 104751);

const {:count 30} .str.65: ref;

axiom .str.65 == $sub.ref(0, 105805);

const {:count 18} .str.12: ref;

axiom .str.12 == $sub.ref(0, 106847);

const {:count 24} .str.13: ref;

axiom .str.13 == $sub.ref(0, 107895);

const {:count 15} .str.7: ref;

axiom .str.7 == $sub.ref(0, 108934);

const {:count 20} .str.16: ref;

axiom .str.16 == $sub.ref(0, 109978);

const {:count 28} .str.17: ref;

axiom .str.17 == $sub.ref(0, 111030);

const {:count 118} .str.18: ref;

axiom .str.18 == $sub.ref(0, 112172);

const {:count 27} .str.19: ref;

axiom .str.19 == $sub.ref(0, 113223);

const {:count 16} .str.4: ref;

axiom .str.4 == $sub.ref(0, 114263);

const {:count 14} .str.8: ref;

axiom .str.8 == $sub.ref(0, 115301);

const {:count 13} .str.9: ref;

axiom .str.9 == $sub.ref(0, 116338);

const {:count 16} .str.20: ref;

axiom .str.20 == $sub.ref(0, 117378);

const {:count 21} .str.23: ref;

axiom .str.23 == $sub.ref(0, 118423);

const {:count 18} .str.30: ref;

axiom .str.30 == $sub.ref(0, 119465);

const {:count 18} .str.27: ref;

axiom .str.27 == $sub.ref(0, 120507);

const {:count 38} .str.28: ref;

axiom .str.28 == $sub.ref(0, 121569);

const {:count 18} .str.29: ref;

axiom .str.29 == $sub.ref(0, 122611);

const {:count 15} .str.66: ref;

axiom .str.66 == $sub.ref(0, 123650);

const .str: ref;

axiom .str == $sub.ref(0, 124677);

const {:count 14} .str.67: ref;

axiom .str.67 == $sub.ref(0, 125715);

const {:count 20} .str.68: ref;

axiom .str.68 == $sub.ref(0, 126759);

const {:count 4} .str.24: ref;

axiom .str.24 == $sub.ref(0, 127787);

const {:count 7} .str.25: ref;

axiom .str.25 == $sub.ref(0, 128818);

const tty_std_termios: ref;

axiom tty_std_termios == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 78} .str.26: ref;

axiom .str.26 == $sub.ref(0, 129920);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 130952);

const {:count 3} .str.1.168: ref;

axiom .str.1.168 == $sub.ref(0, 131979);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 133017);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 134045);

const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 135077);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p2 := ldv_malloc($i0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 136109);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 137141);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 5} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 6} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p4 := malloc($i0);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 1} true;
    call {:si_unique_call 8} __VERIFIER_assume($i7);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 138173);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 9} $r := $malloc($i0);
    return;
}



const acm_probe: ref;

axiom acm_probe == $sub.ref(0, 139205);

procedure acm_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.15, $M.10, $CurrAddr, $M.12, $M.11, $M.14, $M.13, $M.9;



implementation acm_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i24;
  var $i72: i24;
  var $i73: i24;
  var $p74: ref;
  var $p75: ref;
  var $i76: i8;
  var $i77: i64;
  var $i78: i64;
  var $i79: i64;
  var $i80: i1;
  var $p81: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i97: i32;
  var $p98: ref;
  var $i99: i1;
  var $p110: ref;
  var $i111: i8;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;
  var $p121: ref;
  var $i122: i8;
  var $i123: i32;
  var $i124: i1;
  var $i125: i1;
  var $i126: i1;
  var $i127: i1;
  var $i128: i1;
  var $i129: i1;
  var $i130: i1;
  var $i131: i64;
  var $i132: i1;
  var $p133: ref;
  var $p142: ref;
  var $i143: i8;
  var $p144: ref;
  var $i145: i8;
  var $p146: ref;
  var $i147: i8;
  var $i148: i32;
  var $i149: i64;
  var $i150: i1;
  var $i151: i32;
  var $i152: i32;
  var $i153: i1;
  var $p154: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $i162: i24;
  var $i163: i24;
  var $i164: i24;
  var $p165: ref;
  var $p166: ref;
  var $i167: i8;
  var $i168: i64;
  var $i169: i64;
  var $i170: i64;
  var $i171: i1;
  var $p172: ref;
  var $p173: ref;
  var $i174: i8;
  var $i175: i32;
  var $i176: i8;
  var $i177: i32;
  var $p136: ref;
  var $i137: i8;
  var $i138: i32;
  var $p139: ref;
  var $p140: ref;
  var $p116: ref;
  var $i117: i8;
  var $i118: i32;
  var $p119: ref;
  var $p120: ref;
  var $i179: i8;
  var $i180: i32;
  var $i181: i32;
  var $i182: i8;
  var $i183: i64;
  var $p184: ref;
  var $i185: i1;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i32;
  var $i108: i32;
  var $i109: i8;
  var $i186: i8;
  var $i187: i32;
  var $p188: ref;
  var $p189: ref;
  var $i100: i8;
  var $i101: i32;
  var $p102: ref;
  var $p103: ref;
  var $i190: i64;
  var $i191: i1;
  var $i192: i1;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $i199: i24;
  var $i200: i24;
  var $i201: i24;
  var $p202: ref;
  var $p203: ref;
  var $i204: i8;
  var $i205: i64;
  var $i206: i64;
  var $i207: i64;
  var $i208: i1;
  var $p209: ref;
  var $i211: i64;
  var $i212: i1;
  var $p213: ref;
  var $p216: ref;
  var $i214: i32;
  var $p215: ref;
  var $p217: ref;
  var $p218: ref;
  var $p220: ref;
  var $i221: i8;
  var $i222: i32;
  var $i223: i1;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $i230: i24;
  var $i231: i24;
  var $i232: i24;
  var $p233: ref;
  var $p234: ref;
  var $i235: i8;
  var $i236: i64;
  var $i237: i64;
  var $i238: i64;
  var $i239: i1;
  var $p240: ref;
  var $p242: ref;
  var $p253: ref;
  var $i254: i8;
  var $i255: i32;
  var $p256: ref;
  var $p257: ref;
  var $i258: i8;
  var $i259: i32;
  var $p260: ref;
  var $i261: i64;
  var $i262: i1;
  var $i263: i64;
  var $i264: i1;
  var $p265: ref;
  var $p266: ref;
  var $p267: ref;
  var $p268: ref;
  var $p269: ref;
  var $p270: ref;
  var $i271: i24;
  var $i272: i24;
  var $i273: i24;
  var $p274: ref;
  var $p275: ref;
  var $i276: i8;
  var $i277: i64;
  var $i278: i64;
  var $i279: i64;
  var $i280: i1;
  var $p281: ref;
  var $i249: i32;
  var $i250: i32;
  var $p251: ref;
  var $p252: ref;
  var $i283: i1;
  var $p284: ref;
  var $p285: ref;
  var $p286: ref;
  var $p287: ref;
  var $p288: ref;
  var $p289: ref;
  var $i290: i24;
  var $i291: i24;
  var $i292: i24;
  var $p293: ref;
  var $p294: ref;
  var $i295: i8;
  var $i296: i64;
  var $i297: i64;
  var $i298: i64;
  var $i299: i1;
  var $p300: ref;
  var $i302: i64;
  var $i303: i64;
  var $i304: i1;
  var $p305: ref;
  var $i307: i64;
  var $p308: ref;
  var $p309: ref;
  var $p311: ref;
  var $i312: i8;
  var $i313: i32;
  var $i314: i1;
  var $p315: ref;
  var $i244: i8;
  var $p245: ref;
  var $i246: i64;
  var $p247: ref;
  var $p248: ref;
  var $p321: ref;
  var $p322: ref;
  var $p323: ref;
  var $p324: ref;
  var $i325: i64;
  var $p327: ref;
  var $i328: i32;
  var $i329: i1;
  var $i333: i32;
  var $i334: i1;
  var $i337: i32;
  var $i338: i1;
  var $p335: ref;
  var $p336: ref;
  var $p330: ref;
  var $p331: ref;
  var $p332: ref;
  var $i339: i32;
  var $i340: i1;
  var $p317: ref;
  var $p318: ref;
  var $p319: ref;
  var $i320: i32;
  var $p341: ref;
  var $p342: ref;
  var $p343: ref;
  var $i344: i64;
  var $i345: i1;
  var $i346: i64;
  var $i347: i1;
  var $i348: i64;
  var $i349: i1;
  var $i35: i8;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p359: ref;
  var $p360: ref;
  var $p362: ref;
  var $i363: i8;
  var $i364: i32;
  var $i365: i1;
  var $p366: ref;
  var $p367: ref;
  var $p369: ref;
  var $i370: i8;
  var $i371: i32;
  var $i372: i1;
  var $p373: ref;
  var $p374: ref;
  var $p375: ref;
  var $p376: ref;
  var $p377: ref;
  var $p378: ref;
  var $i379: i24;
  var $i380: i24;
  var $i381: i24;
  var $p382: ref;
  var $p383: ref;
  var $i384: i8;
  var $i385: i64;
  var $i386: i64;
  var $i387: i64;
  var $i388: i1;
  var $p389: ref;
  var $p391: ref;
  var $p392: ref;
  var $i393: i1;
  var $i394: i64;
  var $i395: i64;
  var $i396: i1;
  var $i397: i1;
  var $i398: i32;
  var $i399: i1;
  var $p400: ref;
  var $p401: ref;
  var $p402: ref;
  var $p403: ref;
  var $p404: ref;
  var $p405: ref;
  var $i406: i24;
  var $i407: i24;
  var $i408: i24;
  var $p409: ref;
  var $p410: ref;
  var $i411: i8;
  var $i412: i64;
  var $i413: i64;
  var $i414: i64;
  var $i415: i1;
  var $p416: ref;
  var $p418: ref;
  var $p419: ref;
  var $p421: ref;
  var $i422: i8;
  var $i423: i32;
  var $i424: i1;
  var $p425: ref;
  var $p426: ref;
  var $p428: ref;
  var $i429: i8;
  var $i430: i32;
  var $i431: i1;
  var $p432: ref;
  var $p433: ref;
  var $p434: ref;
  var $p435: ref;
  var $p437: ref;
  var $p438: ref;
  var $p439: ref;
  var $p440: ref;
  var $p441: ref;
  var $p442: ref;
  var $p443: ref;
  var $p444: ref;
  var $p445: ref;
  var $p447: ref;
  var $i448: i32;
  var $i449: i1;
  var $p450: ref;
  var $p451: ref;
  var $p452: ref;
  var $p453: ref;
  var $p454: ref;
  var $p455: ref;
  var $i456: i24;
  var $i457: i24;
  var $i458: i24;
  var $p459: ref;
  var $p460: ref;
  var $i461: i8;
  var $i462: i64;
  var $i463: i64;
  var $i464: i64;
  var $i465: i1;
  var $p466: ref;
  var $p468: ref;
  var $p469: ref;
  var $i350: i8;
  var $i351: i64;
  var $p352: ref;
  var $p353: ref;
  var $p354: ref;
  var $p355: ref;
  var $p356: ref;
  var $p357: ref;
  var $i358: i32;
  var $p470: ref;
  var $p471: ref;
  var $p472: ref;
  var $p473: ref;
  var $p474: ref;
  var $p475: ref;
  var $i476: i24;
  var $i477: i24;
  var $i478: i24;
  var $p479: ref;
  var $p480: ref;
  var $i481: i8;
  var $i482: i64;
  var $i483: i64;
  var $i484: i64;
  var $i485: i1;
  var $p486: ref;
  var $p488: ref;
  var $p489: ref;
  var $i490: i64;
  var $i491: i1;
  var $p492: ref;
  var $i495: i32;
  var $i496: i1;
  var $p497: ref;
  var $p499: ref;
  var $i500: i32;
  var $i501: i32;
  var $i502: i1;
  var $i503: i32;
  var $i504: i32;
  var $i505: i8;
  var $p506: ref;
  var $i507: i8;
  var $i508: i8;
  var $i509: i8;
  var $i510: i8;
  var $i511: i32;
  var $i512: i32;
  var $p513: ref;
  var $p514: ref;
  var $p515: ref;
  var $p516: ref;
  var $p517: ref;
  var $i518: i32;
  var $p519: ref;
  var $i520: i64;
  var $i521: i1;
  var $p522: ref;
  var $i523: i32;
  var $i524: i32;
  var $p525: ref;
  var $p526: ref;
  var $p527: ref;
  var $p528: ref;
  var $p529: ref;
  var $p530: ref;
  var $p532: ref;
  var $p533: ref;
  var $p534: ref;
  var $p536: ref;
  var $p538: ref;
  var $p540: ref;
  var $p541: ref;
  var $p544: ref;
  var $p545: ref;
  var $p546: ref;
  var $p549: ref;
  var $p550: ref;
  var $p551: ref;
  var $p552: ref;
  var $i553: i8;
  var $i554: i32;
  var $i555: i32;
  var $i556: i32;
  var $p557: ref;
  var $i558: i32;
  var $i559: i8;
  var $p560: ref;
  var $i561: i8;
  var $i562: i8;
  var $i563: i8;
  var $i564: i8;
  var $i565: i8;
  var $p566: ref;
  var $p567: ref;
  var $i568: i8;
  var $i569: i32;
  var $i570: i1;
  var $p571: ref;
  var $i572: i8;
  var $p573: ref;
  var $p574: ref;
  var $p576: ref;
  var $i577: i64;
  var $p578: ref;
  var $p579: ref;
  var $i580: i64;
  var $i581: i1;
  var $p582: ref;
  var $p585: ref;
  var $i586: i32;
  var $i587: i1;
  var $p588: ref;
  var $p591: ref;
  var $p592: ref;
  var $p593: ref;
  var $p594: ref;
  var $i595: i64;
  var $i596: i1;
  var $p597: ref;
  var $p601: ref;
  var $p602: ref;
  var $i603: i64;
  var $p604: ref;
  var $p605: ref;
  var $p606: ref;
  var $i607: i64;
  var $p608: ref;
  var $p609: ref;
  var $p610: ref;
  var $p611: ref;
  var $p612: ref;
  var $i613: i64;
  var $i614: i1;
  var $p615: ref;
  var $p618: ref;
  var $p619: ref;
  var $p620: ref;
  var $i621: i64;
  var $i622: i1;
  var $p623: ref;
  var $p625: ref;
  var $i626: i32;
  var $i627: i32;
  var $p628: ref;
  var $p629: ref;
  var $i630: i64;
  var $p631: ref;
  var $p632: ref;
  var $p633: ref;
  var $i634: i8;
  var $i635: i32;
  var $i636: i1;
  var $p637: ref;
  var $p638: ref;
  var $p639: ref;
  var $i640: i32;
  var $p641: ref;
  var $p642: ref;
  var $p643: ref;
  var $i644: i32;
  var $p645: ref;
  var $p646: ref;
  var $i647: i8;
  var $i648: i32;
  var $p649: ref;
  var $p650: ref;
  var $p651: ref;
  var $i652: i32;
  var $p653: ref;
  var $p654: ref;
  var $p655: ref;
  var $i656: i32;
  var $p657: ref;
  var $i658: i64;
  var $p660: ref;
  var $i661: i64;
  var $p662: ref;
  var $i663: i32;
  var $i664: i1;
  var $i600: i32;
  var $p666: ref;
  var $p667: ref;
  var $i668: i64;
  var $p669: ref;
  var $p670: ref;
  var $p671: ref;
  var $p672: ref;
  var $p673: ref;
  var $i674: i64;
  var $i675: i1;
  var $p676: ref;
  var $i679: i32;
  var $i680: i1;
  var $p681: ref;
  var $i682: i8;
  var $i683: i32;
  var $i684: i32;
  var $p685: ref;
  var $p686: ref;
  var $i687: i32;
  var $p688: ref;
  var $i689: i32;
  var $p690: ref;
  var $p691: ref;
  var $i692: i8;
  var $i693: i32;
  var $p694: ref;
  var $i695: i8;
  var $i696: i32;
  var $i697: i32;
  var $p698: ref;
  var $p699: ref;
  var $i700: i32;
  var $p701: ref;
  var $i702: i32;
  var $p703: ref;
  var $p704: ref;
  var $p705: ref;
  var $p706: ref;
  var $i707: i32;
  var $i708: i32;
  var $p709: ref;
  var $p710: ref;
  var $p711: ref;
  var $p712: ref;
  var $i713: i32;
  var $i714: i1;
  var $i665: i32;
  var $p715: ref;
  var $p716: ref;
  var $i717: i32;
  var $i718: i1;
  var $i719: i64;
  var $i720: i1;
  var $p721: ref;
  var $i722: i8;
  var $i723: i32;
  var $i724: i32;
  var $i725: i64;
  var $p726: ref;
  var $p727: ref;
  var $p728: ref;
  var $p729: ref;
  var $i730: i64;
  var $i731: i1;
  var $p732: ref;
  var $i733: i8;
  var $i734: i32;
  var $i735: i32;
  var $p736: ref;
  var $p737: ref;
  var $i738: i8;
  var $i739: i32;
  var $i740: i32;
  var $i741: i64;
  var $p742: ref;
  var $p743: ref;
  var $p744: ref;
  var $p745: ref;
  var $p746: ref;
  var $i747: i8;
  var $i748: i32;
  var $p749: ref;
  var $p750: ref;
  var $i751: i32;
  var $i752: i1;
  var $p753: ref;
  var $p754: ref;
  var $p755: ref;
  var $p756: ref;
  var $p757: ref;
  var $i758: i32;
  var $i759: i1;
  var $p760: ref;
  var $p761: ref;
  var $p762: ref;
  var $p763: ref;
  var $p764: ref;
  var $p765: ref;
  var $i766: i8;
  var $i767: i32;
  var $i768: i32;
  var $p769: ref;
  var $p770: ref;
  var $i771: i32;
  var $p772: ref;
  var $p773: ref;
  var $p774: ref;
  var $p775: ref;
  var $i776: i8;
  var $i777: i32;
  var $i778: i1;
  var $p779: ref;
  var $i780: i8;
  var $i781: i32;
  var $i782: i32;
  var $p783: ref;
  var $p784: ref;
  var $p785: ref;
  var $i786: i32;
  var $i787: i32;
  var $p788: ref;
  var $p789: ref;
  var $p790: ref;
  var $p791: ref;
  var $i792: i64;
  var $p793: ref;
  var $p794: ref;
  var $p795: ref;
  var $p796: ref;
  var $p798: ref;
  var $i799: i32;
  var $p802: ref;
  var $p804: ref;
  var $p805: ref;
  var $p806: ref;
  var $p808: ref;
  var $p810: ref;
  var $p812: ref;
  var $p813: ref;
  var $p814: ref;
  var $p815: ref;
  var $p816: ref;
  var $i817: i64;
  var $i818: i1;
  var $p819: ref;
  var $i820: i64;
  var $i821: i32;
  var $p822: ref;
  var $p823: ref;
  var $i824: i64;
  var $i825: i1;
  var $p826: ref;
  var $p827: ref;
  var $p828: ref;
  var $p829: ref;
  var $p830: ref;
  var $p831: ref;
  var $p832: ref;
  var $p833: ref;
  var $p834: ref;
  var $i678: i32;
  var $i836: i64;
  var $p839: ref;
  var $p840: ref;
  var $i841: i32;
  var $i842: i1;
  var $i835: i32;
  var $i617: i32;
  var $i844: i64;
  var $p846: ref;
  var $p847: ref;
  var $i848: i32;
  var $i849: i1;
  var $i843: i32;
  var $p850: ref;
  var $p851: ref;
  var $i599: i32;
  var $i590: i32;
  var $i852: i64;
  var $p853: ref;
  var $p854: ref;
  var $p855: ref;
  var $i856: i64;
  var $i584: i32;
  var $p857: ref;
  var $i494: i32;
  var $i29: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var vslice_dummy_var_27: i32;
  var vslice_dummy_var_28: i32;
  var vslice_dummy_var_29: i32;
  var vslice_dummy_var_30: i32;
  var vslice_dummy_var_31: i32;
  var vslice_dummy_var_32: i32;
  var vslice_dummy_var_33: i32;
  var vslice_dummy_var_34: i32;
  var vslice_dummy_var_35: i32;
  var vslice_dummy_var_36: i32;
  var vslice_dummy_var_37: i32;
  var vslice_dummy_var_38: i32;
  var vslice_dummy_var_39: i32;
  var vslice_dummy_var_40: i32;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: i32;
  var vslice_dummy_var_43: i32;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: ref;
  var vslice_dummy_var_48: ref;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i32;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: i32;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $p11 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} $p12 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $p13 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} $p14 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} $p15 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $p16 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    call {:si_unique_call 25} {:cexpr "buflen"} boogie_si_record_i32($i24);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} $p25 := interface_to_usbdev($p0);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    call {:si_unique_call 27} {:cexpr "quirks"} boogie_si_record_i64($i27);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 32);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i27, 2);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i31 := (if $i30 == 1 then 1 else 16);
    call {:si_unique_call 28} {:cexpr "num_rx_buf"} boogie_si_record_i32($i31);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i27, 1);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p20);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i40 := $eq.i64($i39, 0);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i24, 0);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i97, $p98 := $i24, $p20;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $i99 := $sgt.i32($i97, 0);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $i100, $i101, $p102, $p103 := 0, $sub.i32(0, 1), $0.ref, $0.ref;
    assume {:branchcond $i99} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i99 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i190 := $p2i.ref.i64($p103);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $i191 := $eq.i64($i190, 0);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i191 == 1);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p103, $mul.ref(0, 5)), $mul.ref(3, 1));
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i254 := $load.i8($M.0, $p253);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $i255 := $zext.i8.i32($i254);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $p256 := usb_ifnum_to_if($p25, $i255);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p103, $mul.ref(0, 5)), $mul.ref(4, 1));
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $i258 := $load.i8($M.0, $p257);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i259 := $zext.i8.i32($i258);
    call {:si_unique_call 48} {:cexpr "data_interface_num"} boogie_si_record_i32($i259);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} $p260 := usb_ifnum_to_if($p25, $i259);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $i261 := $p2i.ref.i64($p256);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i262 := $eq.i64($i261, 0);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    assume {:branchcond $i262} true;
    goto $bb86, $bb88;

  $bb88:
    assume !($i262 == 1);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i263 := $p2i.ref.i64($p260);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $i264 := $eq.i64($i263, 0);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    assume {:branchcond $i264} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i264 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $i249, $i250, $p251, $p252 := $i101, $i259, $p260, $p256;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $i283 := $ne.i32($i250, $i249);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    assume {:branchcond $i283} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i283 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $i302 := $p2i.ref.i64($p252);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i303 := $p2i.ref.i64($p251);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $i304 := $eq.i64($i302, $i303);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    assume {:branchcond $i304} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $i35, $p36, $p37, $p38 := $i100, $p251, $p252, $p102;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($p36, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p360 := $load.ref($M.0, $p359);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($add.ref($p360, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(5, 1));
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i363 := $load.i8($M.0, $p362);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i364 := $zext.i8.i32($i363);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i365 := $ne.i32($i364, 10);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    assume {:branchcond $i365} true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i365 == 1);
    assume {:verifier.code 0} true;
    $p391, $p392 := $p36, $p37;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i393 := $eq.i32(0, 0);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    assume {:branchcond $i393} true;
    goto $bb138, $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    assume !($i393 == 1);
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    $i397 := $eq.i32(0, 0);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    assume {:branchcond $i397} true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i397 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($add.ref($p391, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p419 := $load.ref($M.0, $p418);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($add.ref($add.ref($p419, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $i422 := $load.i8($M.0, $p421);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $i423 := $zext.i8.i32($i422);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $i424 := $ule.i32($i423, 1);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i424} true;
    goto $bb153, $bb155;

  $bb155:
    assume !($i424 == 1);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($add.ref($p392, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $p426 := $load.ref($M.0, $p425);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $p428 := $add.ref($add.ref($add.ref($p426, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i429 := $load.i8($M.0, $p428);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i430 := $zext.i8.i32($i429);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i431 := $eq.i32($i430, 0);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    assume {:branchcond $i431} true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i431 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($add.ref($p392, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $p433 := $load.ref($M.0, $p432);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $p434 := $add.ref($add.ref($p433, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $p435 := $load.ref($M.0, $p434);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $p437 := $add.ref($add.ref($p391, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $p438 := $load.ref($M.0, $p437);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $p439 := $add.ref($add.ref($p438, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $p440 := $load.ref($M.0, $p439);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($add.ref($p440, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $p442 := $add.ref($add.ref($p391, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $p443 := $load.ref($M.0, $p442);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p444 := $add.ref($add.ref($p443, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p445 := $load.ref($M.0, $p444);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($add.ref($p445, $mul.ref(1, 64)), $mul.ref(0, 1));
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} $i448 := usb_endpoint_dir_in($p441);
    call {:si_unique_call 86} {:cexpr "tmp___13"} boogie_si_record_i32($i448);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $i449 := $eq.i32($i448, 0);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i449} true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i449 == 1);
    assume {:verifier.code 0} true;
    $p468, $p469 := $p447, $p440;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i350, $i351, $p352, $p353, $p354, $p355, $p356, $p357, $i358 := $i35, $i27, $p468, $p469, $p435, $p391, $p392, $p38, 0;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $p470 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p470, .str.3);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p471, .str.32);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $p472 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p472, .str.5);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $p473 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p473, .str.49);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $p474 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $p475 := $bitcast.ref.ref($p474);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i476 := $load.i24($M.5, $p475);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $i477 := $and.i24($i476, $sub.i24(0, 262144));
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i478 := $or.i24($i477, 1187);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p475, $i478);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $p479 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p479, 0);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $p480 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i481 := $load.i8($M.6, $p480);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $i482 := $zext.i8.i64($i481);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i483 := $and.i64($i482, 1);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} $i484 := ldv__builtin_expect($i483, 0);
    call {:si_unique_call 76} {:cexpr "tmp___14"} boogie_si_record_i64($i484);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $i485 := $ne.i64($i484, 0);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    assume {:branchcond $i485} true;
    goto $bb165, $bb166;

  $bb166:
    assume !($i485 == 1);
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} $p488 := kzalloc(3000, 208);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $p489 := $bitcast.ref.ref($p488);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $i490 := $p2i.ref.i64($p489);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i491 := $eq.i64($i490, 0);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    assume {:branchcond $i491} true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i491 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} $i495 := acm_alloc_minor($p489);
    call {:si_unique_call 94} {:cexpr "minor"} boogie_si_record_i32($i495);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i496 := $eq.i32($i495, 32);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    assume {:branchcond $i496} true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i496 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} $i500 := usb_endpoint_maxp($p354);
    call {:si_unique_call 98} {:cexpr "ctrlsize"} boogie_si_record_i32($i500);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} $i501 := usb_endpoint_maxp($p353);
    call {:si_unique_call 100} {:cexpr "tmp___16"} boogie_si_record_i32($i501);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i502 := $eq.i64($i351, 2);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i503 := (if $i502 == 1 then 1 else 2);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $i504 := $mul.i32($i501, $i503);
    call {:si_unique_call 101} {:cexpr "readsize"} boogie_si_record_i32($i504);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $i505 := $trunc.i32.i8($i358);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $p506 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(2996, 1));
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $i507 := $load.i8($M.0, $p506);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $i508 := $and.i8($i505, 1);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $i509 := $and.i8($i507, $sub.i8(0, 2));
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $i510 := $or.i8($i509, $i508);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p506, $i510);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} $i511 := usb_endpoint_maxp($p352);
    call {:si_unique_call 103} {:cexpr "tmp___17"} boogie_si_record_i32($i511);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $i512 := $mul.i32($i511, 20);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $p513 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p513, $i512);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $p514 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(8, 1));
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p514, $p356);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $p515 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(16, 1));
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p515, $p355);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p516 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(2980, 1));
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p516, $i495);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $p517 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(0, 1));
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p517, $p25);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i518 := $zext.i8.i32($i350);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $p519 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(2988, 1));
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p519, $i518);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i520 := $and.i64($i351, 4);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i521 := $ne.i64($i520, 0);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    assume {:branchcond $i521} true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i521 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    $p526 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(2976, 1));
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p526, $i500);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $p527 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(2972, 1));
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p527, $i504);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $p528 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(2536, 1));
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p528, $i31);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $p529 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(2880, 1));
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} __init_work($p529, 0);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p530 := $add.ref($add.ref($p13, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p530, 137438953408);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $p532 := $add.ref($add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(2880, 1)), $mul.ref(0, 1));
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $p533 := $bitcast.ref.ref($p532);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $p534 := $bitcast.ref.ref($p13);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 105} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p533, $p534, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $p536 := $add.ref($add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(2880, 1)), $mul.ref(32, 1));
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} lockdep_init_map($p536, .str.52, $p12, 0);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $p538 := $add.ref($add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(2880, 1)), $mul.ref(8, 1));
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} INIT_LIST_HEAD($p538);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $p540 := $add.ref($add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(2880, 1)), $mul.ref(24, 1));
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p540, acm_softint);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $p541 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(2624, 1));
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} vslice_dummy_var_47 := spinlock_check($p541);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $p544 := $add.ref($add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(2624, 1)), $mul.ref(0, 1));
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $p545 := $bitcast.ref.ref($p544);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} __raw_spin_lock_init($p545, .str.53, $p14);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $p546 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(2544, 1));
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} vslice_dummy_var_48 := spinlock_check($p546);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $p549 := $add.ref($add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(2544, 1)), $mul.ref(0, 1));
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $p550 := $bitcast.ref.ref($p549);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} __raw_spin_lock_init($p550, .str.54, $p15);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $p551 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(2696, 1));
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} __mutex_init($p551, .str.55, $p16);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $p552 := $add.ref($add.ref($p353, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i553 := $load.i8($M.0, $p552);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i554 := $zext.i8.i32($i553);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} $i555 := __create_pipe($p25, $i554);
    call {:si_unique_call 114} {:cexpr "tmp___18"} boogie_si_record_i32($i555);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $i556 := $or.i32($i555, $sub.i32(0, 1073741696));
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $p557 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(2540, 1));
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p557, $i556);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} $i558 := usb_endpoint_xfer_int($p353);
    call {:si_unique_call 116} {:cexpr "tmp___19"} boogie_si_record_i32($i558);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $i559 := $trunc.i32.i8($i558);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $p560 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(2996, 1));
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $i561 := $load.i8($M.0, $p560);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $i562 := $and.i8($i559, 1);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i563 := $shl.i8($i562, 1);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i564 := $and.i8($i561, $sub.i8(0, 3));
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i565 := $or.i8($i564, $i563);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p560, $i565);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $p566 := $bitcast.ref.ref($p489);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $p567 := $add.ref($p566, $mul.ref(2988, 1));
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $i568 := $load.i8($M.0, $p567);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $i569 := $zext.i8.i32($i568);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $i570 := $ne.i32($i569, 0);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    assume {:branchcond $i570} true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i570 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    $p574 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(24, 1));
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} tty_port_init($p574);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $p576 := $add.ref($add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(24, 1)), $mul.ref(328, 1));
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p576, acm_port_ops);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $i577 := $sext.i32.i64($i500);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $p578 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(1096, 1));
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} $p579 := usb_alloc_coherent($p25, $i577, 208, $p578);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $i580 := $p2i.ref.i64($p579);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $i581 := $eq.i64($i580, 0);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    assume {:branchcond $i581} true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i581 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    $p585 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(1088, 1));
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p585, $p579);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} $i586 := acm_write_buffers_alloc($p489);
    call {:si_unique_call 123} {:cexpr "tmp___21"} boogie_si_record_i32($i586);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i587 := $slt.i32($i586, 0);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    assume {:branchcond $i587} true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i587 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} $p591 := ldv_usb_alloc_urb_15(0, 208);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $p592 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(1080, 1));
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p592, $p591);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $p593 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(1080, 1));
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $p594 := $load.ref($M.0, $p593);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i595 := $p2i.ref.i64($p594);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i596 := $eq.i64($i595, 0);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    assume {:branchcond $i596} true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i596 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    $i600 := 0;
    goto $bb193;

  $bb193:
    call $p601, $p602, $i603, $p604, $p605, $p606, $i607, $p608, $p609, $p610, $p611, $p612, $i613, $i614, $p618, $p619, $p620, $i621, $i622, $p625, $i626, $i627, $p628, $p629, $i630, $p631, $p632, $p633, $i634, $i635, $i636, $p637, $p638, $p639, $i640, $p641, $p642, $p643, $i644, $p645, $p646, $i647, $i648, $p649, $p650, $p651, $i652, $p653, $p654, $p655, $i656, $p657, $i658, $p660, $i661, $p662, $i663, $i664, $i600 := acm_probe_loop_$bb193($i31, $p488, $p489, $i504, $p601, $p602, $i603, $p604, $p605, $p606, $i607, $p608, $p609, $p610, $p611, $p612, $i613, $i614, $p618, $p619, $p620, $i621, $i622, $p625, $i626, $i627, $p628, $p629, $i630, $p631, $p632, $p633, $i634, $i635, $i636, $p637, $p638, $p639, $i640, $p641, $p642, $p643, $i644, $p645, $p646, $i647, $i648, $p649, $p650, $p651, $i652, $p653, $p654, $p655, $i656, $p657, $i658, $p660, $i661, $p662, $i663, $i664, $i600);
    goto $bb193_last;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    $p601 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(1896, 1));
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $p602 := $bitcast.ref.ref($p601);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i603 := $sext.i32.i64($i600);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $p604 := $add.ref($p602, $mul.ref($i603, 40));
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $p605 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(0, 1));
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $p606 := $load.ref($M.0, $p605);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $i607 := $sext.i32.i64($i504);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $p608 := $add.ref($add.ref($p602, $mul.ref($i603, 40)), $mul.ref(16, 1));
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} $p609 := usb_alloc_coherent($p606, $i607, 208, $p608);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $p610 := $add.ref($add.ref($p602, $mul.ref($i603, 40)), $mul.ref(8, 1));
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p610, $p609);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $p611 := $add.ref($add.ref($p602, $mul.ref($i603, 40)), $mul.ref(8, 1));
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $p612 := $load.ref($M.0, $p611);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $i613 := $p2i.ref.i64($p612);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i614 := $eq.i64($i613, 0);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i614 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    $p618 := $add.ref($add.ref($p602, $mul.ref($i603, 40)), $mul.ref(24, 1));
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p618, $i600);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $p619 := $add.ref($add.ref($p602, $mul.ref($i603, 40)), $mul.ref(32, 1));
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p619, $p488);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} $p620 := ldv_usb_alloc_urb_16(0, 208);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i621 := $p2i.ref.i64($p620);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i622 := $eq.i64($i621, 0);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i622 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    $p625 := $add.ref($add.ref($p620, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $i626 := $load.i32($M.0, $p625);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $i627 := $or.i32($i626, 4);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $p628 := $add.ref($add.ref($p620, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p628, $i627);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $p629 := $add.ref($add.ref($p602, $mul.ref($i603, 40)), $mul.ref(16, 1));
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i630 := $load.i64($M.0, $p629);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $p631 := $add.ref($add.ref($p620, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p631, $i630);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $p632 := $bitcast.ref.ref($p489);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $p633 := $add.ref($p632, $mul.ref(2988, 1));
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i634 := $load.i8($M.0, $p633);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i635 := $zext.i8.i32($i634);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $i636 := $ne.i32($i635, 0);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  $bb203:
    assume !($i636 == 1);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $p649 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(0, 1));
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $p650 := $load.ref($M.0, $p649);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $p651 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(2540, 1));
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i652 := $load.i32($M.0, $p651);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $p653 := $add.ref($add.ref($p602, $mul.ref($i603, 40)), $mul.ref(8, 1));
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $p654 := $load.ref($M.0, $p653);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $p655 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(2972, 1));
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $i656 := $load.i32($M.0, $p655);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $p657 := $bitcast.ref.ref($p604);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} ldv_usb_fill_bulk_urb_18($p620, $p650, $i652, $p654, $i656, acm_read_bulk_callback, $p657);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    $i658 := $sext.i32.i64($i600);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $p660 := $add.ref($add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(1768, 1)), $mul.ref($i658, 8));
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p660, $p620);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i661 := $sext.i32.i64($i600);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $p662 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(1760, 1));
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} __set_bit($i661, $p662);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $i663 := $add.i32($i600, 1);
    call {:si_unique_call 136} {:cexpr "i"} boogie_si_record_i32($i663);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i664 := $slt.i32($i663, $i31);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  $bb206:
    assume !($i664 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    $i665 := 0;
    goto $bb208;

  $bb208:
    call $p666, $p667, $i668, $p669, $p670, $p671, $p672, $p673, $i674, $i675, $i679, $i680, $p681, $i682, $i683, $i684, $p685, $p686, $i687, $p688, $i689, $p690, $p691, $i692, $i693, $p694, $i695, $i696, $i697, $p698, $p699, $i700, $p701, $i702, $p703, $p704, $p705, $p706, $i707, $i708, $p709, $p710, $p711, $p712, $i713, $i714, $i665 := acm_probe_loop_$bb208($p25, $p352, $p488, $p489, $p666, $p667, $i668, $p669, $p670, $p671, $p672, $p673, $i674, $i675, $i679, $i680, $p681, $i682, $i683, $i684, $p685, $p686, $i687, $p688, $i689, $p690, $p691, $i692, $i693, $p694, $i695, $i696, $i697, $p698, $p699, $i700, $p701, $i702, $p703, $p704, $p705, $p706, $i707, $i708, $p709, $p710, $p711, $p712, $i713, $i714, $i665);
    goto $bb208_last;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    $p666 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(1120, 1));
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $p667 := $bitcast.ref.ref($p666);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $i668 := $sext.i32.i64($i665);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $p669 := $add.ref($p667, $mul.ref($i668, 40));
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} $p670 := ldv_usb_alloc_urb_19(0, 208);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $p671 := $add.ref($add.ref($p667, $mul.ref($i668, 40)), $mul.ref(24, 1));
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p671, $p670);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $p672 := $add.ref($add.ref($p667, $mul.ref($i668, 40)), $mul.ref(24, 1));
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $p673 := $load.ref($M.0, $p672);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $i674 := $p2i.ref.i64($p673);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $i675 := $eq.i64($i674, 0);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210, $bb211;

  $bb211:
    assume !($i675 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} $i679 := usb_endpoint_xfer_int($p352);
    call {:si_unique_call 141} {:cexpr "tmp___25"} boogie_si_record_i32($i679);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $i680 := $ne.i32($i679, 0);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i680 == 1);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $p694 := $add.ref($add.ref($p352, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $i695 := $load.i8($M.0, $p694);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $i696 := $zext.i8.i32($i695);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $i697 := __create_pipe($p25, $i696);
    call {:si_unique_call 146} {:cexpr "tmp___24"} boogie_si_record_i32($i697);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p698 := $add.ref($add.ref($p667, $mul.ref($i668, 40)), $mul.ref(24, 1));
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $p699 := $load.ref($M.0, $p698);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i700 := $or.i32($i697, $sub.i32(0, 1073741824));
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $p701 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $i702 := $load.i32($M.0, $p701);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $p703 := $bitcast.ref.ref($p669);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} ldv_usb_fill_bulk_urb_18($p699, $p25, $i700, $0.ref, $i702, acm_write_bulk, $p703);
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    $p704 := $add.ref($add.ref($p667, $mul.ref($i668, 40)), $mul.ref(24, 1));
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $p705 := $load.ref($M.0, $p704);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $p706 := $add.ref($add.ref($p705, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i707 := $load.i32($M.0, $p706);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i708 := $or.i32($i707, 4);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $p709 := $add.ref($add.ref($p667, $mul.ref($i668, 40)), $mul.ref(24, 1));
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $p710 := $load.ref($M.0, $p709);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $p711 := $add.ref($add.ref($p710, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p711, $i708);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $p712 := $add.ref($add.ref($p667, $mul.ref($i668, 40)), $mul.ref(32, 1));
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p712, $p488);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i713 := $add.i32($i665, 1);
    call {:si_unique_call 148} {:cexpr "i"} boogie_si_record_i32($i713);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $i714 := $sle.i32($i713, 15);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  $bb218:
    assume !($i714 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    $p715 := $bitcast.ref.ref($p489);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} ldv_usb_set_intfdata_22($p0, $p715);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p716 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} $i717 := device_create_file($p716, dev_attr_bmCapabilities);
    call {:si_unique_call 151} {:cexpr "i"} boogie_si_record_i32($i717);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i718 := $slt.i32($i717, 0);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    assume {:branchcond $i718} true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i718 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    $i719 := $p2i.ref.i64($p357);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i720 := $ne.i64($i719, 0);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    assume {:branchcond $i720} true;
    goto $bb223, $bb224;

  $bb224:
    assume !($i720 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    $p765 := $add.ref($add.ref($p354, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i766 := $load.i8($M.0, $p765);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i767 := $zext.i8.i32($i766);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} $i768 := __create_pipe($p25, $i767);
    call {:si_unique_call 154} {:cexpr "tmp___27"} boogie_si_record_i32($i768);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $p769 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(1080, 1));
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $p770 := $load.ref($M.0, $p769);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i771 := $or.i32($i768, 1073741952);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $p772 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(1088, 1));
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $p773 := $load.ref($M.0, $p772);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $p774 := $bitcast.ref.ref($p489);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $p775 := $add.ref($add.ref($p354, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i776 := $load.i8($M.0, $p775);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i777 := $zext.i8.i32($i776);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i778 := $ne.i32($i777, 0);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    assume {:branchcond $i778} true;
    goto $bb236, $bb237;

  $bb237:
    assume !($i778 == 1);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i782 := 16;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} ldv_usb_fill_int_urb_17($p770, $p25, $i771, $p773, $i500, acm_ctrl_irq, $p774, $i782);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $p783 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(1080, 1));
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $p784 := $load.ref($M.0, $p783);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $p785 := $add.ref($add.ref($p784, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i786 := $load.i32($M.0, $p785);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i787 := $or.i32($i786, 4);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $p788 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(1080, 1));
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $p789 := $load.ref($M.0, $p788);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $p790 := $add.ref($add.ref($p789, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p790, $i787);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $p791 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(1096, 1));
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i792 := $load.i64($M.0, $p791);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $p793 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(1080, 1));
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $p794 := $load.ref($M.0, $p793);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $p795 := $add.ref($add.ref($p794, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p795, $i792);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $p796 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} vslice_dummy_var_55 := _dev_info.ref.ref.i32($p796, .str.62, $i495);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $p798 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(2964, 1));
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $i799 := $load.i32($M.0, $p798);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} vslice_dummy_var_56 := acm_ctrl_msg($p489, 34, $i799, $0.ref, 0);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $p802 := $add.ref($add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(2868, 1)), $mul.ref(0, 1));
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p802, 9600);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p804 := $add.ref($add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(2868, 1)), $mul.ref(6, 1));
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p804, 8);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $p805 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(2868, 1));
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $p806 := $bitcast.ref.ref($p805);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} vslice_dummy_var_57 := acm_ctrl_msg($p489, 32, 0, $p806, 7);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $p808 := $bitcast.ref.ref($p489);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} vslice_dummy_var_58 := usb_driver_claim_interface(acm_driver, $p355, $p808);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $p810 := $bitcast.ref.ref($p489);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} ldv_usb_set_intfdata_22($p355, $p810);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} vslice_dummy_var_59 := usb_get_intf($p356);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $p812 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(24, 1));
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $p813 := $M.7;
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $p814 := $add.ref($add.ref($p356, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $p815 := tty_port_register_device($p812, $p813, $i495, $p814);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p816 := $bitcast.ref.ref($p815);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} $i817 := IS_ERR($p816);
    call {:si_unique_call 173} {:cexpr "tmp___29"} boogie_si_record_i64($i817);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $i818 := $ne.i64($i817, 0);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    assume {:branchcond $i818} true;
    goto $bb239, $bb240;

  $bb240:
    assume !($i818 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb239:
    assume $i818 == 1;
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $p819 := $bitcast.ref.ref($p815);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $i820 := PTR_ERR($p819);
    call {:si_unique_call 175} {:cexpr "tmp___28"} boogie_si_record_i64($i820);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i821 := $trunc.i64.i32($i820);
    call {:si_unique_call 176} {:cexpr "rv"} boogie_si_record_i32($i821);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    $p822 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(1104, 1));
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p823 := $load.ref($M.0, $p822);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i824 := $p2i.ref.i64($p823);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i825 := $ne.i64($i824, 0);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    assume {:branchcond $i825} true;
    goto $bb243, $bb244;

  $bb244:
    assume !($i825 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    $p832 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(8, 1));
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $p833 := $load.ref($M.0, $p832);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $p834 := $add.ref($add.ref($p833, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} device_remove_file($p834, dev_attr_bmCapabilities);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $i678 := $i821;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} ldv_usb_set_intfdata_22($p0, $0.ref);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i835 := 0;
    goto $bb246;

  $bb246:
    call $i836, $p839, $p840, $i841, $i842, $i835 := acm_probe_loop_$bb246($p489, $i836, $p839, $p840, $i841, $i842, $i835);
    goto $bb246_last;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    $i836 := $sext.i32.i64($i835);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $p839 := $add.ref($add.ref($add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(1120, 1)), $mul.ref($i836, 40)), $mul.ref(24, 1));
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $p840 := $load.ref($M.0, $p839);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} ldv_usb_free_urb_26($p840);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i841 := $add.i32($i835, 1);
    call {:si_unique_call 181} {:cexpr "i"} boogie_si_record_i32($i841);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i842 := $sle.i32($i841, 15);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  $bb249:
    assume !($i842 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    $i617 := $i678;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i843 := 0;
    goto $bb251;

  $bb251:
    call $i844, $p846, $p847, $i848, $i849, $i843 := acm_probe_loop_$bb251($i31, $p489, $i844, $p846, $p847, $i848, $i849, $i843);
    goto $bb251_last;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    $i844 := $sext.i32.i64($i843);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $p846 := $add.ref($add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(1768, 1)), $mul.ref($i844, 8));
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $p847 := $load.ref($M.0, $p846);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} ldv_usb_free_urb_27($p847);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i848 := $add.i32($i843, 1);
    call {:si_unique_call 183} {:cexpr "i"} boogie_si_record_i32($i848);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i849 := $slt.i32($i848, $i31);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb253, $bb254;

  $bb254:
    assume !($i849 == 1);
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} acm_read_buffers_free($p489);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $p850 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(1080, 1));
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $p851 := $load.ref($M.0, $p850);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} ldv_usb_free_urb_28($p851);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i599 := $i617;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} acm_write_buffers_free($p489);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i590 := $i599;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i852 := $sext.i32.i64($i500);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $p853 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(1088, 1));
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $p854 := $load.ref($M.0, $p853);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $p855 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(1096, 1));
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i856 := $load.i64($M.0, $p855);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} usb_free_coherent($p25, $i852, $p854, $i856);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $i584 := $i590;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} acm_release_minor($p489);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $p857 := $bitcast.ref.ref($p489);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} kfree($p857);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $i494 := $i584;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i29 := $i494;
    goto $bb3;

  $bb253:
    assume $i849 == 1;
    assume {:verifier.code 0} true;
    $i843 := $i848;
    goto $bb253_dummy;

  $bb248:
    assume $i842 == 1;
    assume {:verifier.code 0} true;
    $i835 := $i841;
    goto $bb248_dummy;

  $bb243:
    assume $i825 == 1;
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $p826 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(8, 1));
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $p827 := $load.ref($M.0, $p826);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $p828 := $add.ref($add.ref($p827, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} device_remove_file($p828, dev_attr_wCountryCodes);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p829 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(8, 1));
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $p830 := $load.ref($M.0, $p829);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $p831 := $add.ref($add.ref($p830, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} device_remove_file($p831, dev_attr_iCountryCodeRelDate);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb236:
    assume $i778 == 1;
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $p779 := $add.ref($add.ref($p354, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $i780 := $load.i8($M.0, $p779);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i781 := $zext.i8.i32($i780);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $i782 := $i781;
    goto $bb238;

  $bb223:
    assume $i720 == 1;
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $p721 := $add.ref($add.ref($p357, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i722 := $load.i8($M.0, $p721);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i723 := $zext.i8.i32($i722);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i724 := $add.i32($i723, $sub.i32(0, 4));
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i725 := $sext.i32.i64($i724);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} $p726 := kmalloc($i725, 208);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $p727 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(1104, 1));
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p727, $p726);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $p728 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(1104, 1));
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $p729 := $load.ref($M.0, $p728);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $i730 := $p2i.ref.i64($p729);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $i731 := $eq.i64($i730, 0);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    assume {:branchcond $i731} true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i731 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    $p732 := $add.ref($add.ref($p357, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i733 := $load.i8($M.0, $p732);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $i734 := $zext.i8.i32($i733);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $i735 := $add.i32($i734, $sub.i32(0, 4));
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $p736 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(1112, 1));
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p736, $i735);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $p737 := $add.ref($add.ref($p357, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i738 := $load.i8($M.0, $p737);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i739 := $zext.i8.i32($i738);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $i740 := $add.i32($i739, $sub.i32(0, 4));
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $i741 := $sext.i32.i64($i740);
    call {:si_unique_call 155} {:cexpr "__len"} boogie_si_record_i64($i741);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $p742 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(1104, 1));
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $p743 := $load.ref($M.0, $p742);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $p744 := $add.ref($add.ref($p357, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $p745 := $bitcast.ref.ref($p744);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 156} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p743, $p745, $i741, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $p746 := $add.ref($add.ref($p357, $mul.ref(0, 6)), $mul.ref(3, 1));
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $i747 := $load.i8($M.0, $p746);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i748 := $zext.i8.i32($i747);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $p749 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(1116, 1));
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p749, $i748);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $p750 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} $i751 := device_create_file($p750, dev_attr_wCountryCodes);
    call {:si_unique_call 158} {:cexpr "i"} boogie_si_record_i32($i751);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i752 := $slt.i32($i751, 0);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    assume {:branchcond $i752} true;
    goto $bb229, $bb230;

  $bb230:
    assume !($i752 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    $p757 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} $i758 := device_create_file($p757, dev_attr_iCountryCodeRelDate);
    call {:si_unique_call 161} {:cexpr "i"} boogie_si_record_i32($i758);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i759 := $slt.i32($i758, 0);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    assume {:branchcond $i759} true;
    goto $bb232, $bb233;

  $bb233:
    assume !($i759 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb232:
    assume $i759 == 1;
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $p760 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} device_remove_file($p760, dev_attr_wCountryCodes);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $p761 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(1104, 1));
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $p762 := $load.ref($M.0, $p761);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} kfree($p762);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $p763 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(1104, 1));
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p763, $0.ref);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $p764 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(1112, 1));
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p764, 0);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb229:
    assume $i752 == 1;
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $p753 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(1104, 1));
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p754 := $load.ref($M.0, $p753);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} kfree($p754);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $p755 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(1104, 1));
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p755, $0.ref);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $p756 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(1112, 1));
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p756, 0);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb225:
    assume $i731 == 1;
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb220:
    assume $i718 == 1;
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i678 := $sub.i32(0, 12);
    goto $bb212;

  $bb217:
    assume $i714 == 1;
    assume {:verifier.code 0} true;
    $i665 := $i713;
    goto $bb217_dummy;

  $bb214:
    assume $i680 == 1;
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $p681 := $add.ref($add.ref($p352, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $i682 := $load.i8($M.0, $p681);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i683 := $zext.i8.i32($i682);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} $i684 := __create_pipe($p25, $i683);
    call {:si_unique_call 143} {:cexpr "tmp___23"} boogie_si_record_i32($i684);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $p685 := $add.ref($add.ref($p667, $mul.ref($i668, 40)), $mul.ref(24, 1));
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $p686 := $load.ref($M.0, $p685);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i687 := $or.i32($i684, 1073741824);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p688 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i689 := $load.i32($M.0, $p688);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $p690 := $bitcast.ref.ref($p669);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $p691 := $add.ref($add.ref($p352, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $i692 := $load.i8($M.0, $p691);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i693 := $zext.i8.i32($i692);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} ldv_usb_fill_int_urb_17($p686, $p25, $i687, $0.ref, $i689, acm_write_bulk, $p690, $i693);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb210:
    assume $i675 == 1;
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $p676 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} vslice_dummy_var_54 := dev_err.ref.ref($p676, .str.61);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i678 := $sub.i32(0, 12);
    goto $bb212;

  $bb205:
    assume $i664 == 1;
    assume {:verifier.code 0} true;
    $i600 := $i663;
    goto $bb205_dummy;

  $bb202:
    assume $i636 == 1;
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $p637 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(0, 1));
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $p638 := $load.ref($M.0, $p637);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $p639 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(2540, 1));
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $i640 := $load.i32($M.0, $p639);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $p641 := $add.ref($add.ref($p602, $mul.ref($i603, 40)), $mul.ref(8, 1));
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p642 := $load.ref($M.0, $p641);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p643 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(2972, 1));
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i644 := $load.i32($M.0, $p643);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $p645 := $bitcast.ref.ref($p604);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $p646 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(2997, 1));
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i647 := $load.i8($M.0, $p646);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i648 := $zext.i8.i32($i647);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} ldv_usb_fill_int_urb_17($p620, $p638, $i640, $p642, $i644, acm_read_bulk_callback, $p645, $i648);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb199:
    assume $i622 == 1;
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p623 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} vslice_dummy_var_53 := dev_err.ref.ref($p623, .str.60);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i617 := $sub.i32(0, 12);
    goto $bb197;

  $bb195:
    assume $i614 == 1;
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $p615 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} vslice_dummy_var_52 := dev_err.ref.ref($p615, .str.59);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i617 := $sub.i32(0, 12);
    goto $bb197;

  $bb189:
    assume $i596 == 1;
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $p597 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} vslice_dummy_var_51 := dev_err.ref.ref($p597, .str.58);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $i599 := $sub.i32(0, 12);
    goto $bb191;

  $bb185:
    assume $i587 == 1;
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $p588 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} vslice_dummy_var_50 := dev_err.ref.ref($p588, .str.57);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i590 := $sub.i32(0, 12);
    goto $bb187;

  $bb181:
    assume $i581 == 1;
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $p582 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} vslice_dummy_var_49 := dev_err.ref.ref($p582, .str.56);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $i584 := $sub.i32(0, 12);
    goto $bb183;

  $bb178:
    assume $i570 == 1;
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $p571 := $add.ref($add.ref($p353, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $i572 := $load.i8($M.0, $p571);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $p573 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(2997, 1));
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p573, $i572);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb175:
    assume $i521 == 1;
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $p522 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(2988, 1));
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i523 := $load.i32($M.0, $p522);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i524 := $and.i32($i523, $sub.i32(0, 3));
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $p525 := $add.ref($add.ref($p489, $mul.ref(0, 3008)), $mul.ref(2988, 1));
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p525, $i524);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb172:
    assume $i496 == 1;
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $p497 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} vslice_dummy_var_46 := dev_err.ref.ref($p497, .str.51);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $p499 := $bitcast.ref.ref($p489);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} kfree($p499);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 19);
    goto $bb3;

  $bb168:
    assume $i491 == 1;
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $p492 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} vslice_dummy_var_45 := dev_err.ref.ref($p492, .str.50);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $i494 := $sub.i32(0, 12);
    goto $bb170;

  $bb165:
    assume $i485 == 1;
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $p486 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} vslice_dummy_var_44 := __dynamic_dev_dbg.ref.ref.ref($p11, $p486, .str.49);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb159:
    assume $i449 == 1;
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $p450 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p450, .str.3);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p451 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p451, .str.32);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p452, .str.5);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $p453 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p453, .str.48);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $p454 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p455 := $bitcast.ref.ref($p454);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i456 := $load.i24($M.5, $p455);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i457 := $and.i24($i456, $sub.i24(0, 262144));
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i458 := $or.i24($i457, 1181);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p455, $i458);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $p459 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p459, 0);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $p460 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i461 := $load.i8($M.6, $p460);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i462 := $zext.i8.i64($i461);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i463 := $and.i64($i462, 1);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} $i464 := ldv__builtin_expect($i463, 0);
    call {:si_unique_call 88} {:cexpr "tmp___12"} boogie_si_record_i64($i464);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $i465 := $ne.i64($i464, 0);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    assume {:branchcond $i465} true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i465 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $p468, $p469 := $p440, $p447;
    goto $bb164;

  $bb161:
    assume $i465 == 1;
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p466 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} vslice_dummy_var_43 := __dynamic_dev_dbg.ref.ref.ref($p10, $p466, .str.48);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb156:
    assume {:verifier.code 0} true;
    assume $i431 == 1;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 22);
    goto $bb3;

  $bb153:
    assume {:verifier.code 0} true;
    assume $i424 == 1;
    goto $bb154;

  $bb144:
    assume $i397 == 1;
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} $i398 := usb_interface_claimed($p391);
    call {:si_unique_call 81} {:cexpr "tmp___11"} boogie_si_record_i32($i398);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $i399 := $ne.i32($i398, 0);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    assume {:branchcond $i399} true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i399 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb146:
    assume $i399 == 1;
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $p400 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p400, .str.3);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p401, .str.32);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $p402 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p402, .str.5);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p403, .str.47);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $p404 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $p405 := $bitcast.ref.ref($p404);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i406 := $load.i24($M.5, $p405);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i407 := $and.i24($i406, $sub.i24(0, 262144));
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i408 := $or.i24($i407, 1162);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p405, $i408);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p409, 0);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $p410 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $i411 := $load.i8($M.6, $p410);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i412 := $zext.i8.i64($i411);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i413 := $and.i64($i412, 1);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} $i414 := ldv__builtin_expect($i413, 0);
    call {:si_unique_call 83} {:cexpr "tmp___10"} boogie_si_record_i64($i414);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $i415 := $ne.i64($i414, 0);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    assume {:branchcond $i415} true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i415 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 16);
    goto $bb3;

  $bb148:
    assume $i415 == 1;
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p416 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} vslice_dummy_var_42 := __dynamic_dev_dbg.ref.ref.ref($p9, $p416, .str.47);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb138:
    assume $i393 == 1;
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $i394 := $p2i.ref.i64($p0);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $i395 := $p2i.ref.i64($p392);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i396 := $ne.i64($i394, $i395);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    assume {:branchcond $i396} true;
    goto $bb141, $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    assume !($i396 == 1);
    goto $bb140;

  $bb141:
    assume $i396 == 1;
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 19);
    goto $bb3;

  $bb129:
    assume $i365 == 1;
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p37, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $p367 := $load.ref($M.0, $p366);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($add.ref($p367, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(5, 1));
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i370 := $load.i8($M.0, $p369);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $i371 := $zext.i8.i32($i370);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $i372 := $eq.i32($i371, 10);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    assume {:branchcond $i372} true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i372 == 1);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 22);
    goto $bb3;

  $bb131:
    assume $i372 == 1;
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p373, .str.3);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p374, .str.32);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p375, .str.5);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p376, .str.46);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $p378 := $bitcast.ref.ref($p377);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $i379 := $load.i24($M.5, $p378);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $i380 := $and.i24($i379, $sub.i24(0, 262144));
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i381 := $or.i24($i380, 1147);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p378, $i381);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $p382 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p382, 0);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i384 := $load.i8($M.6, $p383);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $i385 := $zext.i8.i64($i384);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $i386 := $and.i64($i385, 1);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} $i387 := ldv__builtin_expect($i386, 0);
    call {:si_unique_call 78} {:cexpr "tmp___9"} boogie_si_record_i64($i387);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i388 := $ne.i64($i387, 0);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    assume {:branchcond $i388} true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i388 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $p391, $p392 := $p37, $p36;
    goto $bb137;

  $bb133:
    assume $i388 == 1;
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} vslice_dummy_var_41 := __dynamic_dev_dbg.ref.ref.ref($p8, $p389, .str.46);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb101:
    assume $i304 == 1;
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} vslice_dummy_var_39 := dev_warn.ref.ref($p305, .str.44);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i307 := $or.i64($i27, 4);
    call {:si_unique_call 66} {:cexpr "quirks"} boogie_si_record_i64($i307);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($p251, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $p309 := $load.ref($M.0, $p308);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($add.ref($p309, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i312 := $load.i8($M.0, $p311);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $i313 := $zext.i8.i32($i312);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $i314 := $ne.i32($i313, 3);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    assume {:branchcond $i314} true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $i244, $p245, $i246, $p247, $p248 := $i100, $p102, $i307, $p251, $p252;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $p317, $p318, $p319, $i320 := $0.ref, $0.ref, $0.ref, 0;
    goto $bb106;

  $bb106:
    call $p321, $p322, $p323, $p324, $i325, $p327, $i328, $i329, $i333, $i334, $i337, $i338, $p335, $p336, $p330, $p331, $p332, $i339, $i340, $p317, $p318, $p319, $i320, $p341, $p342, $p343 := acm_probe_loop_$bb106($p247, $p321, $p322, $p323, $p324, $i325, $p327, $i328, $i329, $i333, $i334, $i337, $i338, $p335, $p336, $p330, $p331, $p332, $i339, $i340, $p317, $p318, $p319, $i320, $p341, $p342, $p343);
    goto $bb106_last;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($p247, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $p322 := $load.ref($M.0, $p321);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($p322, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $p324 := $load.ref($M.0, $p323);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $i325 := $sext.i32.i64($i320);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($p324, $mul.ref($i325, 64)), $mul.ref(0, 1));
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} $i328 := usb_endpoint_is_int_in($p327);
    call {:si_unique_call 69} {:cexpr "tmp___8"} boogie_si_record_i32($i328);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $i329 := $ne.i32($i328, 0);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i329 == 1);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} $i333 := usb_endpoint_is_bulk_out($p327);
    call {:si_unique_call 71} {:cexpr "tmp___7"} boogie_si_record_i32($i333);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i334 := $ne.i32($i333, 0);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i334 == 1);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} $i337 := usb_endpoint_is_bulk_in($p327);
    call {:si_unique_call 74} {:cexpr "tmp___6"} boogie_si_record_i32($i337);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i338 := $ne.i32($i337, 0);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i338 == 1);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 22);
    goto $bb3;

  $bb114:
    assume $i338 == 1;
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p335, $p336 := $p319, $p327;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p330, $p331, $p332 := $p335, $p336, $p317;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $i339 := $add.i32($i320, 1);
    call {:si_unique_call 72} {:cexpr "i"} boogie_si_record_i32($i339);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i340 := $sle.i32($i339, 2);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $p341, $p342, $p343 := $p330, $p331, $p332;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i340 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $i344 := $p2i.ref.i64($p343);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i345 := $eq.i64($i344, 0);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i345} true;
    goto $bb120, $bb122;

  $bb122:
    assume !($i345 == 1);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $i346 := $p2i.ref.i64($p342);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $i347 := $eq.i64($i346, 0);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    assume {:branchcond $i347} true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i347 == 1);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $i348 := $p2i.ref.i64($p341);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $i349 := $eq.i64($i348, 0);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    assume {:branchcond $i349} true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i349 == 1);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $i350, $i351, $p352, $p353, $p354, $p355, $p356, $p357, $i358 := $i244, $i246, $p341, $p342, $p343, $p247, $p248, $p245, 1;
    goto $bb127;

  $bb125:
    assume {:verifier.code 0} true;
    assume $i349 == 1;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 19);
    goto $bb3;

  $bb123:
    assume {:verifier.code 0} true;
    assume $i347 == 1;
    goto $bb121;

  $bb120:
    assume {:verifier.code 0} true;
    assume $i345 == 1;
    goto $bb121;

  $bb117:
    assume $i340 == 1;
    assume {:verifier.code 0} true;
    $p317, $p318, $p319, $i320 := $p332, $p331, $p330, $i339;
    goto $bb117_dummy;

  $bb111:
    assume $i334 == 1;
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $p335, $p336 := $p327, $p318;
    goto $bb113;

  $bb108:
    assume $i329 == 1;
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $p330, $p331, $p332 := $p319, $p318, $p327;
    goto $bb110;

  $bb103:
    assume $i314 == 1;
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} vslice_dummy_var_40 := dev_err.ref.ref($p315, .str.45);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 22);
    goto $bb3;

  $bb95:
    assume $i283 == 1;
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p284, .str.3);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p285, .str.32);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p286, .str.5);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p287, .str.43);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p289 := $bitcast.ref.ref($p288);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $i290 := $load.i24($M.5, $p289);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i291 := $and.i24($i290, $sub.i24(0, 262144));
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $i292 := $or.i24($i291, 1106);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p289, $i292);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p293, 0);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i295 := $load.i8($M.6, $p294);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $i296 := $zext.i8.i64($i295);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $i297 := $and.i64($i296, 1);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} $i298 := ldv__builtin_expect($i297, 0);
    call {:si_unique_call 63} {:cexpr "tmp___5"} boogie_si_record_i64($i298);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $i299 := $ne.i64($i298, 0);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    assume {:branchcond $i299} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i299 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb97:
    assume $i299 == 1;
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} vslice_dummy_var_38 := __dynamic_dev_dbg.ref.ref.ref($p7, $p300, .str.43);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb89:
    assume {:verifier.code 0} true;
    assume $i264 == 1;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p265, .str.3);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p266, .str.32);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p267, .str.5);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p268, .str.42);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p270 := $bitcast.ref.ref($p269);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $i271 := $load.i24($M.5, $p270);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $i272 := $and.i24($i271, $sub.i24(0, 262144));
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $i273 := $or.i24($i272, 1100);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p270, $i273);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p274, 0);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $i276 := $load.i8($M.6, $p275);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i277 := $zext.i8.i64($i276);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i278 := $and.i64($i277, 1);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} $i279 := ldv__builtin_expect($i278, 0);
    call {:si_unique_call 60} {:cexpr "tmp___4"} boogie_si_record_i64($i279);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i280 := $ne.i64($i279, 0);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    assume {:branchcond $i280} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 19);
    goto $bb3;

  $bb91:
    assume $i280 == 1;
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} vslice_dummy_var_37 := __dynamic_dev_dbg.ref.ref.ref($p6, $p281, .str.42);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb86:
    assume {:verifier.code 0} true;
    assume $i262 == 1;
    goto $bb87;

  $bb68:
    assume $i191 == 1;
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i192 := $sgt.i32($i101, 0);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i192} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i192 == 1);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $p218 := $load.ref($M.0, $p217);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($add.ref($p218, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $i221 := $load.i8($M.0, $p220);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $i222 := $zext.i8.i32($i221);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i223 := $ne.i32($i222, 3);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i223 == 1);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} vslice_dummy_var_35 := dev_warn.ref.ref($p242, .str.41);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $i244, $p245, $i246, $p247, $p248 := $i100, $p102, $i27, $p0, $p0;
    goto $bb84;

  $bb79:
    assume $i223 == 1;
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p224, .str.3);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p225, .str.32);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p226, .str.5);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p227, .str.40);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p229 := $bitcast.ref.ref($p228);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $i230 := $load.i24($M.5, $p229);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $i231 := $and.i24($i230, $sub.i24(0, 262144));
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $i232 := $or.i24($i231, 1087);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p229, $i232);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p233, 0);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $i235 := $load.i8($M.6, $p234);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $i236 := $zext.i8.i64($i235);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $i237 := $and.i64($i236, 1);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $i238 := ldv__builtin_expect($i237, 0);
    call {:si_unique_call 56} {:cexpr "tmp___3"} boogie_si_record_i64($i238);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i239 := $ne.i64($i238, 0);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 19);
    goto $bb3;

  $bb81:
    assume $i239 == 1;
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} vslice_dummy_var_36 := __dynamic_dev_dbg.ref.ref.ref($p5, $p240, .str.40);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb70:
    assume $i192 == 1;
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p193, .str.3);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p194, .str.32);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p195, .str.5);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p196, .str.39);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $p198 := $bitcast.ref.ref($p197);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $i199 := $load.i24($M.5, $p198);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $i200 := $and.i24($i199, $sub.i24(0, 262144));
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $i201 := $or.i24($i200, 1078);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p198, $i201);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p202, 0);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i204 := $load.i8($M.6, $p203);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $i205 := $zext.i8.i64($i204);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i206 := $and.i64($i205, 1);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $i207 := ldv__builtin_expect($i206, 0);
    call {:si_unique_call 51} {:cexpr "tmp___2"} boogie_si_record_i64($i207);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $i208 := $ne.i64($i207, 0);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    assume {:branchcond $i208} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i211 := $and.i64($i27, 16);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $i212 := $ne.i64($i211, 0);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    assume {:branchcond $i212} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i212 == 1);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} $p216 := usb_ifnum_to_if($p25, $i101);
    assume {:verifier.code 0} true;
    $i214, $p215 := $i101, $p216;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i249, $i250, $p251, $p252 := $i101, $i214, $p215, $p0;
    goto $bb85;

  $bb75:
    assume $i212 == 1;
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $p213 := usb_ifnum_to_if($p25, 0);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $i214, $p215 := $sub.i32(0, 1), $p213;
    goto $bb77;

  $bb72:
    assume $i208 == 1;
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} vslice_dummy_var_34 := __dynamic_dev_dbg.ref.ref.ref($p4, $p209, .str.39);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb26:
    assume $i99 == 1;
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $p104, $p105, $p106, $i107, $i108, $i109 := $0.ref, $0.ref, $p98, $i97, $sub.i32(0, 1), 0;
    goto $bb29;

  $bb29:
    call $p110, $i111, $i112, $i113, $p114, $p121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $p133, $p142, $i143, $p144, $i145, $p146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $p154, $p156, $p157, $p158, $p159, $p160, $p161, $i162, $i163, $i164, $p165, $p166, $i167, $i168, $i169, $i170, $i171, $p172, $p173, $i174, $i175, $i176, $i177, $p136, $i137, $i138, $p139, $p140, $p116, $i117, $i118, $p119, $p120, $i179, $i180, $i181, $i182, $i183, $p184, $i185, $p104, $p105, $p106, $i107, $i108, $i109, $i186, $i187, $p188, $p189, vslice_dummy_var_30, vslice_dummy_var_31, vslice_dummy_var_32, vslice_dummy_var_33 := acm_probe_loop_$bb29($p0, $p3, $i27, $p110, $i111, $i112, $i113, $p114, $p121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $p133, $p142, $i143, $p144, $i145, $p146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $p154, $p156, $p157, $p158, $p159, $p160, $p161, $i162, $i163, $i164, $p165, $p166, $i167, $i168, $i169, $i170, $i171, $p172, $p173, $i174, $i175, $i176, $i177, $p136, $i137, $i138, $p139, $p140, $p116, $i117, $i118, $p119, $p120, $i179, $i180, $i181, $i182, $i183, $p184, $i185, $p104, $p105, $p106, $i107, $i108, $i109, $i186, $i187, $p188, $p189, vslice_dummy_var_30, vslice_dummy_var_31, vslice_dummy_var_32, vslice_dummy_var_33);
    goto $bb29_last;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($p106, $mul.ref(1, 1));
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.0, $p110);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i111);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i113 := $ne.i32($i112, 36);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($p106, $mul.ref(2, 1));
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $i122 := $load.i8($M.0, $p121);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $i123 := $zext.i8.i32($i122);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i124 := $slt.i32($i123, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    $i125 := $slt.i32($i123, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    $i126 := $slt.i32($i123, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i123, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i127 == 1);
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p156, .str.3);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p157, .str.32);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p158, .str.5);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p159, .str.38);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $p161 := $bitcast.ref.ref($p160);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i162 := $load.i24($M.5, $p161);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $i163 := $and.i24($i162, $sub.i24(0, 262144));
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i164 := $or.i24($i163, 1068);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p161, $i164);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p165, 0);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i167 := $load.i8($M.6, $p166);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i168 := $zext.i8.i64($i167);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i169 := $and.i64($i168, 1);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $i170 := ldv__builtin_expect($i169, 0);
    call {:si_unique_call 45} {:cexpr "tmp___1"} boogie_si_record_i64($i170);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i171 := $ne.i64($i170, 0);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p136, $i137, $i138, $p139, $p140 := $p106, $i109, $i108, $p105, $p104;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $p116, $i117, $i118, $p119, $p120 := $p136, $i137, $i138, $p139, $p140;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i179 := $load.i8($M.0, $p116);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $i180 := $zext.i8.i32($i179);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $i181 := $sub.i32($i107, $i180);
    call {:si_unique_call 38} {:cexpr "buflen"} boogie_si_record_i32($i181);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i182 := $load.i8($M.0, $p116);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $i183 := $zext.i8.i64($i182);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($p116, $mul.ref($i183, 1));
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $i185 := $sgt.i32($i181, 0);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $i186, $i187, $p188, $p189 := $i117, $i118, $p119, $p120;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i100, $i101, $p102, $p103 := $i186, $i187, $p188, $p189;
    goto $bb28;

  $bb65:
    assume $i185 == 1;
    assume {:verifier.code 0} true;
    $p104, $p105, $p106, $i107, $i108, $i109 := $p120, $p119, $p184, $i181, $i118, $i117;
    goto $bb65_dummy;

  $bb62:
    assume $i171 == 1;
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($p106, $mul.ref(2, 1));
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $i174 := $load.i8($M.0, $p173);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $i175 := $zext.i8.i32($i174);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $i176 := $load.i8($M.0, $p106);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $i177 := $zext.i8.i32($i176);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} vslice_dummy_var_33 := __dynamic_dev_dbg.ref.ref.ref.i32.i32($p3, $p172, .str.38, $i175, $i177);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb42:
    assume $i127 == 1;
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p136, $i137, $i138, $p139, $p140 := $p106, $i109, $i108, $p106, $p104;
    goto $bb54;

  $bb40:
    assume $i126 == 1;
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i131 := $p2i.ref.i64($p104);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $i132 := $ne.i64($i131, 0);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $p136, $i137, $i138, $p139, $p140 := $p106, $i109, $i108, $p105, $p106;
    goto $bb54;

  $bb51:
    assume $i132 == 1;
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} vslice_dummy_var_31 := dev_err.ref.ref($p133, .str.36);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $p116, $i117, $i118, $p119, $p120 := $p106, $i109, $i108, $p105, $p104;
    goto $bb33;

  $bb38:
    assume $i125 == 1;
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i123, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i128 == 1);
    goto $bb44;

  $bb45:
    assume $i128 == 1;
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($p106, $mul.ref(3, 1));
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $i143 := $load.i8($M.0, $p142);
    call {:si_unique_call 39} {:cexpr "ac_management_function"} boogie_si_record_i8($i143);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $p136, $i137, $i138, $p139, $p140 := $p106, $i143, $i108, $p105, $p104;
    goto $bb54;

  $bb36:
    assume $i124 == 1;
    assume {:verifier.code 0} true;
    $i129 := $slt.i32($i123, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i129 == 1);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($p106, $mul.ref(3, 1));
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i145 := $load.i8($M.0, $p144);
    call {:si_unique_call 40} {:cexpr "call_management_function"} boogie_si_record_i8($i145);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($p106, $mul.ref(4, 1));
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $i147 := $load.i8($M.0, $p146);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i148 := $zext.i8.i32($i147);
    call {:si_unique_call 41} {:cexpr "call_interface_num"} boogie_si_record_i32($i148);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i149 := $and.i64($i27, 8);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $i150 := $eq.i64($i149, 0);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i150 == 1);
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p136, $i137, $i138, $p139, $p140 := $p106, $i109, $i148, $p105, $p104;
    goto $bb54;

  $bb55:
    assume $i150 == 1;
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i151 := $zext.i8.i32($i145);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $i152 := $and.i32($i151, 3);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $i153 := $ne.i32($i152, 3);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i153 == 1);
    goto $bb57;

  $bb58:
    assume $i153 == 1;
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} vslice_dummy_var_32 := dev_err.ref.ref($p154, .str.37);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb47:
    assume $i129 == 1;
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i123, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i130 == 1);
    goto $bb44;

  $bb49:
    assume $i130 == 1;
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $p136, $i137, $i138, $p139, $p140 := $p106, $i109, $i108, $p105, $p104;
    goto $bb54;

  $bb31:
    assume $i113 == 1;
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} vslice_dummy_var_30 := dev_err.ref.ref($p114, .str.35);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $p116, $i117, $i118, $p119, $p120 := $p106, $i109, $i108, $p105, $p104;
    goto $bb33;

  $bb12:
    assume $i43 == 1;
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} vslice_dummy_var_28 := dev_err.ref.ref($p95, .str.34);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 22);
    goto $bb3;

  $bb14:
    assume $i49 == 1;
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb16;

  $bb17:
    assume $i56 == 1;
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb16;

  $bb19:
    assume $i64 == 1;
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p65, .str.3);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p66, .str.32);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p67, .str.5);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p68, .str.33);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i71 := $load.i24($M.5, $p70);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i72 := $and.i24($i71, $sub.i24(0, 262144));
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i73 := $or.i24($i72, 1023);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p70, $i73);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p74, 0);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.6, $p75);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i64($i76);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i78 := $and.i64($i77, 1);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} $i79 := ldv__builtin_expect($i78, 0);
    call {:si_unique_call 34} {:cexpr "tmp___0"} boogie_si_record_i64($i79);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i79, 0);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p84, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    call {:si_unique_call 36} {:cexpr "buflen"} boogie_si_record_i32($i88);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p90, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i97, $p98 := $i88, $p94;
    goto $bb25;

  $bb21:
    assume $i80 == 1;
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} vslice_dummy_var_29 := __dynamic_dev_dbg.ref.ref.ref($p2, $p81, .str.33);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb9:
    assume $i40 == 1;
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} vslice_dummy_var_27 := dev_err.ref.ref($p41, .str.31);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i32 == 1;
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $p33 := usb_ifnum_to_if($p25, 1);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $p34 := usb_ifnum_to_if($p25, 0);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $i35, $p36, $p37, $p38 := 0, $p33, $p34, $0.ref;
    goto $bb7;

  $bb1:
    assume $i28 == 1;
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 19);
    goto $bb3;

  $bb253_dummy:
    assume false;
    return;

  $bb251_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1126;

  $bb248_dummy:
    assume false;
    return;

  $bb246_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1117;

  $bb217_dummy:
    assume false;
    return;

  $bb208_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_886;

  $bb205_dummy:
    assume false;
    return;

  $bb193_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_800;

  $bb117_dummy:
    assume false;
    return;

  $bb106_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_413;

  $bb65_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_138;
}



const acm_disconnect: ref;

axiom acm_disconnect == $sub.ref(0, 140237);

procedure acm_disconnect($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.9, $M.10;



implementation acm_disconnect($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $i55: i64;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i54: i32;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $i66: i64;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $i72: i1;
  var $i65: i32;
  var $p73: ref;
  var $i74: i32;
  var $i75: i64;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $p80: ref;
  var $p81: ref;
  var $i82: i8;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $i88: i64;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $p93: ref;
  var $p94: ref;
  var $p92: ref;
  var $p95: ref;
  var vslice_dummy_var_60: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} $p2 := ldv_usb_get_intfdata_3($p0);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $p4 := interface_to_usbdev($p0);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, .str.3);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.76);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.5);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.6);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.5, $p10);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 1420);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p10, $i13);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p14, 0);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.6, $p15);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 190} {:cexpr "tmp___1"} boogie_si_record_i64($i19);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p3);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(2696, 1));
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} mutex_lock_nested($p25, 0);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(2864, 1));
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, 1);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(1104, 1));
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(8, 1));
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} device_remove_file($p39, dev_attr_bmCapabilities);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(8, 1));
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} ldv_usb_set_intfdata_22($p41, $0.ref);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(16, 1));
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} ldv_usb_set_intfdata_22($p43, $0.ref);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(2696, 1));
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} mutex_unlock($p44);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(24, 1));
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} $p46 := tty_port_tty_get($p45);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} stop_data_traffic($p3);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $p49 := $M.7;
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(2980, 1));
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} tty_unregister_device($p49, $i51);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(1080, 1));
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} ldv_usb_free_urb_32($p53);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $i54 := 0;
    goto $bb14;

  $bb14:
    call $i55, $p58, $p59, $i60, $i61, $i54 := acm_disconnect_loop_$bb14($p3, $i55, $p58, $p59, $i60, $i61, $i54);
    goto $bb14_last;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i54);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(1120, 1)), $mul.ref($i55, 40)), $mul.ref(24, 1));
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} ldv_usb_free_urb_33($p59);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i60 := $add.i32($i54, 1);
    call {:si_unique_call 206} {:cexpr "i"} boogie_si_record_i32($i60);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i61 := $sle.i32($i60, 15);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(2536, 1));
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i64 := $sgt.i32($i63, 0);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} acm_write_buffers_free($p3);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(2976, 1));
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i75 := $zext.i32.i64($i74);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(1088, 1));
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(1096, 1));
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $i79 := $load.i64($M.0, $p78);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} usb_free_coherent($p4, $i75, $p77, $i79);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} acm_read_buffers_free($p3);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p3);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($p80, $mul.ref(2988, 1));
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.0, $p81);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i82);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 0);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(24, 1));
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} tty_port_put($p95);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb27:
    assume $i84 == 1;
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(8, 1));
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i87 := $p2i.ref.i64($p86);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i88 := $p2i.ref.i64($p0);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i89 := $eq.i64($i87, $i88);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i89 == 1);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(8, 1));
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $p92 := $p94;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} usb_driver_release_interface(acm_driver, $p92);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb29:
    assume $i89 == 1;
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(16, 1));
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $p92 := $p91;
    goto $bb31;

  $bb19:
    assume $i64 == 1;
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i65 := 0;
    goto $bb22;

  $bb22:
    call $i66, $p68, $p69, $i70, $i71, $i72, $i65 := acm_disconnect_loop_$bb22($p3, $p62, $i66, $p68, $p69, $i70, $i71, $i72, $i65);
    goto $bb22_last;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i65);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(1768, 1)), $mul.ref($i66, 8));
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} ldv_usb_free_urb_34($p69);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i65, 1);
    call {:si_unique_call 208} {:cexpr "i"} boogie_si_record_i32($i70);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p62);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i72 := $sgt.i32($i71, $i70);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i72 == 1);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb24:
    assume $i72 == 1;
    assume {:verifier.code 0} true;
    $i65 := $i70;
    goto $bb24_dummy;

  $bb16:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    $i54 := $i60;
    goto $bb16_dummy;

  $bb11:
    assume $i48 == 1;
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} tty_vhangup($p46);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} tty_kref_put($p46);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(8, 1));
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} device_remove_file($p33, dev_attr_wCountryCodes);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(8, 1));
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} device_remove_file($p36, dev_attr_iCountryCodeRelDate);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} vslice_dummy_var_60 := __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p21, .str.6, .str.76);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb24_dummy:
    assume false;
    return;

  $bb22_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1240;

  $bb16_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1225;
}



const acm_suspend: ref;

axiom acm_suspend == $sub.ref(0, 141269);

procedure acm_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation acm_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, $p3, $i1);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} $p4 := ldv_usb_get_intfdata_3($p0);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.8, $p6);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 1024);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 3008)), $mul.ref(2544, 1));
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} spin_lock_irq($p16);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 3008)), $mul.ref(2624, 1));
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} spin_lock($p17);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 3008)), $mul.ref(2992, 1));
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    call {:si_unique_call 221} {:cexpr "tmp___0"} boogie_si_record_i32($i19);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 3008)), $mul.ref(2992, 1));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, 1);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 3008)), $mul.ref(2992, 1));
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i22);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 3008)), $mul.ref(2624, 1));
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} spin_unlock($p24);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 3008)), $mul.ref(2544, 1));
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} spin_unlock_irq($p25);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i19, 0);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 3008)), $mul.ref(24, 1)), $mul.ref(680, 1));
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} $i29 := constant_test_bit(31, $p28);
    call {:si_unique_call 225} {:cexpr "tmp___1"} boogie_si_record_i32($i29);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} stop_data_traffic($p5);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb5;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 3008)), $mul.ref(2624, 1));
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} spin_lock_irq($p10);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 3008)), $mul.ref(2620, 1));
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    call {:si_unique_call 217} {:cexpr "b"} boogie_si_record_i32($i12);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 3008)), $mul.ref(2624, 1));
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} spin_unlock_irq($p13);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i12, 0);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 16);
    goto $bb5;
}



const acm_resume: ref;

axiom acm_resume == $sub.ref(0, 142301);

procedure acm_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.13, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.15, $M.17, $CurrAddr, $M.9, $M.10, assertsPassed;



implementation acm_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $i31: i1;
  var $i33: i32;
  var $i34: i32;
  var $i32: i32;
  var $i12: i32;
  var vslice_dummy_var_61: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} $p1 := ldv_usb_get_intfdata_3($p0);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 3008)), $mul.ref(2544, 1));
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} spin_lock_irq($p3);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 3008)), $mul.ref(2992, 1));
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i5, 1);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 3008)), $mul.ref(2992, 1));
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i6);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 3008)), $mul.ref(2992, 1));
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    call {:si_unique_call 229} {:cexpr "cnt"} boogie_si_record_i32($i9);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 3008)), $mul.ref(2544, 1));
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} spin_unlock_irq($p10);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i9, 0);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 3008)), $mul.ref(24, 1)), $mul.ref(680, 1));
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} $i15 := constant_test_bit(31, $p14);
    call {:si_unique_call 232} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $i32 := $i34;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $i12 := $i32;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 3008)), $mul.ref(1080, 1));
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} $i19 := ldv_usb_submit_urb_37($p18, 16);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 234} {:cexpr "rv"} boogie_si_record_i32($i19);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 3008)), $mul.ref(2624, 1));
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} spin_lock_irq($p20);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 3008)), $mul.ref(3000, 1));
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i24 == 1);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 3008)), $mul.ref(2624, 1));
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} spin_unlock_irq($p30);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i19, 0);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} $i33 := acm_submit_read_urbs($p2, 16);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    call {:si_unique_call 240} {:cexpr "rv"} boogie_si_record_i32($i33);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb14;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i31 == 1;
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $i32 := $i19;
    goto $bb12;

  $bb7:
    assume $i24 == 1;
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 3008)), $mul.ref(3000, 1));
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 3008)), $mul.ref(3000, 1));
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, $0.ref);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 3008)), $mul.ref(2624, 1));
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} spin_unlock_irq($p28);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} vslice_dummy_var_61 := acm_start_wb($p2, $p26);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;
}



const acm_reset_resume: ref;

axiom acm_reset_resume == $sub.ref(0, 143333);

procedure acm_reset_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.13, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.15, $M.17, $CurrAddr, $M.9, $M.10, assertsPassed;



implementation acm_reset_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} $p1 := ldv_usb_get_intfdata_3($p0);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 3008)), $mul.ref(24, 1)), $mul.ref(680, 1));
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} $i5 := constant_test_bit(31, $p4);
    call {:si_unique_call 243} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} $i8 := acm_resume($p0);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    call {:si_unique_call 246} {:cexpr "tmp___1"} boogie_si_record_i32($i8);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 3008)), $mul.ref(24, 1));
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} tty_port_tty_hangup($p7, 0);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_usb_get_intfdata_3: ref;

axiom ldv_usb_get_intfdata_3 == $sub.ref(0, 144365);

procedure ldv_usb_get_intfdata_3($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ldv_usb_get_intfdata_3($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} $p1 := ldv_usb_get_intfdata();
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 145397);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const tty_port_tty_hangup: ref;

axiom tty_port_tty_hangup == $sub.ref(0, 146429);

procedure tty_port_tty_hangup($p0: ref, $i1: i1);
  free requires assertsPassed;



implementation tty_port_tty_hangup($p0: ref, $i1: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} {:cexpr "tty_port_tty_hangup:arg:arg1"} boogie_si_record_i1($i1);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_get_intfdata: ref;

axiom ldv_usb_get_intfdata == $sub.ref(0, 147461);

procedure ldv_usb_get_intfdata() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_usb_get_intfdata() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $p0 := $M.9;
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const spin_lock_irq: ref;

axiom spin_lock_irq == $sub.ref(0, 148493);

procedure spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_lock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} _raw_spin_lock_irq($p2);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irq: ref;

axiom spin_unlock_irq == $sub.ref(0, 149525);

procedure spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_unlock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} _raw_spin_unlock_irq($p2);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_submit_urb_37: ref;

axiom ldv_usb_submit_urb_37 == $sub.ref(0, 150557);

procedure ldv_usb_submit_urb_37($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.13, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.15, $M.17, $CurrAddr, $M.9, $M.10, assertsPassed;



implementation ldv_usb_submit_urb_37($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} {:cexpr "ldv_usb_submit_urb_37:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} $i2 := ldv_submit_urb($p0);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    call {:si_unique_call 254} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const acm_start_wb: ref;

axiom acm_start_wb == $sub.ref(0, 151589);

procedure acm_start_wb($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.13, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.15, $M.17, $CurrAddr, $M.9, $M.10, assertsPassed;



implementation acm_start_wb($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var vslice_dummy_var_62: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2620, 1));
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 1);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2620, 1));
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i4);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p7);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p15, $i12);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i17);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(0, 1));
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $p22);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} $i28 := ldv_usb_submit_urb_2($p27, 32);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    call {:si_unique_call 256} {:cexpr "rc"} boogie_si_record_i32($i28);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i28, 0);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb1:
    assume $i29 == 1;
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(16, 1));
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} vslice_dummy_var_62 := dev_err.ref.ref.ref.i32($p32, .str.1, .str.2, $i28);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} acm_write_done($p0, $p1);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_16:
    assume !assertsPassed;
    return;
}



const acm_submit_read_urbs: ref;

axiom acm_submit_read_urbs == $sub.ref(0, 152621);

procedure acm_submit_read_urbs($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.13, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.15, $M.17, $CurrAddr, $M.9, $M.10, assertsPassed;



implementation acm_submit_read_urbs($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i5: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} {:cexpr "acm_submit_read_urbs:arg:mem_flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2536, 1));
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $i6, $i7, $i8, $i10, $i11, $i12, $i5 := acm_submit_read_urbs_loop_$bb4($p0, $i1, $p2, $i6, $i7, $i8, $i10, $i11, $i12, $i5);
    goto $bb4_last;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $i6 := acm_submit_read_urb($p0, $i5, $i1);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    call {:si_unique_call 261} {:cexpr "res"} boogie_si_record_i32($i6);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i5, 1);
    call {:si_unique_call 262} {:cexpr "i"} boogie_si_record_i32($i10);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p2);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i11, $i10);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i12 == 1);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i10;
    goto $bb10_dummy;

  $bb6:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb8;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1487;
}



const acm_submit_read_urb: ref;

axiom acm_submit_read_urb == $sub.ref(0, 153653);

procedure acm_submit_read_urb($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.13, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.15, $M.17, $CurrAddr, $M.9, $M.10, assertsPassed;



implementation acm_submit_read_urb($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i64;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i19: i64;
  var $p20: ref;
  var $i7: i32;
  var vslice_dummy_var_63: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} {:cexpr "acm_submit_read_urb:arg:index"} boogie_si_record_i32($i1);
    call {:si_unique_call 264} {:cexpr "acm_submit_read_urb:arg:mem_flags"} boogie_si_record_i32($i2);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i1);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1760, 1));
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} $i5 := test_and_clear_bit($i3, $p4);
    call {:si_unique_call 266} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i1);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1768, 1)), $mul.ref($i8, 8));
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} $i12 := ldv_usb_submit_urb_7($p11, $i2);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    call {:si_unique_call 268} {:cexpr "res"} boogie_si_record_i32($i12);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i12, $sub.i32(0, 1));
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i1);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1760, 1));
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} set_bit($i19, $p20);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $i7 := $i12;
    goto $bb3;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(16, 1));
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} vslice_dummy_var_63 := dev_err.ref.ref.ref.i32($p17, .str.10, .str.11, $i12);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const test_and_clear_bit: ref;

axiom test_and_clear_bit == $sub.ref(0, 154685);

procedure test_and_clear_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation test_and_clear_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} {:cexpr "test_and_clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 272} $i2 := devirtbounce(0, $p1, $i0, $p1);
    call {:si_unique_call 273} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_usb_submit_urb_7: ref;

axiom ldv_usb_submit_urb_7 == $sub.ref(0, 155717);

procedure ldv_usb_submit_urb_7($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.13, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.15, $M.17, $CurrAddr, $M.9, $M.10, assertsPassed;



implementation ldv_usb_submit_urb_7($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} {:cexpr "ldv_usb_submit_urb_7:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $i2 := ldv_submit_urb($p0);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    call {:si_unique_call 276} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 156749);

procedure dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 1} true;
    call {:si_unique_call 277} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 278} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 1} true;
    call {:si_unique_call 279} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 280} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 1} true;
    call {:si_unique_call 281} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 282} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 157781);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 284} devirtbounce.1(0, $p1, $i0, $p1);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    return;
}



const ldv_submit_urb: ref;

axiom ldv_submit_urb == $sub.ref(0, 158813);

procedure ldv_submit_urb($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.13, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.15, $M.17, $CurrAddr, $M.9, $M.10, assertsPassed;



implementation ldv_submit_urb($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} $i1 := ldv_undef_int();
    call {:si_unique_call 286} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i2 := $sle.i32($i1, 0);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} ldv_stop___0();
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $p4 := $M.10;
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i5, $i6);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i8 := $M.11;
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i12 := $M.13;
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i13 == 1;
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $p14 := $M.14;
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $p15 := $M.10;
    call {:si_unique_call 290} devirtbounce.2($p14, $p15);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $M.13 := 0;
    call {:si_unique_call 291} {:cexpr "completeFnBulkCounter"} boogie_si_record_i32(0);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $p10 := $M.12;
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $p11 := $M.10;
    call {:si_unique_call 288} devirtbounce.2($p10, $p11);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $M.11 := 0;
    call {:si_unique_call 289} {:cexpr "completeFnIntCounter"} boogie_si_record_i32(0);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 159845);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 1} true;
    call {:si_unique_call 292} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 293} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 294} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_stop___0: ref;

axiom ldv_stop___0 == $sub.ref(0, 160877);

procedure ldv_stop___0();
  free requires assertsPassed;



implementation ldv_stop___0()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop___0_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_usb_submit_urb_2: ref;

axiom ldv_usb_submit_urb_2 == $sub.ref(0, 161909);

procedure ldv_usb_submit_urb_2($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.13, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.15, $M.17, $CurrAddr, $M.9, $M.10, assertsPassed;



implementation ldv_usb_submit_urb_2($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} {:cexpr "ldv_usb_submit_urb_2:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $i2 := ldv_submit_urb($p0);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    call {:si_unique_call 297} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;
}



const acm_write_done: ref;

axiom acm_write_done == $sub.ref(0, 162941);

procedure acm_write_done($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation acm_write_done($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2620, 1));
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32($i4, 1);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2620, 1));
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i5);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(8, 1));
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} usb_autopm_put_interface_async($p8);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    return;
}



const usb_autopm_put_interface_async: ref;

axiom usb_autopm_put_interface_async == $sub.ref(0, 163973);

procedure usb_autopm_put_interface_async($p0: ref);
  free requires assertsPassed;



implementation usb_autopm_put_interface_async($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irq: ref;

axiom _raw_spin_unlock_irq == $sub.ref(0, 165005);

procedure _raw_spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_irq: ref;

axiom _raw_spin_lock_irq == $sub.ref(0, 166037);

procedure _raw_spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 167069);

procedure spin_lock($p0: ref);
  free requires assertsPassed;



implementation spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} _raw_spin_lock($p2);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 168101);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;



implementation spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} _raw_spin_unlock($p2);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    return;
}



const stop_data_traffic: ref;

axiom stop_data_traffic == $sub.ref(0, 169133);

procedure stop_data_traffic($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation stop_data_traffic($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i32: i64;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i31: i32;
  var $p39: ref;
  var $p43: ref;
  var $p44: ref;
  var $p47: ref;
  var $p48: ref;
  var $p51: ref;
  var $p52: ref;
  var $p55: ref;
  var $p56: ref;
  var $p59: ref;
  var $p60: ref;
  var $p63: ref;
  var $p64: ref;
  var $p67: ref;
  var $p68: ref;
  var $p71: ref;
  var $p72: ref;
  var $p75: ref;
  var $p76: ref;
  var $p79: ref;
  var $p80: ref;
  var $p83: ref;
  var $p84: ref;
  var $p87: ref;
  var $p88: ref;
  var $p91: ref;
  var $p92: ref;
  var $p95: ref;
  var $p96: ref;
  var $p99: ref;
  var $p100: ref;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, .str.3);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p3, .str.77);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p4, .str.5);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p5, .str.6);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.5, $p7);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 1402);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p7, $i10);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p11, 0);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.6, $p12);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 303} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1080, 1));
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} usb_kill_urb($p23);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1120, 1)), $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} usb_kill_urb($p27);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1120, 1)), $mul.ref(1, 40)), $mul.ref(24, 1));
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} usb_kill_urb($p44);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1120, 1)), $mul.ref(2, 40)), $mul.ref(24, 1));
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} usb_kill_urb($p48);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1120, 1)), $mul.ref(3, 40)), $mul.ref(24, 1));
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} usb_kill_urb($p52);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1120, 1)), $mul.ref(4, 40)), $mul.ref(24, 1));
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} usb_kill_urb($p56);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1120, 1)), $mul.ref(5, 40)), $mul.ref(24, 1));
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} usb_kill_urb($p60);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1120, 1)), $mul.ref(6, 40)), $mul.ref(24, 1));
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} usb_kill_urb($p64);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1120, 1)), $mul.ref(7, 40)), $mul.ref(24, 1));
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} usb_kill_urb($p68);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1120, 1)), $mul.ref(8, 40)), $mul.ref(24, 1));
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} usb_kill_urb($p72);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1120, 1)), $mul.ref(9, 40)), $mul.ref(24, 1));
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} usb_kill_urb($p76);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1120, 1)), $mul.ref(10, 40)), $mul.ref(24, 1));
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} usb_kill_urb($p80);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1120, 1)), $mul.ref(11, 40)), $mul.ref(24, 1));
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} usb_kill_urb($p84);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1120, 1)), $mul.ref(12, 40)), $mul.ref(24, 1));
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} usb_kill_urb($p88);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1120, 1)), $mul.ref(13, 40)), $mul.ref(24, 1));
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} usb_kill_urb($p92);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1120, 1)), $mul.ref(14, 40)), $mul.ref(24, 1));
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} usb_kill_urb($p96);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1120, 1)), $mul.ref(15, 40)), $mul.ref(24, 1));
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} usb_kill_urb($p100);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2536, 1));
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i30 := $sgt.i32($i29, 0);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2880, 1));
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} vslice_dummy_var_65 := cancel_work_sync($p39);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb11;

  $bb11:
    call $i32, $p34, $p35, $i36, $i37, $i38, $i31 := stop_data_traffic_loop_$bb11($p0, $p28, $i32, $p34, $p35, $i36, $i37, $i38, $i31);
    goto $bb11_last;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1768, 1)), $mul.ref($i32, 8));
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} usb_kill_urb($p35);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i31, 1);
    call {:si_unique_call 309} {:cexpr "i"} boogie_si_record_i32($i36);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p28);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i38 := $sgt.i32($i37, $i36);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i38 == 1);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb13:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i31 := $i36;
    goto $bb13_dummy;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(8, 1));
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} vslice_dummy_var_64 := __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p20, .str.6, .str.77);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1664;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 170165);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 326} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 171197);

procedure __dynamic_dev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 1} true;
    call {:si_unique_call 327} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 328} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 1} true;
    call {:si_unique_call 329} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 330} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 1} true;
    call {:si_unique_call 331} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 332} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 1} true;
    call {:si_unique_call 333} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 334} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 1} true;
    call {:si_unique_call 335} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 336} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 1} true;
    call {:si_unique_call 337} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 338} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 1} true;
    call {:si_unique_call 339} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 340} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_kill_urb: ref;

axiom usb_kill_urb == $sub.ref(0, 172229);

procedure usb_kill_urb($p0: ref);
  free requires assertsPassed;



implementation usb_kill_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    return;
}



const cancel_work_sync: ref;

axiom cancel_work_sync == $sub.ref(0, 173261);

procedure cancel_work_sync($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_work_sync($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 1} true;
    call {:si_unique_call 341} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 342} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 174293);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 175325);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    return;
}



const interface_to_usbdev: ref;

axiom interface_to_usbdev == $sub.ref(0, 176357);

procedure interface_to_usbdev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation interface_to_usbdev($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} $p1 := ldv_interface_to_usbdev();
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 177389);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    return;
}



const device_remove_file: ref;

axiom device_remove_file == $sub.ref(0, 178421);

procedure device_remove_file($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation device_remove_file($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_set_intfdata_22: ref;

axiom ldv_usb_set_intfdata_22 == $sub.ref(0, 179453);

procedure ldv_usb_set_intfdata_22($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.9;



implementation ldv_usb_set_intfdata_22($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} ldv_usb_set_intfdata($p1);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 180485);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    return;
}



const tty_port_tty_get: ref;

axiom tty_port_tty_get == $sub.ref(0, 181517);

procedure tty_port_tty_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation tty_port_tty_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} $p1 := external_alloc();
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const tty_vhangup: ref;

axiom tty_vhangup == $sub.ref(0, 182549);

procedure tty_vhangup($p0: ref);
  free requires assertsPassed;



implementation tty_vhangup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    return;
}



const tty_kref_put: ref;

axiom tty_kref_put == $sub.ref(0, 183581);

procedure tty_kref_put($p0: ref);
  free requires assertsPassed;



implementation tty_kref_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    return;
}



const tty_unregister_device: ref;

axiom tty_unregister_device == $sub.ref(0, 184613);

procedure tty_unregister_device($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation tty_unregister_device($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} {:cexpr "tty_unregister_device:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_free_urb_32: ref;

axiom ldv_usb_free_urb_32 == $sub.ref(0, 185645);

procedure ldv_usb_free_urb_32($p0: ref);
  free requires assertsPassed;
  modifies $M.10;



implementation ldv_usb_free_urb_32($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} ldv_free_urb($p0);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_free_urb_33: ref;

axiom ldv_usb_free_urb_33 == $sub.ref(0, 186677);

procedure ldv_usb_free_urb_33($p0: ref);
  free requires assertsPassed;
  modifies $M.10;



implementation ldv_usb_free_urb_33($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} ldv_free_urb($p0);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_free_urb_34: ref;

axiom ldv_usb_free_urb_34 == $sub.ref(0, 187709);

procedure ldv_usb_free_urb_34($p0: ref);
  free requires assertsPassed;
  modifies $M.10;



implementation ldv_usb_free_urb_34($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} ldv_free_urb($p0);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    return;
}



const acm_write_buffers_free: ref;

axiom acm_write_buffers_free == $sub.ref(0, 188741);

procedure acm_write_buffers_free($p0: ref);
  free requires assertsPassed;



implementation acm_write_buffers_free($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $p41: ref;
  var $i42: i32;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $p50: ref;
  var $i51: i32;
  var $i52: i64;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i64;
  var $p59: ref;
  var $i60: i32;
  var $i61: i64;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $i66: i64;
  var $p68: ref;
  var $i69: i32;
  var $i70: i64;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $i75: i64;
  var $p77: ref;
  var $i78: i32;
  var $i79: i64;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $i84: i64;
  var $p86: ref;
  var $i87: i32;
  var $i88: i64;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $i93: i64;
  var $p95: ref;
  var $i96: i32;
  var $i97: i64;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i64;
  var $i102: i64;
  var $p104: ref;
  var $i105: i32;
  var $i106: i64;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i64;
  var $i111: i64;
  var $p113: ref;
  var $i114: i32;
  var $i115: i64;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i64;
  var $i120: i64;
  var $p122: ref;
  var $i123: i32;
  var $i124: i64;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $i128: i64;
  var $i129: i64;
  var $p131: ref;
  var $i132: i32;
  var $i133: i64;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $i137: i64;
  var $i138: i64;
  var $p140: ref;
  var $i141: i32;
  var $i142: i64;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(8, 1));
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} $p3 := interface_to_usbdev($p2);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1120, 1));
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} usb_free_coherent($p3, $i8, $p10, $i12);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i15);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(1, 40)), $mul.ref(0, 1));
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(1, 40)), $mul.ref(8, 1));
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} usb_free_coherent($p3, $i16, $p18, $i20);
    $i21 := $add.i64(1, 1);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i24);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref($i21, 40)), $mul.ref(0, 1));
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref($i21, 40)), $mul.ref(8, 1));
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.0, $p28);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} usb_free_coherent($p3, $i25, $p27, $i29);
    $i30 := $add.i64($i21, 1);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i34 := $zext.i32.i64($i33);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref($i30, 40)), $mul.ref(0, 1));
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref($i30, 40)), $mul.ref(8, 1));
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.0, $p37);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} usb_free_coherent($p3, $i34, $p36, $i38);
    $i39 := $add.i64($i30, 1);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i43 := $zext.i32.i64($i42);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref($i39, 40)), $mul.ref(0, 1));
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p5, $mul.ref($i39, 40)), $mul.ref(8, 1));
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.0, $p46);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} usb_free_coherent($p3, $i43, $p45, $i47);
    $i48 := $add.i64($i39, 1);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i52 := $zext.i32.i64($i51);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p5, $mul.ref($i48, 40)), $mul.ref(0, 1));
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p5, $mul.ref($i48, 40)), $mul.ref(8, 1));
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.0, $p55);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} usb_free_coherent($p3, $i52, $p54, $i56);
    $i57 := $add.i64($i48, 1);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i61 := $zext.i32.i64($i60);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p5, $mul.ref($i57, 40)), $mul.ref(0, 1));
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p5, $mul.ref($i57, 40)), $mul.ref(8, 1));
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.0, $p64);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} usb_free_coherent($p3, $i61, $p63, $i65);
    $i66 := $add.i64($i57, 1);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i70 := $zext.i32.i64($i69);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p5, $mul.ref($i66, 40)), $mul.ref(0, 1));
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p5, $mul.ref($i66, 40)), $mul.ref(8, 1));
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i74 := $load.i64($M.0, $p73);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} usb_free_coherent($p3, $i70, $p72, $i74);
    $i75 := $add.i64($i66, 1);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i79 := $zext.i32.i64($i78);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p5, $mul.ref($i75, 40)), $mul.ref(0, 1));
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p5, $mul.ref($i75, 40)), $mul.ref(8, 1));
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i83 := $load.i64($M.0, $p82);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} usb_free_coherent($p3, $i79, $p81, $i83);
    $i84 := $add.i64($i75, 1);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i88 := $zext.i32.i64($i87);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p5, $mul.ref($i84, 40)), $mul.ref(0, 1));
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p5, $mul.ref($i84, 40)), $mul.ref(8, 1));
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i92 := $load.i64($M.0, $p91);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} usb_free_coherent($p3, $i88, $p90, $i92);
    $i93 := $add.i64($i84, 1);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.0, $p95);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i97 := $zext.i32.i64($i96);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p5, $mul.ref($i93, 40)), $mul.ref(0, 1));
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p5, $mul.ref($i93, 40)), $mul.ref(8, 1));
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $i101 := $load.i64($M.0, $p100);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} usb_free_coherent($p3, $i97, $p99, $i101);
    $i102 := $add.i64($i93, 1);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i106 := $zext.i32.i64($i105);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p5, $mul.ref($i102, 40)), $mul.ref(0, 1));
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p5, $mul.ref($i102, 40)), $mul.ref(8, 1));
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i110 := $load.i64($M.0, $p109);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} usb_free_coherent($p3, $i106, $p108, $i110);
    $i111 := $add.i64($i102, 1);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i115 := $zext.i32.i64($i114);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p5, $mul.ref($i111, 40)), $mul.ref(0, 1));
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p5, $mul.ref($i111, 40)), $mul.ref(8, 1));
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $i119 := $load.i64($M.0, $p118);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} usb_free_coherent($p3, $i115, $p117, $i119);
    $i120 := $add.i64($i111, 1);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i123 := $load.i32($M.0, $p122);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i124 := $zext.i32.i64($i123);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p5, $mul.ref($i120, 40)), $mul.ref(0, 1));
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.0, $p125);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p5, $mul.ref($i120, 40)), $mul.ref(8, 1));
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $i128 := $load.i64($M.0, $p127);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} usb_free_coherent($p3, $i124, $p126, $i128);
    $i129 := $add.i64($i120, 1);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.0, $p131);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i133 := $zext.i32.i64($i132);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p5, $mul.ref($i129, 40)), $mul.ref(0, 1));
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.0, $p134);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p5, $mul.ref($i129, 40)), $mul.ref(8, 1));
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i137 := $load.i64($M.0, $p136);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} usb_free_coherent($p3, $i133, $p135, $i137);
    $i138 := $add.i64($i129, 1);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $i141 := $load.i32($M.0, $p140);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i142 := $zext.i32.i64($i141);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p5, $mul.ref($i138, 40)), $mul.ref(0, 1));
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.0, $p143);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p5, $mul.ref($i138, 40)), $mul.ref(8, 1));
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $i146 := $load.i64($M.0, $p145);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} usb_free_coherent($p3, $i142, $p144, $i146);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;
}



const usb_free_coherent: ref;

axiom usb_free_coherent == $sub.ref(0, 189773);

procedure usb_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation usb_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} {:cexpr "usb_free_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 369} {:cexpr "usb_free_coherent:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    return;
}



const acm_read_buffers_free: ref;

axiom acm_read_buffers_free == $sub.ref(0, 190805);

procedure acm_read_buffers_free($p0: ref);
  free requires assertsPassed;



implementation acm_read_buffers_free($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(8, 1));
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} $p3 := interface_to_usbdev($p2);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2536, 1));
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 0);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb4;

  $bb4:
    call $p8, $i9, $i10, $i11, $p14, $p15, $i16, $p19, $i20, $i21, $i22, $i23, $i7 := acm_read_buffers_free_loop_$bb4($p0, $p3, $p4, $p8, $i9, $i10, $i11, $p14, $p15, $i16, $p19, $i20, $i21, $i22, $i23, $i7);
    goto $bb4_last;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2972, 1));
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i9);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i7);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1896, 1)), $mul.ref($i11, 40)), $mul.ref(8, 1));
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i7);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1896, 1)), $mul.ref($i16, 40)), $mul.ref(16, 1));
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} usb_free_coherent($p3, $i10, $p15, $i20);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i7, 1);
    call {:si_unique_call 372} {:cexpr "i"} boogie_si_record_i32($i21);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p4);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i23 := $sgt.i32($i22, $i21);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i21;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1974;
}



const usb_driver_release_interface: ref;

axiom usb_driver_release_interface == $sub.ref(0, 191837);

procedure usb_driver_release_interface($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation usb_driver_release_interface($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    return;
}



const tty_port_put: ref;

axiom tty_port_put == $sub.ref(0, 192869);

procedure tty_port_put($p0: ref);
  free requires assertsPassed;



implementation tty_port_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_urb: ref;

axiom ldv_free_urb == $sub.ref(0, 193901);

procedure ldv_free_urb($p0: ref);
  free requires assertsPassed;
  modifies $M.10;



implementation ldv_free_urb($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $p1 := $M.10;
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i2, $i3);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $p5 := $M.10;
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $M.10 := $0.ref;
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 194933);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 1} true;
    call {:si_unique_call 373} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 374} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_usb_set_intfdata: ref;

axiom ldv_usb_set_intfdata == $sub.ref(0, 195965);

procedure ldv_usb_set_intfdata($p0: ref);
  free requires assertsPassed;
  modifies $M.9;



implementation ldv_usb_set_intfdata($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $M.9 := $p0;
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    return;
}



const ldv_interface_to_usbdev: ref;

axiom ldv_interface_to_usbdev == $sub.ref(0, 196997);

procedure ldv_interface_to_usbdev() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_interface_to_usbdev() returns ($r: ref)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} $p0 := ldv_undef_ptr();
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} ldv_stop___0();
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 198029);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 1} true;
    call {:si_unique_call 377} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 378} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const usb_ifnum_to_if: ref;

axiom usb_ifnum_to_if == $sub.ref(0, 199061);

procedure usb_ifnum_to_if($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation usb_ifnum_to_if($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} {:cexpr "usb_ifnum_to_if:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} $p2 := external_alloc();
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 200093);

procedure dev_warn.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 1} true;
    call {:si_unique_call 381} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 382} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_endpoint_is_int_in: ref;

axiom usb_endpoint_is_int_in == $sub.ref(0, 201125);

procedure usb_endpoint_is_int_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_is_int_in($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} $i1 := usb_endpoint_xfer_int($p0);
    call {:si_unique_call 384} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} $i3 := usb_endpoint_dir_in($p0);
    call {:si_unique_call 386} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;
}



const usb_endpoint_is_bulk_out: ref;

axiom usb_endpoint_is_bulk_out == $sub.ref(0, 202157);

procedure usb_endpoint_is_bulk_out($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_is_bulk_out($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} $i1 := usb_endpoint_xfer_bulk($p0);
    call {:si_unique_call 388} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} $i3 := usb_endpoint_dir_out($p0);
    call {:si_unique_call 390} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;
}



const usb_endpoint_is_bulk_in: ref;

axiom usb_endpoint_is_bulk_in == $sub.ref(0, 203189);

procedure usb_endpoint_is_bulk_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_is_bulk_in($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} $i1 := usb_endpoint_xfer_bulk($p0);
    call {:si_unique_call 392} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} $i3 := usb_endpoint_dir_in($p0);
    call {:si_unique_call 394} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;
}



const usb_interface_claimed: ref;

axiom usb_interface_claimed == $sub.ref(0, 204221);

procedure usb_interface_claimed($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_interface_claimed($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1)), $mul.ref(504, 1));
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_endpoint_dir_in: ref;

axiom usb_endpoint_dir_in == $sub.ref(0, 205253);

procedure usb_endpoint_dir_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_dir_in($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $i3 := $sext.i8.i32($i2);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 206285);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 396} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const acm_alloc_minor: ref;

axiom acm_alloc_minor == $sub.ref(0, 207317);

procedure acm_alloc_minor($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15;



implementation acm_alloc_minor($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $i66: i64;
  var $i67: i1;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $p74: ref;
  var $i75: i64;
  var $i76: i1;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $p83: ref;
  var $i84: i64;
  var $i85: i1;
  var $p86: ref;
  var $i87: i64;
  var $i88: i1;
  var $p89: ref;
  var $i90: i64;
  var $i91: i1;
  var $p92: ref;
  var $i93: i64;
  var $i94: i1;
  var $p95: ref;
  var $i96: i64;
  var $i97: i1;
  var $p98: ref;
  var $i99: i64;
  var $i100: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} mutex_lock_nested(acm_table_lock, 0);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.15, acm_table);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(1, 8)));
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i4 := 1;
    assume {:branchcond $i10} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(2, 8)));
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i4 := 2;
    assume {:branchcond $i13} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(3, 8)));
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i4 := 3;
    assume {:branchcond $i16} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(4, 8)));
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i4 := 4;
    assume {:branchcond $i19} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(5, 8)));
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i4 := 5;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(6, 8)));
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i4 := 6;
    assume {:branchcond $i25} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(7, 8)));
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $i4 := 7;
    assume {:branchcond $i28} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(8, 8)));
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i4 := 8;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(9, 8)));
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i33, 0);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i4 := 9;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(10, 8)));
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $i4 := 10;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(11, 8)));
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $i40 := $eq.i64($i39, 0);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $i4 := 11;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(12, 8)));
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i4 := 12;
    assume {:branchcond $i43} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(13, 8)));
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $i46 := $eq.i64($i45, 0);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i4 := 13;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(14, 8)));
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i49 := $eq.i64($i48, 0);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i4 := 14;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(15, 8)));
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i52 := $eq.i64($i51, 0);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i4 := 15;
    assume {:branchcond $i52} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(16, 8)));
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $i55 := $eq.i64($i54, 0);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i4 := 16;
    assume {:branchcond $i55} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(17, 8)));
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i58 := $eq.i64($i57, 0);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i4 := 17;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(18, 8)));
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i61 := $eq.i64($i60, 0);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i4 := 18;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(19, 8)));
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i64 := $eq.i64($i63, 0);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i4 := 19;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(20, 8)));
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p65);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i67 := $eq.i64($i66, 0);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i4 := 20;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(21, 8)));
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i70 := $eq.i64($i69, 0);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i4 := 21;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(22, 8)));
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $i73 := $eq.i64($i72, 0);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i4 := 22;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(23, 8)));
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p74);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $i76 := $eq.i64($i75, 0);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $i4 := 23;
    assume {:branchcond $i76} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(24, 8)));
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $i79 := $eq.i64($i78, 0);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $i4 := 24;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(25, 8)));
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $i82 := $eq.i64($i81, 0);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $i4 := 25;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(26, 8)));
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p83);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i85 := $eq.i64($i84, 0);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i4 := 26;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(27, 8)));
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $i87 := $p2i.ref.i64($p86);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i88 := $eq.i64($i87, 0);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i4 := 27;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(28, 8)));
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i90 := $p2i.ref.i64($p89);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $i91 := $eq.i64($i90, 0);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i4 := 28;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(29, 8)));
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $i93 := $p2i.ref.i64($p92);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $i94 := $eq.i64($i93, 0);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $i4 := 29;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(30, 8)));
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i96 := $p2i.ref.i64($p95);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i97 := $eq.i64($i96, 0);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i4 := 30;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(31, 8)));
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p98);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i100 := $eq.i64($i99, 0);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i4 := 31;
    assume {:branchcond $i100} true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i7 := 32;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} mutex_unlock(acm_table_lock);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb130:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref($i5, 8));
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p6, $p0);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i7 := $i4;
    goto $bb6;

  $bb126:
    assume {:verifier.code 0} true;
    assume $i97 == 1;
    goto $bb4;

  $bb122:
    assume {:verifier.code 0} true;
    assume $i94 == 1;
    goto $bb4;

  $bb118:
    assume {:verifier.code 0} true;
    assume $i91 == 1;
    goto $bb4;

  $bb114:
    assume {:verifier.code 0} true;
    assume $i88 == 1;
    goto $bb4;

  $bb110:
    assume {:verifier.code 0} true;
    assume $i85 == 1;
    goto $bb4;

  $bb106:
    assume {:verifier.code 0} true;
    assume $i82 == 1;
    goto $bb4;

  $bb102:
    assume {:verifier.code 0} true;
    assume $i79 == 1;
    goto $bb4;

  $bb98:
    assume {:verifier.code 0} true;
    assume $i76 == 1;
    goto $bb4;

  $bb94:
    assume {:verifier.code 0} true;
    assume $i73 == 1;
    goto $bb4;

  $bb90:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb4;

  $bb86:
    assume {:verifier.code 0} true;
    assume $i67 == 1;
    goto $bb4;

  $bb82:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb4;

  $bb78:
    assume {:verifier.code 0} true;
    assume $i61 == 1;
    goto $bb4;

  $bb74:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb4;

  $bb70:
    assume {:verifier.code 0} true;
    assume $i55 == 1;
    goto $bb4;

  $bb66:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb4;

  $bb62:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb4;

  $bb58:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb4;

  $bb54:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb4;

  $bb50:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb4;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb4;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb4;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb4;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb4;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb4;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb4;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb4;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb4;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb4;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb4;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 208349);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} free_($p0);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    return;
}



const usb_endpoint_maxp: ref;

axiom usb_endpoint_maxp == $sub.ref(0, 209381);

procedure usb_endpoint_maxp($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_maxp($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 210413);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 211445);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 212477);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 213509);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    return;
}



const acm_softint: ref;

axiom acm_softint == $sub.ref(0, 214541);

procedure acm_softint($p0: ref);
  free requires assertsPassed;



implementation acm_softint($p0: ref)
{
  var $p1: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2872), 3008)), $mul.ref(24, 1));
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} tty_port_tty_wakeup($p3);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 215573);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 216605);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 217637);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    return;
}



const __create_pipe: ref;

axiom __create_pipe == $sub.ref(0, 218669);

procedure __create_pipe($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __create_pipe($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} {:cexpr "__create_pipe:arg:endpoint"} boogie_si_record_i32($i1);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(0, 1));
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 8);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, 15);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i4, $i5);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_endpoint_xfer_int: ref;

axiom usb_endpoint_xfer_int == $sub.ref(0, 219701);

procedure usb_endpoint_xfer_int($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_xfer_int($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 3);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 3);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const tty_port_init: ref;

axiom tty_port_init == $sub.ref(0, 220733);

procedure tty_port_init($p0: ref);
  free requires assertsPassed;



implementation tty_port_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    return;
}



const usb_alloc_coherent: ref;

axiom usb_alloc_coherent == $sub.ref(0, 221765);

procedure usb_alloc_coherent($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_alloc_coherent($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref)
{
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} {:cexpr "usb_alloc_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 406} {:cexpr "usb_alloc_coherent:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} $p4 := external_alloc();
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const acm_write_buffers_alloc: ref;

axiom acm_write_buffers_alloc == $sub.ref(0, 222797);

procedure acm_write_buffers_alloc($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation acm_write_buffers_alloc($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $p16: ref;
  var $i17: i1;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p18: ref;
  var $i19: i32;
  var $p33: ref;
  var $i32: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i64;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $i60: i64;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i64;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $i74: i64;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i64;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i64;
  var $i87: i1;
  var $i88: i64;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $i94: i64;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $i100: i64;
  var $i101: i1;
  var $i102: i64;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i32;
  var $i108: i64;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i64;
  var $i115: i1;
  var $i116: i64;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i32;
  var $i122: i64;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $i128: i64;
  var $i129: i1;
  var $i130: i64;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i32;
  var $i136: i64;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $i142: i64;
  var $i143: i1;
  var $i144: i64;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $i149: i32;
  var $i150: i64;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $i156: i64;
  var $i157: i1;
  var $i158: i64;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $i163: i32;
  var $i164: i64;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $i170: i64;
  var $i171: i1;
  var $i172: i64;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $i177: i32;
  var $i178: i64;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $i184: i64;
  var $i185: i1;
  var $i186: i64;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $i191: i32;
  var $i192: i64;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $i198: i64;
  var $i199: i1;
  var $i200: i64;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $i205: i32;
  var $i206: i64;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $i212: i64;
  var $i213: i1;
  var $i214: i64;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $i219: i32;
  var $i220: i64;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $i226: i64;
  var $i227: i1;
  var $i228: i64;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $i233: i32;
  var $i234: i64;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $i240: i64;
  var $i241: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1120, 1));
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(0, 1));
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} $p9 := usb_alloc_coherent($p4, $i7, 208, $p8);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p9);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i15, $p16 := 0, $p1;
    assume {:branchcond $i14} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p2, $mul.ref(1, 40));
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(0, 1));
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $i38 := $zext.i32.i64($i37);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(1, 40)), $mul.ref(8, 1));
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} $p40 := usb_alloc_coherent($p35, $i38, 208, $p39);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(1, 40)), $mul.ref(0, 1));
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p41, $p40);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(1, 40)), $mul.ref(0, 1));
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $i45 := $eq.i64($i44, 0);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $i15, $p16 := 1, $p33;
    assume {:branchcond $i45} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    $i46 := $add.i64(1, 1);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p2, $mul.ref($i46, 40));
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(0, 1));
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $i52 := $zext.i32.i64($i51);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref($i46, 40)), $mul.ref(8, 1));
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} $p54 := usb_alloc_coherent($p49, $i52, 208, $p53);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref($i46, 40)), $mul.ref(0, 1));
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p55, $p54);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref($i46, 40)), $mul.ref(0, 1));
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $i59 := $eq.i64($i58, 0);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $i15, $p16 := 2, $p47;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    $i60 := $add.i64($i46, 1);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p2, $mul.ref($i60, 40));
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(0, 1));
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i66 := $zext.i32.i64($i65);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref($i60, 40)), $mul.ref(8, 1));
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} $p68 := usb_alloc_coherent($p63, $i66, 208, $p67);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p2, $mul.ref($i60, 40)), $mul.ref(0, 1));
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p69, $p68);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref($i60, 40)), $mul.ref(0, 1));
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i73 := $eq.i64($i72, 0);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i15, $p16 := 3, $p61;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    $i74 := $add.i64($i60, 1);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p2, $mul.ref($i74, 40));
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(0, 1));
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $i80 := $zext.i32.i64($i79);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p2, $mul.ref($i74, 40)), $mul.ref(8, 1));
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} $p82 := usb_alloc_coherent($p77, $i80, 208, $p81);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p2, $mul.ref($i74, 40)), $mul.ref(0, 1));
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p83, $p82);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p2, $mul.ref($i74, 40)), $mul.ref(0, 1));
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $i86 := $p2i.ref.i64($p85);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i87 := $eq.i64($i86, 0);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i15, $p16 := 4, $p75;
    assume {:branchcond $i87} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    $i88 := $add.i64($i74, 1);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($p2, $mul.ref($i88, 40));
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(0, 1));
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i94 := $zext.i32.i64($i93);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p2, $mul.ref($i88, 40)), $mul.ref(8, 1));
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} $p96 := usb_alloc_coherent($p91, $i94, 208, $p95);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p2, $mul.ref($i88, 40)), $mul.ref(0, 1));
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p97, $p96);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p2, $mul.ref($i88, 40)), $mul.ref(0, 1));
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $i100 := $p2i.ref.i64($p99);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i101 := $eq.i64($i100, 0);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i15, $p16 := 5, $p89;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    $i102 := $add.i64($i88, 1);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($p2, $mul.ref($i102, 40));
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(0, 1));
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.0, $p106);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $i108 := $zext.i32.i64($i107);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p2, $mul.ref($i102, 40)), $mul.ref(8, 1));
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} $p110 := usb_alloc_coherent($p105, $i108, 208, $p109);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p2, $mul.ref($i102, 40)), $mul.ref(0, 1));
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p111, $p110);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p2, $mul.ref($i102, 40)), $mul.ref(0, 1));
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.0, $p112);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i114 := $p2i.ref.i64($p113);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $i115 := $eq.i64($i114, 0);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $i15, $p16 := 6, $p103;
    assume {:branchcond $i115} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    $i116 := $add.i64($i102, 1);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($p2, $mul.ref($i116, 40));
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(0, 1));
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.0, $p118);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.0, $p120);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i122 := $zext.i32.i64($i121);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p2, $mul.ref($i116, 40)), $mul.ref(8, 1));
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} $p124 := usb_alloc_coherent($p119, $i122, 208, $p123);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p2, $mul.ref($i116, 40)), $mul.ref(0, 1));
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p125, $p124);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p2, $mul.ref($i116, 40)), $mul.ref(0, 1));
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.0, $p126);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i128 := $p2i.ref.i64($p127);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i129 := $eq.i64($i128, 0);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $i15, $p16 := 7, $p117;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    $i130 := $add.i64($i116, 1);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($p2, $mul.ref($i130, 40));
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(0, 1));
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.0, $p132);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.0, $p134);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i136 := $zext.i32.i64($i135);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p2, $mul.ref($i130, 40)), $mul.ref(8, 1));
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} $p138 := usb_alloc_coherent($p133, $i136, 208, $p137);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p2, $mul.ref($i130, 40)), $mul.ref(0, 1));
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p139, $p138);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p2, $mul.ref($i130, 40)), $mul.ref(0, 1));
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.0, $p140);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $i142 := $p2i.ref.i64($p141);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i143 := $eq.i64($i142, 0);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i15, $p16 := 8, $p131;
    assume {:branchcond $i143} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    $i144 := $add.i64($i130, 1);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($p2, $mul.ref($i144, 40));
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(0, 1));
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.0, $p146);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i149 := $load.i32($M.0, $p148);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i150 := $zext.i32.i64($i149);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p2, $mul.ref($i144, 40)), $mul.ref(8, 1));
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} $p152 := usb_alloc_coherent($p147, $i150, 208, $p151);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p2, $mul.ref($i144, 40)), $mul.ref(0, 1));
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p153, $p152);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p2, $mul.ref($i144, 40)), $mul.ref(0, 1));
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.0, $p154);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i156 := $p2i.ref.i64($p155);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $i157 := $eq.i64($i156, 0);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i15, $p16 := 9, $p145;
    assume {:branchcond $i157} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    $i158 := $add.i64($i144, 1);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($p2, $mul.ref($i158, 40));
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(0, 1));
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $p161 := $load.ref($M.0, $p160);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.0, $p162);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $i164 := $zext.i32.i64($i163);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p2, $mul.ref($i158, 40)), $mul.ref(8, 1));
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} $p166 := usb_alloc_coherent($p161, $i164, 208, $p165);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p2, $mul.ref($i158, 40)), $mul.ref(0, 1));
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p167, $p166);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p2, $mul.ref($i158, 40)), $mul.ref(0, 1));
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $p169 := $load.ref($M.0, $p168);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $i170 := $p2i.ref.i64($p169);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $i171 := $eq.i64($i170, 0);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $i15, $p16 := 10, $p159;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    $i172 := $add.i64($i158, 1);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($p2, $mul.ref($i172, 40));
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(0, 1));
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $p175 := $load.ref($M.0, $p174);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $i177 := $load.i32($M.0, $p176);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $i178 := $zext.i32.i64($i177);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p2, $mul.ref($i172, 40)), $mul.ref(8, 1));
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} $p180 := usb_alloc_coherent($p175, $i178, 208, $p179);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p2, $mul.ref($i172, 40)), $mul.ref(0, 1));
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p181, $p180);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p2, $mul.ref($i172, 40)), $mul.ref(0, 1));
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.0, $p182);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $i184 := $p2i.ref.i64($p183);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $i185 := $eq.i64($i184, 0);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i15, $p16 := 11, $p173;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    $i186 := $add.i64($i172, 1);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($p2, $mul.ref($i186, 40));
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(0, 1));
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $p189 := $load.ref($M.0, $p188);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i191 := $load.i32($M.0, $p190);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $i192 := $zext.i32.i64($i191);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p2, $mul.ref($i186, 40)), $mul.ref(8, 1));
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} $p194 := usb_alloc_coherent($p189, $i192, 208, $p193);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p2, $mul.ref($i186, 40)), $mul.ref(0, 1));
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p195, $p194);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p2, $mul.ref($i186, 40)), $mul.ref(0, 1));
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $p197 := $load.ref($M.0, $p196);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $i198 := $p2i.ref.i64($p197);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i199 := $eq.i64($i198, 0);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $i15, $p16 := 12, $p187;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    $i200 := $add.i64($i186, 1);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($p2, $mul.ref($i200, 40));
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(0, 1));
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $p203 := $load.ref($M.0, $p202);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i205 := $load.i32($M.0, $p204);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i206 := $zext.i32.i64($i205);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p2, $mul.ref($i200, 40)), $mul.ref(8, 1));
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} $p208 := usb_alloc_coherent($p203, $i206, 208, $p207);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p2, $mul.ref($i200, 40)), $mul.ref(0, 1));
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p209, $p208);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p2, $mul.ref($i200, 40)), $mul.ref(0, 1));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $p211 := $load.ref($M.0, $p210);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i212 := $p2i.ref.i64($p211);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $i213 := $eq.i64($i212, 0);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $i15, $p16 := 13, $p201;
    assume {:branchcond $i213} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    $i214 := $add.i64($i200, 1);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($p2, $mul.ref($i214, 40));
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(0, 1));
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $p217 := $load.ref($M.0, $p216);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $i219 := $load.i32($M.0, $p218);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $i220 := $zext.i32.i64($i219);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p2, $mul.ref($i214, 40)), $mul.ref(8, 1));
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $p222 := usb_alloc_coherent($p217, $i220, 208, $p221);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p2, $mul.ref($i214, 40)), $mul.ref(0, 1));
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p223, $p222);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p2, $mul.ref($i214, 40)), $mul.ref(0, 1));
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $p225 := $load.ref($M.0, $p224);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $i226 := $p2i.ref.i64($p225);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $i227 := $eq.i64($i226, 0);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $i15, $p16 := 14, $p215;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    $i228 := $add.i64($i214, 1);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($p2, $mul.ref($i228, 40));
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(0, 1));
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $p231 := $load.ref($M.0, $p230);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i233 := $load.i32($M.0, $p232);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i234 := $zext.i32.i64($i233);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p2, $mul.ref($i228, 40)), $mul.ref(8, 1));
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} $p236 := usb_alloc_coherent($p231, $i234, 208, $p235);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p2, $mul.ref($i228, 40)), $mul.ref(0, 1));
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p237, $p236);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p2, $mul.ref($i228, 40)), $mul.ref(0, 1));
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p239 := $load.ref($M.0, $p238);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $i240 := $p2i.ref.i64($p239);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i241 := $eq.i64($i240, 0);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i15, $p16 := 15, $p229;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb74:
    assume {:verifier.code 0} true;
    assume $i241 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i15, 0);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32(0, 12);
    goto $bb14;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $p18, $i19 := $p16, $i15;
    goto $bb9;

  $bb9:
    call $i20, $p21, $p22, $p23, $p24, $i25, $i26, $p27, $p28, $p29, $i30, $i31, $p18, $i19 := acm_write_buffers_alloc_loop_$bb9($p0, $i20, $p21, $p22, $p23, $p24, $i25, $i26, $p27, $p28, $p29, $i30, $i31, $p18, $i19);
    goto $bb9_last;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32($i19, 1);
    call {:si_unique_call 409} {:cexpr "i"} boogie_si_record_i32($i20);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p18, $mul.ref($sub.ref(0, 1), 40));
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(0, 1));
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $i26 := $zext.i32.i64($i25);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p18, $mul.ref($sub.ref(0, 1), 40)), $mul.ref(0, 1));
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p18, $mul.ref($sub.ref(0, 1), 40)), $mul.ref(8, 1));
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.0, $p29);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} usb_free_coherent($p23, $i26, $p28, $i30);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i20, 0);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i31 == 1);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb11:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $p18, $i19 := $p21, $i20;
    goto $bb11_dummy;

  $bb70:
    assume {:verifier.code 0} true;
    assume $i227 == 1;
    goto $bb4;

  $bb66:
    assume {:verifier.code 0} true;
    assume $i213 == 1;
    goto $bb4;

  $bb62:
    assume {:verifier.code 0} true;
    assume $i199 == 1;
    goto $bb4;

  $bb58:
    assume {:verifier.code 0} true;
    assume $i185 == 1;
    goto $bb4;

  $bb54:
    assume {:verifier.code 0} true;
    assume $i171 == 1;
    goto $bb4;

  $bb50:
    assume {:verifier.code 0} true;
    assume $i157 == 1;
    goto $bb4;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i143 == 1;
    goto $bb4;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i129 == 1;
    goto $bb4;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i115 == 1;
    goto $bb4;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i101 == 1;
    goto $bb4;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i87 == 1;
    goto $bb4;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i73 == 1;
    goto $bb4;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i59 == 1;
    goto $bb4;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i45 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb4;

  $bb11_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2311;
}



const ldv_usb_alloc_urb_15: ref;

axiom ldv_usb_alloc_urb_15 == $sub.ref(0, 223829);

procedure ldv_usb_alloc_urb_15($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.10;



implementation ldv_usb_alloc_urb_15($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} {:cexpr "ldv_usb_alloc_urb_15:arg:iso_packets"} boogie_si_record_i32($i0);
    call {:si_unique_call 427} {:cexpr "ldv_usb_alloc_urb_15:arg:mem_flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} $p2 := ldv_alloc_urb();
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_usb_alloc_urb_16: ref;

axiom ldv_usb_alloc_urb_16 == $sub.ref(0, 224861);

procedure ldv_usb_alloc_urb_16($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.10;



implementation ldv_usb_alloc_urb_16($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} {:cexpr "ldv_usb_alloc_urb_16:arg:iso_packets"} boogie_si_record_i32($i0);
    call {:si_unique_call 430} {:cexpr "ldv_usb_alloc_urb_16:arg:mem_flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} $p2 := ldv_alloc_urb();
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const acm_read_bulk_callback: ref;

axiom acm_read_bulk_callback == $sub.ref(0, 225893);

procedure acm_read_bulk_callback($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.11, $M.13, $M.15, $M.17, $M.9, $M.10, assertsPassed;



implementation acm_read_bulk_callback($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i24;
  var $i23: i24;
  var $i24: i24;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i24;
  var $i48: i24;
  var $i49: i24;
  var $p50: ref;
  var $p51: ref;
  var $i52: i8;
  var $i53: i64;
  var $i54: i64;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $p66: ref;
  var $i67: i8;
  var $i68: i8;
  var $i69: i8;
  var $p70: ref;
  var $i71: i8;
  var $i72: i8;
  var $i73: i8;
  var $i74: i8;
  var $i75: i8;
  var $p76: ref;
  var $p77: ref;
  var $i78: i8;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $p88: ref;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 3008)), $mul.ref(1760, 1));
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} set_bit($i10, $p11);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 3008)), $mul.ref(0, 1));
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p7, $mul.ref(0, 3008)), $mul.ref(0, 1));
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} usb_mark_last_busy($p37);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} acm_process_read_urb($p7, $p0);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p7, $mul.ref(0, 3008)), $mul.ref(2544, 1));
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} $p64 := spinlock_check($p63);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $i65 := _raw_spin_lock_irqsave($p64);
    call {:si_unique_call 445} {:cexpr "flags"} boogie_si_record_i64($i65);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p7, $mul.ref(0, 3008)), $mul.ref(2996, 1));
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.0, $p66);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $i68 := $lshr.i8($i67, 3);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $i69 := $and.i8($i68, 1);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p7, $mul.ref(0, 3008)), $mul.ref(2996, 1));
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.0, $p70);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $i72 := $and.i8($i69, 1);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $i73 := $shl.i8($i72, 2);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $i74 := $and.i8($i71, $sub.i8(0, 5));
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $i75 := $or.i8($i74, $i73);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p70, $i75);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p7);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p76, $mul.ref(2988, 1));
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.0, $p77);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i78);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 0);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p7, $mul.ref(0, 3008)), $mul.ref(2544, 1));
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} spin_unlock_irqrestore($p88, $i65);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume $i80 == 1;
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p7, $mul.ref(0, 3008)), $mul.ref(2992, 1));
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 0);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb16;

  $bb17:
    assume $i83 == 1;
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p7, $mul.ref(0, 3008)), $mul.ref(2544, 1));
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} spin_unlock_irqrestore($p84, $i65);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} vslice_dummy_var_68 := acm_submit_read_urb($p7, $i86, 32);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i40 == 1;
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p41, .str.3);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p42, .str.63);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p43, .str.5);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p44, .str.65);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $i47 := $load.i24($M.5, $p46);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i48 := $and.i24($i47, $sub.i24(0, 262144));
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i49 := $or.i24($i48, 449);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p46, $i49);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p50, 0);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.6, $p51);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i64($i52);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i54 := $and.i64($i53, 1);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} $i55 := ldv__builtin_expect($i54, 0);
    call {:si_unique_call 440} {:cexpr "tmp___0"} boogie_si_record_i64($i55);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb10:
    assume $i56 == 1;
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p7, $mul.ref(0, 3008)), $mul.ref(16, 1));
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} vslice_dummy_var_67 := __dynamic_dev_dbg.ref.ref.ref.ref.i32($p2, $p59, .str.65, .str.63, $i61);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p16, .str.3);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p17, .str.63);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p18, .str.5);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p19, .str.64);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $i22 := $load.i24($M.5, $p21);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i23 := $and.i24($i22, $sub.i24(0, 262144));
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i24 := $or.i24($i23, 442);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p21, $i24);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p25, 0);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.6, $p26);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i64($i27);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i29 := $and.i64($i28, 1);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} $i30 := ldv__builtin_expect($i29, 0);
    call {:si_unique_call 436} {:cexpr "tmp"} boogie_si_record_i64($i30);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i31 == 1;
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p7, $mul.ref(0, 3008)), $mul.ref(16, 1));
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} vslice_dummy_var_66 := __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p34, .str.64, .str.63);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_usb_fill_int_urb_17: ref;

axiom ldv_usb_fill_int_urb_17 == $sub.ref(0, 226925);

procedure ldv_usb_fill_int_urb_17($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref, $i7: i32);
  free requires assertsPassed;
  modifies $M.12, $M.11;



implementation ldv_usb_fill_int_urb_17($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref, $i7: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} {:cexpr "ldv_usb_fill_int_urb_17:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 450} {:cexpr "ldv_usb_fill_int_urb_17:arg:buffer_length"} boogie_si_record_i32($i4);
    call {:si_unique_call 451} {:cexpr "ldv_usb_fill_int_urb_17:arg:interval"} boogie_si_record_i32($i7);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} ldv_fill_int_urb($p0, $p5);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_fill_bulk_urb_18: ref;

axiom ldv_usb_fill_bulk_urb_18 == $sub.ref(0, 227957);

procedure ldv_usb_fill_bulk_urb_18($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref);
  free requires assertsPassed;
  modifies $M.14, $M.13;



implementation ldv_usb_fill_bulk_urb_18($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} {:cexpr "ldv_usb_fill_bulk_urb_18:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 454} {:cexpr "ldv_usb_fill_bulk_urb_18:arg:buffer_length"} boogie_si_record_i32($i4);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} ldv_fill_bulk_urb($p0, $p5);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    return;
}



const __set_bit: ref;

axiom __set_bit == $sub.ref(0, 228989);

procedure __set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation __set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} {:cexpr "__set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 457} devirtbounce.1(0, $p1, $i0, $p1);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_alloc_urb_19: ref;

axiom ldv_usb_alloc_urb_19 == $sub.ref(0, 230021);

procedure ldv_usb_alloc_urb_19($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.10;



implementation ldv_usb_alloc_urb_19($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} {:cexpr "ldv_usb_alloc_urb_19:arg:iso_packets"} boogie_si_record_i32($i0);
    call {:si_unique_call 459} {:cexpr "ldv_usb_alloc_urb_19:arg:mem_flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} $p2 := ldv_alloc_urb();
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const acm_write_bulk: ref;

axiom acm_write_bulk == $sub.ref(0, 231053);

procedure acm_write_bulk($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation acm_write_bulk($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var vslice_dummy_var_69: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 3008)), $mul.ref(2624, 1));
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} $p7 := spinlock_check($p6);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} $i8 := _raw_spin_lock_irqsave($p7);
    call {:si_unique_call 463} {:cexpr "flags"} boogie_si_record_i64($i8);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} acm_write_done($p5, $p3);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 3008)), $mul.ref(2624, 1));
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} spin_unlock_irqrestore($p9, $i8);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 3008)), $mul.ref(2880, 1));
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} vslice_dummy_var_69 := schedule_work($p10);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    return;
}



const device_create_file: ref;

axiom device_create_file == $sub.ref(0, 232085);

procedure device_create_file($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_create_file($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 1} true;
    call {:si_unique_call 467} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 468} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 233117);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 470} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const acm_ctrl_irq: ref;

axiom acm_ctrl_irq == $sub.ref(0, 234149);

procedure acm_ctrl_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.11, $M.13, $CurrAddr, $M.15, $M.17, $M.9, $M.10, assertsPassed;



implementation acm_ctrl_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i24;
  var $i29: i24;
  var $i30: i24;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i64;
  var $i35: i64;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i24;
  var $i49: i24;
  var $i50: i24;
  var $p51: ref;
  var $p52: ref;
  var $i53: i8;
  var $i54: i64;
  var $i55: i64;
  var $i56: i64;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i24;
  var $i79: i24;
  var $i80: i24;
  var $p81: ref;
  var $p82: ref;
  var $i83: i8;
  var $i84: i64;
  var $i85: i64;
  var $i86: i64;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i16;
  var $i93: i32;
  var $i95: i16;
  var $i96: i32;
  var $p97: ref;
  var $i98: i8;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $i102: i32;
  var $i103: i32;
  var $i104: i32;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i24;
  var $i114: i24;
  var $i115: i24;
  var $p116: ref;
  var $p117: ref;
  var $i118: i8;
  var $i119: i64;
  var $i120: i64;
  var $i121: i64;
  var $i122: i1;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i24;
  var $i136: i24;
  var $i137: i24;
  var $p138: ref;
  var $p139: ref;
  var $i140: i8;
  var $i141: i64;
  var $i142: i64;
  var $i143: i64;
  var $i144: i1;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $i149: i32;
  var $i150: i32;
  var $i151: i1;
  var $i152: i32;
  var $p153: ref;
  var $i154: i32;
  var $i155: i32;
  var $i156: i1;
  var $i157: i32;
  var $p158: ref;
  var $i159: i32;
  var $i160: i32;
  var $i161: i1;
  var $i162: i32;
  var $p163: ref;
  var $i164: i32;
  var $i165: i32;
  var $i166: i1;
  var $i167: i32;
  var $p168: ref;
  var $i169: i32;
  var $i170: i32;
  var $i171: i1;
  var $i172: i32;
  var $p173: ref;
  var $i174: i32;
  var $i175: i32;
  var $i176: i1;
  var $i177: i32;
  var $p178: ref;
  var $i179: i32;
  var $i180: i32;
  var $i181: i1;
  var $i182: i32;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $i190: i24;
  var $i191: i24;
  var $i192: i24;
  var $p193: ref;
  var $p194: ref;
  var $i195: i8;
  var $i196: i64;
  var $i197: i64;
  var $i198: i64;
  var $i199: i1;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $i204: i8;
  var $i205: i32;
  var $p206: ref;
  var $i207: i16;
  var $i208: i32;
  var $p209: ref;
  var $i210: i16;
  var $i211: i32;
  var $i212: i8;
  var $i213: i32;
  var $i214: i64;
  var $p215: ref;
  var $i216: i8;
  var $i217: i32;
  var $i219: i32;
  var $i220: i1;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    call {:si_unique_call 478} {:cexpr "status"} boogie_si_record_i32($i14);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i14, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i14, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p42, .str.3);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p43, .str.69);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p44, .str.5);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p45, .str.71);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i48 := $load.i24($M.5, $p47);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i49 := $and.i24($i48, $sub.i24(0, 262144));
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i50 := $or.i24($i49, 331);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p47, $i50);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p51, 0);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.6, $p52);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i64($i53);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i55 := $and.i64($i54, 1);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} $i56 := ldv__builtin_expect($i55, 0);
    call {:si_unique_call 484} {:cexpr "tmp___0"} boogie_si_record_i64($i56);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} $i219 := ldv_usb_submit_urb_6($p0, 32);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    call {:si_unique_call 487} {:cexpr "retval"} boogie_si_record_i32($i219);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i220 := $ne.i32($i219, 0);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    return;

  $bb57:
    assume $i220 == 1;
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p9, $mul.ref(0, 3008)), $mul.ref(8, 1));
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.0, $p221);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p222, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} vslice_dummy_var_76 := dev_err.ref.ref.ref.i32($p223, .str.10, .str.69, $i219);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    goto $bb59;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i57 == 1;
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p9, $mul.ref(0, 3008)), $mul.ref(8, 1));
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} vslice_dummy_var_71 := __dynamic_dev_dbg.ref.ref.ref.ref.i32($p2, $p60, .str.71, .str.69, $i14);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p9, $mul.ref(0, 3008)), $mul.ref(0, 1));
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} usb_mark_last_busy($p63);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p12);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p64, $mul.ref(1, 1));
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p12, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.0, $p66);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i68, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i68, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p184, .str.3);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p185, .str.69);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p186, .str.5);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p187, .str.75);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p189 := $bitcast.ref.ref($p188);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i190 := $load.i24($M.5, $p189);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i191 := $and.i24($i190, $sub.i24(0, 262144));
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i192 := $or.i24($i191, 374);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p189, $i192);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p193, 0);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i195 := $load.i8($M.6, $p194);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i196 := $zext.i8.i64($i195);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i197 := $and.i64($i196, 1);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $i198 := ldv__builtin_expect($i197, 0);
    call {:si_unique_call 502} {:cexpr "tmp___5"} boogie_si_record_i64($i198);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i199 := $ne.i64($i198, 0);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb54:
    assume $i199 == 1;
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p9, $mul.ref(0, 3008)), $mul.ref(8, 1));
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $p201 := $load.ref($M.0, $p200);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p201, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p12, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i204 := $load.i8($M.0, $p203);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i205 := $zext.i8.i32($i204);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p12, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i207 := $load.i16($M.0, $p206);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i208 := $zext.i16.i32($i207);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p12, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $i210 := $load.i16($M.0, $p209);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i211 := $zext.i16.i32($i210);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $i212 := $load.i8($M.0, $p65);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $i213 := $zext.i8.i32($i212);
    $i214 := $add.i64(1, 1);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($p64, $mul.ref($i214, 1));
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i216 := $load.i8($M.0, $p215);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $i217 := $zext.i8.i32($i216);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} vslice_dummy_var_75 := __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32.i32.i32($p6, $p202, .str.75, .str.69, $i205, $i208, $i211, $i213, $i217);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb32:
    assume $i70 == 1;
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $i95 := get_unaligned_le16($p65);
    call {:si_unique_call 489} {:cexpr "tmp___2"} boogie_si_record_i16($i95);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i96 := $zext.i16.i32($i95);
    call {:si_unique_call 490} {:cexpr "newctrl"} boogie_si_record_i32($i96);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p9, $mul.ref(0, 3008)), $mul.ref(2984, 1));
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.0, $p97);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i98);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i99, 0);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p9, $mul.ref(0, 3008)), $mul.ref(2960, 1));
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p128, $i96);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p129, .str.3);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p130, .str.69);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p131, .str.5);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p132, .str.74);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $p134 := $bitcast.ref.ref($p133);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i135 := $load.i24($M.5, $p134);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i136 := $and.i24($i135, $sub.i24(0, 262144));
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i137 := $or.i24($i136, 365);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p134, $i137);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p138, 0);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i140 := $load.i8($M.6, $p139);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $i141 := $zext.i8.i64($i140);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i142 := $and.i64($i141, 1);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} $i143 := ldv__builtin_expect($i142, 0);
    call {:si_unique_call 499} {:cexpr "tmp___4"} boogie_si_record_i64($i143);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i144 := $ne.i64($i143, 0);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    assume {:branchcond $i144} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb50:
    assume $i144 == 1;
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p9, $mul.ref(0, 3008)), $mul.ref(8, 1));
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.0, $p145);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p146, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p9, $mul.ref(0, 3008)), $mul.ref(2960, 1));
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i149 := $load.i32($M.0, $p148);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i150 := $and.i32($i149, 1);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i151 := $ne.i32($i150, 0);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i152 := (if $i151 == 1 then 43 else 45);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p9, $mul.ref(0, 3008)), $mul.ref(2960, 1));
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $i154 := $load.i32($M.0, $p153);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $i155 := $and.i32($i154, 2);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $i156 := $ne.i32($i155, 0);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $i157 := (if $i156 == 1 then 43 else 45);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p9, $mul.ref(0, 3008)), $mul.ref(2960, 1));
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i159 := $load.i32($M.0, $p158);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $i160 := $and.i32($i159, 4);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $i161 := $ne.i32($i160, 0);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $i162 := (if $i161 == 1 then 43 else 45);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p9, $mul.ref(0, 3008)), $mul.ref(2960, 1));
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $i164 := $load.i32($M.0, $p163);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i165 := $and.i32($i164, 8);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i166 := $ne.i32($i165, 0);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i167 := (if $i166 == 1 then 43 else 45);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p9, $mul.ref(0, 3008)), $mul.ref(2960, 1));
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $i169 := $load.i32($M.0, $p168);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $i170 := $and.i32($i169, 16);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $i171 := $ne.i32($i170, 0);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $i172 := (if $i171 == 1 then 43 else 45);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p9, $mul.ref(0, 3008)), $mul.ref(2960, 1));
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i174 := $load.i32($M.0, $p173);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i175 := $and.i32($i174, 32);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i176 := $ne.i32($i175, 0);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i177 := (if $i176 == 1 then 43 else 45);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p9, $mul.ref(0, 3008)), $mul.ref(2960, 1));
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.0, $p178);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $i180 := $and.i32($i179, 64);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $i181 := $ne.i32($i180, 0);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $i182 := (if $i181 == 1 then 43 else 45);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} vslice_dummy_var_74 := __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32($p5, $p147, .str.74, .str.69, $i152, $i157, $i162, $i167, $i172, $i177, $i182);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb41:
    assume $i100 == 1;
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p9, $mul.ref(0, 3008)), $mul.ref(2960, 1));
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.0, $p101);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i103 := $xor.i32($i96, $sub.i32(0, 1));
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $i104 := $and.i32($i102, $i103);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i105 := $and.i32($i104, 1);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 0);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i106 == 1);
    goto $bb43;

  $bb44:
    assume $i106 == 1;
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p107, .str.3);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p108, .str.69);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p109, .str.5);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p110, .str.73);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p111);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i113 := $load.i24($M.5, $p112);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i114 := $and.i24($i113, $sub.i24(0, 262144));
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i115 := $or.i24($i114, 349);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p112, $i115);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p116, 0);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i118 := $load.i8($M.6, $p117);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i119 := $zext.i8.i64($i118);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $i120 := $and.i64($i119, 1);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} $i121 := ldv__builtin_expect($i120, 0);
    call {:si_unique_call 495} {:cexpr "tmp___3"} boogie_si_record_i64($i121);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i122 := $ne.i64($i121, 0);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    assume {:branchcond $i122} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p9, $mul.ref(0, 3008)), $mul.ref(24, 1));
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} tty_port_tty_hangup($p127, 0);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb46:
    assume $i122 == 1;
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p9, $mul.ref(0, 3008)), $mul.ref(8, 1));
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.0, $p123);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p124, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} vslice_dummy_var_73 := __dynamic_dev_dbg.ref.ref.ref.ref($p4, $p125, .str.73, .str.69);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb30:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i68, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb34;

  $bb35:
    assume $i71 == 1;
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p72, .str.3);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p73, .str.69);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p74, .str.5);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p75, .str.72);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $i78 := $load.i24($M.5, $p77);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $i79 := $and.i24($i78, $sub.i24(0, 262144));
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i80 := $or.i24($i79, 341);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p77, $i80);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p81, 0);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.6, $p82);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i64($i83);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $i85 := $and.i64($i84, 1);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} $i86 := ldv__builtin_expect($i85, 0);
    call {:si_unique_call 492} {:cexpr "tmp___1"} boogie_si_record_i64($i86);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i87 := $ne.i64($i86, 0);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i87 == 1;
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p9, $mul.ref(0, 3008)), $mul.ref(8, 1));
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p12, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i92 := $load.i16($M.0, $p91);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $i93 := $zext.i16.i32($i92);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} vslice_dummy_var_72 := __dynamic_dev_dbg.ref.ref.ref.ref.i32($p3, $p90, .str.72, .str.69, $i93);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb4:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i14, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb9, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb8;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p22, .str.3);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p23, .str.69);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p24, .str.5);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p25, .str.70);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i28 := $load.i24($M.5, $p27);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i29 := $and.i24($i28, $sub.i24(0, 262144));
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $i30 := $or.i24($i29, 326);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p27, $i30);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p31, 0);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.6, $p32);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i64($i33);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i35 := $and.i64($i34, 1);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} $i36 := ldv__builtin_expect($i35, 0);
    call {:si_unique_call 480} {:cexpr "tmp"} boogie_si_record_i64($i36);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i37 == 1;
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p9, $mul.ref(0, 3008)), $mul.ref(8, 1));
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} vslice_dummy_var_70 := __dynamic_dev_dbg.ref.ref.ref.ref.i32($p1, $p40, .str.70, .str.69, $i14);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb2:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i14, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i14, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb8;

  $bb14:
    assume $i20 == 1;
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb12:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i14, $sub.i32(0, 108));
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb16, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb8;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb17;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 235181);

procedure _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 1} true;
    call {:si_unique_call 505} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 506} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const acm_ctrl_msg: ref;

axiom acm_ctrl_msg == $sub.ref(0, 236213);

procedure acm_ctrl_msg($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation acm_ctrl_msg($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i8;
  var $i13: i32;
  var $i14: i8;
  var $i15: i16;
  var $i16: i32;
  var $i17: i16;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i16;
  var $i27: i16;
  var $i28: i32;
  var $i29: i16;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i24;
  var $i38: i24;
  var $i39: i24;
  var $p40: ref;
  var $p41: ref;
  var $i42: i8;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i51: i1;
  var $i52: i32;
  var vslice_dummy_var_77: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 508} {:cexpr "acm_ctrl_msg:arg:request"} boogie_si_record_i32($i1);
    call {:si_unique_call 509} {:cexpr "acm_ctrl_msg:arg:value"} boogie_si_record_i32($i2);
    call {:si_unique_call 510} {:cexpr "acm_ctrl_msg:arg:len"} boogie_si_record_i32($i4);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(0, 1));
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} $i8 := __create_pipe($p7, 0);
    call {:si_unique_call 512} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(0, 1));
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i8, $sub.i32(0, 2147483648));
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i1);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i16($i2);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(8, 1));
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 1528)), $mul.ref(0, 1));
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i16($i25);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i16($i4);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i27);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i16($i28);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} $i30 := usb_control_msg($p10, $i11, $i14, 33, $i17, $i26, $p3, $i29, 5000);
    call {:si_unique_call 514} {:cexpr "tmp___0"} boogie_si_record_i32($i30);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p31, .str.3);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p32, .str.14);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p33, .str.5);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p34, .str.15);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $i37 := $load.i24($M.5, $p36);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i38 := $and.i24($i37, $sub.i24(0, 262144));
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i39 := $or.i24($i38, 179);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p36, $i39);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p40, 0);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.6, $p41);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i64($i42);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i44 := $and.i64($i43, 1);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} $i45 := ldv__builtin_expect($i44, 0);
    call {:si_unique_call 516} {:cexpr "tmp___1"} boogie_si_record_i64($i45);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i51 := $slt.i32(0, $i30);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i51 == 1);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i52 := $i30;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $r := $i52;
    return;

  $bb4:
    assume $i51 == 1;
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $i52 := 0;
    goto $bb6;

  $bb1:
    assume $i46 == 1;
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(8, 1));
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} vslice_dummy_var_77 := __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32.i32($p5, $p49, .str.15, .str.14, $i1, $i2, $i4, $i30);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_driver_claim_interface: ref;

axiom usb_driver_claim_interface == $sub.ref(0, 237245);

procedure usb_driver_claim_interface($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_driver_claim_interface($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 1} true;
    call {:si_unique_call 518} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 519} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_get_intf: ref;

axiom usb_get_intf == $sub.ref(0, 238277);

procedure usb_get_intf($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_intf($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $p1 := external_alloc();
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const tty_port_register_device: ref;

axiom tty_port_register_device == $sub.ref(0, 239309);

procedure tty_port_register_device($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation tty_port_register_device($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} {:cexpr "tty_port_register_device:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $p4 := external_alloc();
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 240341);

procedure IS_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547520);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 524} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 241373);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_usb_free_urb_26: ref;

axiom ldv_usb_free_urb_26 == $sub.ref(0, 242405);

procedure ldv_usb_free_urb_26($p0: ref);
  free requires assertsPassed;
  modifies $M.10;



implementation ldv_usb_free_urb_26($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} ldv_free_urb($p0);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_free_urb_27: ref;

axiom ldv_usb_free_urb_27 == $sub.ref(0, 243437);

procedure ldv_usb_free_urb_27($p0: ref);
  free requires assertsPassed;
  modifies $M.10;



implementation ldv_usb_free_urb_27($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} ldv_free_urb($p0);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_free_urb_28: ref;

axiom ldv_usb_free_urb_28 == $sub.ref(0, 244469);

procedure ldv_usb_free_urb_28($p0: ref);
  free requires assertsPassed;
  modifies $M.10;



implementation ldv_usb_free_urb_28($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} ldv_free_urb($p0);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    return;
}



const acm_release_minor: ref;

axiom acm_release_minor == $sub.ref(0, 245501);

procedure acm_release_minor($p0: ref);
  free requires assertsPassed;
  modifies $M.15;



implementation acm_release_minor($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i64;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} mutex_lock_nested(acm_table_lock, 0);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2980, 1));
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i2);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref($i3, 8));
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p4, $0.ref);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} mutex_unlock(acm_table_lock);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    return;
}



const usb_control_msg: ref;

axiom usb_control_msg == $sub.ref(0, 246533);

procedure usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32)
{
  var $i9: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 530} {:cexpr "usb_control_msg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 531} {:cexpr "usb_control_msg:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 532} {:cexpr "usb_control_msg:arg:arg3"} boogie_si_record_i8($i3);
    call {:si_unique_call 533} {:cexpr "usb_control_msg:arg:arg4"} boogie_si_record_i16($i4);
    call {:si_unique_call 534} {:cexpr "usb_control_msg:arg:arg5"} boogie_si_record_i16($i5);
    call {:si_unique_call 535} {:cexpr "usb_control_msg:arg:arg7"} boogie_si_record_i16($i7);
    call {:si_unique_call 536} {:cexpr "usb_control_msg:arg:arg8"} boogie_si_record_i32($i8);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 1} true;
    call {:si_unique_call 537} $i9 := __VERIFIER_nondet_int();
    call {:si_unique_call 538} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i9);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const usb_mark_last_busy: ref;

axiom usb_mark_last_busy == $sub.ref(0, 247565);

procedure usb_mark_last_busy($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_mark_last_busy($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} pm_runtime_mark_last_busy($p1);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    return;
}



const get_unaligned_le16: ref;

axiom get_unaligned_le16 == $sub.ref(0, 248597);

procedure get_unaligned_le16($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation get_unaligned_le16($p0: ref) returns ($r: i16)
{
  var $p1: ref;
  var $i2: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} $i2 := __le16_to_cpup($p1);
    call {:si_unique_call 541} {:cexpr "tmp"} boogie_si_record_i16($i2);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_usb_submit_urb_6: ref;

axiom ldv_usb_submit_urb_6 == $sub.ref(0, 249629);

procedure ldv_usb_submit_urb_6($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.13, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.15, $M.17, $CurrAddr, $M.9, $M.10, assertsPassed;



implementation ldv_usb_submit_urb_6($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} {:cexpr "ldv_usb_submit_urb_6:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} $i2 := ldv_submit_urb($p0);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    call {:si_unique_call 544} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const __le16_to_cpup: ref;

axiom __le16_to_cpup == $sub.ref(0, 250661);

procedure __le16_to_cpup($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation __le16_to_cpup($p0: ref) returns ($r: i16)
{
  var $i1: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $i1 := $load.i16($M.0, $p0);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pm_runtime_mark_last_busy: ref;

axiom pm_runtime_mark_last_busy == $sub.ref(0, 251693);

procedure pm_runtime_mark_last_busy($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pm_runtime_mark_last_busy($p0: ref)
{
  var $i1: i64;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i1 := $load.i64($M.0, jiffies);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1384)), $mul.ref(520, 1)), $mul.ref(552, 1));
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, $i1);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_irqsave: ref;

axiom _raw_spin_lock_irqsave == $sub.ref(0, 252725);

procedure _raw_spin_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_spin_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 1} true;
    call {:si_unique_call 545} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 546} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 253757);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    return;
}



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 254789);

procedure schedule_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation schedule_work($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, system_wq);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} $i2 := queue_work($p1, $p0);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 550} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 255821);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} $i2 := queue_work_on(4096, $p0, $p1);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 552} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 256853);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 553} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 1} true;
    call {:si_unique_call 554} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 555} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 257885);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    return;
}



const ldv_alloc_urb: ref;

axiom ldv_alloc_urb == $sub.ref(0, 258917);

procedure ldv_alloc_urb() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.10;



implementation ldv_alloc_urb() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} $p0 := ldv_undef_ptr();
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} $i2 := ldv_undef_int();
    call {:si_unique_call 559} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p6 := $M.10;
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $M.10 := $p0;
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_fill_bulk_urb: ref;

axiom ldv_fill_bulk_urb == $sub.ref(0, 259949);

procedure ldv_fill_bulk_urb($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.14, $M.13;



implementation ldv_fill_bulk_urb($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $p2 := $M.10;
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $M.14 := $p1;
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i6 := $M.13;
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, 1);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $M.13 := $i7;
    call {:si_unique_call 560} {:cexpr "completeFnBulkCounter"} boogie_si_record_i32($i7);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_fill_int_urb: ref;

axiom ldv_fill_int_urb == $sub.ref(0, 260981);

procedure ldv_fill_int_urb($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.12, $M.11;



implementation ldv_fill_int_urb($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $p2 := $M.10;
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $M.12 := $p1;
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i6 := $M.11;
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, 1);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $M.11 := $i7;
    call {:si_unique_call 561} {:cexpr "completeFnIntCounter"} boogie_si_record_i32($i7);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const acm_process_read_urb: ref;

axiom acm_process_read_urb == $sub.ref(0, 262013);

procedure acm_process_read_urb($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation acm_process_read_urb($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;
  var $p12: ref;
  var vslice_dummy_var_78: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(24, 1));
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i9);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} vslice_dummy_var_78 := tty_insert_flip_string($p5, $p7, $i10);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(24, 1));
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} tty_flip_buffer_push($p12);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tty_insert_flip_string: ref;

axiom tty_insert_flip_string == $sub.ref(0, 263045);

procedure tty_insert_flip_string($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation tty_insert_flip_string($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} {:cexpr "tty_insert_flip_string:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} $i3 := tty_insert_flip_string_fixed_flag($p0, $p1, 0, $i2);
    call {:si_unique_call 566} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const tty_flip_buffer_push: ref;

axiom tty_flip_buffer_push == $sub.ref(0, 264077);

procedure tty_flip_buffer_push($p0: ref);
  free requires assertsPassed;



implementation tty_flip_buffer_push($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    return;
}



const tty_insert_flip_string_fixed_flag: ref;

axiom tty_insert_flip_string_fixed_flag == $sub.ref(0, 265109);

procedure tty_insert_flip_string_fixed_flag($p0: ref, $p1: ref, $i2: i8, $i3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation tty_insert_flip_string_fixed_flag($p0: ref, $p1: ref, $i2: i8, $i3: i64) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 567} {:cexpr "tty_insert_flip_string_fixed_flag:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 568} {:cexpr "tty_insert_flip_string_fixed_flag:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 1} true;
    call {:si_unique_call 569} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 570} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const tty_port_tty_wakeup: ref;

axiom tty_port_tty_wakeup == $sub.ref(0, 266141);

procedure tty_port_tty_wakeup($p0: ref);
  free requires assertsPassed;



implementation tty_port_tty_wakeup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 267173);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 571} $free($p0);
    return;
}



const usb_endpoint_xfer_bulk: ref;

axiom usb_endpoint_xfer_bulk == $sub.ref(0, 268205);

procedure usb_endpoint_xfer_bulk($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_xfer_bulk($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 3);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_endpoint_dir_out: ref;

axiom usb_endpoint_dir_out == $sub.ref(0, 269237);

procedure usb_endpoint_dir_out($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_dir_out($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i3 := $sext.i8.i32($i2);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i4 := $sge.i32($i3, 0);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const acm_tty_install: ref;

axiom acm_tty_install == $sub.ref(0, 270269);

procedure acm_tty_install($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation acm_tty_install($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i24;
  var $i10: i24;
  var $i11: i24;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $i27: i32;
  var vslice_dummy_var_79: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, .str.3);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p4, .str.20);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p5, .str.5);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p6, .str.6);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i9 := $load.i24($M.5, $p8);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $i10 := $and.i24($i9, $sub.i24(0, 262144));
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i11 := $or.i24($i10, 503);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p8, $i11);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p12, 0);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.6, $p13);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i64($i14);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 1);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 574} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 1736)), $mul.ref(32, 1));
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} $p24 := acm_get_by_index($i23);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} $i28 := tty_standard_install($p0, $p1);
    call {:si_unique_call 578} {:cexpr "retval"} boogie_si_record_i32($i28);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 1736)), $mul.ref(1600, 1));
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $p24);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb8:
    assume $i29 == 1;
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p24, $mul.ref(0, 3008)), $mul.ref(24, 1));
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} tty_port_put($p32);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $i27 := $i28;
    goto $bb6;

  $bb4:
    assume $i26 == 1;
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 19);
    goto $bb6;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 1736)), $mul.ref(8, 1));
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} vslice_dummy_var_79 := __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p20, .str.6, .str.20);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const acm_tty_open: ref;

axiom acm_tty_open == $sub.ref(0, 271301);

procedure acm_tty_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation acm_tty_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $i26: i32;
  var vslice_dummy_var_80: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1600, 1));
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, .str.3);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p7, .str.9);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p8, .str.5);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p9, .str.6);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.5, $p11);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 526);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p11, $i14);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p15, 0);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.6, $p16);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 582} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 3008)), $mul.ref(24, 1));
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} $i26 := tty_port_open($p25, $p0, $p1);
    call {:si_unique_call 585} {:cexpr "tmp___0"} boogie_si_record_i32($i26);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(8, 1));
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} vslice_dummy_var_80 := __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p23, .str.6, .str.9);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const acm_tty_close: ref;

axiom acm_tty_close == $sub.ref(0, 272333);

procedure acm_tty_close($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation acm_tty_close($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var vslice_dummy_var_81: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1600, 1));
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, .str.3);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p7, .str.8);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p8, .str.5);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p9, .str.6);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.5, $p11);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 646);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p11, $i14);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p15, 0);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.6, $p16);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 588} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref(0, 3008)), $mul.ref(24, 1));
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} tty_port_close($p26, $p0, $p1);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 3008)), $mul.ref(8, 1));
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} vslice_dummy_var_81 := __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p24, .str.6, .str.8);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const acm_tty_cleanup: ref;

axiom acm_tty_cleanup == $sub.ref(0, 273365);

procedure acm_tty_cleanup($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation acm_tty_cleanup($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var vslice_dummy_var_82: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1600, 1));
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, .str.3);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.4);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.5);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.6);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.5, $p10);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 632);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p10, $i13);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p14, 0);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.6, $p15);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 593} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 3008)), $mul.ref(24, 1));
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} tty_port_put($p25);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 3008)), $mul.ref(8, 1));
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} vslice_dummy_var_82 := __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p23, .str.6, .str.4);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const acm_tty_write: ref;

axiom acm_tty_write == $sub.ref(0, 274397);

procedure acm_tty_write($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.13, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.15, $M.17, $CurrAddr, $M.9, $M.10, assertsPassed;



implementation acm_tty_write($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $i52: i1;
  var $i7: i32;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var vslice_dummy_var_83: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} {:cexpr "acm_tty_write:arg:count"} boogie_si_record_i32($i2);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1600, 1));
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 0);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 3008)), $mul.ref(2624, 1));
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} $p9 := spinlock_check($p8);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} $i10 := _raw_spin_lock_irqsave($p9);
    call {:si_unique_call 599} {:cexpr "flags"} boogie_si_record_i64($i10);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} $i11 := acm_wb_alloc($p5);
    call {:si_unique_call 601} {:cexpr "wbn"} boogie_si_record_i32($i11);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 3008)), $mul.ref(1120, 1));
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i11);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p15, $mul.ref($i16, 40));
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 3008)), $mul.ref(0, 1));
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i26 := $ult.i32($i25, $i2);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $i29 := $i2;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    call {:si_unique_call 604} {:cexpr "__len"} boogie_si_record_i64($i30);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p15, $mul.ref($i16, 40)), $mul.ref(0, 1));
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 605} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p32, $p1, $i30, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p15, $mul.ref($i16, 40)), $mul.ref(16, 1));
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i29);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p5, $mul.ref(0, 3008)), $mul.ref(8, 1));
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} vslice_dummy_var_83 := usb_autopm_get_interface_async($p35);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 3008)), $mul.ref(2992, 1));
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p5, $mul.ref(0, 3008)), $mul.ref(0, 1));
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} usb_mark_last_busy($p49);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} $i50 := acm_start_wb($p5, $p17);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    call {:si_unique_call 611} {:cexpr "stat"} boogie_si_record_i32($i50);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p5, $mul.ref(0, 3008)), $mul.ref(2624, 1));
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} spin_unlock_irqrestore($p51, $i10);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i50, 0);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i7 := $i29;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb20:
    assume $i52 == 1;
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i7 := $i50;
    goto $bb3;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i39 == 1;
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p5, $mul.ref(0, 3008)), $mul.ref(3000, 1));
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i43 == 1);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p5, $mul.ref(0, 3008)), $mul.ref(8, 1));
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} usb_autopm_put_interface_async($p46);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p5, $mul.ref(0, 3008)), $mul.ref(2624, 1));
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} spin_unlock_irqrestore($p47, $i10);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $i7 := $i29;
    goto $bb3;

  $bb16:
    assume $i43 == 1;
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 3008)), $mul.ref(3000, 1));
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p44, $p17);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $i29 := $i28;
    goto $bb13;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p15, $mul.ref($i16, 40)), $mul.ref(20, 1));
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, 0);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 3008)), $mul.ref(2624, 1));
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} spin_unlock_irqrestore($p23, $i10);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb3;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 3008)), $mul.ref(2624, 1));
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} spin_unlock_irqrestore($p13, $i10);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const acm_tty_write_room: ref;

axiom acm_tty_write_room == $sub.ref(0, 275429);

procedure acm_tty_write_room($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation acm_tty_write_room($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1600, 1));
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} $i4 := acm_wb_is_avail($p3);
    call {:si_unique_call 614} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const acm_tty_chars_in_buffer: ref;

axiom acm_tty_chars_in_buffer == $sub.ref(0, 276461);

procedure acm_tty_chars_in_buffer($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation acm_tty_chars_in_buffer($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i1;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1600, 1));
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(2864, 1));
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $i8 := acm_wb_is_avail($p3);
    call {:si_unique_call 616} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(16, $i8);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $i12 := $mul.i32($i9, $i11);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $i7 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const acm_tty_ioctl: ref;

axiom acm_tty_ioctl == $sub.ref(0, 277493);

procedure acm_tty_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.16, $CurrAddr;



implementation acm_tty_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $p12: ref;
  var $i13: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} {:cexpr "acm_tty_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 618} {:cexpr "acm_tty_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1600, 1));
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i1, 21535);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 21535);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 515);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i2);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} $i13 := set_serial_info($p5, $p12);
    call {:si_unique_call 620} {:cexpr "rv"} boogie_si_record_i32($i13);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $i11 := $i13;
    goto $bb9;

  $bb2:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i1, 21534);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i2);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} $i10 := get_serial_info($p5, $p9);
    call {:si_unique_call 622} {:cexpr "rv"} boogie_si_record_i32($i10);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb9;
}



const acm_tty_set_termios: ref;

axiom acm_tty_set_termios == $sub.ref(0, 278525);

procedure acm_tty_set_termios($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation acm_tty_set_termios($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i8;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i8;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i8;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $i65: i32;
  var $i67: i32;
  var $i66: i32;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i1;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i24;
  var $i92: i24;
  var $i93: i24;
  var $p94: ref;
  var $p95: ref;
  var $i96: i8;
  var $i97: i64;
  var $i98: i64;
  var $i99: i64;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $p106: ref;
  var $i107: i8;
  var $i108: i32;
  var $p109: ref;
  var $i110: i8;
  var $i111: i32;
  var $p112: ref;
  var $i113: i8;
  var $i114: i32;
  var $p116: ref;
  var $p117: ref;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1600, 1));
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref(0, 3008)), $mul.ref(2964, 1));
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    call {:si_unique_call 625} {:cexpr "newctrl"} boogie_si_record_i32($i9);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} $i10 := tty_get_baud_rate($p0);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1104, 1)), $mul.ref(8, 1));
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 64);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $i16 := (if $i15 == 1 then 2 else 0);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $i17);
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1104, 1)), $mul.ref(8, 1));
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 256);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(5, 1));
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, $i35);
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1104, 1)), $mul.ref(8, 1));
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 48);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i39, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i39, 48);
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i39, 48);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p50, 8);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1104, 1)), $mul.ref(8, 1));
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i52, 2048);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $i55 := $zext.i1.i32($i54);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i8($i55);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p6, $mul.ref(0, 3008)), $mul.ref(2984, 1));
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p57, $i56);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 0);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i60 == 1);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i67 := $or.i32($i9, 1);
    call {:si_unique_call 628} {:cexpr "newctrl"} boogie_si_record_i32($i67);
    assume {:verifier.code 0} true;
    $i66 := $i67;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p6, $mul.ref(0, 3008)), $mul.ref(2964, 1));
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i66, $i69);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p6, $mul.ref(0, 3008)), $mul.ref(2868, 1));
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p2);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} $i76 := memcmp($p74, $p75, 7);
    call {:si_unique_call 631} {:cexpr "tmp___1"} boogie_si_record_i32($i76);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 0);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    return;

  $bb28:
    assume $i77 == 1;
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i78 := $ugt.i64(7, 63);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i78 == 1);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p6, $mul.ref(0, 3008)), $mul.ref(2868, 1));
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p2);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.0;
    cmdloc_dummy_var_13 := $M.0;
    call {:si_unique_call 633} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p83, $p84, 7, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_14;
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p85, .str.3);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p86, .str.16);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p87, .str.5);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p88, .str.17);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $i91 := $load.i24($M.5, $p90);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $i92 := $and.i24($i91, $sub.i24(0, 262144));
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $i93 := $or.i24($i92, 911);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p90, $i93);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p94, 0);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i96 := $load.i8($M.6, $p95);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i64($i96);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $i98 := $and.i64($i97, 1);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} $i99 := ldv__builtin_expect($i98, 0);
    call {:si_unique_call 635} {:cexpr "tmp___0"} boogie_si_record_i64($i99);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i100 := $ne.i64($i99, 0);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p6, $mul.ref(0, 3008)), $mul.ref(2868, 1));
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p116);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} vslice_dummy_var_86 := acm_ctrl_msg($p6, 32, 0, $p117, 7);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb33:
    assume $i100 == 1;
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p6, $mul.ref(0, 3008)), $mul.ref(8, 1));
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p102, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i107 := $load.i8($M.0, $p106);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i108 := $zext.i8.i32($i107);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(5, 1));
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i110 := $load.i8($M.0, $p109);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $i111 := $zext.i8.i32($i110);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i113 := $load.i8($M.0, $p112);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i114 := $zext.i8.i32($i113);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} vslice_dummy_var_85 := __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32.i32($p3, $p103, .str.17, .str.16, $i105, $i108, $i111, $i114);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume $i78 == 1;
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p6, $mul.ref(0, 3008)), $mul.ref(2868, 1));
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p2);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 632} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p80, $p81, 7, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb25:
    assume $i70 == 1;
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p6, $mul.ref(0, 3008)), $mul.ref(2964, 1));
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p71, $i66);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} vslice_dummy_var_84 := acm_ctrl_msg($p6, 34, $i66, $0.ref, 0);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i60 == 1;
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 3008)), $mul.ref(2868, 1)), $mul.ref(0, 1));
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, $i63);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i9, $sub.i32(0, 2));
    call {:si_unique_call 627} {:cexpr "newctrl"} boogie_si_record_i32($i65);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $i66 := $i65;
    goto $bb24;

  $bb9:
    assume $i42 == 1;
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb7:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i39, 32);
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb11;

  $bb12:
    assume $i43 == 1;
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p49, 7);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb5:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i39, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i39, 16);
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb11;

  $bb16:
    assume $i45 == 1;
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p48, 6);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb14:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i39, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb11;

  $bb18:
    assume $i46 == 1;
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p47, 5);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb1:
    assume $i22 == 1;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1104, 1)), $mul.ref(8, 1));
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 512);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $i27 := (if $i26 == 1 then 1 else 2);
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1104, 1)), $mul.ref(8, 1));
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 1073741824);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $i32 := (if $i31 == 1 then 2 else 0);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i27, $i32);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb3;
}



const acm_tty_throttle: ref;

axiom acm_tty_throttle == $sub.ref(0, 279557);

procedure acm_tty_throttle($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation acm_tty_throttle($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i8;
  var $i8: i8;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1600, 1));
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(2544, 1));
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} spin_lock_irq($p4);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(2996, 1));
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $i7 := $and.i8($i6, $sub.i8(0, 9));
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $i8 := $or.i8($i7, 8);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, $i8);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(2544, 1));
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} spin_unlock_irq($p9);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    return;
}



const acm_tty_unthrottle: ref;

axiom acm_tty_unthrottle == $sub.ref(0, 280589);

procedure acm_tty_unthrottle($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.13, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.15, $M.17, $CurrAddr, $M.9, $M.10, assertsPassed;



implementation acm_tty_unthrottle($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i8;
  var $i8: i8;
  var $i9: i32;
  var $p10: ref;
  var $i11: i8;
  var $i12: i8;
  var $p13: ref;
  var $i14: i8;
  var $i15: i8;
  var $p16: ref;
  var $i17: i1;
  var vslice_dummy_var_87: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1600, 1));
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(2544, 1));
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} spin_lock_irq($p4);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(2996, 1));
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i7 := $lshr.i8($i6, 2);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i8 := $and.i8($i7, 1);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    call {:si_unique_call 641} {:cexpr "was_throttled"} boogie_si_record_i32($i9);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(2996, 1));
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $i12 := $and.i8($i11, $sub.i8(0, 5));
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, $i12);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(2996, 1));
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $i15 := $and.i8($i14, $sub.i8(0, 9));
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $i15);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(2544, 1));
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} spin_unlock_irq($p16);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i9, 0);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} vslice_dummy_var_87 := acm_submit_read_urbs($p3, 208);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const acm_tty_hangup: ref;

axiom acm_tty_hangup == $sub.ref(0, 281621);

procedure acm_tty_hangup($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation acm_tty_hangup($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var vslice_dummy_var_88: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1600, 1));
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, .str.3);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.7);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.5);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.6);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.5, $p10);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 639);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p10, $i13);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p14, 0);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.6, $p15);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 646} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 3008)), $mul.ref(24, 1));
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} tty_port_hangup($p25);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 3008)), $mul.ref(8, 1));
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} vslice_dummy_var_88 := __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p23, .str.6, .str.7);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const acm_tty_break_ctl: ref;

axiom acm_tty_break_ctl == $sub.ref(0, 282653);

procedure acm_tty_break_ctl($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation acm_tty_break_ctl($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i24;
  var $i17: i24;
  var $i18: i24;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var vslice_dummy_var_89: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 650} {:cexpr "acm_tty_break_ctl:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1600, 1));
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i1, 0);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $i7 := (if $i6 == 1 then 65535 else 0);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} $i8 := acm_ctrl_msg($p5, 35, $i7, $0.ref, 0);
    call {:si_unique_call 652} {:cexpr "retval"} boogie_si_record_i32($i8);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p10, .str.3);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p11, .str.12);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p12, .str.5);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p13, .str.13);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $i16 := $load.i24($M.5, $p15);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $i17 := $and.i24($i16, $sub.i24(0, 262144));
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $i18 := $or.i24($i17, 759);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p15, $i18);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p19, 0);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.6, $p20);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 654} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref(0, 3008)), $mul.ref(8, 1));
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} vslice_dummy_var_89 := __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p28, .str.13, .str.12);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const acm_tty_tiocmget: ref;

axiom acm_tty_tiocmget == $sub.ref(0, 283685);

procedure acm_tty_tiocmget($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation acm_tty_tiocmget($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1600, 1));
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(2964, 1));
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 1);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $i8 := (if $i7 == 1 then 2 else 0);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(2964, 1));
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 2);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i13 := (if $i12 == 1 then 4 else 0);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i8, $i13);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(2960, 1));
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 2);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $i19 := (if $i18 == 1 then 256 else 0);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i14, $i19);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(2960, 1));
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 8);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i25 := (if $i24 == 1 then 128 else 0);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i20, $i25);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(2960, 1));
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 1);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $i31 := (if $i30 == 1 then 64 else 0);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $i32 := $or.i32($i26, $i31);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $i33 := $or.i32($i32, 32);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;
}



const acm_tty_tiocmset: ref;

axiom acm_tty_tiocmset == $sub.ref(0, 284717);

procedure acm_tty_tiocmset($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation acm_tty_tiocmset($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p29: ref;
  var $i30: i32;
  var $i28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} {:cexpr "acm_tty_tiocmset:arg:set"} boogie_si_record_i32($i1);
    call {:si_unique_call 657} {:cexpr "acm_tty_tiocmset:arg:clear"} boogie_si_record_i32($i2);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1600, 1));
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 3008)), $mul.ref(2964, 1));
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    call {:si_unique_call 658} {:cexpr "newctrl"} boogie_si_record_i32($i7);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i1, 2);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i1, 4);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $i13 := (if $i12 == 1 then 2 else 0);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i10, $i13);
    call {:si_unique_call 659} {:cexpr "set"} boogie_si_record_i32($i14);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i2, 2);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i2, 4);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $i20 := (if $i19 == 1 then 2 else 0);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i17, $i20);
    call {:si_unique_call 660} {:cexpr "clear"} boogie_si_record_i32($i21);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $i22 := $xor.i32($i21, $sub.i32(0, 1));
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, $i7);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i23, $i14);
    call {:si_unique_call 661} {:cexpr "newctrl"} boogie_si_record_i32($i24);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 3008)), $mul.ref(2964, 1));
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, $i24);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 3008)), $mul.ref(2964, 1));
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i24);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $i30 := acm_ctrl_msg($p5, 34, $i24, $0.ref, 0);
    call {:si_unique_call 663} {:cexpr "tmp___0"} boogie_si_record_i32($i30);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $i28 := $i30;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb1:
    assume $i27 == 1;
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb3;
}



const tty_port_hangup: ref;

axiom tty_port_hangup == $sub.ref(0, 285749);

procedure tty_port_hangup($p0: ref);
  free requires assertsPassed;



implementation tty_port_hangup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    return;
}



const tty_get_baud_rate: ref;

axiom tty_get_baud_rate == $sub.ref(0, 286781);

procedure tty_get_baud_rate($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_get_baud_rate($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1736)), $mul.ref(1104, 1));
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} $i2 := tty_termios_baud_rate($p1);
    call {:si_unique_call 665} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const memcmp: ref;

axiom memcmp == $sub.ref(0, 287813);

procedure memcmp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const tty_termios_baud_rate: ref;

axiom tty_termios_baud_rate == $sub.ref(0, 288845);

procedure tty_termios_baud_rate($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_termios_baud_rate($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 1} true;
    call {:si_unique_call 666} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 667} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const get_serial_info: ref;

axiom get_serial_info == $sub.ref(0, 289877);

procedure get_serial_info($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $CurrAddr;



implementation get_serial_info($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i16;
  var $p20: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i16;
  var $i30: i32;
  var $i31: i32;
  var $i32: i16;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $i5: i32;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} $p2 := $alloc($mul.ref(72, $zext.i32.i64(1)));
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.16;
    call {:si_unique_call 669} cmdloc_dummy_var_16 := $memset.i8(cmdloc_dummy_var_15, $p6, 0, 72, $zext.i32.i64(8), 0 == 1);
    $M.16 := cmdloc_dummy_var_16;
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, $p7, 8192);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(20, 1));
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, $p10, $i9);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2868, 1)), $mul.ref(0, 1));
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(28, 1));
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, $p14, $i13);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(24, 1)), $mul.ref(1040, 1));
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $i18 := $udiv.i32($i17, 10);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $M.16 := $store.i16($M.16, $p20, $i19);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(24, 1)), $mul.ref(1044, 1));
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 65535);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i31 := 65535;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i16($i31);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $M.16 := $store.i16($M.16, $p33, $i32);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p1);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p2);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $i36 := copy_to_user($p34, $p35, 72);
    call {:si_unique_call 671} {:cexpr "tmp___0"} boogie_si_record_i32($i36);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i37 == 1);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb8:
    assume $i37 == 1;
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 14);
    goto $bb3;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(24, 1)), $mul.ref(1044, 1));
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $i28 := $udiv.i32($i27, 10);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i16($i28);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;
}



const set_serial_info: ref;

axiom set_serial_info == $sub.ref(0, 290909);

procedure set_serial_info($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation set_serial_info($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $p22: ref;
  var $i23: i1;
  var $i24: i8;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $p39: ref;
  var $p41: ref;
  var $i37: i32;
  var $p43: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $p2 := $alloc($mul.ref(72, $zext.i32.i64(1)));
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} $i5 := copy_from_user($p3, $p4, 72);
    call {:si_unique_call 674} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i11 := $mul.i32($i10, 10);
    call {:si_unique_call 675} {:cexpr "close_delay"} boogie_si_record_i32($i11);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 65535);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $i20 := 65535;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(24, 1)), $mul.ref(696, 1));
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} mutex_lock_nested($p22, 0);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} $i23 := capable(21);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i8($i23);
    call {:si_unique_call 678} {:cexpr "tmp___0"} boogie_si_record_i8($i24);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1($i24);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i27 == 1);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(24, 1)), $mul.ref(1040, 1));
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i11);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(24, 1)), $mul.ref(1044, 1));
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, $i20);
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(24, 1)), $mul.ref(696, 1));
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} mutex_unlock($p43);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $i7 := $i37;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb11:
    assume $i27 == 1;
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(24, 1)), $mul.ref(1040, 1));
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, $i11);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i31 == 1);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(24, 1)), $mul.ref(1044, 1));
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, $i20);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 95);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 1);
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb14;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb10;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $i19 := $mul.i32($i18, 10);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 14);
    goto $bb3;
}



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 291941);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $i22: i64;
  var $i13: i64;
  var vslice_dummy_var_90: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} $i3 := __builtinx_object_size.ref.i32($p0, 0);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 682} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 683} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} might_fault();
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, $sub.i32(0, 1));
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} $i9 := ldv__builtin_expect($i8, 1);
    call {:si_unique_call 686} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i5);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $i15 := $uge.i64($i14, $i2);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} $i18 := ldv__builtin_expect($i17, 1);
    call {:si_unique_call 690} {:cexpr "tmp___2"} boogie_si_record_i64($i18);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32(1, 0);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 694} {:cexpr "tmp___0"} boogie_si_record_i64($i26);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32(1, 0);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} vslice_dummy_var_90 := ldv__builtin_expect($i30, 0);
    assume {:verifier.code 0} true;
    $i22 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i13 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} warn_slowpath_fmt.ref.i32.ref(.str.18, 66, .str.19);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i2);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} $i21 := _copy_from_user($p0, $p1, $i20);
    call {:si_unique_call 692} {:cexpr "n"} boogie_si_record_i64($i21);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i2);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} $i12 := _copy_from_user($p0, $p1, $i11);
    call {:si_unique_call 688} {:cexpr "n"} boogie_si_record_i64($i12);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const capable: ref;

axiom capable == $sub.ref(0, 292973);

procedure capable($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation capable($i0: i32) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 697} {:cexpr "capable:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 1} true;
    call {:si_unique_call 698} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 699} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __builtinx_object_size: ref;

axiom __builtinx_object_size == $sub.ref(0, 294005);

procedure __builtinx_object_size() returns ($r: i32);



procedure __builtinx_object_size.ref.i32(p.0: ref, p.1: i32) returns ($r: i32);



const might_fault: ref;

axiom might_fault == $sub.ref(0, 295037);

procedure might_fault();
  free requires assertsPassed;



implementation might_fault()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    return;
}



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 296069);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 700} {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 1} true;
    call {:si_unique_call 701} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 702} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const warn_slowpath_fmt: ref;

axiom warn_slowpath_fmt == $sub.ref(0, 297101);

procedure warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} {:cexpr "warn_slowpath_fmt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 298133);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 299165);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} {:cexpr "copy_to_user:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} might_fault();
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} $i3 := _copy_to_user($p0, $p1, $i2);
    call {:si_unique_call 707} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 300197);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 708} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 1} true;
    call {:si_unique_call 709} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 710} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const acm_wb_is_avail: ref;

axiom acm_wb_is_avail == $sub.ref(0, 301229);

procedure acm_wb_is_avail($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation acm_wb_is_avail($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $p83: ref;
  var $i84: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2624, 1));
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $p2 := spinlock_check($p1);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} $i3 := _raw_spin_lock_irqsave($p2);
    call {:si_unique_call 713} {:cexpr "flags"} boogie_si_record_i64($i3);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1120, 1)), $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(16, $i7);
    call {:si_unique_call 714} {:cexpr "n"} boogie_si_record_i32($i8);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1120, 1)), $mul.ref(1, 40)), $mul.ref(20, 1));
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32($i8, $i14);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1120, 1)), $mul.ref(2, 40)), $mul.ref(20, 1));
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32($i15, $i19);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1120, 1)), $mul.ref(3, 40)), $mul.ref(20, 1));
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32($i20, $i24);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1120, 1)), $mul.ref(4, 40)), $mul.ref(20, 1));
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32($i25, $i29);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1120, 1)), $mul.ref(5, 40)), $mul.ref(20, 1));
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32($i30, $i34);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1120, 1)), $mul.ref(6, 40)), $mul.ref(20, 1));
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32($i35, $i39);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1120, 1)), $mul.ref(7, 40)), $mul.ref(20, 1));
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $i45 := $sub.i32($i40, $i44);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1120, 1)), $mul.ref(8, 40)), $mul.ref(20, 1));
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i50 := $sub.i32($i45, $i49);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1120, 1)), $mul.ref(9, 40)), $mul.ref(20, 1));
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $i55 := $sub.i32($i50, $i54);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1120, 1)), $mul.ref(10, 40)), $mul.ref(20, 1));
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32($i55, $i59);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1120, 1)), $mul.ref(11, 40)), $mul.ref(20, 1));
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32($i60, $i64);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1120, 1)), $mul.ref(12, 40)), $mul.ref(20, 1));
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $i70 := $sub.i32($i65, $i69);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1120, 1)), $mul.ref(13, 40)), $mul.ref(20, 1));
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i75 := $sub.i32($i70, $i74);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1120, 1)), $mul.ref(14, 40)), $mul.ref(20, 1));
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $i80 := $sub.i32($i75, $i79);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1120, 1)), $mul.ref(15, 40)), $mul.ref(20, 1));
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32($i80, $i84);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(2624, 1));
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} spin_unlock_irqrestore($p9, $i3);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const acm_wb_alloc: ref;

axiom acm_wb_alloc == $sub.ref(0, 302261);

procedure acm_wb_alloc($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation acm_wb_alloc($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i10: i32;
  var $p11: ref;
  var $i6: i32;
  var $p7: ref;
  var $p12: ref;
  var $i8: i32;
  var $i9: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3008)), $mul.ref(1120, 1));
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $i6, $p7 := 0, $p1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i8, $i9 := 0, 0;
    goto $bb4;

  $bb4:
    call $i10, $p11, $i8, $i9, $i14, $i15, $i16, $i17, $i18, $p19, $p20, $i21, $i22 := acm_wb_alloc_loop_$bb4($p2, $i10, $p11, $i8, $i9, $i14, $i15, $i16, $i17, $i18, $p19, $p20, $i21, $i22);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i8, 1);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $i15 := $srem.i32($i14, 16);
    call {:si_unique_call 716} {:cexpr "wbn"} boogie_si_record_i32($i15);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i9, 1);
    call {:si_unique_call 717} {:cexpr "i"} boogie_si_record_i32($i16);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i17 := $sgt.i32($i16, 15);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i15);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p2, $mul.ref($i18, 40));
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref($i18, 40)), $mul.ref(20, 1));
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $i10, $p11 := $i15, $p19;
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i8, $i9 := $i15, $i16;
    goto $bb11_dummy;

  $bb5:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i6, $p7 := $i10, $p11;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 1);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $i13 := $i6;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 1);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const usb_autopm_get_interface_async: ref;

axiom usb_autopm_get_interface_async == $sub.ref(0, 303293);

procedure usb_autopm_get_interface_async($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_autopm_get_interface_async($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 1} true;
    call {:si_unique_call 718} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 719} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const tty_port_close: ref;

axiom tty_port_close == $sub.ref(0, 304325);

procedure tty_port_close($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation tty_port_close($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    return;
}



const tty_port_open: ref;

axiom tty_port_open == $sub.ref(0, 305357);

procedure tty_port_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_port_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 1} true;
    call {:si_unique_call 720} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 721} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const acm_get_by_index: ref;

axiom acm_get_by_index == $sub.ref(0, 306389);

procedure acm_get_by_index($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation acm_get_by_index($i0: i32) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i1;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p11: ref;
  var $p15: ref;
  var vslice_dummy_var_91: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} {:cexpr "acm_get_by_index:arg:index"} boogie_si_record_i32($i0);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} mutex_lock_nested(acm_table_lock, 0);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i1 := $zext.i32.i64($i0);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref($i1, 8));
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.15, $p2);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $p15 := $p3;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} mutex_unlock(acm_table_lock);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $r := $p15;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(2696, 1));
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} mutex_lock_nested($p6, 0);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(2864, 1));
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(24, 1));
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} vslice_dummy_var_91 := tty_port_get($p12);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(2696, 1));
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} mutex_unlock($p14);
    assume {:verifier.code 0} true;
    $p11 := $p3;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $p15 := $p11;
    goto $bb6;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 3008)), $mul.ref(2696, 1));
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} mutex_unlock($p10);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    goto $bb5;
}



const tty_standard_install: ref;

axiom tty_standard_install == $sub.ref(0, 307421);

procedure tty_standard_install($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_standard_install($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 1} true;
    call {:si_unique_call 729} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 730} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const tty_port_get: ref;

axiom tty_port_get == $sub.ref(0, 308453);

procedure tty_port_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation tty_port_get($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1056)), $mul.ref(1052, 1));
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} kref_get($p3);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const kref_get: ref;

axiom kref_get == $sub.ref(0, 309485);

procedure kref_get($p0: ref);
  free requires assertsPassed;



implementation kref_get($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var vslice_dummy_var_92: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} $i2 := atomic_add_return(1, $p1);
    call {:si_unique_call 733} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i3 := $sle.i32($i2, 1);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    call {:si_unique_call 734} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i4);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 736} {:cexpr "tmp___2"} boogie_si_record_i64($i8);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i4, 0);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} vslice_dummy_var_92 := ldv__builtin_expect($i25, 0);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1(1);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i11 := $xor.i1($i10, 1);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 737} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i12);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 739} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i12, 0);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 742} {:cexpr "tmp___1"} boogie_si_record_i64($i21);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} warn_slowpath_null(.str.23, 47);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const atomic_add_return: ref;

axiom atomic_add_return == $sub.ref(0, 310517);

procedure atomic_add_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_add_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} {:cexpr "atomic_add_return:arg:i"} boogie_si_record_i32($i0);
    call {:si_unique_call 745} {:cexpr "atomic_add_return:arg:__ret"} boogie_si_record_i32($i0);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 746} $i3 := devirtbounce.3(0, $p2, $i0, $p2);
    call {:si_unique_call 747} {:cexpr "__ret"} boogie_si_record_i32($i3);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $i0);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 311549);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    return;
}



const acm_port_shutdown: ref;

axiom acm_port_shutdown == $sub.ref(0, 312581);

procedure acm_port_shutdown($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.17, $CurrAddr, assertsPassed;



implementation acm_port_shutdown($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i43: i64;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $i42: i32;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i8;
  var $i54: i8;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p60: ref;
  var $p61: ref;
  var $p64: ref;
  var $p65: ref;
  var $p68: ref;
  var $p69: ref;
  var $p72: ref;
  var $p73: ref;
  var $p76: ref;
  var $p77: ref;
  var $p80: ref;
  var $p81: ref;
  var $p84: ref;
  var $p85: ref;
  var $p88: ref;
  var $p89: ref;
  var $p92: ref;
  var $p93: ref;
  var $p96: ref;
  var $p97: ref;
  var $p100: ref;
  var $p101: ref;
  var $p104: ref;
  var $p105: ref;
  var $p108: ref;
  var $p109: ref;
  var $p112: ref;
  var $p113: ref;
  var $p116: ref;
  var $p117: ref;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 24), 3008));
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, .str.3);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p5, .str.29);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p6, .str.5);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p7, .str.6);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.5, $p9);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 612);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p9, $i12);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p13, 0);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.6, $p14);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 751} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(2696, 1));
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} mutex_lock_nested($p24, 0);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(2864, 1));
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1($i26);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i27 == 1);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(8, 1));
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} vslice_dummy_var_94 := ldv_usb_autopm_get_interface_13($p29);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(2964, 1));
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 0);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} vslice_dummy_var_95 := acm_ctrl_msg($p3, 34, 0, $0.ref, 0);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(1080, 1));
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} usb_kill_urb($p34);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(1120, 1)), $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} usb_kill_urb($p38);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(1120, 1)), $mul.ref(1, 40)), $mul.ref(24, 1));
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} usb_kill_urb($p61);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(1120, 1)), $mul.ref(2, 40)), $mul.ref(24, 1));
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} usb_kill_urb($p65);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(1120, 1)), $mul.ref(3, 40)), $mul.ref(24, 1));
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} usb_kill_urb($p69);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(1120, 1)), $mul.ref(4, 40)), $mul.ref(24, 1));
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} usb_kill_urb($p73);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(1120, 1)), $mul.ref(5, 40)), $mul.ref(24, 1));
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} usb_kill_urb($p77);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(1120, 1)), $mul.ref(6, 40)), $mul.ref(24, 1));
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} usb_kill_urb($p81);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(1120, 1)), $mul.ref(7, 40)), $mul.ref(24, 1));
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} usb_kill_urb($p85);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(1120, 1)), $mul.ref(8, 40)), $mul.ref(24, 1));
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} usb_kill_urb($p89);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(1120, 1)), $mul.ref(9, 40)), $mul.ref(24, 1));
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} usb_kill_urb($p93);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(1120, 1)), $mul.ref(10, 40)), $mul.ref(24, 1));
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} usb_kill_urb($p97);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(1120, 1)), $mul.ref(11, 40)), $mul.ref(24, 1));
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} usb_kill_urb($p101);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(1120, 1)), $mul.ref(12, 40)), $mul.ref(24, 1));
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} usb_kill_urb($p105);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(1120, 1)), $mul.ref(13, 40)), $mul.ref(24, 1));
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} usb_kill_urb($p109);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(1120, 1)), $mul.ref(14, 40)), $mul.ref(24, 1));
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.0, $p112);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} usb_kill_urb($p113);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(1120, 1)), $mul.ref(15, 40)), $mul.ref(24, 1));
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} usb_kill_urb($p117);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(2536, 1));
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $i41 := $sgt.i32($i40, 0);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(8, 1));
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 1528)), $mul.ref(40, 1));
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $i54 := $and.i8($i53, $sub.i8(0, 9));
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p52, $i54);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(8, 1));
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} ldv_usb_autopm_put_interface_14($p56);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(2696, 1));
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} mutex_unlock($p57);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i41 == 1;
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb13;

  $bb13:
    call $i43, $p45, $p46, $i47, $i48, $i49, $i42 := acm_port_shutdown_loop_$bb13($p2, $p39, $i43, $p45, $p46, $i47, $i48, $i49, $i42);
    goto $bb13_last;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i42);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(1768, 1)), $mul.ref($i43, 8));
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} usb_kill_urb($p46);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i42, 1);
    call {:si_unique_call 760} {:cexpr "i"} boogie_si_record_i32($i47);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p39);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $i49 := $sgt.i32($i48, $i47);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i49 == 1);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb15:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i42 := $i47;
    goto $bb15_dummy;

  $bb4:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(8, 1));
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} vslice_dummy_var_93 := __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p22, .str.6, .str.29);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb15_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4319;
}



const acm_port_activate: ref;

axiom acm_port_activate == $sub.ref(0, 313613);

procedure acm_port_activate($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.11, $M.13, $CurrAddr, $M.17, $M.15, $M.9, $M.10, assertsPassed;



implementation acm_port_activate($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i8;
  var $i40: i8;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i8;
  var $i68: i8;
  var $p69: ref;
  var $i70: i8;
  var $i71: i8;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i29: i32;
  var $p85: ref;
  var $i76: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 24), 3008));
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, .str.3);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.27);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.5);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.6);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.5, $p10);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 536);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p10, $i13);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p14, 0);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.6, $p15);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 779} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(2696, 1));
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} mutex_lock_nested($p25, 0);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(2864, 1));
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1($i27);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(8, 1));
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} $i32 := ldv_usb_autopm_get_interface_8($p31);
    call {:si_unique_call 784} {:cexpr "retval"} boogie_si_record_i32($i32);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 1736)), $mul.ref(1280, 1));
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} set_bit(17, $p34);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(8, 1));
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 1528)), $mul.ref(40, 1));
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i39 := $and.i8($i38, $sub.i8(0, 9));
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $i40 := $or.i8($i39, 8);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, $i40);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(0, 1));
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(1080, 1));
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, $p42);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(1080, 1));
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} $i48 := ldv_usb_submit_urb_9($p47, 208);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    call {:si_unique_call 787} {:cexpr "tmp___0"} boogie_si_record_i32($i48);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(2964, 1));
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 3);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(2964, 1));
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} $i57 := acm_ctrl_msg($p4, 34, $i56, $0.ref, 0);
    call {:si_unique_call 791} {:cexpr "tmp___1"} boogie_si_record_i32($i57);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i57, 0);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(8, 1));
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} ldv_usb_autopm_put_interface_10($p64);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(2544, 1));
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} spin_lock_irq($p65);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(2996, 1));
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.0, $p66);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $i68 := $and.i8($i67, $sub.i8(0, 5));
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p66, $i68);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(2996, 1));
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.0, $p69);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $i71 := $and.i8($i70, $sub.i8(0, 9));
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p69, $i71);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(2544, 1));
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} spin_unlock_irq($p72);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} $i73 := acm_submit_read_urbs($p4, 208);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    call {:si_unique_call 797} {:cexpr "tmp___2"} boogie_si_record_i32($i73);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(2696, 1));
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} mutex_unlock($p75);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $i76 := 0;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $r := $i76;
    return;

  $bb23:
    assume $i74 == 1;
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(2964, 1));
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p77, 0);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(2964, 1));
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} vslice_dummy_var_98 := acm_ctrl_msg($p4, 34, $i79, $0.ref, 0);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(1080, 1));
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} usb_kill_urb($p82);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(8, 1));
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} ldv_usb_autopm_put_interface_11($p84);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i29 := $i32;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(2696, 1));
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} mutex_unlock($p85);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i76 := $i29;
    goto $bb27;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i58 == 1;
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(2988, 1));
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 2);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb18;

  $bb19:
    assume $i62 == 1;
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb12:
    assume $i49 == 1;
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(8, 1));
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} vslice_dummy_var_97 := dev_err.ref.ref.ref($p52, .str.28, .str.27);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i33 == 1;
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i28 == 1;
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 19);
    goto $bb6;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(8, 1));
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} vslice_dummy_var_96 := __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p23, .str.6, .str.27);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const acm_port_destruct: ref;

axiom acm_port_destruct == $sub.ref(0, 314645);

procedure acm_port_destruct($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.15, $CurrAddr, $M.9;



implementation acm_port_destruct($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var vslice_dummy_var_99: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 24), 3008));
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, .str.3);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p5, .str.30);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p6, .str.5);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p7, .str.6);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.5, $p9);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 599);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p9, $i12);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p13, 0);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.6, $p14);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 802} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} acm_release_minor($p3);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(8, 1));
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} ldv_usb_put_intf_12($p25);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(1104, 1));
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} kfree($p27);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p3);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} kfree($p28);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(8, 1));
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} vslice_dummy_var_99 := __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p22, .str.6, .str.30);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_usb_put_intf_12: ref;

axiom ldv_usb_put_intf_12 == $sub.ref(0, 315677);

procedure ldv_usb_put_intf_12($p0: ref);
  free requires assertsPassed;
  modifies $M.9;



implementation ldv_usb_put_intf_12($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} ldv_usb_put_intf();
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_put_intf: ref;

axiom ldv_usb_put_intf == $sub.ref(0, 316709);

procedure ldv_usb_put_intf();
  free requires assertsPassed;
  modifies $M.9;



implementation ldv_usb_put_intf()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $M.9 := $0.ref;
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_autopm_get_interface_8: ref;

axiom ldv_usb_autopm_get_interface_8 == $sub.ref(0, 317741);

procedure ldv_usb_autopm_get_interface_8($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.17;



implementation ldv_usb_autopm_get_interface_8($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} $i1 := ldv_get_interface($p0);
    call {:si_unique_call 810} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_usb_submit_urb_9: ref;

axiom ldv_usb_submit_urb_9 == $sub.ref(0, 318773);

procedure ldv_usb_submit_urb_9($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.13, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.15, $M.17, $CurrAddr, $M.9, $M.10, assertsPassed;



implementation ldv_usb_submit_urb_9($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} {:cexpr "ldv_usb_submit_urb_9:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} $i2 := ldv_submit_urb($p0);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    call {:si_unique_call 813} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const ldv_usb_autopm_put_interface_10: ref;

axiom ldv_usb_autopm_put_interface_10 == $sub.ref(0, 319805);

procedure ldv_usb_autopm_put_interface_10($p0: ref);
  free requires assertsPassed;
  modifies $M.17, assertsPassed;



implementation ldv_usb_autopm_put_interface_10($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} ldv_put_interface();
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;
}



const ldv_usb_autopm_put_interface_11: ref;

axiom ldv_usb_autopm_put_interface_11 == $sub.ref(0, 320837);

procedure ldv_usb_autopm_put_interface_11($p0: ref);
  free requires assertsPassed;
  modifies $M.17, assertsPassed;



implementation ldv_usb_autopm_put_interface_11($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} ldv_put_interface();
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;
}



const ldv_put_interface: ref;

axiom ldv_put_interface == $sub.ref(0, 321869);

procedure ldv_put_interface();
  free requires assertsPassed;
  modifies $M.17, assertsPassed;



implementation ldv_put_interface()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $i0 := $M.17;
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $i1 := $sgt.i32($i0, 0);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} ldv_error();
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.17;
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32($i2, 1);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $M.17 := $i3;
    call {:si_unique_call 817} {:cexpr "INTERF_STATE"} boogie_si_record_i32($i3);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 322901);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 818} __VERIFIER_error();
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;
}



const ldv_get_interface: ref;

axiom ldv_get_interface == $sub.ref(0, 323933);

procedure ldv_get_interface($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.17;



implementation ldv_get_interface($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} $i1 := ldv_undef_int();
    call {:si_unique_call 820} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i2 := $sle.i32($i1, 0);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} ldv_stop___0();
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $i4 := $M.17;
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 1);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $M.17 := $i5;
    call {:si_unique_call 822} {:cexpr "INTERF_STATE"} boogie_si_record_i32($i5);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_usb_autopm_get_interface_13: ref;

axiom ldv_usb_autopm_get_interface_13 == $sub.ref(0, 324965);

procedure ldv_usb_autopm_get_interface_13($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.17;



implementation ldv_usb_autopm_get_interface_13($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $i1 := ldv_get_interface($p0);
    call {:si_unique_call 824} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_usb_autopm_put_interface_14: ref;

axiom ldv_usb_autopm_put_interface_14 == $sub.ref(0, 325997);

procedure ldv_usb_autopm_put_interface_14($p0: ref);
  free requires assertsPassed;
  modifies $M.17, assertsPassed;



implementation ldv_usb_autopm_put_interface_14($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} ldv_put_interface();
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;
}



const show_caps: ref;

axiom show_caps == $sub.ref(0, 327029);

procedure show_caps($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation show_caps($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 48), 1528));
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} $p5 := ldv_usb_get_intfdata_3($p4);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 3008)), $mul.ref(2988, 1));
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} $i9 := sprintf.ref.ref.i32($p2, .str, $i8);
    call {:si_unique_call 828} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 328061);

procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



const show_country_codes: ref;

axiom show_country_codes == $sub.ref(0, 329093);

procedure show_country_codes($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation show_country_codes($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i64;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 48), 1528));
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $p5 := ldv_usb_get_intfdata_3($p4);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 3008)), $mul.ref(1112, 1));
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i8);
    call {:si_unique_call 830} {:cexpr "__len"} boogie_si_record_i64($i9);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 3008)), $mul.ref(1104, 1));
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_17 := $M.0;
    cmdloc_dummy_var_18 := $M.0;
    call {:si_unique_call 831} cmdloc_dummy_var_19 := $memcpy.i8(cmdloc_dummy_var_17, cmdloc_dummy_var_18, $p2, $p11, $i9, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_19;
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 3008)), $mul.ref(1112, 1));
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i13);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;
}



const show_country_rel_date: ref;

axiom show_country_rel_date == $sub.ref(0, 330125);

procedure show_country_rel_date($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation show_country_rel_date($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 48), 1528));
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} $p5 := ldv_usb_get_intfdata_3($p4);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 3008)), $mul.ref(1116, 1));
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} $i9 := sprintf.ref.ref.i32($p2, .str, $i8);
    call {:si_unique_call 834} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 331157);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 835} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 1} true;
    call {:si_unique_call 836} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 837} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 838} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} $p4 := calloc(1, $i0);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 1} true;
    call {:si_unique_call 840} __VERIFIER_assume($i7);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const ldv_usb_driver_2: ref;

axiom ldv_usb_driver_2 == $sub.ref(0, 332189);

procedure ldv_usb_driver_2();
  free requires assertsPassed;
  modifies $M.18, $M.0, $CurrAddr;



implementation ldv_usb_driver_2()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} $p0 := ldv_zalloc(1520);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $M.18 := $p0;
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    return;
}



const ldv_tty_port_operations_3: ref;

axiom ldv_tty_port_operations_3 == $sub.ref(0, 333221);

procedure ldv_tty_port_operations_3();
  free requires assertsPassed;
  modifies $M.19, $M.0, $CurrAddr;



implementation ldv_tty_port_operations_3()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} $p0 := ldv_zalloc(1056);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $M.19 := $p0;
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_tty_operations_1: ref;

axiom ldv_initialize_tty_operations_1 == $sub.ref(0, 334253);

procedure ldv_initialize_tty_operations_1();
  free requires assertsPassed;
  modifies $M.20, $M.21, $M.0, $CurrAddr;



implementation ldv_initialize_tty_operations_1()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} $p0 := ldv_zalloc(360);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $M.20 := $p0;
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} $p2 := ldv_zalloc(1736);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $M.21 := $p2;
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 335285);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.31, $M.32, $M.19, $M.20, $M.21, $M.33, $M.15, $M.34, $M.35, $M.8, $M.37, $M.38, $M.18, $M.36, $M.17, $M.41, $M.9, $M.10, $M.39, $M.40, $M.11, $M.13, $M.12, $M.14, $M.56, $M.7, $M.91, $M.92, $M.93, $CurrAddr, $M.16, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $p99: ref;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $i104: i32;
  var $i105: i32;
  var $i106: i1;
  var $i107: i32;
  var $i108: i32;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;
  var $i115: i32;
  var $i116: i1;
  var $p117: ref;
  var $i119: i32;
  var $i120: i1;
  var $p121: ref;
  var $i123: i32;
  var $i124: i1;
  var $p125: ref;
  var $i127: i32;
  var $i128: i1;
  var $p129: ref;
  var $i131: i32;
  var $i132: i1;
  var $p133: ref;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $i137: i32;
  var $i138: i1;
  var $p139: ref;
  var $i141: i32;
  var $i142: i1;
  var $p143: ref;
  var $i145: i32;
  var $i146: i1;
  var $p147: ref;
  var $i149: i32;
  var $i150: i1;
  var $p151: ref;
  var $i153: i32;
  var $i154: i1;
  var $p155: ref;
  var $i157: i32;
  var $i158: i1;
  var $p159: ref;
  var $i161: i32;
  var $i162: i1;
  var $p163: ref;
  var $i165: i32;
  var $i166: i1;
  var $p167: ref;
  var $i169: i32;
  var $i170: i1;
  var $p171: ref;
  var $i173: i32;
  var $i174: i1;
  var $p175: ref;
  var $i177: i32;
  var $i178: i1;
  var $i179: i32;
  var $i180: i1;
  var $i181: i1;
  var $i182: i1;
  var $i183: i32;
  var $i184: i1;
  var $i185: i32;
  var $i186: i1;
  var $i187: i32;
  var $i188: i1;
  var $i189: i32;
  var $i190: i32;
  var $i191: i1;
  var $i192: i32;
  var $i193: i1;
  var $i194: i32;
  var $i195: i1;
  var $i196: i32;
  var $i197: i1;
  var $i198: i1;
  var $i199: i1;
  var $i200: i1;
  var $i201: i32;
  var $i202: i1;
  var $p203: ref;
  var $i204: i32;
  var $i205: i32;
  var $i206: i1;
  var $i207: i32;
  var $i208: i32;
  var $i209: i32;
  var $i210: i1;
  var $p211: ref;
  var $i212: i32;
  var $i213: i32;
  var $i214: i32;
  var $i215: i1;
  var $p216: ref;
  var $i217: i32;
  var $i218: i1;
  var $i219: i32;
  var $i220: i1;
  var $i221: i1;
  var $i222: i1;
  var $i223: i1;
  var $i224: i1;
  var $i225: i1;
  var $i226: i32;
  var $i227: i1;
  var $p228: ref;
  var $i229: i32;
  var $i230: i32;
  var $i231: i1;
  var $i232: i32;
  var $i233: i32;
  var $i234: i32;
  var $i235: i1;
  var $p236: ref;
  var $i237: i32;
  var $i238: i32;
  var $i239: i1;
  var $i240: i32;
  var $i241: i1;
  var $i242: i32;
  var $i243: i1;
  var $p244: ref;
  var $i245: i32;
  var $i246: i32;
  var $i247: i32;
  var $i248: i1;
  var $i249: i32;
  var $i250: i1;
  var $p251: ref;
  var $i252: i32;
  var $i253: i32;
  var $i254: i32;
  var $i255: i1;
  var $p256: ref;
  var $p257: ref;
  var $i258: i32;
  var $i259: i32;
  var $i260: i32;
  var $i261: i1;
  var $i262: i32;
  var $i263: i1;
  var $p264: ref;
  var $i265: i32;
  var $i266: i32;
  var $i267: i1;
  var $i268: i32;
  var $i269: i1;
  var $i270: i32;
  var $i271: i1;
  var $i272: i32;
  var $i273: i1;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var vslice_dummy_var_100: i64;
  var vslice_dummy_var_101: i64;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i64;

  $bb0:
    call {:si_unique_call 845} $initialize();
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} $p1 := ldv_zalloc(1);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} $p2 := ldv_zalloc(1376);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} $p4 := ldv_zalloc(48);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} $p6 := ldv_zalloc(1);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} $p7 := ldv_zalloc(1376);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} $p9 := ldv_zalloc(48);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} $p11 := ldv_zalloc(44);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 1} true;
    call {:si_unique_call 855} $i13 := __VERIFIER_nondet_uint();
    call {:si_unique_call 856} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i13);
    call {:si_unique_call 857} {:cexpr "tmp___6"} boogie_si_record_i32($i13);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 1} true;
    call {:si_unique_call 858} $i14 := __VERIFIER_nondet_int();
    call {:si_unique_call 859} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i14);
    call {:si_unique_call 860} {:cexpr "tmp___7"} boogie_si_record_i32($i14);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 1} true;
    call {:si_unique_call 861} $i15 := __VERIFIER_nondet_uint();
    call {:si_unique_call 862} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i15);
    call {:si_unique_call 863} {:cexpr "tmp___8"} boogie_si_record_i32($i15);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} $p16 := ldv_zalloc(184);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} $p18 := ldv_zalloc(1);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 1} true;
    call {:si_unique_call 866} $i19 := __VERIFIER_nondet_int();
    call {:si_unique_call 867} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i19);
    call {:si_unique_call 868} {:cexpr "tmp___11"} boogie_si_record_i32($i19);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 1} true;
    call {:si_unique_call 869} $i20 := __VERIFIER_nondet_uint();
    call {:si_unique_call 870} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i20);
    call {:si_unique_call 871} {:cexpr "tmp___12"} boogie_si_record_i32($i20);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 1} true;
    call {:si_unique_call 872} $i21 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 873} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i21);
    call {:si_unique_call 874} {:cexpr "tmp___13"} boogie_si_record_i64($i21);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} $p22 := ldv_zalloc(1736);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} $p24 := ldv_zalloc(32);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} $p26 := ldv_zalloc(1376);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} $p28 := ldv_zalloc(48);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} $p30 := ldv_zalloc(1);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} ldv_initialize();
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p0);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_20 := $M.22;
    call {:si_unique_call 881} cmdloc_dummy_var_21 := $memset.i8(cmdloc_dummy_var_20, $p31, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.22 := cmdloc_dummy_var_21;
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $M.23 := 0;
    call {:si_unique_call 882} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $M.24 := 0;
    call {:si_unique_call 883} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $M.25 := 0;
    call {:si_unique_call 884} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $M.26 := 0;
    call {:si_unique_call 885} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 886} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $M.28 := 0;
    call {:si_unique_call 887} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $M.29 := 0;
    call {:si_unique_call 888} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $M.30 := 0;
    call {:si_unique_call 889} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i48, $i49, $i50, $i51, $i52, $i53, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $p76, $i78, $i79, $p80, $i81, $i82, $p83, $i84, $i85, $p86, $i87, $i88, $p89, $i90, $i91, $p92, $i93, $i94, $p95, $i96, $i97, $p98, $p99, $i100, $i101, $p102, $p103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $p111, $i112, $i113, $p114, $i115, $i116, $p117, $i119, $i120, $p121, $i123, $i124, $p125, $i127, $i128, $p129, $i131, $i132, $p133, $i134, $i135, $p136, $i137, $i138, $p139, $i141, $i142, $p143, $i145, $i146, $p147, $i149, $i150, $p151, $i153, $i154, $p155, $i157, $i158, $p159, $i161, $i162, $p163, $i165, $i166, $p167, $i169, $i170, $p171, $i173, $i174, $p175, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $p203, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $p211, $i212, $i213, $i214, $i215, $p216, $i217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $i225, $i226, $i227, $p228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $p236, $i237, $i238, $i239, $i240, $i241, $i242, $i243, $p244, $i245, $i246, $i247, $i248, $i249, $i250, $p251, $i252, $i253, $i254, $i255, $p256, $p257, $i258, $i259, $i260, $i261, $i262, $i263, $p264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $i272, $i273, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106, vslice_dummy_var_107, vslice_dummy_var_108, vslice_dummy_var_109, vslice_dummy_var_110, vslice_dummy_var_111, vslice_dummy_var_112, vslice_dummy_var_113, vslice_dummy_var_114, vslice_dummy_var_115, vslice_dummy_var_116, vslice_dummy_var_117 := main_loop_$bb1($p0, $p1, $p3, $p5, $p6, $p8, $p10, $p12, $i13, $i14, $i15, $p17, $p18, $i19, $i20, $i21, $p23, $p25, $p27, $p29, $p30, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i48, $i49, $i50, $i51, $i52, $i53, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $p76, $i78, $i79, $p80, $i81, $i82, $p83, $i84, $i85, $p86, $i87, $i88, $p89, $i90, $i91, $p92, $i93, $i94, $p95, $i96, $i97, $p98, $p99, $i100, $i101, $p102, $p103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $p111, $i112, $i113, $p114, $i115, $i116, $p117, $i119, $i120, $p121, $i123, $i124, $p125, $i127, $i128, $p129, $i131, $i132, $p133, $i134, $i135, $p136, $i137, $i138, $p139, $i141, $i142, $p143, $i145, $i146, $p147, $i149, $i150, $p151, $i153, $i154, $p155, $i157, $i158, $p159, $i161, $i162, $p163, $i165, $i166, $p167, $i169, $i170, $p171, $i173, $i174, $p175, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $p203, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $p211, $i212, $i213, $i214, $i215, $p216, $i217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $i225, $i226, $i227, $p228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $p236, $i237, $i238, $i239, $i240, $i241, $i242, $i243, $p244, $i245, $i246, $i247, $i248, $i249, $i250, $p251, $i252, $i253, $i254, $i255, $p256, $p257, $i258, $i259, $i260, $i261, $i262, $i263, $p264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $i272, $i273, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106, vslice_dummy_var_107, vslice_dummy_var_108, vslice_dummy_var_109, vslice_dummy_var_110, vslice_dummy_var_111, vslice_dummy_var_112, vslice_dummy_var_113, vslice_dummy_var_114, vslice_dummy_var_115, vslice_dummy_var_116, vslice_dummy_var_117);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i32, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i32, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i32, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i32, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} ldv_stop();
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb32_dummy;

  $bb9:
    assume $i36 == 1;
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $i268 := $M.30;
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $i269 := $ne.i32($i268, 0);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  $bb284:
    assume !($i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb283:
    assume $i269 == 1;
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1019} $i270 := __VERIFIER_nondet_int();
    call {:si_unique_call 1020} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i270);
    call {:si_unique_call 1021} {:cexpr "tmp___26"} boogie_si_record_i32($i270);
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    $i271 := $eq.i32($i270, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb286, $bb287;

  $bb287:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} ldv_stop();
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb286:
    assume $i271 == 1;
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $i272 := $M.30;
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $i273 := $eq.i32($i272, 1);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb288, $bb289;

  $bb289:
    assume !($i273 == 1);
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb288:
    assume $i273 == 1;
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} vslice_dummy_var_117 := show_country_codes($p27, $p29, $p30);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 1023} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb7:
    assume $i35 == 1;
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $i217 := $M.29;
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $i218 := $ne.i32($i217, 0);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  $bb228:
    assume !($i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb227:
    assume $i218 == 1;
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 1} true;
    call {:si_unique_call 996} $i219 := __VERIFIER_nondet_int();
    call {:si_unique_call 997} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i219);
    call {:si_unique_call 998} {:cexpr "tmp___25"} boogie_si_record_i32($i219);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    $i220 := $slt.i32($i219, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i220 == 1);
    assume {:verifier.code 0} true;
    $i221 := $slt.i32($i219, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  $bb233:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    $i222 := $slt.i32($i219, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234, $bb235;

  $bb235:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    $i223 := $eq.i32($i219, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    assume !($i223 == 1);
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} ldv_stop();
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb236:
    assume $i223 == 1;
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $i262 := $M.29;
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i263 := $eq.i32($i262, 3);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274, $bb275;

  $bb275:
    assume !($i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb274:
    assume $i263 == 1;
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $p264 := $M.18;
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} $i265 := acm_resume($p264);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $M.38 := $i265;
    call {:si_unique_call 1016} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i265);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $i266 := $M.38;
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $i267 := $eq.i32($i266, 0);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb276, $bb277;

  $bb277:
    assume !($i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb276:
    assume $i267 == 1;
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $M.29 := 2;
    call {:si_unique_call 1017} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    goto $bb278;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb234:
    assume $i222 == 1;
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $i254 := $M.29;
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $i255 := $eq.i32($i254, 2);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb268, $bb269;

  $bb269:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb268:
    assume $i255 == 1;
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $p256 := $M.18;
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $i258 := $load.i32($M.22, $p257);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} $i259 := acm_suspend($p256, $i258);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $M.37 := $i259;
    call {:si_unique_call 1013} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i259);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $i260 := $M.37;
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $i261 := $eq.i32($i260, 0);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb270, $bb271;

  $bb271:
    assume !($i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb270:
    assume $i261 == 1;
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $M.29 := 3;
    call {:si_unique_call 1014} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb232:
    assume $i221 == 1;
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $i240 := $M.29;
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $i241 := $eq.i32($i240, 3);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb256, $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    assume !($i241 == 1);
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    $i247 := $M.29;
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $i248 := $eq.i32($i247, 2);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb262, $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    assume !($i248 == 1);
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb262:
    assume $i248 == 1;
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $i249 := $M.36;
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $i250 := $eq.i32($i249, 0);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb265, $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    assume !($i250 == 1);
    goto $bb264;

  $bb265:
    assume $i250 == 1;
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $p251 := $M.18;
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} acm_disconnect($p251);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 1010} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $i252 := $M.26;
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $i253 := $sub.i32($i252, 1);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $M.26 := $i253;
    call {:si_unique_call 1011} {:cexpr "ref_cnt"} boogie_si_record_i32($i253);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb256:
    assume $i241 == 1;
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $i242 := $M.36;
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $i243 := $eq.i32($i242, 0);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    assume !($i243 == 1);
    goto $bb258;

  $bb259:
    assume $i243 == 1;
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $p244 := $M.18;
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} acm_disconnect($p244);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 1007} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $i245 := $M.26;
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $i246 := $sub.i32($i245, 1);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $M.26 := $i246;
    call {:si_unique_call 1008} {:cexpr "ref_cnt"} boogie_si_record_i32($i246);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb230:
    assume $i220 == 1;
    assume {:verifier.code 0} true;
    $i224 := $slt.i32($i219, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  $bb240:
    assume !($i224 == 1);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $i234 := $M.29;
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $i235 := $eq.i32($i234, 3);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb250, $bb251;

  $bb251:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb250:
    assume $i235 == 1;
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $p236 := $M.18;
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} $i237 := acm_reset_resume($p236);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $M.35 := $i237;
    call {:si_unique_call 1004} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i237);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $i238 := $M.35;
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $i239 := $eq.i32($i238, 0);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  $bb253:
    assume !($i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb252:
    assume $i239 == 1;
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $M.29 := 2;
    call {:si_unique_call 1005} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    goto $bb254;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb239:
    assume $i224 == 1;
    assume {:verifier.code 0} true;
    $i225 := $eq.i32($i219, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    assume !($i225 == 1);
    goto $bb238;

  $bb241:
    assume $i225 == 1;
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $i226 := $M.29;
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $i227 := $eq.i32($i226, 1);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  $bb244:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb243:
    assume $i227 == 1;
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $p228 := $M.18;
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} $i229 := acm_probe($p228, $p25);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $M.34 := $i229;
    call {:si_unique_call 1000} {:cexpr "ldv_retval_6"} boogie_si_record_i32($i229);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $i230 := $M.34;
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $i231 := $eq.i32($i230, 0);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  $bb246:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb245:
    assume $i231 == 1;
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $M.29 := 2;
    call {:si_unique_call 1001} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $i232 := $M.26;
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $i233 := $add.i32($i232, 1);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $M.26 := $i233;
    call {:si_unique_call 1002} {:cexpr "ref_cnt"} boogie_si_record_i32($i233);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb5:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i32, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i37 == 1);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $i194 := $M.28;
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $i195 := $ne.i32($i194, 0);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb199:
    assume $i195 == 1;
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 1} true;
    call {:si_unique_call 983} $i196 := __VERIFIER_nondet_int();
    call {:si_unique_call 984} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i196);
    call {:si_unique_call 985} {:cexpr "tmp___24"} boogie_si_record_i32($i196);
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    $i197 := $slt.i32($i196, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  $bb203:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    $i198 := $slt.i32($i196, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  $bb205:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    $i199 := $eq.i32($i196, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    assume !($i199 == 1);
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} ldv_stop();
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb206:
    assume $i199 == 1;
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $i214 := $M.28;
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $i215 := $eq.i32($i214, 1);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  $bb222:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb221:
    assume $i215 == 1;
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $p216 := $M.19;
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} acm_port_destruct($p216);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $M.28 := 3;
    call {:si_unique_call 994} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb204:
    assume $i198 == 1;
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $i209 := $M.28;
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $i210 := $eq.i32($i209, 2);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  $bb219:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb218:
    assume $i210 == 1;
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $p211 := $M.19;
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} acm_port_shutdown($p211);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 991} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $i212 := $M.26;
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $i213 := $sub.i32($i212, 1);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $M.26 := $i213;
    call {:si_unique_call 992} {:cexpr "ref_cnt"} boogie_si_record_i32($i213);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    goto $bb220;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb202:
    assume $i197 == 1;
    assume {:verifier.code 0} true;
    $i200 := $eq.i32($i196, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    assume !($i200 == 1);
    goto $bb208;

  $bb209:
    assume $i200 == 1;
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $i201 := $M.28;
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $i202 := $eq.i32($i201, 1);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb211:
    assume $i202 == 1;
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $p203 := $M.19;
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} $i204 := acm_port_activate($p203, $p23);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $M.33 := $i204;
    call {:si_unique_call 987} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i204);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $i205 := $M.33;
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $i206 := $eq.i32($i205, 0);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  $bb214:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb213:
    assume $i206 == 1;
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $M.28 := 2;
    call {:si_unique_call 988} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $i207 := $M.26;
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $i208 := $add.i32($i207, 1);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $M.26 := $i208;
    call {:si_unique_call 989} {:cexpr "ref_cnt"} boogie_si_record_i32($i208);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    goto $bb215;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i37 == 1;
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $i177 := $M.27;
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $i178 := $ne.i32($i177, 0);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb169:
    assume $i178 == 1;
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 1} true;
    call {:si_unique_call 965} $i179 := __VERIFIER_nondet_int();
    call {:si_unique_call 966} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i179);
    call {:si_unique_call 967} {:cexpr "tmp___23"} boogie_si_record_i32($i179);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    $i180 := $slt.i32($i179, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    $i181 := $eq.i32($i179, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    assume !($i181 == 1);
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} ldv_stop();
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb174:
    assume $i181 == 1;
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $i187 := $M.27;
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i187, 1);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb187:
    assume $i188 == 1;
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} $i189 := acm_init();
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $M.32 := $i189;
    call {:si_unique_call 972} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i189);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $i190 := $M.32;
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $i191 := $eq.i32($i190, 0);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    $i192 := $M.32;
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $i193 := $ne.i32($i192, 0);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  $bb193:
    assume !($i193 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb192:
    assume $i193 == 1;
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 981} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} ldv_check_final_state();
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb189:
    assume $i191 == 1;
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 973} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 974} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 975} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} ldv_tty_port_operations_3();
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 977} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} ldv_initialize_tty_operations_1();
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 979} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 980} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb172:
    assume $i180 == 1;
    assume {:verifier.code 0} true;
    $i182 := $eq.i32($i179, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    assume !($i182 == 1);
    goto $bb176;

  $bb177:
    assume $i182 == 1;
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $i183 := $M.27;
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $i184 := $eq.i32($i183, 3);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    assume !($i184 == 1);
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb179:
    assume $i184 == 1;
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $i185 := $M.26;
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $i186 := $eq.i32($i185, 0);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    assume !($i186 == 1);
    goto $bb181;

  $bb182:
    assume $i186 == 1;
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} acm_exit();
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 969} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb3:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i32, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i32, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i39 == 1);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $i55 := $M.25;
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb45:
    assume $i56 == 1;
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 1} true;
    call {:si_unique_call 905} $i57 := __VERIFIER_nondet_int();
    call {:si_unique_call 906} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i57);
    call {:si_unique_call 907} {:cexpr "tmp___22"} boogie_si_record_i32($i57);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i57, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i57, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i57, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i61 := $slt.i32($i57, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i57, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} ldv_stop();
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb56:
    assume $i62 == 1;
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $i169 := $M.25;
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i170 := $eq.i32($i169, 1);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    $i173 := $M.25;
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i173, 2);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb163:
    assume $i174 == 1;
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $p175 := $M.21;
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} vslice_dummy_var_116 := acm_tty_tiocmset($p175, $i13, $i15);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $M.25 := 2;
    call {:si_unique_call 963} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb160:
    assume $i170 == 1;
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $p171 := $M.21;
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} vslice_dummy_var_115 := acm_tty_tiocmset($p171, $i13, $i15);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 961} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb54:
    assume $i61 == 1;
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $i161 := $M.25;
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i161, 1);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    $i165 := $M.25;
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $i166 := $eq.i32($i165, 2);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb157:
    assume $i166 == 1;
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $p167 := $M.21;
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} vslice_dummy_var_114 := acm_tty_install($p17, $p167);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $M.25 := 2;
    call {:si_unique_call 959} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb154:
    assume $i162 == 1;
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $p163 := $M.21;
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} vslice_dummy_var_113 := acm_tty_install($p17, $p163);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 957} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb52:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i57, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i63 == 1);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $i153 := $M.25;
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $i154 := $eq.i32($i153, 1);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $i157 := $M.25;
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $i158 := $eq.i32($i157, 2);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb151:
    assume $i158 == 1;
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $p159 := $M.21;
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} vslice_dummy_var_112 := acm_tty_tiocmget($p159);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $M.25 := 2;
    call {:si_unique_call 955} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb148:
    assume $i154 == 1;
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $p155 := $M.21;
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} vslice_dummy_var_111 := acm_tty_tiocmget($p155);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 953} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb59:
    assume $i63 == 1;
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $i145 := $M.25;
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i145, 1);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $i149 := $M.25;
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $i150 := $eq.i32($i149, 2);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb145:
    assume $i150 == 1;
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $p151 := $M.21;
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} vslice_dummy_var_110 := acm_tty_chars_in_buffer($p151);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $M.25 := 2;
    call {:si_unique_call 951} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb142:
    assume $i146 == 1;
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $p147 := $M.21;
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} vslice_dummy_var_109 := acm_tty_chars_in_buffer($p147);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 949} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb50:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i57, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i57, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i65 == 1);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $i137 := $M.25;
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $i138 := $eq.i32($i137, 1);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $i141 := $M.25;
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i141, 2);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb139:
    assume $i142 == 1;
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $p143 := $M.21;
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} vslice_dummy_var_108 := acm_tty_ioctl($p143, $i20, $i21);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $M.25 := 2;
    call {:si_unique_call 947} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb136:
    assume $i138 == 1;
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $p139 := $M.21;
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} vslice_dummy_var_107 := acm_tty_ioctl($p139, $i20, $i21);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 945} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb63:
    assume $i65 == 1;
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $i131 := $M.25;
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $i132 := $eq.i32($i131, 1);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $i134 := $M.25;
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i134, 2);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb133:
    assume $i135 == 1;
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $p136 := $M.21;
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} acm_tty_set_termios($p136, $p12);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $M.25 := 2;
    call {:si_unique_call 943} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb130:
    assume $i132 == 1;
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $p133 := $M.21;
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} acm_tty_set_termios($p133, $p12);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 941} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb61:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i57, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i66 == 1);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $i123 := $M.25;
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $i124 := $eq.i32($i123, 1);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $i127 := $M.25;
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i127, 2);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb127:
    assume $i128 == 1;
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $p129 := $M.21;
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} vslice_dummy_var_106 := acm_tty_break_ctl($p129, $i14);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $M.25 := 2;
    call {:si_unique_call 939} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb124:
    assume $i124 == 1;
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $p125 := $M.21;
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} vslice_dummy_var_105 := acm_tty_break_ctl($p125, $i14);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 937} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb65:
    assume $i66 == 1;
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $i115 := $M.25;
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $i116 := $eq.i32($i115, 1);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $i119 := $M.25;
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i119, 2);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb121:
    assume $i120 == 1;
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $p121 := $M.21;
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} vslice_dummy_var_104 := acm_tty_write_room($p121);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $M.25 := 2;
    call {:si_unique_call 935} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb118:
    assume $i116 == 1;
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $p117 := $M.21;
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} vslice_dummy_var_103 := acm_tty_write_room($p117);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 933} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb48:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i57, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i57, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i57, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i69 == 1);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i109 := $M.25;
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i109, 1);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $i112 := $M.25;
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i112, 2);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb115:
    assume $i113 == 1;
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $p114 := $M.21;
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} acm_tty_unthrottle($p114);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $M.25 := 2;
    call {:si_unique_call 931} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    goto $bb117;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb112:
    assume $i110 == 1;
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $p111 := $M.21;
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} acm_tty_unthrottle($p111);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 929} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    goto $bb114;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb71:
    assume $i69 == 1;
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $i100 := $M.25;
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i100, 1);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb106:
    assume $i101 == 1;
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $p102 := $M.21;
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $p103 := $M.20;
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} $i104 := acm_tty_open($p102, $p103);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $M.31 := $i104;
    call {:si_unique_call 925} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i104);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $i105 := $M.31;
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i105, 0);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb108:
    assume $i106 == 1;
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $M.25 := 2;
    call {:si_unique_call 926} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $i107 := $M.26;
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i108 := $add.i32($i107, 1);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $M.26 := $i108;
    call {:si_unique_call 927} {:cexpr "ref_cnt"} boogie_si_record_i32($i108);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb69:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i57, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i70 == 1);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $i96 := $M.25;
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i96, 2);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb103:
    assume $i97 == 1;
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $p98 := $M.21;
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $p99 := $M.20;
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} acm_tty_close($p98, $p99);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 923} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb73:
    assume $i70 == 1;
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i90 := $M.25;
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 1);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $i93 := $M.25;
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i93, 2);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb100:
    assume $i94 == 1;
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $p95 := $M.21;
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} acm_tty_hangup($p95);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $M.25 := 2;
    call {:si_unique_call 921} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb97:
    assume $i91 == 1;
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $p92 := $M.21;
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} acm_tty_hangup($p92);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 919} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb67:
    assume $i67 == 1;
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i57, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i57, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i72 == 1);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $i84 := $M.25;
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 1);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $i87 := $M.25;
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, 2);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb94:
    assume $i88 == 1;
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $p89 := $M.21;
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} acm_tty_throttle($p89);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $M.25 := 2;
    call {:si_unique_call 917} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb91:
    assume $i85 == 1;
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $p86 := $M.21;
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} acm_tty_throttle($p86);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 915} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb77:
    assume $i72 == 1;
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $i78 := $M.25;
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 1);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i81 := $M.25;
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 2);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb88:
    assume $i82 == 1;
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $p83 := $M.21;
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} acm_tty_cleanup($p83);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $M.25 := 2;
    call {:si_unique_call 913} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb85:
    assume $i79 == 1;
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $p80 := $M.21;
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} acm_tty_cleanup($p80);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 911} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb75:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i57, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb58;

  $bb79:
    assume $i73 == 1;
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i74 := $M.25;
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 2);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb81:
    assume $i75 == 1;
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $p76 := $M.21;
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} vslice_dummy_var_102 := acm_tty_write($p76, $p18, $i19);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $M.25 := 2;
    call {:si_unique_call 909} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    goto $bb83;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i39 == 1;
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $i48 := $M.24;
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb33:
    assume $i49 == 1;
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 1} true;
    call {:si_unique_call 899} $i50 := __VERIFIER_nondet_int();
    call {:si_unique_call 900} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i50);
    call {:si_unique_call 901} {:cexpr "tmp___21"} boogie_si_record_i32($i50);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} ldv_stop();
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb36:
    assume $i51 == 1;
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $i52 := $M.24;
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 1);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb38:
    assume $i53 == 1;
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} vslice_dummy_var_101 := show_country_rel_date($p8, $p10, $p6);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 903} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb14:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i32, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb11;

  $bb18:
    assume $i40 == 1;
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $i41 := $M.23;
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb20:
    assume $i42 == 1;
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 1} true;
    call {:si_unique_call 893} $i43 := __VERIFIER_nondet_int();
    call {:si_unique_call 894} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i43);
    call {:si_unique_call 895} {:cexpr "tmp___20"} boogie_si_record_i32($i43);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} ldv_stop();
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb23:
    assume $i44 == 1;
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $i45 := $M.23;
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 1);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i46 == 1;
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} vslice_dummy_var_100 := show_caps($p3, $p5, $p1);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 897} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb32_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 890} $i32 := __VERIFIER_nondet_int();
    call {:si_unique_call 891} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i32);
    call {:si_unique_call 892} {:cexpr "tmp___19"} boogie_si_record_i32($i32);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 336317);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 337349);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const acm_exit: ref;

axiom acm_exit == $sub.ref(0, 338381);

procedure acm_exit();
  free requires assertsPassed;
  modifies $M.29;



implementation acm_exit()
{
  var $p0: ref;
  var $p2: ref;
  var vslice_dummy_var_118: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} ldv_usb_deregister_40(acm_driver);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $p0 := $M.7;
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} vslice_dummy_var_118 := tty_unregister_driver($p0);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $p2 := $M.7;
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} put_tty_driver($p2);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    return;
}



const acm_init: ref;

axiom acm_init == $sub.ref(0, 339413);

procedure acm_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.0, $M.29, $M.36, $M.18, $CurrAddr;



implementation acm_init() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p34: ref;
  var $i4: i32;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} $p0 := alloc_tty_driver(32);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $M.7 := $p0;
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $p1 := $M.7;
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $M.7;
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, .str.24);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $p7 := $M.7;
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, .str.25);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $p9 := $M.7;
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 184)), $mul.ref(44, 1));
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 166);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $p11 := $M.7;
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 0);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $p13 := $M.7;
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p14, 3);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $p15 := $M.7;
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 184)), $mul.ref(58, 1));
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p16, 1);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $p17 := $M.7;
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p18, 12);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $p19 := $M.7;
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 184)), $mul.ref(60, 1));
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_22 := $M.0;
    cmdloc_dummy_var_23 := $M.0;
    call {:si_unique_call 1030} cmdloc_dummy_var_24 := $memcpy.i8(cmdloc_dummy_var_22, cmdloc_dummy_var_23, $p21, tty_std_termios, 44, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_24;
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $p22 := $M.7;
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 184)), $mul.ref(60, 1)), $mul.ref(8, 1));
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 3261);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $p25 := $M.7;
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} tty_set_operations($p25, acm_ops);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $p26 := $M.7;
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} $i27 := tty_register_driver($p26);
    call {:si_unique_call 1033} {:cexpr "retval"} boogie_si_record_i32($i27);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} $i30 := ldv_usb_register_driver_39(acm_driver, __this_module, .str.3);
    call {:si_unique_call 1036} {:cexpr "retval"} boogie_si_record_i32($i30);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} vslice_dummy_var_120 := printk.ref(.str.26);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb8:
    assume $i31 == 1;
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $p32 := $M.7;
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} vslice_dummy_var_119 := tty_unregister_driver($p32);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $p34 := $M.7;
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} put_tty_driver($p34);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $i4 := $i30;
    goto $bb3;

  $bb5:
    assume $i28 == 1;
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $p29 := $M.7;
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} put_tty_driver($p29);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $i4 := $i27;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 12);
    goto $bb3;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 340445);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $p0 := $M.10;
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} ldv_error();
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p3 := $M.39;
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} ldv_error();
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i6 := $M.40;
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i7 == 1);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} ldv_error();
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i8 := $M.17;
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i9 == 1);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} ldv_error();
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i10 := $M.41;
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i11 == 1);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} ldv_error();
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i9 == 1;
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i7 == 1;
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const alloc_tty_driver: ref;

axiom alloc_tty_driver == $sub.ref(0, 341477);

procedure alloc_tty_driver($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_tty_driver($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} {:cexpr "alloc_tty_driver:arg:lines"} boogie_si_record_i32($i0);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} $p1 := __tty_alloc_driver($i0, __this_module, 0);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} $i3 := IS_ERR($p2);
    call {:si_unique_call 1048} {:cexpr "tmp___0"} boogie_si_record_i64($i3);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $p1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $p5 := $0.ref;
    goto $bb3;
}



const tty_set_operations: ref;

axiom tty_set_operations == $sub.ref(0, 342509);

procedure tty_set_operations($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation tty_set_operations($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    return;
}



const tty_register_driver: ref;

axiom tty_register_driver == $sub.ref(0, 343541);

procedure tty_register_driver($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_register_driver($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1049} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1050} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const put_tty_driver: ref;

axiom put_tty_driver == $sub.ref(0, 344573);

procedure put_tty_driver($p0: ref);
  free requires assertsPassed;



implementation put_tty_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_register_driver_39: ref;

axiom ldv_usb_register_driver_39 == $sub.ref(0, 345605);

procedure ldv_usb_register_driver_39($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.29, $M.36, $M.18, $M.0, $CurrAddr;



implementation ldv_usb_register_driver_39($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} $i3 := usb_register_driver($p0, $p1, $p2);
    call {:si_unique_call 1052} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 1053} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $M.36 := 0;
    call {:si_unique_call 1054} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} ldv_usb_driver_2();
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const tty_unregister_driver: ref;

axiom tty_unregister_driver == $sub.ref(0, 346637);

procedure tty_unregister_driver($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_unregister_driver($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1056} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1057} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 347669);

procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1058} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1059} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_register_driver: ref;

axiom usb_register_driver == $sub.ref(0, 348701);

procedure usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1060} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1061} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __tty_alloc_driver: ref;

axiom __tty_alloc_driver == $sub.ref(0, 349733);

procedure __tty_alloc_driver($i0: i32, $p1: ref, $i2: i64) returns ($r: ref);
  free requires assertsPassed;



implementation __tty_alloc_driver($i0: i32, $p1: ref, $i2: i64) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} {:cexpr "__tty_alloc_driver:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1063} {:cexpr "__tty_alloc_driver:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} $p3 := external_alloc();
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const ldv_usb_deregister_40: ref;

axiom ldv_usb_deregister_40 == $sub.ref(0, 350765);

procedure ldv_usb_deregister_40($p0: ref);
  free requires assertsPassed;
  modifies $M.29;



implementation ldv_usb_deregister_40($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} usb_deregister($p0);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $M.29 := 0;
    call {:si_unique_call 1066} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    return;
}



const usb_deregister: ref;

axiom usb_deregister == $sub.ref(0, 351797);

procedure usb_deregister($p0: ref);
  free requires assertsPassed;



implementation usb_deregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 352829);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1067} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 1} true;
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 353861);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 354893);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 355925);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_124:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 356957);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 357989);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 359021);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 360053);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 361085);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 362117);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 363149);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 364181);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 365213);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 366245);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1068} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1069} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1070} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1071} __VERIFIER_assume($i4);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 367277);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 368309);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 369341);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 370373);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1072} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1073} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1074} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1075} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1076} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1077} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1078} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1079} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1080} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1081} __VERIFIER_assume($i7);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1082} __VERIFIER_assume($i11);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 371405);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 372437);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 373469);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 374501);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 375533);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 376565);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1083} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1084} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1085} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1086} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1087} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1088} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1089} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1090} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1091} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1092} __VERIFIER_assume($i7);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1093} __VERIFIER_assume($i11);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 377597);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 378629);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 379661);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 380693);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 381725);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 382757);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 383789);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 384821);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 385853);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1094} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1095} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1096} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1097} __VERIFIER_assume($i10);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 386885);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1098} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1099} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1100} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 387917);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1101} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1102} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1103} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 388949);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1104} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1105} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 389981);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 391013);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1106} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1107} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 392045);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 393077);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 394109);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1108} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1109} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1110} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1111} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} $p6 := malloc($i5);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_25 := $M.0;
    call {:si_unique_call 1113} cmdloc_dummy_var_26 := $memset.i8(cmdloc_dummy_var_25, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_26;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 395141);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 396173);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.18, $M.19, $M.20, $M.21, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.17, $M.41, $M.9, $M.10, $M.39, $M.40, $M.11, $M.13, $M.12, $M.14, $M.56, $M.0, $M.7, $M.91, $M.92, $M.15, $M.93;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1114} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.18 := $0.ref;
    $M.19 := $0.ref;
    $M.20 := $0.ref;
    $M.21 := $0.ref;
    $M.23 := 0;
    call {:si_unique_call 1115} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.24 := 0;
    call {:si_unique_call 1116} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.25 := 0;
    call {:si_unique_call 1117} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.26 := 0;
    call {:si_unique_call 1118} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.27 := 0;
    call {:si_unique_call 1119} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.28 := 0;
    call {:si_unique_call 1120} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.29 := 0;
    call {:si_unique_call 1121} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.30 := 0;
    call {:si_unique_call 1122} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.31 := 0;
    call {:si_unique_call 1123} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.32 := 0;
    call {:si_unique_call 1124} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.33 := 0;
    call {:si_unique_call 1125} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.34 := 0;
    call {:si_unique_call 1126} {:cexpr "ldv_retval_6"} boogie_si_record_i32(0);
    $M.35 := 0;
    call {:si_unique_call 1127} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.36 := 0;
    call {:si_unique_call 1128} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    $M.37 := 0;
    call {:si_unique_call 1129} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.38 := 0;
    call {:si_unique_call 1130} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.17 := 0;
    call {:si_unique_call 1131} {:cexpr "INTERF_STATE"} boogie_si_record_i32(0);
    $M.41 := 0;
    call {:si_unique_call 1132} {:cexpr "SERIAL_STATE"} boogie_si_record_i32(0);
    $M.9 := $0.ref;
    $M.10 := $0.ref;
    $M.39 := $0.ref;
    $M.40 := 0;
    call {:si_unique_call 1133} {:cexpr "dev_counter"} boogie_si_record_i32(0);
    $M.11 := 0;
    call {:si_unique_call 1134} {:cexpr "completeFnIntCounter"} boogie_si_record_i32(0);
    $M.13 := 0;
    call {:si_unique_call 1135} {:cexpr "completeFnBulkCounter"} boogie_si_record_i32(0);
    $M.12 := $0.ref;
    $M.14 := $0.ref;
    $M.56 := $store.ref($M.56, dev_attr_iCountryCodeRelDate, .str.68);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.56 := $store.ref($M.56, $add.ref($add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.56 := $store.ref($M.56, $add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(32, 1)), show_country_rel_date);
    $M.56 := $store.ref($M.56, $add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.56 := $store.ref($M.56, dev_attr_wCountryCodes, .str.67);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.56 := $store.ref($M.56, $add.ref($add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.56 := $store.ref($M.56, $add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(32, 1)), show_country_codes);
    $M.56 := $store.ref($M.56, $add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.56 := $store.ref($M.56, dev_attr_bmCapabilities, .str.66);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.56 := $store.ref($M.56, $add.ref($add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i8($M.56, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.56 := $store.ref($M.56, $add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(32, 1)), show_caps);
    $M.56 := $store.ref($M.56, $add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, acm_port_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(acm_port_ops, $mul.ref(0, 48)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(acm_port_ops, $mul.ref(0, 48)), $mul.ref(16, 1)), acm_port_shutdown);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(acm_port_ops, $mul.ref(0, 48)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(acm_port_ops, $mul.ref(0, 48)), $mul.ref(32, 1)), acm_port_activate);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(acm_port_ops, $mul.ref(0, 48)), $mul.ref(40, 1)), acm_port_destruct);
    $M.7 := $0.ref;
    $M.91 := $store.i16($M.91, acm_ids, 3);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(0, 32)), $mul.ref(2, 1)), 2160);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(0, 32)), $mul.ref(4, 1)), 1);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(0, 32)), $mul.ref(24, 1)), 1);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(1, 32)), $mul.ref(0, 1)), 3);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(1, 32)), $mul.ref(2, 1)), 3725);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(1, 32)), $mul.ref(4, 1)), 3);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(1, 32)), $mul.ref(24, 1)), 1);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(2, 32)), $mul.ref(0, 1)), 3);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(2, 32)), $mul.ref(2, 1)), 3725);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(2, 32)), $mul.ref(4, 1)), 13097);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(2, 32)), $mul.ref(24, 1)), 1);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(3, 32)), $mul.ref(0, 1)), 3);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(3, 32)), $mul.ref(2, 1)), 1154);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(3, 32)), $mul.ref(4, 1)), 515);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(3, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(3, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(3, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(3, 32)), $mul.ref(13, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(3, 32)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(3, 32)), $mul.ref(15, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(3, 32)), $mul.ref(24, 1)), 1);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(4, 32)), $mul.ref(0, 1)), 3);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(4, 32)), $mul.ref(2, 1)), 1947);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(4, 32)), $mul.ref(4, 1)), 15);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(4, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(4, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(4, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(4, 32)), $mul.ref(13, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(4, 32)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(4, 32)), $mul.ref(15, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(4, 32)), $mul.ref(24, 1)), 1);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(5, 32)), $mul.ref(0, 1)), 3);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(5, 32)), $mul.ref(2, 1)), 2766);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(5, 32)), $mul.ref(4, 1)), 5634);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(5, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(5, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(5, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(5, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(5, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(5, 32)), $mul.ref(13, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(5, 32)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(5, 32)), $mul.ref(15, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(5, 32)), $mul.ref(24, 1)), 2);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(6, 32)), $mul.ref(0, 1)), 3);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(6, 32)), $mul.ref(2, 1)), 2766);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(6, 32)), $mul.ref(4, 1)), 5640);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(6, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(6, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(6, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(6, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(6, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(6, 32)), $mul.ref(13, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(6, 32)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(6, 32)), $mul.ref(15, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(6, 32)), $mul.ref(24, 1)), 2);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(7, 32)), $mul.ref(0, 1)), 3);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(7, 32)), $mul.ref(2, 1)), 2766);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(7, 32)), $mul.ref(4, 1)), 5649);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(7, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(7, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(7, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(7, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(7, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(7, 32)), $mul.ref(13, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(7, 32)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(7, 32)), $mul.ref(15, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(7, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(7, 32)), $mul.ref(24, 1)), 2);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(8, 32)), $mul.ref(0, 1)), 3);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(8, 32)), $mul.ref(2, 1)), 8888);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(8, 32)), $mul.ref(4, 1)), 28672);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(8, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(8, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(8, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(8, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(8, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(8, 32)), $mul.ref(13, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(8, 32)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(8, 32)), $mul.ref(15, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(8, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(8, 32)), $mul.ref(24, 1)), 1);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(9, 32)), $mul.ref(0, 1)), 3);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(9, 32)), $mul.ref(2, 1)), 2051);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(9, 32)), $mul.ref(4, 1)), 12437);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(9, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(9, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(9, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(9, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(9, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(9, 32)), $mul.ref(13, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(9, 32)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(9, 32)), $mul.ref(15, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(9, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(9, 32)), $mul.ref(24, 1)), 1);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(10, 32)), $mul.ref(0, 1)), 3);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(10, 32)), $mul.ref(2, 1)), 1394);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(10, 32)), $mul.ref(4, 1)), 4897);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(10, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(10, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(10, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(10, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(10, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(10, 32)), $mul.ref(13, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(10, 32)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(10, 32)), $mul.ref(15, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(10, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(10, 32)), $mul.ref(24, 1)), 1);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(11, 32)), $mul.ref(0, 1)), 3);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(11, 32)), $mul.ref(2, 1)), 1394);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(11, 32)), $mul.ref(4, 1)), 4900);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(11, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(11, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(11, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(11, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(11, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(11, 32)), $mul.ref(13, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(11, 32)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(11, 32)), $mul.ref(15, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(11, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(11, 32)), $mul.ref(24, 1)), 1);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(12, 32)), $mul.ref(0, 1)), 3);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(12, 32)), $mul.ref(2, 1)), 1394);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(12, 32)), $mul.ref(4, 1)), 4904);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(12, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(12, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(12, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(12, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(12, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(12, 32)), $mul.ref(13, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(12, 32)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(12, 32)), $mul.ref(15, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(12, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(12, 32)), $mul.ref(24, 1)), 1);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(13, 32)), $mul.ref(0, 1)), 3);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(13, 32)), $mul.ref(2, 1)), 8888);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(13, 32)), $mul.ref(4, 1)), 25637);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(13, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(13, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(13, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(13, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(13, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(13, 32)), $mul.ref(13, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(13, 32)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(13, 32)), $mul.ref(15, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(13, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(13, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(14, 32)), $mul.ref(0, 1)), 3);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(14, 32)), $mul.ref(2, 1)), 8888);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(14, 32)), $mul.ref(4, 1)), 11665);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(14, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(14, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(14, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(14, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(14, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(14, 32)), $mul.ref(13, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(14, 32)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(14, 32)), $mul.ref(15, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(14, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(14, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(15, 32)), $mul.ref(0, 1)), 3);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(15, 32)), $mul.ref(2, 1)), 8888);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(15, 32)), $mul.ref(4, 1)), 11666);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(15, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(15, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(15, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(15, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(15, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(15, 32)), $mul.ref(13, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(15, 32)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(15, 32)), $mul.ref(15, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(15, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(15, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(16, 32)), $mul.ref(0, 1)), 3);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(16, 32)), $mul.ref(2, 1)), 8888);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(16, 32)), $mul.ref(4, 1)), 11667);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(16, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(16, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(16, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(16, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(16, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(16, 32)), $mul.ref(13, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(16, 32)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(16, 32)), $mul.ref(15, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(16, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(16, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(17, 32)), $mul.ref(0, 1)), 3);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(17, 32)), $mul.ref(2, 1)), 8888);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(17, 32)), $mul.ref(4, 1)), 11669);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(17, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(17, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(17, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(17, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(17, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(17, 32)), $mul.ref(13, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(17, 32)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(17, 32)), $mul.ref(15, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(17, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(17, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(18, 32)), $mul.ref(0, 1)), 3);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(18, 32)), $mul.ref(2, 1)), 8888);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(18, 32)), $mul.ref(4, 1)), 11670);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(18, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(18, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(18, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(18, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(18, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(18, 32)), $mul.ref(13, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(18, 32)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(18, 32)), $mul.ref(15, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(18, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(18, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(19, 32)), $mul.ref(0, 1)), 3);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(19, 32)), $mul.ref(2, 1)), 8888);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(19, 32)), $mul.ref(4, 1)), 11671);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(19, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(19, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(19, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(19, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(19, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(19, 32)), $mul.ref(13, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(19, 32)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(19, 32)), $mul.ref(15, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(19, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(19, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(20, 32)), $mul.ref(0, 1)), 3);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(20, 32)), $mul.ref(2, 1)), 8888);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(20, 32)), $mul.ref(4, 1)), 11673);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(20, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(20, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(20, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(20, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(20, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(20, 32)), $mul.ref(13, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(20, 32)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(20, 32)), $mul.ref(15, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(20, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(20, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(21, 32)), $mul.ref(0, 1)), 3);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(21, 32)), $mul.ref(2, 1)), 8888);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(21, 32)), $mul.ref(4, 1)), 11674);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(21, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(21, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(21, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(21, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(21, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(21, 32)), $mul.ref(13, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(21, 32)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(21, 32)), $mul.ref(15, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(21, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(21, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(22, 32)), $mul.ref(0, 1)), 3);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(22, 32)), $mul.ref(2, 1)), 1394);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(22, 32)), $mul.ref(4, 1)), 4905);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(22, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(22, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(22, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(22, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(22, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(22, 32)), $mul.ref(13, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(22, 32)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(22, 32)), $mul.ref(15, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(22, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(22, 32)), $mul.ref(24, 1)), 1);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(23, 32)), $mul.ref(0, 1)), 3);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(23, 32)), $mul.ref(2, 1)), 1394);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(23, 32)), $mul.ref(4, 1)), 4928);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(23, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(23, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(23, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(23, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(23, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(23, 32)), $mul.ref(13, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(23, 32)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(23, 32)), $mul.ref(15, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(23, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(23, 32)), $mul.ref(24, 1)), 1);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(24, 32)), $mul.ref(0, 1)), 3);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(24, 32)), $mul.ref(2, 1)), 1529);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(24, 32)), $mul.ref(4, 1)), 16386);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(24, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(24, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(24, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(24, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(24, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(24, 32)), $mul.ref(13, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(24, 32)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(24, 32)), $mul.ref(15, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(24, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(24, 32)), $mul.ref(24, 1)), 1);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(25, 32)), $mul.ref(0, 1)), 3);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(25, 32)), $mul.ref(2, 1)), 7099);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(25, 32)), $mul.ref(4, 1)), 3);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(25, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(25, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(25, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(25, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(25, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(25, 32)), $mul.ref(13, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(25, 32)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(25, 32)), $mul.ref(15, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(25, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(25, 32)), $mul.ref(24, 1)), 1);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(26, 32)), $mul.ref(0, 1)), 3);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(26, 32)), $mul.ref(2, 1)), 5494);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(26, 32)), $mul.ref(4, 1)), 945);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(26, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(26, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(26, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(26, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(26, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(26, 32)), $mul.ref(13, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(26, 32)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(26, 32)), $mul.ref(15, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(26, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(26, 32)), $mul.ref(24, 1)), 1);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(27, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(27, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(27, 32)), $mul.ref(4, 1)), 1069);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(27, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(27, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(27, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(27, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(27, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(27, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(27, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(27, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(27, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(27, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(28, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(28, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(28, 32)), $mul.ref(4, 1)), 1240);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(28, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(28, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(28, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(28, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(28, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(28, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(28, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(28, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(28, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(28, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(29, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(29, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(29, 32)), $mul.ref(4, 1)), 1225);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(29, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(29, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(29, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(29, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(29, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(29, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(29, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(29, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(29, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(29, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(30, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(30, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(30, 32)), $mul.ref(4, 1)), 1049);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(30, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(30, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(30, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(30, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(30, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(30, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(30, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(30, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(30, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(30, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(31, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(31, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(31, 32)), $mul.ref(4, 1)), 1101);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(31, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(31, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(31, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(31, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(31, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(31, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(31, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(31, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(31, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(31, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(32, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(32, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(32, 32)), $mul.ref(4, 1)), 1);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(32, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(32, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(32, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(32, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(32, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(32, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(32, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(32, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(32, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(32, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(33, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(33, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(33, 32)), $mul.ref(4, 1)), 1141);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(33, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(33, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(33, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(33, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(33, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(33, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(33, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(33, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(33, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(33, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(34, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(34, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(34, 32)), $mul.ref(4, 1)), 1288);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(34, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(34, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(34, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(34, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(34, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(34, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(34, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(34, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(34, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(34, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(35, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(35, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(35, 32)), $mul.ref(4, 1)), 1048);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(35, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(35, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(35, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(35, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(35, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(35, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(35, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(35, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(35, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(35, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(36, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(36, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(36, 32)), $mul.ref(4, 1)), 1061);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(36, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(36, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(36, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(36, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(36, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(36, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(36, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(36, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(36, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(36, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(37, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(37, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(37, 32)), $mul.ref(4, 1)), 1158);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(37, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(37, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(37, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(37, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(37, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(37, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(37, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(37, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(37, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(37, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(38, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(38, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(38, 32)), $mul.ref(4, 1)), 1247);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(38, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(38, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(38, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(38, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(38, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(38, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(38, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(38, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(38, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(38, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(39, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(39, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(39, 32)), $mul.ref(4, 1)), 14);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(39, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(39, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(39, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(39, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(39, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(39, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(39, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(39, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(39, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(39, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(40, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(40, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(40, 32)), $mul.ref(4, 1)), 1093);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(40, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(40, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(40, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(40, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(40, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(40, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(40, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(40, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(40, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(40, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(41, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(41, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(41, 32)), $mul.ref(4, 1)), 1071);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(41, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(41, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(41, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(41, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(41, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(41, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(41, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(41, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(41, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(41, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(42, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(42, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(42, 32)), $mul.ref(4, 1)), 1166);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(42, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(42, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(42, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(42, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(42, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(42, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(42, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(42, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(42, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(42, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(43, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(43, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(43, 32)), $mul.ref(4, 1)), 1056);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(43, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(43, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(43, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(43, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(43, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(43, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(43, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(43, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(43, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(43, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(44, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(44, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(44, 32)), $mul.ref(4, 1)), 1254);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(44, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(44, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(44, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(44, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(44, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(44, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(44, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(44, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(44, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(44, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(45, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(45, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(45, 32)), $mul.ref(4, 1)), 1202);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(45, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(45, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(45, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(45, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(45, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(45, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(45, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(45, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(45, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(45, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(46, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(46, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(46, 32)), $mul.ref(4, 1)), 308);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(46, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(46, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(46, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(46, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(46, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(46, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(46, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(46, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(46, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(46, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(47, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(47, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(47, 32)), $mul.ref(4, 1)), 1134);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(47, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(47, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(47, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(47, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(47, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(47, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(47, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(47, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(47, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(47, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(48, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(48, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(48, 32)), $mul.ref(4, 1)), 47);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(48, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(48, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(48, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(48, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(48, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(48, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(48, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(48, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(48, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(48, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(49, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(49, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(49, 32)), $mul.ref(4, 1)), 136);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(49, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(49, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(49, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(49, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(49, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(49, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(49, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(49, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(49, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(49, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(50, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(50, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(50, 32)), $mul.ref(4, 1)), 252);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(50, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(50, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(50, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(50, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(50, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(50, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(50, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(50, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(50, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(50, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(51, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(51, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(51, 32)), $mul.ref(4, 1)), 66);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(51, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(51, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(51, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(51, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(51, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(51, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(51, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(51, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(51, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(51, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(52, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(52, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(52, 32)), $mul.ref(4, 1)), 176);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(52, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(52, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(52, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(52, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(52, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(52, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(52, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(52, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(52, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(52, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(53, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(53, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(53, 32)), $mul.ref(4, 1)), 171);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(53, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(53, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(53, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(53, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(53, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(53, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(53, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(53, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(53, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(53, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(54, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(54, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(54, 32)), $mul.ref(4, 1)), 1153);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(54, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(54, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(54, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(54, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(54, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(54, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(54, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(54, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(54, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(54, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(55, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(55, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(55, 32)), $mul.ref(4, 1)), 7);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(55, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(55, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(55, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(55, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(55, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(55, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(55, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(55, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(55, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(55, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(56, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(56, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(56, 32)), $mul.ref(4, 1)), 113);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(56, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(56, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(56, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(56, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(56, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(56, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(56, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(56, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(56, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(56, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(57, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(57, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(57, 32)), $mul.ref(4, 1)), 1264);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(57, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(57, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(57, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(57, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(57, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(57, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(57, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(57, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(57, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(57, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(58, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(58, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(58, 32)), $mul.ref(4, 1)), 112);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(58, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(58, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(58, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(58, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(58, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(58, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(58, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(58, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(58, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(58, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(59, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(59, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(59, 32)), $mul.ref(4, 1)), 233);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(59, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(59, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(59, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(59, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(59, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(59, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(59, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(59, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(59, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(59, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(60, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(60, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(60, 32)), $mul.ref(4, 1)), 153);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(60, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(60, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(60, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(60, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(60, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(60, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(60, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(60, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(60, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(60, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(61, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(61, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(61, 32)), $mul.ref(4, 1)), 296);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(61, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(61, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(61, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(61, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(61, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(61, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(61, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(61, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(61, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(61, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(62, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(62, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(62, 32)), $mul.ref(4, 1)), 143);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(62, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(62, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(62, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(62, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(62, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(62, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(62, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(62, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(62, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(62, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(63, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(63, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(63, 32)), $mul.ref(4, 1)), 160);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(63, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(63, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(63, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(63, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(63, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(63, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(63, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(63, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(63, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(63, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(64, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(64, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(64, 32)), $mul.ref(4, 1)), 123);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(64, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(64, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(64, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(64, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(64, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(64, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(64, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(64, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(64, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(64, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(65, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(65, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(65, 32)), $mul.ref(4, 1)), 148);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(65, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(65, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(65, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(65, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(65, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(65, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(65, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(65, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(65, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(65, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(66, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(66, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(66, 32)), $mul.ref(4, 1)), 58);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(66, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(66, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(66, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(66, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(66, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(66, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(66, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(66, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(66, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(66, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(67, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(67, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(67, 32)), $mul.ref(4, 1)), 233);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(67, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(67, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(67, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(67, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(67, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(67, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(67, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(67, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(67, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(67, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(68, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(68, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(68, 32)), $mul.ref(4, 1)), 264);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(68, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(68, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(68, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(68, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(68, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(68, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(68, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(68, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(68, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(68, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(69, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(69, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(69, 32)), $mul.ref(4, 1)), 501);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(69, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(69, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(69, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(69, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(69, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(69, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(69, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(69, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(69, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(69, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(70, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(70, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(70, 32)), $mul.ref(4, 1)), 739);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(70, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(70, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(70, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(70, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(70, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(70, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(70, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(70, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(70, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(70, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(71, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(71, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(71, 32)), $mul.ref(4, 1)), 376);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(71, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(71, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(71, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(71, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(71, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(71, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(71, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(71, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(71, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(71, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(72, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(72, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(72, 32)), $mul.ref(4, 1)), 270);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(72, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(72, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(72, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(72, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(72, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(72, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(72, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(72, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(72, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(72, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(73, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(73, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(73, 32)), $mul.ref(4, 1)), 729);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(73, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(73, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(73, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(73, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(73, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(73, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(73, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(73, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(73, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(73, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(74, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(74, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(74, 32)), $mul.ref(4, 1)), 464);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(74, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(74, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(74, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(74, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(74, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(74, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(74, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(74, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(74, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(74, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(75, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(75, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(75, 32)), $mul.ref(4, 1)), 547);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(75, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(75, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(75, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(75, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(75, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(75, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(75, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(75, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(75, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(75, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(76, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(76, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(76, 32)), $mul.ref(4, 1)), 629);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(76, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(76, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(76, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(76, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(76, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(76, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(76, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(76, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(76, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(76, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(77, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(77, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(77, 32)), $mul.ref(4, 1)), 620);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(77, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(77, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(77, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(77, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(77, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(77, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(77, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(77, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(77, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(77, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(78, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(78, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(78, 32)), $mul.ref(4, 1)), 340);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(78, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(78, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(78, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(78, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(78, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(78, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(78, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(78, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(78, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(78, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(79, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(79, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(79, 32)), $mul.ref(4, 1)), 1230);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(79, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(79, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(79, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(79, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(79, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(79, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(79, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(79, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(79, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(79, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(80, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(80, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(80, 32)), $mul.ref(4, 1)), 468);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(80, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(80, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(80, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(80, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(80, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(80, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(80, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(80, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(80, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(80, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(81, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(81, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(81, 32)), $mul.ref(4, 1)), 770);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(81, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(81, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(81, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(81, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(81, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(81, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(81, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(81, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(81, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(81, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(82, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(82, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(82, 32)), $mul.ref(4, 1)), 821);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(82, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(82, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(82, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(82, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(82, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(82, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(82, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(82, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(82, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(82, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(83, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(83, 32)), $mul.ref(2, 1)), 1057);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(83, 32)), $mul.ref(4, 1)), 973);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(83, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(83, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(83, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(83, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(83, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(83, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(83, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(83, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(83, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(83, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(84, 32)), $mul.ref(0, 1)), 899);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(84, 32)), $mul.ref(2, 1)), 1255);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(84, 32)), $mul.ref(4, 1)), 26193);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(84, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(84, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(84, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(84, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(84, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(84, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(84, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(84, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(84, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(84, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(85, 32)), $mul.ref(0, 1)), 3);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(85, 32)), $mul.ref(2, 1)), 1003);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(85, 32)), $mul.ref(4, 1)), 48);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(85, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(85, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(85, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(85, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(85, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(85, 32)), $mul.ref(13, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(85, 32)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(85, 32)), $mul.ref(15, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(85, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(85, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(86, 32)), $mul.ref(0, 1)), 3);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(86, 32)), $mul.ref(2, 1)), 1684);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(86, 32)), $mul.ref(4, 1)), $sub.i16(0, 256));
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(86, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(86, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(86, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(86, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(86, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(86, 32)), $mul.ref(13, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(86, 32)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(86, 32)), $mul.ref(15, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(86, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(86, 32)), $mul.ref(24, 1)), 8);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(87, 32)), $mul.ref(0, 1)), 3);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(87, 32)), $mul.ref(2, 1)), 1240);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(87, 32)), $mul.ref(4, 1)), 11);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(87, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(87, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(87, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(87, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(87, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(87, 32)), $mul.ref(13, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(87, 32)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(87, 32)), $mul.ref(15, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(87, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(87, 32)), $mul.ref(24, 1)), 16);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(88, 32)), $mul.ref(0, 1)), 3);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(88, 32)), $mul.ref(2, 1)), 1240);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(88, 32)), $mul.ref(4, 1)), 130);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(88, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(88, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(88, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(88, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(88, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(88, 32)), $mul.ref(13, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(88, 32)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(88, 32)), $mul.ref(15, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(88, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(88, 32)), $mul.ref(24, 1)), 32);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(89, 32)), $mul.ref(0, 1)), 3);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(89, 32)), $mul.ref(2, 1)), 1240);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(89, 32)), $mul.ref(4, 1)), 131);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(89, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(89, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(89, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(89, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(89, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(89, 32)), $mul.ref(13, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(89, 32)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(89, 32)), $mul.ref(15, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(89, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(89, 32)), $mul.ref(24, 1)), 32);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(90, 32)), $mul.ref(0, 1)), 896);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(90, 32)), $mul.ref(2, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(90, 32)), $mul.ref(4, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(90, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(90, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(90, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(90, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(90, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(90, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(90, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(90, 32)), $mul.ref(15, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(90, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(90, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(91, 32)), $mul.ref(0, 1)), 896);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(91, 32)), $mul.ref(2, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(91, 32)), $mul.ref(4, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(91, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(91, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(91, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(91, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(91, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(91, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(91, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(91, 32)), $mul.ref(15, 1)), 1);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(91, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(91, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(92, 32)), $mul.ref(0, 1)), 896);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(92, 32)), $mul.ref(2, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(92, 32)), $mul.ref(4, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(92, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(92, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(92, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(92, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(92, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(92, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(92, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(92, 32)), $mul.ref(15, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(92, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(92, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(93, 32)), $mul.ref(0, 1)), 896);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(93, 32)), $mul.ref(2, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(93, 32)), $mul.ref(4, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(93, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(93, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(93, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(93, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(93, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(93, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(93, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(93, 32)), $mul.ref(15, 1)), 3);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(93, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(93, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(94, 32)), $mul.ref(0, 1)), 896);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(94, 32)), $mul.ref(2, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(94, 32)), $mul.ref(4, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(94, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(94, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(94, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(94, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(94, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(94, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(94, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(94, 32)), $mul.ref(15, 1)), 4);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(94, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(94, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(95, 32)), $mul.ref(0, 1)), 896);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(95, 32)), $mul.ref(2, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(95, 32)), $mul.ref(4, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(95, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(95, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(95, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(95, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(95, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(95, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(95, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(95, 32)), $mul.ref(15, 1)), 5);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(95, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(95, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(96, 32)), $mul.ref(0, 1)), 896);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(96, 32)), $mul.ref(2, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(96, 32)), $mul.ref(4, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(96, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(96, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(96, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(96, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(96, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(96, 32)), $mul.ref(13, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(96, 32)), $mul.ref(14, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(96, 32)), $mul.ref(15, 1)), 6);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(96, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(96, 32)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(97, 32)), $mul.ref(0, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(97, 32)), $mul.ref(2, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(97, 32)), $mul.ref(4, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(97, 32)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(97, 32)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(97, 32)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(97, 32)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(97, 32)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(97, 32)), $mul.ref(13, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(97, 32)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(97, 32)), $mul.ref(15, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(97, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3136)), $mul.ref(97, 32)), $mul.ref(24, 1)), 0);
    $M.92 := $store.ref($M.92, acm_driver, .str.3);
    $M.92 := $store.ref($M.92, $add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(8, 1)), acm_probe);
    $M.92 := $store.ref($M.92, $add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(16, 1)), acm_disconnect);
    $M.92 := $store.ref($M.92, $add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(24, 1)), $0.ref);
    $M.92 := $store.ref($M.92, $add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(32, 1)), acm_suspend);
    $M.92 := $store.ref($M.92, $add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(40, 1)), acm_resume);
    $M.92 := $store.ref($M.92, $add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(48, 1)), acm_reset_resume);
    $M.92 := $store.ref($M.92, $add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(56, 1)), $0.ref);
    $M.92 := $store.ref($M.92, $add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(64, 1)), $0.ref);
    $M.92 := $store.ref($M.92, $add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(72, 1)), acm_ids);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.92 := $store.ref($M.92, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.92 := $store.ref($M.92, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.92 := $store.ref($M.92, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.92 := $store.ref($M.92, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.92 := $store.ref($M.92, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.92 := $store.i64($M.92, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.92 := $store.ref($M.92, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.92 := $store.ref($M.92, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.92 := $store.ref($M.92, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.92 := $store.ref($M.92, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.92 := $store.ref($M.92, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.92 := $store.ref($M.92, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.92 := $store.ref($M.92, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.92 := $store.ref($M.92, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.92 := $store.ref($M.92, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $0.ref);
    $M.92 := $store.ref($M.92, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $0.ref);
    $M.92 := $store.ref($M.92, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.92 := $store.ref($M.92, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.92 := $store.ref($M.92, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.92 := $store.ref($M.92, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.92 := $store.ref($M.92, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.92 := $store.ref($M.92, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(112, 1)), $0.ref);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(120, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(296, 1)), 6);
    $M.15 := $store.ref($M.15, acm_table, $0.ref);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(1, 8)), $0.ref);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(2, 8)), $0.ref);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(3, 8)), $0.ref);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(4, 8)), $0.ref);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(5, 8)), $0.ref);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(6, 8)), $0.ref);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(7, 8)), $0.ref);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(8, 8)), $0.ref);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(9, 8)), $0.ref);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(10, 8)), $0.ref);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(11, 8)), $0.ref);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(12, 8)), $0.ref);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(13, 8)), $0.ref);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(14, 8)), $0.ref);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(15, 8)), $0.ref);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(16, 8)), $0.ref);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(17, 8)), $0.ref);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(18, 8)), $0.ref);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(19, 8)), $0.ref);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(20, 8)), $0.ref);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(21, 8)), $0.ref);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(22, 8)), $0.ref);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(23, 8)), $0.ref);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(24, 8)), $0.ref);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(25, 8)), $0.ref);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(26, 8)), $0.ref);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(27, 8)), $0.ref);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(28, 8)), $0.ref);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(29, 8)), $0.ref);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(30, 8)), $0.ref);
    $M.15 := $store.ref($M.15, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(31, 8)), $0.ref);
    $M.0 := $store.i32($M.0, acm_table_lock, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.21);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(acm_table_lock, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(acm_table_lock, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(112, 1)), acm_table_lock);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(24, 1)), .str.22);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i8($M.0, .str.21, 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 25)), $mul.ref(1, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 25)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 25)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 25)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 25)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 25)), $mul.ref(6, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 25)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 25)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 25)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 25)), $mul.ref(10, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 25)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 25)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 25)), $mul.ref(13, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 25)), $mul.ref(14, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 25)), $mul.ref(15, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 25)), $mul.ref(16, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 25)), $mul.ref(17, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 25)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 25)), $mul.ref(19, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 25)), $mul.ref(20, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 25)), $mul.ref(21, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 25)), $mul.ref(22, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 25)), $mul.ref(23, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, .str.22, 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(1, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(6, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(10, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(13, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.93 := $store.i8($M.93, .str, 37);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(.str, $mul.ref(0, 3)), $mul.ref(1, 1)), 100);
    $M.93 := $store.i8($M.93, $add.ref($add.ref(.str, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, .str.24, 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 4)), $mul.ref(1, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 4)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.25, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 7)), $mul.ref(1, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 7)), $mul.ref(2, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 7)), $mul.ref(3, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 7)), $mul.ref(4, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 7)), $mul.ref(5, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    call {:si_unique_call 1136} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 397205);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1137} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 398237);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 399269);

procedure devirtbounce.2(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.15, $M.11, $M.13, $M.17, $CurrAddr, $M.9, $M.10, assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i19 := $eq.ref(acm_port_destruct, $p0);
    assume {:branchcond $i19} true;
    goto $bb12, $bb23;

  $bb23:
    assume !($i19 == 1);
    $i18 := $eq.ref(acm_port_shutdown, $p0);
    assume {:branchcond $i18} true;
    goto $bb11, $bb22;

  $bb22:
    assume !($i18 == 1);
    $i17 := $eq.ref(acm_tty_hangup, $p0);
    assume true;
    goto $bb10, $bb21;

  $bb21:
    assume !($i17 == 1);
    $i16 := $eq.ref(acm_tty_unthrottle, $p0);
    assume {:branchcond $i16} true;
    goto $bb9, $bb20;

  $bb20:
    assume !($i16 == 1);
    $i15 := $eq.ref(acm_tty_throttle, $p0);
    assume {:branchcond $i15} true;
    goto $bb8, $bb19;

  $bb19:
    assume !($i15 == 1);
    $i14 := $eq.ref(acm_tty_cleanup, $p0);
    assume {:branchcond $i14} true;
    goto $bb7, $bb18;

  $bb18:
    assume !($i14 == 1);
    $i13 := $eq.ref(acm_ctrl_irq, $p0);
    assume {:branchcond $i13} true;
    goto $bb6, $bb17;

  $bb17:
    assume !($i13 == 1);
    $i12 := $eq.ref(acm_write_bulk, $p0);
    assume true;
    goto $bb5, $bb16;

  $bb16:
    assume !($i12 == 1);
    $i11 := $eq.ref(acm_read_bulk_callback, $p0);
    assume {:branchcond $i11} true;
    goto $bb4, $bb15;

  $bb15:
    assume !($i11 == 1);
    $i10 := $eq.ref(acm_softint, $p0);
    assume {:branchcond $i10} true;
    goto $bb3, $bb14;

  $bb14:
    assume !($i10 == 1);
    $i9 := $eq.ref(acm_disconnect, $p0);
    assume {:branchcond $i9} true;
    goto $bb2, $bb13;

  $bb13:
    assume !($i9 == 1);
    assume false;
    return;

  $bb2:
    assume $i9 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1138} acm_disconnect($p1);
    return;

  $bb3:
    assume $i10 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1139} acm_softint($p2);
    return;

  $bb4:
    assume $i11 == 1;
    call {:si_unique_call 1140} acm_read_bulk_callback(arg);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    return;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i12 == 1;
    call {:si_unique_call 1141} acm_write_bulk(arg);
    return;

  $bb6:
    assume $i13 == 1;
    call {:si_unique_call 1142} acm_ctrl_irq(arg);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    return;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i14 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1143} acm_tty_cleanup($p3);
    return;

  $bb8:
    assume $i15 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1144} acm_tty_throttle($p4);
    return;

  $bb9:
    assume $i16 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1145} acm_tty_unthrottle($p5);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    return;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i17 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1146} acm_tty_hangup($p6);
    return;

  $bb11:
    assume $i18 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1147} acm_port_shutdown($p7);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i19 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1148} acm_port_destruct($p8);
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 400301);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1149} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.18, $M.19, $M.20, $M.21, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.17, $M.41, $M.9, $M.10, $M.39, $M.40, $M.11, $M.13, $M.12, $M.14, $M.56, $M.0, $M.7, $M.91, $M.92, $M.15, $M.93, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1150} __SMACK_static_init();
    call {:si_unique_call 1151} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.31, $M.32, $M.19, $M.20, $M.21, $M.33, $M.15, $M.34, $M.35, $M.8, $M.37, $M.38, $M.18, $M.36, $M.17, $M.41, $M.9, $M.10, $M.39, $M.40, $M.11, $M.13, $M.12, $M.14, $M.56, $M.7, $M.91, $M.92, $M.93, $CurrAddr, $M.16;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation acm_probe_loop_$bb251(in_$i31: i32, in_$p489: ref, in_$i844: i64, in_$p846: ref, in_$p847: ref, in_$i848: i32, in_$i849: i1, in_$i843: i32) returns (out_$i844: i64, out_$p846: ref, out_$p847: ref, out_$i848: i32, out_$i849: i1, out_$i843: i32)
{

  entry:
    out_$i844, out_$p846, out_$p847, out_$i848, out_$i849, out_$i843 := in_$i844, in_$p846, in_$p847, in_$i848, in_$i849, in_$i843;
    goto $bb251, exit;

  $bb251:
    assume {:verifier.code 0} true;
    goto corral_source_split_1126;

  $bb253:
    assume out_$i849 == 1;
    assume {:verifier.code 0} true;
    out_$i843 := out_$i848;
    goto $bb253_dummy;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb253;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    out_$i849 := $slt.i32(out_$i848, in_$i31);
    goto corral_source_split_1133;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    out_$i848 := $add.i32(out_$i843, 1);
    call {:si_unique_call 183} {:cexpr "i"} boogie_si_record_i32(out_$i848);
    goto corral_source_split_1132;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} ldv_usb_free_urb_27(out_$p847);
    goto corral_source_split_1131;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    out_$p847 := $load.ref($M.0, out_$p846);
    goto corral_source_split_1130;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    out_$p846 := $add.ref($add.ref($add.ref(in_$p489, $mul.ref(0, 3008)), $mul.ref(1768, 1)), $mul.ref(out_$i844, 8));
    goto corral_source_split_1129;

  $bb252:
    assume {:verifier.code 0} true;
    out_$i844 := $sext.i32.i64(out_$i843);
    goto corral_source_split_1128;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb253_dummy:
    call {:si_unique_call 1} out_$i844, out_$p846, out_$p847, out_$i848, out_$i849, out_$i843 := acm_probe_loop_$bb251(in_$i31, in_$p489, out_$i844, out_$p846, out_$p847, out_$i848, out_$i849, out_$i843);
    return;

  exit:
    return;
}



procedure acm_probe_loop_$bb251(in_$i31: i32, in_$p489: ref, in_$i844: i64, in_$p846: ref, in_$p847: ref, in_$i848: i32, in_$i849: i1, in_$i843: i32) returns (out_$i844: i64, out_$p846: ref, out_$p847: ref, out_$i848: i32, out_$i849: i1, out_$i843: i32);
  modifies $M.10;



implementation {:SIextraRecBound 16} acm_probe_loop_$bb246(in_$p489: ref, in_$i836: i64, in_$p839: ref, in_$p840: ref, in_$i841: i32, in_$i842: i1, in_$i835: i32) returns (out_$i836: i64, out_$p839: ref, out_$p840: ref, out_$i841: i32, out_$i842: i1, out_$i835: i32)
{

  entry:
    out_$i836, out_$p839, out_$p840, out_$i841, out_$i842, out_$i835 := in_$i836, in_$p839, in_$p840, in_$i841, in_$i842, in_$i835;
    goto $bb246, exit;

  $bb246:
    assume {:verifier.code 0} true;
    goto corral_source_split_1117;

  $bb248:
    assume out_$i842 == 1;
    assume {:verifier.code 0} true;
    out_$i835 := out_$i841;
    goto $bb248_dummy;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    out_$i842 := $sle.i32(out_$i841, 15);
    goto corral_source_split_1124;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    out_$i841 := $add.i32(out_$i835, 1);
    call {:si_unique_call 181} {:cexpr "i"} boogie_si_record_i32(out_$i841);
    goto corral_source_split_1123;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} ldv_usb_free_urb_26(out_$p840);
    goto corral_source_split_1122;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    out_$p840 := $load.ref($M.0, out_$p839);
    goto corral_source_split_1121;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    out_$p839 := $add.ref($add.ref($add.ref($add.ref(in_$p489, $mul.ref(0, 3008)), $mul.ref(1120, 1)), $mul.ref(out_$i836, 40)), $mul.ref(24, 1));
    goto corral_source_split_1120;

  $bb247:
    assume {:verifier.code 0} true;
    out_$i836 := $sext.i32.i64(out_$i835);
    goto corral_source_split_1119;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb248_dummy:
    call {:si_unique_call 1} out_$i836, out_$p839, out_$p840, out_$i841, out_$i842, out_$i835 := acm_probe_loop_$bb246(in_$p489, out_$i836, out_$p839, out_$p840, out_$i841, out_$i842, out_$i835);
    return;

  exit:
    return;
}



procedure acm_probe_loop_$bb246(in_$p489: ref, in_$i836: i64, in_$p839: ref, in_$p840: ref, in_$i841: i32, in_$i842: i1, in_$i835: i32) returns (out_$i836: i64, out_$p839: ref, out_$p840: ref, out_$i841: i32, out_$i842: i1, out_$i835: i32);
  modifies $M.10;



implementation acm_probe_loop_$bb208(in_$p25: ref, in_$p352: ref, in_$p488: ref, in_$p489: ref, in_$p666: ref, in_$p667: ref, in_$i668: i64, in_$p669: ref, in_$p670: ref, in_$p671: ref, in_$p672: ref, in_$p673: ref, in_$i674: i64, in_$i675: i1, in_$i679: i32, in_$i680: i1, in_$p681: ref, in_$i682: i8, in_$i683: i32, in_$i684: i32, in_$p685: ref, in_$p686: ref, in_$i687: i32, in_$p688: ref, in_$i689: i32, in_$p690: ref, in_$p691: ref, in_$i692: i8, in_$i693: i32, in_$p694: ref, in_$i695: i8, in_$i696: i32, in_$i697: i32, in_$p698: ref, in_$p699: ref, in_$i700: i32, in_$p701: ref, in_$i702: i32, in_$p703: ref, in_$p704: ref, in_$p705: ref, in_$p706: ref, in_$i707: i32, in_$i708: i32, in_$p709: ref, in_$p710: ref, in_$p711: ref, in_$p712: ref, in_$i713: i32, in_$i714: i1, in_$i665: i32) returns (out_$p666: ref, out_$p667: ref, out_$i668: i64, out_$p669: ref, out_$p670: ref, out_$p671: ref, out_$p672: ref, out_$p673: ref, out_$i674: i64, out_$i675: i1, out_$i679: i32, out_$i680: i1, out_$p681: ref, out_$i682: i8, out_$i683: i32, out_$i684: i32, out_$p685: ref, out_$p686: ref, out_$i687: i32, out_$p688: ref, out_$i689: i32, out_$p690: ref, out_$p691: ref, out_$i692: i8, out_$i693: i32, out_$p694: ref, out_$i695: i8, out_$i696: i32, out_$i697: i32, out_$p698: ref, out_$p699: ref, out_$i700: i32, out_$p701: ref, out_$i702: i32, out_$p703: ref, out_$p704: ref, out_$p705: ref, out_$p706: ref, out_$i707: i32, out_$i708: i32, out_$p709: ref, out_$p710: ref, out_$p711: ref, out_$p712: ref, out_$i713: i32, out_$i714: i1, out_$i665: i32)
{

  entry:
    out_$p666, out_$p667, out_$i668, out_$p669, out_$p670, out_$p671, out_$p672, out_$p673, out_$i674, out_$i675, out_$i679, out_$i680, out_$p681, out_$i682, out_$i683, out_$i684, out_$p685, out_$p686, out_$i687, out_$p688, out_$i689, out_$p690, out_$p691, out_$i692, out_$i693, out_$p694, out_$i695, out_$i696, out_$i697, out_$p698, out_$p699, out_$i700, out_$p701, out_$i702, out_$p703, out_$p704, out_$p705, out_$p706, out_$i707, out_$i708, out_$p709, out_$p710, out_$p711, out_$p712, out_$i713, out_$i714, out_$i665 := in_$p666, in_$p667, in_$i668, in_$p669, in_$p670, in_$p671, in_$p672, in_$p673, in_$i674, in_$i675, in_$i679, in_$i680, in_$p681, in_$i682, in_$i683, in_$i684, in_$p685, in_$p686, in_$i687, in_$p688, in_$i689, in_$p690, in_$p691, in_$i692, in_$i693, in_$p694, in_$i695, in_$i696, in_$i697, in_$p698, in_$p699, in_$i700, in_$p701, in_$i702, in_$p703, in_$p704, in_$p705, in_$p706, in_$i707, in_$i708, in_$p709, in_$p710, in_$p711, in_$p712, in_$i713, in_$i714, in_$i665;
    goto $bb208, exit;

  $bb208:
    assume {:verifier.code 0} true;
    goto corral_source_split_886;

  $bb217:
    assume out_$i714 == 1;
    assume {:verifier.code 0} true;
    out_$i665 := out_$i713;
    goto $bb217_dummy;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    out_$i714 := $sle.i32(out_$i713, 15);
    goto corral_source_split_950;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    out_$i713 := $add.i32(out_$i665, 1);
    call {:si_unique_call 148} {:cexpr "i"} boogie_si_record_i32(out_$i713);
    goto corral_source_split_949;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p712, in_$p488);
    goto corral_source_split_948;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    out_$p712 := $add.ref($add.ref(out_$p667, $mul.ref(out_$i668, 40)), $mul.ref(32, 1));
    goto corral_source_split_947;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p711, out_$i708);
    goto corral_source_split_946;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    out_$p711 := $add.ref($add.ref(out_$p710, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_945;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    out_$p710 := $load.ref($M.0, out_$p709);
    goto corral_source_split_944;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    out_$p709 := $add.ref($add.ref(out_$p667, $mul.ref(out_$i668, 40)), $mul.ref(24, 1));
    goto corral_source_split_943;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    out_$i708 := $or.i32(out_$i707, 4);
    goto corral_source_split_942;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    out_$i707 := $load.i32($M.0, out_$p706);
    goto corral_source_split_941;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    out_$p706 := $add.ref($add.ref(out_$p705, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_940;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    out_$p705 := $load.ref($M.0, out_$p704);
    goto corral_source_split_939;

  $bb216:
    assume {:verifier.code 0} true;
    out_$p704 := $add.ref($add.ref(out_$p667, $mul.ref(out_$i668, 40)), $mul.ref(24, 1));
    goto corral_source_split_938;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} ldv_usb_fill_bulk_urb_18(out_$p699, in_$p25, out_$i700, $0.ref, out_$i702, acm_write_bulk, out_$p703);
    assume {:verifier.code 0} true;
    goto $bb216;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    goto $bb216;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} ldv_usb_fill_int_urb_17(out_$p686, in_$p25, out_$i687, $0.ref, out_$i689, acm_write_bulk, out_$p690, out_$i693);
    goto corral_source_split_924;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    out_$i693 := $zext.i8.i32(out_$i692);
    goto corral_source_split_923;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    out_$i692 := $load.i8($M.0, out_$p691);
    goto corral_source_split_922;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    out_$p691 := $add.ref($add.ref(in_$p352, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_921;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    out_$p690 := $bitcast.ref.ref(out_$p669);
    goto corral_source_split_920;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    out_$i689 := $load.i32($M.0, out_$p688);
    goto corral_source_split_919;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    out_$p688 := $add.ref($add.ref(in_$p489, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_918;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    out_$i687 := $or.i32(out_$i684, 1073741824);
    goto corral_source_split_917;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    out_$p686 := $load.ref($M.0, out_$p685);
    goto corral_source_split_916;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    out_$p685 := $add.ref($add.ref(out_$p667, $mul.ref(out_$i668, 40)), $mul.ref(24, 1));
    goto corral_source_split_915;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} out_$i684 := __create_pipe(in_$p25, out_$i683);
    call {:si_unique_call 143} {:cexpr "tmp___23"} boogie_si_record_i32(out_$i684);
    goto corral_source_split_914;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    out_$i683 := $zext.i8.i32(out_$i682);
    goto corral_source_split_913;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    out_$i682 := $load.i8($M.0, out_$p681);
    goto corral_source_split_912;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    out_$p681 := $add.ref($add.ref(in_$p352, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_911;

  $bb214:
    assume out_$i680 == 1;
    goto corral_source_split_910;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    out_$i680 := $ne.i32(out_$i679, 0);
    goto corral_source_split_908;

  $bb213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} out_$i679 := usb_endpoint_xfer_int(in_$p352);
    call {:si_unique_call 141} {:cexpr "tmp___25"} boogie_si_record_i32(out_$i679);
    goto corral_source_split_907;

  $bb211:
    assume !(out_$i675 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    out_$i675 := $eq.i64(out_$i674, 0);
    goto corral_source_split_898;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    out_$i674 := $p2i.ref.i64(out_$p673);
    goto corral_source_split_897;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    out_$p673 := $load.ref($M.0, out_$p672);
    goto corral_source_split_896;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    out_$p672 := $add.ref($add.ref(out_$p667, $mul.ref(out_$i668, 40)), $mul.ref(24, 1));
    goto corral_source_split_895;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p671, out_$p670);
    goto corral_source_split_894;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    out_$p671 := $add.ref($add.ref(out_$p667, $mul.ref(out_$i668, 40)), $mul.ref(24, 1));
    goto corral_source_split_893;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} out_$p670 := ldv_usb_alloc_urb_19(0, 208);
    goto corral_source_split_892;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    out_$p669 := $add.ref(out_$p667, $mul.ref(out_$i668, 40));
    goto corral_source_split_891;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    out_$i668 := $sext.i32.i64(out_$i665);
    goto corral_source_split_890;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    out_$p667 := $bitcast.ref.ref(out_$p666);
    goto corral_source_split_889;

  $bb209:
    assume {:verifier.code 0} true;
    out_$p666 := $add.ref($add.ref(in_$p489, $mul.ref(0, 3008)), $mul.ref(1120, 1));
    goto corral_source_split_888;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    goto $bb209;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    out_$p703 := $bitcast.ref.ref(out_$p669);
    goto corral_source_split_936;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    out_$i702 := $load.i32($M.0, out_$p701);
    goto corral_source_split_935;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    out_$p701 := $add.ref($add.ref(in_$p489, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_934;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    out_$i700 := $or.i32(out_$i697, $sub.i32(0, 1073741824));
    goto corral_source_split_933;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    out_$p699 := $load.ref($M.0, out_$p698);
    goto corral_source_split_932;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    out_$p698 := $add.ref($add.ref(out_$p667, $mul.ref(out_$i668, 40)), $mul.ref(24, 1));
    goto corral_source_split_931;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} out_$i697 := __create_pipe(in_$p25, out_$i696);
    call {:si_unique_call 146} {:cexpr "tmp___24"} boogie_si_record_i32(out_$i697);
    goto corral_source_split_930;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    out_$i696 := $zext.i8.i32(out_$i695);
    goto corral_source_split_929;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    out_$i695 := $load.i8($M.0, out_$p694);
    goto corral_source_split_928;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    out_$p694 := $add.ref($add.ref(in_$p352, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_927;

  $bb215:
    assume !(out_$i680 == 1);
    goto corral_source_split_926;

  $bb217_dummy:
    call {:si_unique_call 1} out_$p666, out_$p667, out_$i668, out_$p669, out_$p670, out_$p671, out_$p672, out_$p673, out_$i674, out_$i675, out_$i679, out_$i680, out_$p681, out_$i682, out_$i683, out_$i684, out_$p685, out_$p686, out_$i687, out_$p688, out_$i689, out_$p690, out_$p691, out_$i692, out_$i693, out_$p694, out_$i695, out_$i696, out_$i697, out_$p698, out_$p699, out_$i700, out_$p701, out_$i702, out_$p703, out_$p704, out_$p705, out_$p706, out_$i707, out_$i708, out_$p709, out_$p710, out_$p711, out_$p712, out_$i713, out_$i714, out_$i665 := acm_probe_loop_$bb208(in_$p25, in_$p352, in_$p488, in_$p489, out_$p666, out_$p667, out_$i668, out_$p669, out_$p670, out_$p671, out_$p672, out_$p673, out_$i674, out_$i675, out_$i679, out_$i680, out_$p681, out_$i682, out_$i683, out_$i684, out_$p685, out_$p686, out_$i687, out_$p688, out_$i689, out_$p690, out_$p691, out_$i692, out_$i693, out_$p694, out_$i695, out_$i696, out_$i697, out_$p698, out_$p699, out_$i700, out_$p701, out_$i702, out_$p703, out_$p704, out_$p705, out_$p706, out_$i707, out_$i708, out_$p709, out_$p710, out_$p711, out_$p712, out_$i713, out_$i714, out_$i665);
    return;

  exit:
    return;
}



procedure acm_probe_loop_$bb208(in_$p25: ref, in_$p352: ref, in_$p488: ref, in_$p489: ref, in_$p666: ref, in_$p667: ref, in_$i668: i64, in_$p669: ref, in_$p670: ref, in_$p671: ref, in_$p672: ref, in_$p673: ref, in_$i674: i64, in_$i675: i1, in_$i679: i32, in_$i680: i1, in_$p681: ref, in_$i682: i8, in_$i683: i32, in_$i684: i32, in_$p685: ref, in_$p686: ref, in_$i687: i32, in_$p688: ref, in_$i689: i32, in_$p690: ref, in_$p691: ref, in_$i692: i8, in_$i693: i32, in_$p694: ref, in_$i695: i8, in_$i696: i32, in_$i697: i32, in_$p698: ref, in_$p699: ref, in_$i700: i32, in_$p701: ref, in_$i702: i32, in_$p703: ref, in_$p704: ref, in_$p705: ref, in_$p706: ref, in_$i707: i32, in_$i708: i32, in_$p709: ref, in_$p710: ref, in_$p711: ref, in_$p712: ref, in_$i713: i32, in_$i714: i1, in_$i665: i32) returns (out_$p666: ref, out_$p667: ref, out_$i668: i64, out_$p669: ref, out_$p670: ref, out_$p671: ref, out_$p672: ref, out_$p673: ref, out_$i674: i64, out_$i675: i1, out_$i679: i32, out_$i680: i1, out_$p681: ref, out_$i682: i8, out_$i683: i32, out_$i684: i32, out_$p685: ref, out_$p686: ref, out_$i687: i32, out_$p688: ref, out_$i689: i32, out_$p690: ref, out_$p691: ref, out_$i692: i8, out_$i693: i32, out_$p694: ref, out_$i695: i8, out_$i696: i32, out_$i697: i32, out_$p698: ref, out_$p699: ref, out_$i700: i32, out_$p701: ref, out_$i702: i32, out_$p703: ref, out_$p704: ref, out_$p705: ref, out_$p706: ref, out_$i707: i32, out_$i708: i32, out_$p709: ref, out_$p710: ref, out_$p711: ref, out_$p712: ref, out_$i713: i32, out_$i714: i1, out_$i665: i32);
  modifies $M.0, $M.14, $M.13, $M.12, $M.11, $M.10;



implementation acm_probe_loop_$bb193(in_$i31: i32, in_$p488: ref, in_$p489: ref, in_$i504: i32, in_$p601: ref, in_$p602: ref, in_$i603: i64, in_$p604: ref, in_$p605: ref, in_$p606: ref, in_$i607: i64, in_$p608: ref, in_$p609: ref, in_$p610: ref, in_$p611: ref, in_$p612: ref, in_$i613: i64, in_$i614: i1, in_$p618: ref, in_$p619: ref, in_$p620: ref, in_$i621: i64, in_$i622: i1, in_$p625: ref, in_$i626: i32, in_$i627: i32, in_$p628: ref, in_$p629: ref, in_$i630: i64, in_$p631: ref, in_$p632: ref, in_$p633: ref, in_$i634: i8, in_$i635: i32, in_$i636: i1, in_$p637: ref, in_$p638: ref, in_$p639: ref, in_$i640: i32, in_$p641: ref, in_$p642: ref, in_$p643: ref, in_$i644: i32, in_$p645: ref, in_$p646: ref, in_$i647: i8, in_$i648: i32, in_$p649: ref, in_$p650: ref, in_$p651: ref, in_$i652: i32, in_$p653: ref, in_$p654: ref, in_$p655: ref, in_$i656: i32, in_$p657: ref, in_$i658: i64, in_$p660: ref, in_$i661: i64, in_$p662: ref, in_$i663: i32, in_$i664: i1, in_$i600: i32) returns (out_$p601: ref, out_$p602: ref, out_$i603: i64, out_$p604: ref, out_$p605: ref, out_$p606: ref, out_$i607: i64, out_$p608: ref, out_$p609: ref, out_$p610: ref, out_$p611: ref, out_$p612: ref, out_$i613: i64, out_$i614: i1, out_$p618: ref, out_$p619: ref, out_$p620: ref, out_$i621: i64, out_$i622: i1, out_$p625: ref, out_$i626: i32, out_$i627: i32, out_$p628: ref, out_$p629: ref, out_$i630: i64, out_$p631: ref, out_$p632: ref, out_$p633: ref, out_$i634: i8, out_$i635: i32, out_$i636: i1, out_$p637: ref, out_$p638: ref, out_$p639: ref, out_$i640: i32, out_$p641: ref, out_$p642: ref, out_$p643: ref, out_$i644: i32, out_$p645: ref, out_$p646: ref, out_$i647: i8, out_$i648: i32, out_$p649: ref, out_$p650: ref, out_$p651: ref, out_$i652: i32, out_$p653: ref, out_$p654: ref, out_$p655: ref, out_$i656: i32, out_$p657: ref, out_$i658: i64, out_$p660: ref, out_$i661: i64, out_$p662: ref, out_$i663: i32, out_$i664: i1, out_$i600: i32)
{

  entry:
    out_$p601, out_$p602, out_$i603, out_$p604, out_$p605, out_$p606, out_$i607, out_$p608, out_$p609, out_$p610, out_$p611, out_$p612, out_$i613, out_$i614, out_$p618, out_$p619, out_$p620, out_$i621, out_$i622, out_$p625, out_$i626, out_$i627, out_$p628, out_$p629, out_$i630, out_$p631, out_$p632, out_$p633, out_$i634, out_$i635, out_$i636, out_$p637, out_$p638, out_$p639, out_$i640, out_$p641, out_$p642, out_$p643, out_$i644, out_$p645, out_$p646, out_$i647, out_$i648, out_$p649, out_$p650, out_$p651, out_$i652, out_$p653, out_$p654, out_$p655, out_$i656, out_$p657, out_$i658, out_$p660, out_$i661, out_$p662, out_$i663, out_$i664, out_$i600 := in_$p601, in_$p602, in_$i603, in_$p604, in_$p605, in_$p606, in_$i607, in_$p608, in_$p609, in_$p610, in_$p611, in_$p612, in_$i613, in_$i614, in_$p618, in_$p619, in_$p620, in_$i621, in_$i622, in_$p625, in_$i626, in_$i627, in_$p628, in_$p629, in_$i630, in_$p631, in_$p632, in_$p633, in_$i634, in_$i635, in_$i636, in_$p637, in_$p638, in_$p639, in_$i640, in_$p641, in_$p642, in_$p643, in_$i644, in_$p645, in_$p646, in_$i647, in_$i648, in_$p649, in_$p650, in_$p651, in_$i652, in_$p653, in_$p654, in_$p655, in_$i656, in_$p657, in_$i658, in_$p660, in_$i661, in_$p662, in_$i663, in_$i664, in_$i600;
    goto $bb193, exit;

  $bb193:
    assume {:verifier.code 0} true;
    goto corral_source_split_800;

  $bb205:
    assume out_$i664 == 1;
    assume {:verifier.code 0} true;
    out_$i600 := out_$i663;
    goto $bb205_dummy;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    out_$i664 := $slt.i32(out_$i663, in_$i31);
    goto corral_source_split_884;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    out_$i663 := $add.i32(out_$i600, 1);
    call {:si_unique_call 136} {:cexpr "i"} boogie_si_record_i32(out_$i663);
    goto corral_source_split_883;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} __set_bit(out_$i661, out_$p662);
    goto corral_source_split_882;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    out_$p662 := $add.ref($add.ref(in_$p489, $mul.ref(0, 3008)), $mul.ref(1760, 1));
    goto corral_source_split_881;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    out_$i661 := $sext.i32.i64(out_$i600);
    goto corral_source_split_880;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p660, out_$p620);
    goto corral_source_split_879;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    out_$p660 := $add.ref($add.ref($add.ref(in_$p489, $mul.ref(0, 3008)), $mul.ref(1768, 1)), $mul.ref(out_$i658, 8));
    goto corral_source_split_878;

  $bb204:
    assume {:verifier.code 0} true;
    out_$i658 := $sext.i32.i64(out_$i600);
    goto corral_source_split_877;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} ldv_usb_fill_bulk_urb_18(out_$p620, out_$p650, out_$i652, out_$p654, out_$i656, acm_read_bulk_callback, out_$p657);
    assume {:verifier.code 0} true;
    goto $bb204;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    goto $bb204;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} ldv_usb_fill_int_urb_17(out_$p620, out_$p638, out_$i640, out_$p642, out_$i644, acm_read_bulk_callback, out_$p645, out_$i648);
    goto corral_source_split_864;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    out_$i648 := $zext.i8.i32(out_$i647);
    goto corral_source_split_863;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    out_$i647 := $load.i8($M.0, out_$p646);
    goto corral_source_split_862;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    out_$p646 := $add.ref($add.ref(in_$p489, $mul.ref(0, 3008)), $mul.ref(2997, 1));
    goto corral_source_split_861;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    out_$p645 := $bitcast.ref.ref(out_$p604);
    goto corral_source_split_860;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    out_$i644 := $load.i32($M.0, out_$p643);
    goto corral_source_split_859;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    out_$p643 := $add.ref($add.ref(in_$p489, $mul.ref(0, 3008)), $mul.ref(2972, 1));
    goto corral_source_split_858;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    out_$p642 := $load.ref($M.0, out_$p641);
    goto corral_source_split_857;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    out_$p641 := $add.ref($add.ref(out_$p602, $mul.ref(out_$i603, 40)), $mul.ref(8, 1));
    goto corral_source_split_856;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    out_$i640 := $load.i32($M.0, out_$p639);
    goto corral_source_split_855;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    out_$p639 := $add.ref($add.ref(in_$p489, $mul.ref(0, 3008)), $mul.ref(2540, 1));
    goto corral_source_split_854;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    out_$p638 := $load.ref($M.0, out_$p637);
    goto corral_source_split_853;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    out_$p637 := $add.ref($add.ref(in_$p489, $mul.ref(0, 3008)), $mul.ref(0, 1));
    goto corral_source_split_852;

  $bb202:
    assume out_$i636 == 1;
    goto corral_source_split_851;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    out_$i636 := $ne.i32(out_$i635, 0);
    goto corral_source_split_849;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    out_$i635 := $zext.i8.i32(out_$i634);
    goto corral_source_split_848;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    out_$i634 := $load.i8($M.0, out_$p633);
    goto corral_source_split_847;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    out_$p633 := $add.ref(out_$p632, $mul.ref(2988, 1));
    goto corral_source_split_846;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    out_$p632 := $bitcast.ref.ref(in_$p489);
    goto corral_source_split_845;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p631, out_$i630);
    goto corral_source_split_844;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    out_$p631 := $add.ref($add.ref(out_$p620, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_843;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    out_$i630 := $load.i64($M.0, out_$p629);
    goto corral_source_split_842;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    out_$p629 := $add.ref($add.ref(out_$p602, $mul.ref(out_$i603, 40)), $mul.ref(16, 1));
    goto corral_source_split_841;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p628, out_$i627);
    goto corral_source_split_840;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    out_$p628 := $add.ref($add.ref(out_$p620, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_839;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    out_$i627 := $or.i32(out_$i626, 4);
    goto corral_source_split_838;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    out_$i626 := $load.i32($M.0, out_$p625);
    goto corral_source_split_837;

  $bb201:
    assume {:verifier.code 0} true;
    out_$p625 := $add.ref($add.ref(out_$p620, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_836;

  $bb200:
    assume !(out_$i622 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    out_$i622 := $eq.i64(out_$i621, 0);
    goto corral_source_split_830;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    out_$i621 := $p2i.ref.i64(out_$p620);
    goto corral_source_split_829;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} out_$p620 := ldv_usb_alloc_urb_16(0, 208);
    goto corral_source_split_828;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p619, in_$p488);
    goto corral_source_split_827;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    out_$p619 := $add.ref($add.ref(out_$p602, $mul.ref(out_$i603, 40)), $mul.ref(32, 1));
    goto corral_source_split_826;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p618, out_$i600);
    goto corral_source_split_825;

  $bb198:
    assume {:verifier.code 0} true;
    out_$p618 := $add.ref($add.ref(out_$p602, $mul.ref(out_$i603, 40)), $mul.ref(24, 1));
    goto corral_source_split_824;

  $bb196:
    assume !(out_$i614 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    out_$i614 := $eq.i64(out_$i613, 0);
    goto corral_source_split_816;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    out_$i613 := $p2i.ref.i64(out_$p612);
    goto corral_source_split_815;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    out_$p612 := $load.ref($M.0, out_$p611);
    goto corral_source_split_814;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    out_$p611 := $add.ref($add.ref(out_$p602, $mul.ref(out_$i603, 40)), $mul.ref(8, 1));
    goto corral_source_split_813;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p610, out_$p609);
    goto corral_source_split_812;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    out_$p610 := $add.ref($add.ref(out_$p602, $mul.ref(out_$i603, 40)), $mul.ref(8, 1));
    goto corral_source_split_811;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} out_$p609 := usb_alloc_coherent(out_$p606, out_$i607, 208, out_$p608);
    goto corral_source_split_810;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    out_$p608 := $add.ref($add.ref(out_$p602, $mul.ref(out_$i603, 40)), $mul.ref(16, 1));
    goto corral_source_split_809;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    out_$i607 := $sext.i32.i64(in_$i504);
    goto corral_source_split_808;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    out_$p606 := $load.ref($M.0, out_$p605);
    goto corral_source_split_807;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    out_$p605 := $add.ref($add.ref(in_$p489, $mul.ref(0, 3008)), $mul.ref(0, 1));
    goto corral_source_split_806;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    out_$p604 := $add.ref(out_$p602, $mul.ref(out_$i603, 40));
    goto corral_source_split_805;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    out_$i603 := $sext.i32.i64(out_$i600);
    goto corral_source_split_804;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    out_$p602 := $bitcast.ref.ref(out_$p601);
    goto corral_source_split_803;

  $bb194:
    assume {:verifier.code 0} true;
    out_$p601 := $add.ref($add.ref(in_$p489, $mul.ref(0, 3008)), $mul.ref(1896, 1));
    goto corral_source_split_802;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    goto $bb194;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    out_$p657 := $bitcast.ref.ref(out_$p604);
    goto corral_source_split_875;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    out_$i656 := $load.i32($M.0, out_$p655);
    goto corral_source_split_874;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    out_$p655 := $add.ref($add.ref(in_$p489, $mul.ref(0, 3008)), $mul.ref(2972, 1));
    goto corral_source_split_873;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    out_$p654 := $load.ref($M.0, out_$p653);
    goto corral_source_split_872;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    out_$p653 := $add.ref($add.ref(out_$p602, $mul.ref(out_$i603, 40)), $mul.ref(8, 1));
    goto corral_source_split_871;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    out_$i652 := $load.i32($M.0, out_$p651);
    goto corral_source_split_870;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    out_$p651 := $add.ref($add.ref(in_$p489, $mul.ref(0, 3008)), $mul.ref(2540, 1));
    goto corral_source_split_869;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    out_$p650 := $load.ref($M.0, out_$p649);
    goto corral_source_split_868;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    out_$p649 := $add.ref($add.ref(in_$p489, $mul.ref(0, 3008)), $mul.ref(0, 1));
    goto corral_source_split_867;

  $bb203:
    assume !(out_$i636 == 1);
    goto corral_source_split_866;

  $bb205_dummy:
    call {:si_unique_call 1} out_$p601, out_$p602, out_$i603, out_$p604, out_$p605, out_$p606, out_$i607, out_$p608, out_$p609, out_$p610, out_$p611, out_$p612, out_$i613, out_$i614, out_$p618, out_$p619, out_$p620, out_$i621, out_$i622, out_$p625, out_$i626, out_$i627, out_$p628, out_$p629, out_$i630, out_$p631, out_$p632, out_$p633, out_$i634, out_$i635, out_$i636, out_$p637, out_$p638, out_$p639, out_$i640, out_$p641, out_$p642, out_$p643, out_$i644, out_$p645, out_$p646, out_$i647, out_$i648, out_$p649, out_$p650, out_$p651, out_$i652, out_$p653, out_$p654, out_$p655, out_$i656, out_$p657, out_$i658, out_$p660, out_$i661, out_$p662, out_$i663, out_$i664, out_$i600 := acm_probe_loop_$bb193(in_$i31, in_$p488, in_$p489, in_$i504, out_$p601, out_$p602, out_$i603, out_$p604, out_$p605, out_$p606, out_$i607, out_$p608, out_$p609, out_$p610, out_$p611, out_$p612, out_$i613, out_$i614, out_$p618, out_$p619, out_$p620, out_$i621, out_$i622, out_$p625, out_$i626, out_$i627, out_$p628, out_$p629, out_$i630, out_$p631, out_$p632, out_$p633, out_$i634, out_$i635, out_$i636, out_$p637, out_$p638, out_$p639, out_$i640, out_$p641, out_$p642, out_$p643, out_$i644, out_$p645, out_$p646, out_$i647, out_$i648, out_$p649, out_$p650, out_$p651, out_$i652, out_$p653, out_$p654, out_$p655, out_$i656, out_$p657, out_$i658, out_$p660, out_$i661, out_$p662, out_$i663, out_$i664, out_$i600);
    return;

  exit:
    return;
}



procedure acm_probe_loop_$bb193(in_$i31: i32, in_$p488: ref, in_$p489: ref, in_$i504: i32, in_$p601: ref, in_$p602: ref, in_$i603: i64, in_$p604: ref, in_$p605: ref, in_$p606: ref, in_$i607: i64, in_$p608: ref, in_$p609: ref, in_$p610: ref, in_$p611: ref, in_$p612: ref, in_$i613: i64, in_$i614: i1, in_$p618: ref, in_$p619: ref, in_$p620: ref, in_$i621: i64, in_$i622: i1, in_$p625: ref, in_$i626: i32, in_$i627: i32, in_$p628: ref, in_$p629: ref, in_$i630: i64, in_$p631: ref, in_$p632: ref, in_$p633: ref, in_$i634: i8, in_$i635: i32, in_$i636: i1, in_$p637: ref, in_$p638: ref, in_$p639: ref, in_$i640: i32, in_$p641: ref, in_$p642: ref, in_$p643: ref, in_$i644: i32, in_$p645: ref, in_$p646: ref, in_$i647: i8, in_$i648: i32, in_$p649: ref, in_$p650: ref, in_$p651: ref, in_$i652: i32, in_$p653: ref, in_$p654: ref, in_$p655: ref, in_$i656: i32, in_$p657: ref, in_$i658: i64, in_$p660: ref, in_$i661: i64, in_$p662: ref, in_$i663: i32, in_$i664: i1, in_$i600: i32) returns (out_$p601: ref, out_$p602: ref, out_$i603: i64, out_$p604: ref, out_$p605: ref, out_$p606: ref, out_$i607: i64, out_$p608: ref, out_$p609: ref, out_$p610: ref, out_$p611: ref, out_$p612: ref, out_$i613: i64, out_$i614: i1, out_$p618: ref, out_$p619: ref, out_$p620: ref, out_$i621: i64, out_$i622: i1, out_$p625: ref, out_$i626: i32, out_$i627: i32, out_$p628: ref, out_$p629: ref, out_$i630: i64, out_$p631: ref, out_$p632: ref, out_$p633: ref, out_$i634: i8, out_$i635: i32, out_$i636: i1, out_$p637: ref, out_$p638: ref, out_$p639: ref, out_$i640: i32, out_$p641: ref, out_$p642: ref, out_$p643: ref, out_$i644: i32, out_$p645: ref, out_$p646: ref, out_$i647: i8, out_$i648: i32, out_$p649: ref, out_$p650: ref, out_$p651: ref, out_$i652: i32, out_$p653: ref, out_$p654: ref, out_$p655: ref, out_$i656: i32, out_$p657: ref, out_$i658: i64, out_$p660: ref, out_$i661: i64, out_$p662: ref, out_$i663: i32, out_$i664: i1, out_$i600: i32);
  modifies $M.0, $M.14, $M.13, $M.12, $M.11, $M.10;



implementation acm_probe_loop_$bb106(in_$p247: ref, in_$p321: ref, in_$p322: ref, in_$p323: ref, in_$p324: ref, in_$i325: i64, in_$p327: ref, in_$i328: i32, in_$i329: i1, in_$i333: i32, in_$i334: i1, in_$i337: i32, in_$i338: i1, in_$p335: ref, in_$p336: ref, in_$p330: ref, in_$p331: ref, in_$p332: ref, in_$i339: i32, in_$i340: i1, in_$p317: ref, in_$p318: ref, in_$p319: ref, in_$i320: i32, in_$p341: ref, in_$p342: ref, in_$p343: ref) returns (out_$p321: ref, out_$p322: ref, out_$p323: ref, out_$p324: ref, out_$i325: i64, out_$p327: ref, out_$i328: i32, out_$i329: i1, out_$i333: i32, out_$i334: i1, out_$i337: i32, out_$i338: i1, out_$p335: ref, out_$p336: ref, out_$p330: ref, out_$p331: ref, out_$p332: ref, out_$i339: i32, out_$i340: i1, out_$p317: ref, out_$p318: ref, out_$p319: ref, out_$i320: i32, out_$p341: ref, out_$p342: ref, out_$p343: ref)
{

  entry:
    out_$p321, out_$p322, out_$p323, out_$p324, out_$i325, out_$p327, out_$i328, out_$i329, out_$i333, out_$i334, out_$i337, out_$i338, out_$p335, out_$p336, out_$p330, out_$p331, out_$p332, out_$i339, out_$i340, out_$p317, out_$p318, out_$p319, out_$i320, out_$p341, out_$p342, out_$p343 := in_$p321, in_$p322, in_$p323, in_$p324, in_$i325, in_$p327, in_$i328, in_$i329, in_$i333, in_$i334, in_$i337, in_$i338, in_$p335, in_$p336, in_$p330, in_$p331, in_$p332, in_$i339, in_$i340, in_$p317, in_$p318, in_$p319, in_$i320, in_$p341, in_$p342, in_$p343;
    goto $bb106, exit;

  $bb106:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_413;

  $bb117:
    assume out_$i340 == 1;
    assume {:verifier.code 0} true;
    out_$p317, out_$p318, out_$p319, out_$i320 := out_$p332, out_$p331, out_$p330, out_$i339;
    goto $bb117_dummy;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    out_$p341, out_$p342, out_$p343 := out_$p330, out_$p331, out_$p332;
    assume true;
    goto $bb117;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    out_$i340 := $sle.i32(out_$i339, 2);
    goto corral_source_split_433;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    out_$i339 := $add.i32(out_$i320, 1);
    call {:si_unique_call 72} {:cexpr "i"} boogie_si_record_i32(out_$i339);
    goto corral_source_split_432;

  $bb110:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_431;

  $bb113:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p330, out_$p331, out_$p332 := out_$p335, out_$p336, out_$p317;
    goto $bb110;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    out_$p330, out_$p331, out_$p332 := out_$p319, out_$p318, out_$p327;
    goto $bb110;

  $bb108:
    assume out_$i329 == 1;
    goto corral_source_split_425;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    out_$i329 := $ne.i32(out_$i328, 0);
    goto corral_source_split_423;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} out_$i328 := usb_endpoint_is_int_in(out_$p327);
    call {:si_unique_call 69} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i328);
    goto corral_source_split_422;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    out_$p327 := $add.ref($add.ref(out_$p324, $mul.ref(out_$i325, 64)), $mul.ref(0, 1));
    goto corral_source_split_421;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    goto corral_source_split_420;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    out_$i325 := $sext.i32.i64(out_$i320);
    goto corral_source_split_419;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    out_$p324 := $load.ref($M.0, out_$p323);
    goto corral_source_split_418;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    out_$p323 := $add.ref($add.ref(out_$p322, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_417;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    out_$p322 := $load.ref($M.0, out_$p321);
    goto corral_source_split_416;

  $bb107:
    assume {:verifier.code 0} true;
    out_$p321 := $add.ref($add.ref(in_$p247, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_415;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb116:
    assume {:verifier.code 0} true;
    out_$p335, out_$p336 := out_$p319, out_$p327;
    goto $bb113;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    out_$p335, out_$p336 := out_$p327, out_$p318;
    goto $bb113;

  $bb111:
    assume out_$i334 == 1;
    goto corral_source_split_435;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    out_$i334 := $ne.i32(out_$i333, 0);
    goto corral_source_split_429;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} out_$i333 := usb_endpoint_is_bulk_out(out_$p327);
    call {:si_unique_call 71} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i333);
    goto corral_source_split_428;

  $bb109:
    assume !(out_$i329 == 1);
    goto corral_source_split_427;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb114:
    assume out_$i338 == 1;
    goto corral_source_split_441;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    out_$i338 := $ne.i32(out_$i337, 0);
    goto corral_source_split_439;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} out_$i337 := usb_endpoint_is_bulk_in(out_$p327);
    call {:si_unique_call 74} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i337);
    goto corral_source_split_438;

  $bb112:
    assume !(out_$i334 == 1);
    goto corral_source_split_437;

  $bb117_dummy:
    call {:si_unique_call 1} out_$p321, out_$p322, out_$p323, out_$p324, out_$i325, out_$p327, out_$i328, out_$i329, out_$i333, out_$i334, out_$i337, out_$i338, out_$p335, out_$p336, out_$p330, out_$p331, out_$p332, out_$i339, out_$i340, out_$p317, out_$p318, out_$p319, out_$i320, out_$p341, out_$p342, out_$p343 := acm_probe_loop_$bb106(in_$p247, out_$p321, out_$p322, out_$p323, out_$p324, out_$i325, out_$p327, out_$i328, out_$i329, out_$i333, out_$i334, out_$i337, out_$i338, out_$p335, out_$p336, out_$p330, out_$p331, out_$p332, out_$i339, out_$i340, out_$p317, out_$p318, out_$p319, out_$i320, out_$p341, out_$p342, out_$p343);
    return;

  exit:
    return;
}



procedure acm_probe_loop_$bb106(in_$p247: ref, in_$p321: ref, in_$p322: ref, in_$p323: ref, in_$p324: ref, in_$i325: i64, in_$p327: ref, in_$i328: i32, in_$i329: i1, in_$i333: i32, in_$i334: i1, in_$i337: i32, in_$i338: i1, in_$p335: ref, in_$p336: ref, in_$p330: ref, in_$p331: ref, in_$p332: ref, in_$i339: i32, in_$i340: i1, in_$p317: ref, in_$p318: ref, in_$p319: ref, in_$i320: i32, in_$p341: ref, in_$p342: ref, in_$p343: ref) returns (out_$p321: ref, out_$p322: ref, out_$p323: ref, out_$p324: ref, out_$i325: i64, out_$p327: ref, out_$i328: i32, out_$i329: i1, out_$i333: i32, out_$i334: i1, out_$i337: i32, out_$i338: i1, out_$p335: ref, out_$p336: ref, out_$p330: ref, out_$p331: ref, out_$p332: ref, out_$i339: i32, out_$i340: i1, out_$p317: ref, out_$p318: ref, out_$p319: ref, out_$i320: i32, out_$p341: ref, out_$p342: ref, out_$p343: ref);



implementation acm_probe_loop_$bb29(in_$p0: ref, in_$p3: ref, in_$i27: i64, in_$p110: ref, in_$i111: i8, in_$i112: i32, in_$i113: i1, in_$p114: ref, in_$p121: ref, in_$i122: i8, in_$i123: i32, in_$i124: i1, in_$i125: i1, in_$i126: i1, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i64, in_$i132: i1, in_$p133: ref, in_$p142: ref, in_$i143: i8, in_$p144: ref, in_$i145: i8, in_$p146: ref, in_$i147: i8, in_$i148: i32, in_$i149: i64, in_$i150: i1, in_$i151: i32, in_$i152: i32, in_$i153: i1, in_$p154: ref, in_$p156: ref, in_$p157: ref, in_$p158: ref, in_$p159: ref, in_$p160: ref, in_$p161: ref, in_$i162: i24, in_$i163: i24, in_$i164: i24, in_$p165: ref, in_$p166: ref, in_$i167: i8, in_$i168: i64, in_$i169: i64, in_$i170: i64, in_$i171: i1, in_$p172: ref, in_$p173: ref, in_$i174: i8, in_$i175: i32, in_$i176: i8, in_$i177: i32, in_$p136: ref, in_$i137: i8, in_$i138: i32, in_$p139: ref, in_$p140: ref, in_$p116: ref, in_$i117: i8, in_$i118: i32, in_$p119: ref, in_$p120: ref, in_$i179: i8, in_$i180: i32, in_$i181: i32, in_$i182: i8, in_$i183: i64, in_$p184: ref, in_$i185: i1, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i32, in_$i108: i32, in_$i109: i8, in_$i186: i8, in_$i187: i32, in_$p188: ref, in_$p189: ref, in_vslice_dummy_var_30: i32, in_vslice_dummy_var_31: i32, in_vslice_dummy_var_32: i32, in_vslice_dummy_var_33: i32) returns (out_$p110: ref, out_$i111: i8, out_$i112: i32, out_$i113: i1, out_$p114: ref, out_$p121: ref, out_$i122: i8, out_$i123: i32, out_$i124: i1, out_$i125: i1, out_$i126: i1, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i64, out_$i132: i1, out_$p133: ref, out_$p142: ref, out_$i143: i8, out_$p144: ref, out_$i145: i8, out_$p146: ref, out_$i147: i8, out_$i148: i32, out_$i149: i64, out_$i150: i1, out_$i151: i32, out_$i152: i32, out_$i153: i1, out_$p154: ref, out_$p156: ref, out_$p157: ref, out_$p158: ref, out_$p159: ref, out_$p160: ref, out_$p161: ref, out_$i162: i24, out_$i163: i24, out_$i164: i24, out_$p165: ref, out_$p166: ref, out_$i167: i8, out_$i168: i64, out_$i169: i64, out_$i170: i64, out_$i171: i1, out_$p172: ref, out_$p173: ref, out_$i174: i8, out_$i175: i32, out_$i176: i8, out_$i177: i32, out_$p136: ref, out_$i137: i8, out_$i138: i32, out_$p139: ref, out_$p140: ref, out_$p116: ref, out_$i117: i8, out_$i118: i32, out_$p119: ref, out_$p120: ref, out_$i179: i8, out_$i180: i32, out_$i181: i32, out_$i182: i8, out_$i183: i64, out_$p184: ref, out_$i185: i1, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i32, out_$i108: i32, out_$i109: i8, out_$i186: i8, out_$i187: i32, out_$p188: ref, out_$p189: ref, out_vslice_dummy_var_30: i32, out_vslice_dummy_var_31: i32, out_vslice_dummy_var_32: i32, out_vslice_dummy_var_33: i32)
{

  entry:
    out_$p110, out_$i111, out_$i112, out_$i113, out_$p114, out_$p121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p133, out_$p142, out_$i143, out_$p144, out_$i145, out_$p146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p154, out_$p156, out_$p157, out_$p158, out_$p159, out_$p160, out_$p161, out_$i162, out_$i163, out_$i164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$p172, out_$p173, out_$i174, out_$i175, out_$i176, out_$i177, out_$p136, out_$i137, out_$i138, out_$p139, out_$p140, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$p184, out_$i185, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$i109, out_$i186, out_$i187, out_$p188, out_$p189, out_vslice_dummy_var_30, out_vslice_dummy_var_31, out_vslice_dummy_var_32, out_vslice_dummy_var_33 := in_$p110, in_$i111, in_$i112, in_$i113, in_$p114, in_$p121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$p133, in_$p142, in_$i143, in_$p144, in_$i145, in_$p146, in_$i147, in_$i148, in_$i149, in_$i150, in_$i151, in_$i152, in_$i153, in_$p154, in_$p156, in_$p157, in_$p158, in_$p159, in_$p160, in_$p161, in_$i162, in_$i163, in_$i164, in_$p165, in_$p166, in_$i167, in_$i168, in_$i169, in_$i170, in_$i171, in_$p172, in_$p173, in_$i174, in_$i175, in_$i176, in_$i177, in_$p136, in_$i137, in_$i138, in_$p139, in_$p140, in_$p116, in_$i117, in_$i118, in_$p119, in_$p120, in_$i179, in_$i180, in_$i181, in_$i182, in_$i183, in_$p184, in_$i185, in_$p104, in_$p105, in_$p106, in_$i107, in_$i108, in_$i109, in_$i186, in_$i187, in_$p188, in_$p189, in_vslice_dummy_var_30, in_vslice_dummy_var_31, in_vslice_dummy_var_32, in_vslice_dummy_var_33;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_138;

  $bb65:
    assume out_$i185 == 1;
    assume {:verifier.code 0} true;
    out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$i109 := out_$p120, out_$p119, out_$p184, out_$i181, out_$i118, out_$i117;
    goto $bb65_dummy;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    out_$i186, out_$i187, out_$p188, out_$p189 := out_$i117, out_$i118, out_$p119, out_$p120;
    assume true;
    goto $bb65;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    out_$i185 := $sgt.i32(out_$i181, 0);
    goto corral_source_split_156;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    out_$p184 := $add.ref(out_$p116, $mul.ref(out_$i183, 1));
    goto corral_source_split_155;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    out_$i183 := $zext.i8.i64(out_$i182);
    goto corral_source_split_154;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    out_$i182 := $load.i8($M.0, out_$p116);
    goto corral_source_split_153;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    out_$i181 := $sub.i32(out_$i107, out_$i180);
    call {:si_unique_call 38} {:cexpr "buflen"} boogie_si_record_i32(out_$i181);
    goto corral_source_split_152;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    out_$i180 := $zext.i8.i32(out_$i179);
    goto corral_source_split_151;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    out_$i179 := $load.i8($M.0, out_$p116);
    goto corral_source_split_150;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_149;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    out_$p116, out_$i117, out_$i118, out_$p119, out_$p120 := out_$p136, out_$i137, out_$i138, out_$p139, out_$p140;
    goto $bb33;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    out_$p116, out_$i117, out_$i118, out_$p119, out_$p120 := out_$p106, out_$i109, out_$i108, out_$p105, out_$p104;
    goto $bb33;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    out_$p116, out_$i117, out_$i118, out_$p119, out_$p120 := out_$p106, out_$i109, out_$i108, out_$p105, out_$p104;
    goto $bb33;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} out_vslice_dummy_var_30 := dev_err.ref.ref(out_$p114, .str.35);
    goto corral_source_split_147;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_146;

  $bb31:
    assume out_$i113 == 1;
    goto corral_source_split_145;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    out_$i113 := $ne.i32(out_$i112, 36);
    goto corral_source_split_143;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    out_$i112 := $zext.i8.i32(out_$i111);
    goto corral_source_split_142;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    out_$i111 := $load.i8($M.0, out_$p110);
    goto corral_source_split_141;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref(out_$p106, $mul.ref(1, 1));
    goto corral_source_split_140;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} out_vslice_dummy_var_31 := dev_err.ref.ref(out_$p133, .str.36);
    goto corral_source_split_185;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_184;

  $bb51:
    assume out_$i132 == 1;
    goto corral_source_split_183;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    out_$i132 := $ne.i64(out_$i131, 0);
    goto corral_source_split_163;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    out_$i131 := $p2i.ref.i64(out_$p104);
    goto corral_source_split_162;

  $bb40:
    assume out_$i126 == 1;
    goto corral_source_split_161;

  $bb39:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    out_$i126 := $slt.i32(out_$i123, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb37:
    assume !(out_$i124 == 1);
    assume {:verifier.code 0} true;
    out_$i125 := $slt.i32(out_$i123, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i124 := $slt.i32(out_$i123, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    out_$i123 := $zext.i8.i32(out_$i122);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    out_$i122 := $load.i8($M.0, out_$p121);
    goto corral_source_split_159;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref(out_$p106, $mul.ref(2, 1));
    goto corral_source_split_158;

  $bb32:
    assume !(out_$i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb54:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_189;

  $bb64:
    assume {:verifier.code 0} true;
    out_$p136, out_$i137, out_$i138, out_$p139, out_$p140 := out_$p106, out_$i109, out_$i108, out_$p105, out_$p104;
    goto $bb54;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    out_$p136, out_$i137, out_$i138, out_$p139, out_$p140 := out_$p106, out_$i109, out_$i108, out_$p106, out_$p104;
    goto $bb54;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    out_$p136, out_$i137, out_$i138, out_$p139, out_$p140 := out_$p106, out_$i109, out_$i108, out_$p105, out_$p106;
    goto $bb54;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    out_$p136, out_$i137, out_$i138, out_$p139, out_$p140 := out_$p106, out_$i143, out_$i108, out_$p105, out_$p104;
    goto $bb54;

  $bb60:
    assume {:verifier.code 0} true;
    out_$p136, out_$i137, out_$i138, out_$p139, out_$p140 := out_$p106, out_$i109, out_$i148, out_$p105, out_$p104;
    goto $bb54;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    out_$p136, out_$i137, out_$i138, out_$p139, out_$p140 := out_$p106, out_$i109, out_$i108, out_$p105, out_$p104;
    goto $bb54;

  $bb49:
    assume out_$i130 == 1;
    goto corral_source_split_181;

  $bb47:
    assume out_$i129 == 1;
    assume {:verifier.code 0} true;
    out_$i130 := $eq.i32(out_$i123, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb36:
    assume out_$i124 == 1;
    assume {:verifier.code 0} true;
    out_$i129 := $slt.i32(out_$i123, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} out_vslice_dummy_var_32 := dev_err.ref.ref(out_$p154, .str.37);
    goto corral_source_split_198;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    out_$p154 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_197;

  $bb58:
    assume out_$i153 == 1;
    goto corral_source_split_196;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    out_$i153 := $ne.i32(out_$i152, 3);
    goto corral_source_split_194;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    out_$i152 := $and.i32(out_$i151, 3);
    goto corral_source_split_193;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    out_$i151 := $zext.i8.i32(out_$i145);
    goto corral_source_split_192;

  $bb55:
    assume out_$i150 == 1;
    goto corral_source_split_191;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    out_$i150 := $eq.i64(out_$i149, 0);
    goto corral_source_split_179;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    out_$i149 := $and.i64(in_$i27, 8);
    goto corral_source_split_178;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    out_$i148 := $zext.i8.i32(out_$i147);
    call {:si_unique_call 41} {:cexpr "call_interface_num"} boogie_si_record_i32(out_$i148);
    goto corral_source_split_177;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    out_$i147 := $load.i8($M.0, out_$p146);
    goto corral_source_split_176;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    out_$p146 := $add.ref(out_$p106, $mul.ref(4, 1));
    goto corral_source_split_175;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    out_$i145 := $load.i8($M.0, out_$p144);
    call {:si_unique_call 40} {:cexpr "call_management_function"} boogie_si_record_i8(out_$i145);
    goto corral_source_split_174;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref(out_$p106, $mul.ref(3, 1));
    goto corral_source_split_173;

  $bb48:
    assume !(out_$i129 == 1);
    goto corral_source_split_172;

  $bb56:
    assume {:verifier.code 0} true;
    assume !(out_$i150 == 1);
    goto $bb57;

  $bb59:
    assume {:verifier.code 0} true;
    assume !(out_$i153 == 1);
    goto $bb57;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    out_$i143 := $load.i8($M.0, out_$p142);
    call {:si_unique_call 39} {:cexpr "ac_management_function"} boogie_si_record_i8(out_$i143);
    goto corral_source_split_170;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref(out_$p106, $mul.ref(3, 1));
    goto corral_source_split_169;

  $bb45:
    assume out_$i128 == 1;
    goto corral_source_split_168;

  $bb38:
    assume out_$i125 == 1;
    assume {:verifier.code 0} true;
    out_$i128 := $eq.i32(out_$i123, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_187;

  $bb52:
    assume !(out_$i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    goto corral_source_split_166;

  $bb42:
    assume out_$i127 == 1;
    goto corral_source_split_165;

  $bb41:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    out_$i127 := $eq.i32(out_$i123, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb63:
    assume !(out_$i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} out_vslice_dummy_var_33 := __dynamic_dev_dbg.ref.ref.ref.i32.i32(in_$p3, out_$p172, .str.38, out_$i175, out_$i177);
    goto corral_source_split_230;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    out_$i177 := $zext.i8.i32(out_$i176);
    goto corral_source_split_229;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    out_$i176 := $load.i8($M.0, out_$p106);
    goto corral_source_split_228;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    out_$i175 := $zext.i8.i32(out_$i174);
    goto corral_source_split_227;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    out_$i174 := $load.i8($M.0, out_$p173);
    goto corral_source_split_226;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    out_$p173 := $add.ref(out_$p106, $mul.ref(2, 1));
    goto corral_source_split_225;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    out_$p172 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_224;

  $bb62:
    assume out_$i171 == 1;
    goto corral_source_split_223;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    out_$i171 := $ne.i64(out_$i170, 0);
    goto corral_source_split_221;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} out_$i170 := ldv__builtin_expect(out_$i169, 0);
    call {:si_unique_call 45} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i170);
    goto corral_source_split_220;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    out_$i169 := $and.i64(out_$i168, 1);
    goto corral_source_split_219;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    out_$i168 := $zext.i8.i64(out_$i167);
    goto corral_source_split_218;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    out_$i167 := $load.i8($M.6, out_$p166);
    goto corral_source_split_217;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    out_$p166 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_216;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p165, 0);
    goto corral_source_split_215;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_214;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, out_$p161, out_$i164);
    goto corral_source_split_213;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    out_$i164 := $or.i24(out_$i163, 1068);
    goto corral_source_split_212;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    out_$i163 := $and.i24(out_$i162, $sub.i24(0, 262144));
    goto corral_source_split_211;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    out_$i162 := $load.i24($M.5, out_$p161);
    goto corral_source_split_210;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    out_$p161 := $bitcast.ref.ref(out_$p160);
    goto corral_source_split_209;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    out_$p160 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_208;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p159, .str.38);
    goto corral_source_split_207;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    out_$p159 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_206;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p158, .str.5);
    goto corral_source_split_205;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    out_$p158 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_204;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p157, .str.32);
    goto corral_source_split_203;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    out_$p157 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_202;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p156, .str.3);
    goto corral_source_split_201;

  $bb61:
    assume {:verifier.code 0} true;
    out_$p156 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_200;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb43:
    assume {:verifier.code 0} true;
    assume !(out_$i127 == 1);
    goto $bb44;

  $bb46:
    assume {:verifier.code 0} true;
    assume !(out_$i128 == 1);
    goto $bb44;

  $bb50:
    assume {:verifier.code 0} true;
    assume !(out_$i130 == 1);
    goto $bb44;

  $bb65_dummy:
    call {:si_unique_call 1} out_$p110, out_$i111, out_$i112, out_$i113, out_$p114, out_$p121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p133, out_$p142, out_$i143, out_$p144, out_$i145, out_$p146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p154, out_$p156, out_$p157, out_$p158, out_$p159, out_$p160, out_$p161, out_$i162, out_$i163, out_$i164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$p172, out_$p173, out_$i174, out_$i175, out_$i176, out_$i177, out_$p136, out_$i137, out_$i138, out_$p139, out_$p140, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$p184, out_$i185, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$i109, out_$i186, out_$i187, out_$p188, out_$p189, out_vslice_dummy_var_30, out_vslice_dummy_var_31, out_vslice_dummy_var_32, out_vslice_dummy_var_33 := acm_probe_loop_$bb29(in_$p0, in_$p3, in_$i27, out_$p110, out_$i111, out_$i112, out_$i113, out_$p114, out_$p121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p133, out_$p142, out_$i143, out_$p144, out_$i145, out_$p146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p154, out_$p156, out_$p157, out_$p158, out_$p159, out_$p160, out_$p161, out_$i162, out_$i163, out_$i164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$p172, out_$p173, out_$i174, out_$i175, out_$i176, out_$i177, out_$p136, out_$i137, out_$i138, out_$p139, out_$p140, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$p184, out_$i185, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$i109, out_$i186, out_$i187, out_$p188, out_$p189, out_vslice_dummy_var_30, out_vslice_dummy_var_31, out_vslice_dummy_var_32, out_vslice_dummy_var_33);
    return;

  exit:
    return;
}



procedure acm_probe_loop_$bb29(in_$p0: ref, in_$p3: ref, in_$i27: i64, in_$p110: ref, in_$i111: i8, in_$i112: i32, in_$i113: i1, in_$p114: ref, in_$p121: ref, in_$i122: i8, in_$i123: i32, in_$i124: i1, in_$i125: i1, in_$i126: i1, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i64, in_$i132: i1, in_$p133: ref, in_$p142: ref, in_$i143: i8, in_$p144: ref, in_$i145: i8, in_$p146: ref, in_$i147: i8, in_$i148: i32, in_$i149: i64, in_$i150: i1, in_$i151: i32, in_$i152: i32, in_$i153: i1, in_$p154: ref, in_$p156: ref, in_$p157: ref, in_$p158: ref, in_$p159: ref, in_$p160: ref, in_$p161: ref, in_$i162: i24, in_$i163: i24, in_$i164: i24, in_$p165: ref, in_$p166: ref, in_$i167: i8, in_$i168: i64, in_$i169: i64, in_$i170: i64, in_$i171: i1, in_$p172: ref, in_$p173: ref, in_$i174: i8, in_$i175: i32, in_$i176: i8, in_$i177: i32, in_$p136: ref, in_$i137: i8, in_$i138: i32, in_$p139: ref, in_$p140: ref, in_$p116: ref, in_$i117: i8, in_$i118: i32, in_$p119: ref, in_$p120: ref, in_$i179: i8, in_$i180: i32, in_$i181: i32, in_$i182: i8, in_$i183: i64, in_$p184: ref, in_$i185: i1, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i32, in_$i108: i32, in_$i109: i8, in_$i186: i8, in_$i187: i32, in_$p188: ref, in_$p189: ref, in_vslice_dummy_var_30: i32, in_vslice_dummy_var_31: i32, in_vslice_dummy_var_32: i32, in_vslice_dummy_var_33: i32) returns (out_$p110: ref, out_$i111: i8, out_$i112: i32, out_$i113: i1, out_$p114: ref, out_$p121: ref, out_$i122: i8, out_$i123: i32, out_$i124: i1, out_$i125: i1, out_$i126: i1, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i64, out_$i132: i1, out_$p133: ref, out_$p142: ref, out_$i143: i8, out_$p144: ref, out_$i145: i8, out_$p146: ref, out_$i147: i8, out_$i148: i32, out_$i149: i64, out_$i150: i1, out_$i151: i32, out_$i152: i32, out_$i153: i1, out_$p154: ref, out_$p156: ref, out_$p157: ref, out_$p158: ref, out_$p159: ref, out_$p160: ref, out_$p161: ref, out_$i162: i24, out_$i163: i24, out_$i164: i24, out_$p165: ref, out_$p166: ref, out_$i167: i8, out_$i168: i64, out_$i169: i64, out_$i170: i64, out_$i171: i1, out_$p172: ref, out_$p173: ref, out_$i174: i8, out_$i175: i32, out_$i176: i8, out_$i177: i32, out_$p136: ref, out_$i137: i8, out_$i138: i32, out_$p139: ref, out_$p140: ref, out_$p116: ref, out_$i117: i8, out_$i118: i32, out_$p119: ref, out_$p120: ref, out_$i179: i8, out_$i180: i32, out_$i181: i32, out_$i182: i8, out_$i183: i64, out_$p184: ref, out_$i185: i1, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i32, out_$i108: i32, out_$i109: i8, out_$i186: i8, out_$i187: i32, out_$p188: ref, out_$p189: ref, out_vslice_dummy_var_30: i32, out_vslice_dummy_var_31: i32, out_vslice_dummy_var_32: i32, out_vslice_dummy_var_33: i32);
  modifies $M.6, $M.5, $M.4, $M.3, $M.2, $M.1;



implementation acm_disconnect_loop_$bb22(in_$p3: ref, in_$p62: ref, in_$i66: i64, in_$p68: ref, in_$p69: ref, in_$i70: i32, in_$i71: i32, in_$i72: i1, in_$i65: i32) returns (out_$i66: i64, out_$p68: ref, out_$p69: ref, out_$i70: i32, out_$i71: i32, out_$i72: i1, out_$i65: i32)
{

  entry:
    out_$i66, out_$p68, out_$p69, out_$i70, out_$i71, out_$i72, out_$i65 := in_$i66, in_$p68, in_$p69, in_$i70, in_$i71, in_$i72, in_$i65;
    goto $bb22, exit;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_1240;

  $bb24:
    assume out_$i72 == 1;
    assume {:verifier.code 0} true;
    out_$i65 := out_$i70;
    goto $bb24_dummy;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    out_$i72 := $sgt.i32(out_$i71, out_$i70);
    goto corral_source_split_1248;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i32($M.0, in_$p62);
    goto corral_source_split_1247;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    out_$i70 := $add.i32(out_$i65, 1);
    call {:si_unique_call 208} {:cexpr "i"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_1246;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} ldv_usb_free_urb_34(out_$p69);
    goto corral_source_split_1245;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    out_$p69 := $load.ref($M.0, out_$p68);
    goto corral_source_split_1244;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 3008)), $mul.ref(1768, 1)), $mul.ref(out_$i66, 8));
    goto corral_source_split_1243;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i66 := $sext.i32.i64(out_$i65);
    goto corral_source_split_1242;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb24_dummy:
    call {:si_unique_call 1} out_$i66, out_$p68, out_$p69, out_$i70, out_$i71, out_$i72, out_$i65 := acm_disconnect_loop_$bb22(in_$p3, in_$p62, out_$i66, out_$p68, out_$p69, out_$i70, out_$i71, out_$i72, out_$i65);
    return;

  exit:
    return;
}



procedure acm_disconnect_loop_$bb22(in_$p3: ref, in_$p62: ref, in_$i66: i64, in_$p68: ref, in_$p69: ref, in_$i70: i32, in_$i71: i32, in_$i72: i1, in_$i65: i32) returns (out_$i66: i64, out_$p68: ref, out_$p69: ref, out_$i70: i32, out_$i71: i32, out_$i72: i1, out_$i65: i32);
  modifies $M.10;



implementation {:SIextraRecBound 16} acm_disconnect_loop_$bb14(in_$p3: ref, in_$i55: i64, in_$p58: ref, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$i54: i32) returns (out_$i55: i64, out_$p58: ref, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$i54: i32)
{

  entry:
    out_$i55, out_$p58, out_$p59, out_$i60, out_$i61, out_$i54 := in_$i55, in_$p58, in_$p59, in_$i60, in_$i61, in_$i54;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_1225;

  $bb16:
    assume out_$i61 == 1;
    assume {:verifier.code 0} true;
    out_$i54 := out_$i60;
    goto $bb16_dummy;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    out_$i61 := $sle.i32(out_$i60, 15);
    goto corral_source_split_1232;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    out_$i60 := $add.i32(out_$i54, 1);
    call {:si_unique_call 206} {:cexpr "i"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_1231;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} ldv_usb_free_urb_33(out_$p59);
    goto corral_source_split_1230;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, out_$p58);
    goto corral_source_split_1229;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 3008)), $mul.ref(1120, 1)), $mul.ref(out_$i55, 40)), $mul.ref(24, 1));
    goto corral_source_split_1228;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i55 := $sext.i32.i64(out_$i54);
    goto corral_source_split_1227;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i55, out_$p58, out_$p59, out_$i60, out_$i61, out_$i54 := acm_disconnect_loop_$bb14(in_$p3, out_$i55, out_$p58, out_$p59, out_$i60, out_$i61, out_$i54);
    return;

  exit:
    return;
}



procedure acm_disconnect_loop_$bb14(in_$p3: ref, in_$i55: i64, in_$p58: ref, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$i54: i32) returns (out_$i55: i64, out_$p58: ref, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$i54: i32);
  modifies $M.10;



implementation acm_submit_read_urbs_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$i6: i32, in_$i7: i1, in_$i8: i32, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$i5: i32) returns (out_$i6: i32, out_$i7: i1, out_$i8: i32, out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$i5: i32)
{

  entry:
    out_$i6, out_$i7, out_$i8, out_$i10, out_$i11, out_$i12, out_$i5 := in_$i6, in_$i7, in_$i8, in_$i10, in_$i11, in_$i12, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1487;

  $bb10:
    assume out_$i12 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i10;
    goto $bb10_dummy;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    out_$i12 := $sgt.i32(out_$i11, out_$i10);
    goto corral_source_split_1498;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i32($M.0, in_$p2);
    goto corral_source_split_1497;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i10 := $add.i32(out_$i5, 1);
    call {:si_unique_call 262} {:cexpr "i"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_1496;

  $bb7:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    out_$i8 := out_$i6;
    assume true;
    goto $bb7;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    out_$i7 := $ne.i32(out_$i6, 0);
    goto corral_source_split_1490;

  SeqInstr_21:
    call {:si_unique_call 261} {:cexpr "res"} boogie_si_record_i32(out_$i6);
    goto corral_source_split_1489;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} out_$i6 := acm_submit_read_urb(in_$p0, out_$i5, in_$i1);
    goto SeqInstr_20;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i6, out_$i7, out_$i8, out_$i10, out_$i11, out_$i12, out_$i5 := acm_submit_read_urbs_loop_$bb4(in_$p0, in_$i1, in_$p2, out_$i6, out_$i7, out_$i8, out_$i10, out_$i11, out_$i12, out_$i5);
    return;

  exit:
    return;
}



procedure acm_submit_read_urbs_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$i6: i32, in_$i7: i1, in_$i8: i32, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$i5: i32) returns (out_$i6: i32, out_$i7: i1, out_$i8: i32, out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$i5: i32);
  modifies $M.11, $M.13, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.15, $M.17, $CurrAddr, $M.9, $M.10, assertsPassed;



implementation ldv_stop___0_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop___0_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop___0_loop_$bb1();



implementation stop_data_traffic_loop_$bb11(in_$p0: ref, in_$p28: ref, in_$i32: i64, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i31: i32) returns (out_$i32: i64, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i31: i32)
{

  entry:
    out_$i32, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i31 := in_$i32, in_$p34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i31;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1664;

  $bb13:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i31 := out_$i36;
    goto $bb13_dummy;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    out_$i38 := $sgt.i32(out_$i37, out_$i36);
    goto corral_source_split_1672;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.0, in_$p28);
    goto corral_source_split_1671;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    out_$i36 := $add.i32(out_$i31, 1);
    call {:si_unique_call 309} {:cexpr "i"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_1670;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} usb_kill_urb(out_$p35);
    goto corral_source_split_1669;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_1668;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3008)), $mul.ref(1768, 1)), $mul.ref(out_$i32, 8));
    goto corral_source_split_1667;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i32 := $sext.i32.i64(out_$i31);
    goto corral_source_split_1666;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i32, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i31 := stop_data_traffic_loop_$bb11(in_$p0, in_$p28, out_$i32, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i31);
    return;

  exit:
    return;
}



procedure stop_data_traffic_loop_$bb11(in_$p0: ref, in_$p28: ref, in_$i32: i64, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i31: i32) returns (out_$i32: i64, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i31: i32);



implementation acm_read_buffers_free_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$p8: ref, in_$i9: i32, in_$i10: i64, in_$i11: i64, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p19: ref, in_$i20: i64, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i7: i32) returns (out_$p8: ref, out_$i9: i32, out_$i10: i64, out_$i11: i64, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p19: ref, out_$i20: i64, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i7: i32)
{

  entry:
    out_$p8, out_$i9, out_$i10, out_$i11, out_$p14, out_$p15, out_$i16, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i7 := in_$p8, in_$i9, in_$i10, in_$i11, in_$p14, in_$p15, in_$i16, in_$p19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1974;

  $bb6:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i21;
    goto $bb6_dummy;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    out_$i23 := $sgt.i32(out_$i22, out_$i21);
    goto corral_source_split_1988;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i32($M.0, in_$p4);
    goto corral_source_split_1987;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i32(out_$i7, 1);
    call {:si_unique_call 372} {:cexpr "i"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_1986;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} usb_free_coherent(in_$p3, out_$i10, out_$p15, out_$i20);
    goto corral_source_split_1985;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i64($M.0, out_$p19);
    goto corral_source_split_1984;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3008)), $mul.ref(1896, 1)), $mul.ref(out_$i16, 40)), $mul.ref(16, 1));
    goto corral_source_split_1983;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i7);
    goto corral_source_split_1982;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_1981;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3008)), $mul.ref(1896, 1)), $mul.ref(out_$i11, 40)), $mul.ref(8, 1));
    goto corral_source_split_1980;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i32.i64(out_$i7);
    goto corral_source_split_1979;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    out_$i10 := $zext.i32.i64(out_$i9);
    goto corral_source_split_1978;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i32($M.0, out_$p8);
    goto corral_source_split_1977;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3008)), $mul.ref(2972, 1));
    goto corral_source_split_1976;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p8, out_$i9, out_$i10, out_$i11, out_$p14, out_$p15, out_$i16, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i7 := acm_read_buffers_free_loop_$bb4(in_$p0, in_$p3, in_$p4, out_$p8, out_$i9, out_$i10, out_$i11, out_$p14, out_$p15, out_$i16, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i7);
    return;

  exit:
    return;
}



procedure acm_read_buffers_free_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$p8: ref, in_$i9: i32, in_$i10: i64, in_$i11: i64, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p19: ref, in_$i20: i64, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i7: i32) returns (out_$p8: ref, out_$i9: i32, out_$i10: i64, out_$i11: i64, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p19: ref, out_$i20: i64, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i7: i32);



implementation acm_write_buffers_alloc_loop_$bb9(in_$p0: ref, in_$i20: i32, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$i26: i64, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p18: ref, in_$i19: i32) returns (out_$i20: i32, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$i26: i64, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p18: ref, out_$i19: i32)
{

  entry:
    out_$i20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p18, out_$i19 := in_$i20, in_$p21, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$p27, in_$p28, in_$p29, in_$i30, in_$i31, in_$p18, in_$i19;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2311;

  $bb11:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$p18, out_$i19 := out_$p21, out_$i20;
    goto $bb11_dummy;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i20, 0);
    goto corral_source_split_2325;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} usb_free_coherent(out_$p23, out_$i26, out_$p28, out_$i30);
    goto corral_source_split_2324;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i64($M.0, out_$p29);
    goto corral_source_split_2323;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p18, $mul.ref($sub.ref(0, 1), 40)), $mul.ref(8, 1));
    goto corral_source_split_2322;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_2321;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p18, $mul.ref($sub.ref(0, 1), 40)), $mul.ref(0, 1));
    goto corral_source_split_2320;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    out_$i26 := $zext.i32.i64(out_$i25);
    goto corral_source_split_2319;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.0, out_$p24);
    goto corral_source_split_2318;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3008)), $mul.ref(2968, 1));
    goto corral_source_split_2317;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_2316;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3008)), $mul.ref(0, 1));
    goto corral_source_split_2315;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref(out_$p18, $mul.ref($sub.ref(0, 1), 40));
    goto corral_source_split_2314;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i20 := $sub.i32(out_$i19, 1);
    call {:si_unique_call 409} {:cexpr "i"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_2313;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p18, out_$i19 := acm_write_buffers_alloc_loop_$bb9(in_$p0, out_$i20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p18, out_$i19);
    return;

  exit:
    return;
}



procedure acm_write_buffers_alloc_loop_$bb9(in_$p0: ref, in_$i20: i32, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$i26: i64, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p18: ref, in_$i19: i32) returns (out_$i20: i32, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$i26: i64, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p18: ref, out_$i19: i32);



implementation acm_wb_alloc_loop_$bb4(in_$p2: ref, in_$i10: i32, in_$p11: ref, in_$i8: i32, in_$i9: i32, in_$i14: i32, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i18: i64, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i1) returns (out_$i10: i32, out_$p11: ref, out_$i8: i32, out_$i9: i32, out_$i14: i32, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i18: i64, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i1)
{

  entry:
    out_$i10, out_$p11, out_$i8, out_$i9, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22 := in_$i10, in_$p11, in_$i8, in_$i9, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$p19, in_$p20, in_$i21, in_$i22;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb11:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    out_$i8, out_$i9 := out_$i15, out_$i16;
    goto $bb11_dummy;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    out_$i10, out_$p11 := out_$i15, out_$p19;
    assume true;
    goto $bb11;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i21, 0);
    goto corral_source_split_4162;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.0, out_$p20);
    goto corral_source_split_4161;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p2, $mul.ref(out_$i18, 40)), $mul.ref(20, 1));
    goto corral_source_split_4160;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref(in_$p2, $mul.ref(out_$i18, 40));
    goto corral_source_split_4159;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(out_$i15);
    goto corral_source_split_4158;

  $bb9:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    out_$i17 := $sgt.i32(out_$i16, 15);
    goto corral_source_split_4154;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i9, 1);
    call {:si_unique_call 717} {:cexpr "i"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_4153;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    out_$i15 := $srem.i32(out_$i14, 16);
    call {:si_unique_call 716} {:cexpr "wbn"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_4152;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i14 := $add.i32(out_$i8, 1);
    goto corral_source_split_4151;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i10, out_$p11, out_$i8, out_$i9, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22 := acm_wb_alloc_loop_$bb4(in_$p2, out_$i10, out_$p11, out_$i8, out_$i9, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22);
    return;

  exit:
    return;
}



procedure acm_wb_alloc_loop_$bb4(in_$p2: ref, in_$i10: i32, in_$p11: ref, in_$i8: i32, in_$i9: i32, in_$i14: i32, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i18: i64, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i1) returns (out_$i10: i32, out_$p11: ref, out_$i8: i32, out_$i9: i32, out_$i14: i32, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i18: i64, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i1);



implementation acm_port_shutdown_loop_$bb13(in_$p2: ref, in_$p39: ref, in_$i43: i64, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i1, in_$i42: i32) returns (out_$i43: i64, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i1, out_$i42: i32)
{

  entry:
    out_$i43, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i42 := in_$i43, in_$p45, in_$p46, in_$i47, in_$i48, in_$i49, in_$i42;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4319;

  $bb15:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$i42 := out_$i47;
    goto $bb15_dummy;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    out_$i49 := $sgt.i32(out_$i48, out_$i47);
    goto corral_source_split_4327;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.0, in_$p39);
    goto corral_source_split_4326;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i32(out_$i42, 1);
    call {:si_unique_call 760} {:cexpr "i"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_4325;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} usb_kill_urb(out_$p46);
    goto corral_source_split_4324;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    goto corral_source_split_4323;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref($sub.ref(0, 24), 3008)), $mul.ref(1768, 1)), $mul.ref(out_$i43, 8));
    goto corral_source_split_4322;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i43 := $sext.i32.i64(out_$i42);
    goto corral_source_split_4321;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i43, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i42 := acm_port_shutdown_loop_$bb13(in_$p2, in_$p39, out_$i43, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i42);
    return;

  exit:
    return;
}



procedure acm_port_shutdown_loop_$bb13(in_$p2: ref, in_$p39: ref, in_$i43: i64, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i1, in_$i42: i32) returns (out_$i43: i64, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i1, out_$i42: i32);



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p5: ref, in_$p6: ref, in_$p8: ref, in_$p10: ref, in_$p12: ref, in_$i13: i32, in_$i14: i32, in_$i15: i32, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$i21: i64, in_$p23: ref, in_$p25: ref, in_$p27: ref, in_$p29: ref, in_$p30: ref, in_$i32: i32, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i1, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i1, in_$i48: i32, in_$i49: i1, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$i53: i1, in_$i55: i32, in_$i56: i1, in_$i57: i32, in_$i58: i1, in_$i59: i1, in_$i60: i1, in_$i61: i1, in_$i62: i1, in_$i63: i1, in_$i64: i1, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i32, in_$i75: i1, in_$p76: ref, in_$i78: i32, in_$i79: i1, in_$p80: ref, in_$i81: i32, in_$i82: i1, in_$p83: ref, in_$i84: i32, in_$i85: i1, in_$p86: ref, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$i90: i32, in_$i91: i1, in_$p92: ref, in_$i93: i32, in_$i94: i1, in_$p95: ref, in_$i96: i32, in_$i97: i1, in_$p98: ref, in_$p99: ref, in_$i100: i32, in_$i101: i1, in_$p102: ref, in_$p103: ref, in_$i104: i32, in_$i105: i32, in_$i106: i1, in_$i107: i32, in_$i108: i32, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$i112: i32, in_$i113: i1, in_$p114: ref, in_$i115: i32, in_$i116: i1, in_$p117: ref, in_$i119: i32, in_$i120: i1, in_$p121: ref, in_$i123: i32, in_$i124: i1, in_$p125: ref, in_$i127: i32, in_$i128: i1, in_$p129: ref, in_$i131: i32, in_$i132: i1, in_$p133: ref, in_$i134: i32, in_$i135: i1, in_$p136: ref, in_$i137: i32, in_$i138: i1, in_$p139: ref, in_$i141: i32, in_$i142: i1, in_$p143: ref, in_$i145: i32, in_$i146: i1, in_$p147: ref, in_$i149: i32, in_$i150: i1, in_$p151: ref, in_$i153: i32, in_$i154: i1, in_$p155: ref, in_$i157: i32, in_$i158: i1, in_$p159: ref, in_$i161: i32, in_$i162: i1, in_$p163: ref, in_$i165: i32, in_$i166: i1, in_$p167: ref, in_$i169: i32, in_$i170: i1, in_$p171: ref, in_$i173: i32, in_$i174: i1, in_$p175: ref, in_$i177: i32, in_$i178: i1, in_$i179: i32, in_$i180: i1, in_$i181: i1, in_$i182: i1, in_$i183: i32, in_$i184: i1, in_$i185: i32, in_$i186: i1, in_$i187: i32, in_$i188: i1, in_$i189: i32, in_$i190: i32, in_$i191: i1, in_$i192: i32, in_$i193: i1, in_$i194: i32, in_$i195: i1, in_$i196: i32, in_$i197: i1, in_$i198: i1, in_$i199: i1, in_$i200: i1, in_$i201: i32, in_$i202: i1, in_$p203: ref, in_$i204: i32, in_$i205: i32, in_$i206: i1, in_$i207: i32, in_$i208: i32, in_$i209: i32, in_$i210: i1, in_$p211: ref, in_$i212: i32, in_$i213: i32, in_$i214: i32, in_$i215: i1, in_$p216: ref, in_$i217: i32, in_$i218: i1, in_$i219: i32, in_$i220: i1, in_$i221: i1, in_$i222: i1, in_$i223: i1, in_$i224: i1, in_$i225: i1, in_$i226: i32, in_$i227: i1, in_$p228: ref, in_$i229: i32, in_$i230: i32, in_$i231: i1, in_$i232: i32, in_$i233: i32, in_$i234: i32, in_$i235: i1, in_$p236: ref, in_$i237: i32, in_$i238: i32, in_$i239: i1, in_$i240: i32, in_$i241: i1, in_$i242: i32, in_$i243: i1, in_$p244: ref, in_$i245: i32, in_$i246: i32, in_$i247: i32, in_$i248: i1, in_$i249: i32, in_$i250: i1, in_$p251: ref, in_$i252: i32, in_$i253: i32, in_$i254: i32, in_$i255: i1, in_$p256: ref, in_$p257: ref, in_$i258: i32, in_$i259: i32, in_$i260: i32, in_$i261: i1, in_$i262: i32, in_$i263: i1, in_$p264: ref, in_$i265: i32, in_$i266: i32, in_$i267: i1, in_$i268: i32, in_$i269: i1, in_$i270: i32, in_$i271: i1, in_$i272: i32, in_$i273: i1, in_vslice_dummy_var_100: i64, in_vslice_dummy_var_101: i64, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32, in_vslice_dummy_var_105: i32, in_vslice_dummy_var_106: i32, in_vslice_dummy_var_107: i32, in_vslice_dummy_var_108: i32, in_vslice_dummy_var_109: i32, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_111: i32, in_vslice_dummy_var_112: i32, in_vslice_dummy_var_113: i32, in_vslice_dummy_var_114: i32, in_vslice_dummy_var_115: i32, in_vslice_dummy_var_116: i32, in_vslice_dummy_var_117: i64) returns (out_$i32: i32, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i1, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i1, out_$i48: i32, out_$i49: i1, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$i53: i1, out_$i55: i32, out_$i56: i1, out_$i57: i32, out_$i58: i1, out_$i59: i1, out_$i60: i1, out_$i61: i1, out_$i62: i1, out_$i63: i1, out_$i64: i1, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i32, out_$i75: i1, out_$p76: ref, out_$i78: i32, out_$i79: i1, out_$p80: ref, out_$i81: i32, out_$i82: i1, out_$p83: ref, out_$i84: i32, out_$i85: i1, out_$p86: ref, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$i90: i32, out_$i91: i1, out_$p92: ref, out_$i93: i32, out_$i94: i1, out_$p95: ref, out_$i96: i32, out_$i97: i1, out_$p98: ref, out_$p99: ref, out_$i100: i32, out_$i101: i1, out_$p102: ref, out_$p103: ref, out_$i104: i32, out_$i105: i32, out_$i106: i1, out_$i107: i32, out_$i108: i32, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$i112: i32, out_$i113: i1, out_$p114: ref, out_$i115: i32, out_$i116: i1, out_$p117: ref, out_$i119: i32, out_$i120: i1, out_$p121: ref, out_$i123: i32, out_$i124: i1, out_$p125: ref, out_$i127: i32, out_$i128: i1, out_$p129: ref, out_$i131: i32, out_$i132: i1, out_$p133: ref, out_$i134: i32, out_$i135: i1, out_$p136: ref, out_$i137: i32, out_$i138: i1, out_$p139: ref, out_$i141: i32, out_$i142: i1, out_$p143: ref, out_$i145: i32, out_$i146: i1, out_$p147: ref, out_$i149: i32, out_$i150: i1, out_$p151: ref, out_$i153: i32, out_$i154: i1, out_$p155: ref, out_$i157: i32, out_$i158: i1, out_$p159: ref, out_$i161: i32, out_$i162: i1, out_$p163: ref, out_$i165: i32, out_$i166: i1, out_$p167: ref, out_$i169: i32, out_$i170: i1, out_$p171: ref, out_$i173: i32, out_$i174: i1, out_$p175: ref, out_$i177: i32, out_$i178: i1, out_$i179: i32, out_$i180: i1, out_$i181: i1, out_$i182: i1, out_$i183: i32, out_$i184: i1, out_$i185: i32, out_$i186: i1, out_$i187: i32, out_$i188: i1, out_$i189: i32, out_$i190: i32, out_$i191: i1, out_$i192: i32, out_$i193: i1, out_$i194: i32, out_$i195: i1, out_$i196: i32, out_$i197: i1, out_$i198: i1, out_$i199: i1, out_$i200: i1, out_$i201: i32, out_$i202: i1, out_$p203: ref, out_$i204: i32, out_$i205: i32, out_$i206: i1, out_$i207: i32, out_$i208: i32, out_$i209: i32, out_$i210: i1, out_$p211: ref, out_$i212: i32, out_$i213: i32, out_$i214: i32, out_$i215: i1, out_$p216: ref, out_$i217: i32, out_$i218: i1, out_$i219: i32, out_$i220: i1, out_$i221: i1, out_$i222: i1, out_$i223: i1, out_$i224: i1, out_$i225: i1, out_$i226: i32, out_$i227: i1, out_$p228: ref, out_$i229: i32, out_$i230: i32, out_$i231: i1, out_$i232: i32, out_$i233: i32, out_$i234: i32, out_$i235: i1, out_$p236: ref, out_$i237: i32, out_$i238: i32, out_$i239: i1, out_$i240: i32, out_$i241: i1, out_$i242: i32, out_$i243: i1, out_$p244: ref, out_$i245: i32, out_$i246: i32, out_$i247: i32, out_$i248: i1, out_$i249: i32, out_$i250: i1, out_$p251: ref, out_$i252: i32, out_$i253: i32, out_$i254: i32, out_$i255: i1, out_$p256: ref, out_$p257: ref, out_$i258: i32, out_$i259: i32, out_$i260: i32, out_$i261: i1, out_$i262: i32, out_$i263: i1, out_$p264: ref, out_$i265: i32, out_$i266: i32, out_$i267: i1, out_$i268: i32, out_$i269: i1, out_$i270: i32, out_$i271: i1, out_$i272: i32, out_$i273: i1, out_vslice_dummy_var_100: i64, out_vslice_dummy_var_101: i64, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32, out_vslice_dummy_var_105: i32, out_vslice_dummy_var_106: i32, out_vslice_dummy_var_107: i32, out_vslice_dummy_var_108: i32, out_vslice_dummy_var_109: i32, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_111: i32, out_vslice_dummy_var_112: i32, out_vslice_dummy_var_113: i32, out_vslice_dummy_var_114: i32, out_vslice_dummy_var_115: i32, out_vslice_dummy_var_116: i32, out_vslice_dummy_var_117: i64)
{

  entry:
    out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p76, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$p83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i112, out_$i113, out_$p114, out_$i115, out_$i116, out_$p117, out_$i119, out_$i120, out_$p121, out_$i123, out_$i124, out_$p125, out_$i127, out_$i128, out_$p129, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$p136, out_$i137, out_$i138, out_$p139, out_$i141, out_$i142, out_$p143, out_$i145, out_$i146, out_$p147, out_$i149, out_$i150, out_$p151, out_$i153, out_$i154, out_$p155, out_$i157, out_$i158, out_$p159, out_$i161, out_$i162, out_$p163, out_$i165, out_$i166, out_$p167, out_$i169, out_$i170, out_$p171, out_$i173, out_$i174, out_$p175, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$p203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$p211, out_$i212, out_$i213, out_$i214, out_$i215, out_$p216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$p228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$p236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$p244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$p251, out_$i252, out_$i253, out_$i254, out_$i255, out_$p256, out_$p257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$p264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117 := in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$p76, in_$i78, in_$i79, in_$p80, in_$i81, in_$i82, in_$p83, in_$i84, in_$i85, in_$p86, in_$i87, in_$i88, in_$p89, in_$i90, in_$i91, in_$p92, in_$i93, in_$i94, in_$p95, in_$i96, in_$i97, in_$p98, in_$p99, in_$i100, in_$i101, in_$p102, in_$p103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$p111, in_$i112, in_$i113, in_$p114, in_$i115, in_$i116, in_$p117, in_$i119, in_$i120, in_$p121, in_$i123, in_$i124, in_$p125, in_$i127, in_$i128, in_$p129, in_$i131, in_$i132, in_$p133, in_$i134, in_$i135, in_$p136, in_$i137, in_$i138, in_$p139, in_$i141, in_$i142, in_$p143, in_$i145, in_$i146, in_$p147, in_$i149, in_$i150, in_$p151, in_$i153, in_$i154, in_$p155, in_$i157, in_$i158, in_$p159, in_$i161, in_$i162, in_$p163, in_$i165, in_$i166, in_$p167, in_$i169, in_$i170, in_$p171, in_$i173, in_$i174, in_$p175, in_$i177, in_$i178, in_$i179, in_$i180, in_$i181, in_$i182, in_$i183, in_$i184, in_$i185, in_$i186, in_$i187, in_$i188, in_$i189, in_$i190, in_$i191, in_$i192, in_$i193, in_$i194, in_$i195, in_$i196, in_$i197, in_$i198, in_$i199, in_$i200, in_$i201, in_$i202, in_$p203, in_$i204, in_$i205, in_$i206, in_$i207, in_$i208, in_$i209, in_$i210, in_$p211, in_$i212, in_$i213, in_$i214, in_$i215, in_$p216, in_$i217, in_$i218, in_$i219, in_$i220, in_$i221, in_$i222, in_$i223, in_$i224, in_$i225, in_$i226, in_$i227, in_$p228, in_$i229, in_$i230, in_$i231, in_$i232, in_$i233, in_$i234, in_$i235, in_$p236, in_$i237, in_$i238, in_$i239, in_$i240, in_$i241, in_$i242, in_$i243, in_$p244, in_$i245, in_$i246, in_$i247, in_$i248, in_$i249, in_$i250, in_$p251, in_$i252, in_$i253, in_$i254, in_$i255, in_$p256, in_$p257, in_$i258, in_$i259, in_$i260, in_$i261, in_$i262, in_$i263, in_$p264, in_$i265, in_$i266, in_$i267, in_$i268, in_$i269, in_$i270, in_$i271, in_$i272, in_$i273, in_vslice_dummy_var_100, in_vslice_dummy_var_101, in_vslice_dummy_var_102, in_vslice_dummy_var_103, in_vslice_dummy_var_104, in_vslice_dummy_var_105, in_vslice_dummy_var_106, in_vslice_dummy_var_107, in_vslice_dummy_var_108, in_vslice_dummy_var_109, in_vslice_dummy_var_110, in_vslice_dummy_var_111, in_vslice_dummy_var_112, in_vslice_dummy_var_113, in_vslice_dummy_var_114, in_vslice_dummy_var_115, in_vslice_dummy_var_116, in_vslice_dummy_var_117;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 890} out_$i32 := __VERIFIER_nondet_int();
    call {:si_unique_call 891} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i32);
    call {:si_unique_call 892} {:cexpr "tmp___19"} boogie_si_record_i32(out_$i32);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb32_dummy;

  $bb296:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb294:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb282:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb21:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb26:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 897} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4775;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} out_vslice_dummy_var_100 := show_caps(in_$p3, in_$p5, in_$p1);
    goto corral_source_split_4774;

  $bb25:
    assume out_$i46 == 1;
    goto corral_source_split_4773;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i45, 1);
    goto corral_source_split_4771;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    out_$i45 := $M.23;
    goto corral_source_split_4770;

  $bb23:
    assume out_$i44 == 1;
    goto corral_source_split_4769;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i43, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_4767:
    assume {:verifier.code 1} true;
    call {:si_unique_call 893} out_$i43 := __VERIFIER_nondet_int();
    call {:si_unique_call 894} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i43);
    call {:si_unique_call 895} {:cexpr "tmp___20"} boogie_si_record_i32(out_$i43);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume out_$i42 == 1;
    goto corral_source_split_4767;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(out_$i41, 0);
    goto corral_source_split_4765;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    out_$i41 := $M.23;
    goto corral_source_split_4764;

  $bb18:
    assume out_$i40 == 1;
    goto corral_source_split_4763;

  $bb14:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i32, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb3:
    assume out_$i33 == 1;
    assume {:verifier.code 0} true;
    out_$i38 := $slt.i32(out_$i32, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i33 := $slt.i32(out_$i32, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} ldv_stop();
    goto corral_source_split_4777;

  $bb24:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb34:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb39:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 903} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4787;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} out_vslice_dummy_var_101 := show_country_rel_date(in_$p8, in_$p10, in_$p6);
    goto corral_source_split_4786;

  $bb38:
    assume out_$i53 == 1;
    goto corral_source_split_4785;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i52, 1);
    goto corral_source_split_4783;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    out_$i52 := $M.24;
    goto corral_source_split_4782;

  $bb36:
    assume out_$i51 == 1;
    goto corral_source_split_4781;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i32(out_$i50, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_4779:
    assume {:verifier.code 1} true;
    call {:si_unique_call 899} out_$i50 := __VERIFIER_nondet_int();
    call {:si_unique_call 900} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i50);
    call {:si_unique_call 901} {:cexpr "tmp___21"} boogie_si_record_i32(out_$i50);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb33:
    assume out_$i49 == 1;
    goto corral_source_split_4779;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i32(out_$i48, 0);
    goto corral_source_split_4757;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    out_$i48 := $M.24;
    goto corral_source_split_4756;

  $bb16:
    assume out_$i39 == 1;
    goto corral_source_split_4755;

  $bb15:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    out_$i39 := $slt.i32(out_$i32, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} ldv_stop();
    goto corral_source_split_4789;

  $bb37:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb46:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb82:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $M.25 := 2;
    call {:si_unique_call 909} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4856;

  SeqInstr_87:
    goto corral_source_split_4855;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} out_vslice_dummy_var_102 := acm_tty_write(out_$p76, in_$p18, in_$i19);
    goto SeqInstr_86;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    out_$p76 := $M.21;
    goto corral_source_split_4854;

  $bb81:
    assume out_$i75 == 1;
    goto corral_source_split_4853;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    out_$i75 := $eq.i32(out_$i74, 2);
    goto corral_source_split_4851;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    out_$i74 := $M.25;
    goto corral_source_split_4850;

  $bb79:
    assume out_$i73 == 1;
    goto corral_source_split_4849;

  $bb75:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$i73 := $eq.i32(out_$i57, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb67:
    assume out_$i67 == 1;
    assume {:verifier.code 0} true;
    out_$i71 := $slt.i32(out_$i57, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb48:
    assume out_$i58 == 1;
    assume {:verifier.code 0} true;
    out_$i67 := $slt.i32(out_$i57, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i58 := $slt.i32(out_$i57, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_4791:
    assume {:verifier.code 1} true;
    call {:si_unique_call 905} out_$i57 := __VERIFIER_nondet_int();
    call {:si_unique_call 906} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i57);
    call {:si_unique_call 907} {:cexpr "tmp___22"} boogie_si_record_i32(out_$i57);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb45:
    assume out_$i56 == 1;
    goto corral_source_split_4791;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i32(out_$i55, 0);
    goto corral_source_split_4761;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    out_$i55 := $M.25;
    goto corral_source_split_4760;

  $bb17:
    assume !(out_$i39 == 1);
    goto corral_source_split_4759;

  $bb89:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $M.25 := 2;
    call {:si_unique_call 913} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4869;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} acm_tty_cleanup(out_$p83);
    goto corral_source_split_4868;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    out_$p83 := $M.21;
    goto corral_source_split_4867;

  $bb88:
    assume out_$i82 == 1;
    goto corral_source_split_4866;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    out_$i82 := $eq.i32(out_$i81, 2);
    goto corral_source_split_4864;

  $bb87:
    assume {:verifier.code 0} true;
    out_$i81 := $M.25;
    goto corral_source_split_4863;

  $bb86:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 911} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4861;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} acm_tty_cleanup(out_$p80);
    goto corral_source_split_4860;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    out_$p80 := $M.21;
    goto corral_source_split_4859;

  $bb85:
    assume out_$i79 == 1;
    goto corral_source_split_4858;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    out_$i79 := $eq.i32(out_$i78, 1);
    goto corral_source_split_4843;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    out_$i78 := $M.25;
    goto corral_source_split_4842;

  $bb77:
    assume out_$i72 == 1;
    goto corral_source_split_4841;

  $bb76:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    out_$i72 := $slt.i32(out_$i57, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb95:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $M.25 := 2;
    call {:si_unique_call 917} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4882;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} acm_tty_throttle(out_$p89);
    goto corral_source_split_4881;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    out_$p89 := $M.21;
    goto corral_source_split_4880;

  $bb94:
    assume out_$i88 == 1;
    goto corral_source_split_4879;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    out_$i88 := $eq.i32(out_$i87, 2);
    goto corral_source_split_4877;

  $bb93:
    assume {:verifier.code 0} true;
    out_$i87 := $M.25;
    goto corral_source_split_4876;

  $bb92:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 915} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4874;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} acm_tty_throttle(out_$p86);
    goto corral_source_split_4873;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    out_$p86 := $M.21;
    goto corral_source_split_4872;

  $bb91:
    assume out_$i85 == 1;
    goto corral_source_split_4871;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    out_$i85 := $eq.i32(out_$i84, 1);
    goto corral_source_split_4847;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    out_$i84 := $M.25;
    goto corral_source_split_4846;

  $bb78:
    assume !(out_$i72 == 1);
    goto corral_source_split_4845;

  $bb101:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $M.25 := 2;
    call {:si_unique_call 921} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4895;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} acm_tty_hangup(out_$p95);
    goto corral_source_split_4894;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    out_$p95 := $M.21;
    goto corral_source_split_4893;

  $bb100:
    assume out_$i94 == 1;
    goto corral_source_split_4892;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    out_$i94 := $eq.i32(out_$i93, 2);
    goto corral_source_split_4890;

  $bb99:
    assume {:verifier.code 0} true;
    out_$i93 := $M.25;
    goto corral_source_split_4889;

  $bb98:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 919} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4887;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} acm_tty_hangup(out_$p92);
    goto corral_source_split_4886;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    out_$p92 := $M.21;
    goto corral_source_split_4885;

  $bb97:
    assume out_$i91 == 1;
    goto corral_source_split_4884;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    out_$i91 := $eq.i32(out_$i90, 1);
    goto corral_source_split_4835;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    out_$i90 := $M.25;
    goto corral_source_split_4834;

  $bb73:
    assume out_$i70 == 1;
    goto corral_source_split_4833;

  $bb69:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$i70 := $slt.i32(out_$i57, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb68:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    out_$i68 := $slt.i32(out_$i57, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb104:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 923} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4901;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} acm_tty_close(out_$p98, out_$p99);
    goto corral_source_split_4900;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    out_$p99 := $M.20;
    goto corral_source_split_4899;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    out_$p98 := $M.21;
    goto corral_source_split_4898;

  $bb103:
    assume out_$i97 == 1;
    goto corral_source_split_4897;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    out_$i97 := $eq.i32(out_$i96, 2);
    goto corral_source_split_4839;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    out_$i96 := $M.25;
    goto corral_source_split_4838;

  $bb74:
    assume !(out_$i70 == 1);
    goto corral_source_split_4837;

  $bb107:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb109:
    assume !(out_$i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    goto $bb110;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $M.26 := out_$i108;
    call {:si_unique_call 927} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i108);
    goto corral_source_split_4915;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    out_$i108 := $add.i32(out_$i107, 1);
    goto corral_source_split_4914;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    out_$i107 := $M.26;
    goto corral_source_split_4913;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $M.25 := 2;
    call {:si_unique_call 926} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4912;

  $bb108:
    assume out_$i106 == 1;
    goto corral_source_split_4911;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    out_$i106 := $eq.i32(out_$i105, 0);
    goto corral_source_split_4909;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    out_$i105 := $M.31;
    goto corral_source_split_4908;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $M.31 := out_$i104;
    call {:si_unique_call 925} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i104);
    goto corral_source_split_4907;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} out_$i104 := acm_tty_open(out_$p102, out_$p103);
    goto corral_source_split_4906;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    out_$p103 := $M.20;
    goto corral_source_split_4905;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    out_$p102 := $M.21;
    goto corral_source_split_4904;

  $bb106:
    assume out_$i101 == 1;
    goto corral_source_split_4903;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    out_$i101 := $eq.i32(out_$i100, 1);
    goto corral_source_split_4827;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    out_$i100 := $M.25;
    goto corral_source_split_4826;

  $bb71:
    assume out_$i69 == 1;
    goto corral_source_split_4825;

  $bb70:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    out_$i69 := $slt.i32(out_$i57, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb116:
    assume !(out_$i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $M.25 := 2;
    call {:si_unique_call 931} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4928;

  SeqInstr_93:
    goto corral_source_split_4927;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} acm_tty_unthrottle(out_$p114);
    goto SeqInstr_92;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    out_$p114 := $M.21;
    goto corral_source_split_4926;

  $bb115:
    assume out_$i113 == 1;
    goto corral_source_split_4925;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    out_$i113 := $eq.i32(out_$i112, 2);
    goto corral_source_split_4923;

  $bb114:
    assume {:verifier.code 0} true;
    out_$i112 := $M.25;
    goto corral_source_split_4922;

  $bb113:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 929} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4920;

  SeqInstr_90:
    goto corral_source_split_4919;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} acm_tty_unthrottle(out_$p111);
    goto SeqInstr_89;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    out_$p111 := $M.21;
    goto corral_source_split_4918;

  $bb112:
    assume out_$i110 == 1;
    goto corral_source_split_4917;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    out_$i110 := $eq.i32(out_$i109, 1);
    goto corral_source_split_4831;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    out_$i109 := $M.25;
    goto corral_source_split_4830;

  $bb72:
    assume !(out_$i69 == 1);
    goto corral_source_split_4829;

  $bb122:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    goto $bb123;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $M.25 := 2;
    call {:si_unique_call 935} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4941;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} out_vslice_dummy_var_104 := acm_tty_write_room(out_$p121);
    goto corral_source_split_4940;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    out_$p121 := $M.21;
    goto corral_source_split_4939;

  $bb121:
    assume out_$i120 == 1;
    goto corral_source_split_4938;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    out_$i120 := $eq.i32(out_$i119, 2);
    goto corral_source_split_4936;

  $bb120:
    assume {:verifier.code 0} true;
    out_$i119 := $M.25;
    goto corral_source_split_4935;

  $bb119:
    assume !(out_$i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 933} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4933;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} out_vslice_dummy_var_103 := acm_tty_write_room(out_$p117);
    goto corral_source_split_4932;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    out_$p117 := $M.21;
    goto corral_source_split_4931;

  $bb118:
    assume out_$i116 == 1;
    goto corral_source_split_4930;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    out_$i116 := $eq.i32(out_$i115, 1);
    goto corral_source_split_4819;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    out_$i115 := $M.25;
    goto corral_source_split_4818;

  $bb65:
    assume out_$i66 == 1;
    goto corral_source_split_4817;

  $bb61:
    assume out_$i64 == 1;
    assume {:verifier.code 0} true;
    out_$i66 := $slt.i32(out_$i57, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb50:
    assume out_$i59 == 1;
    assume {:verifier.code 0} true;
    out_$i64 := $slt.i32(out_$i57, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb49:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    out_$i59 := $slt.i32(out_$i57, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb128:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $M.25 := 2;
    call {:si_unique_call 939} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4954;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} out_vslice_dummy_var_106 := acm_tty_break_ctl(out_$p129, in_$i14);
    goto corral_source_split_4953;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    out_$p129 := $M.21;
    goto corral_source_split_4952;

  $bb127:
    assume out_$i128 == 1;
    goto corral_source_split_4951;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    out_$i128 := $eq.i32(out_$i127, 2);
    goto corral_source_split_4949;

  $bb126:
    assume {:verifier.code 0} true;
    out_$i127 := $M.25;
    goto corral_source_split_4948;

  $bb125:
    assume !(out_$i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 937} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4946;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} out_vslice_dummy_var_105 := acm_tty_break_ctl(out_$p125, in_$i14);
    goto corral_source_split_4945;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    out_$p125 := $M.21;
    goto corral_source_split_4944;

  $bb124:
    assume out_$i124 == 1;
    goto corral_source_split_4943;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    out_$i124 := $eq.i32(out_$i123, 1);
    goto corral_source_split_4823;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    out_$i123 := $M.25;
    goto corral_source_split_4822;

  $bb66:
    assume !(out_$i66 == 1);
    goto corral_source_split_4821;

  $bb134:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $M.25 := 2;
    call {:si_unique_call 943} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4967;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} acm_tty_set_termios(out_$p136, in_$p12);
    goto corral_source_split_4966;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    out_$p136 := $M.21;
    goto corral_source_split_4965;

  $bb133:
    assume out_$i135 == 1;
    goto corral_source_split_4964;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    out_$i135 := $eq.i32(out_$i134, 2);
    goto corral_source_split_4962;

  $bb132:
    assume {:verifier.code 0} true;
    out_$i134 := $M.25;
    goto corral_source_split_4961;

  $bb131:
    assume !(out_$i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 941} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4959;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} acm_tty_set_termios(out_$p133, in_$p12);
    goto corral_source_split_4958;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    out_$p133 := $M.21;
    goto corral_source_split_4957;

  $bb130:
    assume out_$i132 == 1;
    goto corral_source_split_4956;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    out_$i132 := $eq.i32(out_$i131, 1);
    goto corral_source_split_4811;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    out_$i131 := $M.25;
    goto corral_source_split_4810;

  $bb63:
    assume out_$i65 == 1;
    goto corral_source_split_4809;

  $bb62:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    out_$i65 := $slt.i32(out_$i57, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb140:
    assume !(out_$i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $M.25 := 2;
    call {:si_unique_call 947} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4980;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} out_vslice_dummy_var_108 := acm_tty_ioctl(out_$p143, in_$i20, in_$i21);
    goto corral_source_split_4979;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    out_$p143 := $M.21;
    goto corral_source_split_4978;

  $bb139:
    assume out_$i142 == 1;
    goto corral_source_split_4977;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    out_$i142 := $eq.i32(out_$i141, 2);
    goto corral_source_split_4975;

  $bb138:
    assume {:verifier.code 0} true;
    out_$i141 := $M.25;
    goto corral_source_split_4974;

  $bb137:
    assume !(out_$i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 945} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4972;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} out_vslice_dummy_var_107 := acm_tty_ioctl(out_$p139, in_$i20, in_$i21);
    goto corral_source_split_4971;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    out_$p139 := $M.21;
    goto corral_source_split_4970;

  $bb136:
    assume out_$i138 == 1;
    goto corral_source_split_4969;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    out_$i138 := $eq.i32(out_$i137, 1);
    goto corral_source_split_4815;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    out_$i137 := $M.25;
    goto corral_source_split_4814;

  $bb64:
    assume !(out_$i65 == 1);
    goto corral_source_split_4813;

  $bb146:
    assume !(out_$i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    goto $bb147;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $M.25 := 2;
    call {:si_unique_call 951} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4993;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} out_vslice_dummy_var_110 := acm_tty_chars_in_buffer(out_$p151);
    goto corral_source_split_4992;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    out_$p151 := $M.21;
    goto corral_source_split_4991;

  $bb145:
    assume out_$i150 == 1;
    goto corral_source_split_4990;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    out_$i150 := $eq.i32(out_$i149, 2);
    goto corral_source_split_4988;

  $bb144:
    assume {:verifier.code 0} true;
    out_$i149 := $M.25;
    goto corral_source_split_4987;

  $bb143:
    assume !(out_$i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 949} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4985;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} out_vslice_dummy_var_109 := acm_tty_chars_in_buffer(out_$p147);
    goto corral_source_split_4984;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    out_$p147 := $M.21;
    goto corral_source_split_4983;

  $bb142:
    assume out_$i146 == 1;
    goto corral_source_split_4982;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    out_$i146 := $eq.i32(out_$i145, 1);
    goto corral_source_split_4803;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    out_$i145 := $M.25;
    goto corral_source_split_4802;

  $bb59:
    assume out_$i63 == 1;
    goto corral_source_split_4801;

  $bb52:
    assume out_$i60 == 1;
    assume {:verifier.code 0} true;
    out_$i63 := $slt.i32(out_$i57, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb51:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    out_$i60 := $slt.i32(out_$i57, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb152:
    assume !(out_$i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    goto $bb153;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $M.25 := 2;
    call {:si_unique_call 955} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5006;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} out_vslice_dummy_var_112 := acm_tty_tiocmget(out_$p159);
    goto corral_source_split_5005;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    out_$p159 := $M.21;
    goto corral_source_split_5004;

  $bb151:
    assume out_$i158 == 1;
    goto corral_source_split_5003;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    out_$i158 := $eq.i32(out_$i157, 2);
    goto corral_source_split_5001;

  $bb150:
    assume {:verifier.code 0} true;
    out_$i157 := $M.25;
    goto corral_source_split_5000;

  $bb149:
    assume !(out_$i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    goto $bb150;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 953} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4998;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} out_vslice_dummy_var_111 := acm_tty_tiocmget(out_$p155);
    goto corral_source_split_4997;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    out_$p155 := $M.21;
    goto corral_source_split_4996;

  $bb148:
    assume out_$i154 == 1;
    goto corral_source_split_4995;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    out_$i154 := $eq.i32(out_$i153, 1);
    goto corral_source_split_4807;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    out_$i153 := $M.25;
    goto corral_source_split_4806;

  $bb60:
    assume !(out_$i63 == 1);
    goto corral_source_split_4805;

  $bb158:
    assume !(out_$i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    goto $bb159;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $M.25 := 2;
    call {:si_unique_call 959} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5019;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} out_vslice_dummy_var_114 := acm_tty_install(in_$p17, out_$p167);
    goto corral_source_split_5018;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    out_$p167 := $M.21;
    goto corral_source_split_5017;

  $bb157:
    assume out_$i166 == 1;
    goto corral_source_split_5016;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    out_$i166 := $eq.i32(out_$i165, 2);
    goto corral_source_split_5014;

  $bb156:
    assume {:verifier.code 0} true;
    out_$i165 := $M.25;
    goto corral_source_split_5013;

  $bb155:
    assume !(out_$i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    goto $bb156;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 957} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5011;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} out_vslice_dummy_var_113 := acm_tty_install(in_$p17, out_$p163);
    goto corral_source_split_5010;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    out_$p163 := $M.21;
    goto corral_source_split_5009;

  $bb154:
    assume out_$i162 == 1;
    goto corral_source_split_5008;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    out_$i162 := $eq.i32(out_$i161, 1);
    goto corral_source_split_4795;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    out_$i161 := $M.25;
    goto corral_source_split_4794;

  $bb54:
    assume out_$i61 == 1;
    goto corral_source_split_4793;

  $bb53:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    out_$i61 := $slt.i32(out_$i57, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb164:
    assume !(out_$i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    goto $bb165;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $M.25 := 2;
    call {:si_unique_call 963} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5032;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} out_vslice_dummy_var_116 := acm_tty_tiocmset(out_$p175, in_$i13, in_$i15);
    goto corral_source_split_5031;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    out_$p175 := $M.21;
    goto corral_source_split_5030;

  $bb163:
    assume out_$i174 == 1;
    goto corral_source_split_5029;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    out_$i174 := $eq.i32(out_$i173, 2);
    goto corral_source_split_5027;

  $bb162:
    assume {:verifier.code 0} true;
    out_$i173 := $M.25;
    goto corral_source_split_5026;

  $bb161:
    assume !(out_$i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    goto $bb162;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 961} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5024;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} out_vslice_dummy_var_115 := acm_tty_tiocmset(out_$p171, in_$i13, in_$i15);
    goto corral_source_split_5023;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    out_$p171 := $M.21;
    goto corral_source_split_5022;

  $bb160:
    assume out_$i170 == 1;
    goto corral_source_split_5021;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    out_$i170 := $eq.i32(out_$i169, 1);
    goto corral_source_split_4799;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    out_$i169 := $M.25;
    goto corral_source_split_4798;

  $bb56:
    assume out_$i62 == 1;
    goto corral_source_split_4797;

  $bb55:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    out_$i62 := $eq.i32(out_$i57, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} ldv_stop();
    goto corral_source_split_5034;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb57:
    assume {:verifier.code 0} true;
    assume !(out_$i62 == 1);
    goto $bb58;

  $bb80:
    assume {:verifier.code 0} true;
    assume !(out_$i73 == 1);
    goto $bb58;

  $bb170:
    assume !(out_$i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb180:
    assume {:verifier.code 0} true;
    assume !(out_$i184 == 1);
    goto $bb181;

  $bb183:
    assume {:verifier.code 0} true;
    assume !(out_$i186 == 1);
    goto $bb181;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    out_$i186 := $eq.i32(out_$i185, 0);
    goto corral_source_split_5048;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    out_$i185 := $M.26;
    goto corral_source_split_5047;

  $bb179:
    assume out_$i184 == 1;
    goto corral_source_split_5046;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    out_$i184 := $eq.i32(out_$i183, 3);
    goto corral_source_split_5044;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    out_$i183 := $M.27;
    goto corral_source_split_5043;

  $bb177:
    assume out_$i182 == 1;
    goto corral_source_split_5042;

  $bb172:
    assume out_$i180 == 1;
    assume {:verifier.code 0} true;
    out_$i182 := $eq.i32(out_$i179, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb171:
    assume {:verifier.code 0} true;
    out_$i180 := $slt.i32(out_$i179, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  corral_source_split_5036:
    assume {:verifier.code 1} true;
    call {:si_unique_call 965} out_$i179 := __VERIFIER_nondet_int();
    call {:si_unique_call 966} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i179);
    call {:si_unique_call 967} {:cexpr "tmp___23"} boogie_si_record_i32(out_$i179);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb169:
    assume out_$i178 == 1;
    goto corral_source_split_5036;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    out_$i178 := $ne.i32(out_$i177, 0);
    goto corral_source_split_4749;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    out_$i177 := $M.27;
    goto corral_source_split_4748;

  $bb12:
    assume out_$i37 == 1;
    goto corral_source_split_4747;

  $bb5:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i37 := $slt.i32(out_$i32, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb4:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    out_$i34 := $slt.i32(out_$i32, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb188:
    assume !(out_$i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb193:
    assume !(out_$i193 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    out_$i193 := $ne.i32(out_$i192, 0);
    goto corral_source_split_5073;

  $bb191:
    assume {:verifier.code 0} true;
    out_$i192 := $M.32;
    goto corral_source_split_5072;

  $bb190:
    assume !(out_$i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    goto $bb191;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 980} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5070;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 979} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5069;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} ldv_initialize_tty_operations_1();
    goto corral_source_split_5068;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 977} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5067;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} ldv_tty_port_operations_3();
    goto corral_source_split_5066;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 975} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5065;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 974} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5064;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $M.27 := 3;
    call {:si_unique_call 973} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_5063;

  $bb189:
    assume out_$i191 == 1;
    goto corral_source_split_5062;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    out_$i191 := $eq.i32(out_$i190, 0);
    goto corral_source_split_5060;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    out_$i190 := $M.32;
    goto corral_source_split_5059;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $M.32 := out_$i189;
    call {:si_unique_call 972} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i189);
    goto corral_source_split_5058;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} out_$i189 := acm_init();
    goto corral_source_split_5057;

  $bb187:
    assume out_$i188 == 1;
    goto corral_source_split_5056;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    out_$i188 := $eq.i32(out_$i187, 1);
    goto corral_source_split_5040;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    out_$i187 := $M.27;
    goto corral_source_split_5039;

  $bb174:
    assume out_$i181 == 1;
    goto corral_source_split_5038;

  $bb173:
    assume !(out_$i180 == 1);
    assume {:verifier.code 0} true;
    out_$i181 := $eq.i32(out_$i179, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} ldv_stop();
    goto corral_source_split_5078;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb175:
    assume {:verifier.code 0} true;
    assume !(out_$i181 == 1);
    goto $bb176;

  $bb178:
    assume {:verifier.code 0} true;
    assume !(out_$i182 == 1);
    goto $bb176;

  $bb200:
    assume !(out_$i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb225:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb212:
    assume !(out_$i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb214:
    assume !(out_$i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    goto $bb215;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $M.26 := out_$i208;
    call {:si_unique_call 989} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i208);
    goto corral_source_split_5105;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    out_$i208 := $add.i32(out_$i207, 1);
    goto corral_source_split_5104;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    out_$i207 := $M.26;
    goto corral_source_split_5103;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $M.28 := 2;
    call {:si_unique_call 988} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_5102;

  $bb213:
    assume out_$i206 == 1;
    goto corral_source_split_5101;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    out_$i206 := $eq.i32(out_$i205, 0);
    goto corral_source_split_5099;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    out_$i205 := $M.33;
    goto corral_source_split_5098;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $M.33 := out_$i204;
    call {:si_unique_call 987} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i204);
    goto corral_source_split_5097;

  SeqInstr_99:
    goto corral_source_split_5096;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} out_$i204 := acm_port_activate(out_$p203, in_$p23);
    goto SeqInstr_98;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    out_$p203 := $M.19;
    goto corral_source_split_5095;

  $bb211:
    assume out_$i202 == 1;
    goto corral_source_split_5094;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    out_$i202 := $eq.i32(out_$i201, 1);
    goto corral_source_split_5092;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    out_$i201 := $M.28;
    goto corral_source_split_5091;

  $bb209:
    assume out_$i200 == 1;
    goto corral_source_split_5090;

  $bb202:
    assume out_$i197 == 1;
    assume {:verifier.code 0} true;
    out_$i200 := $eq.i32(out_$i196, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb201:
    assume {:verifier.code 0} true;
    out_$i197 := $slt.i32(out_$i196, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  corral_source_split_5080:
    assume {:verifier.code 1} true;
    call {:si_unique_call 983} out_$i196 := __VERIFIER_nondet_int();
    call {:si_unique_call 984} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i196);
    call {:si_unique_call 985} {:cexpr "tmp___24"} boogie_si_record_i32(out_$i196);
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb199:
    assume out_$i195 == 1;
    goto corral_source_split_5080;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    out_$i195 := $ne.i32(out_$i194, 0);
    goto corral_source_split_4753;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    out_$i194 := $M.28;
    goto corral_source_split_4752;

  $bb13:
    assume !(out_$i37 == 1);
    goto corral_source_split_4751;

  $bb219:
    assume !(out_$i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    goto $bb220;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $M.26 := out_$i213;
    call {:si_unique_call 992} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i213);
    goto corral_source_split_5113;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    out_$i213 := $sub.i32(out_$i212, 1);
    goto corral_source_split_5112;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    out_$i212 := $M.26;
    goto corral_source_split_5111;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 991} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5110;

  SeqInstr_102:
    goto corral_source_split_5109;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} acm_port_shutdown(out_$p211);
    goto SeqInstr_101;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    out_$p211 := $M.19;
    goto corral_source_split_5108;

  $bb218:
    assume out_$i210 == 1;
    goto corral_source_split_5107;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    out_$i210 := $eq.i32(out_$i209, 2);
    goto corral_source_split_5084;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    out_$i209 := $M.28;
    goto corral_source_split_5083;

  $bb204:
    assume out_$i198 == 1;
    goto corral_source_split_5082;

  $bb203:
    assume !(out_$i197 == 1);
    assume {:verifier.code 0} true;
    out_$i198 := $slt.i32(out_$i196, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  $bb222:
    assume !(out_$i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    goto $bb223;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $M.28 := 3;
    call {:si_unique_call 994} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_5118;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} acm_port_destruct(out_$p216);
    goto corral_source_split_5117;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    out_$p216 := $M.19;
    goto corral_source_split_5116;

  $bb221:
    assume out_$i215 == 1;
    goto corral_source_split_5115;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    out_$i215 := $eq.i32(out_$i214, 1);
    goto corral_source_split_5088;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    out_$i214 := $M.28;
    goto corral_source_split_5087;

  $bb206:
    assume out_$i199 == 1;
    goto corral_source_split_5086;

  $bb205:
    assume !(out_$i198 == 1);
    assume {:verifier.code 0} true;
    out_$i199 := $eq.i32(out_$i196, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} ldv_stop();
    goto corral_source_split_5120;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb207:
    assume {:verifier.code 0} true;
    assume !(out_$i199 == 1);
    goto $bb208;

  $bb210:
    assume {:verifier.code 0} true;
    assume !(out_$i200 == 1);
    goto $bb208;

  $bb228:
    assume !(out_$i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb281:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb279:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb244:
    assume !(out_$i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb246:
    assume !(out_$i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    goto $bb247;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $M.26 := out_$i233;
    call {:si_unique_call 1002} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i233);
    goto corral_source_split_5155;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    out_$i233 := $add.i32(out_$i232, 1);
    goto corral_source_split_5154;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    out_$i232 := $M.26;
    goto corral_source_split_5153;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $M.29 := 2;
    call {:si_unique_call 1001} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5152;

  $bb245:
    assume out_$i231 == 1;
    goto corral_source_split_5151;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    out_$i231 := $eq.i32(out_$i230, 0);
    goto corral_source_split_5149;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    out_$i230 := $M.34;
    goto corral_source_split_5148;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $M.34 := out_$i229;
    call {:si_unique_call 1000} {:cexpr "ldv_retval_6"} boogie_si_record_i32(out_$i229);
    goto corral_source_split_5147;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} out_$i229 := acm_probe(out_$p228, in_$p25);
    goto corral_source_split_5146;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    out_$p228 := $M.18;
    goto corral_source_split_5145;

  $bb243:
    assume out_$i227 == 1;
    goto corral_source_split_5144;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    out_$i227 := $eq.i32(out_$i226, 1);
    goto corral_source_split_5142;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    out_$i226 := $M.29;
    goto corral_source_split_5141;

  $bb241:
    assume out_$i225 == 1;
    goto corral_source_split_5140;

  $bb239:
    assume out_$i224 == 1;
    assume {:verifier.code 0} true;
    out_$i225 := $eq.i32(out_$i219, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  $bb230:
    assume out_$i220 == 1;
    assume {:verifier.code 0} true;
    out_$i224 := $slt.i32(out_$i219, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  $bb229:
    assume {:verifier.code 0} true;
    out_$i220 := $slt.i32(out_$i219, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  corral_source_split_5122:
    assume {:verifier.code 1} true;
    call {:si_unique_call 996} out_$i219 := __VERIFIER_nondet_int();
    call {:si_unique_call 997} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i219);
    call {:si_unique_call 998} {:cexpr "tmp___25"} boogie_si_record_i32(out_$i219);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb227:
    assume out_$i218 == 1;
    goto corral_source_split_5122;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    out_$i218 := $ne.i32(out_$i217, 0);
    goto corral_source_split_4741;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    out_$i217 := $M.29;
    goto corral_source_split_4740;

  $bb7:
    assume out_$i35 == 1;
    goto corral_source_split_4739;

  $bb6:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    out_$i35 := $slt.i32(out_$i32, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb251:
    assume !(out_$i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb254:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb253:
    assume !(out_$i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb254;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    goto $bb254;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $M.29 := 2;
    call {:si_unique_call 1005} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5165;

  $bb252:
    assume out_$i239 == 1;
    goto corral_source_split_5164;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    out_$i239 := $eq.i32(out_$i238, 0);
    goto corral_source_split_5162;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    out_$i238 := $M.35;
    goto corral_source_split_5161;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $M.35 := out_$i237;
    call {:si_unique_call 1004} {:cexpr "ldv_retval_5"} boogie_si_record_i32(out_$i237);
    goto corral_source_split_5160;

  SeqInstr_105:
    goto corral_source_split_5159;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} out_$i237 := acm_reset_resume(out_$p236);
    goto SeqInstr_104;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    out_$p236 := $M.18;
    goto corral_source_split_5158;

  $bb250:
    assume out_$i235 == 1;
    goto corral_source_split_5157;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb250, $bb251;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    out_$i235 := $eq.i32(out_$i234, 3);
    goto corral_source_split_5138;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    out_$i234 := $M.29;
    goto corral_source_split_5137;

  $bb240:
    assume !(out_$i224 == 1);
    goto corral_source_split_5136;

  $bb264:
    assume {:verifier.code 0} true;
    goto $bb267;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    goto $bb267;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $M.26 := out_$i253;
    call {:si_unique_call 1011} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i253);
    goto corral_source_split_5192;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    out_$i253 := $sub.i32(out_$i252, 1);
    goto corral_source_split_5191;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    out_$i252 := $M.26;
    goto corral_source_split_5190;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 1010} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5189;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} acm_disconnect(out_$p251);
    goto corral_source_split_5188;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    out_$p251 := $M.18;
    goto corral_source_split_5187;

  $bb265:
    assume out_$i250 == 1;
    goto corral_source_split_5186;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb265, $bb266;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    out_$i250 := $eq.i32(out_$i249, 0);
    goto corral_source_split_5184;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    out_$i249 := $M.36;
    goto corral_source_split_5183;

  $bb262:
    assume out_$i248 == 1;
    goto corral_source_split_5182;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb262, $bb263;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    out_$i248 := $eq.i32(out_$i247, 2);
    goto corral_source_split_5180;

  $bb261:
    assume {:verifier.code 0} true;
    out_$i247 := $M.29;
    goto corral_source_split_5179;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb261;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    goto $bb261;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $M.26 := out_$i246;
    call {:si_unique_call 1008} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i246);
    goto corral_source_split_5177;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    out_$i246 := $sub.i32(out_$i245, 1);
    goto corral_source_split_5176;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    out_$i245 := $M.26;
    goto corral_source_split_5175;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 1007} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5174;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} acm_disconnect(out_$p244);
    goto corral_source_split_5173;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    out_$p244 := $M.18;
    goto corral_source_split_5172;

  $bb259:
    assume out_$i243 == 1;
    goto corral_source_split_5171;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    out_$i243 := $eq.i32(out_$i242, 0);
    goto corral_source_split_5169;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    out_$i242 := $M.36;
    goto corral_source_split_5168;

  $bb256:
    assume out_$i241 == 1;
    goto corral_source_split_5167;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb256, $bb257;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    out_$i241 := $eq.i32(out_$i240, 3);
    goto corral_source_split_5126;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    out_$i240 := $M.29;
    goto corral_source_split_5125;

  $bb232:
    assume out_$i221 == 1;
    goto corral_source_split_5124;

  $bb231:
    assume !(out_$i220 == 1);
    assume {:verifier.code 0} true;
    out_$i221 := $slt.i32(out_$i219, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  $bb257:
    assume {:verifier.code 0} true;
    assume !(out_$i241 == 1);
    goto $bb258;

  $bb260:
    assume {:verifier.code 0} true;
    assume !(out_$i243 == 1);
    goto $bb258;

  $bb263:
    assume {:verifier.code 0} true;
    assume !(out_$i248 == 1);
    goto $bb264;

  $bb266:
    assume {:verifier.code 0} true;
    assume !(out_$i250 == 1);
    goto $bb264;

  $bb269:
    assume !(out_$i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb272:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb271:
    assume !(out_$i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb272;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    goto $bb272;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $M.29 := 3;
    call {:si_unique_call 1014} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_5204;

  $bb270:
    assume out_$i261 == 1;
    goto corral_source_split_5203;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb270, $bb271;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    out_$i261 := $eq.i32(out_$i260, 0);
    goto corral_source_split_5201;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    out_$i260 := $M.37;
    goto corral_source_split_5200;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $M.37 := out_$i259;
    call {:si_unique_call 1013} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i259);
    goto corral_source_split_5199;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} out_$i259 := acm_suspend(out_$p256, out_$i258);
    goto corral_source_split_5198;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    out_$i258 := $load.i32($M.22, out_$p257);
    goto corral_source_split_5197;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    out_$p257 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5196;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    out_$p256 := $M.18;
    goto corral_source_split_5195;

  $bb268:
    assume out_$i255 == 1;
    goto corral_source_split_5194;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb268, $bb269;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    out_$i255 := $eq.i32(out_$i254, 2);
    goto corral_source_split_5130;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    out_$i254 := $M.29;
    goto corral_source_split_5129;

  $bb234:
    assume out_$i222 == 1;
    goto corral_source_split_5128;

  $bb233:
    assume !(out_$i221 == 1);
    assume {:verifier.code 0} true;
    out_$i222 := $slt.i32(out_$i219, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234, $bb235;

  $bb275:
    assume !(out_$i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb278:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb277:
    assume !(out_$i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb278;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    goto $bb278;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $M.29 := 2;
    call {:si_unique_call 1017} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5214;

  $bb276:
    assume out_$i267 == 1;
    goto corral_source_split_5213;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb276, $bb277;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    out_$i267 := $eq.i32(out_$i266, 0);
    goto corral_source_split_5211;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    out_$i266 := $M.38;
    goto corral_source_split_5210;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $M.38 := out_$i265;
    call {:si_unique_call 1016} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i265);
    goto corral_source_split_5209;

  SeqInstr_108:
    goto corral_source_split_5208;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} out_$i265 := acm_resume(out_$p264);
    goto SeqInstr_107;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    out_$p264 := $M.18;
    goto corral_source_split_5207;

  $bb274:
    assume out_$i263 == 1;
    goto corral_source_split_5206;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274, $bb275;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    out_$i263 := $eq.i32(out_$i262, 3);
    goto corral_source_split_5134;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    out_$i262 := $M.29;
    goto corral_source_split_5133;

  $bb236:
    assume out_$i223 == 1;
    goto corral_source_split_5132;

  $bb235:
    assume !(out_$i222 == 1);
    assume {:verifier.code 0} true;
    out_$i223 := $eq.i32(out_$i219, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} ldv_stop();
    goto corral_source_split_5216;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb237:
    assume {:verifier.code 0} true;
    assume !(out_$i223 == 1);
    goto $bb238;

  $bb242:
    assume {:verifier.code 0} true;
    assume !(out_$i225 == 1);
    goto $bb238;

  $bb284:
    assume !(out_$i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb291:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb293:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb290:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb289:
    assume !(out_$i273 == 1);
    assume {:verifier.code 0} true;
    goto $bb290;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    goto $bb290;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 1023} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5226;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} out_vslice_dummy_var_117 := show_country_codes(in_$p27, in_$p29, in_$p30);
    goto corral_source_split_5225;

  $bb288:
    assume out_$i273 == 1;
    goto corral_source_split_5224;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb288, $bb289;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    out_$i273 := $eq.i32(out_$i272, 1);
    goto corral_source_split_5222;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    out_$i272 := $M.30;
    goto corral_source_split_5221;

  $bb286:
    assume out_$i271 == 1;
    goto corral_source_split_5220;

  $bb285:
    assume {:verifier.code 0} true;
    out_$i271 := $eq.i32(out_$i270, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb286, $bb287;

  corral_source_split_5218:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1019} out_$i270 := __VERIFIER_nondet_int();
    call {:si_unique_call 1020} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i270);
    call {:si_unique_call 1021} {:cexpr "tmp___26"} boogie_si_record_i32(out_$i270);
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb283:
    assume out_$i269 == 1;
    goto corral_source_split_5218;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    out_$i269 := $ne.i32(out_$i268, 0);
    goto corral_source_split_4745;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    out_$i268 := $M.30;
    goto corral_source_split_4744;

  $bb9:
    assume out_$i36 == 1;
    goto corral_source_split_4743;

  $bb8:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i32, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} ldv_stop();
    goto corral_source_split_5228;

  $bb287:
    assume !(out_$i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb292;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} ldv_stop();
    goto corral_source_split_5230;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i36 == 1);
    goto $bb11;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i40 == 1);
    goto $bb11;

  $bb32_dummy:
    call {:si_unique_call 1} out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p76, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$p83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i112, out_$i113, out_$p114, out_$i115, out_$i116, out_$p117, out_$i119, out_$i120, out_$p121, out_$i123, out_$i124, out_$p125, out_$i127, out_$i128, out_$p129, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$p136, out_$i137, out_$i138, out_$p139, out_$i141, out_$i142, out_$p143, out_$i145, out_$i146, out_$p147, out_$i149, out_$i150, out_$p151, out_$i153, out_$i154, out_$p155, out_$i157, out_$i158, out_$p159, out_$i161, out_$i162, out_$p163, out_$i165, out_$i166, out_$p167, out_$i169, out_$i170, out_$p171, out_$i173, out_$i174, out_$p175, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$p203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$p211, out_$i212, out_$i213, out_$i214, out_$i215, out_$p216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$p228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$p236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$p244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$p251, out_$i252, out_$i253, out_$i254, out_$i255, out_$p256, out_$p257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$p264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117 := main_loop_$bb1(in_$p0, in_$p1, in_$p3, in_$p5, in_$p6, in_$p8, in_$p10, in_$p12, in_$i13, in_$i14, in_$i15, in_$p17, in_$p18, in_$i19, in_$i20, in_$i21, in_$p23, in_$p25, in_$p27, in_$p29, in_$p30, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p76, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$p83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i112, out_$i113, out_$p114, out_$i115, out_$i116, out_$p117, out_$i119, out_$i120, out_$p121, out_$i123, out_$i124, out_$p125, out_$i127, out_$i128, out_$p129, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$p136, out_$i137, out_$i138, out_$p139, out_$i141, out_$i142, out_$p143, out_$i145, out_$i146, out_$p147, out_$i149, out_$i150, out_$p151, out_$i153, out_$i154, out_$p155, out_$i157, out_$i158, out_$p159, out_$i161, out_$i162, out_$p163, out_$i165, out_$i166, out_$p167, out_$i169, out_$i170, out_$p171, out_$i173, out_$i174, out_$p175, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$p203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$p211, out_$i212, out_$i213, out_$i214, out_$i215, out_$p216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$p228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$p236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$p244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$p251, out_$i252, out_$i253, out_$i254, out_$i255, out_$p256, out_$p257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$p264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p5: ref, in_$p6: ref, in_$p8: ref, in_$p10: ref, in_$p12: ref, in_$i13: i32, in_$i14: i32, in_$i15: i32, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$i21: i64, in_$p23: ref, in_$p25: ref, in_$p27: ref, in_$p29: ref, in_$p30: ref, in_$i32: i32, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i1, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i1, in_$i48: i32, in_$i49: i1, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$i53: i1, in_$i55: i32, in_$i56: i1, in_$i57: i32, in_$i58: i1, in_$i59: i1, in_$i60: i1, in_$i61: i1, in_$i62: i1, in_$i63: i1, in_$i64: i1, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i32, in_$i75: i1, in_$p76: ref, in_$i78: i32, in_$i79: i1, in_$p80: ref, in_$i81: i32, in_$i82: i1, in_$p83: ref, in_$i84: i32, in_$i85: i1, in_$p86: ref, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$i90: i32, in_$i91: i1, in_$p92: ref, in_$i93: i32, in_$i94: i1, in_$p95: ref, in_$i96: i32, in_$i97: i1, in_$p98: ref, in_$p99: ref, in_$i100: i32, in_$i101: i1, in_$p102: ref, in_$p103: ref, in_$i104: i32, in_$i105: i32, in_$i106: i1, in_$i107: i32, in_$i108: i32, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$i112: i32, in_$i113: i1, in_$p114: ref, in_$i115: i32, in_$i116: i1, in_$p117: ref, in_$i119: i32, in_$i120: i1, in_$p121: ref, in_$i123: i32, in_$i124: i1, in_$p125: ref, in_$i127: i32, in_$i128: i1, in_$p129: ref, in_$i131: i32, in_$i132: i1, in_$p133: ref, in_$i134: i32, in_$i135: i1, in_$p136: ref, in_$i137: i32, in_$i138: i1, in_$p139: ref, in_$i141: i32, in_$i142: i1, in_$p143: ref, in_$i145: i32, in_$i146: i1, in_$p147: ref, in_$i149: i32, in_$i150: i1, in_$p151: ref, in_$i153: i32, in_$i154: i1, in_$p155: ref, in_$i157: i32, in_$i158: i1, in_$p159: ref, in_$i161: i32, in_$i162: i1, in_$p163: ref, in_$i165: i32, in_$i166: i1, in_$p167: ref, in_$i169: i32, in_$i170: i1, in_$p171: ref, in_$i173: i32, in_$i174: i1, in_$p175: ref, in_$i177: i32, in_$i178: i1, in_$i179: i32, in_$i180: i1, in_$i181: i1, in_$i182: i1, in_$i183: i32, in_$i184: i1, in_$i185: i32, in_$i186: i1, in_$i187: i32, in_$i188: i1, in_$i189: i32, in_$i190: i32, in_$i191: i1, in_$i192: i32, in_$i193: i1, in_$i194: i32, in_$i195: i1, in_$i196: i32, in_$i197: i1, in_$i198: i1, in_$i199: i1, in_$i200: i1, in_$i201: i32, in_$i202: i1, in_$p203: ref, in_$i204: i32, in_$i205: i32, in_$i206: i1, in_$i207: i32, in_$i208: i32, in_$i209: i32, in_$i210: i1, in_$p211: ref, in_$i212: i32, in_$i213: i32, in_$i214: i32, in_$i215: i1, in_$p216: ref, in_$i217: i32, in_$i218: i1, in_$i219: i32, in_$i220: i1, in_$i221: i1, in_$i222: i1, in_$i223: i1, in_$i224: i1, in_$i225: i1, in_$i226: i32, in_$i227: i1, in_$p228: ref, in_$i229: i32, in_$i230: i32, in_$i231: i1, in_$i232: i32, in_$i233: i32, in_$i234: i32, in_$i235: i1, in_$p236: ref, in_$i237: i32, in_$i238: i32, in_$i239: i1, in_$i240: i32, in_$i241: i1, in_$i242: i32, in_$i243: i1, in_$p244: ref, in_$i245: i32, in_$i246: i32, in_$i247: i32, in_$i248: i1, in_$i249: i32, in_$i250: i1, in_$p251: ref, in_$i252: i32, in_$i253: i32, in_$i254: i32, in_$i255: i1, in_$p256: ref, in_$p257: ref, in_$i258: i32, in_$i259: i32, in_$i260: i32, in_$i261: i1, in_$i262: i32, in_$i263: i1, in_$p264: ref, in_$i265: i32, in_$i266: i32, in_$i267: i1, in_$i268: i32, in_$i269: i1, in_$i270: i32, in_$i271: i1, in_$i272: i32, in_$i273: i1, in_vslice_dummy_var_100: i64, in_vslice_dummy_var_101: i64, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32, in_vslice_dummy_var_105: i32, in_vslice_dummy_var_106: i32, in_vslice_dummy_var_107: i32, in_vslice_dummy_var_108: i32, in_vslice_dummy_var_109: i32, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_111: i32, in_vslice_dummy_var_112: i32, in_vslice_dummy_var_113: i32, in_vslice_dummy_var_114: i32, in_vslice_dummy_var_115: i32, in_vslice_dummy_var_116: i32, in_vslice_dummy_var_117: i64) returns (out_$i32: i32, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i1, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i1, out_$i48: i32, out_$i49: i1, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$i53: i1, out_$i55: i32, out_$i56: i1, out_$i57: i32, out_$i58: i1, out_$i59: i1, out_$i60: i1, out_$i61: i1, out_$i62: i1, out_$i63: i1, out_$i64: i1, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i32, out_$i75: i1, out_$p76: ref, out_$i78: i32, out_$i79: i1, out_$p80: ref, out_$i81: i32, out_$i82: i1, out_$p83: ref, out_$i84: i32, out_$i85: i1, out_$p86: ref, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$i90: i32, out_$i91: i1, out_$p92: ref, out_$i93: i32, out_$i94: i1, out_$p95: ref, out_$i96: i32, out_$i97: i1, out_$p98: ref, out_$p99: ref, out_$i100: i32, out_$i101: i1, out_$p102: ref, out_$p103: ref, out_$i104: i32, out_$i105: i32, out_$i106: i1, out_$i107: i32, out_$i108: i32, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$i112: i32, out_$i113: i1, out_$p114: ref, out_$i115: i32, out_$i116: i1, out_$p117: ref, out_$i119: i32, out_$i120: i1, out_$p121: ref, out_$i123: i32, out_$i124: i1, out_$p125: ref, out_$i127: i32, out_$i128: i1, out_$p129: ref, out_$i131: i32, out_$i132: i1, out_$p133: ref, out_$i134: i32, out_$i135: i1, out_$p136: ref, out_$i137: i32, out_$i138: i1, out_$p139: ref, out_$i141: i32, out_$i142: i1, out_$p143: ref, out_$i145: i32, out_$i146: i1, out_$p147: ref, out_$i149: i32, out_$i150: i1, out_$p151: ref, out_$i153: i32, out_$i154: i1, out_$p155: ref, out_$i157: i32, out_$i158: i1, out_$p159: ref, out_$i161: i32, out_$i162: i1, out_$p163: ref, out_$i165: i32, out_$i166: i1, out_$p167: ref, out_$i169: i32, out_$i170: i1, out_$p171: ref, out_$i173: i32, out_$i174: i1, out_$p175: ref, out_$i177: i32, out_$i178: i1, out_$i179: i32, out_$i180: i1, out_$i181: i1, out_$i182: i1, out_$i183: i32, out_$i184: i1, out_$i185: i32, out_$i186: i1, out_$i187: i32, out_$i188: i1, out_$i189: i32, out_$i190: i32, out_$i191: i1, out_$i192: i32, out_$i193: i1, out_$i194: i32, out_$i195: i1, out_$i196: i32, out_$i197: i1, out_$i198: i1, out_$i199: i1, out_$i200: i1, out_$i201: i32, out_$i202: i1, out_$p203: ref, out_$i204: i32, out_$i205: i32, out_$i206: i1, out_$i207: i32, out_$i208: i32, out_$i209: i32, out_$i210: i1, out_$p211: ref, out_$i212: i32, out_$i213: i32, out_$i214: i32, out_$i215: i1, out_$p216: ref, out_$i217: i32, out_$i218: i1, out_$i219: i32, out_$i220: i1, out_$i221: i1, out_$i222: i1, out_$i223: i1, out_$i224: i1, out_$i225: i1, out_$i226: i32, out_$i227: i1, out_$p228: ref, out_$i229: i32, out_$i230: i32, out_$i231: i1, out_$i232: i32, out_$i233: i32, out_$i234: i32, out_$i235: i1, out_$p236: ref, out_$i237: i32, out_$i238: i32, out_$i239: i1, out_$i240: i32, out_$i241: i1, out_$i242: i32, out_$i243: i1, out_$p244: ref, out_$i245: i32, out_$i246: i32, out_$i247: i32, out_$i248: i1, out_$i249: i32, out_$i250: i1, out_$p251: ref, out_$i252: i32, out_$i253: i32, out_$i254: i32, out_$i255: i1, out_$p256: ref, out_$p257: ref, out_$i258: i32, out_$i259: i32, out_$i260: i32, out_$i261: i1, out_$i262: i32, out_$i263: i1, out_$p264: ref, out_$i265: i32, out_$i266: i32, out_$i267: i1, out_$i268: i32, out_$i269: i1, out_$i270: i32, out_$i271: i1, out_$i272: i32, out_$i273: i1, out_vslice_dummy_var_100: i64, out_vslice_dummy_var_101: i64, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32, out_vslice_dummy_var_105: i32, out_vslice_dummy_var_106: i32, out_vslice_dummy_var_107: i32, out_vslice_dummy_var_108: i32, out_vslice_dummy_var_109: i32, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_111: i32, out_vslice_dummy_var_112: i32, out_vslice_dummy_var_113: i32, out_vslice_dummy_var_114: i32, out_vslice_dummy_var_115: i32, out_vslice_dummy_var_116: i32, out_vslice_dummy_var_117: i64);
  modifies $M.23, $M.24, $M.25, $M.0, $M.11, $M.13, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.15, $M.17, $CurrAddr, $M.9, $M.10, assertsPassed, $M.26, $M.31, $M.16, $M.20, $M.21, $M.19, $M.28, $M.30, $M.27, $M.32, $M.7, $M.29, $M.36, $M.18, $M.33, $M.34, $M.12, $M.14, $M.35, $M.37, $M.8, $M.38;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();


